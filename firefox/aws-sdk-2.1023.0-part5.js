AWS.apiLoader.services["macie2"] = {};

AWS.Macie2 = AWS.Service.defineService("macie2", [ "2020-01-01" ]);

AWS.apiLoader.services["macie2"]["2020-01-01"] = {
    metadata: {
        apiVersion: "2020-01-01",
        endpointPrefix: "macie2",
        signingName: "macie2",
        serviceFullName: "Amazon Macie 2",
        serviceId: "Macie2",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "macie2-2020-01-01",
        signatureVersion: "v4"
    },
    operations: {
        AcceptInvitation: {
            http: {
                requestUri: "/invitations/accept",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    administratorAccountId: {
                        locationName: "administratorAccountId"
                    },
                    invitationId: {
                        locationName: "invitationId"
                    },
                    masterAccount: {
                        locationName: "masterAccount"
                    }
                },
                required: [ "invitationId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchGetCustomDataIdentifiers: {
            http: {
                requestUri: "/custom-data-identifiers/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ids: {
                        shape: "S5",
                        locationName: "ids"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    customDataIdentifiers: {
                        locationName: "customDataIdentifiers",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {
                                    locationName: "arn"
                                },
                                createdAt: {
                                    shape: "S9",
                                    locationName: "createdAt"
                                },
                                deleted: {
                                    locationName: "deleted",
                                    type: "boolean"
                                },
                                description: {
                                    locationName: "description"
                                },
                                id: {
                                    locationName: "id"
                                },
                                name: {
                                    locationName: "name"
                                }
                            }
                        }
                    },
                    notFoundIdentifierIds: {
                        shape: "S5",
                        locationName: "notFoundIdentifierIds"
                    }
                }
            }
        },
        CreateClassificationJob: {
            http: {
                requestUri: "/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    customDataIdentifierIds: {
                        shape: "S5",
                        locationName: "customDataIdentifierIds"
                    },
                    description: {
                        locationName: "description"
                    },
                    initialRun: {
                        locationName: "initialRun",
                        type: "boolean"
                    },
                    jobType: {
                        locationName: "jobType"
                    },
                    managedDataIdentifierIds: {
                        shape: "S5",
                        locationName: "managedDataIdentifierIds"
                    },
                    managedDataIdentifierSelector: {
                        locationName: "managedDataIdentifierSelector"
                    },
                    name: {
                        locationName: "name"
                    },
                    s3JobDefinition: {
                        shape: "Se",
                        locationName: "s3JobDefinition"
                    },
                    samplingPercentage: {
                        locationName: "samplingPercentage",
                        type: "integer"
                    },
                    scheduleFrequency: {
                        shape: "S12",
                        locationName: "scheduleFrequency"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                },
                required: [ "s3JobDefinition", "jobType", "clientToken", "name" ]
            },
            output: {
                type: "structure",
                members: {
                    jobArn: {
                        locationName: "jobArn"
                    },
                    jobId: {
                        locationName: "jobId"
                    }
                }
            }
        },
        CreateCustomDataIdentifier: {
            http: {
                requestUri: "/custom-data-identifiers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    description: {
                        locationName: "description"
                    },
                    ignoreWords: {
                        shape: "S5",
                        locationName: "ignoreWords"
                    },
                    keywords: {
                        shape: "S5",
                        locationName: "keywords"
                    },
                    maximumMatchDistance: {
                        locationName: "maximumMatchDistance",
                        type: "integer"
                    },
                    name: {
                        locationName: "name"
                    },
                    regex: {
                        locationName: "regex"
                    },
                    severityLevels: {
                        shape: "S1a",
                        locationName: "severityLevels"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    customDataIdentifierId: {
                        locationName: "customDataIdentifierId"
                    }
                }
            }
        },
        CreateFindingsFilter: {
            http: {
                requestUri: "/findingsfilters",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    action: {
                        locationName: "action"
                    },
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    description: {
                        locationName: "description"
                    },
                    findingCriteria: {
                        shape: "S1h",
                        locationName: "findingCriteria"
                    },
                    name: {
                        locationName: "name"
                    },
                    position: {
                        locationName: "position",
                        type: "integer"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                },
                required: [ "action", "findingCriteria", "name" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    },
                    id: {
                        locationName: "id"
                    }
                }
            }
        },
        CreateInvitations: {
            http: {
                requestUri: "/invitations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5",
                        locationName: "accountIds"
                    },
                    disableEmailNotification: {
                        locationName: "disableEmailNotification",
                        type: "boolean"
                    },
                    message: {
                        locationName: "message"
                    }
                },
                required: [ "accountIds" ]
            },
            output: {
                type: "structure",
                members: {
                    unprocessedAccounts: {
                        shape: "S1n",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        CreateMember: {
            http: {
                requestUri: "/members",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    account: {
                        locationName: "account",
                        type: "structure",
                        members: {
                            accountId: {
                                locationName: "accountId"
                            },
                            email: {
                                locationName: "email"
                            }
                        },
                        required: [ "email", "accountId" ]
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                },
                required: [ "account" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    }
                }
            }
        },
        CreateSampleFindings: {
            http: {
                requestUri: "/findings/sample",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingTypes: {
                        locationName: "findingTypes",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeclineInvitations: {
            http: {
                requestUri: "/invitations/decline",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5",
                        locationName: "accountIds"
                    }
                },
                required: [ "accountIds" ]
            },
            output: {
                type: "structure",
                members: {
                    unprocessedAccounts: {
                        shape: "S1n",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        DeleteCustomDataIdentifier: {
            http: {
                method: "DELETE",
                requestUri: "/custom-data-identifiers/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFindingsFilter: {
            http: {
                method: "DELETE",
                requestUri: "/findingsfilters/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInvitations: {
            http: {
                requestUri: "/invitations/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5",
                        locationName: "accountIds"
                    }
                },
                required: [ "accountIds" ]
            },
            output: {
                type: "structure",
                members: {
                    unprocessedAccounts: {
                        shape: "S1n",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        DeleteMember: {
            http: {
                method: "DELETE",
                requestUri: "/members/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeBuckets: {
            http: {
                requestUri: "/datasources/s3",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    criteria: {
                        locationName: "criteria",
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                eq: {
                                    shape: "S5",
                                    locationName: "eq"
                                },
                                gt: {
                                    locationName: "gt",
                                    type: "long"
                                },
                                gte: {
                                    locationName: "gte",
                                    type: "long"
                                },
                                lt: {
                                    locationName: "lt",
                                    type: "long"
                                },
                                lte: {
                                    locationName: "lte",
                                    type: "long"
                                },
                                neq: {
                                    shape: "S5",
                                    locationName: "neq"
                                },
                                prefix: {
                                    locationName: "prefix"
                                }
                            }
                        }
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortCriteria: {
                        locationName: "sortCriteria",
                        type: "structure",
                        members: {
                            attributeName: {
                                locationName: "attributeName"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    buckets: {
                        locationName: "buckets",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                allowsUnencryptedObjectUploads: {
                                    locationName: "allowsUnencryptedObjectUploads"
                                },
                                bucketArn: {
                                    locationName: "bucketArn"
                                },
                                bucketCreatedAt: {
                                    shape: "S9",
                                    locationName: "bucketCreatedAt"
                                },
                                bucketName: {
                                    locationName: "bucketName"
                                },
                                classifiableObjectCount: {
                                    locationName: "classifiableObjectCount",
                                    type: "long"
                                },
                                classifiableSizeInBytes: {
                                    locationName: "classifiableSizeInBytes",
                                    type: "long"
                                },
                                errorCode: {
                                    locationName: "errorCode"
                                },
                                errorMessage: {
                                    locationName: "errorMessage"
                                },
                                jobDetails: {
                                    shape: "S2h",
                                    locationName: "jobDetails"
                                },
                                lastUpdated: {
                                    shape: "S9",
                                    locationName: "lastUpdated"
                                },
                                objectCount: {
                                    locationName: "objectCount",
                                    type: "long"
                                },
                                objectCountByEncryptionType: {
                                    shape: "S2k",
                                    locationName: "objectCountByEncryptionType"
                                },
                                publicAccess: {
                                    shape: "S2l",
                                    locationName: "publicAccess"
                                },
                                region: {
                                    locationName: "region"
                                },
                                replicationDetails: {
                                    locationName: "replicationDetails",
                                    type: "structure",
                                    members: {
                                        replicated: {
                                            locationName: "replicated",
                                            type: "boolean"
                                        },
                                        replicatedExternally: {
                                            locationName: "replicatedExternally",
                                            type: "boolean"
                                        },
                                        replicationAccounts: {
                                            shape: "S5",
                                            locationName: "replicationAccounts"
                                        }
                                    }
                                },
                                serverSideEncryption: {
                                    locationName: "serverSideEncryption",
                                    type: "structure",
                                    members: {
                                        kmsMasterKeyId: {
                                            locationName: "kmsMasterKeyId"
                                        },
                                        type: {
                                            locationName: "type"
                                        }
                                    }
                                },
                                sharedAccess: {
                                    locationName: "sharedAccess"
                                },
                                sizeInBytes: {
                                    locationName: "sizeInBytes",
                                    type: "long"
                                },
                                sizeInBytesCompressed: {
                                    locationName: "sizeInBytesCompressed",
                                    type: "long"
                                },
                                tags: {
                                    locationName: "tags",
                                    type: "list",
                                    member: {
                                        shape: "S2y"
                                    }
                                },
                                unclassifiableObjectCount: {
                                    shape: "S2z",
                                    locationName: "unclassifiableObjectCount"
                                },
                                unclassifiableObjectSizeInBytes: {
                                    shape: "S2z",
                                    locationName: "unclassifiableObjectSizeInBytes"
                                },
                                versioning: {
                                    locationName: "versioning",
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeClassificationJob: {
            http: {
                method: "GET",
                requestUri: "/jobs/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                },
                required: [ "jobId" ]
            },
            output: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    createdAt: {
                        shape: "S9",
                        locationName: "createdAt"
                    },
                    customDataIdentifierIds: {
                        shape: "S5",
                        locationName: "customDataIdentifierIds"
                    },
                    description: {
                        locationName: "description"
                    },
                    initialRun: {
                        locationName: "initialRun",
                        type: "boolean"
                    },
                    jobArn: {
                        locationName: "jobArn"
                    },
                    jobId: {
                        locationName: "jobId"
                    },
                    jobStatus: {
                        locationName: "jobStatus"
                    },
                    jobType: {
                        locationName: "jobType"
                    },
                    lastRunErrorStatus: {
                        shape: "S33",
                        locationName: "lastRunErrorStatus"
                    },
                    lastRunTime: {
                        shape: "S9",
                        locationName: "lastRunTime"
                    },
                    managedDataIdentifierIds: {
                        shape: "S5",
                        locationName: "managedDataIdentifierIds"
                    },
                    managedDataIdentifierSelector: {
                        locationName: "managedDataIdentifierSelector"
                    },
                    name: {
                        locationName: "name"
                    },
                    s3JobDefinition: {
                        shape: "Se",
                        locationName: "s3JobDefinition"
                    },
                    samplingPercentage: {
                        locationName: "samplingPercentage",
                        type: "integer"
                    },
                    scheduleFrequency: {
                        shape: "S12",
                        locationName: "scheduleFrequency"
                    },
                    statistics: {
                        locationName: "statistics",
                        type: "structure",
                        members: {
                            approximateNumberOfObjectsToProcess: {
                                locationName: "approximateNumberOfObjectsToProcess",
                                type: "double"
                            },
                            numberOfRuns: {
                                locationName: "numberOfRuns",
                                type: "double"
                            }
                        }
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    },
                    userPausedDetails: {
                        shape: "S37",
                        locationName: "userPausedDetails"
                    }
                }
            }
        },
        DescribeOrganizationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/admin/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    autoEnable: {
                        locationName: "autoEnable",
                        type: "boolean"
                    },
                    maxAccountLimitReached: {
                        locationName: "maxAccountLimitReached",
                        type: "boolean"
                    }
                }
            }
        },
        DisableMacie: {
            http: {
                method: "DELETE",
                requestUri: "/macie",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableOrganizationAdminAccount: {
            http: {
                method: "DELETE",
                requestUri: "/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    adminAccountId: {
                        location: "querystring",
                        locationName: "adminAccountId"
                    }
                },
                required: [ "adminAccountId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFromAdministratorAccount: {
            http: {
                requestUri: "/administrator/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFromMasterAccount: {
            http: {
                requestUri: "/master/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateMember: {
            http: {
                requestUri: "/members/disassociate/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableMacie: {
            http: {
                requestUri: "/macie",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    findingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    status: {
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableOrganizationAdminAccount: {
            http: {
                requestUri: "/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    adminAccountId: {
                        locationName: "adminAccountId"
                    },
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    }
                },
                required: [ "adminAccountId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAdministratorAccount: {
            http: {
                method: "GET",
                requestUri: "/administrator",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    administrator: {
                        shape: "S3s",
                        locationName: "administrator"
                    }
                }
            }
        },
        GetBucketStatistics: {
            http: {
                requestUri: "/datasources/s3/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountId: {
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    bucketCount: {
                        locationName: "bucketCount",
                        type: "long"
                    },
                    bucketCountByEffectivePermission: {
                        locationName: "bucketCountByEffectivePermission",
                        type: "structure",
                        members: {
                            publiclyAccessible: {
                                locationName: "publiclyAccessible",
                                type: "long"
                            },
                            publiclyReadable: {
                                locationName: "publiclyReadable",
                                type: "long"
                            },
                            publiclyWritable: {
                                locationName: "publiclyWritable",
                                type: "long"
                            },
                            unknown: {
                                locationName: "unknown",
                                type: "long"
                            }
                        }
                    },
                    bucketCountByEncryptionType: {
                        locationName: "bucketCountByEncryptionType",
                        type: "structure",
                        members: {
                            kmsManaged: {
                                locationName: "kmsManaged",
                                type: "long"
                            },
                            s3Managed: {
                                locationName: "s3Managed",
                                type: "long"
                            },
                            unencrypted: {
                                locationName: "unencrypted",
                                type: "long"
                            },
                            unknown: {
                                locationName: "unknown",
                                type: "long"
                            }
                        }
                    },
                    bucketCountByObjectEncryptionRequirement: {
                        locationName: "bucketCountByObjectEncryptionRequirement",
                        type: "structure",
                        members: {
                            allowsUnencryptedObjectUploads: {
                                locationName: "allowsUnencryptedObjectUploads",
                                type: "long"
                            },
                            deniesUnencryptedObjectUploads: {
                                locationName: "deniesUnencryptedObjectUploads",
                                type: "long"
                            },
                            unknown: {
                                locationName: "unknown",
                                type: "long"
                            }
                        }
                    },
                    bucketCountBySharedAccessType: {
                        locationName: "bucketCountBySharedAccessType",
                        type: "structure",
                        members: {
                            external: {
                                locationName: "external",
                                type: "long"
                            },
                            internal: {
                                locationName: "internal",
                                type: "long"
                            },
                            notShared: {
                                locationName: "notShared",
                                type: "long"
                            },
                            unknown: {
                                locationName: "unknown",
                                type: "long"
                            }
                        }
                    },
                    classifiableObjectCount: {
                        locationName: "classifiableObjectCount",
                        type: "long"
                    },
                    classifiableSizeInBytes: {
                        locationName: "classifiableSizeInBytes",
                        type: "long"
                    },
                    lastUpdated: {
                        shape: "S9",
                        locationName: "lastUpdated"
                    },
                    objectCount: {
                        locationName: "objectCount",
                        type: "long"
                    },
                    sizeInBytes: {
                        locationName: "sizeInBytes",
                        type: "long"
                    },
                    sizeInBytesCompressed: {
                        locationName: "sizeInBytesCompressed",
                        type: "long"
                    },
                    unclassifiableObjectCount: {
                        shape: "S2z",
                        locationName: "unclassifiableObjectCount"
                    },
                    unclassifiableObjectSizeInBytes: {
                        shape: "S2z",
                        locationName: "unclassifiableObjectSizeInBytes"
                    }
                }
            }
        },
        GetClassificationExportConfiguration: {
            http: {
                method: "GET",
                requestUri: "/classification-export-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    configuration: {
                        shape: "S42",
                        locationName: "configuration"
                    }
                }
            }
        },
        GetCustomDataIdentifier: {
            http: {
                method: "GET",
                requestUri: "/custom-data-identifiers/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    },
                    createdAt: {
                        shape: "S9",
                        locationName: "createdAt"
                    },
                    deleted: {
                        locationName: "deleted",
                        type: "boolean"
                    },
                    description: {
                        locationName: "description"
                    },
                    id: {
                        locationName: "id"
                    },
                    ignoreWords: {
                        shape: "S5",
                        locationName: "ignoreWords"
                    },
                    keywords: {
                        shape: "S5",
                        locationName: "keywords"
                    },
                    maximumMatchDistance: {
                        locationName: "maximumMatchDistance",
                        type: "integer"
                    },
                    name: {
                        locationName: "name"
                    },
                    regex: {
                        locationName: "regex"
                    },
                    severityLevels: {
                        shape: "S1a",
                        locationName: "severityLevels"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                }
            }
        },
        GetFindingStatistics: {
            http: {
                requestUri: "/findings/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingCriteria: {
                        shape: "S1h",
                        locationName: "findingCriteria"
                    },
                    groupBy: {
                        locationName: "groupBy"
                    },
                    size: {
                        locationName: "size",
                        type: "integer"
                    },
                    sortCriteria: {
                        locationName: "sortCriteria",
                        type: "structure",
                        members: {
                            attributeName: {
                                locationName: "attributeName"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    }
                },
                required: [ "groupBy" ]
            },
            output: {
                type: "structure",
                members: {
                    countsByGroup: {
                        locationName: "countsByGroup",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                count: {
                                    locationName: "count",
                                    type: "long"
                                },
                                groupKey: {
                                    locationName: "groupKey"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetFindings: {
            http: {
                requestUri: "/findings/describe",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingIds: {
                        shape: "S5",
                        locationName: "findingIds"
                    },
                    sortCriteria: {
                        shape: "S4e",
                        locationName: "sortCriteria"
                    }
                },
                required: [ "findingIds" ]
            },
            output: {
                type: "structure",
                members: {
                    findings: {
                        locationName: "findings",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                archived: {
                                    locationName: "archived",
                                    type: "boolean"
                                },
                                category: {
                                    locationName: "category"
                                },
                                classificationDetails: {
                                    locationName: "classificationDetails",
                                    type: "structure",
                                    members: {
                                        detailedResultsLocation: {
                                            locationName: "detailedResultsLocation"
                                        },
                                        jobArn: {
                                            locationName: "jobArn"
                                        },
                                        jobId: {
                                            locationName: "jobId"
                                        },
                                        result: {
                                            locationName: "result",
                                            type: "structure",
                                            members: {
                                                additionalOccurrences: {
                                                    locationName: "additionalOccurrences",
                                                    type: "boolean"
                                                },
                                                customDataIdentifiers: {
                                                    locationName: "customDataIdentifiers",
                                                    type: "structure",
                                                    members: {
                                                        detections: {
                                                            locationName: "detections",
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    arn: {
                                                                        locationName: "arn"
                                                                    },
                                                                    count: {
                                                                        locationName: "count",
                                                                        type: "long"
                                                                    },
                                                                    name: {
                                                                        locationName: "name"
                                                                    },
                                                                    occurrences: {
                                                                        shape: "S4o",
                                                                        locationName: "occurrences"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        totalCount: {
                                                            locationName: "totalCount",
                                                            type: "long"
                                                        }
                                                    }
                                                },
                                                mimeType: {
                                                    locationName: "mimeType"
                                                },
                                                sensitiveData: {
                                                    locationName: "sensitiveData",
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            category: {
                                                                locationName: "category"
                                                            },
                                                            detections: {
                                                                locationName: "detections",
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    members: {
                                                                        count: {
                                                                            locationName: "count",
                                                                            type: "long"
                                                                        },
                                                                        occurrences: {
                                                                            shape: "S4o",
                                                                            locationName: "occurrences"
                                                                        },
                                                                        type: {
                                                                            locationName: "type"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            totalCount: {
                                                                locationName: "totalCount",
                                                                type: "long"
                                                            }
                                                        }
                                                    }
                                                },
                                                sizeClassified: {
                                                    locationName: "sizeClassified",
                                                    type: "long"
                                                },
                                                status: {
                                                    locationName: "status",
                                                    type: "structure",
                                                    members: {
                                                        code: {
                                                            locationName: "code"
                                                        },
                                                        reason: {
                                                            locationName: "reason"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                count: {
                                    locationName: "count",
                                    type: "long"
                                },
                                createdAt: {
                                    shape: "S9",
                                    locationName: "createdAt"
                                },
                                description: {
                                    locationName: "description"
                                },
                                id: {
                                    locationName: "id"
                                },
                                partition: {
                                    locationName: "partition"
                                },
                                policyDetails: {
                                    locationName: "policyDetails",
                                    type: "structure",
                                    members: {
                                        action: {
                                            locationName: "action",
                                            type: "structure",
                                            members: {
                                                actionType: {
                                                    locationName: "actionType"
                                                },
                                                apiCallDetails: {
                                                    locationName: "apiCallDetails",
                                                    type: "structure",
                                                    members: {
                                                        api: {
                                                            locationName: "api"
                                                        },
                                                        apiServiceName: {
                                                            locationName: "apiServiceName"
                                                        },
                                                        firstSeen: {
                                                            shape: "S9",
                                                            locationName: "firstSeen"
                                                        },
                                                        lastSeen: {
                                                            shape: "S9",
                                                            locationName: "lastSeen"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        actor: {
                                            locationName: "actor",
                                            type: "structure",
                                            members: {
                                                domainDetails: {
                                                    locationName: "domainDetails",
                                                    type: "structure",
                                                    members: {
                                                        domainName: {
                                                            locationName: "domainName"
                                                        }
                                                    }
                                                },
                                                ipAddressDetails: {
                                                    locationName: "ipAddressDetails",
                                                    type: "structure",
                                                    members: {
                                                        ipAddressV4: {
                                                            locationName: "ipAddressV4"
                                                        },
                                                        ipCity: {
                                                            locationName: "ipCity",
                                                            type: "structure",
                                                            members: {
                                                                name: {
                                                                    locationName: "name"
                                                                }
                                                            }
                                                        },
                                                        ipCountry: {
                                                            locationName: "ipCountry",
                                                            type: "structure",
                                                            members: {
                                                                code: {
                                                                    locationName: "code"
                                                                },
                                                                name: {
                                                                    locationName: "name"
                                                                }
                                                            }
                                                        },
                                                        ipGeoLocation: {
                                                            locationName: "ipGeoLocation",
                                                            type: "structure",
                                                            members: {
                                                                lat: {
                                                                    locationName: "lat",
                                                                    type: "double"
                                                                },
                                                                lon: {
                                                                    locationName: "lon",
                                                                    type: "double"
                                                                }
                                                            }
                                                        },
                                                        ipOwner: {
                                                            locationName: "ipOwner",
                                                            type: "structure",
                                                            members: {
                                                                asn: {
                                                                    locationName: "asn"
                                                                },
                                                                asnOrg: {
                                                                    locationName: "asnOrg"
                                                                },
                                                                isp: {
                                                                    locationName: "isp"
                                                                },
                                                                org: {
                                                                    locationName: "org"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                userIdentity: {
                                                    locationName: "userIdentity",
                                                    type: "structure",
                                                    members: {
                                                        assumedRole: {
                                                            locationName: "assumedRole",
                                                            type: "structure",
                                                            members: {
                                                                accessKeyId: {
                                                                    locationName: "accessKeyId"
                                                                },
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                arn: {
                                                                    locationName: "arn"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                },
                                                                sessionContext: {
                                                                    shape: "S5g",
                                                                    locationName: "sessionContext"
                                                                }
                                                            }
                                                        },
                                                        awsAccount: {
                                                            locationName: "awsAccount",
                                                            type: "structure",
                                                            members: {
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                }
                                                            }
                                                        },
                                                        awsService: {
                                                            locationName: "awsService",
                                                            type: "structure",
                                                            members: {
                                                                invokedBy: {
                                                                    locationName: "invokedBy"
                                                                }
                                                            }
                                                        },
                                                        federatedUser: {
                                                            locationName: "federatedUser",
                                                            type: "structure",
                                                            members: {
                                                                accessKeyId: {
                                                                    locationName: "accessKeyId"
                                                                },
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                arn: {
                                                                    locationName: "arn"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                },
                                                                sessionContext: {
                                                                    shape: "S5g",
                                                                    locationName: "sessionContext"
                                                                }
                                                            }
                                                        },
                                                        iamUser: {
                                                            locationName: "iamUser",
                                                            type: "structure",
                                                            members: {
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                arn: {
                                                                    locationName: "arn"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                },
                                                                userName: {
                                                                    locationName: "userName"
                                                                }
                                                            }
                                                        },
                                                        root: {
                                                            locationName: "root",
                                                            type: "structure",
                                                            members: {
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                arn: {
                                                                    locationName: "arn"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                }
                                                            }
                                                        },
                                                        type: {
                                                            locationName: "type"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                region: {
                                    locationName: "region"
                                },
                                resourcesAffected: {
                                    locationName: "resourcesAffected",
                                    type: "structure",
                                    members: {
                                        s3Bucket: {
                                            locationName: "s3Bucket",
                                            type: "structure",
                                            members: {
                                                allowsUnencryptedObjectUploads: {
                                                    locationName: "allowsUnencryptedObjectUploads"
                                                },
                                                arn: {
                                                    locationName: "arn"
                                                },
                                                createdAt: {
                                                    shape: "S9",
                                                    locationName: "createdAt"
                                                },
                                                defaultServerSideEncryption: {
                                                    shape: "S5r",
                                                    locationName: "defaultServerSideEncryption"
                                                },
                                                name: {
                                                    locationName: "name"
                                                },
                                                owner: {
                                                    locationName: "owner",
                                                    type: "structure",
                                                    members: {
                                                        displayName: {
                                                            locationName: "displayName"
                                                        },
                                                        id: {
                                                            locationName: "id"
                                                        }
                                                    }
                                                },
                                                publicAccess: {
                                                    shape: "S2l",
                                                    locationName: "publicAccess"
                                                },
                                                tags: {
                                                    shape: "S5u",
                                                    locationName: "tags"
                                                }
                                            }
                                        },
                                        s3Object: {
                                            locationName: "s3Object",
                                            type: "structure",
                                            members: {
                                                bucketArn: {
                                                    locationName: "bucketArn"
                                                },
                                                eTag: {
                                                    locationName: "eTag"
                                                },
                                                extension: {
                                                    locationName: "extension"
                                                },
                                                key: {
                                                    locationName: "key"
                                                },
                                                lastModified: {
                                                    shape: "S9",
                                                    locationName: "lastModified"
                                                },
                                                path: {
                                                    locationName: "path"
                                                },
                                                publicAccess: {
                                                    locationName: "publicAccess",
                                                    type: "boolean"
                                                },
                                                serverSideEncryption: {
                                                    shape: "S5r",
                                                    locationName: "serverSideEncryption"
                                                },
                                                size: {
                                                    locationName: "size",
                                                    type: "long"
                                                },
                                                storageClass: {
                                                    locationName: "storageClass"
                                                },
                                                tags: {
                                                    shape: "S5u",
                                                    locationName: "tags"
                                                },
                                                versionId: {
                                                    locationName: "versionId"
                                                }
                                            }
                                        }
                                    }
                                },
                                sample: {
                                    locationName: "sample",
                                    type: "boolean"
                                },
                                schemaVersion: {
                                    locationName: "schemaVersion"
                                },
                                severity: {
                                    locationName: "severity",
                                    type: "structure",
                                    members: {
                                        description: {
                                            locationName: "description"
                                        },
                                        score: {
                                            locationName: "score",
                                            type: "long"
                                        }
                                    }
                                },
                                title: {
                                    locationName: "title"
                                },
                                type: {
                                    locationName: "type"
                                },
                                updatedAt: {
                                    shape: "S9",
                                    locationName: "updatedAt"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetFindingsFilter: {
            http: {
                method: "GET",
                requestUri: "/findingsfilters/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    action: {
                        locationName: "action"
                    },
                    arn: {
                        locationName: "arn"
                    },
                    description: {
                        locationName: "description"
                    },
                    findingCriteria: {
                        shape: "S1h",
                        locationName: "findingCriteria"
                    },
                    id: {
                        locationName: "id"
                    },
                    name: {
                        locationName: "name"
                    },
                    position: {
                        locationName: "position",
                        type: "integer"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                }
            }
        },
        GetFindingsPublicationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/findings-publication-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    securityHubConfiguration: {
                        shape: "S63",
                        locationName: "securityHubConfiguration"
                    }
                }
            }
        },
        GetInvitationsCount: {
            http: {
                method: "GET",
                requestUri: "/invitations/count",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    invitationsCount: {
                        locationName: "invitationsCount",
                        type: "long"
                    }
                }
            }
        },
        GetMacieSession: {
            http: {
                method: "GET",
                requestUri: "/macie",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    createdAt: {
                        shape: "S9",
                        locationName: "createdAt"
                    },
                    findingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    serviceRole: {
                        locationName: "serviceRole"
                    },
                    status: {
                        locationName: "status"
                    },
                    updatedAt: {
                        shape: "S9",
                        locationName: "updatedAt"
                    }
                }
            }
        },
        GetMasterAccount: {
            http: {
                method: "GET",
                requestUri: "/master",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    master: {
                        shape: "S3s",
                        locationName: "master"
                    }
                }
            }
        },
        GetMember: {
            http: {
                method: "GET",
                requestUri: "/members/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    accountId: {
                        locationName: "accountId"
                    },
                    administratorAccountId: {
                        locationName: "administratorAccountId"
                    },
                    arn: {
                        locationName: "arn"
                    },
                    email: {
                        locationName: "email"
                    },
                    invitedAt: {
                        shape: "S9",
                        locationName: "invitedAt"
                    },
                    masterAccountId: {
                        locationName: "masterAccountId"
                    },
                    relationshipStatus: {
                        locationName: "relationshipStatus"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    },
                    updatedAt: {
                        shape: "S9",
                        locationName: "updatedAt"
                    }
                }
            }
        },
        GetUsageStatistics: {
            http: {
                requestUri: "/usage/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterBy: {
                        locationName: "filterBy",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                comparator: {
                                    locationName: "comparator"
                                },
                                key: {
                                    locationName: "key"
                                },
                                values: {
                                    shape: "S5",
                                    locationName: "values"
                                }
                            }
                        }
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortBy: {
                        locationName: "sortBy",
                        type: "structure",
                        members: {
                            key: {
                                locationName: "key"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    },
                    timeRange: {
                        locationName: "timeRange"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {
                        locationName: "nextToken"
                    },
                    records: {
                        locationName: "records",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                freeTrialStartDate: {
                                    shape: "S9",
                                    locationName: "freeTrialStartDate"
                                },
                                usage: {
                                    locationName: "usage",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            currency: {
                                                locationName: "currency"
                                            },
                                            estimatedCost: {
                                                locationName: "estimatedCost"
                                            },
                                            serviceLimit: {
                                                locationName: "serviceLimit",
                                                type: "structure",
                                                members: {
                                                    isServiceLimited: {
                                                        locationName: "isServiceLimited",
                                                        type: "boolean"
                                                    },
                                                    unit: {
                                                        locationName: "unit"
                                                    },
                                                    value: {
                                                        locationName: "value",
                                                        type: "long"
                                                    }
                                                }
                                            },
                                            type: {
                                                locationName: "type"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    timeRange: {
                        locationName: "timeRange"
                    }
                }
            }
        },
        GetUsageTotals: {
            http: {
                method: "GET",
                requestUri: "/usage",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    timeRange: {
                        location: "querystring",
                        locationName: "timeRange"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    timeRange: {
                        locationName: "timeRange"
                    },
                    usageTotals: {
                        locationName: "usageTotals",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                currency: {
                                    locationName: "currency"
                                },
                                estimatedCost: {
                                    locationName: "estimatedCost"
                                },
                                type: {
                                    locationName: "type"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListClassificationJobs: {
            http: {
                requestUri: "/jobs/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterCriteria: {
                        locationName: "filterCriteria",
                        type: "structure",
                        members: {
                            excludes: {
                                shape: "S6z",
                                locationName: "excludes"
                            },
                            includes: {
                                shape: "S6z",
                                locationName: "includes"
                            }
                        }
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortCriteria: {
                        locationName: "sortCriteria",
                        type: "structure",
                        members: {
                            attributeName: {
                                locationName: "attributeName"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                bucketDefinitions: {
                                    shape: "Sf",
                                    locationName: "bucketDefinitions"
                                },
                                createdAt: {
                                    shape: "S9",
                                    locationName: "createdAt"
                                },
                                jobId: {
                                    locationName: "jobId"
                                },
                                jobStatus: {
                                    locationName: "jobStatus"
                                },
                                jobType: {
                                    locationName: "jobType"
                                },
                                lastRunErrorStatus: {
                                    shape: "S33",
                                    locationName: "lastRunErrorStatus"
                                },
                                name: {
                                    locationName: "name"
                                },
                                userPausedDetails: {
                                    shape: "S37",
                                    locationName: "userPausedDetails"
                                },
                                bucketCriteria: {
                                    shape: "Ss",
                                    locationName: "bucketCriteria"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListCustomDataIdentifiers: {
            http: {
                requestUri: "/custom-data-identifiers/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {
                                    locationName: "arn"
                                },
                                createdAt: {
                                    shape: "S9",
                                    locationName: "createdAt"
                                },
                                description: {
                                    locationName: "description"
                                },
                                id: {
                                    locationName: "id"
                                },
                                name: {
                                    locationName: "name"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListFindings: {
            http: {
                requestUri: "/findings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingCriteria: {
                        shape: "S1h",
                        locationName: "findingCriteria"
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortCriteria: {
                        shape: "S4e",
                        locationName: "sortCriteria"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    findingIds: {
                        shape: "S5",
                        locationName: "findingIds"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListFindingsFilters: {
            http: {
                method: "GET",
                requestUri: "/findingsfilters",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    findingsFilterListItems: {
                        locationName: "findingsFilterListItems",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                action: {
                                    locationName: "action"
                                },
                                arn: {
                                    locationName: "arn"
                                },
                                id: {
                                    locationName: "id"
                                },
                                name: {
                                    locationName: "name"
                                },
                                tags: {
                                    shape: "S17",
                                    locationName: "tags"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListInvitations: {
            http: {
                method: "GET",
                requestUri: "/invitations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    invitations: {
                        locationName: "invitations",
                        type: "list",
                        member: {
                            shape: "S3s"
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListManagedDataIdentifiers: {
            http: {
                requestUri: "/managed-data-identifiers/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                category: {
                                    locationName: "category"
                                },
                                id: {
                                    locationName: "id"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListMembers: {
            http: {
                method: "GET",
                requestUri: "/members",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    onlyAssociated: {
                        location: "querystring",
                        locationName: "onlyAssociated"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    members: {
                        locationName: "members",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                administratorAccountId: {
                                    locationName: "administratorAccountId"
                                },
                                arn: {
                                    locationName: "arn"
                                },
                                email: {
                                    locationName: "email"
                                },
                                invitedAt: {
                                    shape: "S9",
                                    locationName: "invitedAt"
                                },
                                masterAccountId: {
                                    locationName: "masterAccountId"
                                },
                                relationshipStatus: {
                                    locationName: "relationshipStatus"
                                },
                                tags: {
                                    shape: "S17",
                                    locationName: "tags"
                                },
                                updatedAt: {
                                    shape: "S9",
                                    locationName: "updatedAt"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListOrganizationAdminAccounts: {
            http: {
                method: "GET",
                requestUri: "/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    adminAccounts: {
                        locationName: "adminAccounts",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                status: {
                                    locationName: "status"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                },
                required: [ "resourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                }
            }
        },
        PutClassificationExportConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/classification-export-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    configuration: {
                        shape: "S42",
                        locationName: "configuration"
                    }
                },
                required: [ "configuration" ]
            },
            output: {
                type: "structure",
                members: {
                    configuration: {
                        shape: "S42",
                        locationName: "configuration"
                    }
                }
            }
        },
        PutFindingsPublicationConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/findings-publication-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    securityHubConfiguration: {
                        shape: "S63",
                        locationName: "securityHubConfiguration"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchResources: {
            http: {
                requestUri: "/datasources/search-resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    bucketCriteria: {
                        locationName: "bucketCriteria",
                        type: "structure",
                        members: {
                            excludes: {
                                shape: "S86",
                                locationName: "excludes"
                            },
                            includes: {
                                shape: "S86",
                                locationName: "includes"
                            }
                        }
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortCriteria: {
                        locationName: "sortCriteria",
                        type: "structure",
                        members: {
                            attributeName: {
                                locationName: "attributeName"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    matchingResources: {
                        locationName: "matchingResources",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                matchingBucket: {
                                    locationName: "matchingBucket",
                                    type: "structure",
                                    members: {
                                        accountId: {
                                            locationName: "accountId"
                                        },
                                        bucketName: {
                                            locationName: "bucketName"
                                        },
                                        classifiableObjectCount: {
                                            locationName: "classifiableObjectCount",
                                            type: "long"
                                        },
                                        classifiableSizeInBytes: {
                                            locationName: "classifiableSizeInBytes",
                                            type: "long"
                                        },
                                        errorCode: {
                                            locationName: "errorCode"
                                        },
                                        errorMessage: {
                                            locationName: "errorMessage"
                                        },
                                        jobDetails: {
                                            shape: "S2h",
                                            locationName: "jobDetails"
                                        },
                                        objectCount: {
                                            locationName: "objectCount",
                                            type: "long"
                                        },
                                        objectCountByEncryptionType: {
                                            shape: "S2k",
                                            locationName: "objectCountByEncryptionType"
                                        },
                                        sizeInBytes: {
                                            locationName: "sizeInBytes",
                                            type: "long"
                                        },
                                        sizeInBytesCompressed: {
                                            locationName: "sizeInBytesCompressed",
                                            type: "long"
                                        },
                                        unclassifiableObjectCount: {
                                            shape: "S2z",
                                            locationName: "unclassifiableObjectCount"
                                        },
                                        unclassifiableObjectSizeInBytes: {
                                            shape: "S2z",
                                            locationName: "unclassifiableObjectSizeInBytes"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                },
                required: [ "resourceArn", "tags" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TestCustomDataIdentifier: {
            http: {
                requestUri: "/custom-data-identifiers/test",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ignoreWords: {
                        shape: "S5",
                        locationName: "ignoreWords"
                    },
                    keywords: {
                        shape: "S5",
                        locationName: "keywords"
                    },
                    maximumMatchDistance: {
                        locationName: "maximumMatchDistance",
                        type: "integer"
                    },
                    regex: {
                        locationName: "regex"
                    },
                    sampleText: {
                        locationName: "sampleText"
                    }
                },
                required: [ "regex", "sampleText" ]
            },
            output: {
                type: "structure",
                members: {
                    matchCount: {
                        locationName: "matchCount",
                        type: "integer"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        shape: "S5",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "tagKeys", "resourceArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateClassificationJob: {
            http: {
                method: "PATCH",
                requestUri: "/jobs/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    jobStatus: {
                        locationName: "jobStatus"
                    }
                },
                required: [ "jobId", "jobStatus" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFindingsFilter: {
            http: {
                method: "PATCH",
                requestUri: "/findingsfilters/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    action: {
                        locationName: "action"
                    },
                    description: {
                        locationName: "description"
                    },
                    findingCriteria: {
                        shape: "S1h",
                        locationName: "findingCriteria"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {
                        locationName: "name"
                    },
                    position: {
                        locationName: "position",
                        type: "integer"
                    },
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    },
                    id: {
                        locationName: "id"
                    }
                }
            }
        },
        UpdateMacieSession: {
            http: {
                method: "PATCH",
                requestUri: "/macie",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    status: {
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMemberSession: {
            http: {
                method: "PATCH",
                requestUri: "/macie/members/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    status: {
                        locationName: "status"
                    }
                },
                required: [ "id", "status" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateOrganizationConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/admin/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    autoEnable: {
                        locationName: "autoEnable",
                        type: "boolean"
                    }
                },
                required: [ "autoEnable" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {}
        },
        S9: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Se: {
            type: "structure",
            members: {
                bucketDefinitions: {
                    shape: "Sf",
                    locationName: "bucketDefinitions"
                },
                scoping: {
                    locationName: "scoping",
                    type: "structure",
                    members: {
                        excludes: {
                            shape: "Si",
                            locationName: "excludes"
                        },
                        includes: {
                            shape: "Si",
                            locationName: "includes"
                        }
                    }
                },
                bucketCriteria: {
                    shape: "Ss",
                    locationName: "bucketCriteria"
                }
            }
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    accountId: {
                        locationName: "accountId"
                    },
                    buckets: {
                        shape: "S5",
                        locationName: "buckets"
                    }
                },
                required: [ "accountId", "buckets" ]
            }
        },
        Si: {
            type: "structure",
            members: {
                and: {
                    locationName: "and",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            simpleScopeTerm: {
                                locationName: "simpleScopeTerm",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    key: {
                                        locationName: "key"
                                    },
                                    values: {
                                        shape: "S5",
                                        locationName: "values"
                                    }
                                }
                            },
                            tagScopeTerm: {
                                locationName: "tagScopeTerm",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    key: {
                                        locationName: "key"
                                    },
                                    tagValues: {
                                        locationName: "tagValues",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                key: {
                                                    locationName: "key"
                                                },
                                                value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    },
                                    target: {
                                        locationName: "target"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Ss: {
            type: "structure",
            members: {
                excludes: {
                    shape: "St",
                    locationName: "excludes"
                },
                includes: {
                    shape: "St",
                    locationName: "includes"
                }
            }
        },
        St: {
            type: "structure",
            members: {
                and: {
                    locationName: "and",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            simpleCriterion: {
                                locationName: "simpleCriterion",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    key: {
                                        locationName: "key"
                                    },
                                    values: {
                                        shape: "S5",
                                        locationName: "values"
                                    }
                                }
                            },
                            tagCriterion: {
                                locationName: "tagCriterion",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    tagValues: {
                                        locationName: "tagValues",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                key: {
                                                    locationName: "key"
                                                },
                                                value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                dailySchedule: {
                    locationName: "dailySchedule",
                    type: "structure",
                    members: {}
                },
                monthlySchedule: {
                    locationName: "monthlySchedule",
                    type: "structure",
                    members: {
                        dayOfMonth: {
                            locationName: "dayOfMonth",
                            type: "integer"
                        }
                    }
                },
                weeklySchedule: {
                    locationName: "weeklySchedule",
                    type: "structure",
                    members: {
                        dayOfWeek: {
                            locationName: "dayOfWeek"
                        }
                    }
                }
            }
        },
        S17: {
            type: "map",
            key: {},
            value: {}
        },
        S1a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    occurrencesThreshold: {
                        locationName: "occurrencesThreshold",
                        type: "long"
                    },
                    severity: {
                        locationName: "severity"
                    }
                },
                required: [ "occurrencesThreshold", "severity" ]
            }
        },
        S1h: {
            type: "structure",
            members: {
                criterion: {
                    locationName: "criterion",
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            eq: {
                                shape: "S5",
                                locationName: "eq"
                            },
                            eqExactMatch: {
                                shape: "S5",
                                locationName: "eqExactMatch"
                            },
                            gt: {
                                locationName: "gt",
                                type: "long"
                            },
                            gte: {
                                locationName: "gte",
                                type: "long"
                            },
                            lt: {
                                locationName: "lt",
                                type: "long"
                            },
                            lte: {
                                locationName: "lte",
                                type: "long"
                            },
                            neq: {
                                shape: "S5",
                                locationName: "neq"
                            }
                        }
                    }
                }
            }
        },
        S1n: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    accountId: {
                        locationName: "accountId"
                    },
                    errorCode: {
                        locationName: "errorCode"
                    },
                    errorMessage: {
                        locationName: "errorMessage"
                    }
                }
            }
        },
        S2h: {
            type: "structure",
            members: {
                isDefinedInJob: {
                    locationName: "isDefinedInJob"
                },
                isMonitoredByJob: {
                    locationName: "isMonitoredByJob"
                },
                lastJobId: {
                    locationName: "lastJobId"
                },
                lastJobRunTime: {
                    shape: "S9",
                    locationName: "lastJobRunTime"
                }
            }
        },
        S2k: {
            type: "structure",
            members: {
                customerManaged: {
                    locationName: "customerManaged",
                    type: "long"
                },
                kmsManaged: {
                    locationName: "kmsManaged",
                    type: "long"
                },
                s3Managed: {
                    locationName: "s3Managed",
                    type: "long"
                },
                unencrypted: {
                    locationName: "unencrypted",
                    type: "long"
                },
                unknown: {
                    locationName: "unknown",
                    type: "long"
                }
            }
        },
        S2l: {
            type: "structure",
            members: {
                effectivePermission: {
                    locationName: "effectivePermission"
                },
                permissionConfiguration: {
                    locationName: "permissionConfiguration",
                    type: "structure",
                    members: {
                        accountLevelPermissions: {
                            locationName: "accountLevelPermissions",
                            type: "structure",
                            members: {
                                blockPublicAccess: {
                                    shape: "S2p",
                                    locationName: "blockPublicAccess"
                                }
                            }
                        },
                        bucketLevelPermissions: {
                            locationName: "bucketLevelPermissions",
                            type: "structure",
                            members: {
                                accessControlList: {
                                    locationName: "accessControlList",
                                    type: "structure",
                                    members: {
                                        allowsPublicReadAccess: {
                                            locationName: "allowsPublicReadAccess",
                                            type: "boolean"
                                        },
                                        allowsPublicWriteAccess: {
                                            locationName: "allowsPublicWriteAccess",
                                            type: "boolean"
                                        }
                                    }
                                },
                                blockPublicAccess: {
                                    shape: "S2p",
                                    locationName: "blockPublicAccess"
                                },
                                bucketPolicy: {
                                    locationName: "bucketPolicy",
                                    type: "structure",
                                    members: {
                                        allowsPublicReadAccess: {
                                            locationName: "allowsPublicReadAccess",
                                            type: "boolean"
                                        },
                                        allowsPublicWriteAccess: {
                                            locationName: "allowsPublicWriteAccess",
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S2p: {
            type: "structure",
            members: {
                blockPublicAcls: {
                    locationName: "blockPublicAcls",
                    type: "boolean"
                },
                blockPublicPolicy: {
                    locationName: "blockPublicPolicy",
                    type: "boolean"
                },
                ignorePublicAcls: {
                    locationName: "ignorePublicAcls",
                    type: "boolean"
                },
                restrictPublicBuckets: {
                    locationName: "restrictPublicBuckets",
                    type: "boolean"
                }
            }
        },
        S2y: {
            type: "structure",
            members: {
                key: {
                    locationName: "key"
                },
                value: {
                    locationName: "value"
                }
            }
        },
        S2z: {
            type: "structure",
            members: {
                fileType: {
                    locationName: "fileType",
                    type: "long"
                },
                storageClass: {
                    locationName: "storageClass",
                    type: "long"
                },
                total: {
                    locationName: "total",
                    type: "long"
                }
            }
        },
        S33: {
            type: "structure",
            members: {
                code: {
                    locationName: "code"
                }
            }
        },
        S37: {
            type: "structure",
            members: {
                jobExpiresAt: {
                    shape: "S9",
                    locationName: "jobExpiresAt"
                },
                jobImminentExpirationHealthEventArn: {
                    locationName: "jobImminentExpirationHealthEventArn"
                },
                jobPausedAt: {
                    shape: "S9",
                    locationName: "jobPausedAt"
                }
            }
        },
        S3s: {
            type: "structure",
            members: {
                accountId: {
                    locationName: "accountId"
                },
                invitationId: {
                    locationName: "invitationId"
                },
                invitedAt: {
                    shape: "S9",
                    locationName: "invitedAt"
                },
                relationshipStatus: {
                    locationName: "relationshipStatus"
                }
            }
        },
        S42: {
            type: "structure",
            members: {
                s3Destination: {
                    locationName: "s3Destination",
                    type: "structure",
                    members: {
                        bucketName: {
                            locationName: "bucketName"
                        },
                        keyPrefix: {
                            locationName: "keyPrefix"
                        },
                        kmsKeyArn: {
                            locationName: "kmsKeyArn"
                        }
                    },
                    required: [ "bucketName", "kmsKeyArn" ]
                }
            }
        },
        S4e: {
            type: "structure",
            members: {
                attributeName: {
                    locationName: "attributeName"
                },
                orderBy: {
                    locationName: "orderBy"
                }
            }
        },
        S4o: {
            type: "structure",
            members: {
                cells: {
                    locationName: "cells",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            cellReference: {
                                locationName: "cellReference"
                            },
                            column: {
                                locationName: "column",
                                type: "long"
                            },
                            columnName: {
                                locationName: "columnName"
                            },
                            row: {
                                locationName: "row",
                                type: "long"
                            }
                        }
                    }
                },
                lineRanges: {
                    shape: "S4r",
                    locationName: "lineRanges"
                },
                offsetRanges: {
                    shape: "S4r",
                    locationName: "offsetRanges"
                },
                pages: {
                    locationName: "pages",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            lineRange: {
                                shape: "S4s",
                                locationName: "lineRange"
                            },
                            offsetRange: {
                                shape: "S4s",
                                locationName: "offsetRange"
                            },
                            pageNumber: {
                                locationName: "pageNumber",
                                type: "long"
                            }
                        }
                    }
                },
                records: {
                    locationName: "records",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            jsonPath: {
                                locationName: "jsonPath"
                            },
                            recordIndex: {
                                locationName: "recordIndex",
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S4r: {
            type: "list",
            member: {
                shape: "S4s"
            }
        },
        S4s: {
            type: "structure",
            members: {
                end: {
                    locationName: "end",
                    type: "long"
                },
                start: {
                    locationName: "start",
                    type: "long"
                },
                startColumn: {
                    locationName: "startColumn",
                    type: "long"
                }
            }
        },
        S5g: {
            type: "structure",
            members: {
                attributes: {
                    locationName: "attributes",
                    type: "structure",
                    members: {
                        creationDate: {
                            shape: "S9",
                            locationName: "creationDate"
                        },
                        mfaAuthenticated: {
                            locationName: "mfaAuthenticated",
                            type: "boolean"
                        }
                    }
                },
                sessionIssuer: {
                    locationName: "sessionIssuer",
                    type: "structure",
                    members: {
                        accountId: {
                            locationName: "accountId"
                        },
                        arn: {
                            locationName: "arn"
                        },
                        principalId: {
                            locationName: "principalId"
                        },
                        type: {
                            locationName: "type"
                        },
                        userName: {
                            locationName: "userName"
                        }
                    }
                }
            }
        },
        S5r: {
            type: "structure",
            members: {
                encryptionType: {
                    locationName: "encryptionType"
                },
                kmsMasterKeyId: {
                    locationName: "kmsMasterKeyId"
                }
            }
        },
        S5u: {
            type: "list",
            member: {
                shape: "S2y"
            }
        },
        S63: {
            type: "structure",
            members: {
                publishClassificationFindings: {
                    locationName: "publishClassificationFindings",
                    type: "boolean"
                },
                publishPolicyFindings: {
                    locationName: "publishPolicyFindings",
                    type: "boolean"
                }
            },
            required: [ "publishPolicyFindings", "publishClassificationFindings" ]
        },
        S6z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    comparator: {
                        locationName: "comparator"
                    },
                    key: {
                        locationName: "key"
                    },
                    values: {
                        shape: "S5",
                        locationName: "values"
                    }
                }
            }
        },
        S86: {
            type: "structure",
            members: {
                and: {
                    locationName: "and",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            simpleCriterion: {
                                locationName: "simpleCriterion",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    key: {
                                        locationName: "key"
                                    },
                                    values: {
                                        shape: "S5",
                                        locationName: "values"
                                    }
                                }
                            },
                            tagCriterion: {
                                locationName: "tagCriterion",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    tagValues: {
                                        locationName: "tagValues",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                key: {
                                                    locationName: "key"
                                                },
                                                value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    paginators: {
        DescribeBuckets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "buckets"
        },
        GetUsageStatistics: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "records"
        },
        ListClassificationJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListCustomDataIdentifiers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListFindings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findingIds"
        },
        ListFindingsFilters: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findingsFilterListItems"
        },
        ListInvitations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "invitations"
        },
        ListMembers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "members"
        },
        ListOrganizationAdminAccounts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "adminAccounts"
        },
        SearchResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "matchingResources"
        }
    }
};

AWS.apiLoader.services["codeartifact"] = {};

AWS.CodeArtifact = AWS.Service.defineService("codeartifact", [ "2018-09-22" ]);

AWS.apiLoader.services["codeartifact"]["2018-09-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-09-22",
        endpointPrefix: "codeartifact",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "CodeArtifact",
        serviceId: "codeartifact",
        signatureVersion: "v4",
        signingName: "codeartifact",
        uid: "codeartifact-2018-09-22"
    },
    operations: {
        AssociateExternalConnection: {
            http: {
                requestUri: "/v1/repository/external-connection"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "externalConnection" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    externalConnection: {
                        location: "querystring",
                        locationName: "external-connection"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        CopyPackageVersions: {
            http: {
                requestUri: "/v1/package/versions/copy"
            },
            input: {
                type: "structure",
                required: [ "domain", "sourceRepository", "destinationRepository", "format", "package" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    sourceRepository: {
                        location: "querystring",
                        locationName: "source-repository"
                    },
                    destinationRepository: {
                        location: "querystring",
                        locationName: "destination-repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    versions: {
                        shape: "Sj"
                    },
                    versionRevisions: {
                        shape: "Sl"
                    },
                    allowOverwrite: {
                        type: "boolean"
                    },
                    includeFromUpstream: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulVersions: {
                        shape: "Sp"
                    },
                    failedVersions: {
                        shape: "St"
                    }
                }
            }
        },
        CreateDomain: {
            http: {
                requestUri: "/v1/domain"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    encryptionKey: {},
                    tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domain: {
                        shape: "S13"
                    }
                }
            }
        },
        CreateRepository: {
            http: {
                requestUri: "/v1/repository"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    description: {},
                    upstreams: {
                        shape: "S19"
                    },
                    tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        DeleteDomain: {
            http: {
                method: "DELETE",
                requestUri: "/v1/domain"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domain: {
                        shape: "S13"
                    }
                }
            }
        },
        DeleteDomainPermissionsPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v1/domain/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    policyRevision: {
                        location: "querystring",
                        locationName: "policy-revision"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        DeletePackageVersions: {
            http: {
                requestUri: "/v1/package/versions/delete"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "versions" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    versions: {
                        shape: "Sj"
                    },
                    expectedStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulVersions: {
                        shape: "Sp"
                    },
                    failedVersions: {
                        shape: "St"
                    }
                }
            }
        },
        DeleteRepository: {
            http: {
                method: "DELETE",
                requestUri: "/v1/repository"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        DeleteRepositoryPermissionsPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v1/repository/permissions/policies"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    policyRevision: {
                        location: "querystring",
                        locationName: "policy-revision"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        DescribeDomain: {
            http: {
                method: "GET",
                requestUri: "/v1/domain"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domain: {
                        shape: "S13"
                    }
                }
            }
        },
        DescribePackageVersion: {
            http: {
                method: "GET",
                requestUri: "/v1/package/version"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "packageVersion" ],
                members: {
                    packageVersion: {
                        type: "structure",
                        members: {
                            format: {},
                            namespace: {},
                            packageName: {},
                            displayName: {},
                            version: {},
                            summary: {},
                            homePage: {},
                            sourceCodeRepository: {},
                            publishedTime: {
                                type: "timestamp"
                            },
                            licenses: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        name: {},
                                        url: {}
                                    }
                                }
                            },
                            revision: {},
                            status: {}
                        }
                    }
                }
            }
        },
        DescribeRepository: {
            http: {
                method: "GET",
                requestUri: "/v1/repository"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        DisassociateExternalConnection: {
            http: {
                method: "DELETE",
                requestUri: "/v1/repository/external-connection"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "externalConnection" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    externalConnection: {
                        location: "querystring",
                        locationName: "external-connection"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        DisposePackageVersions: {
            http: {
                requestUri: "/v1/package/versions/dispose"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "versions" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    versions: {
                        shape: "Sj"
                    },
                    versionRevisions: {
                        shape: "Sl"
                    },
                    expectedStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulVersions: {
                        shape: "Sp"
                    },
                    failedVersions: {
                        shape: "St"
                    }
                }
            }
        },
        GetAuthorizationToken: {
            http: {
                requestUri: "/v1/authorization-token"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    durationSeconds: {
                        location: "querystring",
                        locationName: "duration",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    authorizationToken: {},
                    expiration: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetDomainPermissionsPolicy: {
            http: {
                method: "GET",
                requestUri: "/v1/domain/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        GetPackageVersionAsset: {
            http: {
                method: "GET",
                requestUri: "/v1/package/version/asset"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion", "asset" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    },
                    asset: {
                        location: "querystring",
                        locationName: "asset"
                    },
                    packageVersionRevision: {
                        location: "querystring",
                        locationName: "revision"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    asset: {
                        type: "blob",
                        streaming: true
                    },
                    assetName: {
                        location: "header",
                        locationName: "X-AssetName"
                    },
                    packageVersion: {
                        location: "header",
                        locationName: "X-PackageVersion"
                    },
                    packageVersionRevision: {
                        location: "header",
                        locationName: "X-PackageVersionRevision"
                    }
                },
                payload: "asset"
            }
        },
        GetPackageVersionReadme: {
            http: {
                method: "GET",
                requestUri: "/v1/package/version/readme"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    format: {},
                    namespace: {},
                    package: {},
                    version: {},
                    versionRevision: {},
                    readme: {}
                }
            }
        },
        GetRepositoryEndpoint: {
            http: {
                method: "GET",
                requestUri: "/v1/repository/endpoint"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositoryEndpoint: {}
                }
            }
        },
        GetRepositoryPermissionsPolicy: {
            http: {
                method: "GET",
                requestUri: "/v1/repository/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        ListDomains: {
            http: {
                requestUri: "/v1/domains"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    domains: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                owner: {},
                                arn: {},
                                status: {},
                                createdTime: {
                                    type: "timestamp"
                                },
                                encryptionKey: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPackageVersionAssets: {
            http: {
                requestUri: "/v1/package/version/assets"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    format: {},
                    namespace: {},
                    package: {},
                    version: {},
                    versionRevision: {},
                    nextToken: {},
                    assets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name" ],
                            members: {
                                name: {},
                                size: {
                                    type: "long"
                                },
                                hashes: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPackageVersionDependencies: {
            http: {
                requestUri: "/v1/package/version/dependencies"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    format: {},
                    namespace: {},
                    package: {},
                    version: {},
                    versionRevision: {},
                    nextToken: {},
                    dependencies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                namespace: {},
                                package: {},
                                dependencyType: {},
                                versionRequirement: {}
                            }
                        }
                    }
                }
            }
        },
        ListPackageVersions: {
            http: {
                requestUri: "/v1/package/versions"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    sortBy: {
                        location: "querystring",
                        locationName: "sortBy"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    defaultDisplayVersion: {},
                    format: {},
                    namespace: {},
                    package: {},
                    versions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "version", "status" ],
                            members: {
                                version: {},
                                revision: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPackages: {
            http: {
                requestUri: "/v1/packages"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    packagePrefix: {
                        location: "querystring",
                        locationName: "package-prefix"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    packages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                format: {},
                                namespace: {},
                                package: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRepositories: {
            http: {
                requestUri: "/v1/repositories"
            },
            input: {
                type: "structure",
                members: {
                    repositoryPrefix: {
                        location: "querystring",
                        locationName: "repository-prefix"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositories: {
                        shape: "S3f"
                    },
                    nextToken: {}
                }
            }
        },
        ListRepositoriesInDomain: {
            http: {
                requestUri: "/v1/domain/repositories"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    administratorAccount: {
                        location: "querystring",
                        locationName: "administrator-account"
                    },
                    repositoryPrefix: {
                        location: "querystring",
                        locationName: "repository-prefix"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositories: {
                        shape: "S3f"
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/v1/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sy"
                    }
                }
            }
        },
        PutDomainPermissionsPolicy: {
            http: {
                method: "PUT",
                requestUri: "/v1/domain/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain", "policyDocument" ],
                members: {
                    domain: {},
                    domainOwner: {},
                    policyRevision: {},
                    policyDocument: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        PutRepositoryPermissionsPolicy: {
            http: {
                method: "PUT",
                requestUri: "/v1/repository/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "policyDocument" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    policyRevision: {},
                    policyDocument: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/tag"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/v1/untag"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePackageVersionsStatus: {
            http: {
                requestUri: "/v1/package/versions/update_status"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "versions", "targetStatus" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    versions: {
                        shape: "Sj"
                    },
                    versionRevisions: {
                        shape: "Sl"
                    },
                    expectedStatus: {},
                    targetStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulVersions: {
                        shape: "Sp"
                    },
                    failedVersions: {
                        shape: "St"
                    }
                }
            }
        },
        UpdateRepository: {
            http: {
                method: "PUT",
                requestUri: "/v1/repository"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    description: {},
                    upstreams: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            members: {
                name: {},
                administratorAccount: {},
                domainName: {},
                domainOwner: {},
                arn: {},
                description: {},
                upstreams: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            repositoryName: {}
                        }
                    }
                },
                externalConnections: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            externalConnectionName: {},
                            packageFormat: {},
                            status: {}
                        }
                    }
                }
            }
        },
        Sj: {
            type: "list",
            member: {}
        },
        Sl: {
            type: "map",
            key: {},
            value: {}
        },
        Sp: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    revision: {},
                    status: {}
                }
            }
        },
        St: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    errorCode: {},
                    errorMessage: {}
                }
            }
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                name: {},
                owner: {},
                arn: {},
                status: {},
                createdTime: {
                    type: "timestamp"
                },
                encryptionKey: {},
                repositoryCount: {
                    type: "integer"
                },
                assetSizeBytes: {
                    type: "long"
                },
                s3BucketArn: {}
            }
        },
        S19: {
            type: "list",
            member: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {}
                }
            }
        },
        S1h: {
            type: "structure",
            members: {
                resourceArn: {},
                revision: {},
                document: {}
            }
        },
        S3f: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    administratorAccount: {},
                    domainName: {},
                    domainOwner: {},
                    arn: {},
                    description: {}
                }
            }
        }
    },
    paginators: {
        ListDomains: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "domains"
        },
        ListPackageVersionAssets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assets"
        },
        ListPackageVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "versions"
        },
        ListPackages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "packages"
        },
        ListRepositories: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "repositories"
        },
        ListRepositoriesInDomain: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "repositories"
        }
    }
};

AWS.apiLoader.services["honeycode"] = {};

AWS.Honeycode = AWS.Service.defineService("honeycode", [ "2020-03-01" ]);

AWS.apiLoader.services["honeycode"]["2020-03-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-03-01",
        endpointPrefix: "honeycode",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Honeycode",
        serviceFullName: "Amazon Honeycode",
        serviceId: "Honeycode",
        signatureVersion: "v4",
        signingName: "honeycode",
        uid: "honeycode-2020-03-01"
    },
    operations: {
        BatchCreateTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/batchcreate"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "rowsToCreate" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowsToCreate: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "batchItemId", "cellsToCreate" ],
                            members: {
                                batchItemId: {},
                                cellsToCreate: {
                                    shape: "S6"
                                }
                            }
                        }
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workbookCursor", "createdRows" ],
                members: {
                    workbookCursor: {
                        type: "long"
                    },
                    createdRows: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    failedBatchItems: {
                        shape: "Se"
                    }
                }
            }
        },
        BatchDeleteTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/batchdelete"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "rowIds" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowIds: {
                        shape: "Si"
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workbookCursor" ],
                members: {
                    workbookCursor: {
                        type: "long"
                    },
                    failedBatchItems: {
                        shape: "Se"
                    }
                }
            }
        },
        BatchUpdateTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/batchupdate"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "rowsToUpdate" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowsToUpdate: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "rowId", "cellsToUpdate" ],
                            members: {
                                rowId: {},
                                cellsToUpdate: {
                                    shape: "S6"
                                }
                            }
                        }
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workbookCursor" ],
                members: {
                    workbookCursor: {
                        type: "long"
                    },
                    failedBatchItems: {
                        shape: "Se"
                    }
                }
            }
        },
        BatchUpsertTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/batchupsert"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "rowsToUpsert" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowsToUpsert: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "batchItemId", "filter", "cellsToUpdate" ],
                            members: {
                                batchItemId: {},
                                filter: {
                                    shape: "Sr"
                                },
                                cellsToUpdate: {
                                    shape: "S6"
                                }
                            }
                        }
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "rows", "workbookCursor" ],
                members: {
                    rows: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "rowIds", "upsertAction" ],
                            members: {
                                rowIds: {
                                    shape: "Si"
                                },
                                upsertAction: {}
                            }
                        }
                    },
                    workbookCursor: {
                        type: "long"
                    },
                    failedBatchItems: {
                        shape: "Se"
                    }
                }
            }
        },
        DescribeTableDataImportJob: {
            http: {
                method: "GET",
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/import/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "jobId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobStatus", "message", "jobMetadata" ],
                members: {
                    jobStatus: {},
                    message: {},
                    jobMetadata: {
                        type: "structure",
                        required: [ "submitter", "submitTime", "importOptions", "dataSource" ],
                        members: {
                            submitter: {
                                type: "structure",
                                members: {
                                    email: {
                                        type: "string",
                                        sensitive: true
                                    },
                                    userArn: {}
                                }
                            },
                            submitTime: {
                                type: "timestamp"
                            },
                            importOptions: {
                                shape: "S17"
                            },
                            dataSource: {
                                shape: "S1h"
                            }
                        }
                    }
                }
            }
        },
        GetScreenData: {
            http: {
                requestUri: "/screendata"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "appId", "screenId" ],
                members: {
                    workbookId: {},
                    appId: {},
                    screenId: {},
                    variables: {
                        shape: "S1l"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "results", "workbookCursor" ],
                members: {
                    results: {
                        type: "map",
                        key: {
                            shape: "S1t"
                        },
                        value: {
                            type: "structure",
                            required: [ "headers", "rows" ],
                            members: {
                                headers: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name", "format" ],
                                        members: {
                                            name: {
                                                shape: "S1t"
                                            },
                                            format: {}
                                        }
                                    }
                                },
                                rows: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "dataItems" ],
                                        members: {
                                            rowId: {},
                                            dataItems: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        overrideFormat: {},
                                                        rawValue: {},
                                                        formattedValue: {}
                                                    },
                                                    sensitive: true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    workbookCursor: {
                        type: "long"
                    },
                    nextToken: {}
                }
            }
        },
        InvokeScreenAutomation: {
            http: {
                requestUri: "/workbooks/{workbookId}/apps/{appId}/screens/{screenId}/automations/{automationId}"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "appId", "screenId", "screenAutomationId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    screenId: {
                        location: "uri",
                        locationName: "screenId"
                    },
                    screenAutomationId: {
                        location: "uri",
                        locationName: "automationId"
                    },
                    variables: {
                        shape: "S1l"
                    },
                    rowId: {},
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workbookCursor" ],
                members: {
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        ListTableColumns: {
            http: {
                method: "GET",
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/columns"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tableColumns" ],
                members: {
                    tableColumns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                tableColumnId: {},
                                tableColumnName: {},
                                format: {}
                            }
                        }
                    },
                    nextToken: {},
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        ListTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/list"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowIds: {
                        shape: "Si"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "columnIds", "rows", "workbookCursor" ],
                members: {
                    columnIds: {
                        shape: "S2c"
                    },
                    rows: {
                        shape: "S2d"
                    },
                    rowIdsNotFound: {
                        shape: "Si"
                    },
                    nextToken: {},
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        ListTables: {
            http: {
                method: "GET",
                requestUri: "/workbooks/{workbookId}/tables"
            },
            input: {
                type: "structure",
                required: [ "workbookId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tables" ],
                members: {
                    tables: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                tableId: {},
                                tableName: {}
                            }
                        }
                    },
                    nextToken: {},
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        QueryTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/query"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "filterFormula" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    filterFormula: {
                        shape: "Sr"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "columnIds", "rows", "workbookCursor" ],
                members: {
                    columnIds: {
                        shape: "S2c"
                    },
                    rows: {
                        shape: "S2d"
                    },
                    nextToken: {},
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        StartTableDataImportJob: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/import"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "dataSource", "dataFormat", "destinationTableId", "importOptions", "clientRequestToken" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    dataSource: {
                        shape: "S1h"
                    },
                    dataFormat: {},
                    destinationTableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    importOptions: {
                        shape: "S17"
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "jobId", "jobStatus" ],
                members: {
                    jobId: {},
                    jobStatus: {}
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    fact: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                required: [ "id", "errorMessage" ],
                members: {
                    id: {},
                    errorMessage: {}
                }
            }
        },
        Si: {
            type: "list",
            member: {}
        },
        Sr: {
            type: "structure",
            required: [ "formula" ],
            members: {
                formula: {
                    shape: "Ss"
                },
                contextRowId: {}
            }
        },
        Ss: {
            type: "string",
            sensitive: true
        },
        S17: {
            type: "structure",
            members: {
                destinationOptions: {
                    type: "structure",
                    members: {
                        columnMap: {
                            type: "map",
                            key: {},
                            value: {
                                type: "structure",
                                members: {
                                    columnIndex: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                delimitedTextOptions: {
                    type: "structure",
                    required: [ "delimiter" ],
                    members: {
                        delimiter: {},
                        hasHeaderRow: {
                            type: "boolean"
                        },
                        ignoreEmptyRows: {
                            type: "boolean"
                        },
                        dataCharacterEncoding: {}
                    }
                }
            }
        },
        S1h: {
            type: "structure",
            required: [ "dataSourceConfig" ],
            members: {
                dataSourceConfig: {
                    type: "structure",
                    members: {
                        dataSourceUrl: {}
                    }
                }
            }
        },
        S1l: {
            type: "map",
            key: {
                type: "string",
                sensitive: true
            },
            value: {
                type: "structure",
                required: [ "rawValue" ],
                members: {
                    rawValue: {}
                },
                sensitive: true
            },
            sensitive: true
        },
        S1t: {
            type: "string",
            sensitive: true
        },
        S2c: {
            type: "list",
            member: {}
        },
        S2d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "rowId", "cells" ],
                members: {
                    rowId: {},
                    cells: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                formula: {
                                    shape: "Ss"
                                },
                                format: {},
                                rawValue: {},
                                formattedValue: {}
                            },
                            sensitive: true
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListTableColumns: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "tableColumns"
        },
        ListTableRows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "rows"
        },
        ListTables: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tables"
        },
        QueryTableRows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "rows"
        }
    }
};

AWS.apiLoader.services["ivs"] = {};

AWS.IVS = AWS.Service.defineService("ivs", [ "2020-07-14" ]);

AWS.apiLoader.services["ivs"]["2020-07-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-14",
        endpointPrefix: "ivs",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon IVS",
        serviceFullName: "Amazon Interactive Video Service",
        serviceId: "ivs",
        signatureVersion: "v4",
        signingName: "ivs",
        uid: "ivs-2020-07-14"
    },
    operations: {
        BatchGetChannel: {
            http: {
                requestUri: "/BatchGetChannel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arns" ],
                members: {
                    arns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    channels: {
                        type: "list",
                        member: {
                            shape: "S6"
                        }
                    },
                    errors: {
                        shape: "Sh"
                    }
                }
            }
        },
        BatchGetStreamKey: {
            http: {
                requestUri: "/BatchGetStreamKey",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arns" ],
                members: {
                    arns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        shape: "Sh"
                    },
                    streamKeys: {
                        type: "list",
                        member: {
                            shape: "Sr"
                        }
                    }
                }
            }
        },
        CreateChannel: {
            http: {
                requestUri: "/CreateChannel",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    authorized: {
                        type: "boolean"
                    },
                    latencyMode: {},
                    name: {},
                    recordingConfigurationArn: {},
                    tags: {
                        shape: "Sd"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    channel: {
                        shape: "S6"
                    },
                    streamKey: {
                        shape: "Sr"
                    }
                }
            }
        },
        CreateRecordingConfiguration: {
            http: {
                requestUri: "/CreateRecordingConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "destinationConfiguration" ],
                members: {
                    destinationConfiguration: {
                        shape: "Sx"
                    },
                    name: {},
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recordingConfiguration: {
                        shape: "S12"
                    }
                }
            }
        },
        CreateStreamKey: {
            http: {
                requestUri: "/CreateStreamKey",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {},
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamKey: {
                        shape: "Sr"
                    }
                }
            }
        },
        DeleteChannel: {
            http: {
                requestUri: "/DeleteChannel",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        DeletePlaybackKeyPair: {
            http: {
                requestUri: "/DeletePlaybackKeyPair",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRecordingConfiguration: {
            http: {
                requestUri: "/DeleteRecordingConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        DeleteStreamKey: {
            http: {
                requestUri: "/DeleteStreamKey",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        GetChannel: {
            http: {
                requestUri: "/GetChannel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    channel: {
                        shape: "S6"
                    }
                }
            }
        },
        GetPlaybackKeyPair: {
            http: {
                requestUri: "/GetPlaybackKeyPair",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    keyPair: {
                        shape: "S1h"
                    }
                }
            }
        },
        GetRecordingConfiguration: {
            http: {
                requestUri: "/GetRecordingConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    recordingConfiguration: {
                        shape: "S12"
                    }
                }
            }
        },
        GetStream: {
            http: {
                requestUri: "/GetStream",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    stream: {
                        type: "structure",
                        members: {
                            channelArn: {},
                            health: {},
                            playbackUrl: {},
                            startTime: {
                                shape: "S1q"
                            },
                            state: {},
                            viewerCount: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        GetStreamKey: {
            http: {
                requestUri: "/GetStreamKey",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    streamKey: {
                        shape: "Sr"
                    }
                }
            }
        },
        ImportPlaybackKeyPair: {
            http: {
                requestUri: "/ImportPlaybackKeyPair",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "publicKeyMaterial" ],
                members: {
                    name: {},
                    publicKeyMaterial: {},
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    keyPair: {
                        shape: "S1h"
                    }
                }
            }
        },
        ListChannels: {
            http: {
                requestUri: "/ListChannels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterByName: {},
                    filterByRecordingConfigurationArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "channels" ],
                members: {
                    channels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                authorized: {
                                    type: "boolean"
                                },
                                latencyMode: {},
                                name: {},
                                recordingConfigurationArn: {},
                                tags: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPlaybackKeyPairs: {
            http: {
                requestUri: "/ListPlaybackKeyPairs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "keyPairs" ],
                members: {
                    keyPairs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                tags: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRecordingConfigurations: {
            http: {
                requestUri: "/ListRecordingConfigurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "recordingConfigurations" ],
                members: {
                    nextToken: {},
                    recordingConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "destinationConfiguration", "state" ],
                            members: {
                                arn: {},
                                destinationConfiguration: {
                                    shape: "Sx"
                                },
                                name: {},
                                state: {},
                                tags: {
                                    shape: "Sd"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListStreamKeys: {
            http: {
                requestUri: "/ListStreamKeys",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "streamKeys" ],
                members: {
                    nextToken: {},
                    streamKeys: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                channelArn: {},
                                tags: {
                                    shape: "Sd"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListStreams: {
            http: {
                requestUri: "/ListStreams",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "streams" ],
                members: {
                    nextToken: {},
                    streams: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                channelArn: {},
                                health: {},
                                startTime: {
                                    shape: "S1q"
                                },
                                state: {},
                                viewerCount: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        PutMetadata: {
            http: {
                requestUri: "/PutMetadata",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelArn", "metadata" ],
                members: {
                    channelArn: {},
                    metadata: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        StopStream: {
            http: {
                requestUri: "/StopStream",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateChannel: {
            http: {
                requestUri: "/UpdateChannel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    authorized: {
                        type: "boolean"
                    },
                    latencyMode: {},
                    name: {},
                    recordingConfigurationArn: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    channel: {
                        shape: "S6"
                    }
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            members: {
                arn: {},
                authorized: {
                    type: "boolean"
                },
                ingestEndpoint: {},
                latencyMode: {},
                name: {},
                playbackUrl: {},
                recordingConfigurationArn: {},
                tags: {
                    shape: "Sd"
                },
                type: {}
            }
        },
        Sd: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    code: {},
                    message: {}
                }
            }
        },
        Sr: {
            type: "structure",
            members: {
                arn: {},
                channelArn: {},
                tags: {
                    shape: "Sd"
                },
                value: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                s3: {
                    type: "structure",
                    required: [ "bucketName" ],
                    members: {
                        bucketName: {}
                    }
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "arn", "destinationConfiguration", "state" ],
            members: {
                arn: {},
                destinationConfiguration: {
                    shape: "Sx"
                },
                name: {},
                state: {},
                tags: {
                    shape: "Sd"
                }
            }
        },
        S1h: {
            type: "structure",
            members: {
                arn: {},
                fingerprint: {},
                name: {},
                tags: {
                    shape: "Sd"
                }
            }
        },
        S1q: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        ListChannels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPlaybackKeyPairs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListRecordingConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListStreamKeys: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListStreams: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["braket"] = {};

AWS.Braket = AWS.Service.defineService("braket", [ "2019-09-01" ]);

AWS.apiLoader.services["braket"]["2019-09-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-09-01",
        endpointPrefix: "braket",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Braket",
        serviceId: "Braket",
        signatureVersion: "v4",
        signingName: "braket",
        uid: "braket-2019-09-01"
    },
    operations: {
        CancelQuantumTask: {
            http: {
                method: "PUT",
                requestUri: "/quantum-task/{quantumTaskArn}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clientToken", "quantumTaskArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    quantumTaskArn: {
                        location: "uri",
                        locationName: "quantumTaskArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "cancellationStatus", "quantumTaskArn" ],
                members: {
                    cancellationStatus: {},
                    quantumTaskArn: {}
                }
            },
            idempotent: true
        },
        CreateQuantumTask: {
            http: {
                requestUri: "/quantum-task",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "action", "clientToken", "deviceArn", "outputS3Bucket", "outputS3KeyPrefix", "shots" ],
                members: {
                    action: {
                        jsonvalue: true
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    deviceArn: {},
                    deviceParameters: {
                        jsonvalue: true
                    },
                    outputS3Bucket: {},
                    outputS3KeyPrefix: {},
                    shots: {
                        type: "long"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "quantumTaskArn" ],
                members: {
                    quantumTaskArn: {}
                }
            }
        },
        GetDevice: {
            http: {
                method: "GET",
                requestUri: "/device/{deviceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "deviceArn" ],
                members: {
                    deviceArn: {
                        location: "uri",
                        locationName: "deviceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "deviceArn", "deviceCapabilities", "deviceName", "deviceStatus", "deviceType", "providerName" ],
                members: {
                    deviceArn: {},
                    deviceCapabilities: {
                        jsonvalue: true
                    },
                    deviceName: {},
                    deviceStatus: {},
                    deviceType: {},
                    providerName: {}
                }
            }
        },
        GetQuantumTask: {
            http: {
                method: "GET",
                requestUri: "/quantum-task/{quantumTaskArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "quantumTaskArn" ],
                members: {
                    quantumTaskArn: {
                        location: "uri",
                        locationName: "quantumTaskArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "deviceArn", "deviceParameters", "outputS3Bucket", "outputS3Directory", "quantumTaskArn", "shots", "status" ],
                members: {
                    createdAt: {
                        shape: "Sm"
                    },
                    deviceArn: {},
                    deviceParameters: {
                        jsonvalue: true
                    },
                    endedAt: {
                        shape: "Sm"
                    },
                    failureReason: {},
                    outputS3Bucket: {},
                    outputS3Directory: {},
                    quantumTaskArn: {},
                    shots: {
                        type: "long"
                    },
                    status: {},
                    tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        SearchDevices: {
            http: {
                requestUri: "/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "filters" ],
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values" ],
                            members: {
                                name: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "devices" ],
                members: {
                    devices: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "deviceArn", "deviceName", "deviceStatus", "deviceType", "providerName" ],
                            members: {
                                deviceArn: {},
                                deviceName: {},
                                deviceStatus: {},
                                deviceType: {},
                                providerName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        SearchQuantumTasks: {
            http: {
                requestUri: "/quantum-tasks",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "filters" ],
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "operator", "values" ],
                            members: {
                                name: {},
                                operator: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "quantumTasks" ],
                members: {
                    nextToken: {},
                    quantumTasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdAt", "deviceArn", "outputS3Bucket", "outputS3Directory", "quantumTaskArn", "shots", "status" ],
                            members: {
                                createdAt: {
                                    shape: "Sm"
                                },
                                deviceArn: {},
                                endedAt: {
                                    shape: "Sm"
                                },
                                outputS3Bucket: {},
                                outputS3Directory: {},
                                quantumTaskArn: {},
                                shots: {
                                    type: "long"
                                },
                                status: {},
                                tags: {
                                    shape: "Sd"
                                }
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        Sd: {
            type: "map",
            key: {},
            value: {}
        },
        Sm: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        SearchDevices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "devices"
        },
        SearchQuantumTasks: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "quantumTasks"
        }
    }
};

AWS.apiLoader.services["identitystore"] = {};

AWS.IdentityStore = AWS.Service.defineService("identitystore", [ "2020-06-15" ]);

AWS.apiLoader.services["identitystore"]["2020-06-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-06-15",
        endpointPrefix: "identitystore",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "IdentityStore",
        serviceFullName: "AWS SSO Identity Store",
        serviceId: "identitystore",
        signatureVersion: "v4",
        signingName: "identitystore",
        targetPrefix: "AWSIdentityStore",
        uid: "identitystore-2020-06-15"
    },
    operations: {
        DescribeGroup: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "GroupId" ],
                members: {
                    IdentityStoreId: {},
                    GroupId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "GroupId", "DisplayName" ],
                members: {
                    GroupId: {},
                    DisplayName: {}
                }
            }
        },
        DescribeUser: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "UserId" ],
                members: {
                    IdentityStoreId: {},
                    UserId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "UserName", "UserId" ],
                members: {
                    UserName: {
                        shape: "S8"
                    },
                    UserId: {}
                }
            }
        },
        ListGroups: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId" ],
                members: {
                    IdentityStoreId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Groups" ],
                members: {
                    Groups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "GroupId", "DisplayName" ],
                            members: {
                                GroupId: {},
                                DisplayName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListUsers: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId" ],
                members: {
                    IdentityStoreId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Users" ],
                members: {
                    Users: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "UserName", "UserId" ],
                            members: {
                                UserName: {
                                    shape: "S8"
                                },
                                UserId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {
        S8: {
            type: "string",
            sensitive: true
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AttributePath", "AttributeValue" ],
                members: {
                    AttributePath: {},
                    AttributeValue: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        }
    },
    paginators: {
        ListGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["appflow"] = {};

AWS.Appflow = AWS.Service.defineService("appflow", [ "2020-08-23" ]);

AWS.apiLoader.services["appflow"]["2020-08-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-23",
        endpointPrefix: "appflow",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Appflow",
        serviceId: "Appflow",
        signatureVersion: "v4",
        signingName: "appflow",
        uid: "appflow-2020-08-23"
    },
    operations: {
        CreateConnectorProfile: {
            http: {
                requestUri: "/create-connector-profile"
            },
            input: {
                type: "structure",
                required: [ "connectorProfileName", "connectorType", "connectionMode", "connectorProfileConfig" ],
                members: {
                    connectorProfileName: {},
                    kmsArn: {},
                    connectorType: {},
                    connectionMode: {},
                    connectorProfileConfig: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorProfileArn: {}
                }
            }
        },
        CreateFlow: {
            http: {
                requestUri: "/create-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName", "triggerConfig", "sourceFlowConfig", "destinationFlowConfigList", "tasks" ],
                members: {
                    flowName: {},
                    description: {},
                    kmsArn: {},
                    triggerConfig: {
                        shape: "S2g"
                    },
                    sourceFlowConfig: {
                        shape: "S2p"
                    },
                    destinationFlowConfigList: {
                        shape: "S3c"
                    },
                    tasks: {
                        shape: "S44"
                    },
                    tags: {
                        shape: "S4t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    flowArn: {},
                    flowStatus: {}
                }
            }
        },
        DeleteConnectorProfile: {
            http: {
                requestUri: "/delete-connector-profile"
            },
            input: {
                type: "structure",
                required: [ "connectorProfileName" ],
                members: {
                    connectorProfileName: {},
                    forceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFlow: {
            http: {
                requestUri: "/delete-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {},
                    forceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeConnectorEntity: {
            http: {
                requestUri: "/describe-connector-entity"
            },
            input: {
                type: "structure",
                required: [ "connectorEntityName" ],
                members: {
                    connectorEntityName: {},
                    connectorType: {},
                    connectorProfileName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "connectorEntityFields" ],
                members: {
                    connectorEntityFields: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "identifier" ],
                            members: {
                                identifier: {},
                                label: {},
                                supportedFieldTypeDetails: {
                                    type: "structure",
                                    required: [ "v1" ],
                                    members: {
                                        v1: {
                                            type: "structure",
                                            required: [ "fieldType", "filterOperators" ],
                                            members: {
                                                fieldType: {},
                                                filterOperators: {
                                                    type: "list",
                                                    member: {}
                                                },
                                                supportedValues: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                description: {},
                                sourceProperties: {
                                    type: "structure",
                                    members: {
                                        isRetrievable: {
                                            type: "boolean"
                                        },
                                        isQueryable: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                destinationProperties: {
                                    type: "structure",
                                    members: {
                                        isCreatable: {
                                            type: "boolean"
                                        },
                                        isNullable: {
                                            type: "boolean"
                                        },
                                        isUpsertable: {
                                            type: "boolean"
                                        },
                                        isUpdatable: {
                                            type: "boolean"
                                        },
                                        supportedWriteOperations: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeConnectorProfiles: {
            http: {
                requestUri: "/describe-connector-profiles"
            },
            input: {
                type: "structure",
                members: {
                    connectorProfileNames: {
                        type: "list",
                        member: {}
                    },
                    connectorType: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorProfileDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                connectorProfileArn: {},
                                connectorProfileName: {},
                                connectorType: {},
                                connectionMode: {},
                                credentialsArn: {},
                                connectorProfileProperties: {
                                    shape: "S7"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                privateConnectionProvisioningState: {
                                    type: "structure",
                                    members: {
                                        status: {},
                                        failureMessage: {},
                                        failureCause: {}
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeConnectors: {
            http: {
                requestUri: "/describe-connectors"
            },
            input: {
                type: "structure",
                members: {
                    connectorTypes: {
                        shape: "S5x"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorConfigurations: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                canUseAsSource: {
                                    type: "boolean"
                                },
                                canUseAsDestination: {
                                    type: "boolean"
                                },
                                supportedDestinationConnectors: {
                                    shape: "S5x"
                                },
                                supportedSchedulingFrequencies: {
                                    type: "list",
                                    member: {}
                                },
                                isPrivateLinkEnabled: {
                                    type: "boolean"
                                },
                                isPrivateLinkEndpointUrlRequired: {
                                    type: "boolean"
                                },
                                supportedTriggerTypes: {
                                    type: "list",
                                    member: {}
                                },
                                connectorMetadata: {
                                    type: "structure",
                                    members: {
                                        Amplitude: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Datadog: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Dynatrace: {
                                            type: "structure",
                                            members: {}
                                        },
                                        GoogleAnalytics: {
                                            type: "structure",
                                            members: {
                                                oAuthScopes: {
                                                    shape: "S18"
                                                }
                                            }
                                        },
                                        InforNexus: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Marketo: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Redshift: {
                                            type: "structure",
                                            members: {}
                                        },
                                        S3: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Salesforce: {
                                            type: "structure",
                                            members: {
                                                oAuthScopes: {
                                                    shape: "S18"
                                                }
                                            }
                                        },
                                        ServiceNow: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Singular: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Slack: {
                                            type: "structure",
                                            members: {
                                                oAuthScopes: {
                                                    shape: "S18"
                                                }
                                            }
                                        },
                                        Snowflake: {
                                            type: "structure",
                                            members: {
                                                supportedRegions: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        },
                                        Trendmicro: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Veeva: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Zendesk: {
                                            type: "structure",
                                            members: {
                                                oAuthScopes: {
                                                    shape: "S18"
                                                }
                                            }
                                        },
                                        EventBridge: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Upsolver: {
                                            type: "structure",
                                            members: {}
                                        },
                                        CustomerProfiles: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Honeycode: {
                                            type: "structure",
                                            members: {
                                                oAuthScopes: {
                                                    shape: "S18"
                                                }
                                            }
                                        },
                                        SAPOData: {
                                            type: "structure",
                                            members: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeFlow: {
            http: {
                requestUri: "/describe-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flowArn: {},
                    description: {},
                    flowName: {},
                    kmsArn: {},
                    flowStatus: {},
                    flowStatusMessage: {},
                    sourceFlowConfig: {
                        shape: "S2p"
                    },
                    destinationFlowConfigList: {
                        shape: "S3c"
                    },
                    lastRunExecutionDetails: {
                        shape: "S6u"
                    },
                    triggerConfig: {
                        shape: "S2g"
                    },
                    tasks: {
                        shape: "S44"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    lastUpdatedBy: {},
                    tags: {
                        shape: "S4t"
                    }
                }
            }
        },
        DescribeFlowExecutionRecords: {
            http: {
                requestUri: "/describe-flow-execution-records"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flowExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                executionId: {},
                                executionStatus: {},
                                executionResult: {
                                    type: "structure",
                                    members: {
                                        errorInfo: {
                                            type: "structure",
                                            members: {
                                                putFailuresCount: {
                                                    type: "long"
                                                },
                                                executionMessage: {}
                                            }
                                        },
                                        bytesProcessed: {
                                            type: "long"
                                        },
                                        bytesWritten: {
                                            type: "long"
                                        },
                                        recordsProcessed: {
                                            type: "long"
                                        }
                                    }
                                },
                                startedAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                dataPullStartTime: {
                                    type: "timestamp"
                                },
                                dataPullEndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListConnectorEntities: {
            http: {
                requestUri: "/list-connector-entities"
            },
            input: {
                type: "structure",
                members: {
                    connectorProfileName: {},
                    connectorType: {},
                    entitiesPath: {}
                }
            },
            output: {
                type: "structure",
                required: [ "connectorEntityMap" ],
                members: {
                    connectorEntityMap: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "name" ],
                                members: {
                                    name: {},
                                    label: {},
                                    hasNestedEntities: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListFlows: {
            http: {
                requestUri: "/list-flows"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flows: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                flowArn: {},
                                description: {},
                                flowName: {},
                                flowStatus: {},
                                sourceConnectorType: {},
                                destinationConnectorType: {},
                                triggerType: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                createdBy: {},
                                lastUpdatedBy: {},
                                tags: {
                                    shape: "S4t"
                                },
                                lastRunExecutionDetails: {
                                    shape: "S6u"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S4t"
                    }
                }
            }
        },
        StartFlow: {
            http: {
                requestUri: "/start-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flowArn: {},
                    flowStatus: {},
                    executionId: {}
                }
            }
        },
        StopFlow: {
            http: {
                requestUri: "/stop-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flowArn: {},
                    flowStatus: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S4t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConnectorProfile: {
            http: {
                requestUri: "/update-connector-profile"
            },
            input: {
                type: "structure",
                required: [ "connectorProfileName", "connectionMode", "connectorProfileConfig" ],
                members: {
                    connectorProfileName: {},
                    connectionMode: {},
                    connectorProfileConfig: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorProfileArn: {}
                }
            }
        },
        UpdateFlow: {
            http: {
                requestUri: "/update-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName", "triggerConfig", "sourceFlowConfig", "destinationFlowConfigList", "tasks" ],
                members: {
                    flowName: {},
                    description: {},
                    triggerConfig: {
                        shape: "S2g"
                    },
                    sourceFlowConfig: {
                        shape: "S2p"
                    },
                    destinationFlowConfigList: {
                        shape: "S3c"
                    },
                    tasks: {
                        shape: "S44"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    flowStatus: {}
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            required: [ "connectorProfileProperties", "connectorProfileCredentials" ],
            members: {
                connectorProfileProperties: {
                    shape: "S7"
                },
                connectorProfileCredentials: {
                    type: "structure",
                    members: {
                        Amplitude: {
                            type: "structure",
                            required: [ "apiKey", "secretKey" ],
                            members: {
                                apiKey: {},
                                secretKey: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        },
                        Datadog: {
                            type: "structure",
                            required: [ "apiKey", "applicationKey" ],
                            members: {
                                apiKey: {},
                                applicationKey: {}
                            }
                        },
                        Dynatrace: {
                            type: "structure",
                            required: [ "apiToken" ],
                            members: {
                                apiToken: {}
                            }
                        },
                        GoogleAnalytics: {
                            type: "structure",
                            required: [ "clientId", "clientSecret" ],
                            members: {
                                clientId: {},
                                clientSecret: {
                                    shape: "S1k"
                                },
                                accessToken: {
                                    shape: "S1l"
                                },
                                refreshToken: {},
                                oAuthRequest: {
                                    shape: "S1n"
                                }
                            }
                        },
                        Honeycode: {
                            type: "structure",
                            members: {
                                accessToken: {
                                    shape: "S1l"
                                },
                                refreshToken: {},
                                oAuthRequest: {
                                    shape: "S1n"
                                }
                            }
                        },
                        InforNexus: {
                            type: "structure",
                            required: [ "accessKeyId", "userId", "secretAccessKey", "datakey" ],
                            members: {
                                accessKeyId: {
                                    type: "string",
                                    sensitive: true
                                },
                                userId: {},
                                secretAccessKey: {},
                                datakey: {}
                            }
                        },
                        Marketo: {
                            type: "structure",
                            required: [ "clientId", "clientSecret" ],
                            members: {
                                clientId: {},
                                clientSecret: {
                                    shape: "S1k"
                                },
                                accessToken: {
                                    shape: "S1l"
                                },
                                oAuthRequest: {
                                    shape: "S1n"
                                }
                            }
                        },
                        Redshift: {
                            type: "structure",
                            required: [ "username", "password" ],
                            members: {
                                username: {},
                                password: {
                                    shape: "S1x"
                                }
                            }
                        },
                        Salesforce: {
                            type: "structure",
                            members: {
                                accessToken: {
                                    shape: "S1l"
                                },
                                refreshToken: {},
                                oAuthRequest: {
                                    shape: "S1n"
                                },
                                clientCredentialsArn: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        },
                        ServiceNow: {
                            type: "structure",
                            required: [ "username", "password" ],
                            members: {
                                username: {},
                                password: {
                                    shape: "S1x"
                                }
                            }
                        },
                        Singular: {
                            type: "structure",
                            required: [ "apiKey" ],
                            members: {
                                apiKey: {}
                            }
                        },
                        Slack: {
                            type: "structure",
                            required: [ "clientId", "clientSecret" ],
                            members: {
                                clientId: {},
                                clientSecret: {
                                    shape: "S1k"
                                },
                                accessToken: {
                                    shape: "S1l"
                                },
                                oAuthRequest: {
                                    shape: "S1n"
                                }
                            }
                        },
                        Snowflake: {
                            type: "structure",
                            required: [ "username", "password" ],
                            members: {
                                username: {},
                                password: {
                                    shape: "S1x"
                                }
                            }
                        },
                        Trendmicro: {
                            type: "structure",
                            required: [ "apiSecretKey" ],
                            members: {
                                apiSecretKey: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        },
                        Veeva: {
                            type: "structure",
                            required: [ "username", "password" ],
                            members: {
                                username: {},
                                password: {
                                    shape: "S1x"
                                }
                            }
                        },
                        Zendesk: {
                            type: "structure",
                            required: [ "clientId", "clientSecret" ],
                            members: {
                                clientId: {},
                                clientSecret: {
                                    shape: "S1k"
                                },
                                accessToken: {
                                    shape: "S1l"
                                },
                                oAuthRequest: {
                                    shape: "S1n"
                                }
                            }
                        },
                        SAPOData: {
                            type: "structure",
                            members: {
                                basicAuthCredentials: {
                                    type: "structure",
                                    required: [ "username", "password" ],
                                    members: {
                                        username: {},
                                        password: {
                                            shape: "S1x"
                                        }
                                    }
                                },
                                oAuthCredentials: {
                                    type: "structure",
                                    required: [ "clientId", "clientSecret" ],
                                    members: {
                                        clientId: {},
                                        clientSecret: {
                                            shape: "S1k"
                                        },
                                        accessToken: {
                                            shape: "S1l"
                                        },
                                        refreshToken: {},
                                        oAuthRequest: {
                                            shape: "S1n"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S7: {
            type: "structure",
            members: {
                Amplitude: {
                    type: "structure",
                    members: {}
                },
                Datadog: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Dynatrace: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                GoogleAnalytics: {
                    type: "structure",
                    members: {}
                },
                Honeycode: {
                    type: "structure",
                    members: {}
                },
                InforNexus: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Marketo: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Redshift: {
                    type: "structure",
                    required: [ "databaseUrl", "bucketName", "roleArn" ],
                    members: {
                        databaseUrl: {},
                        bucketName: {},
                        bucketPrefix: {},
                        roleArn: {}
                    }
                },
                Salesforce: {
                    type: "structure",
                    members: {
                        instanceUrl: {},
                        isSandboxEnvironment: {
                            type: "boolean"
                        }
                    }
                },
                ServiceNow: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Singular: {
                    type: "structure",
                    members: {}
                },
                Slack: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Snowflake: {
                    type: "structure",
                    required: [ "warehouse", "stage", "bucketName" ],
                    members: {
                        warehouse: {},
                        stage: {},
                        bucketName: {},
                        bucketPrefix: {},
                        privateLinkServiceName: {},
                        accountName: {},
                        region: {}
                    }
                },
                Trendmicro: {
                    type: "structure",
                    members: {}
                },
                Veeva: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Zendesk: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                SAPOData: {
                    type: "structure",
                    required: [ "applicationHostUrl", "applicationServicePath", "portNumber", "clientNumber" ],
                    members: {
                        applicationHostUrl: {},
                        applicationServicePath: {},
                        portNumber: {
                            type: "integer"
                        },
                        clientNumber: {},
                        logonLanguage: {},
                        privateLinkServiceName: {},
                        oAuthProperties: {
                            type: "structure",
                            required: [ "tokenUrl", "authCodeUrl", "oAuthScopes" ],
                            members: {
                                tokenUrl: {},
                                authCodeUrl: {},
                                oAuthScopes: {
                                    shape: "S18"
                                }
                            }
                        }
                    }
                }
            }
        },
        S18: {
            type: "list",
            member: {}
        },
        S1k: {
            type: "string",
            sensitive: true
        },
        S1l: {
            type: "string",
            sensitive: true
        },
        S1n: {
            type: "structure",
            members: {
                authCode: {},
                redirectUri: {}
            }
        },
        S1x: {
            type: "string",
            sensitive: true
        },
        S2g: {
            type: "structure",
            required: [ "triggerType" ],
            members: {
                triggerType: {},
                triggerProperties: {
                    type: "structure",
                    members: {
                        Scheduled: {
                            type: "structure",
                            required: [ "scheduleExpression" ],
                            members: {
                                scheduleExpression: {},
                                dataPullMode: {},
                                scheduleStartTime: {
                                    type: "timestamp"
                                },
                                scheduleEndTime: {
                                    type: "timestamp"
                                },
                                timezone: {},
                                scheduleOffset: {
                                    type: "long"
                                },
                                firstExecutionFrom: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        S2p: {
            type: "structure",
            required: [ "connectorType", "sourceConnectorProperties" ],
            members: {
                connectorType: {},
                connectorProfileName: {},
                sourceConnectorProperties: {
                    type: "structure",
                    members: {
                        Amplitude: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Datadog: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Dynatrace: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        GoogleAnalytics: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        InforNexus: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Marketo: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        S3: {
                            type: "structure",
                            required: [ "bucketName" ],
                            members: {
                                bucketName: {},
                                bucketPrefix: {},
                                s3InputFormatConfig: {
                                    type: "structure",
                                    members: {
                                        s3InputFileType: {}
                                    }
                                }
                            }
                        },
                        Salesforce: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {},
                                enableDynamicFieldUpdate: {
                                    type: "boolean"
                                },
                                includeDeletedRecords: {
                                    type: "boolean"
                                }
                            }
                        },
                        ServiceNow: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Singular: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Slack: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Trendmicro: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Veeva: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {},
                                documentType: {},
                                includeSourceFiles: {
                                    type: "boolean"
                                },
                                includeRenditions: {
                                    type: "boolean"
                                },
                                includeAllVersions: {
                                    type: "boolean"
                                }
                            }
                        },
                        Zendesk: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        SAPOData: {
                            type: "structure",
                            members: {
                                objectPath: {}
                            }
                        }
                    }
                },
                incrementalPullConfig: {
                    type: "structure",
                    members: {
                        datetimeTypeFieldName: {}
                    }
                }
            }
        },
        S3c: {
            type: "list",
            member: {
                type: "structure",
                required: [ "connectorType", "destinationConnectorProperties" ],
                members: {
                    connectorType: {},
                    connectorProfileName: {},
                    destinationConnectorProperties: {
                        type: "structure",
                        members: {
                            Redshift: {
                                type: "structure",
                                required: [ "object", "intermediateBucketName" ],
                                members: {
                                    object: {},
                                    intermediateBucketName: {},
                                    bucketPrefix: {},
                                    errorHandlingConfig: {
                                        shape: "S3g"
                                    }
                                }
                            },
                            S3: {
                                type: "structure",
                                required: [ "bucketName" ],
                                members: {
                                    bucketName: {},
                                    bucketPrefix: {},
                                    s3OutputFormatConfig: {
                                        type: "structure",
                                        members: {
                                            fileType: {},
                                            prefixConfig: {
                                                shape: "S3k"
                                            },
                                            aggregationConfig: {
                                                shape: "S3n"
                                            }
                                        }
                                    }
                                }
                            },
                            Salesforce: {
                                type: "structure",
                                required: [ "object" ],
                                members: {
                                    object: {},
                                    idFieldNames: {
                                        shape: "S3q"
                                    },
                                    errorHandlingConfig: {
                                        shape: "S3g"
                                    },
                                    writeOperationType: {}
                                }
                            },
                            Snowflake: {
                                type: "structure",
                                required: [ "object", "intermediateBucketName" ],
                                members: {
                                    object: {},
                                    intermediateBucketName: {},
                                    bucketPrefix: {},
                                    errorHandlingConfig: {
                                        shape: "S3g"
                                    }
                                }
                            },
                            EventBridge: {
                                type: "structure",
                                required: [ "object" ],
                                members: {
                                    object: {},
                                    errorHandlingConfig: {
                                        shape: "S3g"
                                    }
                                }
                            },
                            LookoutMetrics: {
                                type: "structure",
                                members: {}
                            },
                            Upsolver: {
                                type: "structure",
                                required: [ "bucketName", "s3OutputFormatConfig" ],
                                members: {
                                    bucketName: {},
                                    bucketPrefix: {},
                                    s3OutputFormatConfig: {
                                        type: "structure",
                                        required: [ "prefixConfig" ],
                                        members: {
                                            fileType: {},
                                            prefixConfig: {
                                                shape: "S3k"
                                            },
                                            aggregationConfig: {
                                                shape: "S3n"
                                            }
                                        }
                                    }
                                }
                            },
                            Honeycode: {
                                type: "structure",
                                required: [ "object" ],
                                members: {
                                    object: {},
                                    errorHandlingConfig: {
                                        shape: "S3g"
                                    }
                                }
                            },
                            CustomerProfiles: {
                                type: "structure",
                                required: [ "domainName" ],
                                members: {
                                    domainName: {},
                                    objectTypeName: {}
                                }
                            },
                            Zendesk: {
                                type: "structure",
                                required: [ "object" ],
                                members: {
                                    object: {},
                                    idFieldNames: {
                                        shape: "S3q"
                                    },
                                    errorHandlingConfig: {
                                        shape: "S3g"
                                    },
                                    writeOperationType: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S3g: {
            type: "structure",
            members: {
                failOnFirstDestinationError: {
                    type: "boolean"
                },
                bucketPrefix: {},
                bucketName: {}
            }
        },
        S3k: {
            type: "structure",
            members: {
                prefixType: {},
                prefixFormat: {}
            }
        },
        S3n: {
            type: "structure",
            members: {
                aggregationType: {}
            }
        },
        S3q: {
            type: "list",
            member: {}
        },
        S44: {
            type: "list",
            member: {
                type: "structure",
                required: [ "sourceFields", "taskType" ],
                members: {
                    sourceFields: {
                        type: "list",
                        member: {}
                    },
                    connectorOperator: {
                        type: "structure",
                        members: {
                            Amplitude: {},
                            Datadog: {},
                            Dynatrace: {},
                            GoogleAnalytics: {},
                            InforNexus: {},
                            Marketo: {},
                            S3: {},
                            Salesforce: {},
                            ServiceNow: {},
                            Singular: {},
                            Slack: {},
                            Trendmicro: {},
                            Veeva: {},
                            Zendesk: {},
                            SAPOData: {}
                        }
                    },
                    destinationField: {},
                    taskType: {},
                    taskProperties: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S4t: {
            type: "map",
            key: {},
            value: {}
        },
        S5x: {
            type: "list",
            member: {}
        },
        S6u: {
            type: "structure",
            members: {
                mostRecentExecutionMessage: {},
                mostRecentExecutionTime: {
                    type: "timestamp"
                },
                mostRecentExecutionStatus: {}
            }
        }
    },
    paginators: {
        DescribeConnectorProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        DescribeConnectors: {
            input_token: "nextToken",
            output_token: "nextToken"
        },
        DescribeFlowExecutionRecords: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListFlows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["redshiftdata"] = {};

AWS.RedshiftData = AWS.Service.defineService("redshiftdata", [ "2019-12-20" ]);

AWS.apiLoader.services["redshiftdata"]["2019-12-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-20",
        endpointPrefix: "redshift-data",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Redshift Data API Service",
        serviceId: "Redshift Data",
        signatureVersion: "v4",
        signingName: "redshift-data",
        targetPrefix: "RedshiftData",
        uid: "redshift-data-2019-12-20"
    },
    operations: {
        BatchExecuteStatement: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier", "Database", "Sqls" ],
                members: {
                    ClusterIdentifier: {},
                    Database: {},
                    DbUser: {},
                    SecretArn: {},
                    Sqls: {
                        type: "list",
                        member: {}
                    },
                    StatementName: {},
                    WithEvent: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClusterIdentifier: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    Database: {},
                    DbUser: {},
                    Id: {},
                    SecretArn: {}
                }
            }
        },
        CancelStatement: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeStatement: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    ClusterIdentifier: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    Database: {},
                    DbUser: {},
                    Duration: {
                        type: "long"
                    },
                    Error: {},
                    HasResultSet: {
                        type: "boolean"
                    },
                    Id: {},
                    QueryParameters: {
                        shape: "Sh"
                    },
                    QueryString: {},
                    RedshiftPid: {
                        type: "long"
                    },
                    RedshiftQueryId: {
                        type: "long"
                    },
                    ResultRows: {
                        type: "long"
                    },
                    ResultSize: {
                        type: "long"
                    },
                    SecretArn: {},
                    Status: {},
                    SubStatements: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id" ],
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                Duration: {
                                    type: "long"
                                },
                                Error: {},
                                HasResultSet: {
                                    type: "boolean"
                                },
                                Id: {},
                                QueryString: {},
                                RedshiftQueryId: {
                                    type: "long"
                                },
                                ResultRows: {
                                    type: "long"
                                },
                                ResultSize: {
                                    type: "long"
                                },
                                Status: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeTable: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier", "Database" ],
                members: {
                    ClusterIdentifier: {},
                    ConnectedDatabase: {},
                    Database: {},
                    DbUser: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Schema: {},
                    SecretArn: {},
                    Table: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ColumnList: {
                        type: "list",
                        member: {
                            shape: "St"
                        }
                    },
                    NextToken: {},
                    TableName: {}
                }
            }
        },
        ExecuteStatement: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier", "Database", "Sql" ],
                members: {
                    ClusterIdentifier: {},
                    Database: {},
                    DbUser: {},
                    Parameters: {
                        shape: "Sh"
                    },
                    SecretArn: {},
                    Sql: {},
                    StatementName: {},
                    WithEvent: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClusterIdentifier: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    Database: {},
                    DbUser: {},
                    Id: {},
                    SecretArn: {}
                }
            }
        },
        GetStatementResult: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Records" ],
                members: {
                    ColumnMetadata: {
                        type: "list",
                        member: {
                            shape: "St"
                        }
                    },
                    NextToken: {},
                    Records: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    blobValue: {
                                        type: "blob"
                                    },
                                    booleanValue: {
                                        type: "boolean"
                                    },
                                    doubleValue: {
                                        type: "double"
                                    },
                                    isNull: {
                                        type: "boolean"
                                    },
                                    longValue: {
                                        type: "long"
                                    },
                                    stringValue: {}
                                },
                                union: true
                            }
                        }
                    },
                    TotalNumRows: {
                        type: "long"
                    }
                }
            }
        },
        ListDatabases: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier", "Database" ],
                members: {
                    ClusterIdentifier: {},
                    Database: {},
                    DbUser: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SecretArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Databases: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListSchemas: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier", "Database" ],
                members: {
                    ClusterIdentifier: {},
                    ConnectedDatabase: {},
                    Database: {},
                    DbUser: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SchemaPattern: {},
                    SecretArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Schemas: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListStatements: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    RoleLevel: {
                        type: "boolean"
                    },
                    StatementName: {},
                    Status: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Statements" ],
                members: {
                    NextToken: {},
                    Statements: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id" ],
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                Id: {},
                                IsBatchStatement: {
                                    type: "boolean"
                                },
                                QueryParameters: {
                                    shape: "Sh"
                                },
                                QueryString: {},
                                QueryStrings: {
                                    type: "list",
                                    member: {}
                                },
                                SecretArn: {},
                                StatementName: {},
                                Status: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTables: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier", "Database" ],
                members: {
                    ClusterIdentifier: {},
                    ConnectedDatabase: {},
                    Database: {},
                    DbUser: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SchemaPattern: {},
                    SecretArn: {},
                    TablePattern: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Tables: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                schema: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        Sh: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "value" ],
                members: {
                    name: {},
                    value: {}
                }
            }
        },
        St: {
            type: "structure",
            members: {
                columnDefault: {},
                isCaseSensitive: {
                    type: "boolean"
                },
                isCurrency: {
                    type: "boolean"
                },
                isSigned: {
                    type: "boolean"
                },
                label: {},
                length: {
                    type: "integer"
                },
                name: {},
                nullable: {
                    type: "integer"
                },
                precision: {
                    type: "integer"
                },
                scale: {
                    type: "integer"
                },
                schemaName: {},
                tableName: {},
                typeName: {}
            }
        }
    },
    paginators: {
        DescribeTable: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ColumnList"
        },
        GetStatementResult: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Records"
        },
        ListDatabases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Databases"
        },
        ListSchemas: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Schemas"
        },
        ListStatements: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Statements"
        },
        ListTables: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tables"
        }
    }
};

AWS.apiLoader.services["ssoadmin"] = {};

AWS.SSOAdmin = AWS.Service.defineService("ssoadmin", [ "2020-07-20" ]);

AWS.apiLoader.services["ssoadmin"]["2020-07-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-20",
        endpointPrefix: "sso",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "SSO Admin",
        serviceFullName: "AWS Single Sign-On Admin",
        serviceId: "SSO Admin",
        signatureVersion: "v4",
        signingName: "sso",
        targetPrefix: "SWBExternalService",
        uid: "sso-admin-2020-07-20"
    },
    operations: {
        AttachManagedPolicyToPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn", "ManagedPolicyArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {},
                    ManagedPolicyArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateAccountAssignment: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "TargetId", "TargetType", "PermissionSetArn", "PrincipalType", "PrincipalId" ],
                members: {
                    InstanceArn: {},
                    TargetId: {},
                    TargetType: {},
                    PermissionSetArn: {},
                    PrincipalType: {},
                    PrincipalId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignmentCreationStatus: {
                        shape: "Sc"
                    }
                }
            }
        },
        CreateInstanceAccessControlAttributeConfiguration: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "InstanceAccessControlAttributeConfiguration" ],
                members: {
                    InstanceArn: {},
                    InstanceAccessControlAttributeConfiguration: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreatePermissionSet: {
            input: {
                type: "structure",
                required: [ "Name", "InstanceArn" ],
                members: {
                    Name: {},
                    Description: {},
                    InstanceArn: {},
                    SessionDuration: {},
                    RelayState: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PermissionSet: {
                        shape: "S10"
                    }
                }
            }
        },
        DeleteAccountAssignment: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "TargetId", "TargetType", "PermissionSetArn", "PrincipalType", "PrincipalId" ],
                members: {
                    InstanceArn: {},
                    TargetId: {},
                    TargetType: {},
                    PermissionSetArn: {},
                    PrincipalType: {},
                    PrincipalId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignmentDeletionStatus: {
                        shape: "Sc"
                    }
                }
            }
        },
        DeleteInlinePolicyFromPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInstanceAccessControlAttributeConfiguration: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    InstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAccountAssignmentCreationStatus: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "AccountAssignmentCreationRequestId" ],
                members: {
                    InstanceArn: {},
                    AccountAssignmentCreationRequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignmentCreationStatus: {
                        shape: "Sc"
                    }
                }
            }
        },
        DescribeAccountAssignmentDeletionStatus: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "AccountAssignmentDeletionRequestId" ],
                members: {
                    InstanceArn: {},
                    AccountAssignmentDeletionRequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignmentDeletionStatus: {
                        shape: "Sc"
                    }
                }
            }
        },
        DescribeInstanceAccessControlAttributeConfiguration: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    InstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    StatusReason: {},
                    InstanceAccessControlAttributeConfiguration: {
                        shape: "Si"
                    }
                }
            }
        },
        DescribePermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PermissionSet: {
                        shape: "S10"
                    }
                }
            }
        },
        DescribePermissionSetProvisioningStatus: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "ProvisionPermissionSetRequestId" ],
                members: {
                    InstanceArn: {},
                    ProvisionPermissionSetRequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PermissionSetProvisioningStatus: {
                        shape: "S1l"
                    }
                }
            }
        },
        DetachManagedPolicyFromPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn", "ManagedPolicyArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {},
                    ManagedPolicyArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetInlinePolicyForPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InlinePolicy: {
                        shape: "S1r"
                    }
                }
            }
        },
        ListAccountAssignmentCreationStatus: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filter: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignmentsCreationStatus: {
                        shape: "S1x"
                    },
                    NextToken: {}
                }
            }
        },
        ListAccountAssignmentDeletionStatus: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filter: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignmentsDeletionStatus: {
                        shape: "S1x"
                    },
                    NextToken: {}
                }
            }
        },
        ListAccountAssignments: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "AccountId", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    AccountId: {},
                    PermissionSetArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAssignments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                PermissionSetArn: {},
                                PrincipalType: {},
                                PrincipalId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAccountsForProvisionedPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {},
                    ProvisioningStatus: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListInstances: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceArn: {},
                                IdentityStoreId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListManagedPoliciesInPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AttachedManagedPolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Arn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPermissionSetProvisioningStatus: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    InstanceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filter: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PermissionSetsProvisioningStatus: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Status: {},
                                RequestId: {},
                                CreatedDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPermissionSets: {
            input: {
                type: "structure",
                required: [ "InstanceArn" ],
                members: {
                    InstanceArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PermissionSets: {
                        shape: "S2p"
                    },
                    NextToken: {}
                }
            }
        },
        ListPermissionSetsProvisionedToAccount: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "AccountId" ],
                members: {
                    InstanceArn: {},
                    AccountId: {},
                    ProvisioningStatus: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    PermissionSets: {
                        shape: "S2p"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "ResourceArn" ],
                members: {
                    InstanceArn: {},
                    ResourceArn: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sv"
                    },
                    NextToken: {}
                }
            }
        },
        ProvisionPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn", "TargetType" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {},
                    TargetId: {},
                    TargetType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PermissionSetProvisioningStatus: {
                        shape: "S1l"
                    }
                }
            }
        },
        PutInlinePolicyToPermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn", "InlinePolicy" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {},
                    InlinePolicy: {
                        shape: "S1r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "ResourceArn", "Tags" ],
                members: {
                    InstanceArn: {},
                    ResourceArn: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "ResourceArn", "TagKeys" ],
                members: {
                    InstanceArn: {},
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateInstanceAccessControlAttributeConfiguration: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "InstanceAccessControlAttributeConfiguration" ],
                members: {
                    InstanceArn: {},
                    InstanceAccessControlAttributeConfiguration: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePermissionSet: {
            input: {
                type: "structure",
                required: [ "InstanceArn", "PermissionSetArn" ],
                members: {
                    InstanceArn: {},
                    PermissionSetArn: {},
                    Description: {},
                    SessionDuration: {},
                    RelayState: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sc: {
            type: "structure",
            members: {
                Status: {},
                RequestId: {},
                FailureReason: {},
                TargetId: {},
                TargetType: {},
                PermissionSetArn: {},
                PrincipalType: {},
                PrincipalId: {},
                CreatedDate: {
                    type: "timestamp"
                }
            }
        },
        Si: {
            type: "structure",
            required: [ "AccessControlAttributes" ],
            members: {
                AccessControlAttributes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Key", "Value" ],
                        members: {
                            Key: {},
                            Value: {
                                type: "structure",
                                required: [ "Source" ],
                                members: {
                                    Source: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S10: {
            type: "structure",
            members: {
                Name: {},
                PermissionSetArn: {},
                Description: {},
                CreatedDate: {
                    type: "timestamp"
                },
                SessionDuration: {},
                RelayState: {}
            }
        },
        S1l: {
            type: "structure",
            members: {
                Status: {},
                RequestId: {},
                AccountId: {},
                PermissionSetArn: {},
                FailureReason: {},
                CreatedDate: {
                    type: "timestamp"
                }
            }
        },
        S1r: {
            type: "string",
            sensitive: true
        },
        S1v: {
            type: "structure",
            members: {
                Status: {}
            }
        },
        S1x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Status: {},
                    RequestId: {},
                    CreatedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        S2p: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListAccountAssignmentCreationStatus: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AccountAssignmentsCreationStatus"
        },
        ListAccountAssignmentDeletionStatus: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AccountAssignmentsDeletionStatus"
        },
        ListAccountAssignments: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AccountAssignments"
        },
        ListAccountsForProvisionedPermissionSet: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AccountIds"
        },
        ListInstances: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Instances"
        },
        ListManagedPoliciesInPermissionSet: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AttachedManagedPolicies"
        },
        ListPermissionSetProvisioningStatus: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PermissionSetsProvisioningStatus"
        },
        ListPermissionSets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PermissionSets"
        },
        ListPermissionSetsProvisionedToAccount: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PermissionSets"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Tags"
        }
    }
};

AWS.apiLoader.services["timestreamquery"] = {};

AWS.TimestreamQuery = AWS.Service.defineService("timestreamquery", [ "2018-11-01" ]);

AWS.apiLoader.services["timestreamquery"]["2018-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-11-01",
        endpointPrefix: "query.timestream",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "Timestream Query",
        serviceFullName: "Amazon Timestream Query",
        serviceId: "Timestream Query",
        signatureVersion: "v4",
        signingName: "timestream",
        targetPrefix: "Timestream_20181101",
        uid: "timestream-query-2018-11-01"
    },
    operations: {
        CancelQuery: {
            input: {
                type: "structure",
                required: [ "QueryId" ],
                members: {
                    QueryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CancellationMessage: {}
                }
            },
            endpointdiscovery: {
                required: true
            },
            idempotent: true
        },
        DescribeEndpoints: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "Endpoints" ],
                members: {
                    Endpoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Address", "CachePeriodInMinutes" ],
                            members: {
                                Address: {},
                                CachePeriodInMinutes: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            },
            endpointoperation: true
        },
        Query: {
            input: {
                type: "structure",
                required: [ "QueryString" ],
                members: {
                    QueryString: {
                        type: "string",
                        sensitive: true
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        type: "string",
                        sensitive: true
                    },
                    NextToken: {},
                    MaxRows: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "QueryId", "Rows", "ColumnInfo" ],
                members: {
                    QueryId: {},
                    NextToken: {},
                    Rows: {
                        type: "list",
                        member: {
                            shape: "Sg"
                        }
                    },
                    ColumnInfo: {
                        shape: "So"
                    },
                    QueryStatus: {
                        type: "structure",
                        members: {
                            ProgressPercentage: {
                                type: "double"
                            },
                            CumulativeBytesScanned: {
                                type: "long"
                            },
                            CumulativeBytesMetered: {
                                type: "long"
                            }
                        }
                    }
                }
            },
            endpointdiscovery: {
                required: true
            },
            idempotent: true
        }
    },
    shapes: {
        Sg: {
            type: "structure",
            required: [ "Data" ],
            members: {
                Data: {
                    shape: "Sh"
                }
            }
        },
        Sh: {
            type: "list",
            member: {
                shape: "Si"
            }
        },
        Si: {
            type: "structure",
            members: {
                ScalarValue: {},
                TimeSeriesValue: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Time", "Value" ],
                        members: {
                            Time: {},
                            Value: {
                                shape: "Si"
                            }
                        }
                    }
                },
                ArrayValue: {
                    shape: "Sh"
                },
                RowValue: {
                    shape: "Sg"
                },
                NullValue: {
                    type: "boolean"
                }
            }
        },
        So: {
            type: "list",
            member: {
                shape: "Sp"
            }
        },
        Sp: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Name: {},
                Type: {
                    type: "structure",
                    members: {
                        ScalarType: {},
                        ArrayColumnInfo: {
                            shape: "Sp"
                        },
                        TimeSeriesMeasureValueColumnInfo: {
                            shape: "Sp"
                        },
                        RowColumnInfo: {
                            shape: "So"
                        }
                    }
                }
            }
        }
    },
    paginators: {
        Query: {
            input_token: "NextToken",
            limit_key: "MaxRows",
            non_aggregate_keys: [ "ColumnInfo", "QueryId", "QueryStatus" ],
            output_token: "NextToken",
            result_key: "Rows"
        }
    }
};

AWS.apiLoader.services["timestreamwrite"] = {};

AWS.TimestreamWrite = AWS.Service.defineService("timestreamwrite", [ "2018-11-01" ]);

AWS.apiLoader.services["timestreamwrite"]["2018-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-11-01",
        endpointPrefix: "ingest.timestream",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "Timestream Write",
        serviceFullName: "Amazon Timestream Write",
        serviceId: "Timestream Write",
        signatureVersion: "v4",
        signingName: "timestream",
        targetPrefix: "Timestream_20181101",
        uid: "timestream-write-2018-11-01"
    },
    operations: {
        CreateDatabase: {
            input: {
                type: "structure",
                required: [ "DatabaseName" ],
                members: {
                    DatabaseName: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Database: {
                        shape: "S9"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        CreateTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    DatabaseName: {},
                    TableName: {},
                    RetentionProperties: {
                        shape: "Se"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Table: {
                        shape: "Si"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        DeleteDatabase: {
            input: {
                type: "structure",
                required: [ "DatabaseName" ],
                members: {
                    DatabaseName: {}
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        DeleteTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    DatabaseName: {},
                    TableName: {}
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        DescribeDatabase: {
            input: {
                type: "structure",
                required: [ "DatabaseName" ],
                members: {
                    DatabaseName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Database: {
                        shape: "S9"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        DescribeEndpoints: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "Endpoints" ],
                members: {
                    Endpoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Address", "CachePeriodInMinutes" ],
                            members: {
                                Address: {},
                                CachePeriodInMinutes: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            },
            endpointoperation: true
        },
        DescribeTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    DatabaseName: {},
                    TableName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Table: {
                        shape: "Si"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        ListDatabases: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Databases: {
                        type: "list",
                        member: {
                            shape: "S9"
                        }
                    },
                    NextToken: {}
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        ListTables: {
            input: {
                type: "structure",
                members: {
                    DatabaseName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tables: {
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    },
                    NextToken: {}
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpointdiscovery: {
                required: true
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpointdiscovery: {
                required: true
            }
        },
        UpdateDatabase: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "KmsKeyId" ],
                members: {
                    DatabaseName: {},
                    KmsKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Database: {
                        shape: "S9"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        UpdateTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "RetentionProperties" ],
                members: {
                    DatabaseName: {},
                    TableName: {},
                    RetentionProperties: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Table: {
                        shape: "Si"
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        },
        WriteRecords: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "Records" ],
                members: {
                    DatabaseName: {},
                    TableName: {},
                    CommonAttributes: {
                        shape: "S1e"
                    },
                    Records: {
                        type: "list",
                        member: {
                            shape: "S1e"
                        }
                    }
                }
            },
            endpointdiscovery: {
                required: true
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S9: {
            type: "structure",
            members: {
                Arn: {},
                DatabaseName: {},
                TableCount: {
                    type: "long"
                },
                KmsKeyId: {},
                CreationTime: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                }
            }
        },
        Se: {
            type: "structure",
            required: [ "MemoryStoreRetentionPeriodInHours", "MagneticStoreRetentionPeriodInDays" ],
            members: {
                MemoryStoreRetentionPeriodInHours: {
                    type: "long"
                },
                MagneticStoreRetentionPeriodInDays: {
                    type: "long"
                }
            }
        },
        Si: {
            type: "structure",
            members: {
                Arn: {},
                TableName: {},
                DatabaseName: {},
                TableStatus: {},
                RetentionProperties: {
                    shape: "Se"
                },
                CreationTime: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                }
            }
        },
        S1e: {
            type: "structure",
            members: {
                Dimensions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Value" ],
                        members: {
                            Name: {},
                            Value: {},
                            DimensionValueType: {}
                        }
                    }
                },
                MeasureName: {},
                MeasureValue: {},
                MeasureValueType: {},
                Time: {},
                TimeUnit: {},
                Version: {
                    type: "long"
                }
            }
        }
    },
    paginators: {
        ListDatabases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTables: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["s3outposts"] = {};

AWS.S3Outposts = AWS.Service.defineService("s3outposts", [ "2017-07-25" ]);

AWS.apiLoader.services["s3outposts"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "s3-outposts",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon S3 Outposts",
        serviceFullName: "Amazon S3 on Outposts",
        serviceId: "S3Outposts",
        signatureVersion: "v4",
        signingName: "s3-outposts",
        uid: "s3outposts-2017-07-25"
    },
    operations: {
        CreateEndpoint: {
            http: {
                requestUri: "/S3Outposts/CreateEndpoint"
            },
            input: {
                type: "structure",
                required: [ "OutpostId", "SubnetId", "SecurityGroupId" ],
                members: {
                    OutpostId: {},
                    SubnetId: {},
                    SecurityGroupId: {},
                    AccessType: {},
                    CustomerOwnedIpv4Pool: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointArn: {}
                }
            }
        },
        DeleteEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/S3Outposts/DeleteEndpoint"
            },
            input: {
                type: "structure",
                required: [ "EndpointId", "OutpostId" ],
                members: {
                    EndpointId: {
                        location: "querystring",
                        locationName: "endpointId"
                    },
                    OutpostId: {
                        location: "querystring",
                        locationName: "outpostId"
                    }
                }
            }
        },
        ListEndpoints: {
            http: {
                method: "GET",
                requestUri: "/S3Outposts/ListEndpoints"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Endpoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EndpointArn: {},
                                OutpostsId: {},
                                CidrBlock: {},
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                NetworkInterfaces: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            NetworkInterfaceId: {}
                                        }
                                    }
                                },
                                VpcId: {},
                                SubnetId: {},
                                SecurityGroupId: {},
                                AccessType: {},
                                CustomerOwnedIpv4Pool: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {
        ListEndpoints: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Endpoints"
        }
    }
};

AWS.apiLoader.services["databrew"] = {};

AWS.DataBrew = AWS.Service.defineService("databrew", [ "2017-07-25" ]);

AWS.apiLoader.services["databrew"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "databrew",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Glue DataBrew",
        serviceId: "DataBrew",
        signatureVersion: "v4",
        signingName: "databrew",
        uid: "databrew-2017-07-25"
    },
    operations: {
        BatchDeleteRecipeVersion: {
            http: {
                requestUri: "/recipes/{name}/batchDeleteRecipeVersion"
            },
            input: {
                type: "structure",
                required: [ "Name", "RecipeVersions" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    RecipeVersions: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ErrorCode: {},
                                ErrorMessage: {},
                                RecipeVersion: {}
                            }
                        }
                    }
                }
            }
        },
        CreateDataset: {
            http: {
                requestUri: "/datasets"
            },
            input: {
                type: "structure",
                required: [ "Name", "Input" ],
                members: {
                    Name: {},
                    Format: {},
                    FormatOptions: {
                        shape: "Sd"
                    },
                    Input: {
                        shape: "So"
                    },
                    PathOptions: {
                        shape: "Sz"
                    },
                    Tags: {
                        shape: "S1i"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CreateProfileJob: {
            http: {
                requestUri: "/profileJobs"
            },
            input: {
                type: "structure",
                required: [ "DatasetName", "Name", "OutputLocation", "RoleArn" ],
                members: {
                    DatasetName: {},
                    EncryptionKeyArn: {},
                    EncryptionMode: {},
                    Name: {},
                    LogSubscription: {},
                    MaxCapacity: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    OutputLocation: {
                        shape: "Sp"
                    },
                    Configuration: {
                        shape: "S1t"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S1i"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    JobSample: {
                        shape: "S29"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CreateProject: {
            http: {
                requestUri: "/projects"
            },
            input: {
                type: "structure",
                required: [ "DatasetName", "Name", "RecipeName", "RoleArn" ],
                members: {
                    DatasetName: {},
                    Name: {},
                    RecipeName: {},
                    Sample: {
                        shape: "S2f"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S1i"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CreateRecipe: {
            http: {
                requestUri: "/recipes"
            },
            input: {
                type: "structure",
                required: [ "Name", "Steps" ],
                members: {
                    Description: {},
                    Name: {},
                    Steps: {
                        shape: "S2l"
                    },
                    Tags: {
                        shape: "S1i"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CreateRecipeJob: {
            http: {
                requestUri: "/recipeJobs"
            },
            input: {
                type: "structure",
                required: [ "Name", "RoleArn" ],
                members: {
                    DatasetName: {},
                    EncryptionKeyArn: {},
                    EncryptionMode: {},
                    Name: {},
                    LogSubscription: {},
                    MaxCapacity: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    Outputs: {
                        shape: "S2v"
                    },
                    DataCatalogOutputs: {
                        shape: "S33"
                    },
                    DatabaseOutputs: {
                        shape: "S37"
                    },
                    ProjectName: {},
                    RecipeReference: {
                        shape: "S3a"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S1i"
                    },
                    Timeout: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CreateSchedule: {
            http: {
                requestUri: "/schedules"
            },
            input: {
                type: "structure",
                required: [ "CronExpression", "Name" ],
                members: {
                    JobNames: {
                        shape: "S3d"
                    },
                    CronExpression: {},
                    Tags: {
                        shape: "S1i"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeleteDataset: {
            http: {
                method: "DELETE",
                requestUri: "/datasets/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeleteJob: {
            http: {
                method: "DELETE",
                requestUri: "/jobs/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeleteRecipeVersion: {
            http: {
                method: "DELETE",
                requestUri: "/recipes/{name}/recipeVersion/{recipeVersion}"
            },
            input: {
                type: "structure",
                required: [ "Name", "RecipeVersion" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    RecipeVersion: {
                        location: "uri",
                        locationName: "recipeVersion"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name", "RecipeVersion" ],
                members: {
                    Name: {},
                    RecipeVersion: {}
                }
            }
        },
        DeleteSchedule: {
            http: {
                method: "DELETE",
                requestUri: "/schedules/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DescribeDataset: {
            http: {
                method: "GET",
                requestUri: "/datasets/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name", "Input" ],
                members: {
                    CreatedBy: {},
                    CreateDate: {
                        type: "timestamp"
                    },
                    Name: {},
                    Format: {},
                    FormatOptions: {
                        shape: "Sd"
                    },
                    Input: {
                        shape: "So"
                    },
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {},
                    Source: {},
                    PathOptions: {
                        shape: "Sz"
                    },
                    Tags: {
                        shape: "S1i"
                    },
                    ResourceArn: {}
                }
            }
        },
        DescribeJob: {
            http: {
                method: "GET",
                requestUri: "/jobs/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CreateDate: {
                        type: "timestamp"
                    },
                    CreatedBy: {},
                    DatasetName: {},
                    EncryptionKeyArn: {},
                    EncryptionMode: {},
                    Name: {},
                    Type: {},
                    LastModifiedBy: {},
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    LogSubscription: {},
                    MaxCapacity: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    Outputs: {
                        shape: "S2v"
                    },
                    DataCatalogOutputs: {
                        shape: "S33"
                    },
                    DatabaseOutputs: {
                        shape: "S37"
                    },
                    ProjectName: {},
                    ProfileConfiguration: {
                        shape: "S1t"
                    },
                    RecipeReference: {
                        shape: "S3a"
                    },
                    ResourceArn: {},
                    RoleArn: {},
                    Tags: {
                        shape: "S1i"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    JobSample: {
                        shape: "S29"
                    }
                }
            }
        },
        DescribeJobRun: {
            http: {
                method: "GET",
                requestUri: "/jobs/{name}/jobRun/{runId}"
            },
            input: {
                type: "structure",
                required: [ "Name", "RunId" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    RunId: {
                        location: "uri",
                        locationName: "runId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    Attempt: {
                        type: "integer"
                    },
                    CompletedOn: {
                        type: "timestamp"
                    },
                    DatasetName: {},
                    ErrorMessage: {},
                    ExecutionTime: {
                        type: "integer"
                    },
                    JobName: {},
                    ProfileConfiguration: {
                        shape: "S1t"
                    },
                    RunId: {},
                    State: {},
                    LogSubscription: {},
                    LogGroupName: {},
                    Outputs: {
                        shape: "S2v"
                    },
                    DataCatalogOutputs: {
                        shape: "S33"
                    },
                    DatabaseOutputs: {
                        shape: "S37"
                    },
                    RecipeReference: {
                        shape: "S3a"
                    },
                    StartedBy: {},
                    StartedOn: {
                        type: "timestamp"
                    },
                    JobSample: {
                        shape: "S29"
                    }
                }
            }
        },
        DescribeProject: {
            http: {
                method: "GET",
                requestUri: "/projects/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CreateDate: {
                        type: "timestamp"
                    },
                    CreatedBy: {},
                    DatasetName: {},
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {},
                    Name: {},
                    RecipeName: {},
                    ResourceArn: {},
                    Sample: {
                        shape: "S2f"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S1i"
                    },
                    SessionStatus: {},
                    OpenedBy: {},
                    OpenDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeRecipe: {
            http: {
                method: "GET",
                requestUri: "/recipes/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    RecipeVersion: {
                        location: "querystring",
                        locationName: "recipeVersion"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CreatedBy: {},
                    CreateDate: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {},
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    ProjectName: {},
                    PublishedBy: {},
                    PublishedDate: {
                        type: "timestamp"
                    },
                    Description: {},
                    Name: {},
                    Steps: {
                        shape: "S2l"
                    },
                    Tags: {
                        shape: "S1i"
                    },
                    ResourceArn: {},
                    RecipeVersion: {}
                }
            }
        },
        DescribeSchedule: {
            http: {
                method: "GET",
                requestUri: "/schedules/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CreateDate: {
                        type: "timestamp"
                    },
                    CreatedBy: {},
                    JobNames: {
                        shape: "S3d"
                    },
                    LastModifiedBy: {},
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    ResourceArn: {},
                    CronExpression: {},
                    Tags: {
                        shape: "S1i"
                    },
                    Name: {}
                }
            }
        },
        ListDatasets: {
            http: {
                method: "GET",
                requestUri: "/datasets"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Datasets" ],
                members: {
                    Datasets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Input" ],
                            members: {
                                AccountId: {},
                                CreatedBy: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                Name: {},
                                Format: {},
                                FormatOptions: {
                                    shape: "Sd"
                                },
                                Input: {
                                    shape: "So"
                                },
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                LastModifiedBy: {},
                                Source: {},
                                PathOptions: {
                                    shape: "Sz"
                                },
                                Tags: {
                                    shape: "S1i"
                                },
                                ResourceArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListJobRuns: {
            http: {
                method: "GET",
                requestUri: "/jobs/{name}/jobRuns"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobRuns" ],
                members: {
                    JobRuns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Attempt: {
                                    type: "integer"
                                },
                                CompletedOn: {
                                    type: "timestamp"
                                },
                                DatasetName: {},
                                ErrorMessage: {},
                                ExecutionTime: {
                                    type: "integer"
                                },
                                JobName: {},
                                RunId: {},
                                State: {},
                                LogSubscription: {},
                                LogGroupName: {},
                                Outputs: {
                                    shape: "S2v"
                                },
                                DataCatalogOutputs: {
                                    shape: "S33"
                                },
                                DatabaseOutputs: {
                                    shape: "S37"
                                },
                                RecipeReference: {
                                    shape: "S3a"
                                },
                                StartedBy: {},
                                StartedOn: {
                                    type: "timestamp"
                                },
                                JobSample: {
                                    shape: "S29"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListJobs: {
            http: {
                method: "GET",
                requestUri: "/jobs"
            },
            input: {
                type: "structure",
                members: {
                    DatasetName: {
                        location: "querystring",
                        locationName: "datasetName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ProjectName: {
                        location: "querystring",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Jobs" ],
                members: {
                    Jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name" ],
                            members: {
                                AccountId: {},
                                CreatedBy: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                DatasetName: {},
                                EncryptionKeyArn: {},
                                EncryptionMode: {},
                                Name: {},
                                Type: {},
                                LastModifiedBy: {},
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                LogSubscription: {},
                                MaxCapacity: {
                                    type: "integer"
                                },
                                MaxRetries: {
                                    type: "integer"
                                },
                                Outputs: {
                                    shape: "S2v"
                                },
                                DataCatalogOutputs: {
                                    shape: "S33"
                                },
                                DatabaseOutputs: {
                                    shape: "S37"
                                },
                                ProjectName: {},
                                RecipeReference: {
                                    shape: "S3a"
                                },
                                ResourceArn: {},
                                RoleArn: {},
                                Timeout: {
                                    type: "integer"
                                },
                                Tags: {
                                    shape: "S1i"
                                },
                                JobSample: {
                                    shape: "S29"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProjects: {
            http: {
                method: "GET",
                requestUri: "/projects"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Projects" ],
                members: {
                    Projects: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "RecipeName" ],
                            members: {
                                AccountId: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                CreatedBy: {},
                                DatasetName: {},
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                LastModifiedBy: {},
                                Name: {},
                                RecipeName: {},
                                ResourceArn: {},
                                Sample: {
                                    shape: "S2f"
                                },
                                Tags: {
                                    shape: "S1i"
                                },
                                RoleArn: {},
                                OpenedBy: {},
                                OpenDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRecipeVersions: {
            http: {
                method: "GET",
                requestUri: "/recipeVersions"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    Name: {
                        location: "querystring",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Recipes" ],
                members: {
                    NextToken: {},
                    Recipes: {
                        shape: "S53"
                    }
                }
            }
        },
        ListRecipes: {
            http: {
                method: "GET",
                requestUri: "/recipes"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RecipeVersion: {
                        location: "querystring",
                        locationName: "recipeVersion"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Recipes" ],
                members: {
                    Recipes: {
                        shape: "S53"
                    },
                    NextToken: {}
                }
            }
        },
        ListSchedules: {
            http: {
                method: "GET",
                requestUri: "/schedules"
            },
            input: {
                type: "structure",
                members: {
                    JobName: {
                        location: "querystring",
                        locationName: "jobName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Schedules" ],
                members: {
                    Schedules: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name" ],
                            members: {
                                AccountId: {},
                                CreatedBy: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                JobNames: {
                                    shape: "S3d"
                                },
                                LastModifiedBy: {},
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                ResourceArn: {},
                                CronExpression: {},
                                Tags: {
                                    shape: "S1i"
                                },
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1i"
                    }
                }
            }
        },
        PublishRecipe: {
            http: {
                requestUri: "/recipes/{name}/publishRecipe"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Description: {},
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        SendProjectSessionAction: {
            http: {
                method: "PUT",
                requestUri: "/projects/{name}/sendProjectSessionAction"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Preview: {
                        type: "boolean"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    RecipeStep: {
                        shape: "S2m"
                    },
                    StepIndex: {
                        type: "integer"
                    },
                    ClientSessionId: {},
                    ViewFrame: {
                        type: "structure",
                        required: [ "StartColumnIndex" ],
                        members: {
                            StartColumnIndex: {
                                type: "integer"
                            },
                            ColumnRange: {
                                type: "integer"
                            },
                            HiddenColumns: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Result: {},
                    Name: {},
                    ActionId: {
                        type: "integer"
                    }
                }
            }
        },
        StartJobRun: {
            http: {
                requestUri: "/jobs/{name}/startJobRun"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RunId" ],
                members: {
                    RunId: {}
                }
            }
        },
        StartProjectSession: {
            http: {
                method: "PUT",
                requestUri: "/projects/{name}/startProjectSession"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    AssumeControl: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    ClientSessionId: {}
                }
            }
        },
        StopJobRun: {
            http: {
                requestUri: "/jobs/{name}/jobRun/{runId}/stopJobRun"
            },
            input: {
                type: "structure",
                required: [ "Name", "RunId" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    RunId: {
                        location: "uri",
                        locationName: "runId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RunId" ],
                members: {
                    RunId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S1i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDataset: {
            http: {
                method: "PUT",
                requestUri: "/datasets/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name", "Input" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    Format: {},
                    FormatOptions: {
                        shape: "Sd"
                    },
                    Input: {
                        shape: "So"
                    },
                    PathOptions: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        UpdateProfileJob: {
            http: {
                method: "PUT",
                requestUri: "/profileJobs/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name", "OutputLocation", "RoleArn" ],
                members: {
                    Configuration: {
                        shape: "S1t"
                    },
                    EncryptionKeyArn: {},
                    EncryptionMode: {},
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    LogSubscription: {},
                    MaxCapacity: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    OutputLocation: {
                        shape: "Sp"
                    },
                    RoleArn: {},
                    Timeout: {
                        type: "integer"
                    },
                    JobSample: {
                        shape: "S29"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        UpdateProject: {
            http: {
                method: "PUT",
                requestUri: "/projects/{name}"
            },
            input: {
                type: "structure",
                required: [ "RoleArn", "Name" ],
                members: {
                    Sample: {
                        shape: "S2f"
                    },
                    RoleArn: {},
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    Name: {}
                }
            }
        },
        UpdateRecipe: {
            http: {
                method: "PUT",
                requestUri: "/recipes/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Description: {},
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    Steps: {
                        shape: "S2l"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        UpdateRecipeJob: {
            http: {
                method: "PUT",
                requestUri: "/recipeJobs/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name", "RoleArn" ],
                members: {
                    EncryptionKeyArn: {},
                    EncryptionMode: {},
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    LogSubscription: {},
                    MaxCapacity: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    Outputs: {
                        shape: "S2v"
                    },
                    DataCatalogOutputs: {
                        shape: "S33"
                    },
                    DatabaseOutputs: {
                        shape: "S37"
                    },
                    RoleArn: {},
                    Timeout: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        UpdateSchedule: {
            http: {
                method: "PUT",
                requestUri: "/schedules/{name}"
            },
            input: {
                type: "structure",
                required: [ "CronExpression", "Name" ],
                members: {
                    JobNames: {
                        shape: "S3d"
                    },
                    CronExpression: {},
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        }
    },
    shapes: {
        Sd: {
            type: "structure",
            members: {
                Json: {
                    type: "structure",
                    members: {
                        MultiLine: {
                            type: "boolean"
                        }
                    }
                },
                Excel: {
                    type: "structure",
                    members: {
                        SheetNames: {
                            type: "list",
                            member: {}
                        },
                        SheetIndexes: {
                            type: "list",
                            member: {
                                type: "integer"
                            }
                        },
                        HeaderRow: {
                            type: "boolean"
                        }
                    }
                },
                Csv: {
                    type: "structure",
                    members: {
                        Delimiter: {},
                        HeaderRow: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        So: {
            type: "structure",
            members: {
                S3InputDefinition: {
                    shape: "Sp"
                },
                DataCatalogInputDefinition: {
                    type: "structure",
                    required: [ "DatabaseName", "TableName" ],
                    members: {
                        CatalogId: {},
                        DatabaseName: {},
                        TableName: {},
                        TempDirectory: {
                            shape: "Sp"
                        }
                    }
                },
                DatabaseInputDefinition: {
                    type: "structure",
                    required: [ "GlueConnectionName", "DatabaseTableName" ],
                    members: {
                        GlueConnectionName: {},
                        DatabaseTableName: {},
                        TempDirectory: {
                            shape: "Sp"
                        }
                    }
                }
            }
        },
        Sp: {
            type: "structure",
            required: [ "Bucket" ],
            members: {
                Bucket: {},
                Key: {}
            }
        },
        Sz: {
            type: "structure",
            members: {
                LastModifiedDateCondition: {
                    shape: "S10"
                },
                FilesLimit: {
                    type: "structure",
                    required: [ "MaxFiles" ],
                    members: {
                        MaxFiles: {
                            type: "integer"
                        },
                        OrderedBy: {},
                        Order: {}
                    }
                },
                Parameters: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        required: [ "Name", "Type" ],
                        members: {
                            Name: {},
                            Type: {},
                            DatetimeOptions: {
                                type: "structure",
                                required: [ "Format" ],
                                members: {
                                    Format: {},
                                    TimezoneOffset: {},
                                    LocaleCode: {}
                                }
                            },
                            CreateColumn: {
                                type: "boolean"
                            },
                            Filter: {
                                shape: "S10"
                            }
                        }
                    }
                }
            }
        },
        S10: {
            type: "structure",
            required: [ "Expression", "ValuesMap" ],
            members: {
                Expression: {},
                ValuesMap: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        S1i: {
            type: "map",
            key: {},
            value: {}
        },
        S1t: {
            type: "structure",
            members: {
                DatasetStatisticsConfiguration: {
                    shape: "S1u"
                },
                ProfileColumns: {
                    shape: "S22"
                },
                ColumnStatisticsConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Statistics" ],
                        members: {
                            Selectors: {
                                shape: "S22"
                            },
                            Statistics: {
                                shape: "S1u"
                            }
                        }
                    }
                }
            }
        },
        S1u: {
            type: "structure",
            members: {
                IncludedStatistics: {
                    type: "list",
                    member: {}
                },
                Overrides: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Statistic", "Parameters" ],
                        members: {
                            Statistic: {},
                            Parameters: {
                                shape: "S1z"
                            }
                        }
                    }
                }
            }
        },
        S1z: {
            type: "map",
            key: {},
            value: {}
        },
        S22: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Regex: {},
                    Name: {}
                }
            }
        },
        S29: {
            type: "structure",
            members: {
                Mode: {},
                Size: {
                    type: "long"
                }
            }
        },
        S2f: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Size: {
                    type: "integer"
                },
                Type: {}
            }
        },
        S2l: {
            type: "list",
            member: {
                shape: "S2m"
            }
        },
        S2m: {
            type: "structure",
            required: [ "Action" ],
            members: {
                Action: {
                    type: "structure",
                    required: [ "Operation" ],
                    members: {
                        Operation: {},
                        Parameters: {
                            shape: "S1z"
                        }
                    }
                },
                ConditionExpressions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Condition", "TargetColumn" ],
                        members: {
                            Condition: {},
                            Value: {},
                            TargetColumn: {}
                        }
                    }
                }
            }
        },
        S2v: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Location" ],
                members: {
                    CompressionFormat: {},
                    Format: {},
                    PartitionColumns: {
                        type: "list",
                        member: {}
                    },
                    Location: {
                        shape: "Sp"
                    },
                    Overwrite: {
                        type: "boolean"
                    },
                    FormatOptions: {
                        type: "structure",
                        members: {
                            Csv: {
                                type: "structure",
                                members: {
                                    Delimiter: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S33: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    S3Options: {
                        type: "structure",
                        required: [ "Location" ],
                        members: {
                            Location: {
                                shape: "Sp"
                            }
                        }
                    },
                    DatabaseOptions: {
                        shape: "S36"
                    },
                    Overwrite: {
                        type: "boolean"
                    }
                }
            }
        },
        S36: {
            type: "structure",
            required: [ "TableName" ],
            members: {
                TempDirectory: {
                    shape: "Sp"
                },
                TableName: {}
            }
        },
        S37: {
            type: "list",
            member: {
                type: "structure",
                required: [ "GlueConnectionName", "DatabaseOptions" ],
                members: {
                    GlueConnectionName: {},
                    DatabaseOptions: {
                        shape: "S36"
                    },
                    DatabaseOutputMode: {}
                }
            }
        },
        S3a: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                RecipeVersion: {}
            }
        },
        S3d: {
            type: "list",
            member: {}
        },
        S53: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CreatedBy: {},
                    CreateDate: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {},
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    ProjectName: {},
                    PublishedBy: {},
                    PublishedDate: {
                        type: "timestamp"
                    },
                    Description: {},
                    Name: {},
                    ResourceArn: {},
                    Steps: {
                        shape: "S2l"
                    },
                    Tags: {
                        shape: "S1i"
                    },
                    RecipeVersion: {}
                }
            }
        }
    },
    paginators: {
        ListDatasets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Datasets"
        },
        ListJobRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "JobRuns"
        },
        ListJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Jobs"
        },
        ListProjects: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Projects"
        },
        ListRecipeVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Recipes"
        },
        ListRecipes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Recipes"
        },
        ListSchedules: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Schedules"
        }
    }
};

AWS.apiLoader.services["servicecatalogappregistry"] = {};

AWS.ServiceCatalogAppRegistry = AWS.Service.defineService("servicecatalogappregistry", [ "2020-06-24" ]);

AWS.apiLoader.services["servicecatalogappregistry"]["2020-06-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-06-24",
        endpointPrefix: "servicecatalog-appregistry",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AppRegistry",
        serviceFullName: "AWS Service Catalog App Registry",
        serviceId: "Service Catalog AppRegistry",
        signatureVersion: "v4",
        signingName: "servicecatalog",
        uid: "AWS242AppRegistry-2020-06-24"
    },
    operations: {
        AssociateAttributeGroup: {
            http: {
                method: "PUT",
                requestUri: "/applications/{application}/attribute-groups/{attributeGroup}"
            },
            input: {
                type: "structure",
                required: [ "application", "attributeGroup" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    attributeGroup: {
                        location: "uri",
                        locationName: "attributeGroup"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationArn: {},
                    attributeGroupArn: {}
                }
            }
        },
        AssociateResource: {
            http: {
                method: "PUT",
                requestUri: "/applications/{application}/resources/{resourceType}/{resource}"
            },
            input: {
                type: "structure",
                required: [ "application", "resourceType", "resource" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    resourceType: {
                        location: "uri",
                        locationName: "resourceType"
                    },
                    resource: {
                        location: "uri",
                        locationName: "resource"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationArn: {},
                    resourceArn: {}
                }
            }
        },
        CreateApplication: {
            http: {
                requestUri: "/applications",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name", "clientToken" ],
                members: {
                    name: {},
                    description: {},
                    tags: {
                        shape: "Sf"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    application: {
                        shape: "Sk"
                    }
                }
            }
        },
        CreateAttributeGroup: {
            http: {
                requestUri: "/attribute-groups",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name", "attributes", "clientToken" ],
                members: {
                    name: {},
                    description: {},
                    attributes: {},
                    tags: {
                        shape: "Sf"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attributeGroup: {
                        shape: "Sq"
                    }
                }
            }
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{application}"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    application: {
                        shape: "Su"
                    }
                }
            }
        },
        DeleteAttributeGroup: {
            http: {
                method: "DELETE",
                requestUri: "/attribute-groups/{attributeGroup}"
            },
            input: {
                type: "structure",
                required: [ "attributeGroup" ],
                members: {
                    attributeGroup: {
                        location: "uri",
                        locationName: "attributeGroup"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attributeGroup: {
                        shape: "Sx"
                    }
                }
            }
        },
        DisassociateAttributeGroup: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{application}/attribute-groups/{attributeGroup}"
            },
            input: {
                type: "structure",
                required: [ "application", "attributeGroup" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    attributeGroup: {
                        location: "uri",
                        locationName: "attributeGroup"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationArn: {},
                    attributeGroupArn: {}
                }
            }
        },
        DisassociateResource: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{application}/resources/{resourceType}/{resource}"
            },
            input: {
                type: "structure",
                required: [ "application", "resourceType", "resource" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    resourceType: {
                        location: "uri",
                        locationName: "resourceType"
                    },
                    resource: {
                        location: "uri",
                        locationName: "resource"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationArn: {},
                    resourceArn: {}
                }
            }
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{application}"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    creationTime: {
                        shape: "Sm"
                    },
                    lastUpdateTime: {
                        shape: "Sm"
                    },
                    associatedResourceCount: {
                        type: "integer"
                    },
                    tags: {
                        shape: "Sf"
                    },
                    integrations: {
                        type: "structure",
                        members: {
                            resourceGroup: {
                                shape: "S16"
                            }
                        }
                    }
                }
            }
        },
        GetAssociatedResource: {
            http: {
                method: "GET",
                requestUri: "/applications/{application}/resources/{resourceType}/{resource}"
            },
            input: {
                type: "structure",
                required: [ "application", "resourceType", "resource" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    resourceType: {
                        location: "uri",
                        locationName: "resourceType"
                    },
                    resource: {
                        location: "uri",
                        locationName: "resource"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resource: {
                        type: "structure",
                        members: {
                            name: {},
                            arn: {},
                            associationTime: {
                                shape: "Sm"
                            },
                            integrations: {
                                type: "structure",
                                members: {
                                    resourceGroup: {
                                        shape: "S16"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        GetAttributeGroup: {
            http: {
                method: "GET",
                requestUri: "/attribute-groups/{attributeGroup}"
            },
            input: {
                type: "structure",
                required: [ "attributeGroup" ],
                members: {
                    attributeGroup: {
                        location: "uri",
                        locationName: "attributeGroup"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    attributes: {},
                    creationTime: {
                        shape: "Sm"
                    },
                    lastUpdateTime: {
                        shape: "Sm"
                    },
                    tags: {
                        shape: "Sf"
                    }
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applications: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListAssociatedAttributeGroups: {
            http: {
                method: "GET",
                requestUri: "/applications/{application}/attribute-groups"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attributeGroups: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListAssociatedResources: {
            http: {
                method: "GET",
                requestUri: "/applications/{application}/resources"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListAttributeGroups: {
            http: {
                method: "GET",
                requestUri: "/attribute-groups"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attributeGroups: {
                        type: "list",
                        member: {
                            shape: "Sx"
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sf"
                    }
                }
            }
        },
        SyncResource: {
            http: {
                requestUri: "/sync/{resourceType}/{resource}"
            },
            input: {
                type: "structure",
                required: [ "resourceType", "resource" ],
                members: {
                    resourceType: {
                        location: "uri",
                        locationName: "resourceType"
                    },
                    resource: {
                        location: "uri",
                        locationName: "resource"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationArn: {},
                    resourceArn: {},
                    actionTaken: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{application}"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        location: "uri",
                        locationName: "application"
                    },
                    name: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    application: {
                        shape: "Sk"
                    }
                }
            }
        },
        UpdateAttributeGroup: {
            http: {
                method: "PATCH",
                requestUri: "/attribute-groups/{attributeGroup}"
            },
            input: {
                type: "structure",
                required: [ "attributeGroup" ],
                members: {
                    attributeGroup: {
                        location: "uri",
                        locationName: "attributeGroup"
                    },
                    name: {},
                    description: {},
                    attributes: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    attributeGroup: {
                        shape: "Sq"
                    }
                }
            }
        }
    },
    shapes: {
        Sf: {
            type: "map",
            key: {},
            value: {}
        },
        Sk: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                name: {},
                description: {},
                creationTime: {
                    shape: "Sm"
                },
                lastUpdateTime: {
                    shape: "Sm"
                },
                tags: {
                    shape: "Sf"
                }
            }
        },
        Sm: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sq: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                name: {},
                description: {},
                creationTime: {
                    shape: "Sm"
                },
                lastUpdateTime: {
                    shape: "Sm"
                },
                tags: {
                    shape: "Sf"
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                name: {},
                description: {},
                creationTime: {
                    shape: "Sm"
                },
                lastUpdateTime: {
                    shape: "Sm"
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                name: {},
                description: {},
                creationTime: {
                    shape: "Sm"
                },
                lastUpdateTime: {
                    shape: "Sm"
                }
            }
        },
        S16: {
            type: "structure",
            members: {
                state: {},
                arn: {},
                errorMessage: {}
            }
        }
    },
    paginators: {
        ListApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "applications"
        },
        ListAssociatedAttributeGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "attributeGroups"
        },
        ListAssociatedResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "resources"
        },
        ListAttributeGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "attributeGroups"
        }
    }
};

AWS.apiLoader.services["networkfirewall"] = {};

AWS.NetworkFirewall = AWS.Service.defineService("networkfirewall", [ "2020-11-12" ]);

AWS.apiLoader.services["networkfirewall"]["2020-11-12"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-11-12",
        endpointPrefix: "network-firewall",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "Network Firewall",
        serviceFullName: "AWS Network Firewall",
        serviceId: "Network Firewall",
        signatureVersion: "v4",
        signingName: "network-firewall",
        targetPrefix: "NetworkFirewall_20201112",
        uid: "network-firewall-2020-11-12"
    },
    operations: {
        AssociateFirewallPolicy: {
            input: {
                type: "structure",
                required: [ "FirewallPolicyArn" ],
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    FirewallPolicyArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    FirewallPolicyArn: {},
                    UpdateToken: {}
                }
            }
        },
        AssociateSubnets: {
            input: {
                type: "structure",
                required: [ "SubnetMappings" ],
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    SubnetMappings: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    SubnetMappings: {
                        shape: "S7"
                    },
                    UpdateToken: {}
                }
            }
        },
        CreateFirewall: {
            input: {
                type: "structure",
                required: [ "FirewallName", "FirewallPolicyArn", "VpcId", "SubnetMappings" ],
                members: {
                    FirewallName: {},
                    FirewallPolicyArn: {},
                    VpcId: {},
                    SubnetMappings: {
                        shape: "S7"
                    },
                    DeleteProtection: {
                        type: "boolean"
                    },
                    SubnetChangeProtection: {
                        type: "boolean"
                    },
                    FirewallPolicyChangeProtection: {
                        type: "boolean"
                    },
                    Description: {},
                    Tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Firewall: {
                        shape: "Sk"
                    },
                    FirewallStatus: {
                        shape: "Sm"
                    }
                }
            }
        },
        CreateFirewallPolicy: {
            input: {
                type: "structure",
                required: [ "FirewallPolicyName", "FirewallPolicy" ],
                members: {
                    FirewallPolicyName: {},
                    FirewallPolicy: {
                        shape: "S10"
                    },
                    Description: {},
                    Tags: {
                        shape: "Sf"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "FirewallPolicyResponse" ],
                members: {
                    UpdateToken: {},
                    FirewallPolicyResponse: {
                        shape: "S1j"
                    }
                }
            }
        },
        CreateRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupName", "Type", "Capacity" ],
                members: {
                    RuleGroupName: {},
                    RuleGroup: {
                        shape: "S1o"
                    },
                    Rules: {},
                    Type: {},
                    Description: {},
                    Capacity: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sf"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "RuleGroupResponse" ],
                members: {
                    UpdateToken: {},
                    RuleGroupResponse: {
                        shape: "S32"
                    }
                }
            }
        },
        DeleteFirewall: {
            input: {
                type: "structure",
                members: {
                    FirewallName: {},
                    FirewallArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Firewall: {
                        shape: "Sk"
                    },
                    FirewallStatus: {
                        shape: "Sm"
                    }
                }
            }
        },
        DeleteFirewallPolicy: {
            input: {
                type: "structure",
                members: {
                    FirewallPolicyName: {},
                    FirewallPolicyArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "FirewallPolicyResponse" ],
                members: {
                    FirewallPolicyResponse: {
                        shape: "S1j"
                    }
                }
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRuleGroup: {
            input: {
                type: "structure",
                members: {
                    RuleGroupName: {},
                    RuleGroupArn: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RuleGroupResponse" ],
                members: {
                    RuleGroupResponse: {
                        shape: "S32"
                    }
                }
            }
        },
        DescribeFirewall: {
            input: {
                type: "structure",
                members: {
                    FirewallName: {},
                    FirewallArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UpdateToken: {},
                    Firewall: {
                        shape: "Sk"
                    },
                    FirewallStatus: {
                        shape: "Sm"
                    }
                }
            }
        },
        DescribeFirewallPolicy: {
            input: {
                type: "structure",
                members: {
                    FirewallPolicyName: {},
                    FirewallPolicyArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "FirewallPolicyResponse" ],
                members: {
                    UpdateToken: {},
                    FirewallPolicyResponse: {
                        shape: "S1j"
                    },
                    FirewallPolicy: {
                        shape: "S10"
                    }
                }
            }
        },
        DescribeLoggingConfiguration: {
            input: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    LoggingConfiguration: {
                        shape: "S3h"
                    }
                }
            }
        },
        DescribeResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        DescribeRuleGroup: {
            input: {
                type: "structure",
                members: {
                    RuleGroupName: {},
                    RuleGroupArn: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "RuleGroupResponse" ],
                members: {
                    UpdateToken: {},
                    RuleGroup: {
                        shape: "S1o"
                    },
                    RuleGroupResponse: {
                        shape: "S32"
                    }
                }
            }
        },
        DisassociateSubnets: {
            input: {
                type: "structure",
                required: [ "SubnetIds" ],
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    SubnetIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    SubnetMappings: {
                        shape: "S7"
                    },
                    UpdateToken: {}
                }
            }
        },
        ListFirewallPolicies: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallPolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Arn: {}
                            }
                        }
                    }
                }
            }
        },
        ListFirewalls: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    VpcIds: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Firewalls: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FirewallName: {},
                                FirewallArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListRuleGroups: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Arn: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Tags: {
                        shape: "Sf"
                    }
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Policy" ],
                members: {
                    ResourceArn: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFirewallDeleteProtection: {
            input: {
                type: "structure",
                required: [ "DeleteProtection" ],
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    DeleteProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    DeleteProtection: {
                        type: "boolean"
                    },
                    UpdateToken: {}
                }
            }
        },
        UpdateFirewallDescription: {
            input: {
                type: "structure",
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    Description: {},
                    UpdateToken: {}
                }
            }
        },
        UpdateFirewallPolicy: {
            input: {
                type: "structure",
                required: [ "UpdateToken", "FirewallPolicy" ],
                members: {
                    UpdateToken: {},
                    FirewallPolicyArn: {},
                    FirewallPolicyName: {},
                    FirewallPolicy: {
                        shape: "S10"
                    },
                    Description: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "FirewallPolicyResponse" ],
                members: {
                    UpdateToken: {},
                    FirewallPolicyResponse: {
                        shape: "S1j"
                    }
                }
            }
        },
        UpdateFirewallPolicyChangeProtection: {
            input: {
                type: "structure",
                required: [ "FirewallPolicyChangeProtection" ],
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    FirewallPolicyChangeProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    FirewallPolicyChangeProtection: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateLoggingConfiguration: {
            input: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    LoggingConfiguration: {
                        shape: "S3h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallArn: {},
                    FirewallName: {},
                    LoggingConfiguration: {
                        shape: "S3h"
                    }
                }
            }
        },
        UpdateRuleGroup: {
            input: {
                type: "structure",
                required: [ "UpdateToken" ],
                members: {
                    UpdateToken: {},
                    RuleGroupArn: {},
                    RuleGroupName: {},
                    RuleGroup: {
                        shape: "S1o"
                    },
                    Rules: {},
                    Type: {},
                    Description: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateToken", "RuleGroupResponse" ],
                members: {
                    UpdateToken: {},
                    RuleGroupResponse: {
                        shape: "S32"
                    }
                }
            }
        },
        UpdateSubnetChangeProtection: {
            input: {
                type: "structure",
                required: [ "SubnetChangeProtection" ],
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    SubnetChangeProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpdateToken: {},
                    FirewallArn: {},
                    FirewallName: {},
                    SubnetChangeProtection: {
                        type: "boolean"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SubnetId" ],
                members: {
                    SubnetId: {}
                }
            }
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sk: {
            type: "structure",
            required: [ "FirewallPolicyArn", "VpcId", "SubnetMappings", "FirewallId" ],
            members: {
                FirewallName: {},
                FirewallArn: {},
                FirewallPolicyArn: {},
                VpcId: {},
                SubnetMappings: {
                    shape: "S7"
                },
                DeleteProtection: {
                    type: "boolean"
                },
                SubnetChangeProtection: {
                    type: "boolean"
                },
                FirewallPolicyChangeProtection: {
                    type: "boolean"
                },
                Description: {},
                FirewallId: {},
                Tags: {
                    shape: "Sf"
                }
            }
        },
        Sm: {
            type: "structure",
            required: [ "Status", "ConfigurationSyncStateSummary" ],
            members: {
                Status: {},
                ConfigurationSyncStateSummary: {},
                SyncStates: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            Attachment: {
                                type: "structure",
                                members: {
                                    SubnetId: {},
                                    EndpointId: {},
                                    Status: {}
                                }
                            },
                            Config: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        SyncStatus: {},
                                        UpdateToken: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S10: {
            type: "structure",
            required: [ "StatelessDefaultActions", "StatelessFragmentDefaultActions" ],
            members: {
                StatelessRuleGroupReferences: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ResourceArn", "Priority" ],
                        members: {
                            ResourceArn: {},
                            Priority: {
                                type: "integer"
                            }
                        }
                    }
                },
                StatelessDefaultActions: {
                    shape: "S14"
                },
                StatelessFragmentDefaultActions: {
                    shape: "S14"
                },
                StatelessCustomActions: {
                    shape: "S15"
                },
                StatefulRuleGroupReferences: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ResourceArn" ],
                        members: {
                            ResourceArn: {},
                            Priority: {
                                type: "integer"
                            }
                        }
                    }
                },
                StatefulDefaultActions: {
                    type: "list",
                    member: {}
                },
                StatefulEngineOptions: {
                    type: "structure",
                    members: {
                        RuleOrder: {}
                    }
                }
            }
        },
        S14: {
            type: "list",
            member: {}
        },
        S15: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ActionName", "ActionDefinition" ],
                members: {
                    ActionName: {},
                    ActionDefinition: {
                        type: "structure",
                        members: {
                            PublishMetricAction: {
                                type: "structure",
                                required: [ "Dimensions" ],
                                members: {
                                    Dimensions: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "Value" ],
                                            members: {
                                                Value: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1j: {
            type: "structure",
            required: [ "FirewallPolicyName", "FirewallPolicyArn", "FirewallPolicyId" ],
            members: {
                FirewallPolicyName: {},
                FirewallPolicyArn: {},
                FirewallPolicyId: {},
                Description: {},
                FirewallPolicyStatus: {},
                Tags: {
                    shape: "Sf"
                },
                ConsumedStatelessRuleCapacity: {
                    type: "integer"
                },
                ConsumedStatefulRuleCapacity: {
                    type: "integer"
                },
                NumberOfAssociations: {
                    type: "integer"
                }
            }
        },
        S1o: {
            type: "structure",
            required: [ "RulesSource" ],
            members: {
                RuleVariables: {
                    type: "structure",
                    members: {
                        IPSets: {
                            type: "map",
                            key: {},
                            value: {
                                type: "structure",
                                required: [ "Definition" ],
                                members: {
                                    Definition: {
                                        shape: "S1t"
                                    }
                                }
                            }
                        },
                        PortSets: {
                            type: "map",
                            key: {},
                            value: {
                                type: "structure",
                                members: {
                                    Definition: {
                                        shape: "S1t"
                                    }
                                }
                            }
                        }
                    }
                },
                RulesSource: {
                    type: "structure",
                    members: {
                        RulesString: {},
                        RulesSourceList: {
                            type: "structure",
                            required: [ "Targets", "TargetTypes", "GeneratedRulesType" ],
                            members: {
                                Targets: {
                                    type: "list",
                                    member: {}
                                },
                                TargetTypes: {
                                    type: "list",
                                    member: {}
                                },
                                GeneratedRulesType: {}
                            }
                        },
                        StatefulRules: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Action", "Header", "RuleOptions" ],
                                members: {
                                    Action: {},
                                    Header: {
                                        type: "structure",
                                        required: [ "Protocol", "Source", "SourcePort", "Direction", "Destination", "DestinationPort" ],
                                        members: {
                                            Protocol: {},
                                            Source: {},
                                            SourcePort: {},
                                            Direction: {},
                                            Destination: {},
                                            DestinationPort: {}
                                        }
                                    },
                                    RuleOptions: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "Keyword" ],
                                            members: {
                                                Keyword: {},
                                                Settings: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        StatelessRulesAndCustomActions: {
                            type: "structure",
                            required: [ "StatelessRules" ],
                            members: {
                                StatelessRules: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "RuleDefinition", "Priority" ],
                                        members: {
                                            RuleDefinition: {
                                                type: "structure",
                                                required: [ "MatchAttributes", "Actions" ],
                                                members: {
                                                    MatchAttributes: {
                                                        type: "structure",
                                                        members: {
                                                            Sources: {
                                                                shape: "S2n"
                                                            },
                                                            Destinations: {
                                                                shape: "S2n"
                                                            },
                                                            SourcePorts: {
                                                                shape: "S2q"
                                                            },
                                                            DestinationPorts: {
                                                                shape: "S2q"
                                                            },
                                                            Protocols: {
                                                                type: "list",
                                                                member: {
                                                                    type: "integer"
                                                                }
                                                            },
                                                            TCPFlags: {
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    required: [ "Flags" ],
                                                                    members: {
                                                                        Flags: {
                                                                            shape: "S2x"
                                                                        },
                                                                        Masks: {
                                                                            shape: "S2x"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    Actions: {
                                                        shape: "S14"
                                                    }
                                                }
                                            },
                                            Priority: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                CustomActions: {
                                    shape: "S15"
                                }
                            }
                        }
                    }
                },
                StatefulRuleOptions: {
                    type: "structure",
                    members: {
                        RuleOrder: {}
                    }
                }
            }
        },
        S1t: {
            type: "list",
            member: {}
        },
        S2n: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AddressDefinition" ],
                members: {
                    AddressDefinition: {}
                }
            }
        },
        S2q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "FromPort", "ToPort" ],
                members: {
                    FromPort: {
                        type: "integer"
                    },
                    ToPort: {
                        type: "integer"
                    }
                }
            }
        },
        S2x: {
            type: "list",
            member: {}
        },
        S32: {
            type: "structure",
            required: [ "RuleGroupArn", "RuleGroupName", "RuleGroupId" ],
            members: {
                RuleGroupArn: {},
                RuleGroupName: {},
                RuleGroupId: {},
                Description: {},
                Type: {},
                Capacity: {
                    type: "integer"
                },
                RuleGroupStatus: {},
                Tags: {
                    shape: "Sf"
                },
                ConsumedCapacity: {
                    type: "integer"
                },
                NumberOfAssociations: {
                    type: "integer"
                }
            }
        },
        S3h: {
            type: "structure",
            required: [ "LogDestinationConfigs" ],
            members: {
                LogDestinationConfigs: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "LogType", "LogDestinationType", "LogDestination" ],
                        members: {
                            LogType: {},
                            LogDestinationType: {},
                            LogDestination: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListFirewallPolicies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallPolicies"
        },
        ListFirewalls: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Firewalls"
        },
        ListRuleGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RuleGroups"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tags"
        }
    }
};

AWS.apiLoader.services["mwaa"] = {};

AWS.MWAA = AWS.Service.defineService("mwaa", [ "2020-07-01" ]);

AWS.apiLoader.services["mwaa"]["2020-07-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-01",
        endpointPrefix: "airflow",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AmazonMWAA",
        serviceId: "MWAA",
        signatureVersion: "v4",
        signingName: "airflow",
        uid: "mwaa-2020-07-01"
    },
    operations: {
        CreateCliToken: {
            http: {
                requestUri: "/clitoken/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CliToken: {
                        type: "string",
                        sensitive: true
                    },
                    WebServerHostname: {}
                }
            },
            endpoint: {
                hostPrefix: "env."
            }
        },
        CreateEnvironment: {
            http: {
                method: "PUT",
                requestUri: "/environments/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DagS3Path", "ExecutionRoleArn", "Name", "NetworkConfiguration", "SourceBucketArn" ],
                members: {
                    AirflowConfigurationOptions: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    AirflowVersion: {},
                    DagS3Path: {},
                    EnvironmentClass: {},
                    ExecutionRoleArn: {},
                    KmsKey: {},
                    LoggingConfiguration: {
                        shape: "Sf"
                    },
                    MaxWorkers: {
                        type: "integer"
                    },
                    MinWorkers: {
                        type: "integer"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    NetworkConfiguration: {
                        shape: "Sl"
                    },
                    PluginsS3ObjectVersion: {},
                    PluginsS3Path: {},
                    RequirementsS3ObjectVersion: {},
                    RequirementsS3Path: {},
                    Schedulers: {
                        type: "integer"
                    },
                    SourceBucketArn: {},
                    Tags: {
                        shape: "St"
                    },
                    WebserverAccessMode: {},
                    WeeklyMaintenanceWindowStart: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            },
            idempotent: true
        },
        CreateWebLoginToken: {
            http: {
                requestUri: "/webtoken/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WebServerHostname: {},
                    WebToken: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            endpoint: {
                hostPrefix: "env."
            },
            idempotent: true
        },
        DeleteEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/environments/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            },
            idempotent: true
        },
        GetEnvironment: {
            http: {
                method: "GET",
                requestUri: "/environments/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Environment: {
                        type: "structure",
                        members: {
                            AirflowConfigurationOptions: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            AirflowVersion: {},
                            Arn: {},
                            CreatedAt: {
                                type: "timestamp"
                            },
                            DagS3Path: {},
                            EnvironmentClass: {},
                            ExecutionRoleArn: {},
                            KmsKey: {},
                            LastUpdate: {
                                type: "structure",
                                members: {
                                    CreatedAt: {
                                        type: "timestamp"
                                    },
                                    Error: {
                                        type: "structure",
                                        members: {
                                            ErrorCode: {},
                                            ErrorMessage: {}
                                        }
                                    },
                                    Status: {}
                                }
                            },
                            LoggingConfiguration: {
                                type: "structure",
                                members: {
                                    DagProcessingLogs: {
                                        shape: "S1h"
                                    },
                                    SchedulerLogs: {
                                        shape: "S1h"
                                    },
                                    TaskLogs: {
                                        shape: "S1h"
                                    },
                                    WebserverLogs: {
                                        shape: "S1h"
                                    },
                                    WorkerLogs: {
                                        shape: "S1h"
                                    }
                                }
                            },
                            MaxWorkers: {
                                type: "integer"
                            },
                            MinWorkers: {
                                type: "integer"
                            },
                            Name: {},
                            NetworkConfiguration: {
                                shape: "Sl"
                            },
                            PluginsS3ObjectVersion: {},
                            PluginsS3Path: {},
                            RequirementsS3ObjectVersion: {},
                            RequirementsS3Path: {},
                            Schedulers: {
                                type: "integer"
                            },
                            ServiceRoleArn: {},
                            SourceBucketArn: {},
                            Status: {},
                            Tags: {
                                shape: "St"
                            },
                            WebserverAccessMode: {},
                            WebserverUrl: {},
                            WeeklyMaintenanceWindowStart: {}
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListEnvironments: {
            http: {
                method: "GET",
                requestUri: "/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Environments" ],
                members: {
                    Environments: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "St"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        PublishMetrics: {
            http: {
                requestUri: "/metrics/environments/{EnvironmentName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EnvironmentName", "MetricData" ],
                members: {
                    EnvironmentName: {
                        location: "uri",
                        locationName: "EnvironmentName"
                    },
                    MetricData: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "MetricName", "Timestamp" ],
                            members: {
                                Dimensions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Name", "Value" ],
                                        members: {
                                            Name: {},
                                            Value: {}
                                        }
                                    }
                                },
                                MetricName: {},
                                StatisticValues: {
                                    type: "structure",
                                    members: {
                                        Maximum: {
                                            type: "double"
                                        },
                                        Minimum: {
                                            type: "double"
                                        },
                                        SampleCount: {
                                            type: "integer"
                                        },
                                        Sum: {
                                            type: "double"
                                        }
                                    }
                                },
                                Timestamp: {
                                    type: "timestamp"
                                },
                                Unit: {},
                                Value: {
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "ops."
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "tagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            },
            idempotent: true
        },
        UpdateEnvironment: {
            http: {
                method: "PATCH",
                requestUri: "/environments/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    AirflowConfigurationOptions: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    AirflowVersion: {},
                    DagS3Path: {},
                    EnvironmentClass: {},
                    ExecutionRoleArn: {},
                    LoggingConfiguration: {
                        shape: "Sf"
                    },
                    MaxWorkers: {
                        type: "integer"
                    },
                    MinWorkers: {
                        type: "integer"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    NetworkConfiguration: {
                        type: "structure",
                        required: [ "SecurityGroupIds" ],
                        members: {
                            SecurityGroupIds: {
                                shape: "Sm"
                            }
                        }
                    },
                    PluginsS3ObjectVersion: {},
                    PluginsS3Path: {},
                    RequirementsS3ObjectVersion: {},
                    RequirementsS3Path: {},
                    Schedulers: {
                        type: "integer"
                    },
                    SourceBucketArn: {},
                    WebserverAccessMode: {},
                    WeeklyMaintenanceWindowStart: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        }
    },
    shapes: {
        Sf: {
            type: "structure",
            members: {
                DagProcessingLogs: {
                    shape: "Sg"
                },
                SchedulerLogs: {
                    shape: "Sg"
                },
                TaskLogs: {
                    shape: "Sg"
                },
                WebserverLogs: {
                    shape: "Sg"
                },
                WorkerLogs: {
                    shape: "Sg"
                }
            }
        },
        Sg: {
            type: "structure",
            required: [ "Enabled", "LogLevel" ],
            members: {
                Enabled: {
                    type: "boolean"
                },
                LogLevel: {}
            }
        },
        Sl: {
            type: "structure",
            members: {
                SecurityGroupIds: {
                    shape: "Sm"
                },
                SubnetIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sm: {
            type: "list",
            member: {}
        },
        St: {
            type: "map",
            key: {},
            value: {}
        },
        S1h: {
            type: "structure",
            members: {
                CloudWatchLogGroupArn: {},
                Enabled: {
                    type: "boolean"
                },
                LogLevel: {}
            }
        }
    },
    paginators: {
        ListEnvironments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Environments"
        }
    }
};

AWS.apiLoader.services["amplifybackend"] = {};

AWS.AmplifyBackend = AWS.Service.defineService("amplifybackend", [ "2020-08-11" ]);

AWS.apiLoader.services["amplifybackend"]["2020-08-11"] = {
    metadata: {
        apiVersion: "2020-08-11",
        endpointPrefix: "amplifybackend",
        signingName: "amplifybackend",
        serviceFullName: "AmplifyBackend",
        serviceId: "AmplifyBackend",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "amplifybackend-2020-08-11",
        signatureVersion: "v4"
    },
    operations: {
        CloneBackend: {
            http: {
                requestUri: "/backend/{appId}/environments/{backendEnvironmentName}/clone",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    TargetEnvironmentName: {
                        locationName: "targetEnvironmentName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "TargetEnvironmentName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        CreateBackend: {
            http: {
                requestUri: "/backend",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    AppName: {
                        locationName: "appName"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        locationName: "resourceConfig",
                        type: "structure",
                        members: {}
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "AppName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        CreateBackendAPI: {
            http: {
                requestUri: "/backend/{appId}/api",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        shape: "S8",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "ResourceName", "BackendEnvironmentName", "ResourceConfig" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        CreateBackendAuth: {
            http: {
                requestUri: "/backend/{appId}/auth",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        shape: "Si",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "ResourceName", "BackendEnvironmentName", "ResourceConfig" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        CreateBackendConfig: {
            http: {
                requestUri: "/backend/{appId}/config",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendManagerAppId: {
                        locationName: "backendManagerAppId"
                    }
                },
                required: [ "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        CreateToken: {
            http: {
                requestUri: "/backend/{appId}/challenge",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    }
                },
                required: [ "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    ChallengeCode: {
                        locationName: "challengeCode"
                    },
                    SessionId: {
                        locationName: "sessionId"
                    },
                    Ttl: {
                        locationName: "ttl"
                    }
                }
            }
        },
        DeleteBackend: {
            http: {
                requestUri: "/backend/{appId}/environments/{backendEnvironmentName}/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        DeleteBackendAPI: {
            http: {
                requestUri: "/backend/{appId}/api/{backendEnvironmentName}/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        shape: "S8",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        DeleteBackendAuth: {
            http: {
                requestUri: "/backend/{appId}/auth/{backendEnvironmentName}/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        DeleteToken: {
            http: {
                requestUri: "/backend/{appId}/challenge/{sessionId}/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    SessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                },
                required: [ "SessionId", "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    IsSuccess: {
                        locationName: "isSuccess",
                        type: "boolean"
                    }
                }
            }
        },
        GenerateBackendAPIModels: {
            http: {
                requestUri: "/backend/{appId}/api/{backendEnvironmentName}/generateModels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        GetBackend: {
            http: {
                requestUri: "/backend/{appId}/details",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    }
                },
                required: [ "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    AmplifyFeatureFlags: {
                        locationName: "amplifyFeatureFlags"
                    },
                    AmplifyMetaConfig: {
                        locationName: "amplifyMetaConfig"
                    },
                    AppId: {
                        locationName: "appId"
                    },
                    AppName: {
                        locationName: "appName"
                    },
                    BackendEnvironmentList: {
                        shape: "S11",
                        locationName: "backendEnvironmentList"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    }
                }
            }
        },
        GetBackendAPI: {
            http: {
                requestUri: "/backend/{appId}/api/{backendEnvironmentName}/details",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        shape: "S8",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    ResourceConfig: {
                        shape: "S8",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                }
            }
        },
        GetBackendAPIModels: {
            http: {
                requestUri: "/backend/{appId}/api/{backendEnvironmentName}/getModels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    Models: {
                        locationName: "models"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        GetBackendAuth: {
            http: {
                requestUri: "/backend/{appId}/auth/{backendEnvironmentName}/details",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    ResourceConfig: {
                        shape: "Si",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                }
            }
        },
        GetBackendJob: {
            http: {
                method: "GET",
                requestUri: "/backend/{appId}/job/{backendEnvironmentName}/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "JobId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    CreateTime: {
                        locationName: "createTime"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    },
                    UpdateTime: {
                        locationName: "updateTime"
                    }
                }
            }
        },
        GetToken: {
            http: {
                method: "GET",
                requestUri: "/backend/{appId}/challenge/{sessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    SessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                },
                required: [ "SessionId", "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    ChallengeCode: {
                        locationName: "challengeCode"
                    },
                    SessionId: {
                        locationName: "sessionId"
                    },
                    Ttl: {
                        locationName: "ttl"
                    }
                }
            }
        },
        ImportBackendAuth: {
            http: {
                requestUri: "/backend/{appId}/auth/{backendEnvironmentName}/import",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    IdentityPoolId: {
                        locationName: "identityPoolId"
                    },
                    NativeClientId: {
                        locationName: "nativeClientId"
                    },
                    UserPoolId: {
                        locationName: "userPoolId"
                    },
                    WebClientId: {
                        locationName: "webClientId"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "UserPoolId", "NativeClientId", "WebClientId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        ListBackendJobs: {
            http: {
                requestUri: "/backend/{appId}/job/{backendEnvironmentName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName" ]
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        locationName: "jobs",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppId: {
                                    locationName: "appId"
                                },
                                BackendEnvironmentName: {
                                    locationName: "backendEnvironmentName"
                                },
                                CreateTime: {
                                    locationName: "createTime"
                                },
                                Error: {
                                    locationName: "error"
                                },
                                JobId: {
                                    locationName: "jobId"
                                },
                                Operation: {
                                    locationName: "operation"
                                },
                                Status: {
                                    locationName: "status"
                                },
                                UpdateTime: {
                                    locationName: "updateTime"
                                }
                            },
                            required: [ "AppId", "BackendEnvironmentName" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        RemoveAllBackends: {
            http: {
                requestUri: "/backend/{appId}/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    CleanAmplifyApp: {
                        locationName: "cleanAmplifyApp",
                        type: "boolean"
                    }
                },
                required: [ "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        RemoveBackendConfig: {
            http: {
                requestUri: "/backend/{appId}/config/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    }
                },
                required: [ "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    Error: {
                        locationName: "error"
                    }
                }
            }
        },
        UpdateBackendAPI: {
            http: {
                requestUri: "/backend/{appId}/api/{backendEnvironmentName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        shape: "S8",
                        locationName: "resourceConfig"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        UpdateBackendAuth: {
            http: {
                requestUri: "/backend/{appId}/auth/{backendEnvironmentName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    ResourceConfig: {
                        locationName: "resourceConfig",
                        type: "structure",
                        members: {
                            AuthResources: {
                                locationName: "authResources"
                            },
                            IdentityPoolConfigs: {
                                locationName: "identityPoolConfigs",
                                type: "structure",
                                members: {
                                    UnauthenticatedLogin: {
                                        locationName: "unauthenticatedLogin",
                                        type: "boolean"
                                    }
                                }
                            },
                            Service: {
                                locationName: "service"
                            },
                            UserPoolConfigs: {
                                locationName: "userPoolConfigs",
                                type: "structure",
                                members: {
                                    ForgotPassword: {
                                        locationName: "forgotPassword",
                                        type: "structure",
                                        members: {
                                            DeliveryMethod: {
                                                locationName: "deliveryMethod"
                                            },
                                            EmailSettings: {
                                                shape: "Sq",
                                                locationName: "emailSettings"
                                            },
                                            SmsSettings: {
                                                shape: "Sr",
                                                locationName: "smsSettings"
                                            }
                                        }
                                    },
                                    Mfa: {
                                        locationName: "mfa",
                                        type: "structure",
                                        members: {
                                            MFAMode: {},
                                            Settings: {
                                                shape: "Su",
                                                locationName: "settings"
                                            }
                                        }
                                    },
                                    OAuth: {
                                        locationName: "oAuth",
                                        type: "structure",
                                        members: {
                                            DomainPrefix: {
                                                locationName: "domainPrefix"
                                            },
                                            OAuthGrantType: {
                                                locationName: "oAuthGrantType"
                                            },
                                            OAuthScopes: {
                                                shape: "Sz",
                                                locationName: "oAuthScopes"
                                            },
                                            RedirectSignInURIs: {
                                                shape: "S11",
                                                locationName: "redirectSignInURIs"
                                            },
                                            RedirectSignOutURIs: {
                                                shape: "S11",
                                                locationName: "redirectSignOutURIs"
                                            },
                                            SocialProviderSettings: {
                                                shape: "S12",
                                                locationName: "socialProviderSettings"
                                            }
                                        }
                                    },
                                    PasswordPolicy: {
                                        locationName: "passwordPolicy",
                                        type: "structure",
                                        members: {
                                            AdditionalConstraints: {
                                                shape: "S16",
                                                locationName: "additionalConstraints"
                                            },
                                            MinimumLength: {
                                                locationName: "minimumLength",
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        required: [ "AuthResources", "UserPoolConfigs", "Service" ]
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "ResourceName", "ResourceConfig" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        UpdateBackendConfig: {
            http: {
                requestUri: "/backend/{appId}/config/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    LoginAuthConfig: {
                        shape: "S2q",
                        locationName: "loginAuthConfig"
                    }
                },
                required: [ "AppId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendManagerAppId: {
                        locationName: "backendManagerAppId"
                    },
                    Error: {
                        locationName: "error"
                    },
                    LoginAuthConfig: {
                        shape: "S2q",
                        locationName: "loginAuthConfig"
                    }
                }
            }
        },
        UpdateBackendJob: {
            http: {
                requestUri: "/backend/{appId}/job/{backendEnvironmentName}/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        location: "uri",
                        locationName: "backendEnvironmentName"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    }
                },
                required: [ "AppId", "BackendEnvironmentName", "JobId" ]
            },
            output: {
                type: "structure",
                members: {
                    AppId: {
                        locationName: "appId"
                    },
                    BackendEnvironmentName: {
                        locationName: "backendEnvironmentName"
                    },
                    CreateTime: {
                        locationName: "createTime"
                    },
                    Error: {
                        locationName: "error"
                    },
                    JobId: {
                        locationName: "jobId"
                    },
                    Operation: {
                        locationName: "operation"
                    },
                    Status: {
                        locationName: "status"
                    },
                    UpdateTime: {
                        locationName: "updateTime"
                    }
                }
            }
        }
    },
    shapes: {
        S8: {
            type: "structure",
            members: {
                AdditionalAuthTypes: {
                    locationName: "additionalAuthTypes",
                    type: "list",
                    member: {
                        shape: "Sa"
                    }
                },
                ApiName: {
                    locationName: "apiName"
                },
                ConflictResolution: {
                    locationName: "conflictResolution",
                    type: "structure",
                    members: {
                        ResolutionStrategy: {
                            locationName: "resolutionStrategy"
                        }
                    }
                },
                DefaultAuthType: {
                    shape: "Sa",
                    locationName: "defaultAuthType"
                },
                Service: {
                    locationName: "service"
                },
                TransformSchema: {
                    locationName: "transformSchema"
                }
            }
        },
        Sa: {
            type: "structure",
            members: {
                Mode: {
                    locationName: "mode"
                },
                Settings: {
                    locationName: "settings",
                    type: "structure",
                    members: {
                        CognitoUserPoolId: {
                            locationName: "cognitoUserPoolId"
                        },
                        Description: {
                            locationName: "description"
                        },
                        ExpirationTime: {
                            locationName: "expirationTime",
                            type: "double"
                        },
                        OpenIDAuthTTL: {
                            locationName: "openIDAuthTTL"
                        },
                        OpenIDClientId: {
                            locationName: "openIDClientId"
                        },
                        OpenIDIatTTL: {
                            locationName: "openIDIatTTL"
                        },
                        OpenIDIssueURL: {
                            locationName: "openIDIssueURL"
                        },
                        OpenIDProviderName: {
                            locationName: "openIDProviderName"
                        }
                    }
                }
            }
        },
        Si: {
            type: "structure",
            members: {
                AuthResources: {
                    locationName: "authResources"
                },
                IdentityPoolConfigs: {
                    locationName: "identityPoolConfigs",
                    type: "structure",
                    members: {
                        IdentityPoolName: {
                            locationName: "identityPoolName"
                        },
                        UnauthenticatedLogin: {
                            locationName: "unauthenticatedLogin",
                            type: "boolean"
                        }
                    },
                    required: [ "UnauthenticatedLogin", "IdentityPoolName" ]
                },
                Service: {
                    locationName: "service"
                },
                UserPoolConfigs: {
                    locationName: "userPoolConfigs",
                    type: "structure",
                    members: {
                        ForgotPassword: {
                            locationName: "forgotPassword",
                            type: "structure",
                            members: {
                                DeliveryMethod: {
                                    locationName: "deliveryMethod"
                                },
                                EmailSettings: {
                                    shape: "Sq",
                                    locationName: "emailSettings"
                                },
                                SmsSettings: {
                                    shape: "Sr",
                                    locationName: "smsSettings"
                                }
                            },
                            required: [ "DeliveryMethod" ]
                        },
                        Mfa: {
                            locationName: "mfa",
                            type: "structure",
                            members: {
                                MFAMode: {},
                                Settings: {
                                    shape: "Su",
                                    locationName: "settings"
                                }
                            },
                            required: [ "MFAMode" ]
                        },
                        OAuth: {
                            locationName: "oAuth",
                            type: "structure",
                            members: {
                                DomainPrefix: {
                                    locationName: "domainPrefix"
                                },
                                OAuthGrantType: {
                                    locationName: "oAuthGrantType"
                                },
                                OAuthScopes: {
                                    shape: "Sz",
                                    locationName: "oAuthScopes"
                                },
                                RedirectSignInURIs: {
                                    shape: "S11",
                                    locationName: "redirectSignInURIs"
                                },
                                RedirectSignOutURIs: {
                                    shape: "S11",
                                    locationName: "redirectSignOutURIs"
                                },
                                SocialProviderSettings: {
                                    shape: "S12",
                                    locationName: "socialProviderSettings"
                                }
                            },
                            required: [ "RedirectSignOutURIs", "RedirectSignInURIs", "OAuthGrantType", "OAuthScopes" ]
                        },
                        PasswordPolicy: {
                            locationName: "passwordPolicy",
                            type: "structure",
                            members: {
                                AdditionalConstraints: {
                                    shape: "S16",
                                    locationName: "additionalConstraints"
                                },
                                MinimumLength: {
                                    locationName: "minimumLength",
                                    type: "double"
                                }
                            },
                            required: [ "MinimumLength" ]
                        },
                        RequiredSignUpAttributes: {
                            locationName: "requiredSignUpAttributes",
                            type: "list",
                            member: {}
                        },
                        SignInMethod: {
                            locationName: "signInMethod"
                        },
                        UserPoolName: {
                            locationName: "userPoolName"
                        }
                    },
                    required: [ "RequiredSignUpAttributes", "SignInMethod", "UserPoolName" ]
                }
            },
            required: [ "AuthResources", "UserPoolConfigs", "Service" ]
        },
        Sq: {
            type: "structure",
            members: {
                EmailMessage: {
                    locationName: "emailMessage"
                },
                EmailSubject: {
                    locationName: "emailSubject"
                }
            }
        },
        Sr: {
            type: "structure",
            members: {
                SmsMessage: {
                    locationName: "smsMessage"
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                MfaTypes: {
                    locationName: "mfaTypes",
                    type: "list",
                    member: {}
                },
                SmsMessage: {
                    locationName: "smsMessage"
                }
            }
        },
        Sz: {
            type: "list",
            member: {}
        },
        S11: {
            type: "list",
            member: {}
        },
        S12: {
            type: "structure",
            members: {
                Facebook: {
                    shape: "S13"
                },
                Google: {
                    shape: "S13"
                },
                LoginWithAmazon: {
                    shape: "S13"
                },
                SignInWithApple: {
                    type: "structure",
                    members: {
                        ClientId: {
                            locationName: "client_id"
                        },
                        KeyId: {
                            locationName: "key_id"
                        },
                        PrivateKey: {
                            locationName: "private_key"
                        },
                        TeamId: {
                            locationName: "team_id"
                        }
                    }
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                ClientId: {
                    locationName: "client_id"
                },
                ClientSecret: {
                    locationName: "client_secret"
                }
            }
        },
        S16: {
            type: "list",
            member: {}
        },
        S2q: {
            type: "structure",
            members: {
                AwsCognitoIdentityPoolId: {
                    locationName: "aws_cognito_identity_pool_id"
                },
                AwsCognitoRegion: {
                    locationName: "aws_cognito_region"
                },
                AwsUserPoolsId: {
                    locationName: "aws_user_pools_id"
                },
                AwsUserPoolsWebClientId: {
                    locationName: "aws_user_pools_web_client_id"
                }
            }
        }
    },
    paginators: {
        ListBackendJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Jobs"
        }
    }
};

AWS.apiLoader.services["appintegrations"] = {};

AWS.AppIntegrations = AWS.Service.defineService("appintegrations", [ "2020-07-29" ]);

AWS.apiLoader.services["appintegrations"]["2020-07-29"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-29",
        endpointPrefix: "app-integrations",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon AppIntegrations Service",
        serviceId: "AppIntegrations",
        signatureVersion: "v4",
        signingName: "app-integrations",
        uid: "appintegrations-2020-07-29"
    },
    operations: {
        CreateDataIntegration: {
            http: {
                requestUri: "/dataIntegrations"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    KmsKey: {},
                    SourceURI: {},
                    ScheduleConfig: {
                        shape: "S5"
                    },
                    Tags: {
                        shape: "S8"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    KmsKey: {},
                    SourceURI: {},
                    ScheduleConfiguration: {
                        shape: "S5"
                    },
                    Tags: {
                        shape: "S8"
                    },
                    ClientToken: {}
                }
            }
        },
        CreateEventIntegration: {
            http: {
                requestUri: "/eventIntegrations"
            },
            input: {
                type: "structure",
                required: [ "Name", "EventFilter", "EventBridgeBus" ],
                members: {
                    Name: {},
                    Description: {},
                    EventFilter: {
                        shape: "Sg"
                    },
                    EventBridgeBus: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventIntegrationArn: {}
                }
            }
        },
        DeleteDataIntegration: {
            http: {
                method: "DELETE",
                requestUri: "/dataIntegrations/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "DataIntegrationIdentifier" ],
                members: {
                    DataIntegrationIdentifier: {
                        location: "uri",
                        locationName: "Identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEventIntegration: {
            http: {
                method: "DELETE",
                requestUri: "/eventIntegrations/{Name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetDataIntegration: {
            http: {
                method: "GET",
                requestUri: "/dataIntegrations/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    KmsKey: {},
                    SourceURI: {},
                    ScheduleConfiguration: {
                        shape: "S5"
                    },
                    Tags: {
                        shape: "S8"
                    }
                }
            }
        },
        GetEventIntegration: {
            http: {
                method: "GET",
                requestUri: "/eventIntegrations/{Name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Description: {},
                    EventIntegrationArn: {},
                    EventBridgeBus: {},
                    EventFilter: {
                        shape: "Sg"
                    },
                    Tags: {
                        shape: "S8"
                    }
                }
            }
        },
        ListDataIntegrationAssociations: {
            http: {
                method: "GET",
                requestUri: "/dataIntegrations/{Identifier}/associations"
            },
            input: {
                type: "structure",
                required: [ "DataIntegrationIdentifier" ],
                members: {
                    DataIntegrationIdentifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataIntegrationAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DataIntegrationAssociationArn: {},
                                DataIntegrationArn: {},
                                ClientId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDataIntegrations: {
            http: {
                method: "GET",
                requestUri: "/dataIntegrations"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataIntegrations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                SourceURI: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventIntegrationAssociations: {
            http: {
                method: "GET",
                requestUri: "/eventIntegrations/{Name}/associations"
            },
            input: {
                type: "structure",
                required: [ "EventIntegrationName" ],
                members: {
                    EventIntegrationName: {
                        location: "uri",
                        locationName: "Name"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventIntegrationAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventIntegrationAssociationArn: {},
                                EventIntegrationAssociationId: {},
                                EventIntegrationName: {},
                                ClientId: {},
                                EventBridgeRuleName: {},
                                ClientAssociationMetadata: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventIntegrations: {
            http: {
                method: "GET",
                requestUri: "/eventIntegrations"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventIntegrations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventIntegrationArn: {},
                                Name: {},
                                Description: {},
                                EventFilter: {
                                    shape: "Sg"
                                },
                                EventBridgeBus: {},
                                Tags: {
                                    shape: "S8"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S8"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDataIntegration: {
            http: {
                method: "PATCH",
                requestUri: "/dataIntegrations/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    Name: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEventIntegration: {
            http: {
                method: "PATCH",
                requestUri: "/eventIntegrations/{Name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                FirstExecutionFrom: {},
                Object: {},
                ScheduleExpression: {}
            }
        },
        S8: {
            type: "map",
            key: {},
            value: {}
        },
        Sg: {
            type: "structure",
            required: [ "Source" ],
            members: {
                Source: {}
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["connectcontactlens"] = {};

AWS.ConnectContactLens = AWS.Service.defineService("connectcontactlens", [ "2020-08-21" ]);

AWS.apiLoader.services["connectcontactlens"]["2020-08-21"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-21",
        endpointPrefix: "contact-lens",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon Connect Contact Lens",
        serviceFullName: "Amazon Connect Contact Lens",
        serviceId: "Connect Contact Lens",
        signatureVersion: "v4",
        signingName: "connect",
        uid: "connect-contact-lens-2020-08-21"
    },
    operations: {
        ListRealtimeContactAnalysisSegments: {
            http: {
                requestUri: "/realtime-contact-analysis/analysis-segments"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Segments" ],
                members: {
                    Segments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Transcript: {
                                    type: "structure",
                                    required: [ "Id", "ParticipantId", "ParticipantRole", "Content", "BeginOffsetMillis", "EndOffsetMillis", "Sentiment" ],
                                    members: {
                                        Id: {},
                                        ParticipantId: {},
                                        ParticipantRole: {},
                                        Content: {},
                                        BeginOffsetMillis: {
                                            type: "integer"
                                        },
                                        EndOffsetMillis: {
                                            type: "integer"
                                        },
                                        Sentiment: {},
                                        IssuesDetected: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "CharacterOffsets" ],
                                                members: {
                                                    CharacterOffsets: {
                                                        type: "structure",
                                                        required: [ "BeginOffsetChar", "EndOffsetChar" ],
                                                        members: {
                                                            BeginOffsetChar: {
                                                                type: "integer"
                                                            },
                                                            EndOffsetChar: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                Categories: {
                                    type: "structure",
                                    required: [ "MatchedCategories", "MatchedDetails" ],
                                    members: {
                                        MatchedCategories: {
                                            type: "list",
                                            member: {}
                                        },
                                        MatchedDetails: {
                                            type: "map",
                                            key: {},
                                            value: {
                                                type: "structure",
                                                required: [ "PointsOfInterest" ],
                                                members: {
                                                    PointsOfInterest: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            required: [ "BeginOffsetMillis", "EndOffsetMillis" ],
                                                            members: {
                                                                BeginOffsetMillis: {
                                                                    type: "integer"
                                                                },
                                                                EndOffsetMillis: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {
        ListRealtimeContactAnalysisSegments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["devopsguru"] = {};

AWS.DevOpsGuru = AWS.Service.defineService("devopsguru", [ "2020-12-01" ]);

AWS.apiLoader.services["devopsguru"]["2020-12-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-12-01",
        endpointPrefix: "devops-guru",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon DevOps Guru",
        serviceId: "DevOps Guru",
        signatureVersion: "v4",
        signingName: "devops-guru",
        uid: "devops-guru-2020-12-01"
    },
    operations: {
        AddNotificationChannel: {
            http: {
                method: "PUT",
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Config" ],
                members: {
                    Config: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            }
        },
        DescribeAccountHealth: {
            http: {
                method: "GET",
                requestUri: "/accounts/health",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "OpenReactiveInsights", "OpenProactiveInsights", "MetricsAnalyzed", "ResourceHours" ],
                members: {
                    OpenReactiveInsights: {
                        type: "integer"
                    },
                    OpenProactiveInsights: {
                        type: "integer"
                    },
                    MetricsAnalyzed: {
                        type: "integer"
                    },
                    ResourceHours: {
                        type: "long"
                    }
                }
            }
        },
        DescribeAccountOverview: {
            http: {
                requestUri: "/accounts/overview",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FromTime" ],
                members: {
                    FromTime: {
                        type: "timestamp"
                    },
                    ToTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ReactiveInsights", "ProactiveInsights", "MeanTimeToRecoverInMilliseconds" ],
                members: {
                    ReactiveInsights: {
                        type: "integer"
                    },
                    ProactiveInsights: {
                        type: "integer"
                    },
                    MeanTimeToRecoverInMilliseconds: {
                        type: "long"
                    }
                }
            }
        },
        DescribeAnomaly: {
            http: {
                method: "GET",
                requestUri: "/anomalies/{Id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProactiveAnomaly: {
                        type: "structure",
                        members: {
                            Id: {},
                            Severity: {},
                            Status: {},
                            UpdateTime: {
                                type: "timestamp"
                            },
                            AnomalyTimeRange: {
                                shape: "Sp"
                            },
                            AnomalyReportedTimeRange: {
                                shape: "Sq"
                            },
                            PredictionTimeRange: {
                                shape: "Sr"
                            },
                            SourceDetails: {
                                shape: "Ss"
                            },
                            AssociatedInsightId: {},
                            ResourceCollection: {
                                shape: "S15"
                            },
                            Limit: {
                                type: "double"
                            }
                        }
                    },
                    ReactiveAnomaly: {
                        type: "structure",
                        members: {
                            Id: {},
                            Severity: {},
                            Status: {},
                            AnomalyTimeRange: {
                                shape: "Sp"
                            },
                            AnomalyReportedTimeRange: {
                                shape: "Sq"
                            },
                            SourceDetails: {
                                shape: "Ss"
                            },
                            AssociatedInsightId: {},
                            ResourceCollection: {
                                shape: "S15"
                            }
                        }
                    }
                }
            }
        },
        DescribeFeedback: {
            http: {
                requestUri: "/feedback",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InsightId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InsightFeedback: {
                        shape: "S1d"
                    }
                }
            }
        },
        DescribeInsight: {
            http: {
                method: "GET",
                requestUri: "/insights/{Id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProactiveInsight: {
                        type: "structure",
                        members: {
                            Id: {},
                            Name: {},
                            Severity: {},
                            Status: {},
                            InsightTimeRange: {
                                shape: "S1l"
                            },
                            PredictionTimeRange: {
                                shape: "Sr"
                            },
                            ResourceCollection: {
                                shape: "S15"
                            },
                            SsmOpsItemId: {}
                        }
                    },
                    ReactiveInsight: {
                        type: "structure",
                        members: {
                            Id: {},
                            Name: {},
                            Severity: {},
                            Status: {},
                            InsightTimeRange: {
                                shape: "S1l"
                            },
                            ResourceCollection: {
                                shape: "S15"
                            },
                            SsmOpsItemId: {}
                        }
                    }
                }
            }
        },
        DescribeResourceCollectionHealth: {
            http: {
                method: "GET",
                requestUri: "/accounts/health/resource-collection/{ResourceCollectionType}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceCollectionType" ],
                members: {
                    ResourceCollectionType: {
                        location: "uri",
                        locationName: "ResourceCollectionType"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CloudFormation" ],
                members: {
                    CloudFormation: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StackName: {},
                                Insight: {
                                    type: "structure",
                                    members: {
                                        OpenProactiveInsights: {
                                            type: "integer"
                                        },
                                        OpenReactiveInsights: {
                                            type: "integer"
                                        },
                                        MeanTimeToRecoverInMilliseconds: {
                                            type: "long"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Service: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ServiceName: {},
                                Insight: {
                                    type: "structure",
                                    members: {
                                        OpenProactiveInsights: {
                                            type: "integer"
                                        },
                                        OpenReactiveInsights: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeServiceIntegration: {
            http: {
                method: "GET",
                requestUri: "/service-integrations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ServiceIntegration: {
                        type: "structure",
                        members: {
                            OpsCenter: {
                                type: "structure",
                                members: {
                                    OptInStatus: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        GetCostEstimation: {
            http: {
                method: "GET",
                requestUri: "/cost-estimation",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceCollection: {
                        shape: "S26"
                    },
                    Status: {},
                    Costs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                State: {},
                                Count: {
                                    type: "integer"
                                },
                                UnitCost: {
                                    type: "double"
                                },
                                Cost: {
                                    type: "double"
                                }
                            }
                        }
                    },
                    TimeRange: {
                        type: "structure",
                        members: {
                            StartTime: {
                                type: "timestamp"
                            },
                            EndTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    TotalCost: {
                        type: "double"
                    },
                    NextToken: {}
                }
            }
        },
        GetResourceCollection: {
            http: {
                method: "GET",
                requestUri: "/resource-collections/{ResourceCollectionType}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceCollectionType" ],
                members: {
                    ResourceCollectionType: {
                        location: "uri",
                        locationName: "ResourceCollectionType"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceCollection: {
                        type: "structure",
                        members: {
                            CloudFormation: {
                                type: "structure",
                                members: {
                                    StackNames: {
                                        shape: "S17"
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAnomaliesForInsight: {
            http: {
                requestUri: "/anomalies/insight/{InsightId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "InsightId" ],
                members: {
                    InsightId: {
                        location: "uri",
                        locationName: "InsightId"
                    },
                    StartTimeRange: {
                        shape: "S2m"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProactiveAnomalies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Severity: {},
                                Status: {},
                                UpdateTime: {
                                    type: "timestamp"
                                },
                                AnomalyTimeRange: {
                                    shape: "Sp"
                                },
                                AnomalyReportedTimeRange: {
                                    shape: "Sq"
                                },
                                PredictionTimeRange: {
                                    shape: "Sr"
                                },
                                SourceDetails: {
                                    shape: "Ss"
                                },
                                AssociatedInsightId: {},
                                ResourceCollection: {
                                    shape: "S15"
                                },
                                Limit: {
                                    type: "double"
                                }
                            }
                        }
                    },
                    ReactiveAnomalies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Severity: {},
                                Status: {},
                                AnomalyTimeRange: {
                                    shape: "Sp"
                                },
                                AnomalyReportedTimeRange: {
                                    shape: "Sq"
                                },
                                SourceDetails: {
                                    shape: "Ss"
                                },
                                AssociatedInsightId: {},
                                ResourceCollection: {
                                    shape: "S15"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEvents: {
            http: {
                requestUri: "/events",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Filters" ],
                members: {
                    Filters: {
                        type: "structure",
                        members: {
                            InsightId: {},
                            EventTimeRange: {
                                type: "structure",
                                required: [ "FromTime", "ToTime" ],
                                members: {
                                    FromTime: {
                                        type: "timestamp"
                                    },
                                    ToTime: {
                                        type: "timestamp"
                                    }
                                }
                            },
                            EventClass: {},
                            EventSource: {},
                            DataSource: {},
                            ResourceCollection: {
                                shape: "S15"
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Events" ],
                members: {
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceCollection: {
                                    shape: "S15"
                                },
                                Id: {},
                                Time: {
                                    type: "timestamp"
                                },
                                EventSource: {},
                                Name: {},
                                DataSource: {},
                                EventClass: {},
                                Resources: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Type: {},
                                            Name: {},
                                            Arn: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInsights: {
            http: {
                requestUri: "/insights",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "StatusFilter" ],
                members: {
                    StatusFilter: {
                        type: "structure",
                        members: {
                            Ongoing: {
                                type: "structure",
                                required: [ "Type" ],
                                members: {
                                    Type: {}
                                }
                            },
                            Closed: {
                                type: "structure",
                                required: [ "Type", "EndTimeRange" ],
                                members: {
                                    Type: {},
                                    EndTimeRange: {
                                        type: "structure",
                                        members: {
                                            FromTime: {
                                                type: "timestamp"
                                            },
                                            ToTime: {
                                                type: "timestamp"
                                            }
                                        }
                                    }
                                }
                            },
                            Any: {
                                type: "structure",
                                required: [ "Type", "StartTimeRange" ],
                                members: {
                                    Type: {},
                                    StartTimeRange: {
                                        shape: "S2m"
                                    }
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProactiveInsights: {
                        shape: "S3j"
                    },
                    ReactiveInsights: {
                        shape: "S3n"
                    },
                    NextToken: {}
                }
            }
        },
        ListNotificationChannels: {
            http: {
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Config: {
                                    shape: "S2"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRecommendations: {
            http: {
                requestUri: "/recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "InsightId" ],
                members: {
                    InsightId: {},
                    NextToken: {},
                    Locale: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Recommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Description: {},
                                Link: {},
                                Name: {},
                                Reason: {},
                                RelatedEvents: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Resources: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Type: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                RelatedAnomalies: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Resources: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Type: {}
                                                    }
                                                }
                                            },
                                            SourceDetails: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        CloudWatchMetrics: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    MetricName: {},
                                                                    Namespace: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutFeedback: {
            http: {
                method: "PUT",
                requestUri: "/feedback",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InsightFeedback: {
                        shape: "S1d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveNotificationChannel: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{Id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchInsights: {
            http: {
                requestUri: "/insights/search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "StartTimeRange", "Type" ],
                members: {
                    StartTimeRange: {
                        shape: "S2m"
                    },
                    Filters: {
                        type: "structure",
                        members: {
                            Severities: {
                                type: "list",
                                member: {}
                            },
                            Statuses: {
                                type: "list",
                                member: {}
                            },
                            ResourceCollection: {
                                shape: "S15"
                            },
                            ServiceCollection: {
                                shape: "S3l"
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProactiveInsights: {
                        shape: "S3j"
                    },
                    ReactiveInsights: {
                        shape: "S3n"
                    },
                    NextToken: {}
                }
            }
        },
        StartCostEstimation: {
            http: {
                method: "PUT",
                requestUri: "/cost-estimation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceCollection" ],
                members: {
                    ResourceCollection: {
                        shape: "S26"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResourceCollection: {
            http: {
                method: "PUT",
                requestUri: "/resource-collections",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Action", "ResourceCollection" ],
                members: {
                    Action: {},
                    ResourceCollection: {
                        type: "structure",
                        members: {
                            CloudFormation: {
                                type: "structure",
                                members: {
                                    StackNames: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateServiceIntegration: {
            http: {
                method: "PUT",
                requestUri: "/service-integrations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ServiceIntegration" ],
                members: {
                    ServiceIntegration: {
                        type: "structure",
                        members: {
                            OpsCenter: {
                                type: "structure",
                                members: {
                                    OptInStatus: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            required: [ "Sns" ],
            members: {
                Sns: {
                    type: "structure",
                    members: {
                        TopicArn: {}
                    }
                }
            }
        },
        Sp: {
            type: "structure",
            required: [ "StartTime" ],
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "OpenTime" ],
            members: {
                OpenTime: {
                    type: "timestamp"
                },
                CloseTime: {
                    type: "timestamp"
                }
            }
        },
        Sr: {
            type: "structure",
            required: [ "StartTime" ],
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        Ss: {
            type: "structure",
            members: {
                CloudWatchMetrics: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            MetricName: {},
                            Namespace: {},
                            Dimensions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Value: {}
                                    }
                                }
                            },
                            Stat: {},
                            Unit: {},
                            Period: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                CloudFormation: {
                    type: "structure",
                    members: {
                        StackNames: {
                            shape: "S17"
                        }
                    }
                }
            }
        },
        S17: {
            type: "list",
            member: {}
        },
        S1d: {
            type: "structure",
            members: {
                Id: {},
                Feedback: {}
            }
        },
        S1l: {
            type: "structure",
            required: [ "StartTime" ],
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        S26: {
            type: "structure",
            members: {
                CloudFormation: {
                    type: "structure",
                    members: {
                        StackNames: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S2m: {
            type: "structure",
            members: {
                FromTime: {
                    type: "timestamp"
                },
                ToTime: {
                    type: "timestamp"
                }
            }
        },
        S3j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    Severity: {},
                    Status: {},
                    InsightTimeRange: {
                        shape: "S1l"
                    },
                    PredictionTimeRange: {
                        shape: "Sr"
                    },
                    ResourceCollection: {
                        shape: "S15"
                    },
                    ServiceCollection: {
                        shape: "S3l"
                    }
                }
            }
        },
        S3l: {
            type: "structure",
            members: {
                ServiceNames: {
                    type: "list",
                    member: {}
                }
            }
        },
        S3n: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    Severity: {},
                    Status: {},
                    InsightTimeRange: {
                        shape: "S1l"
                    },
                    ResourceCollection: {
                        shape: "S15"
                    },
                    ServiceCollection: {
                        shape: "S3l"
                    }
                }
            }
        }
    },
    paginators: {
        DescribeResourceCollectionHealth: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: [ "CloudFormation", "Service" ]
        },
        GetCostEstimation: {
            input_token: "NextToken",
            non_aggregate_keys: [ "Status", "TotalCost", "TimeRange", "ResourceCollection" ],
            output_token: "NextToken",
            result_key: [ "Costs" ]
        },
        GetResourceCollection: {
            input_token: "NextToken",
            non_aggregate_keys: [ "ResourceCollection" ],
            output_token: "NextToken",
            result_key: [ "ResourceCollection.CloudFormation.StackNames" ]
        },
        ListAnomaliesForInsight: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: [ "ReactiveAnomalies", "ProactiveAnomalies" ]
        },
        ListEvents: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Events"
        },
        ListInsights: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: [ "ProactiveInsights", "ReactiveInsights" ]
        },
        ListNotificationChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Channels"
        },
        ListRecommendations: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Recommendations"
        },
        SearchInsights: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: [ "ProactiveInsights", "ReactiveInsights" ]
        }
    }
};

AWS.apiLoader.services["ecrpublic"] = {};

AWS.ECRPUBLIC = AWS.Service.defineService("ecrpublic", [ "2020-10-30" ]);

AWS.apiLoader.services["ecrpublic"]["2020-10-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-10-30",
        endpointPrefix: "api.ecr-public",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Amazon ECR Public",
        serviceFullName: "Amazon Elastic Container Registry Public",
        serviceId: "ECR PUBLIC",
        signatureVersion: "v4",
        signingName: "ecr-public",
        targetPrefix: "SpencerFrontendService",
        uid: "ecr-public-2020-10-30"
    },
    operations: {
        BatchCheckLayerAvailability: {
            input: {
                type: "structure",
                required: [ "repositoryName", "layerDigests" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    layerDigests: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    layers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                layerDigest: {},
                                layerAvailability: {},
                                layerSize: {
                                    type: "long"
                                },
                                mediaType: {}
                            }
                        }
                    },
                    failures: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                layerDigest: {},
                                failureCode: {},
                                failureReason: {}
                            }
                        }
                    }
                }
            }
        },
        BatchDeleteImage: {
            input: {
                type: "structure",
                required: [ "repositoryName", "imageIds" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageIds: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    imageIds: {
                        shape: "Sj"
                    },
                    failures: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                imageId: {
                                    shape: "Sk"
                                },
                                failureCode: {},
                                failureReason: {}
                            }
                        }
                    }
                }
            }
        },
        CompleteLayerUpload: {
            input: {
                type: "structure",
                required: [ "repositoryName", "uploadId", "layerDigests" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    uploadId: {},
                    layerDigests: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    uploadId: {},
                    layerDigest: {}
                }
            }
        },
        CreateRepository: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {},
                    catalogData: {
                        shape: "Sx"
                    },
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S1b"
                    },
                    catalogData: {
                        shape: "S1f"
                    }
                }
            }
        },
        DeleteRepository: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S1b"
                    }
                }
            }
        },
        DeleteRepositoryPolicy: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    policyText: {}
                }
            }
        },
        DescribeImageTags: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    imageTagDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                imageTag: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                imageDetail: {
                                    type: "structure",
                                    members: {
                                        imageDigest: {},
                                        imageSizeInBytes: {
                                            type: "long"
                                        },
                                        imagePushedAt: {
                                            type: "timestamp"
                                        },
                                        imageManifestMediaType: {},
                                        artifactMediaType: {}
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeImages: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageIds: {
                        shape: "Sj"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    imageDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                registryId: {},
                                repositoryName: {},
                                imageDigest: {},
                                imageTags: {
                                    type: "list",
                                    member: {}
                                },
                                imageSizeInBytes: {
                                    type: "long"
                                },
                                imagePushedAt: {
                                    type: "timestamp"
                                },
                                imageManifestMediaType: {},
                                artifactMediaType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeRegistries: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "registries" ],
                members: {
                    registries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "registryId", "registryArn", "registryUri", "verified", "aliases" ],
                            members: {
                                registryId: {},
                                registryArn: {},
                                registryUri: {},
                                verified: {
                                    type: "boolean"
                                },
                                aliases: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name", "status", "primaryRegistryAlias", "defaultRegistryAlias" ],
                                        members: {
                                            name: {},
                                            status: {},
                                            primaryRegistryAlias: {
                                                type: "boolean"
                                            },
                                            defaultRegistryAlias: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeRepositories: {
            input: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryNames: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositories: {
                        type: "list",
                        member: {
                            shape: "S1b"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetAuthorizationToken: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    authorizationData: {
                        type: "structure",
                        members: {
                            authorizationToken: {},
                            expiresAt: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetRegistryCatalogData: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "registryCatalogData" ],
                members: {
                    registryCatalogData: {
                        shape: "S2o"
                    }
                }
            }
        },
        GetRepositoryCatalogData: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    catalogData: {
                        shape: "S1f"
                    }
                }
            }
        },
        GetRepositoryPolicy: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    policyText: {}
                }
            }
        },
        InitiateLayerUpload: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    uploadId: {},
                    partSize: {
                        type: "long"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S16"
                    }
                }
            }
        },
        PutImage: {
            input: {
                type: "structure",
                required: [ "repositoryName", "imageManifest" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageManifest: {},
                    imageManifestMediaType: {},
                    imageTag: {},
                    imageDigest: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    image: {
                        type: "structure",
                        members: {
                            registryId: {},
                            repositoryName: {},
                            imageId: {
                                shape: "Sk"
                            },
                            imageManifest: {},
                            imageManifestMediaType: {}
                        }
                    }
                }
            }
        },
        PutRegistryCatalogData: {
            input: {
                type: "structure",
                members: {
                    displayName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "registryCatalogData" ],
                members: {
                    registryCatalogData: {
                        shape: "S2o"
                    }
                }
            }
        },
        PutRepositoryCatalogData: {
            input: {
                type: "structure",
                required: [ "repositoryName", "catalogData" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    catalogData: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    catalogData: {
                        shape: "S1f"
                    }
                }
            }
        },
        SetRepositoryPolicy: {
            input: {
                type: "structure",
                required: [ "repositoryName", "policyText" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    policyText: {},
                    force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    policyText: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UploadLayerPart: {
            input: {
                type: "structure",
                required: [ "repositoryName", "uploadId", "partFirstByte", "partLastByte", "layerPartBlob" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    uploadId: {},
                    partFirstByte: {
                        type: "long"
                    },
                    partLastByte: {
                        type: "long"
                    },
                    layerPartBlob: {
                        type: "blob"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    uploadId: {},
                    lastByteReceived: {
                        type: "long"
                    }
                }
            }
        }
    },
    shapes: {
        Sj: {
            type: "list",
            member: {
                shape: "Sk"
            }
        },
        Sk: {
            type: "structure",
            members: {
                imageDigest: {},
                imageTag: {}
            }
        },
        Sx: {
            type: "structure",
            members: {
                description: {},
                architectures: {
                    shape: "Sz"
                },
                operatingSystems: {
                    shape: "S11"
                },
                logoImageBlob: {
                    type: "blob"
                },
                aboutText: {},
                usageText: {}
            }
        },
        Sz: {
            type: "list",
            member: {}
        },
        S11: {
            type: "list",
            member: {}
        },
        S16: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S1b: {
            type: "structure",
            members: {
                repositoryArn: {},
                registryId: {},
                repositoryName: {},
                repositoryUri: {},
                createdAt: {
                    type: "timestamp"
                }
            }
        },
        S1f: {
            type: "structure",
            members: {
                description: {},
                architectures: {
                    shape: "Sz"
                },
                operatingSystems: {
                    shape: "S11"
                },
                logoUrl: {},
                aboutText: {},
                usageText: {},
                marketplaceCertified: {
                    type: "boolean"
                }
            }
        },
        S2o: {
            type: "structure",
            members: {
                displayName: {}
            }
        }
    },
    paginators: {
        DescribeImageTags: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "imageTagDetails"
        },
        DescribeImages: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "imageDetails"
        },
        DescribeRegistries: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "registries"
        },
        DescribeRepositories: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "repositories"
        }
    }
};

AWS.apiLoader.services["lookoutvision"] = {};

AWS.LookoutVision = AWS.Service.defineService("lookoutvision", [ "2020-11-20" ]);

AWS.apiLoader.services["lookoutvision"]["2020-11-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-11-20",
        endpointPrefix: "lookoutvision",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Lookout for Vision",
        serviceId: "LookoutVision",
        signatureVersion: "v4",
        signingName: "lookoutvision",
        uid: "lookoutvision-2020-11-20"
    },
    operations: {
        CreateDataset: {
            http: {
                requestUri: "/2020-11-20/projects/{projectName}/datasets",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "DatasetType" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    DatasetType: {},
                    DatasetSource: {
                        type: "structure",
                        members: {
                            GroundTruthManifest: {
                                type: "structure",
                                members: {
                                    S3Object: {
                                        type: "structure",
                                        required: [ "Bucket", "Key" ],
                                        members: {
                                            Bucket: {},
                                            Key: {},
                                            VersionId: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetMetadata: {
                        shape: "Sc"
                    }
                }
            }
        },
        CreateModel: {
            http: {
                requestUri: "/2020-11-20/projects/{projectName}/models",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "OutputConfig" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    OutputConfig: {
                        shape: "Si"
                    },
                    KmsKeyId: {},
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelMetadata: {
                        shape: "Sr"
                    }
                }
            }
        },
        CreateProject: {
            http: {
                requestUri: "/2020-11-20/projects"
            },
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {},
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProjectMetadata: {
                        shape: "S10"
                    }
                }
            }
        },
        DeleteDataset: {
            http: {
                method: "DELETE",
                requestUri: "/2020-11-20/projects/{projectName}/datasets/{datasetType}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "DatasetType" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    DatasetType: {
                        location: "uri",
                        locationName: "datasetType"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteModel: {
            http: {
                method: "DELETE",
                requestUri: "/2020-11-20/projects/{projectName}/models/{modelVersion}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "ModelVersion" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    ModelVersion: {
                        location: "uri",
                        locationName: "modelVersion"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelArn: {}
                }
            }
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/2020-11-20/projects/{projectName}"
            },
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProjectArn: {}
                }
            }
        },
        DescribeDataset: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects/{projectName}/datasets/{datasetType}"
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "DatasetType" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    DatasetType: {
                        location: "uri",
                        locationName: "datasetType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetDescription: {
                        type: "structure",
                        members: {
                            ProjectName: {},
                            DatasetType: {},
                            CreationTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            Status: {},
                            StatusMessage: {},
                            ImageStats: {
                                type: "structure",
                                members: {
                                    Total: {
                                        type: "integer"
                                    },
                                    Labeled: {
                                        type: "integer"
                                    },
                                    Normal: {
                                        type: "integer"
                                    },
                                    Anomaly: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeModel: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects/{projectName}/models/{modelVersion}"
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "ModelVersion" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    ModelVersion: {
                        location: "uri",
                        locationName: "modelVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelDescription: {
                        type: "structure",
                        members: {
                            ModelVersion: {},
                            ModelArn: {},
                            CreationTimestamp: {
                                type: "timestamp"
                            },
                            Description: {},
                            Status: {},
                            StatusMessage: {},
                            Performance: {
                                shape: "Sw"
                            },
                            OutputConfig: {
                                shape: "Si"
                            },
                            EvaluationManifest: {
                                shape: "S1g"
                            },
                            EvaluationResult: {
                                shape: "S1g"
                            },
                            EvaluationEndTimestamp: {
                                type: "timestamp"
                            },
                            KmsKeyId: {}
                        }
                    }
                }
            }
        },
        DescribeProject: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects/{projectName}"
            },
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProjectDescription: {
                        type: "structure",
                        members: {
                            ProjectArn: {},
                            ProjectName: {},
                            CreationTimestamp: {
                                type: "timestamp"
                            },
                            Datasets: {
                                type: "list",
                                member: {
                                    shape: "Sc"
                                }
                            }
                        }
                    }
                }
            }
        },
        DetectAnomalies: {
            http: {
                requestUri: "/2020-11-20/projects/{projectName}/models/{modelVersion}/detect"
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "ModelVersion", "Body", "ContentType" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    ModelVersion: {
                        location: "uri",
                        locationName: "modelVersion"
                    },
                    Body: {
                        type: "blob",
                        requiresLength: true,
                        streaming: true
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "Body"
            },
            output: {
                type: "structure",
                members: {
                    DetectAnomalyResult: {
                        type: "structure",
                        members: {
                            Source: {
                                type: "structure",
                                members: {
                                    Type: {}
                                }
                            },
                            IsAnomalous: {
                                type: "boolean"
                            },
                            Confidence: {
                                type: "float"
                            }
                        }
                    }
                }
            }
        },
        ListDatasetEntries: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects/{projectName}/datasets/{datasetType}/entries"
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "DatasetType" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    DatasetType: {
                        location: "uri",
                        locationName: "datasetType"
                    },
                    Labeled: {
                        location: "querystring",
                        locationName: "labeled",
                        type: "boolean"
                    },
                    AnomalyClass: {
                        location: "querystring",
                        locationName: "anomalyClass"
                    },
                    BeforeCreationDate: {
                        location: "querystring",
                        locationName: "createdBefore",
                        type: "timestamp"
                    },
                    AfterCreationDate: {
                        location: "querystring",
                        locationName: "createdAfter",
                        type: "timestamp"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    SourceRefContains: {
                        location: "querystring",
                        locationName: "sourceRefContains"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetEntries: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListModels: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects/{projectName}/models"
            },
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Models: {
                        type: "list",
                        member: {
                            shape: "Sr"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProjects: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/projects"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Projects: {
                        type: "list",
                        member: {
                            shape: "S10"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/2020-11-20/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sm"
                    }
                }
            }
        },
        StartModel: {
            http: {
                requestUri: "/2020-11-20/projects/{projectName}/models/{modelVersion}/start",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "ModelVersion", "MinInferenceUnits" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    ModelVersion: {
                        location: "uri",
                        locationName: "modelVersion"
                    },
                    MinInferenceUnits: {
                        type: "integer"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        StopModel: {
            http: {
                requestUri: "/2020-11-20/projects/{projectName}/models/{modelVersion}/stop",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "ModelVersion" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    ModelVersion: {
                        location: "uri",
                        locationName: "modelVersion"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/2020-11-20/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/2020-11-20/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDatasetEntries: {
            http: {
                method: "PATCH",
                requestUri: "/2020-11-20/projects/{projectName}/datasets/{datasetType}/entries",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ProjectName", "DatasetType", "Changes" ],
                members: {
                    ProjectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    DatasetType: {
                        location: "uri",
                        locationName: "datasetType"
                    },
                    Changes: {
                        type: "blob"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        }
    },
    shapes: {
        Sc: {
            type: "structure",
            members: {
                DatasetType: {},
                CreationTimestamp: {
                    type: "timestamp"
                },
                Status: {},
                StatusMessage: {}
            }
        },
        Si: {
            type: "structure",
            required: [ "S3Location" ],
            members: {
                S3Location: {
                    type: "structure",
                    required: [ "Bucket" ],
                    members: {
                        Bucket: {},
                        Prefix: {}
                    }
                }
            }
        },
        Sm: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sr: {
            type: "structure",
            members: {
                CreationTimestamp: {
                    type: "timestamp"
                },
                ModelVersion: {},
                ModelArn: {},
                Description: {},
                Status: {},
                StatusMessage: {},
                Performance: {
                    shape: "Sw"
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                F1Score: {
                    type: "float"
                },
                Recall: {
                    type: "float"
                },
                Precision: {
                    type: "float"
                }
            }
        },
        S10: {
            type: "structure",
            members: {
                ProjectArn: {},
                ProjectName: {},
                CreationTimestamp: {
                    type: "timestamp"
                }
            }
        },
        S1g: {
            type: "structure",
            required: [ "Bucket", "Key" ],
            members: {
                Bucket: {},
                Key: {}
            }
        }
    },
    paginators: {
        ListDatasetEntries: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DatasetEntries"
        },
        ListModels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Models"
        },
        ListProjects: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Projects"
        }
    }
};

AWS.apiLoader.services["sagemakerfeaturestoreruntime"] = {};

AWS.SageMakerFeatureStoreRuntime = AWS.Service.defineService("sagemakerfeaturestoreruntime", [ "2020-07-01" ]);

AWS.apiLoader.services["sagemakerfeaturestoreruntime"]["2020-07-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-01",
        endpointPrefix: "featurestore-runtime.sagemaker",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon SageMaker Feature Store Runtime",
        serviceId: "SageMaker FeatureStore Runtime",
        signatureVersion: "v4",
        signingName: "sagemaker",
        uid: "sagemaker-featurestore-runtime-2020-07-01"
    },
    operations: {
        BatchGetRecord: {
            http: {
                requestUri: "/BatchGetRecord"
            },
            input: {
                type: "structure",
                required: [ "Identifiers" ],
                members: {
                    Identifiers: {
                        type: "list",
                        member: {
                            shape: "S3"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Records", "Errors", "UnprocessedIdentifiers" ],
                members: {
                    Records: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FeatureGroupName", "RecordIdentifierValueAsString", "Record" ],
                            members: {
                                FeatureGroupName: {},
                                RecordIdentifierValueAsString: {},
                                Record: {
                                    shape: "Sc"
                                }
                            }
                        }
                    },
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FeatureGroupName", "RecordIdentifierValueAsString", "ErrorCode", "ErrorMessage" ],
                            members: {
                                FeatureGroupName: {},
                                RecordIdentifierValueAsString: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    },
                    UnprocessedIdentifiers: {
                        type: "list",
                        member: {
                            shape: "S3"
                        }
                    }
                }
            }
        },
        DeleteRecord: {
            http: {
                method: "DELETE",
                requestUri: "/FeatureGroup/{FeatureGroupName}"
            },
            input: {
                type: "structure",
                required: [ "FeatureGroupName", "RecordIdentifierValueAsString", "EventTime" ],
                members: {
                    FeatureGroupName: {
                        location: "uri",
                        locationName: "FeatureGroupName"
                    },
                    RecordIdentifierValueAsString: {
                        location: "querystring",
                        locationName: "RecordIdentifierValueAsString"
                    },
                    EventTime: {
                        location: "querystring",
                        locationName: "EventTime"
                    }
                }
            }
        },
        GetRecord: {
            http: {
                method: "GET",
                requestUri: "/FeatureGroup/{FeatureGroupName}"
            },
            input: {
                type: "structure",
                required: [ "FeatureGroupName", "RecordIdentifierValueAsString" ],
                members: {
                    FeatureGroupName: {
                        location: "uri",
                        locationName: "FeatureGroupName"
                    },
                    RecordIdentifierValueAsString: {
                        location: "querystring",
                        locationName: "RecordIdentifierValueAsString"
                    },
                    FeatureNames: {
                        shape: "S7",
                        location: "querystring",
                        locationName: "FeatureName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Record: {
                        shape: "Sc"
                    }
                }
            }
        },
        PutRecord: {
            http: {
                method: "PUT",
                requestUri: "/FeatureGroup/{FeatureGroupName}"
            },
            input: {
                type: "structure",
                required: [ "FeatureGroupName", "Record" ],
                members: {
                    FeatureGroupName: {
                        location: "uri",
                        locationName: "FeatureGroupName"
                    },
                    Record: {
                        shape: "Sc"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "FeatureGroupName", "RecordIdentifiersValueAsString" ],
            members: {
                FeatureGroupName: {},
                RecordIdentifiersValueAsString: {
                    type: "list",
                    member: {}
                },
                FeatureNames: {
                    shape: "S7"
                }
            }
        },
        S7: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                required: [ "FeatureName", "ValueAsString" ],
                members: {
                    FeatureName: {},
                    ValueAsString: {}
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["customerprofiles"] = {};

AWS.CustomerProfiles = AWS.Service.defineService("customerprofiles", [ "2020-08-15" ]);

AWS.apiLoader.services["customerprofiles"]["2020-08-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-15",
        endpointPrefix: "profile",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Customer Profiles",
        serviceFullName: "Amazon Connect Customer Profiles",
        serviceId: "Customer Profiles",
        signatureVersion: "v4",
        signingName: "profile",
        uid: "customer-profiles-2020-08-15"
    },
    operations: {
        AddProfileKey: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/keys"
            },
            input: {
                type: "structure",
                required: [ "ProfileId", "KeyName", "Values", "DomainName" ],
                members: {
                    ProfileId: {},
                    KeyName: {},
                    Values: {
                        shape: "S4"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyName: {},
                    Values: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateDomain: {
            http: {
                requestUri: "/domains/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "DefaultExpirationDays" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    DefaultExpirationDays: {
                        type: "integer"
                    },
                    DefaultEncryptionKey: {},
                    DeadLetterQueueUrl: {},
                    Matching: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainName", "DefaultExpirationDays", "CreatedAt", "LastUpdatedAt" ],
                members: {
                    DomainName: {},
                    DefaultExpirationDays: {
                        type: "integer"
                    },
                    DefaultEncryptionKey: {},
                    DeadLetterQueueUrl: {},
                    Matching: {
                        shape: "Sh"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        CreateProfile: {
            http: {
                requestUri: "/domains/{DomainName}/profiles"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    AccountNumber: {},
                    AdditionalInformation: {},
                    PartyType: {},
                    BusinessName: {},
                    FirstName: {},
                    MiddleName: {},
                    LastName: {},
                    BirthDate: {},
                    Gender: {},
                    PhoneNumber: {},
                    MobilePhoneNumber: {},
                    HomePhoneNumber: {},
                    BusinessPhoneNumber: {},
                    EmailAddress: {},
                    PersonalEmailAddress: {},
                    BusinessEmailAddress: {},
                    Address: {
                        shape: "Sn"
                    },
                    ShippingAddress: {
                        shape: "Sn"
                    },
                    MailingAddress: {
                        shape: "Sn"
                    },
                    BillingAddress: {
                        shape: "Sn"
                    },
                    Attributes: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProfileId" ],
                members: {
                    ProfileId: {}
                }
            }
        },
        DeleteDomain: {
            http: {
                method: "DELETE",
                requestUri: "/domains/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Message" ],
                members: {
                    Message: {}
                }
            }
        },
        DeleteIntegration: {
            http: {
                requestUri: "/domains/{DomainName}/integrations/delete"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Uri" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Uri: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Message" ],
                members: {
                    Message: {}
                }
            }
        },
        DeleteProfile: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/delete"
            },
            input: {
                type: "structure",
                required: [ "ProfileId", "DomainName" ],
                members: {
                    ProfileId: {},
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Message: {}
                }
            }
        },
        DeleteProfileKey: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/keys/delete"
            },
            input: {
                type: "structure",
                required: [ "ProfileId", "KeyName", "Values", "DomainName" ],
                members: {
                    ProfileId: {},
                    KeyName: {},
                    Values: {
                        shape: "S4"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Message: {}
                }
            }
        },
        DeleteProfileObject: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/objects/delete"
            },
            input: {
                type: "structure",
                required: [ "ProfileId", "ProfileObjectUniqueKey", "ObjectTypeName", "DomainName" ],
                members: {
                    ProfileId: {},
                    ProfileObjectUniqueKey: {},
                    ObjectTypeName: {},
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Message: {}
                }
            }
        },
        DeleteProfileObjectType: {
            http: {
                method: "DELETE",
                requestUri: "/domains/{DomainName}/object-types/{ObjectTypeName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ObjectTypeName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ObjectTypeName: {
                        location: "uri",
                        locationName: "ObjectTypeName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Message" ],
                members: {
                    Message: {}
                }
            }
        },
        GetDomain: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainName", "CreatedAt", "LastUpdatedAt" ],
                members: {
                    DomainName: {},
                    DefaultExpirationDays: {
                        type: "integer"
                    },
                    DefaultEncryptionKey: {},
                    DeadLetterQueueUrl: {},
                    Stats: {
                        type: "structure",
                        members: {
                            ProfileCount: {
                                type: "long"
                            },
                            MeteringProfileCount: {
                                type: "long"
                            },
                            ObjectCount: {
                                type: "long"
                            },
                            TotalSize: {
                                type: "long"
                            }
                        }
                    },
                    Matching: {
                        shape: "Sh"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        GetIntegration: {
            http: {
                requestUri: "/domains/{DomainName}/integrations"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Uri" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Uri: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DomainName", "Uri", "ObjectTypeName", "CreatedAt", "LastUpdatedAt" ],
                members: {
                    DomainName: {},
                    Uri: {},
                    ObjectTypeName: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        GetMatches: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/matches"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MatchGenerationDate: {
                        type: "timestamp"
                    },
                    PotentialMatches: {
                        type: "integer"
                    },
                    Matches: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MatchId: {},
                                ProfileIds: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        GetProfileObjectType: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/object-types/{ObjectTypeName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ObjectTypeName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ObjectTypeName: {
                        location: "uri",
                        locationName: "ObjectTypeName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ObjectTypeName", "Description" ],
                members: {
                    ObjectTypeName: {},
                    Description: {},
                    TemplateId: {},
                    ExpirationDays: {
                        type: "integer"
                    },
                    EncryptionKey: {},
                    AllowProfileCreation: {
                        type: "boolean"
                    },
                    Fields: {
                        shape: "S1m"
                    },
                    Keys: {
                        shape: "S1p"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        GetProfileObjectTypeTemplate: {
            http: {
                method: "GET",
                requestUri: "/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "TemplateId" ],
                members: {
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateId: {},
                    SourceName: {},
                    SourceObject: {},
                    AllowProfileCreation: {
                        type: "boolean"
                    },
                    Fields: {
                        shape: "S1m"
                    },
                    Keys: {
                        shape: "S1p"
                    }
                }
            }
        },
        ListAccountIntegrations: {
            http: {
                requestUri: "/integrations"
            },
            input: {
                type: "structure",
                required: [ "Uri" ],
                members: {
                    Uri: {},
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        shape: "S1z"
                    },
                    NextToken: {}
                }
            }
        },
        ListDomains: {
            http: {
                method: "GET",
                requestUri: "/domains"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DomainName", "CreatedAt", "LastUpdatedAt" ],
                            members: {
                                DomainName: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                LastUpdatedAt: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListIntegrations: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/integrations"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        shape: "S1z"
                    },
                    NextToken: {}
                }
            }
        },
        ListProfileObjectTypeTemplates: {
            http: {
                method: "GET",
                requestUri: "/templates"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TemplateId: {},
                                SourceName: {},
                                SourceObject: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProfileObjectTypes: {
            http: {
                method: "GET",
                requestUri: "/domains/{DomainName}/object-types"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ObjectTypeName", "Description" ],
                            members: {
                                ObjectTypeName: {},
                                Description: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                LastUpdatedAt: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProfileObjects: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/objects"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ObjectTypeName", "ProfileId" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ObjectTypeName: {},
                    ProfileId: {},
                    ObjectFilter: {
                        type: "structure",
                        required: [ "KeyName", "Values" ],
                        members: {
                            KeyName: {},
                            Values: {
                                shape: "S4"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ObjectTypeName: {},
                                ProfileObjectUniqueKey: {},
                                Object: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        MergeProfiles: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/objects/merge"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "MainProfileId", "ProfileIdsToBeMerged" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MainProfileId: {},
                    ProfileIdsToBeMerged: {
                        type: "list",
                        member: {}
                    },
                    FieldSourceProfileIds: {
                        type: "structure",
                        members: {
                            AccountNumber: {},
                            AdditionalInformation: {},
                            PartyType: {},
                            BusinessName: {},
                            FirstName: {},
                            MiddleName: {},
                            LastName: {},
                            BirthDate: {},
                            Gender: {},
                            PhoneNumber: {},
                            MobilePhoneNumber: {},
                            HomePhoneNumber: {},
                            BusinessPhoneNumber: {},
                            EmailAddress: {},
                            PersonalEmailAddress: {},
                            BusinessEmailAddress: {},
                            Address: {},
                            ShippingAddress: {},
                            MailingAddress: {},
                            BillingAddress: {},
                            Attributes: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Message: {}
                }
            }
        },
        PutIntegration: {
            http: {
                method: "PUT",
                requestUri: "/domains/{DomainName}/integrations"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ObjectTypeName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Uri: {},
                    ObjectTypeName: {},
                    Tags: {
                        shape: "Sd"
                    },
                    FlowDefinition: {
                        type: "structure",
                        required: [ "FlowName", "KmsArn", "SourceFlowConfig", "Tasks", "TriggerConfig" ],
                        members: {
                            Description: {},
                            FlowName: {},
                            KmsArn: {},
                            SourceFlowConfig: {
                                type: "structure",
                                required: [ "ConnectorType", "SourceConnectorProperties" ],
                                members: {
                                    ConnectorProfileName: {},
                                    ConnectorType: {},
                                    IncrementalPullConfig: {
                                        type: "structure",
                                        members: {
                                            DatetimeTypeFieldName: {}
                                        }
                                    },
                                    SourceConnectorProperties: {
                                        type: "structure",
                                        members: {
                                            Marketo: {
                                                type: "structure",
                                                required: [ "Object" ],
                                                members: {
                                                    Object: {}
                                                }
                                            },
                                            S3: {
                                                type: "structure",
                                                required: [ "BucketName" ],
                                                members: {
                                                    BucketName: {},
                                                    BucketPrefix: {}
                                                }
                                            },
                                            Salesforce: {
                                                type: "structure",
                                                required: [ "Object" ],
                                                members: {
                                                    Object: {},
                                                    EnableDynamicFieldUpdate: {
                                                        type: "boolean"
                                                    },
                                                    IncludeDeletedRecords: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            ServiceNow: {
                                                type: "structure",
                                                required: [ "Object" ],
                                                members: {
                                                    Object: {}
                                                }
                                            },
                                            Zendesk: {
                                                type: "structure",
                                                required: [ "Object" ],
                                                members: {
                                                    Object: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            Tasks: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "SourceFields", "TaskType" ],
                                    members: {
                                        ConnectorOperator: {
                                            type: "structure",
                                            members: {
                                                Marketo: {},
                                                S3: {},
                                                Salesforce: {},
                                                ServiceNow: {},
                                                Zendesk: {}
                                            }
                                        },
                                        DestinationField: {},
                                        SourceFields: {
                                            type: "list",
                                            member: {}
                                        },
                                        TaskProperties: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        },
                                        TaskType: {}
                                    }
                                }
                            },
                            TriggerConfig: {
                                type: "structure",
                                required: [ "TriggerType" ],
                                members: {
                                    TriggerType: {},
                                    TriggerProperties: {
                                        type: "structure",
                                        members: {
                                            Scheduled: {
                                                type: "structure",
                                                required: [ "ScheduleExpression" ],
                                                members: {
                                                    ScheduleExpression: {},
                                                    DataPullMode: {},
                                                    ScheduleStartTime: {
                                                        type: "timestamp"
                                                    },
                                                    ScheduleEndTime: {
                                                        type: "timestamp"
                                                    },
                                                    Timezone: {},
                                                    ScheduleOffset: {
                                                        type: "long"
                                                    },
                                                    FirstExecutionFrom: {
                                                        type: "timestamp"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainName", "Uri", "ObjectTypeName", "CreatedAt", "LastUpdatedAt" ],
                members: {
                    DomainName: {},
                    Uri: {},
                    ObjectTypeName: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        PutProfileObject: {
            http: {
                method: "PUT",
                requestUri: "/domains/{DomainName}/profiles/objects"
            },
            input: {
                type: "structure",
                required: [ "ObjectTypeName", "Object", "DomainName" ],
                members: {
                    ObjectTypeName: {},
                    Object: {},
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProfileObjectUniqueKey: {}
                }
            }
        },
        PutProfileObjectType: {
            http: {
                method: "PUT",
                requestUri: "/domains/{DomainName}/object-types/{ObjectTypeName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ObjectTypeName", "Description" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ObjectTypeName: {
                        location: "uri",
                        locationName: "ObjectTypeName"
                    },
                    Description: {},
                    TemplateId: {},
                    ExpirationDays: {
                        type: "integer"
                    },
                    EncryptionKey: {},
                    AllowProfileCreation: {
                        type: "boolean"
                    },
                    Fields: {
                        shape: "S1m"
                    },
                    Keys: {
                        shape: "S1p"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ObjectTypeName", "Description" ],
                members: {
                    ObjectTypeName: {},
                    Description: {},
                    TemplateId: {},
                    ExpirationDays: {
                        type: "integer"
                    },
                    EncryptionKey: {},
                    AllowProfileCreation: {
                        type: "boolean"
                    },
                    Fields: {
                        shape: "S1m"
                    },
                    Keys: {
                        shape: "S1p"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        SearchProfiles: {
            http: {
                requestUri: "/domains/{DomainName}/profiles/search"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "KeyName", "Values" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    KeyName: {},
                    Values: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProfileId: {},
                                AccountNumber: {},
                                AdditionalInformation: {},
                                PartyType: {},
                                BusinessName: {},
                                FirstName: {},
                                MiddleName: {},
                                LastName: {},
                                BirthDate: {},
                                Gender: {},
                                PhoneNumber: {},
                                MobilePhoneNumber: {},
                                HomePhoneNumber: {},
                                BusinessPhoneNumber: {},
                                EmailAddress: {},
                                PersonalEmailAddress: {},
                                BusinessEmailAddress: {},
                                Address: {
                                    shape: "Sn"
                                },
                                ShippingAddress: {
                                    shape: "Sn"
                                },
                                MailingAddress: {
                                    shape: "Sn"
                                },
                                BillingAddress: {
                                    shape: "Sn"
                                },
                                Attributes: {
                                    shape: "So"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDomain: {
            http: {
                method: "PUT",
                requestUri: "/domains/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    DefaultExpirationDays: {
                        type: "integer"
                    },
                    DefaultEncryptionKey: {},
                    DeadLetterQueueUrl: {},
                    Matching: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainName", "CreatedAt", "LastUpdatedAt" ],
                members: {
                    DomainName: {},
                    DefaultExpirationDays: {
                        type: "integer"
                    },
                    DefaultEncryptionKey: {},
                    DeadLetterQueueUrl: {},
                    Matching: {
                        shape: "Sh"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        UpdateProfile: {
            http: {
                method: "PUT",
                requestUri: "/domains/{DomainName}/profiles"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "ProfileId" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ProfileId: {},
                    AdditionalInformation: {},
                    AccountNumber: {},
                    PartyType: {},
                    BusinessName: {},
                    FirstName: {},
                    MiddleName: {},
                    LastName: {},
                    BirthDate: {},
                    Gender: {},
                    PhoneNumber: {},
                    MobilePhoneNumber: {},
                    HomePhoneNumber: {},
                    BusinessPhoneNumber: {},
                    EmailAddress: {},
                    PersonalEmailAddress: {},
                    BusinessEmailAddress: {},
                    Address: {
                        shape: "S4j"
                    },
                    ShippingAddress: {
                        shape: "S4j"
                    },
                    MailingAddress: {
                        shape: "S4j"
                    },
                    BillingAddress: {
                        shape: "S4j"
                    },
                    Attributes: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProfileId" ],
                members: {
                    ProfileId: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {}
        },
        Sb: {
            type: "structure",
            required: [ "Enabled" ],
            members: {
                Enabled: {
                    type: "boolean"
                }
            }
        },
        Sd: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                }
            }
        },
        Sn: {
            type: "structure",
            members: {
                Address1: {},
                Address2: {},
                Address3: {},
                Address4: {},
                City: {},
                County: {},
                State: {},
                Province: {},
                Country: {},
                PostalCode: {}
            }
        },
        So: {
            type: "map",
            key: {},
            value: {}
        },
        S1m: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Source: {},
                    Target: {},
                    ContentType: {}
                }
            }
        },
        S1p: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {
                    type: "structure",
                    members: {
                        StandardIdentifiers: {
                            type: "list",
                            member: {}
                        },
                        FieldNames: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S1z: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DomainName", "Uri", "ObjectTypeName", "CreatedAt", "LastUpdatedAt" ],
                members: {
                    DomainName: {},
                    Uri: {},
                    ObjectTypeName: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        S4j: {
            type: "structure",
            members: {
                Address1: {},
                Address2: {},
                Address3: {},
                Address4: {},
                City: {},
                County: {},
                State: {},
                Province: {},
                Country: {},
                PostalCode: {}
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["auditmanager"] = {};

AWS.AuditManager = AWS.Service.defineService("auditmanager", [ "2017-07-25" ]);

AWS.apiLoader.services["auditmanager"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "auditmanager",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Audit Manager",
        serviceId: "AuditManager",
        signatureVersion: "v4",
        signingName: "auditmanager",
        uid: "auditmanager-2017-07-25"
    },
    operations: {
        AssociateAssessmentReportEvidenceFolder: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/associateToAssessmentReport"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "evidenceFolderId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    evidenceFolderId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchAssociateAssessmentReportEvidence: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/batchAssociateToAssessmentReport"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "evidenceFolderId", "evidenceIds" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    evidenceFolderId: {},
                    evidenceIds: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidenceIds: {
                        shape: "S5"
                    },
                    errors: {
                        shape: "S7"
                    }
                }
            }
        },
        BatchCreateDelegationByAssessment: {
            http: {
                requestUri: "/assessments/{assessmentId}/delegations"
            },
            input: {
                type: "structure",
                required: [ "createDelegationRequests", "assessmentId" ],
                members: {
                    createDelegationRequests: {
                        type: "list",
                        member: {
                            shape: "Sd"
                        }
                    },
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    delegations: {
                        shape: "Sj"
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createDelegationRequest: {
                                    shape: "Sd"
                                },
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchDeleteDelegationByAssessment: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/delegations"
            },
            input: {
                type: "structure",
                required: [ "delegationIds", "assessmentId" ],
                members: {
                    delegationIds: {
                        type: "list",
                        member: {}
                    },
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                delegationId: {},
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchDisassociateAssessmentReportEvidence: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/batchDisassociateFromAssessmentReport"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "evidenceFolderId", "evidenceIds" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    evidenceFolderId: {},
                    evidenceIds: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidenceIds: {
                        shape: "S5"
                    },
                    errors: {
                        shape: "S7"
                    }
                }
            }
        },
        BatchImportEvidenceToAssessmentControl: {
            http: {
                requestUri: "/assessments/{assessmentId}/controlSets/{controlSetId}/controls/{controlId}/evidence"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "controlId", "manualEvidence" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    controlId: {
                        location: "uri",
                        locationName: "controlId"
                    },
                    manualEvidence: {
                        type: "list",
                        member: {
                            shape: "S10"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                manualEvidence: {
                                    shape: "S10"
                                },
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        CreateAssessment: {
            http: {
                requestUri: "/assessments"
            },
            input: {
                type: "structure",
                required: [ "name", "assessmentReportsDestination", "scope", "roles", "frameworkId" ],
                members: {
                    name: {},
                    description: {},
                    assessmentReportsDestination: {
                        shape: "S17"
                    },
                    scope: {
                        shape: "S19"
                    },
                    roles: {
                        shape: "S1i"
                    },
                    frameworkId: {},
                    tags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessment: {
                        shape: "S1o"
                    }
                }
            }
        },
        CreateAssessmentFramework: {
            http: {
                requestUri: "/assessmentFrameworks"
            },
            input: {
                type: "structure",
                required: [ "name", "controlSets" ],
                members: {
                    name: {},
                    description: {},
                    complianceType: {},
                    controlSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name" ],
                            members: {
                                name: {},
                                controls: {
                                    shape: "S2j"
                                }
                            }
                        }
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    framework: {
                        shape: "S2m"
                    }
                }
            }
        },
        CreateAssessmentReport: {
            http: {
                requestUri: "/assessments/{assessmentId}/reports"
            },
            input: {
                type: "structure",
                required: [ "name", "assessmentId" ],
                members: {
                    name: {},
                    description: {},
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentReport: {
                        type: "structure",
                        members: {
                            id: {},
                            name: {},
                            description: {},
                            awsAccountId: {},
                            assessmentId: {},
                            assessmentName: {},
                            author: {},
                            status: {},
                            creationTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        CreateControl: {
            http: {
                requestUri: "/controls"
            },
            input: {
                type: "structure",
                required: [ "name", "controlMappingSources" ],
                members: {
                    name: {},
                    description: {},
                    testingInformation: {},
                    actionPlanTitle: {},
                    actionPlanInstructions: {},
                    controlMappingSources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                sourceName: {},
                                sourceDescription: {},
                                sourceSetUpOption: {},
                                sourceType: {},
                                sourceKeyword: {
                                    shape: "S33"
                                },
                                sourceFrequency: {},
                                troubleshootingText: {}
                            }
                        }
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    control: {
                        shape: "S2s"
                    }
                }
            }
        },
        DeleteAssessment: {
            http: {
                method: "DELETE",
                requestUri: "/assessments/{assessmentId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAssessmentFramework: {
            http: {
                method: "DELETE",
                requestUri: "/assessmentFrameworks/{frameworkId}"
            },
            input: {
                type: "structure",
                required: [ "frameworkId" ],
                members: {
                    frameworkId: {
                        location: "uri",
                        locationName: "frameworkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAssessmentFrameworkShare: {
            http: {
                method: "DELETE",
                requestUri: "/assessmentFrameworkShareRequests/{requestId}"
            },
            input: {
                type: "structure",
                required: [ "requestId", "requestType" ],
                members: {
                    requestId: {
                        location: "uri",
                        locationName: "requestId"
                    },
                    requestType: {
                        location: "querystring",
                        locationName: "requestType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAssessmentReport: {
            http: {
                method: "DELETE",
                requestUri: "/assessments/{assessmentId}/reports/{assessmentReportId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "assessmentReportId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    assessmentReportId: {
                        location: "uri",
                        locationName: "assessmentReportId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteControl: {
            http: {
                method: "DELETE",
                requestUri: "/controls/{controlId}"
            },
            input: {
                type: "structure",
                required: [ "controlId" ],
                members: {
                    controlId: {
                        location: "uri",
                        locationName: "controlId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterAccount: {
            http: {
                requestUri: "/account/deregisterAccount"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        DeregisterOrganizationAdminAccount: {
            http: {
                requestUri: "/account/deregisterOrganizationAdminAccount"
            },
            input: {
                type: "structure",
                members: {
                    adminAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateAssessmentReportEvidenceFolder: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/disassociateFromAssessmentReport"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "evidenceFolderId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    evidenceFolderId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccountStatus: {
            http: {
                method: "GET",
                requestUri: "/account/status"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        GetAssessment: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessment: {
                        shape: "S1o"
                    },
                    userRole: {
                        shape: "S1j"
                    }
                }
            }
        },
        GetAssessmentFramework: {
            http: {
                method: "GET",
                requestUri: "/assessmentFrameworks/{frameworkId}"
            },
            input: {
                type: "structure",
                required: [ "frameworkId" ],
                members: {
                    frameworkId: {
                        location: "uri",
                        locationName: "frameworkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    framework: {
                        shape: "S2m"
                    }
                }
            }
        },
        GetAssessmentReportUrl: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/reports/{assessmentReportId}/url"
            },
            input: {
                type: "structure",
                required: [ "assessmentReportId", "assessmentId" ],
                members: {
                    assessmentReportId: {
                        location: "uri",
                        locationName: "assessmentReportId"
                    },
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    preSignedUrl: {
                        type: "structure",
                        members: {
                            hyperlinkName: {},
                            link: {}
                        }
                    }
                }
            }
        },
        GetChangeLogs: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/changelogs"
            },
            input: {
                type: "structure",
                required: [ "assessmentId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "querystring",
                        locationName: "controlSetId"
                    },
                    controlId: {
                        location: "querystring",
                        locationName: "controlId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    changeLogs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                objectType: {},
                                objectName: {},
                                action: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                createdBy: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetControl: {
            http: {
                method: "GET",
                requestUri: "/controls/{controlId}"
            },
            input: {
                type: "structure",
                required: [ "controlId" ],
                members: {
                    controlId: {
                        location: "uri",
                        locationName: "controlId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    control: {
                        shape: "S2s"
                    }
                }
            }
        },
        GetDelegations: {
            http: {
                method: "GET",
                requestUri: "/delegations"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    delegations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                assessmentName: {},
                                assessmentId: {},
                                status: {},
                                roleArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                controlSetName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetEvidence: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}/evidence/{evidenceId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "evidenceFolderId", "evidenceId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    evidenceFolderId: {
                        location: "uri",
                        locationName: "evidenceFolderId"
                    },
                    evidenceId: {
                        location: "uri",
                        locationName: "evidenceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidence: {
                        shape: "S4s"
                    }
                }
            }
        },
        GetEvidenceByEvidenceFolder: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}/evidence"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "evidenceFolderId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    evidenceFolderId: {
                        location: "uri",
                        locationName: "evidenceFolderId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidence: {
                        type: "list",
                        member: {
                            shape: "S4s"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetEvidenceFolder: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/controlSets/{controlSetId}/evidenceFolders/{evidenceFolderId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "evidenceFolderId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    evidenceFolderId: {
                        location: "uri",
                        locationName: "evidenceFolderId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidenceFolder: {
                        shape: "S56"
                    }
                }
            }
        },
        GetEvidenceFoldersByAssessment: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/evidenceFolders"
            },
            input: {
                type: "structure",
                required: [ "assessmentId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidenceFolders: {
                        shape: "S5a"
                    },
                    nextToken: {}
                }
            }
        },
        GetEvidenceFoldersByAssessmentControl: {
            http: {
                method: "GET",
                requestUri: "/assessments/{assessmentId}/evidenceFolders-by-assessment-control/{controlSetId}/{controlId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "controlId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    controlId: {
                        location: "uri",
                        locationName: "controlId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    evidenceFolders: {
                        shape: "S5a"
                    },
                    nextToken: {}
                }
            }
        },
        GetOrganizationAdminAccount: {
            http: {
                method: "GET",
                requestUri: "/account/organizationAdminAccount"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    adminAccountId: {},
                    organizationId: {}
                }
            }
        },
        GetServicesInScope: {
            http: {
                method: "GET",
                requestUri: "/services"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    serviceMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                displayName: {},
                                description: {},
                                category: {}
                            }
                        }
                    }
                }
            }
        },
        GetSettings: {
            http: {
                method: "GET",
                requestUri: "/settings/{attribute}"
            },
            input: {
                type: "structure",
                required: [ "attribute" ],
                members: {
                    attribute: {
                        location: "uri",
                        locationName: "attribute"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    settings: {
                        shape: "S5n"
                    }
                }
            }
        },
        ListAssessmentFrameworkShareRequests: {
            http: {
                method: "GET",
                requestUri: "/assessmentFrameworkShareRequests"
            },
            input: {
                type: "structure",
                required: [ "requestType" ],
                members: {
                    requestType: {
                        location: "querystring",
                        locationName: "requestType"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentFrameworkShareRequests: {
                        type: "list",
                        member: {
                            shape: "S5u"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAssessmentFrameworks: {
            http: {
                method: "GET",
                requestUri: "/assessmentFrameworks"
            },
            input: {
                type: "structure",
                required: [ "frameworkType" ],
                members: {
                    frameworkType: {
                        location: "querystring",
                        locationName: "frameworkType"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    frameworkMetadataList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                id: {},
                                type: {},
                                name: {},
                                description: {},
                                logo: {},
                                complianceType: {},
                                controlsCount: {
                                    type: "integer"
                                },
                                controlSetsCount: {
                                    type: "integer"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAssessmentReports: {
            http: {
                method: "GET",
                requestUri: "/assessmentReports"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentReports: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                name: {},
                                description: {},
                                assessmentId: {},
                                assessmentName: {},
                                author: {},
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAssessments: {
            http: {
                method: "GET",
                requestUri: "/assessments"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                id: {},
                                complianceType: {},
                                status: {},
                                roles: {
                                    shape: "S1i"
                                },
                                delegations: {
                                    shape: "Sj"
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdated: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListControls: {
            http: {
                method: "GET",
                requestUri: "/controls"
            },
            input: {
                type: "structure",
                required: [ "controlType" ],
                members: {
                    controlType: {
                        location: "querystring",
                        locationName: "controlType"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    controlMetadataList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                id: {},
                                name: {},
                                controlSources: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListKeywordsForDataSource: {
            http: {
                method: "GET",
                requestUri: "/dataSourceKeywords"
            },
            input: {
                type: "structure",
                required: [ "source" ],
                members: {
                    source: {
                        location: "querystring",
                        locationName: "source"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    keywords: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        ListNotifications: {
            http: {
                method: "GET",
                requestUri: "/notifications"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    notifications: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                assessmentId: {},
                                assessmentName: {},
                                controlSetId: {},
                                controlSetName: {},
                                description: {},
                                eventTime: {
                                    type: "timestamp"
                                },
                                source: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        RegisterAccount: {
            http: {
                requestUri: "/account/registerAccount"
            },
            input: {
                type: "structure",
                members: {
                    kmsKey: {},
                    delegatedAdminAccount: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        RegisterOrganizationAdminAccount: {
            http: {
                requestUri: "/account/registerOrganizationAdminAccount"
            },
            input: {
                type: "structure",
                required: [ "adminAccountId" ],
                members: {
                    adminAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    adminAccountId: {},
                    organizationId: {}
                }
            }
        },
        StartAssessmentFrameworkShare: {
            http: {
                requestUri: "/assessmentFrameworks/{frameworkId}/shareRequests"
            },
            input: {
                type: "structure",
                required: [ "frameworkId", "destinationAccount", "destinationRegion" ],
                members: {
                    frameworkId: {
                        location: "uri",
                        locationName: "frameworkId"
                    },
                    destinationAccount: {},
                    destinationRegion: {},
                    comment: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentFrameworkShareRequest: {
                        shape: "S5u"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAssessment: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "scope" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    assessmentName: {},
                    assessmentDescription: {},
                    scope: {
                        shape: "S19"
                    },
                    assessmentReportsDestination: {
                        shape: "S17"
                    },
                    roles: {
                        shape: "S1i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assessment: {
                        shape: "S1o"
                    }
                }
            }
        },
        UpdateAssessmentControl: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/controlSets/{controlSetId}/controls/{controlId}"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "controlId" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    controlId: {
                        location: "uri",
                        locationName: "controlId"
                    },
                    controlStatus: {},
                    commentBody: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    control: {
                        shape: "S22"
                    }
                }
            }
        },
        UpdateAssessmentControlSetStatus: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/controlSets/{controlSetId}/status"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "controlSetId", "status", "comment" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    controlSetId: {
                        location: "uri",
                        locationName: "controlSetId"
                    },
                    status: {},
                    comment: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    controlSet: {
                        shape: "S1y"
                    }
                }
            }
        },
        UpdateAssessmentFramework: {
            http: {
                method: "PUT",
                requestUri: "/assessmentFrameworks/{frameworkId}"
            },
            input: {
                type: "structure",
                required: [ "frameworkId", "name", "controlSets" ],
                members: {
                    frameworkId: {
                        location: "uri",
                        locationName: "frameworkId"
                    },
                    name: {},
                    description: {},
                    complianceType: {},
                    controlSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name" ],
                            members: {
                                id: {},
                                name: {},
                                controls: {
                                    shape: "S2j"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    framework: {
                        shape: "S2m"
                    }
                }
            }
        },
        UpdateAssessmentFrameworkShare: {
            http: {
                method: "PUT",
                requestUri: "/assessmentFrameworkShareRequests/{requestId}"
            },
            input: {
                type: "structure",
                required: [ "requestId", "requestType", "action" ],
                members: {
                    requestId: {
                        location: "uri",
                        locationName: "requestId"
                    },
                    requestType: {},
                    action: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentFrameworkShareRequest: {
                        shape: "S5u"
                    }
                }
            }
        },
        UpdateAssessmentStatus: {
            http: {
                method: "PUT",
                requestUri: "/assessments/{assessmentId}/status"
            },
            input: {
                type: "structure",
                required: [ "assessmentId", "status" ],
                members: {
                    assessmentId: {
                        location: "uri",
                        locationName: "assessmentId"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    assessment: {
                        shape: "S1o"
                    }
                }
            }
        },
        UpdateControl: {
            http: {
                method: "PUT",
                requestUri: "/controls/{controlId}"
            },
            input: {
                type: "structure",
                required: [ "controlId", "name", "controlMappingSources" ],
                members: {
                    controlId: {
                        location: "uri",
                        locationName: "controlId"
                    },
                    name: {},
                    description: {},
                    testingInformation: {},
                    actionPlanTitle: {},
                    actionPlanInstructions: {},
                    controlMappingSources: {
                        shape: "S2x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    control: {
                        shape: "S2s"
                    }
                }
            }
        },
        UpdateSettings: {
            http: {
                method: "PUT",
                requestUri: "/settings"
            },
            input: {
                type: "structure",
                members: {
                    snsTopic: {},
                    defaultAssessmentReportsDestination: {
                        shape: "S17"
                    },
                    defaultProcessOwners: {
                        shape: "S1i"
                    },
                    kmsKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    settings: {
                        shape: "S5n"
                    }
                }
            }
        },
        ValidateAssessmentReportIntegrity: {
            http: {
                requestUri: "/assessmentReports/integrity"
            },
            input: {
                type: "structure",
                required: [ "s3RelativePath" ],
                members: {
                    s3RelativePath: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    signatureValid: {
                        type: "boolean"
                    },
                    signatureAlgorithm: {},
                    signatureDateTime: {},
                    signatureKeyId: {},
                    validationErrors: {
                        type: "list",
                        member: {}
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {}
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    evidenceId: {},
                    errorCode: {},
                    errorMessage: {}
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                comment: {},
                controlSetId: {},
                roleArn: {},
                roleType: {}
            }
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    assessmentName: {},
                    assessmentId: {},
                    status: {},
                    roleArn: {},
                    roleType: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastUpdated: {
                        type: "timestamp"
                    },
                    controlSetId: {},
                    comment: {},
                    createdBy: {}
                }
            }
        },
        S10: {
            type: "structure",
            members: {
                s3ResourcePath: {}
            }
        },
        S17: {
            type: "structure",
            members: {
                destinationType: {},
                destination: {}
            }
        },
        S19: {
            type: "structure",
            members: {
                awsAccounts: {
                    type: "list",
                    member: {
                        shape: "S1b"
                    }
                },
                awsServices: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            serviceName: {}
                        }
                    }
                }
            }
        },
        S1b: {
            type: "structure",
            members: {
                id: {},
                emailAddress: {},
                name: {}
            }
        },
        S1i: {
            type: "list",
            member: {
                shape: "S1j"
            }
        },
        S1j: {
            type: "structure",
            members: {
                roleType: {},
                roleArn: {}
            }
        },
        S1k: {
            type: "map",
            key: {},
            value: {}
        },
        S1o: {
            type: "structure",
            members: {
                arn: {},
                awsAccount: {
                    shape: "S1b"
                },
                metadata: {
                    type: "structure",
                    members: {
                        name: {},
                        id: {},
                        description: {},
                        complianceType: {},
                        status: {},
                        assessmentReportsDestination: {
                            shape: "S17"
                        },
                        scope: {
                            shape: "S19"
                        },
                        roles: {
                            shape: "S1i"
                        },
                        delegations: {
                            shape: "Sj"
                        },
                        creationTime: {
                            type: "timestamp"
                        },
                        lastUpdated: {
                            type: "timestamp"
                        }
                    }
                },
                framework: {
                    type: "structure",
                    members: {
                        id: {},
                        arn: {},
                        metadata: {
                            type: "structure",
                            members: {
                                name: {},
                                description: {},
                                logo: {},
                                complianceType: {}
                            }
                        },
                        controlSets: {
                            type: "list",
                            member: {
                                shape: "S1y"
                            }
                        }
                    }
                },
                tags: {
                    shape: "S1k"
                }
            }
        },
        S1y: {
            type: "structure",
            members: {
                id: {},
                description: {},
                status: {},
                roles: {
                    shape: "S1i"
                },
                controls: {
                    type: "list",
                    member: {
                        shape: "S22"
                    }
                },
                delegations: {
                    shape: "Sj"
                },
                systemEvidenceCount: {
                    type: "integer"
                },
                manualEvidenceCount: {
                    type: "integer"
                }
            }
        },
        S22: {
            type: "structure",
            members: {
                id: {},
                name: {},
                description: {},
                status: {},
                response: {},
                comments: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            authorName: {},
                            commentBody: {},
                            postedDate: {
                                type: "timestamp"
                            }
                        }
                    }
                },
                evidenceSources: {
                    type: "list",
                    member: {}
                },
                evidenceCount: {
                    type: "integer"
                },
                assessmentReportEvidenceCount: {
                    type: "integer"
                }
            }
        },
        S2j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {}
                }
            }
        },
        S2m: {
            type: "structure",
            members: {
                arn: {},
                id: {},
                name: {},
                type: {},
                complianceType: {},
                description: {},
                logo: {},
                controlSources: {},
                controlSets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            id: {},
                            name: {},
                            controls: {
                                type: "list",
                                member: {
                                    shape: "S2s"
                                }
                            }
                        }
                    }
                },
                createdAt: {
                    type: "timestamp"
                },
                lastUpdatedAt: {
                    type: "timestamp"
                },
                createdBy: {},
                lastUpdatedBy: {},
                tags: {
                    shape: "S1k"
                }
            }
        },
        S2s: {
            type: "structure",
            members: {
                arn: {},
                id: {},
                type: {},
                name: {},
                description: {},
                testingInformation: {},
                actionPlanTitle: {},
                actionPlanInstructions: {},
                controlSources: {},
                controlMappingSources: {
                    shape: "S2x"
                },
                createdAt: {
                    type: "timestamp"
                },
                lastUpdatedAt: {
                    type: "timestamp"
                },
                createdBy: {},
                lastUpdatedBy: {},
                tags: {
                    shape: "S1k"
                }
            }
        },
        S2x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    sourceId: {},
                    sourceName: {},
                    sourceDescription: {},
                    sourceSetUpOption: {},
                    sourceType: {},
                    sourceKeyword: {
                        shape: "S33"
                    },
                    sourceFrequency: {},
                    troubleshootingText: {}
                }
            }
        },
        S33: {
            type: "structure",
            members: {
                keywordInputType: {},
                keywordValue: {}
            }
        },
        S4s: {
            type: "structure",
            members: {
                dataSource: {},
                evidenceAwsAccountId: {},
                time: {
                    type: "timestamp"
                },
                eventSource: {},
                eventName: {},
                evidenceByType: {},
                resourcesIncluded: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            arn: {},
                            value: {}
                        }
                    }
                },
                attributes: {
                    type: "map",
                    key: {},
                    value: {}
                },
                iamId: {},
                complianceCheck: {},
                awsOrganization: {},
                awsAccountId: {},
                evidenceFolderId: {},
                id: {},
                assessmentReportSelection: {}
            }
        },
        S56: {
            type: "structure",
            members: {
                name: {},
                date: {
                    type: "timestamp"
                },
                assessmentId: {},
                controlSetId: {},
                controlId: {},
                id: {},
                dataSource: {},
                author: {},
                totalEvidence: {
                    type: "integer"
                },
                assessmentReportSelectionCount: {
                    type: "integer"
                },
                controlName: {},
                evidenceResourcesIncludedCount: {
                    type: "integer"
                },
                evidenceByTypeConfigurationDataCount: {
                    type: "integer"
                },
                evidenceByTypeManualCount: {
                    type: "integer"
                },
                evidenceByTypeComplianceCheckCount: {
                    type: "integer"
                },
                evidenceByTypeComplianceCheckIssuesCount: {
                    type: "integer"
                },
                evidenceByTypeUserActivityCount: {
                    type: "integer"
                },
                evidenceAwsServiceSourceCount: {
                    type: "integer"
                }
            }
        },
        S5a: {
            type: "list",
            member: {
                shape: "S56"
            }
        },
        S5n: {
            type: "structure",
            members: {
                isAwsOrgEnabled: {
                    type: "boolean"
                },
                snsTopic: {},
                defaultAssessmentReportsDestination: {
                    shape: "S17"
                },
                defaultProcessOwners: {
                    shape: "S1i"
                },
                kmsKey: {}
            }
        },
        S5u: {
            type: "structure",
            members: {
                id: {},
                frameworkId: {},
                frameworkName: {},
                frameworkDescription: {},
                status: {},
                sourceAccount: {},
                destinationAccount: {},
                destinationRegion: {},
                expirationTime: {
                    type: "timestamp"
                },
                creationTime: {
                    type: "timestamp"
                },
                lastUpdated: {
                    type: "timestamp"
                },
                comment: {},
                standardControlsCount: {
                    type: "integer"
                },
                customControlsCount: {
                    type: "integer"
                },
                complianceType: {}
            }
        }
    },
    paginators: {
        GetChangeLogs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetDelegations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetEvidenceByEvidenceFolder: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetEvidenceFoldersByAssessment: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetEvidenceFoldersByAssessmentControl: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAssessmentFrameworkShareRequests: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAssessmentFrameworks: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAssessmentReports: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAssessments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListControls: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListKeywordsForDataSource: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListNotifications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["emrcontainers"] = {};

AWS.EMRcontainers = AWS.Service.defineService("emrcontainers", [ "2020-10-01" ]);

AWS.apiLoader.services["emrcontainers"]["2020-10-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-10-01",
        endpointPrefix: "emr-containers",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon EMR Containers",
        serviceId: "EMR containers",
        signatureVersion: "v4",
        signingName: "emr-containers",
        uid: "emr-containers-2020-10-01"
    },
    operations: {
        CancelJobRun: {
            http: {
                method: "DELETE",
                requestUri: "/virtualclusters/{virtualClusterId}/jobruns/{jobRunId}"
            },
            input: {
                type: "structure",
                required: [ "id", "virtualClusterId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "jobRunId"
                    },
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    virtualClusterId: {}
                }
            }
        },
        CreateManagedEndpoint: {
            http: {
                requestUri: "/virtualclusters/{virtualClusterId}/endpoints"
            },
            input: {
                type: "structure",
                required: [ "name", "virtualClusterId", "type", "releaseLabel", "executionRoleArn", "clientToken" ],
                members: {
                    name: {},
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    },
                    type: {},
                    releaseLabel: {},
                    executionRoleArn: {},
                    certificateArn: {
                        deprecated: true,
                        deprecatedMessage: "Customer provided certificate-arn is deprecated and would be removed in future."
                    },
                    configurationOverrides: {
                        shape: "Sa"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    virtualClusterId: {}
                }
            }
        },
        CreateVirtualCluster: {
            http: {
                requestUri: "/virtualclusters"
            },
            input: {
                type: "structure",
                required: [ "name", "containerProvider", "clientToken" ],
                members: {
                    name: {},
                    containerProvider: {
                        shape: "St"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    name: {},
                    arn: {}
                }
            }
        },
        DeleteManagedEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/virtualclusters/{virtualClusterId}/endpoints/{endpointId}"
            },
            input: {
                type: "structure",
                required: [ "id", "virtualClusterId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "endpointId"
                    },
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    virtualClusterId: {}
                }
            }
        },
        DeleteVirtualCluster: {
            http: {
                method: "DELETE",
                requestUri: "/virtualclusters/{virtualClusterId}"
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {}
                }
            }
        },
        DescribeJobRun: {
            http: {
                method: "GET",
                requestUri: "/virtualclusters/{virtualClusterId}/jobruns/{jobRunId}"
            },
            input: {
                type: "structure",
                required: [ "id", "virtualClusterId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "jobRunId"
                    },
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobRun: {
                        shape: "S17"
                    }
                }
            }
        },
        DescribeManagedEndpoint: {
            http: {
                method: "GET",
                requestUri: "/virtualclusters/{virtualClusterId}/endpoints/{endpointId}"
            },
            input: {
                type: "structure",
                required: [ "id", "virtualClusterId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "endpointId"
                    },
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoint: {
                        shape: "S1l"
                    }
                }
            }
        },
        DescribeVirtualCluster: {
            http: {
                method: "GET",
                requestUri: "/virtualclusters/{virtualClusterId}"
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualCluster: {
                        shape: "S1s"
                    }
                }
            }
        },
        ListJobRuns: {
            http: {
                method: "GET",
                requestUri: "/virtualclusters/{virtualClusterId}/jobruns"
            },
            input: {
                type: "structure",
                required: [ "virtualClusterId" ],
                members: {
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    },
                    createdBefore: {
                        shape: "S1g",
                        location: "querystring",
                        locationName: "createdBefore"
                    },
                    createdAfter: {
                        shape: "S1g",
                        location: "querystring",
                        locationName: "createdAfter"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    states: {
                        location: "querystring",
                        locationName: "states",
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobRuns: {
                        type: "list",
                        member: {
                            shape: "S17"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListManagedEndpoints: {
            http: {
                method: "GET",
                requestUri: "/virtualclusters/{virtualClusterId}/endpoints"
            },
            input: {
                type: "structure",
                required: [ "virtualClusterId" ],
                members: {
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    },
                    createdBefore: {
                        shape: "S1g",
                        location: "querystring",
                        locationName: "createdBefore"
                    },
                    createdAfter: {
                        shape: "S1g",
                        location: "querystring",
                        locationName: "createdAfter"
                    },
                    types: {
                        location: "querystring",
                        locationName: "types",
                        type: "list",
                        member: {}
                    },
                    states: {
                        location: "querystring",
                        locationName: "states",
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoints: {
                        type: "list",
                        member: {
                            shape: "S1l"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        ListVirtualClusters: {
            http: {
                method: "GET",
                requestUri: "/virtualclusters"
            },
            input: {
                type: "structure",
                members: {
                    containerProviderId: {
                        location: "querystring",
                        locationName: "containerProviderId"
                    },
                    containerProviderType: {
                        location: "querystring",
                        locationName: "containerProviderType"
                    },
                    createdAfter: {
                        shape: "S1g",
                        location: "querystring",
                        locationName: "createdAfter"
                    },
                    createdBefore: {
                        shape: "S1g",
                        location: "querystring",
                        locationName: "createdBefore"
                    },
                    states: {
                        location: "querystring",
                        locationName: "states",
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualClusters: {
                        type: "list",
                        member: {
                            shape: "S1s"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        StartJobRun: {
            http: {
                requestUri: "/virtualclusters/{virtualClusterId}/jobruns"
            },
            input: {
                type: "structure",
                required: [ "virtualClusterId", "clientToken", "executionRoleArn", "releaseLabel", "jobDriver" ],
                members: {
                    name: {},
                    virtualClusterId: {
                        location: "uri",
                        locationName: "virtualClusterId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    executionRoleArn: {},
                    releaseLabel: {},
                    jobDriver: {
                        shape: "S1a"
                    },
                    configurationOverrides: {
                        shape: "Sa"
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    name: {},
                    arn: {},
                    virtualClusterId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sa: {
            type: "structure",
            members: {
                applicationConfiguration: {
                    shape: "Sb"
                },
                monitoringConfiguration: {
                    type: "structure",
                    members: {
                        persistentAppUI: {},
                        cloudWatchMonitoringConfiguration: {
                            type: "structure",
                            required: [ "logGroupName" ],
                            members: {
                                logGroupName: {},
                                logStreamNamePrefix: {}
                            }
                        },
                        s3MonitoringConfiguration: {
                            type: "structure",
                            required: [ "logUri" ],
                            members: {
                                logUri: {}
                            }
                        }
                    }
                }
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "classification" ],
                members: {
                    classification: {},
                    properties: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    configurations: {
                        shape: "Sb"
                    }
                }
            }
        },
        Sn: {
            type: "map",
            key: {},
            value: {}
        },
        St: {
            type: "structure",
            required: [ "type", "id" ],
            members: {
                type: {},
                id: {},
                info: {
                    type: "structure",
                    members: {
                        eksInfo: {
                            type: "structure",
                            members: {
                                namespace: {}
                            }
                        }
                    },
                    union: true
                }
            }
        },
        S17: {
            type: "structure",
            members: {
                id: {},
                name: {},
                virtualClusterId: {},
                arn: {},
                state: {},
                clientToken: {},
                executionRoleArn: {},
                releaseLabel: {},
                configurationOverrides: {
                    shape: "Sa"
                },
                jobDriver: {
                    shape: "S1a"
                },
                createdAt: {
                    shape: "S1g"
                },
                createdBy: {},
                finishedAt: {
                    shape: "S1g"
                },
                stateDetails: {},
                failureReason: {},
                tags: {
                    shape: "Sn"
                }
            }
        },
        S1a: {
            type: "structure",
            members: {
                sparkSubmitJobDriver: {
                    type: "structure",
                    required: [ "entryPoint" ],
                    members: {
                        entryPoint: {
                            type: "string",
                            sensitive: true
                        },
                        entryPointArguments: {
                            type: "list",
                            member: {
                                type: "string",
                                sensitive: true
                            }
                        },
                        sparkSubmitParameters: {
                            type: "string",
                            sensitive: true
                        }
                    }
                }
            }
        },
        S1g: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1l: {
            type: "structure",
            members: {
                id: {},
                name: {},
                arn: {},
                virtualClusterId: {},
                type: {},
                state: {},
                releaseLabel: {},
                executionRoleArn: {},
                certificateArn: {
                    deprecated: true,
                    deprecatedMessage: "Customer provided certificate-arn is deprecated and would be removed in future."
                },
                certificateAuthority: {
                    type: "structure",
                    members: {
                        certificateArn: {},
                        certificateData: {}
                    }
                },
                configurationOverrides: {
                    shape: "Sa"
                },
                serverUrl: {},
                createdAt: {
                    shape: "S1g"
                },
                securityGroup: {},
                subnetIds: {
                    type: "list",
                    member: {}
                },
                stateDetails: {},
                failureReason: {},
                tags: {
                    shape: "Sn"
                }
            }
        },
        S1s: {
            type: "structure",
            members: {
                id: {},
                name: {},
                arn: {},
                state: {},
                containerProvider: {
                    shape: "St"
                },
                createdAt: {
                    shape: "S1g"
                },
                tags: {
                    shape: "Sn"
                }
            }
        }
    },
    paginators: {
        ListJobRuns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "jobRuns"
        },
        ListManagedEndpoints: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "endpoints"
        },
        ListVirtualClusters: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "virtualClusters"
        }
    }
};

AWS.apiLoader.services["healthlake"] = {};

AWS.HealthLake = AWS.Service.defineService("healthlake", [ "2017-07-01" ]);

AWS.apiLoader.services["healthlake"]["2017-07-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-01",
        endpointPrefix: "healthlake",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "HealthLake",
        serviceFullName: "Amazon HealthLake",
        serviceId: "HealthLake",
        signatureVersion: "v4",
        signingName: "healthlake",
        targetPrefix: "HealthLake",
        uid: "healthlake-2017-07-01"
    },
    operations: {
        CreateFHIRDatastore: {
            input: {
                type: "structure",
                required: [ "DatastoreTypeVersion" ],
                members: {
                    DatastoreName: {},
                    DatastoreTypeVersion: {},
                    SseConfiguration: {
                        shape: "S4"
                    },
                    PreloadDataConfig: {
                        shape: "S8"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DatastoreId", "DatastoreArn", "DatastoreStatus", "DatastoreEndpoint" ],
                members: {
                    DatastoreId: {},
                    DatastoreArn: {},
                    DatastoreStatus: {},
                    DatastoreEndpoint: {}
                }
            }
        },
        DeleteFHIRDatastore: {
            input: {
                type: "structure",
                members: {
                    DatastoreId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DatastoreId", "DatastoreArn", "DatastoreStatus", "DatastoreEndpoint" ],
                members: {
                    DatastoreId: {},
                    DatastoreArn: {},
                    DatastoreStatus: {},
                    DatastoreEndpoint: {}
                }
            }
        },
        DescribeFHIRDatastore: {
            input: {
                type: "structure",
                members: {
                    DatastoreId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DatastoreProperties" ],
                members: {
                    DatastoreProperties: {
                        shape: "So"
                    }
                }
            }
        },
        DescribeFHIRExportJob: {
            input: {
                type: "structure",
                required: [ "DatastoreId", "JobId" ],
                members: {
                    DatastoreId: {},
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ExportJobProperties" ],
                members: {
                    ExportJobProperties: {
                        shape: "Su"
                    }
                }
            }
        },
        DescribeFHIRImportJob: {
            input: {
                type: "structure",
                required: [ "DatastoreId", "JobId" ],
                members: {
                    DatastoreId: {},
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ImportJobProperties" ],
                members: {
                    ImportJobProperties: {
                        shape: "S14"
                    }
                }
            }
        },
        ListFHIRDatastores: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            DatastoreName: {},
                            DatastoreStatus: {},
                            CreatedBefore: {
                                type: "timestamp"
                            },
                            CreatedAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DatastorePropertiesList" ],
                members: {
                    DatastorePropertiesList: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFHIRExportJobs: {
            input: {
                type: "structure",
                required: [ "DatastoreId" ],
                members: {
                    DatastoreId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    JobName: {},
                    JobStatus: {},
                    SubmittedBefore: {
                        type: "timestamp"
                    },
                    SubmittedAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ExportJobPropertiesList" ],
                members: {
                    ExportJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFHIRImportJobs: {
            input: {
                type: "structure",
                required: [ "DatastoreId" ],
                members: {
                    DatastoreId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    JobName: {},
                    JobStatus: {},
                    SubmittedBefore: {
                        type: "timestamp"
                    },
                    SubmittedAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ImportJobPropertiesList" ],
                members: {
                    ImportJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S14"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        StartFHIRExportJob: {
            input: {
                type: "structure",
                required: [ "OutputDataConfig", "DatastoreId", "DataAccessRoleArn", "ClientToken" ],
                members: {
                    JobName: {},
                    OutputDataConfig: {
                        shape: "Sx"
                    },
                    DatastoreId: {},
                    DataAccessRoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobId", "JobStatus" ],
                members: {
                    JobId: {},
                    JobStatus: {},
                    DatastoreId: {}
                }
            }
        },
        StartFHIRImportJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "JobOutputDataConfig", "DatastoreId", "DataAccessRoleArn", "ClientToken" ],
                members: {
                    JobName: {},
                    InputDataConfig: {
                        shape: "S15"
                    },
                    JobOutputDataConfig: {
                        shape: "Sx"
                    },
                    DatastoreId: {},
                    DataAccessRoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobId", "JobStatus" ],
                members: {
                    JobId: {},
                    JobStatus: {},
                    DatastoreId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "KmsEncryptionConfig" ],
            members: {
                KmsEncryptionConfig: {
                    type: "structure",
                    required: [ "CmkType" ],
                    members: {
                        CmkType: {},
                        KmsKeyId: {}
                    }
                }
            }
        },
        S8: {
            type: "structure",
            required: [ "PreloadDataType" ],
            members: {
                PreloadDataType: {}
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        So: {
            type: "structure",
            required: [ "DatastoreId", "DatastoreArn", "DatastoreStatus", "DatastoreTypeVersion", "DatastoreEndpoint" ],
            members: {
                DatastoreId: {},
                DatastoreArn: {},
                DatastoreName: {},
                DatastoreStatus: {},
                CreatedAt: {
                    type: "timestamp"
                },
                DatastoreTypeVersion: {},
                DatastoreEndpoint: {},
                SseConfiguration: {
                    shape: "S4"
                },
                PreloadDataConfig: {
                    shape: "S8"
                }
            }
        },
        Su: {
            type: "structure",
            required: [ "JobId", "JobStatus", "SubmitTime", "DatastoreId", "OutputDataConfig" ],
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                DatastoreId: {},
                OutputDataConfig: {
                    shape: "Sx"
                },
                DataAccessRoleArn: {},
                Message: {}
            }
        },
        Sx: {
            type: "structure",
            members: {
                S3Configuration: {
                    type: "structure",
                    required: [ "S3Uri", "KmsKeyId" ],
                    members: {
                        S3Uri: {},
                        KmsKeyId: {}
                    }
                }
            },
            union: true
        },
        S14: {
            type: "structure",
            required: [ "JobId", "JobStatus", "SubmitTime", "DatastoreId", "InputDataConfig" ],
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                DatastoreId: {},
                InputDataConfig: {
                    shape: "S15"
                },
                JobOutputDataConfig: {
                    shape: "Sx"
                },
                DataAccessRoleArn: {},
                Message: {}
            }
        },
        S15: {
            type: "structure",
            members: {
                S3Uri: {}
            },
            union: true
        }
    },
    paginators: {
        ListFHIRDatastores: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListFHIRExportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListFHIRImportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["sagemakeredge"] = {};

AWS.SagemakerEdge = AWS.Service.defineService("sagemakeredge", [ "2020-09-23" ]);

AWS.apiLoader.services["sagemakeredge"]["2020-09-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-09-23",
        endpointPrefix: "edge.sagemaker",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Sagemaker Edge Manager",
        serviceId: "Sagemaker Edge",
        signatureVersion: "v4",
        signingName: "sagemaker",
        uid: "sagemaker-edge-2020-09-23"
    },
    operations: {
        GetDeviceRegistration: {
            http: {
                requestUri: "/GetDeviceRegistration"
            },
            input: {
                type: "structure",
                required: [ "DeviceName", "DeviceFleetName" ],
                members: {
                    DeviceName: {},
                    DeviceFleetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceRegistration: {},
                    CacheTTL: {}
                }
            }
        },
        SendHeartbeat: {
            http: {
                requestUri: "/SendHeartbeat"
            },
            input: {
                type: "structure",
                required: [ "AgentVersion", "DeviceName", "DeviceFleetName" ],
                members: {
                    AgentMetrics: {
                        shape: "S8"
                    },
                    Models: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModelName: {},
                                ModelVersion: {},
                                LatestSampleTime: {
                                    type: "timestamp"
                                },
                                LatestInference: {
                                    type: "timestamp"
                                },
                                ModelMetrics: {
                                    shape: "S8"
                                }
                            }
                        }
                    },
                    AgentVersion: {},
                    DeviceName: {},
                    DeviceFleetName: {}
                }
            }
        }
    },
    shapes: {
        S8: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Dimension: {},
                    MetricName: {},
                    Value: {
                        type: "double"
                    },
                    Timestamp: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["amp"] = {};

AWS.Amp = AWS.Service.defineService("amp", [ "2020-08-01" ]);

AWS.apiLoader.services["amp"]["2020-08-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-01",
        endpointPrefix: "aps",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Prometheus Service",
        serviceId: "amp",
        signatureVersion: "v4",
        signingName: "aps",
        uid: "amp-2020-08-01"
    },
    operations: {
        CreateAlertManagerDefinition: {
            http: {
                requestUri: "/workspaces/{workspaceId}/alertmanager/definition",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "data", "workspaceId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    data: {
                        type: "blob"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {
                        shape: "S6"
                    }
                }
            },
            idempotent: true
        },
        CreateRuleGroupsNamespace: {
            http: {
                requestUri: "/workspaces/{workspaceId}/rulegroupsnamespaces",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "data", "name", "workspaceId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    data: {
                        type: "blob"
                    },
                    name: {},
                    tags: {
                        shape: "Sc"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "name", "status" ],
                members: {
                    arn: {},
                    name: {},
                    status: {
                        shape: "Sh"
                    },
                    tags: {
                        shape: "Sc"
                    }
                }
            },
            idempotent: true
        },
        CreateWorkspace: {
            http: {
                requestUri: "/workspaces",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    alias: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "status", "workspaceId" ],
                members: {
                    arn: {},
                    status: {
                        shape: "Sn"
                    },
                    tags: {
                        shape: "Sc"
                    },
                    workspaceId: {}
                }
            },
            idempotent: true
        },
        DeleteAlertManagerDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/alertmanager/definition",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            idempotent: true
        },
        DeleteRuleGroupsNamespace: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/rulegroupsnamespaces/{name}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "name", "workspaceId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            idempotent: true
        },
        DeleteWorkspace: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            idempotent: true
        },
        DescribeAlertManagerDefinition: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/alertmanager/definition",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "alertManagerDefinition" ],
                members: {
                    alertManagerDefinition: {
                        type: "structure",
                        required: [ "createdAt", "data", "modifiedAt", "status" ],
                        members: {
                            createdAt: {
                                type: "timestamp"
                            },
                            data: {
                                type: "blob"
                            },
                            modifiedAt: {
                                type: "timestamp"
                            },
                            status: {
                                shape: "S6"
                            }
                        }
                    }
                }
            }
        },
        DescribeRuleGroupsNamespace: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/rulegroupsnamespaces/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "workspaceId" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ruleGroupsNamespace" ],
                members: {
                    ruleGroupsNamespace: {
                        type: "structure",
                        required: [ "arn", "createdAt", "data", "modifiedAt", "name", "status" ],
                        members: {
                            arn: {},
                            createdAt: {
                                type: "timestamp"
                            },
                            data: {
                                type: "blob"
                            },
                            modifiedAt: {
                                type: "timestamp"
                            },
                            name: {},
                            status: {
                                shape: "Sh"
                            },
                            tags: {
                                shape: "Sc"
                            }
                        }
                    }
                }
            }
        },
        DescribeWorkspace: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        type: "structure",
                        required: [ "arn", "createdAt", "status", "workspaceId" ],
                        members: {
                            alias: {},
                            arn: {},
                            createdAt: {
                                type: "timestamp"
                            },
                            prometheusEndpoint: {},
                            status: {
                                shape: "Sn"
                            },
                            tags: {
                                shape: "Sc"
                            },
                            workspaceId: {}
                        }
                    }
                }
            }
        },
        ListRuleGroupsNamespaces: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/rulegroupsnamespaces",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ruleGroupsNamespaces" ],
                members: {
                    nextToken: {},
                    ruleGroupsNamespaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "modifiedAt", "name", "status" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                modifiedAt: {
                                    type: "timestamp"
                                },
                                name: {},
                                status: {
                                    shape: "Sh"
                                },
                                tags: {
                                    shape: "Sc"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        ListWorkspaces: {
            http: {
                method: "GET",
                requestUri: "/workspaces",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    alias: {
                        location: "querystring",
                        locationName: "alias"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspaces" ],
                members: {
                    nextToken: {},
                    workspaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "status", "workspaceId" ],
                            members: {
                                alias: {},
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                status: {
                                    shape: "Sn"
                                },
                                tags: {
                                    shape: "Sc"
                                },
                                workspaceId: {}
                            }
                        }
                    }
                }
            }
        },
        PutAlertManagerDefinition: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}/alertmanager/definition",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "data", "workspaceId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    data: {
                        type: "blob"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {
                        shape: "S6"
                    }
                }
            },
            idempotent: true
        },
        PutRuleGroupsNamespace: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}/rulegroupsnamespaces/{name}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "data", "name", "workspaceId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    data: {
                        type: "blob"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "name", "status" ],
                members: {
                    arn: {},
                    name: {},
                    status: {
                        shape: "Sh"
                    },
                    tags: {
                        shape: "Sc"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateWorkspaceAlias: {
            http: {
                requestUri: "/workspaces/{workspaceId}/alias",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    alias: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S6: {
            type: "structure",
            required: [ "statusCode" ],
            members: {
                statusCode: {},
                statusReason: {}
            }
        },
        Sc: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "structure",
            required: [ "statusCode" ],
            members: {
                statusCode: {},
                statusReason: {}
            }
        },
        Sn: {
            type: "structure",
            required: [ "statusCode" ],
            members: {
                statusCode: {}
            }
        }
    },
    paginators: {
        ListRuleGroupsNamespaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "ruleGroupsNamespaces"
        },
        ListWorkspaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workspaces"
        }
    },
    waiters: {
        WorkspaceActive: {
            description: "Wait until a workspace reaches ACTIVE status",
            delay: 2,
            maxAttempts: 60,
            operation: "DescribeWorkspace",
            acceptors: [ {
                matcher: "path",
                argument: "workspace.status.statusCode",
                state: "success",
                expected: "ACTIVE"
            }, {
                matcher: "path",
                argument: "workspace.status.statusCode",
                state: "retry",
                expected: "UPDATING"
            }, {
                matcher: "path",
                argument: "workspace.status.statusCode",
                state: "retry",
                expected: "CREATING"
            } ]
        },
        WorkspaceDeleted: {
            description: "Wait until a workspace reaches DELETED status",
            delay: 2,
            maxAttempts: 60,
            operation: "DescribeWorkspace",
            acceptors: [ {
                matcher: "error",
                state: "success",
                expected: "ResourceNotFoundException"
            }, {
                matcher: "path",
                argument: "workspace.status.statusCode",
                state: "retry",
                expected: "DELETING"
            } ]
        }
    }
};

AWS.apiLoader.services["greengrassv2"] = {};

AWS.GreengrassV2 = AWS.Service.defineService("greengrassv2", [ "2020-11-30" ]);

AWS.apiLoader.services["greengrassv2"]["2020-11-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-11-30",
        endpointPrefix: "greengrass",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AWS GreengrassV2",
        serviceFullName: "AWS IoT Greengrass V2",
        serviceId: "GreengrassV2",
        signatureVersion: "v4",
        uid: "greengrassv2-2020-11-30"
    },
    operations: {
        BatchAssociateClientDeviceWithCoreDevice: {
            http: {
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}/associateClientDevices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "thingName" ],
                            members: {
                                thingName: {}
                            }
                        }
                    },
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                thingName: {},
                                code: {},
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        BatchDisassociateClientDeviceFromCoreDevice: {
            http: {
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}/disassociateClientDevices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "thingName" ],
                            members: {
                                thingName: {}
                            }
                        }
                    },
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                thingName: {},
                                code: {},
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        CancelDeployment: {
            http: {
                requestUri: "/greengrass/v2/deployments/{deploymentId}/cancel"
            },
            input: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {
                        location: "uri",
                        locationName: "deploymentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    message: {}
                }
            }
        },
        CreateComponentVersion: {
            http: {
                requestUri: "/greengrass/v2/createComponentVersion",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    inlineRecipe: {
                        type: "blob"
                    },
                    lambdaFunction: {
                        type: "structure",
                        required: [ "lambdaArn" ],
                        members: {
                            lambdaArn: {},
                            componentName: {},
                            componentVersion: {},
                            componentPlatforms: {
                                shape: "Sn"
                            },
                            componentDependencies: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        versionRequirement: {},
                                        dependencyType: {}
                                    }
                                }
                            },
                            componentLambdaParameters: {
                                type: "structure",
                                members: {
                                    eventSources: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "topic", "type" ],
                                            members: {
                                                topic: {},
                                                type: {}
                                            }
                                        }
                                    },
                                    maxQueueSize: {
                                        type: "integer"
                                    },
                                    maxInstancesCount: {
                                        type: "integer"
                                    },
                                    maxIdleTimeInSeconds: {
                                        type: "integer"
                                    },
                                    timeoutInSeconds: {
                                        type: "integer"
                                    },
                                    statusTimeoutInSeconds: {
                                        type: "integer"
                                    },
                                    pinned: {
                                        type: "boolean"
                                    },
                                    inputPayloadEncodingType: {},
                                    execArgs: {
                                        type: "list",
                                        member: {}
                                    },
                                    environmentVariables: {
                                        type: "map",
                                        key: {},
                                        value: {}
                                    },
                                    linuxProcessParams: {
                                        type: "structure",
                                        members: {
                                            isolationMode: {},
                                            containerParams: {
                                                type: "structure",
                                                members: {
                                                    memorySizeInKB: {
                                                        type: "integer"
                                                    },
                                                    mountROSysfs: {
                                                        type: "boolean"
                                                    },
                                                    volumes: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            required: [ "sourcePath", "destinationPath" ],
                                                            members: {
                                                                sourcePath: {},
                                                                destinationPath: {},
                                                                permission: {},
                                                                addGroupOwner: {
                                                                    type: "boolean"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    devices: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            required: [ "path" ],
                                                            members: {
                                                                path: {},
                                                                permission: {},
                                                                addGroupOwner: {
                                                                    type: "boolean"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    tags: {
                        shape: "S1e"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "componentName", "componentVersion", "creationTimestamp", "status" ],
                members: {
                    arn: {},
                    componentName: {},
                    componentVersion: {},
                    creationTimestamp: {
                        type: "timestamp"
                    },
                    status: {
                        shape: "S1l"
                    }
                }
            }
        },
        CreateDeployment: {
            http: {
                requestUri: "/greengrass/v2/deployments",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "targetArn" ],
                members: {
                    targetArn: {},
                    deploymentName: {},
                    components: {
                        shape: "S1q"
                    },
                    iotJobConfiguration: {
                        shape: "S20"
                    },
                    deploymentPolicies: {
                        shape: "S2h"
                    },
                    tags: {
                        shape: "S1e"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentId: {},
                    iotJobId: {},
                    iotJobArn: {}
                }
            }
        },
        DeleteComponent: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/v2/components/{arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                }
            }
        },
        DeleteCoreDevice: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    }
                }
            }
        },
        DescribeComponent: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/components/{arn}/metadata"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    componentName: {},
                    componentVersion: {},
                    creationTimestamp: {
                        type: "timestamp"
                    },
                    publisher: {},
                    description: {},
                    status: {
                        shape: "S1l"
                    },
                    platforms: {
                        shape: "Sn"
                    },
                    tags: {
                        shape: "S1e"
                    }
                }
            }
        },
        GetComponent: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/components/{arn}"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    recipeOutputFormat: {
                        location: "querystring",
                        locationName: "recipeOutputFormat"
                    },
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "recipeOutputFormat", "recipe" ],
                members: {
                    recipeOutputFormat: {},
                    recipe: {
                        type: "blob"
                    },
                    tags: {
                        shape: "S1e"
                    }
                }
            }
        },
        GetComponentVersionArtifact: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/components/{arn}/artifacts/{artifactName+}"
            },
            input: {
                type: "structure",
                required: [ "arn", "artifactName" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    artifactName: {
                        location: "uri",
                        locationName: "artifactName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "preSignedUrl" ],
                members: {
                    preSignedUrl: {}
                }
            }
        },
        GetCoreDevice: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}"
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    coreDeviceThingName: {},
                    coreVersion: {},
                    platform: {},
                    architecture: {},
                    status: {},
                    lastStatusUpdateTimestamp: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1e"
                    }
                }
            }
        },
        GetDeployment: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/deployments/{deploymentId}"
            },
            input: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {
                        location: "uri",
                        locationName: "deploymentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    targetArn: {},
                    revisionId: {},
                    deploymentId: {},
                    deploymentName: {},
                    deploymentStatus: {},
                    iotJobId: {},
                    iotJobArn: {},
                    components: {
                        shape: "S1q"
                    },
                    deploymentPolicies: {
                        shape: "S2h"
                    },
                    iotJobConfiguration: {
                        shape: "S20"
                    },
                    creationTimestamp: {
                        type: "timestamp"
                    },
                    isLatestForTarget: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "S1e"
                    }
                }
            }
        },
        ListClientDevicesAssociatedWithCoreDevice: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}/associatedClientDevices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    associatedClientDevices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                thingName: {},
                                associationTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListComponentVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/components/{arn}/versions"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    componentVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                componentName: {},
                                componentVersion: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListComponents: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/components"
            },
            input: {
                type: "structure",
                members: {
                    scope: {
                        location: "querystring",
                        locationName: "scope"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    components: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                componentName: {},
                                latestVersion: {
                                    type: "structure",
                                    members: {
                                        arn: {},
                                        componentVersion: {},
                                        creationTimestamp: {
                                            type: "timestamp"
                                        },
                                        description: {},
                                        publisher: {},
                                        platforms: {
                                            shape: "Sn"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCoreDevices: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/coreDevices"
            },
            input: {
                type: "structure",
                members: {
                    thingGroupArn: {
                        location: "querystring",
                        locationName: "thingGroupArn"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    coreDevices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                coreDeviceThingName: {},
                                status: {},
                                lastStatusUpdateTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDeployments: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/deployments"
            },
            input: {
                type: "structure",
                members: {
                    targetArn: {
                        location: "querystring",
                        locationName: "targetArn"
                    },
                    historyFilter: {
                        location: "querystring",
                        locationName: "historyFilter"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                targetArn: {},
                                revisionId: {},
                                deploymentId: {},
                                deploymentName: {},
                                creationTimestamp: {
                                    type: "timestamp"
                                },
                                deploymentStatus: {},
                                isLatestForTarget: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEffectiveDeployments: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}/effectiveDeployments"
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    effectiveDeployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "deploymentId", "deploymentName", "targetArn", "coreDeviceExecutionStatus", "creationTimestamp", "modifiedTimestamp" ],
                            members: {
                                deploymentId: {},
                                deploymentName: {},
                                iotJobId: {},
                                iotJobArn: {},
                                description: {},
                                targetArn: {},
                                coreDeviceExecutionStatus: {},
                                reason: {},
                                creationTimestamp: {
                                    type: "timestamp"
                                },
                                modifiedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListInstalledComponents: {
            http: {
                method: "GET",
                requestUri: "/greengrass/v2/coreDevices/{coreDeviceThingName}/installedComponents"
            },
            input: {
                type: "structure",
                required: [ "coreDeviceThingName" ],
                members: {
                    coreDeviceThingName: {
                        location: "uri",
                        locationName: "coreDeviceThingName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    installedComponents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                componentName: {},
                                componentVersion: {},
                                lifecycleState: {},
                                lifecycleStateDetails: {},
                                isRoot: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1e"
                    }
                }
            }
        },
        ResolveComponentCandidates: {
            http: {
                requestUri: "/greengrass/v2/resolveComponentCandidates"
            },
            input: {
                type: "structure",
                required: [ "platform", "componentCandidates" ],
                members: {
                    platform: {
                        shape: "So"
                    },
                    componentCandidates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                componentName: {},
                                componentVersion: {},
                                versionRequirements: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resolvedComponentVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                componentName: {},
                                componentVersion: {},
                                recipe: {
                                    type: "blob"
                                }
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sn: {
            type: "list",
            member: {
                shape: "So"
            }
        },
        So: {
            type: "structure",
            members: {
                name: {},
                attributes: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        S1e: {
            type: "map",
            key: {},
            value: {}
        },
        S1l: {
            type: "structure",
            members: {
                componentState: {},
                message: {},
                errors: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        S1q: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    componentVersion: {},
                    configurationUpdate: {
                        type: "structure",
                        members: {
                            merge: {},
                            reset: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    runWith: {
                        type: "structure",
                        members: {
                            posixUser: {},
                            systemResourceLimits: {
                                type: "structure",
                                members: {
                                    memory: {
                                        type: "long"
                                    },
                                    cpus: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S20: {
            type: "structure",
            members: {
                jobExecutionsRolloutConfig: {
                    type: "structure",
                    members: {
                        exponentialRate: {
                            type: "structure",
                            required: [ "baseRatePerMinute", "incrementFactor", "rateIncreaseCriteria" ],
                            members: {
                                baseRatePerMinute: {
                                    type: "integer"
                                },
                                incrementFactor: {
                                    type: "double"
                                },
                                rateIncreaseCriteria: {
                                    type: "structure",
                                    members: {
                                        numberOfNotifiedThings: {
                                            type: "integer"
                                        },
                                        numberOfSucceededThings: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        },
                        maximumPerMinute: {
                            type: "integer"
                        }
                    }
                },
                abortConfig: {
                    type: "structure",
                    required: [ "criteriaList" ],
                    members: {
                        criteriaList: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "failureType", "action", "thresholdPercentage", "minNumberOfExecutedThings" ],
                                members: {
                                    failureType: {},
                                    action: {},
                                    thresholdPercentage: {
                                        type: "double"
                                    },
                                    minNumberOfExecutedThings: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                timeoutConfig: {
                    type: "structure",
                    members: {
                        inProgressTimeoutInMinutes: {
                            type: "long"
                        }
                    }
                }
            }
        },
        S2h: {
            type: "structure",
            members: {
                failureHandlingPolicy: {},
                componentUpdatePolicy: {
                    type: "structure",
                    members: {
                        timeoutInSeconds: {
                            type: "integer"
                        },
                        action: {}
                    }
                },
                configurationValidationPolicy: {
                    type: "structure",
                    members: {
                        timeoutInSeconds: {
                            type: "integer"
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListClientDevicesAssociatedWithCoreDevice: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "associatedClientDevices"
        },
        ListComponentVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "componentVersions"
        },
        ListComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "components"
        },
        ListCoreDevices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "coreDevices"
        },
        ListDeployments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "deployments"
        },
        ListEffectiveDeployments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "effectiveDeployments"
        },
        ListInstalledComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "installedComponents"
        }
    }
};

AWS.apiLoader.services["iotdeviceadvisor"] = {};

AWS.IotDeviceAdvisor = AWS.Service.defineService("iotdeviceadvisor", [ "2020-09-18" ]);

AWS.apiLoader.services["iotdeviceadvisor"]["2020-09-18"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-09-18",
        endpointPrefix: "api.iotdeviceadvisor",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AWSIoTDeviceAdvisor",
        serviceFullName: "AWS IoT Core Device Advisor",
        serviceId: "IotDeviceAdvisor",
        signatureVersion: "v4",
        signingName: "iotdeviceadvisor",
        uid: "iotdeviceadvisor-2020-09-18"
    },
    operations: {
        CreateSuiteDefinition: {
            http: {
                requestUri: "/suiteDefinitions"
            },
            input: {
                type: "structure",
                members: {
                    suiteDefinitionConfiguration: {
                        shape: "S2"
                    },
                    tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteDefinitionId: {},
                    suiteDefinitionArn: {},
                    suiteDefinitionName: {},
                    createdAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteSuiteDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/suiteDefinitions/{suiteDefinitionId}"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetSuiteDefinition: {
            http: {
                method: "GET",
                requestUri: "/suiteDefinitions/{suiteDefinitionId}"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    },
                    suiteDefinitionVersion: {
                        location: "querystring",
                        locationName: "suiteDefinitionVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteDefinitionId: {},
                    suiteDefinitionArn: {},
                    suiteDefinitionVersion: {},
                    latestVersion: {},
                    suiteDefinitionConfiguration: {
                        shape: "S2"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    lastModifiedAt: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S9"
                    }
                }
            }
        },
        GetSuiteRun: {
            http: {
                method: "GET",
                requestUri: "/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId", "suiteRunId" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    },
                    suiteRunId: {
                        location: "uri",
                        locationName: "suiteRunId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteDefinitionId: {},
                    suiteDefinitionVersion: {},
                    suiteRunId: {},
                    suiteRunArn: {},
                    suiteRunConfiguration: {
                        shape: "Sm"
                    },
                    testResult: {
                        type: "structure",
                        members: {
                            groups: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        groupId: {},
                                        groupName: {},
                                        tests: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    testCaseRunId: {},
                                                    testCaseDefinitionId: {},
                                                    testCaseDefinitionName: {},
                                                    status: {},
                                                    startTime: {
                                                        type: "timestamp"
                                                    },
                                                    endTime: {
                                                        type: "timestamp"
                                                    },
                                                    logUrl: {},
                                                    warnings: {},
                                                    failure: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    status: {},
                    errorReason: {},
                    tags: {
                        shape: "S9"
                    }
                }
            }
        },
        GetSuiteRunReport: {
            http: {
                method: "GET",
                requestUri: "/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}/report"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId", "suiteRunId" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    },
                    suiteRunId: {
                        location: "uri",
                        locationName: "suiteRunId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    qualificationReportDownloadUrl: {}
                }
            }
        },
        ListSuiteDefinitions: {
            http: {
                method: "GET",
                requestUri: "/suiteDefinitions"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteDefinitionInformationList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                suiteDefinitionId: {},
                                suiteDefinitionName: {},
                                defaultDevices: {
                                    shape: "S4"
                                },
                                intendedForQualification: {
                                    type: "boolean"
                                },
                                createdAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSuiteRuns: {
            http: {
                method: "GET",
                requestUri: "/suiteRuns"
            },
            input: {
                type: "structure",
                members: {
                    suiteDefinitionId: {
                        location: "querystring",
                        locationName: "suiteDefinitionId"
                    },
                    suiteDefinitionVersion: {
                        location: "querystring",
                        locationName: "suiteDefinitionVersion"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteRunsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                suiteDefinitionId: {},
                                suiteDefinitionVersion: {},
                                suiteDefinitionName: {},
                                suiteRunId: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                startedAt: {
                                    type: "timestamp"
                                },
                                endAt: {
                                    type: "timestamp"
                                },
                                status: {},
                                passed: {
                                    type: "integer"
                                },
                                failed: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S9"
                    }
                }
            }
        },
        StartSuiteRun: {
            http: {
                requestUri: "/suiteDefinitions/{suiteDefinitionId}/suiteRuns"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    },
                    suiteDefinitionVersion: {},
                    suiteRunConfiguration: {
                        shape: "Sm"
                    },
                    tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteRunId: {},
                    suiteRunArn: {},
                    createdAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        StopSuiteRun: {
            http: {
                requestUri: "/suiteDefinitions/{suiteDefinitionId}/suiteRuns/{suiteRunId}/stop"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId", "suiteRunId" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    },
                    suiteRunId: {
                        location: "uri",
                        locationName: "suiteRunId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSuiteDefinition: {
            http: {
                method: "PATCH",
                requestUri: "/suiteDefinitions/{suiteDefinitionId}"
            },
            input: {
                type: "structure",
                required: [ "suiteDefinitionId" ],
                members: {
                    suiteDefinitionId: {
                        location: "uri",
                        locationName: "suiteDefinitionId"
                    },
                    suiteDefinitionConfiguration: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suiteDefinitionId: {},
                    suiteDefinitionArn: {},
                    suiteDefinitionName: {},
                    suiteDefinitionVersion: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            members: {
                suiteDefinitionName: {},
                devices: {
                    shape: "S4"
                },
                intendedForQualification: {
                    type: "boolean"
                },
                rootGroup: {},
                devicePermissionRoleArn: {}
            }
        },
        S4: {
            type: "list",
            member: {
                shape: "S5"
            }
        },
        S5: {
            type: "structure",
            members: {
                thingArn: {},
                certificateArn: {}
            }
        },
        S9: {
            type: "map",
            key: {},
            value: {}
        },
        Sm: {
            type: "structure",
            members: {
                primaryDevice: {
                    shape: "S5"
                },
                selectedTestList: {
                    type: "list",
                    member: {}
                }
            }
        }
    },
    paginators: {
        ListSuiteDefinitions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSuiteRuns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["iotfleethub"] = {};

AWS.IoTFleetHub = AWS.Service.defineService("iotfleethub", [ "2020-11-03" ]);

AWS.apiLoader.services["iotfleethub"]["2020-11-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-11-03",
        endpointPrefix: "api.fleethub.iot",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS IoT Fleet Hub",
        serviceId: "IoTFleetHub",
        signatureVersion: "v4",
        signingName: "iotfleethub",
        uid: "iotfleethub-2020-11-03"
    },
    operations: {
        CreateApplication: {
            http: {
                requestUri: "/applications",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "applicationName", "roleArn" ],
                members: {
                    applicationName: {},
                    applicationDescription: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    roleArn: {},
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "applicationArn" ],
                members: {
                    applicationId: {},
                    applicationArn: {}
                }
            }
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "applicationArn", "applicationName", "applicationUrl", "applicationState", "applicationCreationDate", "applicationLastUpdateDate", "roleArn" ],
                members: {
                    applicationId: {},
                    applicationArn: {},
                    applicationName: {},
                    applicationDescription: {},
                    applicationUrl: {},
                    applicationState: {},
                    applicationCreationDate: {
                        type: "long"
                    },
                    applicationLastUpdateDate: {
                        type: "long"
                    },
                    roleArn: {},
                    ssoClientId: {},
                    errorMessage: {},
                    tags: {
                        shape: "S6"
                    }
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "applicationId", "applicationName", "applicationUrl" ],
                            members: {
                                applicationId: {},
                                applicationName: {},
                                applicationDescription: {},
                                applicationUrl: {},
                                applicationCreationDate: {
                                    type: "long"
                                },
                                applicationLastUpdateDate: {
                                    type: "long"
                                },
                                applicationState: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S6"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{applicationId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    applicationName: {},
                    applicationDescription: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "applicationSummaries"
        }
    }
};

AWS.apiLoader.services["iotwireless"] = {};

AWS.IoTWireless = AWS.Service.defineService("iotwireless", [ "2020-11-22" ]);

AWS.apiLoader.services["iotwireless"]["2020-11-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-11-22",
        endpointPrefix: "api.iotwireless",
        protocol: "rest-json",
        serviceFullName: "AWS IoT Wireless",
        serviceId: "IoT Wireless",
        signatureVersion: "v4",
        signingName: "iotwireless",
        uid: "iotwireless-2020-11-22"
    },
    operations: {
        AssociateAwsAccountWithPartnerAccount: {
            http: {
                requestUri: "/partner-accounts"
            },
            input: {
                type: "structure",
                required: [ "Sidewalk" ],
                members: {
                    Sidewalk: {
                        shape: "S2"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Sidewalk: {
                        shape: "S2"
                    },
                    Arn: {}
                }
            }
        },
        AssociateMulticastGroupWithFuotaTask: {
            http: {
                method: "PUT",
                requestUri: "/fuota-tasks/{Id}/multicast-group",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "MulticastGroupId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    MulticastGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateWirelessDeviceWithFuotaTask: {
            http: {
                method: "PUT",
                requestUri: "/fuota-tasks/{Id}/wireless-device",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "WirelessDeviceId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    WirelessDeviceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateWirelessDeviceWithMulticastGroup: {
            http: {
                method: "PUT",
                requestUri: "/multicast-groups/{Id}/wireless-device",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "WirelessDeviceId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    WirelessDeviceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateWirelessDeviceWithThing: {
            http: {
                method: "PUT",
                requestUri: "/wireless-devices/{Id}/thing",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "ThingArn" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    ThingArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateWirelessGatewayWithCertificate: {
            http: {
                method: "PUT",
                requestUri: "/wireless-gateways/{Id}/certificate"
            },
            input: {
                type: "structure",
                required: [ "Id", "IotCertificateId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IotCertificateId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IotCertificateId: {}
                }
            }
        },
        AssociateWirelessGatewayWithThing: {
            http: {
                method: "PUT",
                requestUri: "/wireless-gateways/{Id}/thing",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "ThingArn" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    ThingArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelMulticastGroupSession: {
            http: {
                method: "DELETE",
                requestUri: "/multicast-groups/{Id}/session",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDestination: {
            http: {
                requestUri: "/destinations",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "ExpressionType", "Expression", "RoleArn" ],
                members: {
                    Name: {},
                    ExpressionType: {},
                    Expression: {},
                    Description: {},
                    RoleArn: {},
                    Tags: {
                        shape: "S6"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {}
                }
            }
        },
        CreateDeviceProfile: {
            http: {
                requestUri: "/device-profiles",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Name: {},
                    LoRaWAN: {
                        shape: "S16"
                    },
                    Tags: {
                        shape: "S6"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {}
                }
            }
        },
        CreateFuotaTask: {
            http: {
                requestUri: "/fuota-tasks",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "FirmwareUpdateImage", "FirmwareUpdateRole" ],
                members: {
                    Name: {},
                    Description: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    LoRaWAN: {
                        shape: "S1w"
                    },
                    FirmwareUpdateImage: {},
                    FirmwareUpdateRole: {},
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {}
                }
            }
        },
        CreateMulticastGroup: {
            http: {
                requestUri: "/multicast-groups",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "LoRaWAN" ],
                members: {
                    Name: {},
                    Description: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    LoRaWAN: {
                        shape: "S24"
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {}
                }
            }
        },
        CreateServiceProfile: {
            http: {
                requestUri: "/service-profiles",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Name: {},
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            AddGwMetadata: {
                                type: "boolean"
                            }
                        }
                    },
                    Tags: {
                        shape: "S6"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {}
                }
            }
        },
        CreateWirelessDevice: {
            http: {
                requestUri: "/wireless-devices",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Type", "DestinationName" ],
                members: {
                    Type: {},
                    Name: {},
                    Description: {},
                    DestinationName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    LoRaWAN: {
                        shape: "S2i"
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {}
                }
            }
        },
        CreateWirelessGateway: {
            http: {
                requestUri: "/wireless-gateways",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "LoRaWAN" ],
                members: {
                    Name: {},
                    Description: {},
                    LoRaWAN: {
                        shape: "S37"
                    },
                    Tags: {
                        shape: "S6"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {}
                }
            }
        },
        CreateWirelessGatewayTask: {
            http: {
                requestUri: "/wireless-gateways/{Id}/tasks",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Id", "WirelessGatewayTaskDefinitionId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    WirelessGatewayTaskDefinitionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WirelessGatewayTaskDefinitionId: {},
                    Status: {}
                }
            }
        },
        CreateWirelessGatewayTaskDefinition: {
            http: {
                requestUri: "/wireless-gateway-task-definitions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AutoCreateTasks" ],
                members: {
                    AutoCreateTasks: {
                        type: "boolean"
                    },
                    Name: {},
                    Update: {
                        shape: "S3o"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Arn: {}
                }
            }
        },
        DeleteDestination: {
            http: {
                method: "DELETE",
                requestUri: "/destinations/{Name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDeviceProfile: {
            http: {
                method: "DELETE",
                requestUri: "/device-profiles/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFuotaTask: {
            http: {
                method: "DELETE",
                requestUri: "/fuota-tasks/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteMulticastGroup: {
            http: {
                method: "DELETE",
                requestUri: "/multicast-groups/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteServiceProfile: {
            http: {
                method: "DELETE",
                requestUri: "/service-profiles/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWirelessDevice: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-devices/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWirelessGateway: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-gateways/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWirelessGatewayTask: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-gateways/{Id}/tasks",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWirelessGatewayTaskDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-gateway-task-definitions/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateAwsAccountFromPartnerAccount: {
            http: {
                method: "DELETE",
                requestUri: "/partner-accounts/{PartnerAccountId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "PartnerAccountId", "PartnerType" ],
                members: {
                    PartnerAccountId: {
                        location: "uri",
                        locationName: "PartnerAccountId"
                    },
                    PartnerType: {
                        location: "querystring",
                        locationName: "partnerType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateMulticastGroupFromFuotaTask: {
            http: {
                method: "DELETE",
                requestUri: "/fuota-tasks/{Id}/multicast-groups/{MulticastGroupId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "MulticastGroupId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    MulticastGroupId: {
                        location: "uri",
                        locationName: "MulticastGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateWirelessDeviceFromFuotaTask: {
            http: {
                method: "DELETE",
                requestUri: "/fuota-tasks/{Id}/wireless-devices/{WirelessDeviceId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "WirelessDeviceId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    WirelessDeviceId: {
                        location: "uri",
                        locationName: "WirelessDeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateWirelessDeviceFromMulticastGroup: {
            http: {
                method: "DELETE",
                requestUri: "/multicast-groups/{Id}/wireless-devices/{WirelessDeviceId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "WirelessDeviceId" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    WirelessDeviceId: {
                        location: "uri",
                        locationName: "WirelessDeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateWirelessDeviceFromThing: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-devices/{Id}/thing",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateWirelessGatewayFromCertificate: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-gateways/{Id}/certificate",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateWirelessGatewayFromThing: {
            http: {
                method: "DELETE",
                requestUri: "/wireless-gateways/{Id}/thing",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetDestination: {
            http: {
                method: "GET",
                requestUri: "/destinations/{Name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {},
                    Expression: {},
                    ExpressionType: {},
                    Description: {},
                    RoleArn: {}
                }
            }
        },
        GetDeviceProfile: {
            http: {
                method: "GET",
                requestUri: "/device-profiles/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {},
                    Id: {},
                    LoRaWAN: {
                        shape: "S16"
                    }
                }
            }
        },
        GetFuotaTask: {
            http: {
                method: "GET",
                requestUri: "/fuota-tasks/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Status: {},
                    Name: {},
                    Description: {},
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            RfRegion: {},
                            StartTime: {
                                shape: "S55"
                            }
                        }
                    },
                    FirmwareUpdateImage: {},
                    FirmwareUpdateRole: {},
                    CreatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetLogLevelsByResourceTypes: {
            http: {
                method: "GET",
                requestUri: "/log-levels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    DefaultLogLevel: {},
                    WirelessGatewayLogOptions: {
                        shape: "S5a"
                    },
                    WirelessDeviceLogOptions: {
                        shape: "S5g"
                    }
                }
            }
        },
        GetMulticastGroup: {
            http: {
                method: "GET",
                requestUri: "/multicast-groups/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    Status: {},
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            RfRegion: {},
                            DlClass: {},
                            NumberOfDevicesRequested: {
                                type: "integer"
                            },
                            NumberOfDevicesInGroup: {
                                type: "integer"
                            }
                        }
                    },
                    CreatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetMulticastGroupSession: {
            http: {
                method: "GET",
                requestUri: "/multicast-groups/{Id}/session"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoRaWAN: {
                        shape: "S5t"
                    }
                }
            }
        },
        GetPartnerAccount: {
            http: {
                method: "GET",
                requestUri: "/partner-accounts/{PartnerAccountId}"
            },
            input: {
                type: "structure",
                required: [ "PartnerAccountId", "PartnerType" ],
                members: {
                    PartnerAccountId: {
                        location: "uri",
                        locationName: "PartnerAccountId"
                    },
                    PartnerType: {
                        location: "querystring",
                        locationName: "partnerType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Sidewalk: {
                        shape: "S60"
                    },
                    AccountLinked: {
                        type: "boolean"
                    }
                }
            }
        },
        GetResourceEventConfiguration: {
            http: {
                method: "GET",
                requestUri: "/event-configurations/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "Identifier", "IdentifierType" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    IdentifierType: {
                        location: "querystring",
                        locationName: "identifierType"
                    },
                    PartnerType: {
                        location: "querystring",
                        locationName: "partnerType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceRegistrationState: {
                        shape: "S68"
                    },
                    Proximity: {
                        shape: "S6b"
                    }
                }
            }
        },
        GetResourceLogLevel: {
            http: {
                method: "GET",
                requestUri: "/log-levels/{ResourceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ResourceType" ],
                members: {
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "ResourceIdentifier"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LogLevel: {}
                }
            }
        },
        GetServiceEndpoint: {
            http: {
                method: "GET",
                requestUri: "/service-endpoint"
            },
            input: {
                type: "structure",
                members: {
                    ServiceType: {
                        location: "querystring",
                        locationName: "serviceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceType: {},
                    ServiceEndpoint: {},
                    ServerTrust: {}
                }
            }
        },
        GetServiceProfile: {
            http: {
                method: "GET",
                requestUri: "/service-profiles/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {},
                    Id: {},
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            UlRate: {
                                type: "integer"
                            },
                            UlBucketSize: {
                                type: "integer"
                            },
                            UlRatePolicy: {},
                            DlRate: {
                                type: "integer"
                            },
                            DlBucketSize: {
                                type: "integer"
                            },
                            DlRatePolicy: {},
                            AddGwMetadata: {
                                type: "boolean"
                            },
                            DevStatusReqFreq: {
                                type: "integer"
                            },
                            ReportDevStatusBattery: {
                                type: "boolean"
                            },
                            ReportDevStatusMargin: {
                                type: "boolean"
                            },
                            DrMin: {
                                type: "integer"
                            },
                            DrMax: {
                                type: "integer"
                            },
                            ChannelMask: {},
                            PrAllowed: {
                                type: "boolean"
                            },
                            HrAllowed: {
                                type: "boolean"
                            },
                            RaAllowed: {
                                type: "boolean"
                            },
                            NwkGeoLoc: {
                                type: "boolean"
                            },
                            TargetPer: {
                                type: "integer"
                            },
                            MinGwDiversity: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        GetWirelessDevice: {
            http: {
                method: "GET",
                requestUri: "/wireless-devices/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "Identifier", "IdentifierType" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    IdentifierType: {
                        location: "querystring",
                        locationName: "identifierType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Type: {},
                    Name: {},
                    Description: {},
                    DestinationName: {},
                    Id: {},
                    Arn: {},
                    ThingName: {},
                    ThingArn: {},
                    LoRaWAN: {
                        shape: "S2i"
                    },
                    Sidewalk: {
                        type: "structure",
                        members: {
                            AmazonId: {},
                            SidewalkId: {},
                            SidewalkManufacturingSn: {},
                            DeviceCertificates: {
                                shape: "S7d"
                            }
                        }
                    }
                }
            }
        },
        GetWirelessDeviceStatistics: {
            http: {
                method: "GET",
                requestUri: "/wireless-devices/{Id}/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "WirelessDeviceId" ],
                members: {
                    WirelessDeviceId: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WirelessDeviceId: {},
                    LastUplinkReceivedAt: {},
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            DevEui: {},
                            FPort: {
                                type: "integer"
                            },
                            DataRate: {
                                type: "integer"
                            },
                            Frequency: {
                                type: "integer"
                            },
                            Timestamp: {},
                            Gateways: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        GatewayEui: {},
                                        Snr: {
                                            type: "double"
                                        },
                                        Rssi: {
                                            type: "double"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Sidewalk: {
                        type: "structure",
                        members: {
                            Rssi: {
                                type: "integer"
                            },
                            BatteryLevel: {},
                            Event: {},
                            DeviceState: {}
                        }
                    }
                }
            }
        },
        GetWirelessGateway: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateways/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "Identifier", "IdentifierType" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    IdentifierType: {
                        location: "querystring",
                        locationName: "identifierType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Id: {},
                    Description: {},
                    LoRaWAN: {
                        shape: "S37"
                    },
                    Arn: {},
                    ThingName: {},
                    ThingArn: {}
                }
            }
        },
        GetWirelessGatewayCertificate: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateways/{Id}/certificate"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IotCertificateId: {},
                    LoRaWANNetworkServerCertificateId: {}
                }
            }
        },
        GetWirelessGatewayFirmwareInformation: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateways/{Id}/firmware-information"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            CurrentVersion: {
                                shape: "S3t"
                            }
                        }
                    }
                }
            }
        },
        GetWirelessGatewayStatistics: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateways/{Id}/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "WirelessGatewayId" ],
                members: {
                    WirelessGatewayId: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WirelessGatewayId: {},
                    LastUplinkReceivedAt: {},
                    ConnectionStatus: {}
                }
            }
        },
        GetWirelessGatewayTask: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateways/{Id}/tasks"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WirelessGatewayId: {},
                    WirelessGatewayTaskDefinitionId: {},
                    LastUplinkReceivedAt: {},
                    TaskCreatedAt: {},
                    Status: {}
                }
            }
        },
        GetWirelessGatewayTaskDefinition: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateway-task-definitions/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AutoCreateTasks: {
                        type: "boolean"
                    },
                    Name: {},
                    Update: {
                        shape: "S3o"
                    },
                    Arn: {}
                }
            }
        },
        ListDestinations: {
            http: {
                method: "GET",
                requestUri: "/destinations"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DestinationList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                ExpressionType: {},
                                Expression: {},
                                Description: {},
                                RoleArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListDeviceProfiles: {
            http: {
                method: "GET",
                requestUri: "/device-profiles"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DeviceProfileList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                Id: {}
                            }
                        }
                    }
                }
            }
        },
        ListFuotaTasks: {
            http: {
                method: "GET",
                requestUri: "/fuota-tasks"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FuotaTaskList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListMulticastGroups: {
            http: {
                method: "GET",
                requestUri: "/multicast-groups"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MulticastGroupList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListMulticastGroupsByFuotaTask: {
            http: {
                method: "GET",
                requestUri: "/fuota-tasks/{Id}/multicast-groups"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MulticastGroupList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {}
                            }
                        }
                    }
                }
            }
        },
        ListPartnerAccounts: {
            http: {
                method: "GET",
                requestUri: "/partner-accounts"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Sidewalk: {
                        type: "list",
                        member: {
                            shape: "S60"
                        }
                    }
                }
            }
        },
        ListServiceProfiles: {
            http: {
                method: "GET",
                requestUri: "/service-profiles"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ServiceProfileList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                Id: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    }
                }
            }
        },
        ListWirelessDevices: {
            http: {
                method: "GET",
                requestUri: "/wireless-devices"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    DestinationName: {
                        location: "querystring",
                        locationName: "destinationName"
                    },
                    DeviceProfileId: {
                        location: "querystring",
                        locationName: "deviceProfileId"
                    },
                    ServiceProfileId: {
                        location: "querystring",
                        locationName: "serviceProfileId"
                    },
                    WirelessDeviceType: {
                        location: "querystring",
                        locationName: "wirelessDeviceType"
                    },
                    FuotaTaskId: {
                        location: "querystring",
                        locationName: "fuotaTaskId"
                    },
                    MulticastGroupId: {
                        location: "querystring",
                        locationName: "multicastGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    WirelessDeviceList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Id: {},
                                Type: {},
                                Name: {},
                                DestinationName: {},
                                LastUplinkReceivedAt: {},
                                LoRaWAN: {
                                    type: "structure",
                                    members: {
                                        DevEui: {}
                                    }
                                },
                                Sidewalk: {
                                    type: "structure",
                                    members: {
                                        AmazonId: {},
                                        SidewalkId: {},
                                        SidewalkManufacturingSn: {},
                                        DeviceCertificates: {
                                            shape: "S7d"
                                        }
                                    }
                                },
                                FuotaDeviceStatus: {},
                                MulticastDeviceStatus: {},
                                McGroupId: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListWirelessGatewayTaskDefinitions: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateway-task-definitions"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    TaskDefinitionType: {
                        location: "querystring",
                        locationName: "taskDefinitionType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TaskDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                LoRaWAN: {
                                    type: "structure",
                                    members: {
                                        CurrentVersion: {
                                            shape: "S3t"
                                        },
                                        UpdateVersion: {
                                            shape: "S3t"
                                        }
                                    }
                                },
                                Arn: {}
                            }
                        }
                    }
                }
            }
        },
        ListWirelessGateways: {
            http: {
                method: "GET",
                requestUri: "/wireless-gateways"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    WirelessGatewayList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Id: {},
                                Name: {},
                                Description: {},
                                LoRaWAN: {
                                    shape: "S37"
                                },
                                LastUplinkReceivedAt: {}
                            }
                        }
                    }
                }
            }
        },
        PutResourceLogLevel: {
            http: {
                method: "PUT",
                requestUri: "/log-levels/{ResourceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ResourceType", "LogLevel" ],
                members: {
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "ResourceIdentifier"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    LogLevel: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ResetAllResourceLogLevels: {
            http: {
                method: "DELETE",
                requestUri: "/log-levels",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ResetResourceLogLevel: {
            http: {
                method: "DELETE",
                requestUri: "/log-levels/{ResourceIdentifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ResourceType" ],
                members: {
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "ResourceIdentifier"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendDataToMulticastGroup: {
            http: {
                requestUri: "/multicast-groups/{Id}/data",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Id", "PayloadData", "WirelessMetadata" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    PayloadData: {},
                    WirelessMetadata: {
                        type: "structure",
                        members: {
                            LoRaWAN: {
                                type: "structure",
                                members: {
                                    FPort: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        SendDataToWirelessDevice: {
            http: {
                requestUri: "/wireless-devices/{Id}/data",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "Id", "TransmitMode", "PayloadData" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    TransmitMode: {
                        type: "integer"
                    },
                    PayloadData: {},
                    WirelessMetadata: {
                        type: "structure",
                        members: {
                            LoRaWAN: {
                                type: "structure",
                                members: {
                                    FPort: {
                                        type: "integer"
                                    }
                                }
                            },
                            Sidewalk: {
                                type: "structure",
                                members: {
                                    Seq: {
                                        type: "integer"
                                    },
                                    MessageType: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        StartBulkAssociateWirelessDeviceWithMulticastGroup: {
            http: {
                method: "PATCH",
                requestUri: "/multicast-groups/{Id}/bulk",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    QueryString: {},
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartBulkDisassociateWirelessDeviceFromMulticastGroup: {
            http: {
                requestUri: "/multicast-groups/{Id}/bulk",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    QueryString: {},
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartFuotaTask: {
            http: {
                method: "PUT",
                requestUri: "/fuota-tasks/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            StartTime: {
                                shape: "S55"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartMulticastGroupSession: {
            http: {
                method: "PUT",
                requestUri: "/multicast-groups/{Id}/session",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id", "LoRaWAN" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    LoRaWAN: {
                        shape: "S5t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TestWirelessDevice: {
            http: {
                requestUri: "/wireless-devices/{Id}/test",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Result: {}
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDestination: {
            http: {
                method: "PATCH",
                requestUri: "/destinations/{Name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    ExpressionType: {},
                    Expression: {},
                    Description: {},
                    RoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFuotaTask: {
            http: {
                method: "PATCH",
                requestUri: "/fuota-tasks/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Name: {},
                    Description: {},
                    LoRaWAN: {
                        shape: "S1w"
                    },
                    FirmwareUpdateImage: {},
                    FirmwareUpdateRole: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLogLevelsByResourceTypes: {
            http: {
                requestUri: "/log-levels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DefaultLogLevel: {},
                    WirelessDeviceLogOptions: {
                        shape: "S5g"
                    },
                    WirelessGatewayLogOptions: {
                        shape: "S5a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMulticastGroup: {
            http: {
                method: "PATCH",
                requestUri: "/multicast-groups/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Name: {},
                    Description: {},
                    LoRaWAN: {
                        shape: "S24"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePartnerAccount: {
            http: {
                method: "PATCH",
                requestUri: "/partner-accounts/{PartnerAccountId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Sidewalk", "PartnerAccountId", "PartnerType" ],
                members: {
                    Sidewalk: {
                        type: "structure",
                        members: {
                            AppServerPrivateKey: {
                                shape: "S4"
                            }
                        }
                    },
                    PartnerAccountId: {
                        location: "uri",
                        locationName: "PartnerAccountId"
                    },
                    PartnerType: {
                        location: "querystring",
                        locationName: "partnerType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResourceEventConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/event-configurations/{Identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Identifier", "IdentifierType" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    IdentifierType: {
                        location: "querystring",
                        locationName: "identifierType"
                    },
                    PartnerType: {
                        location: "querystring",
                        locationName: "partnerType"
                    },
                    DeviceRegistrationState: {
                        shape: "S68"
                    },
                    Proximity: {
                        shape: "S6b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWirelessDevice: {
            http: {
                method: "PATCH",
                requestUri: "/wireless-devices/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    DestinationName: {},
                    Name: {},
                    Description: {},
                    LoRaWAN: {
                        type: "structure",
                        members: {
                            DeviceProfileId: {},
                            ServiceProfileId: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWirelessGateway: {
            http: {
                method: "PATCH",
                requestUri: "/wireless-gateways/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Name: {},
                    Description: {},
                    JoinEuiFilters: {
                        shape: "S39"
                    },
                    NetIdFilters: {
                        shape: "S3b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            members: {
                AmazonId: {},
                AppServerPrivateKey: {
                    shape: "S4"
                }
            }
        },
        S4: {
            type: "string",
            sensitive: true
        },
        S6: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S16: {
            type: "structure",
            members: {
                SupportsClassB: {
                    type: "boolean"
                },
                ClassBTimeout: {
                    type: "integer"
                },
                PingSlotPeriod: {
                    type: "integer"
                },
                PingSlotDr: {
                    type: "integer"
                },
                PingSlotFreq: {
                    type: "integer"
                },
                SupportsClassC: {
                    type: "boolean"
                },
                ClassCTimeout: {
                    type: "integer"
                },
                MacVersion: {},
                RegParamsRevision: {},
                RxDelay1: {
                    type: "integer"
                },
                RxDrOffset1: {
                    type: "integer"
                },
                RxDataRate2: {
                    type: "integer"
                },
                RxFreq2: {
                    type: "integer"
                },
                FactoryPresetFreqsList: {
                    type: "list",
                    member: {
                        type: "integer"
                    }
                },
                MaxEirp: {
                    type: "integer"
                },
                MaxDutyCycle: {
                    type: "integer"
                },
                RfRegion: {},
                SupportsJoin: {
                    type: "boolean"
                },
                Supports32BitFCnt: {
                    type: "boolean"
                }
            }
        },
        S1w: {
            type: "structure",
            members: {
                RfRegion: {}
            }
        },
        S24: {
            type: "structure",
            members: {
                RfRegion: {},
                DlClass: {}
            }
        },
        S2i: {
            type: "structure",
            members: {
                DevEui: {},
                DeviceProfileId: {},
                ServiceProfileId: {},
                OtaaV1_1: {
                    type: "structure",
                    members: {
                        AppKey: {},
                        NwkKey: {},
                        JoinEui: {}
                    }
                },
                OtaaV1_0_x: {
                    type: "structure",
                    members: {
                        AppKey: {},
                        AppEui: {},
                        GenAppKey: {}
                    }
                },
                AbpV1_1: {
                    type: "structure",
                    members: {
                        DevAddr: {},
                        SessionKeys: {
                            type: "structure",
                            members: {
                                FNwkSIntKey: {},
                                SNwkSIntKey: {},
                                NwkSEncKey: {},
                                AppSKey: {}
                            }
                        }
                    }
                },
                AbpV1_0_x: {
                    type: "structure",
                    members: {
                        DevAddr: {},
                        SessionKeys: {
                            type: "structure",
                            members: {
                                NwkSKey: {},
                                AppSKey: {}
                            }
                        }
                    }
                },
                FPorts: {
                    type: "structure",
                    members: {
                        Fuota: {
                            type: "integer"
                        },
                        Multicast: {
                            type: "integer"
                        },
                        ClockSync: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S37: {
            type: "structure",
            members: {
                GatewayEui: {},
                RfRegion: {},
                JoinEuiFilters: {
                    shape: "S39"
                },
                NetIdFilters: {
                    shape: "S3b"
                },
                SubBands: {
                    type: "list",
                    member: {
                        type: "integer"
                    }
                }
            }
        },
        S39: {
            type: "list",
            member: {
                type: "list",
                member: {}
            }
        },
        S3b: {
            type: "list",
            member: {}
        },
        S3o: {
            type: "structure",
            members: {
                UpdateDataSource: {},
                UpdateDataRole: {},
                LoRaWAN: {
                    type: "structure",
                    members: {
                        UpdateSignature: {},
                        SigKeyCrc: {
                            type: "long"
                        },
                        CurrentVersion: {
                            shape: "S3t"
                        },
                        UpdateVersion: {
                            shape: "S3t"
                        }
                    }
                }
            }
        },
        S3t: {
            type: "structure",
            members: {
                PackageVersion: {},
                Model: {},
                Station: {}
            }
        },
        S55: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S5a: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "LogLevel" ],
                members: {
                    Type: {},
                    LogLevel: {},
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Event", "LogLevel" ],
                            members: {
                                Event: {},
                                LogLevel: {}
                            }
                        }
                    }
                }
            }
        },
        S5g: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "LogLevel" ],
                members: {
                    Type: {},
                    LogLevel: {},
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Event", "LogLevel" ],
                            members: {
                                Event: {},
                                LogLevel: {}
                            }
                        }
                    }
                }
            }
        },
        S5t: {
            type: "structure",
            members: {
                DlDr: {
                    type: "integer"
                },
                DlFreq: {
                    type: "integer"
                },
                SessionStartTime: {
                    type: "timestamp",
                    timestampFormat: "iso8601"
                },
                SessionTimeout: {
                    type: "integer"
                }
            }
        },
        S60: {
            type: "structure",
            members: {
                AmazonId: {},
                Fingerprint: {
                    type: "string",
                    sensitive: true
                },
                Arn: {}
            }
        },
        S68: {
            type: "structure",
            members: {
                Sidewalk: {
                    shape: "S69"
                }
            }
        },
        S69: {
            type: "structure",
            members: {
                AmazonIdEventTopic: {}
            }
        },
        S6b: {
            type: "structure",
            members: {
                Sidewalk: {
                    shape: "S69"
                }
            }
        },
        S7d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SigningAlg", "Value" ],
                members: {
                    SigningAlg: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {
        ListDestinations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDeviceProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListFuotaTasks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMulticastGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMulticastGroupsByFuotaTask: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListServiceProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWirelessDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWirelessGateways: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["location"] = {};

AWS.Location = AWS.Service.defineService("location", [ "2020-11-19" ]);

AWS.apiLoader.services["location"]["2020-11-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-11-19",
        endpointPrefix: "geo",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Location Service",
        serviceId: "Location",
        signatureVersion: "v4",
        signingName: "geo",
        uid: "location-2020-11-19"
    },
    operations: {
        AssociateTrackerConsumer: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/consumers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ConsumerArn", "TrackerName" ],
                members: {
                    ConsumerArn: {},
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        BatchDeleteDevicePositionHistory: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/delete-positions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceIds", "TrackerName" ],
                members: {
                    DeviceIds: {
                        type: "list",
                        member: {}
                    },
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Errors" ],
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceId", "Error" ],
                            members: {
                                DeviceId: {},
                                Error: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        BatchDeleteGeofence: {
            http: {
                requestUri: "/geofencing/v0/collections/{CollectionName}/delete-geofences",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName", "GeofenceIds" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    GeofenceIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Errors" ],
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Error", "GeofenceId" ],
                            members: {
                                Error: {
                                    shape: "Sb"
                                },
                                GeofenceId: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        BatchEvaluateGeofences: {
            http: {
                requestUri: "/geofencing/v0/collections/{CollectionName}/positions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName", "DevicePositionUpdates" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    DevicePositionUpdates: {
                        type: "list",
                        member: {
                            shape: "Sl"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Errors" ],
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceId", "Error", "SampleTime" ],
                            members: {
                                DeviceId: {},
                                Error: {
                                    shape: "Sb"
                                },
                                SampleTime: {
                                    shape: "So"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        BatchGetDevicePosition: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/get-positions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceIds", "TrackerName" ],
                members: {
                    DeviceIds: {
                        type: "list",
                        member: {}
                    },
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DevicePositions", "Errors" ],
                members: {
                    DevicePositions: {
                        shape: "Sw"
                    },
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceId", "Error" ],
                            members: {
                                DeviceId: {},
                                Error: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        BatchPutGeofence: {
            http: {
                requestUri: "/geofencing/v0/collections/{CollectionName}/put-geofences",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName", "Entries" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "GeofenceId", "Geometry" ],
                            members: {
                                GeofenceId: {},
                                Geometry: {
                                    shape: "S13"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Errors", "Successes" ],
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Error", "GeofenceId" ],
                            members: {
                                Error: {
                                    shape: "Sb"
                                },
                                GeofenceId: {}
                            }
                        }
                    },
                    Successes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreateTime", "GeofenceId", "UpdateTime" ],
                            members: {
                                CreateTime: {
                                    shape: "So"
                                },
                                GeofenceId: {},
                                UpdateTime: {
                                    shape: "So"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        BatchUpdateDevicePosition: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/positions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TrackerName", "Updates" ],
                members: {
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    },
                    Updates: {
                        type: "list",
                        member: {
                            shape: "Sl"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Errors" ],
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceId", "Error", "SampleTime" ],
                            members: {
                                DeviceId: {},
                                Error: {
                                    shape: "Sb"
                                },
                                SampleTime: {
                                    shape: "So"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        CalculateRoute: {
            http: {
                requestUri: "/routes/v0/calculators/{CalculatorName}/calculate/route",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CalculatorName", "DeparturePosition", "DestinationPosition" ],
                members: {
                    CalculatorName: {
                        location: "uri",
                        locationName: "CalculatorName"
                    },
                    CarModeOptions: {
                        type: "structure",
                        members: {
                            AvoidFerries: {
                                type: "boolean"
                            },
                            AvoidTolls: {
                                type: "boolean"
                            }
                        }
                    },
                    DepartNow: {
                        type: "boolean"
                    },
                    DeparturePosition: {
                        shape: "Sm"
                    },
                    DepartureTime: {
                        shape: "So"
                    },
                    DestinationPosition: {
                        shape: "Sm"
                    },
                    DistanceUnit: {},
                    IncludeLegGeometry: {
                        type: "boolean"
                    },
                    TravelMode: {},
                    TruckModeOptions: {
                        type: "structure",
                        members: {
                            AvoidFerries: {
                                type: "boolean"
                            },
                            AvoidTolls: {
                                type: "boolean"
                            },
                            Dimensions: {
                                type: "structure",
                                members: {
                                    Height: {
                                        type: "double"
                                    },
                                    Length: {
                                        type: "double"
                                    },
                                    Unit: {},
                                    Width: {
                                        type: "double"
                                    }
                                }
                            },
                            Weight: {
                                type: "structure",
                                members: {
                                    Total: {
                                        type: "double"
                                    },
                                    Unit: {}
                                }
                            }
                        }
                    },
                    WaypointPositions: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Legs", "Summary" ],
                members: {
                    Legs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Distance", "DurationSeconds", "EndPosition", "StartPosition", "Steps" ],
                            members: {
                                Distance: {
                                    type: "double"
                                },
                                DurationSeconds: {
                                    type: "double"
                                },
                                EndPosition: {
                                    shape: "Sm"
                                },
                                Geometry: {
                                    type: "structure",
                                    members: {
                                        LineString: {
                                            type: "list",
                                            member: {
                                                shape: "Sm"
                                            }
                                        }
                                    }
                                },
                                StartPosition: {
                                    shape: "Sm"
                                },
                                Steps: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Distance", "DurationSeconds", "EndPosition", "StartPosition" ],
                                        members: {
                                            Distance: {
                                                type: "double"
                                            },
                                            DurationSeconds: {
                                                type: "double"
                                            },
                                            EndPosition: {
                                                shape: "Sm"
                                            },
                                            GeometryOffset: {
                                                type: "integer"
                                            },
                                            StartPosition: {
                                                shape: "Sm"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Summary: {
                        type: "structure",
                        required: [ "DataSource", "Distance", "DistanceUnit", "DurationSeconds", "RouteBBox" ],
                        members: {
                            DataSource: {},
                            Distance: {
                                type: "double"
                            },
                            DistanceUnit: {},
                            DurationSeconds: {
                                type: "double"
                            },
                            RouteBBox: {
                                shape: "S2a"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "routes."
            }
        },
        CreateGeofenceCollection: {
            http: {
                requestUri: "/geofencing/v0/collections",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName", "PricingPlan" ],
                members: {
                    CollectionName: {},
                    Description: {},
                    KmsKeyId: {},
                    PricingPlan: {},
                    PricingPlanDataSource: {},
                    Tags: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CollectionArn", "CollectionName", "CreateTime" ],
                members: {
                    CollectionArn: {},
                    CollectionName: {},
                    CreateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            },
            idempotent: true
        },
        CreateMap: {
            http: {
                requestUri: "/maps/v0/maps",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Configuration", "MapName", "PricingPlan" ],
                members: {
                    Configuration: {
                        shape: "S2k"
                    },
                    Description: {},
                    MapName: {},
                    PricingPlan: {},
                    Tags: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "MapArn", "MapName" ],
                members: {
                    CreateTime: {
                        shape: "So"
                    },
                    MapArn: {},
                    MapName: {}
                }
            },
            endpoint: {
                hostPrefix: "maps."
            },
            idempotent: true
        },
        CreatePlaceIndex: {
            http: {
                requestUri: "/places/v0/indexes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DataSource", "IndexName", "PricingPlan" ],
                members: {
                    DataSource: {},
                    DataSourceConfiguration: {
                        shape: "S2o"
                    },
                    Description: {},
                    IndexName: {},
                    PricingPlan: {},
                    Tags: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "IndexArn", "IndexName" ],
                members: {
                    CreateTime: {
                        shape: "So"
                    },
                    IndexArn: {},
                    IndexName: {}
                }
            },
            endpoint: {
                hostPrefix: "places."
            },
            idempotent: true
        },
        CreateRouteCalculator: {
            http: {
                requestUri: "/routes/v0/calculators",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CalculatorName", "DataSource", "PricingPlan" ],
                members: {
                    CalculatorName: {},
                    DataSource: {},
                    Description: {},
                    PricingPlan: {},
                    Tags: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CalculatorArn", "CalculatorName", "CreateTime" ],
                members: {
                    CalculatorArn: {},
                    CalculatorName: {},
                    CreateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "routes."
            },
            idempotent: true
        },
        CreateTracker: {
            http: {
                requestUri: "/tracking/v0/trackers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PricingPlan", "TrackerName" ],
                members: {
                    Description: {},
                    KmsKeyId: {},
                    PositionFiltering: {},
                    PricingPlan: {},
                    PricingPlanDataSource: {},
                    Tags: {
                        shape: "S2f"
                    },
                    TrackerName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "TrackerArn", "TrackerName" ],
                members: {
                    CreateTime: {
                        shape: "So"
                    },
                    TrackerArn: {},
                    TrackerName: {}
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            },
            idempotent: true
        },
        DeleteGeofenceCollection: {
            http: {
                method: "DELETE",
                requestUri: "/geofencing/v0/collections/{CollectionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "geofencing."
            },
            idempotent: true
        },
        DeleteMap: {
            http: {
                method: "DELETE",
                requestUri: "/maps/v0/maps/{MapName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MapName" ],
                members: {
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "maps."
            },
            idempotent: true
        },
        DeletePlaceIndex: {
            http: {
                method: "DELETE",
                requestUri: "/places/v0/indexes/{IndexName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IndexName" ],
                members: {
                    IndexName: {
                        location: "uri",
                        locationName: "IndexName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "places."
            },
            idempotent: true
        },
        DeleteRouteCalculator: {
            http: {
                method: "DELETE",
                requestUri: "/routes/v0/calculators/{CalculatorName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CalculatorName" ],
                members: {
                    CalculatorName: {
                        location: "uri",
                        locationName: "CalculatorName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "routes."
            },
            idempotent: true
        },
        DeleteTracker: {
            http: {
                method: "DELETE",
                requestUri: "/tracking/v0/trackers/{TrackerName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TrackerName" ],
                members: {
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "tracking."
            },
            idempotent: true
        },
        DescribeGeofenceCollection: {
            http: {
                method: "GET",
                requestUri: "/geofencing/v0/collections/{CollectionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CollectionArn", "CollectionName", "CreateTime", "Description", "PricingPlan", "UpdateTime" ],
                members: {
                    CollectionArn: {},
                    CollectionName: {},
                    CreateTime: {
                        shape: "So"
                    },
                    Description: {},
                    KmsKeyId: {},
                    PricingPlan: {},
                    PricingPlanDataSource: {},
                    Tags: {
                        shape: "S2f"
                    },
                    UpdateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        DescribeMap: {
            http: {
                method: "GET",
                requestUri: "/maps/v0/maps/{MapName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MapName" ],
                members: {
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Configuration", "CreateTime", "DataSource", "Description", "MapArn", "MapName", "PricingPlan", "UpdateTime" ],
                members: {
                    Configuration: {
                        shape: "S2k"
                    },
                    CreateTime: {
                        shape: "So"
                    },
                    DataSource: {},
                    Description: {},
                    MapArn: {},
                    MapName: {},
                    PricingPlan: {},
                    Tags: {
                        shape: "S2f"
                    },
                    UpdateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "maps."
            }
        },
        DescribePlaceIndex: {
            http: {
                method: "GET",
                requestUri: "/places/v0/indexes/{IndexName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IndexName" ],
                members: {
                    IndexName: {
                        location: "uri",
                        locationName: "IndexName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "DataSource", "DataSourceConfiguration", "Description", "IndexArn", "IndexName", "PricingPlan", "UpdateTime" ],
                members: {
                    CreateTime: {
                        shape: "So"
                    },
                    DataSource: {},
                    DataSourceConfiguration: {
                        shape: "S2o"
                    },
                    Description: {},
                    IndexArn: {},
                    IndexName: {},
                    PricingPlan: {},
                    Tags: {
                        shape: "S2f"
                    },
                    UpdateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "places."
            }
        },
        DescribeRouteCalculator: {
            http: {
                method: "GET",
                requestUri: "/routes/v0/calculators/{CalculatorName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CalculatorName" ],
                members: {
                    CalculatorName: {
                        location: "uri",
                        locationName: "CalculatorName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CalculatorArn", "CalculatorName", "CreateTime", "DataSource", "Description", "PricingPlan", "UpdateTime" ],
                members: {
                    CalculatorArn: {},
                    CalculatorName: {},
                    CreateTime: {
                        shape: "So"
                    },
                    DataSource: {},
                    Description: {},
                    PricingPlan: {},
                    Tags: {
                        shape: "S2f"
                    },
                    UpdateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "routes."
            }
        },
        DescribeTracker: {
            http: {
                method: "GET",
                requestUri: "/tracking/v0/trackers/{TrackerName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TrackerName" ],
                members: {
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "Description", "PricingPlan", "TrackerArn", "TrackerName", "UpdateTime" ],
                members: {
                    CreateTime: {
                        shape: "So"
                    },
                    Description: {},
                    KmsKeyId: {},
                    PositionFiltering: {},
                    PricingPlan: {},
                    PricingPlanDataSource: {},
                    Tags: {
                        shape: "S2f"
                    },
                    TrackerArn: {},
                    TrackerName: {},
                    UpdateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        DisassociateTrackerConsumer: {
            http: {
                method: "DELETE",
                requestUri: "/tracking/v0/trackers/{TrackerName}/consumers/{ConsumerArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ConsumerArn", "TrackerName" ],
                members: {
                    ConsumerArn: {
                        location: "uri",
                        locationName: "ConsumerArn"
                    },
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        GetDevicePosition: {
            http: {
                method: "GET",
                requestUri: "/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/positions/latest",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceId", "TrackerName" ],
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    },
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Position", "ReceivedTime", "SampleTime" ],
                members: {
                    DeviceId: {},
                    Position: {
                        shape: "Sm"
                    },
                    ReceivedTime: {
                        shape: "So"
                    },
                    SampleTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        GetDevicePositionHistory: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/devices/{DeviceId}/list-positions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceId", "TrackerName" ],
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    },
                    EndTimeExclusive: {
                        shape: "So"
                    },
                    NextToken: {},
                    StartTimeInclusive: {
                        shape: "So"
                    },
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DevicePositions" ],
                members: {
                    DevicePositions: {
                        shape: "Sw"
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        GetGeofence: {
            http: {
                method: "GET",
                requestUri: "/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName", "GeofenceId" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    GeofenceId: {
                        location: "uri",
                        locationName: "GeofenceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "GeofenceId", "Geometry", "Status", "UpdateTime" ],
                members: {
                    CreateTime: {
                        shape: "So"
                    },
                    GeofenceId: {},
                    Geometry: {
                        shape: "S13"
                    },
                    Status: {},
                    UpdateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        GetMapGlyphs: {
            http: {
                method: "GET",
                requestUri: "/maps/v0/maps/{MapName}/glyphs/{FontStack}/{FontUnicodeRange}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FontStack", "FontUnicodeRange", "MapName" ],
                members: {
                    FontStack: {
                        location: "uri",
                        locationName: "FontStack"
                    },
                    FontUnicodeRange: {
                        location: "uri",
                        locationName: "FontUnicodeRange"
                    },
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blob: {
                        type: "blob"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "Blob"
            },
            endpoint: {
                hostPrefix: "maps."
            }
        },
        GetMapSprites: {
            http: {
                method: "GET",
                requestUri: "/maps/v0/maps/{MapName}/sprites/{FileName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FileName", "MapName" ],
                members: {
                    FileName: {
                        location: "uri",
                        locationName: "FileName"
                    },
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blob: {
                        type: "blob"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "Blob"
            },
            endpoint: {
                hostPrefix: "maps."
            }
        },
        GetMapStyleDescriptor: {
            http: {
                method: "GET",
                requestUri: "/maps/v0/maps/{MapName}/style-descriptor",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MapName" ],
                members: {
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blob: {
                        type: "blob"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "Blob"
            },
            endpoint: {
                hostPrefix: "maps."
            }
        },
        GetMapTile: {
            http: {
                method: "GET",
                requestUri: "/maps/v0/maps/{MapName}/tiles/{Z}/{X}/{Y}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MapName", "X", "Y", "Z" ],
                members: {
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    },
                    X: {
                        location: "uri",
                        locationName: "X"
                    },
                    Y: {
                        location: "uri",
                        locationName: "Y"
                    },
                    Z: {
                        location: "uri",
                        locationName: "Z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blob: {
                        type: "blob"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "Blob"
            },
            endpoint: {
                hostPrefix: "maps."
            }
        },
        ListDevicePositions: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/list-positions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TrackerName" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceId", "Position", "SampleTime" ],
                            members: {
                                DeviceId: {},
                                Position: {
                                    shape: "Sm"
                                },
                                SampleTime: {
                                    shape: "So"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        ListGeofenceCollections: {
            http: {
                requestUri: "/geofencing/v0/list-collections",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CollectionName", "CreateTime", "Description", "PricingPlan", "UpdateTime" ],
                            members: {
                                CollectionName: {},
                                CreateTime: {
                                    shape: "So"
                                },
                                Description: {},
                                PricingPlan: {},
                                PricingPlanDataSource: {},
                                UpdateTime: {
                                    shape: "So"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        ListGeofences: {
            http: {
                requestUri: "/geofencing/v0/collections/{CollectionName}/list-geofences",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreateTime", "GeofenceId", "Geometry", "Status", "UpdateTime" ],
                            members: {
                                CreateTime: {
                                    shape: "So"
                                },
                                GeofenceId: {},
                                Geometry: {
                                    shape: "S13"
                                },
                                Status: {},
                                UpdateTime: {
                                    shape: "So"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        ListMaps: {
            http: {
                requestUri: "/maps/v0/list-maps",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreateTime", "DataSource", "Description", "MapName", "PricingPlan", "UpdateTime" ],
                            members: {
                                CreateTime: {
                                    shape: "So"
                                },
                                DataSource: {},
                                Description: {},
                                MapName: {},
                                PricingPlan: {},
                                UpdateTime: {
                                    shape: "So"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "maps."
            }
        },
        ListPlaceIndexes: {
            http: {
                requestUri: "/places/v0/list-indexes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreateTime", "DataSource", "Description", "IndexName", "PricingPlan", "UpdateTime" ],
                            members: {
                                CreateTime: {
                                    shape: "So"
                                },
                                DataSource: {},
                                Description: {},
                                IndexName: {},
                                PricingPlan: {},
                                UpdateTime: {
                                    shape: "So"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "places."
            }
        },
        ListRouteCalculators: {
            http: {
                requestUri: "/routes/v0/list-calculators",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CalculatorName", "CreateTime", "DataSource", "Description", "PricingPlan", "UpdateTime" ],
                            members: {
                                CalculatorName: {},
                                CreateTime: {
                                    shape: "So"
                                },
                                DataSource: {},
                                Description: {},
                                PricingPlan: {},
                                UpdateTime: {
                                    shape: "So"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "routes."
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S2f"
                    }
                }
            },
            endpoint: {
                hostPrefix: "metadata."
            }
        },
        ListTrackerConsumers: {
            http: {
                requestUri: "/tracking/v0/trackers/{TrackerName}/list-consumers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TrackerName" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ConsumerArns" ],
                members: {
                    ConsumerArns: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        ListTrackers: {
            http: {
                requestUri: "/tracking/v0/list-trackers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreateTime", "Description", "PricingPlan", "TrackerName", "UpdateTime" ],
                            members: {
                                CreateTime: {
                                    shape: "So"
                                },
                                Description: {},
                                PricingPlan: {},
                                PricingPlanDataSource: {},
                                TrackerName: {},
                                UpdateTime: {
                                    shape: "So"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            }
        },
        PutGeofence: {
            http: {
                method: "PUT",
                requestUri: "/geofencing/v0/collections/{CollectionName}/geofences/{GeofenceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName", "GeofenceId", "Geometry" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    GeofenceId: {
                        location: "uri",
                        locationName: "GeofenceId"
                    },
                    Geometry: {
                        shape: "S13"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreateTime", "GeofenceId", "UpdateTime" ],
                members: {
                    CreateTime: {
                        shape: "So"
                    },
                    GeofenceId: {},
                    UpdateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            }
        },
        SearchPlaceIndexForPosition: {
            http: {
                requestUri: "/places/v0/indexes/{IndexName}/search/position",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IndexName", "Position" ],
                members: {
                    IndexName: {
                        location: "uri",
                        locationName: "IndexName"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    Position: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Results", "Summary" ],
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Place" ],
                            members: {
                                Place: {
                                    shape: "S5e"
                                }
                            }
                        }
                    },
                    Summary: {
                        type: "structure",
                        required: [ "DataSource", "Position" ],
                        members: {
                            DataSource: {},
                            MaxResults: {
                                type: "integer"
                            },
                            Position: {
                                shape: "Sm"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "places."
            }
        },
        SearchPlaceIndexForText: {
            http: {
                requestUri: "/places/v0/indexes/{IndexName}/search/text",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IndexName", "Text" ],
                members: {
                    BiasPosition: {
                        shape: "Sm"
                    },
                    FilterBBox: {
                        shape: "S2a"
                    },
                    FilterCountries: {
                        shape: "S5i"
                    },
                    IndexName: {
                        location: "uri",
                        locationName: "IndexName"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    Text: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Results", "Summary" ],
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Place" ],
                            members: {
                                Place: {
                                    shape: "S5e"
                                }
                            }
                        }
                    },
                    Summary: {
                        type: "structure",
                        required: [ "DataSource", "Text" ],
                        members: {
                            BiasPosition: {
                                shape: "Sm"
                            },
                            DataSource: {},
                            FilterBBox: {
                                shape: "S2a"
                            },
                            FilterCountries: {
                                shape: "S5i"
                            },
                            MaxResults: {
                                type: "integer"
                            },
                            ResultBBox: {
                                shape: "S2a"
                            },
                            Text: {
                                type: "string",
                                sensitive: true
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "places."
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "metadata."
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "metadata."
            },
            idempotent: true
        },
        UpdateGeofenceCollection: {
            http: {
                method: "PATCH",
                requestUri: "/geofencing/v0/collections/{CollectionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CollectionName" ],
                members: {
                    CollectionName: {
                        location: "uri",
                        locationName: "CollectionName"
                    },
                    Description: {},
                    PricingPlan: {},
                    PricingPlanDataSource: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CollectionArn", "CollectionName", "UpdateTime" ],
                members: {
                    CollectionArn: {},
                    CollectionName: {},
                    UpdateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "geofencing."
            },
            idempotent: true
        },
        UpdateMap: {
            http: {
                method: "PATCH",
                requestUri: "/maps/v0/maps/{MapName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MapName" ],
                members: {
                    Description: {},
                    MapName: {
                        location: "uri",
                        locationName: "MapName"
                    },
                    PricingPlan: {}
                }
            },
            output: {
                type: "structure",
                required: [ "MapArn", "MapName", "UpdateTime" ],
                members: {
                    MapArn: {},
                    MapName: {},
                    UpdateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "maps."
            },
            idempotent: true
        },
        UpdatePlaceIndex: {
            http: {
                method: "PATCH",
                requestUri: "/places/v0/indexes/{IndexName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IndexName" ],
                members: {
                    DataSourceConfiguration: {
                        shape: "S2o"
                    },
                    Description: {},
                    IndexName: {
                        location: "uri",
                        locationName: "IndexName"
                    },
                    PricingPlan: {}
                }
            },
            output: {
                type: "structure",
                required: [ "IndexArn", "IndexName", "UpdateTime" ],
                members: {
                    IndexArn: {},
                    IndexName: {},
                    UpdateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "places."
            },
            idempotent: true
        },
        UpdateRouteCalculator: {
            http: {
                method: "PATCH",
                requestUri: "/routes/v0/calculators/{CalculatorName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CalculatorName" ],
                members: {
                    CalculatorName: {
                        location: "uri",
                        locationName: "CalculatorName"
                    },
                    Description: {},
                    PricingPlan: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CalculatorArn", "CalculatorName", "UpdateTime" ],
                members: {
                    CalculatorArn: {},
                    CalculatorName: {},
                    UpdateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "routes."
            },
            idempotent: true
        },
        UpdateTracker: {
            http: {
                method: "PATCH",
                requestUri: "/tracking/v0/trackers/{TrackerName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TrackerName" ],
                members: {
                    Description: {},
                    PositionFiltering: {},
                    PricingPlan: {},
                    PricingPlanDataSource: {},
                    TrackerName: {
                        location: "uri",
                        locationName: "TrackerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrackerArn", "TrackerName", "UpdateTime" ],
                members: {
                    TrackerArn: {},
                    TrackerName: {},
                    UpdateTime: {
                        shape: "So"
                    }
                }
            },
            endpoint: {
                hostPrefix: "tracking."
            },
            idempotent: true
        }
    },
    shapes: {
        Sb: {
            type: "structure",
            members: {
                Code: {},
                Message: {}
            }
        },
        Sl: {
            type: "structure",
            required: [ "DeviceId", "Position", "SampleTime" ],
            members: {
                DeviceId: {},
                Position: {
                    shape: "Sm"
                },
                SampleTime: {
                    shape: "So"
                }
            }
        },
        Sm: {
            type: "list",
            member: {
                type: "double"
            },
            sensitive: true
        },
        So: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Position", "ReceivedTime", "SampleTime" ],
                members: {
                    DeviceId: {},
                    Position: {
                        shape: "Sm"
                    },
                    ReceivedTime: {
                        shape: "So"
                    },
                    SampleTime: {
                        shape: "So"
                    }
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                Polygon: {
                    type: "list",
                    member: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    }
                }
            }
        },
        S2a: {
            type: "list",
            member: {
                type: "double"
            },
            sensitive: true
        },
        S2f: {
            type: "map",
            key: {},
            value: {}
        },
        S2k: {
            type: "structure",
            required: [ "Style" ],
            members: {
                Style: {}
            }
        },
        S2o: {
            type: "structure",
            members: {
                IntendedUse: {}
            }
        },
        S5e: {
            type: "structure",
            required: [ "Geometry" ],
            members: {
                AddressNumber: {},
                Country: {},
                Geometry: {
                    type: "structure",
                    members: {
                        Point: {
                            shape: "Sm"
                        }
                    }
                },
                Label: {},
                Municipality: {},
                Neighborhood: {},
                PostalCode: {},
                Region: {},
                Street: {},
                SubRegion: {}
            }
        },
        S5i: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetDevicePositionHistory: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "DevicePositions"
        },
        ListDevicePositions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        },
        ListGeofenceCollections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        },
        ListGeofences: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Entries"
        },
        ListMaps: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        },
        ListPlaceIndexes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        },
        ListRouteCalculators: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        },
        ListTrackerConsumers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ConsumerArns"
        },
        ListTrackers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entries"
        }
    }
};

AWS.apiLoader.services["wellarchitected"] = {};

AWS.WellArchitected = AWS.Service.defineService("wellarchitected", [ "2020-03-31" ]);

AWS.apiLoader.services["wellarchitected"]["2020-03-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-03-31",
        endpointPrefix: "wellarchitected",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Well-Architected",
        serviceFullName: "AWS Well-Architected Tool",
        serviceId: "WellArchitected",
        signatureVersion: "v4",
        signingName: "wellarchitected",
        uid: "wellarchitected-2020-03-31"
    },
    operations: {
        AssociateLenses: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}/associateLenses"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAliases" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAliases: {
                        shape: "S3"
                    }
                }
            }
        },
        CreateMilestone: {
            http: {
                requestUri: "/workloads/{WorkloadId}/milestones"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "MilestoneName", "ClientRequestToken" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    MilestoneName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    }
                }
            }
        },
        CreateWorkload: {
            http: {
                requestUri: "/workloads"
            },
            input: {
                type: "structure",
                required: [ "WorkloadName", "Description", "Environment", "ReviewOwner", "Lenses", "ClientRequestToken" ],
                members: {
                    WorkloadName: {},
                    Description: {},
                    Environment: {},
                    AccountIds: {
                        shape: "Se"
                    },
                    AwsRegions: {
                        shape: "Sg"
                    },
                    NonAwsRegions: {
                        shape: "Si"
                    },
                    PillarPriorities: {
                        shape: "Sk"
                    },
                    ArchitecturalDesign: {},
                    ReviewOwner: {},
                    IndustryType: {},
                    Industry: {},
                    Lenses: {
                        shape: "Sq"
                    },
                    Notes: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    WorkloadArn: {}
                }
            }
        },
        CreateWorkloadShare: {
            http: {
                requestUri: "/workloads/{WorkloadId}/shares"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "SharedWith", "PermissionType", "ClientRequestToken" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    SharedWith: {},
                    PermissionType: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    ShareId: {}
                }
            }
        },
        DeleteWorkload: {
            http: {
                method: "DELETE",
                requestUri: "/workloads/{WorkloadId}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "ClientRequestToken" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "ClientRequestToken"
                    }
                }
            }
        },
        DeleteWorkloadShare: {
            http: {
                method: "DELETE",
                requestUri: "/workloads/{WorkloadId}/shares/{ShareId}"
            },
            input: {
                type: "structure",
                required: [ "ShareId", "WorkloadId", "ClientRequestToken" ],
                members: {
                    ShareId: {
                        location: "uri",
                        locationName: "ShareId"
                    },
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "ClientRequestToken"
                    }
                }
            }
        },
        DisassociateLenses: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}/disassociateLenses"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAliases" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAliases: {
                        shape: "S3"
                    }
                }
            }
        },
        GetAnswer: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias", "QuestionId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    QuestionId: {
                        location: "uri",
                        locationName: "QuestionId"
                    },
                    MilestoneNumber: {
                        location: "querystring",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    },
                    LensAlias: {},
                    Answer: {
                        shape: "S18"
                    }
                }
            }
        },
        GetLensReview: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    MilestoneNumber: {
                        location: "querystring",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    },
                    LensReview: {
                        shape: "S1t"
                    }
                }
            }
        },
        GetLensReviewReport: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/report"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    MilestoneNumber: {
                        location: "querystring",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    },
                    LensReviewReport: {
                        type: "structure",
                        members: {
                            LensAlias: {},
                            Base64String: {}
                        }
                    }
                }
            }
        },
        GetLensVersionDifference: {
            http: {
                method: "GET",
                requestUri: "/lenses/{LensAlias}/versionDifference"
            },
            input: {
                type: "structure",
                required: [ "LensAlias", "BaseLensVersion" ],
                members: {
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    BaseLensVersion: {
                        location: "querystring",
                        locationName: "BaseLensVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LensAlias: {},
                    BaseLensVersion: {},
                    LatestLensVersion: {},
                    VersionDifferences: {
                        type: "structure",
                        members: {
                            PillarDifferences: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        PillarId: {},
                                        DifferenceStatus: {},
                                        QuestionDifferences: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    QuestionId: {},
                                                    QuestionTitle: {},
                                                    DifferenceStatus: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetMilestone: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/milestones/{MilestoneNumber}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "MilestoneNumber" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    MilestoneNumber: {
                        location: "uri",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    Milestone: {
                        type: "structure",
                        members: {
                            MilestoneNumber: {
                                type: "integer"
                            },
                            MilestoneName: {},
                            RecordedAt: {
                                type: "timestamp"
                            },
                            Workload: {
                                shape: "S2j"
                            }
                        }
                    }
                }
            }
        },
        GetWorkload: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Workload: {
                        shape: "S2j"
                    }
                }
            }
        },
        ListAnswers: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    PillarId: {
                        location: "querystring",
                        locationName: "PillarId"
                    },
                    MilestoneNumber: {
                        location: "querystring",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    },
                    LensAlias: {},
                    AnswerSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                QuestionId: {},
                                PillarId: {},
                                QuestionTitle: {},
                                Choices: {
                                    shape: "S1d"
                                },
                                SelectedChoices: {
                                    shape: "S1i"
                                },
                                ChoiceAnswerSummaries: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ChoiceId: {},
                                            Status: {},
                                            Reason: {}
                                        }
                                    }
                                },
                                IsApplicable: {
                                    type: "boolean"
                                },
                                Risk: {},
                                Reason: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLensReviewImprovements: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/improvements"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    PillarId: {
                        location: "querystring",
                        locationName: "PillarId"
                    },
                    MilestoneNumber: {
                        location: "querystring",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    },
                    LensAlias: {},
                    ImprovementSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                QuestionId: {},
                                PillarId: {},
                                QuestionTitle: {},
                                Risk: {},
                                ImprovementPlanUrl: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLensReviews: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/lensReviews"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    MilestoneNumber: {
                        location: "querystring",
                        locationName: "MilestoneNumber",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneNumber: {
                        type: "integer"
                    },
                    LensReviewSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LensAlias: {},
                                LensVersion: {},
                                LensName: {},
                                LensStatus: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                RiskCounts: {
                                    shape: "S20"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLenses: {
            http: {
                method: "GET",
                requestUri: "/lenses"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LensSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LensAlias: {},
                                LensVersion: {},
                                LensName: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMilestones: {
            http: {
                requestUri: "/workloads/{WorkloadId}/milestonesSummaries"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    MilestoneSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MilestoneNumber: {
                                    type: "integer"
                                },
                                MilestoneName: {},
                                RecordedAt: {
                                    type: "timestamp"
                                },
                                WorkloadSummary: {
                                    shape: "S3f"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNotifications: {
            http: {
                requestUri: "/notifications"
            },
            input: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NotificationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                LensUpgradeSummary: {
                                    type: "structure",
                                    members: {
                                        WorkloadId: {},
                                        WorkloadName: {},
                                        LensAlias: {},
                                        CurrentLensVersion: {},
                                        LatestLensVersion: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListShareInvitations: {
            http: {
                method: "GET",
                requestUri: "/shareInvitations"
            },
            input: {
                type: "structure",
                members: {
                    WorkloadNamePrefix: {
                        location: "querystring",
                        locationName: "WorkloadNamePrefix"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ShareInvitationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ShareInvitationId: {},
                                SharedBy: {},
                                SharedWith: {},
                                PermissionType: {},
                                WorkloadName: {},
                                WorkloadId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{WorkloadArn}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadArn" ],
                members: {
                    WorkloadArn: {
                        location: "uri",
                        locationName: "WorkloadArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Ss"
                    }
                }
            }
        },
        ListWorkloadShares: {
            http: {
                method: "GET",
                requestUri: "/workloads/{WorkloadId}/shares"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    SharedWithPrefix: {
                        location: "querystring",
                        locationName: "SharedWithPrefix"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    WorkloadShareSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ShareId: {},
                                SharedWith: {},
                                PermissionType: {},
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListWorkloads: {
            http: {
                requestUri: "/workloadsSummaries"
            },
            input: {
                type: "structure",
                members: {
                    WorkloadNamePrefix: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadSummaries: {
                        type: "list",
                        member: {
                            shape: "S3f"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{WorkloadArn}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadArn", "Tags" ],
                members: {
                    WorkloadArn: {
                        location: "uri",
                        locationName: "WorkloadArn"
                    },
                    Tags: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{WorkloadArn}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadArn", "TagKeys" ],
                members: {
                    WorkloadArn: {
                        location: "uri",
                        locationName: "WorkloadArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAnswer: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias", "QuestionId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    QuestionId: {
                        location: "uri",
                        locationName: "QuestionId"
                    },
                    SelectedChoices: {
                        shape: "S1i"
                    },
                    ChoiceUpdates: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "Status" ],
                            members: {
                                Status: {},
                                Reason: {},
                                Notes: {}
                            }
                        }
                    },
                    Notes: {},
                    IsApplicable: {
                        type: "boolean"
                    },
                    Reason: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    LensAlias: {},
                    Answer: {
                        shape: "S18"
                    }
                }
            }
        },
        UpdateLensReview: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    LensNotes: {},
                    PillarNotes: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    LensReview: {
                        shape: "S1t"
                    }
                }
            }
        },
        UpdateShareInvitation: {
            http: {
                method: "PATCH",
                requestUri: "/shareInvitations/{ShareInvitationId}"
            },
            input: {
                type: "structure",
                required: [ "ShareInvitationId", "ShareInvitationAction" ],
                members: {
                    ShareInvitationId: {
                        location: "uri",
                        locationName: "ShareInvitationId"
                    },
                    ShareInvitationAction: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ShareInvitation: {
                        type: "structure",
                        members: {
                            ShareInvitationId: {},
                            WorkloadId: {}
                        }
                    }
                }
            }
        },
        UpdateWorkload: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    WorkloadName: {},
                    Description: {},
                    Environment: {},
                    AccountIds: {
                        shape: "Se"
                    },
                    AwsRegions: {
                        shape: "Sg"
                    },
                    NonAwsRegions: {
                        shape: "Si"
                    },
                    PillarPriorities: {
                        shape: "Sk"
                    },
                    ArchitecturalDesign: {},
                    ReviewOwner: {},
                    IsReviewOwnerUpdateAcknowledged: {
                        type: "boolean"
                    },
                    IndustryType: {},
                    Industry: {},
                    Notes: {},
                    ImprovementStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Workload: {
                        shape: "S2j"
                    }
                }
            }
        },
        UpdateWorkloadShare: {
            http: {
                method: "PATCH",
                requestUri: "/workloads/{WorkloadId}/shares/{ShareId}"
            },
            input: {
                type: "structure",
                required: [ "ShareId", "WorkloadId", "PermissionType" ],
                members: {
                    ShareId: {
                        location: "uri",
                        locationName: "ShareId"
                    },
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    PermissionType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkloadId: {},
                    WorkloadShare: {
                        type: "structure",
                        members: {
                            ShareId: {},
                            SharedBy: {},
                            SharedWith: {},
                            PermissionType: {},
                            Status: {},
                            WorkloadName: {},
                            WorkloadId: {}
                        }
                    }
                }
            }
        },
        UpgradeLensReview: {
            http: {
                method: "PUT",
                requestUri: "/workloads/{WorkloadId}/lensReviews/{LensAlias}/upgrade"
            },
            input: {
                type: "structure",
                required: [ "WorkloadId", "LensAlias", "MilestoneName" ],
                members: {
                    WorkloadId: {
                        location: "uri",
                        locationName: "WorkloadId"
                    },
                    LensAlias: {
                        location: "uri",
                        locationName: "LensAlias"
                    },
                    MilestoneName: {},
                    ClientRequestToken: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        Se: {
            type: "list",
            member: {}
        },
        Sg: {
            type: "list",
            member: {}
        },
        Si: {
            type: "list",
            member: {}
        },
        Sk: {
            type: "list",
            member: {}
        },
        Sq: {
            type: "list",
            member: {}
        },
        Ss: {
            type: "map",
            key: {},
            value: {}
        },
        S18: {
            type: "structure",
            members: {
                QuestionId: {},
                PillarId: {},
                QuestionTitle: {},
                QuestionDescription: {},
                ImprovementPlanUrl: {},
                HelpfulResourceUrl: {},
                Choices: {
                    shape: "S1d"
                },
                SelectedChoices: {
                    shape: "S1i"
                },
                ChoiceAnswers: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ChoiceId: {},
                            Status: {},
                            Reason: {},
                            Notes: {}
                        }
                    }
                },
                IsApplicable: {
                    type: "boolean"
                },
                Risk: {},
                Notes: {},
                Reason: {}
            }
        },
        S1d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ChoiceId: {},
                    Title: {},
                    Description: {}
                }
            }
        },
        S1i: {
            type: "list",
            member: {}
        },
        S1t: {
            type: "structure",
            members: {
                LensAlias: {},
                LensVersion: {},
                LensName: {},
                LensStatus: {},
                PillarReviewSummaries: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            PillarId: {},
                            PillarName: {},
                            Notes: {},
                            RiskCounts: {
                                shape: "S20"
                            }
                        }
                    }
                },
                UpdatedAt: {
                    type: "timestamp"
                },
                Notes: {},
                RiskCounts: {
                    shape: "S20"
                },
                NextToken: {}
            }
        },
        S20: {
            type: "map",
            key: {},
            value: {
                type: "integer"
            }
        },
        S2j: {
            type: "structure",
            members: {
                WorkloadId: {},
                WorkloadArn: {},
                WorkloadName: {},
                Description: {},
                Environment: {},
                UpdatedAt: {
                    type: "timestamp"
                },
                AccountIds: {
                    shape: "Se"
                },
                AwsRegions: {
                    shape: "Sg"
                },
                NonAwsRegions: {
                    shape: "Si"
                },
                ArchitecturalDesign: {},
                ReviewOwner: {},
                ReviewRestrictionDate: {
                    type: "timestamp"
                },
                IsReviewOwnerUpdateAcknowledged: {
                    type: "boolean"
                },
                IndustryType: {},
                Industry: {},
                Notes: {},
                ImprovementStatus: {},
                RiskCounts: {
                    shape: "S20"
                },
                PillarPriorities: {
                    shape: "Sk"
                },
                Lenses: {
                    shape: "Sq"
                },
                Owner: {},
                ShareInvitationId: {},
                Tags: {
                    shape: "Ss"
                }
            }
        },
        S3f: {
            type: "structure",
            members: {
                WorkloadId: {},
                WorkloadArn: {},
                WorkloadName: {},
                Owner: {},
                UpdatedAt: {
                    type: "timestamp"
                },
                Lenses: {
                    shape: "Sq"
                },
                RiskCounts: {
                    shape: "S20"
                },
                ImprovementStatus: {}
            }
        }
    },
    paginators: {
        ListAnswers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLensReviewImprovements: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLensReviews: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLenses: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMilestones: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNotifications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListShareInvitations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWorkloadShares: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWorkloads: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["lexmodelsv2"] = {};

AWS.LexModelsV2 = AWS.Service.defineService("lexmodelsv2", [ "2020-08-07" ]);

AWS.apiLoader.services["lexmodelsv2"]["2020-08-07"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-07",
        endpointPrefix: "models-v2-lex",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Lex Models V2",
        serviceFullName: "Amazon Lex Model Building V2",
        serviceId: "Lex Models V2",
        signatureVersion: "v4",
        signingName: "lex",
        uid: "models.lex.v2-2020-08-07"
    },
    operations: {
        BuildBotLocale: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    botLocaleStatus: {},
                    lastBuildSubmittedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateBot: {
            http: {
                method: "PUT",
                requestUri: "/bots/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botName", "roleArn", "dataPrivacy", "idleSessionTTLInSeconds" ],
                members: {
                    botName: {},
                    description: {},
                    roleArn: {},
                    dataPrivacy: {
                        shape: "Sc"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    botTags: {
                        shape: "Sf"
                    },
                    testBotAliasTags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botName: {},
                    description: {},
                    roleArn: {},
                    dataPrivacy: {
                        shape: "Sc"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    botStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    botTags: {
                        shape: "Sf"
                    },
                    testBotAliasTags: {
                        shape: "Sf"
                    }
                }
            }
        },
        CreateBotAlias: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botaliases/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botAliasName", "botId" ],
                members: {
                    botAliasName: {},
                    description: {},
                    botVersion: {},
                    botAliasLocaleSettings: {
                        shape: "Sm"
                    },
                    conversationLogSettings: {
                        shape: "St"
                    },
                    sentimentAnalysisSettings: {
                        shape: "S16"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botAliasId: {},
                    botAliasName: {},
                    description: {},
                    botVersion: {},
                    botAliasLocaleSettings: {
                        shape: "Sm"
                    },
                    conversationLogSettings: {
                        shape: "St"
                    },
                    sentimentAnalysisSettings: {
                        shape: "S16"
                    },
                    botAliasStatus: {},
                    botId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "Sf"
                    }
                }
            }
        },
        CreateBotLocale: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "nluIntentConfidenceThreshold" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {},
                    description: {},
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    voiceSettings: {
                        shape: "S1c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeName: {},
                    localeId: {},
                    description: {},
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    voiceSettings: {
                        shape: "S1c"
                    },
                    botLocaleStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateBotVersion: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersionLocaleSpecification" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    description: {},
                    botVersionLocaleSpecification: {
                        shape: "S1h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    description: {},
                    botVersion: {},
                    botVersionLocaleSpecification: {
                        shape: "S1h"
                    },
                    botStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateExport: {
            http: {
                method: "PUT",
                requestUri: "/exports/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "resourceSpecification", "fileFormat" ],
                members: {
                    resourceSpecification: {
                        shape: "S1m"
                    },
                    fileFormat: {},
                    filePassword: {
                        shape: "S1q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    exportId: {},
                    resourceSpecification: {
                        shape: "S1m"
                    },
                    fileFormat: {},
                    exportStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateIntent: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "intentName", "botId", "botVersion", "localeId" ],
                members: {
                    intentName: {},
                    description: {},
                    parentIntentSignature: {},
                    sampleUtterances: {
                        shape: "S1v"
                    },
                    dialogCodeHook: {
                        shape: "S1y"
                    },
                    fulfillmentCodeHook: {
                        shape: "S1z"
                    },
                    intentConfirmationSetting: {
                        shape: "S2q"
                    },
                    intentClosingSetting: {
                        shape: "S2t"
                    },
                    inputContexts: {
                        shape: "S2u"
                    },
                    outputContexts: {
                        shape: "S2w"
                    },
                    kendraConfiguration: {
                        shape: "S30"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    intentId: {},
                    intentName: {},
                    description: {},
                    parentIntentSignature: {},
                    sampleUtterances: {
                        shape: "S1v"
                    },
                    dialogCodeHook: {
                        shape: "S1y"
                    },
                    fulfillmentCodeHook: {
                        shape: "S1z"
                    },
                    intentConfirmationSetting: {
                        shape: "S2q"
                    },
                    intentClosingSetting: {
                        shape: "S2t"
                    },
                    inputContexts: {
                        shape: "S2u"
                    },
                    outputContexts: {
                        shape: "S2w"
                    },
                    kendraConfiguration: {
                        shape: "S30"
                    },
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateResourcePolicy: {
            http: {
                requestUri: "/policy/{resourceArn}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "policy" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    policy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceArn: {},
                    revisionId: {}
                }
            }
        },
        CreateResourcePolicyStatement: {
            http: {
                requestUri: "/policy/{resourceArn}/statements/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "statementId", "effect", "principal", "action" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    statementId: {},
                    effect: {},
                    principal: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                service: {},
                                arn: {}
                            }
                        }
                    },
                    action: {
                        type: "list",
                        member: {}
                    },
                    condition: {
                        type: "map",
                        key: {},
                        value: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    },
                    expectedRevisionId: {
                        location: "querystring",
                        locationName: "expectedRevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceArn: {},
                    revisionId: {}
                }
            }
        },
        CreateSlot: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "slotName", "slotTypeId", "valueElicitationSetting", "botId", "botVersion", "localeId", "intentId" ],
                members: {
                    slotName: {},
                    description: {},
                    slotTypeId: {},
                    valueElicitationSetting: {
                        shape: "S3p"
                    },
                    obfuscationSetting: {
                        shape: "S3z"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    },
                    multipleValuesSetting: {
                        shape: "S41"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotId: {},
                    slotName: {},
                    description: {},
                    slotTypeId: {},
                    valueElicitationSetting: {
                        shape: "S3p"
                    },
                    obfuscationSetting: {
                        shape: "S3z"
                    },
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    intentId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    multipleValuesSetting: {
                        shape: "S41"
                    }
                }
            }
        },
        CreateSlotType: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "slotTypeName", "valueSelectionSetting", "botId", "botVersion", "localeId" ],
                members: {
                    slotTypeName: {},
                    description: {},
                    slotTypeValues: {
                        shape: "S44"
                    },
                    valueSelectionSetting: {
                        shape: "S49"
                    },
                    parentSlotTypeSignature: {},
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotTypeId: {},
                    slotTypeName: {},
                    description: {},
                    slotTypeValues: {
                        shape: "S44"
                    },
                    valueSelectionSetting: {
                        shape: "S49"
                    },
                    parentSlotTypeSignature: {},
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateUploadUrl: {
            http: {
                requestUri: "/createuploadurl/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    importId: {},
                    uploadUrl: {}
                }
            }
        },
        DeleteBot: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    skipResourceInUseCheck: {
                        location: "querystring",
                        locationName: "skipResourceInUseCheck",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botStatus: {}
                }
            }
        },
        DeleteBotAlias: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botaliases/{botAliasId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botAliasId", "botId" ],
                members: {
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    skipResourceInUseCheck: {
                        location: "querystring",
                        locationName: "skipResourceInUseCheck",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botAliasId: {},
                    botId: {},
                    botAliasStatus: {}
                }
            }
        },
        DeleteBotLocale: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    botLocaleStatus: {}
                }
            }
        },
        DeleteBotVersion: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botversions/{botVersion}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    skipResourceInUseCheck: {
                        location: "querystring",
                        locationName: "skipResourceInUseCheck",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    botStatus: {}
                }
            }
        },
        DeleteExport: {
            http: {
                method: "DELETE",
                requestUri: "/exports/{exportId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "exportId" ],
                members: {
                    exportId: {
                        location: "uri",
                        locationName: "exportId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    exportId: {},
                    exportStatus: {}
                }
            }
        },
        DeleteImport: {
            http: {
                method: "DELETE",
                requestUri: "/imports/{importId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "importId" ],
                members: {
                    importId: {
                        location: "uri",
                        locationName: "importId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    importId: {},
                    importStatus: {}
                }
            }
        },
        DeleteIntent: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "intentId", "botId", "botVersion", "localeId" ],
                members: {
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            }
        },
        DeleteResourcePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/policy/{resourceArn}/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    expectedRevisionId: {
                        location: "querystring",
                        locationName: "expectedRevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceArn: {},
                    revisionId: {}
                }
            }
        },
        DeleteResourcePolicyStatement: {
            http: {
                method: "DELETE",
                requestUri: "/policy/{resourceArn}/statements/{statementId}/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "statementId" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    statementId: {
                        location: "uri",
                        locationName: "statementId"
                    },
                    expectedRevisionId: {
                        location: "querystring",
                        locationName: "expectedRevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceArn: {},
                    revisionId: {}
                }
            }
        },
        DeleteSlot: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "slotId", "botId", "botVersion", "localeId", "intentId" ],
                members: {
                    slotId: {
                        location: "uri",
                        locationName: "slotId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    }
                }
            }
        },
        DeleteSlotType: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "slotTypeId", "botId", "botVersion", "localeId" ],
                members: {
                    slotTypeId: {
                        location: "uri",
                        locationName: "slotTypeId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    skipResourceInUseCheck: {
                        location: "querystring",
                        locationName: "skipResourceInUseCheck",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteUtterances: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/utterances/",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "botId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    localeId: {
                        location: "querystring",
                        locationName: "localeId"
                    },
                    sessionId: {
                        location: "querystring",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeBot: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botName: {},
                    description: {},
                    roleArn: {},
                    dataPrivacy: {
                        shape: "Sc"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    botStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeBotAlias: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botaliases/{botAliasId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botAliasId", "botId" ],
                members: {
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botAliasId: {},
                    botAliasName: {},
                    description: {},
                    botVersion: {},
                    botAliasLocaleSettings: {
                        shape: "Sm"
                    },
                    conversationLogSettings: {
                        shape: "St"
                    },
                    sentimentAnalysisSettings: {
                        shape: "S16"
                    },
                    botAliasHistoryEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                botVersion: {},
                                startDate: {
                                    type: "timestamp"
                                },
                                endDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    botAliasStatus: {},
                    botId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeBotLocale: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    localeName: {},
                    description: {},
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    voiceSettings: {
                        shape: "S1c"
                    },
                    intentsCount: {
                        type: "integer"
                    },
                    slotTypesCount: {
                        type: "integer"
                    },
                    botLocaleStatus: {},
                    failureReasons: {
                        shape: "S5f"
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    lastBuildSubmittedDateTime: {
                        type: "timestamp"
                    },
                    botLocaleHistoryEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "event", "eventDate" ],
                            members: {
                                event: {},
                                eventDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeBotVersion: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botversions/{botVersion}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botName: {},
                    botVersion: {},
                    description: {},
                    roleArn: {},
                    dataPrivacy: {
                        shape: "Sc"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    botStatus: {},
                    failureReasons: {
                        shape: "S5f"
                    },
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeExport: {
            http: {
                method: "GET",
                requestUri: "/exports/{exportId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "exportId" ],
                members: {
                    exportId: {
                        location: "uri",
                        locationName: "exportId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    exportId: {},
                    resourceSpecification: {
                        shape: "S1m"
                    },
                    fileFormat: {},
                    exportStatus: {},
                    failureReasons: {
                        shape: "S5f"
                    },
                    downloadUrl: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeImport: {
            http: {
                method: "GET",
                requestUri: "/imports/{importId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "importId" ],
                members: {
                    importId: {
                        location: "uri",
                        locationName: "importId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    importId: {},
                    resourceSpecification: {
                        shape: "S5q"
                    },
                    importedResourceId: {},
                    importedResourceName: {},
                    mergeStrategy: {},
                    importStatus: {},
                    failureReasons: {
                        shape: "S5f"
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeIntent: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "intentId", "botId", "botVersion", "localeId" ],
                members: {
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    intentId: {},
                    intentName: {},
                    description: {},
                    parentIntentSignature: {},
                    sampleUtterances: {
                        shape: "S1v"
                    },
                    dialogCodeHook: {
                        shape: "S1y"
                    },
                    fulfillmentCodeHook: {
                        shape: "S1z"
                    },
                    slotPriorities: {
                        shape: "S5x"
                    },
                    intentConfirmationSetting: {
                        shape: "S2q"
                    },
                    intentClosingSetting: {
                        shape: "S2t"
                    },
                    inputContexts: {
                        shape: "S2u"
                    },
                    outputContexts: {
                        shape: "S2w"
                    },
                    kendraConfiguration: {
                        shape: "S30"
                    },
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeResourcePolicy: {
            http: {
                method: "GET",
                requestUri: "/policy/{resourceArn}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceArn: {},
                    policy: {},
                    revisionId: {}
                }
            }
        },
        DescribeSlot: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "slotId", "botId", "botVersion", "localeId", "intentId" ],
                members: {
                    slotId: {
                        location: "uri",
                        locationName: "slotId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotId: {},
                    slotName: {},
                    description: {},
                    slotTypeId: {},
                    valueElicitationSetting: {
                        shape: "S3p"
                    },
                    obfuscationSetting: {
                        shape: "S3z"
                    },
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    intentId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    multipleValuesSetting: {
                        shape: "S41"
                    }
                }
            }
        },
        DescribeSlotType: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "slotTypeId", "botId", "botVersion", "localeId" ],
                members: {
                    slotTypeId: {
                        location: "uri",
                        locationName: "slotTypeId"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotTypeId: {},
                    slotTypeName: {},
                    description: {},
                    slotTypeValues: {
                        shape: "S44"
                    },
                    valueSelectionSetting: {
                        shape: "S49"
                    },
                    parentSlotTypeSignature: {},
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        ListAggregatedUtterances: {
            http: {
                requestUri: "/bots/{botId}/aggregatedutterances/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "localeId", "aggregationDuration" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botAliasId: {},
                    botVersion: {},
                    localeId: {},
                    aggregationDuration: {
                        shape: "S67"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "S6h"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botAliasId: {},
                    botVersion: {},
                    localeId: {},
                    aggregationDuration: {
                        shape: "S67"
                    },
                    aggregationWindowStartTime: {
                        type: "timestamp"
                    },
                    aggregationWindowEndTime: {
                        type: "timestamp"
                    },
                    aggregationLastRefreshedDateTime: {
                        type: "timestamp"
                    },
                    aggregatedUtterancesSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                utterance: {},
                                hitCount: {
                                    type: "integer"
                                },
                                missedCount: {
                                    type: "integer"
                                },
                                utteranceFirstRecordedInAggregationDuration: {
                                    type: "timestamp"
                                },
                                utteranceLastRecordedInAggregationDuration: {
                                    type: "timestamp"
                                },
                                containsDataFromDeletedResources: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBotAliases: {
            http: {
                requestUri: "/bots/{botId}/botaliases/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botAliasSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                botAliasId: {},
                                botAliasName: {},
                                description: {},
                                botVersion: {},
                                botAliasStatus: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    botId: {}
                }
            }
        },
        ListBotLocales: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "S6h"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    nextToken: {},
                    botLocaleSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                localeId: {},
                                localeName: {},
                                description: {},
                                botLocaleStatus: {},
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                lastBuildSubmittedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListBotVersions: {
            http: {
                requestUri: "/bots/{botId}/botversions/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                botName: {},
                                botVersion: {},
                                description: {},
                                botStatus: {},
                                creationDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBots: {
            http: {
                requestUri: "/bots/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "S6h"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                botId: {},
                                botName: {},
                                description: {},
                                botStatus: {},
                                latestBotVersion: {},
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBuiltInIntents: {
            http: {
                requestUri: "/builtins/locales/{localeId}/intents/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "localeId" ],
                members: {
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    builtInIntentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                intentSignature: {},
                                description: {}
                            }
                        }
                    },
                    nextToken: {},
                    localeId: {}
                }
            }
        },
        ListBuiltInSlotTypes: {
            http: {
                requestUri: "/builtins/locales/{localeId}/slottypes/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "localeId" ],
                members: {
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    builtInSlotTypeSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                slotTypeSignature: {},
                                description: {}
                            }
                        }
                    },
                    nextToken: {},
                    localeId: {}
                }
            }
        },
        ListExports: {
            http: {
                requestUri: "/exports/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "S6h"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    exportSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                exportId: {},
                                resourceSpecification: {
                                    shape: "S1m"
                                },
                                fileFormat: {},
                                exportStatus: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImports: {
            http: {
                requestUri: "/imports/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "S6h"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    importSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                importId: {},
                                importedResourceId: {},
                                importedResourceName: {},
                                importStatus: {},
                                mergeStrategy: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListIntents: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "S6h"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    intentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                intentId: {},
                                intentName: {},
                                description: {},
                                parentIntentSignature: {},
                                inputContexts: {
                                    shape: "S2u"
                                },
                                outputContexts: {
                                    shape: "S2w"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSlotTypes: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "S6h"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    slotTypeSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                slotTypeId: {},
                                slotTypeName: {},
                                description: {},
                                parentSlotTypeSignature: {},
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSlots: {
            http: {
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "intentId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    },
                    sortBy: {
                        type: "structure",
                        required: [ "attribute", "order" ],
                        members: {
                            attribute: {},
                            order: {}
                        }
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values", "operator" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "S6h"
                                },
                                operator: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    intentId: {},
                    slotSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                slotId: {},
                                slotName: {},
                                description: {},
                                slotConstraint: {},
                                slotTypeId: {},
                                valueElicitationPromptSpecification: {
                                    shape: "S2r"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceARN}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN" ],
                members: {
                    resourceARN: {
                        location: "uri",
                        locationName: "resourceARN"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sf"
                    }
                }
            }
        },
        StartImport: {
            http: {
                method: "PUT",
                requestUri: "/imports/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "importId", "resourceSpecification", "mergeStrategy" ],
                members: {
                    importId: {},
                    resourceSpecification: {
                        shape: "S5q"
                    },
                    mergeStrategy: {},
                    filePassword: {
                        shape: "S1q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    importId: {},
                    resourceSpecification: {
                        shape: "S5q"
                    },
                    mergeStrategy: {},
                    importStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceARN}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN", "tags" ],
                members: {
                    resourceARN: {
                        location: "uri",
                        locationName: "resourceARN"
                    },
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceARN}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN", "tagKeys" ],
                members: {
                    resourceARN: {
                        location: "uri",
                        locationName: "resourceARN"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateBot: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botName", "roleArn", "dataPrivacy", "idleSessionTTLInSeconds" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botName: {},
                    description: {},
                    roleArn: {},
                    dataPrivacy: {
                        shape: "Sc"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botName: {},
                    description: {},
                    roleArn: {},
                    dataPrivacy: {
                        shape: "Sc"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    botStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateBotAlias: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botaliases/{botAliasId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botAliasId", "botAliasName", "botId" ],
                members: {
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    botAliasName: {},
                    description: {},
                    botVersion: {},
                    botAliasLocaleSettings: {
                        shape: "Sm"
                    },
                    conversationLogSettings: {
                        shape: "St"
                    },
                    sentimentAnalysisSettings: {
                        shape: "S16"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botAliasId: {},
                    botAliasName: {},
                    description: {},
                    botVersion: {},
                    botAliasLocaleSettings: {
                        shape: "Sm"
                    },
                    conversationLogSettings: {
                        shape: "St"
                    },
                    sentimentAnalysisSettings: {
                        shape: "S16"
                    },
                    botAliasStatus: {},
                    botId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateBotLocale: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "botId", "botVersion", "localeId", "nluIntentConfidenceThreshold" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    description: {},
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    voiceSettings: {
                        shape: "S1c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    localeName: {},
                    description: {},
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    voiceSettings: {
                        shape: "S1c"
                    },
                    botLocaleStatus: {},
                    failureReasons: {
                        shape: "S5f"
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateExport: {
            http: {
                method: "PUT",
                requestUri: "/exports/{exportId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "exportId" ],
                members: {
                    exportId: {
                        location: "uri",
                        locationName: "exportId"
                    },
                    filePassword: {
                        shape: "S1q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    exportId: {},
                    resourceSpecification: {
                        shape: "S1m"
                    },
                    fileFormat: {},
                    exportStatus: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateIntent: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "intentId", "intentName", "botId", "botVersion", "localeId" ],
                members: {
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    },
                    intentName: {},
                    description: {},
                    parentIntentSignature: {},
                    sampleUtterances: {
                        shape: "S1v"
                    },
                    dialogCodeHook: {
                        shape: "S1y"
                    },
                    fulfillmentCodeHook: {
                        shape: "S1z"
                    },
                    slotPriorities: {
                        shape: "S5x"
                    },
                    intentConfirmationSetting: {
                        shape: "S2q"
                    },
                    intentClosingSetting: {
                        shape: "S2t"
                    },
                    inputContexts: {
                        shape: "S2u"
                    },
                    outputContexts: {
                        shape: "S2w"
                    },
                    kendraConfiguration: {
                        shape: "S30"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    intentId: {},
                    intentName: {},
                    description: {},
                    parentIntentSignature: {},
                    sampleUtterances: {
                        shape: "S1v"
                    },
                    dialogCodeHook: {
                        shape: "S1y"
                    },
                    fulfillmentCodeHook: {
                        shape: "S1z"
                    },
                    slotPriorities: {
                        shape: "S5x"
                    },
                    intentConfirmationSetting: {
                        shape: "S2q"
                    },
                    intentClosingSetting: {
                        shape: "S2t"
                    },
                    inputContexts: {
                        shape: "S2u"
                    },
                    outputContexts: {
                        shape: "S2w"
                    },
                    kendraConfiguration: {
                        shape: "S30"
                    },
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateResourcePolicy: {
            http: {
                method: "PUT",
                requestUri: "/policy/{resourceArn}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "policy" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    policy: {},
                    expectedRevisionId: {
                        location: "querystring",
                        locationName: "expectedRevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceArn: {},
                    revisionId: {}
                }
            }
        },
        UpdateSlot: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "slotId", "slotName", "slotTypeId", "valueElicitationSetting", "botId", "botVersion", "localeId", "intentId" ],
                members: {
                    slotId: {
                        location: "uri",
                        locationName: "slotId"
                    },
                    slotName: {},
                    description: {},
                    slotTypeId: {},
                    valueElicitationSetting: {
                        shape: "S3p"
                    },
                    obfuscationSetting: {
                        shape: "S3z"
                    },
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    intentId: {
                        location: "uri",
                        locationName: "intentId"
                    },
                    multipleValuesSetting: {
                        shape: "S41"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotId: {},
                    slotName: {},
                    description: {},
                    slotTypeId: {},
                    valueElicitationSetting: {
                        shape: "S3p"
                    },
                    obfuscationSetting: {
                        shape: "S3z"
                    },
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    intentId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    },
                    multipleValuesSetting: {
                        shape: "S41"
                    }
                }
            }
        },
        UpdateSlotType: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "slotTypeId", "slotTypeName", "valueSelectionSetting", "botId", "botVersion", "localeId" ],
                members: {
                    slotTypeId: {
                        location: "uri",
                        locationName: "slotTypeId"
                    },
                    slotTypeName: {},
                    description: {},
                    slotTypeValues: {
                        shape: "S44"
                    },
                    valueSelectionSetting: {
                        shape: "S49"
                    },
                    parentSlotTypeSignature: {},
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botVersion: {
                        location: "uri",
                        locationName: "botVersion"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotTypeId: {},
                    slotTypeName: {},
                    description: {},
                    slotTypeValues: {
                        shape: "S44"
                    },
                    valueSelectionSetting: {
                        shape: "S49"
                    },
                    parentSlotTypeSignature: {},
                    botId: {},
                    botVersion: {},
                    localeId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    lastUpdatedDateTime: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        Sc: {
            type: "structure",
            required: [ "childDirected" ],
            members: {
                childDirected: {
                    type: "boolean"
                }
            }
        },
        Sf: {
            type: "map",
            key: {},
            value: {}
        },
        Sm: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "enabled" ],
                members: {
                    enabled: {
                        type: "boolean"
                    },
                    codeHookSpecification: {
                        type: "structure",
                        required: [ "lambdaCodeHook" ],
                        members: {
                            lambdaCodeHook: {
                                type: "structure",
                                required: [ "lambdaARN", "codeHookInterfaceVersion" ],
                                members: {
                                    lambdaARN: {},
                                    codeHookInterfaceVersion: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        St: {
            type: "structure",
            members: {
                textLogSettings: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "enabled", "destination" ],
                        members: {
                            enabled: {
                                type: "boolean"
                            },
                            destination: {
                                type: "structure",
                                required: [ "cloudWatch" ],
                                members: {
                                    cloudWatch: {
                                        type: "structure",
                                        required: [ "cloudWatchLogGroupArn", "logPrefix" ],
                                        members: {
                                            cloudWatchLogGroupArn: {},
                                            logPrefix: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                audioLogSettings: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "enabled", "destination" ],
                        members: {
                            enabled: {
                                type: "boolean"
                            },
                            destination: {
                                type: "structure",
                                required: [ "s3Bucket" ],
                                members: {
                                    s3Bucket: {
                                        type: "structure",
                                        required: [ "s3BucketArn", "logPrefix" ],
                                        members: {
                                            kmsKeyArn: {},
                                            s3BucketArn: {},
                                            logPrefix: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "detectSentiment" ],
            members: {
                detectSentiment: {
                    type: "boolean"
                }
            }
        },
        S1c: {
            type: "structure",
            required: [ "voiceId" ],
            members: {
                voiceId: {}
            }
        },
        S1h: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "sourceBotVersion" ],
                members: {
                    sourceBotVersion: {}
                }
            }
        },
        S1m: {
            type: "structure",
            members: {
                botExportSpecification: {
                    type: "structure",
                    required: [ "botId", "botVersion" ],
                    members: {
                        botId: {},
                        botVersion: {}
                    }
                },
                botLocaleExportSpecification: {
                    type: "structure",
                    required: [ "botId", "botVersion", "localeId" ],
                    members: {
                        botId: {},
                        botVersion: {},
                        localeId: {}
                    }
                }
            }
        },
        S1q: {
            type: "string",
            sensitive: true
        },
        S1v: {
            type: "list",
            member: {
                type: "structure",
                required: [ "utterance" ],
                members: {
                    utterance: {}
                }
            }
        },
        S1y: {
            type: "structure",
            required: [ "enabled" ],
            members: {
                enabled: {
                    type: "boolean"
                }
            }
        },
        S1z: {
            type: "structure",
            required: [ "enabled" ],
            members: {
                enabled: {
                    type: "boolean"
                },
                postFulfillmentStatusSpecification: {
                    type: "structure",
                    members: {
                        successResponse: {
                            shape: "S21"
                        },
                        failureResponse: {
                            shape: "S21"
                        },
                        timeoutResponse: {
                            shape: "S21"
                        }
                    }
                },
                fulfillmentUpdatesSpecification: {
                    type: "structure",
                    required: [ "active" ],
                    members: {
                        active: {
                            type: "boolean"
                        },
                        startResponse: {
                            type: "structure",
                            required: [ "delayInSeconds", "messageGroups" ],
                            members: {
                                delayInSeconds: {
                                    type: "integer"
                                },
                                messageGroups: {
                                    shape: "S22"
                                },
                                allowInterrupt: {
                                    type: "boolean"
                                }
                            }
                        },
                        updateResponse: {
                            type: "structure",
                            required: [ "frequencyInSeconds", "messageGroups" ],
                            members: {
                                frequencyInSeconds: {
                                    type: "integer"
                                },
                                messageGroups: {
                                    shape: "S22"
                                },
                                allowInterrupt: {
                                    type: "boolean"
                                }
                            }
                        },
                        timeoutInSeconds: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S21: {
            type: "structure",
            required: [ "messageGroups" ],
            members: {
                messageGroups: {
                    shape: "S22"
                },
                allowInterrupt: {
                    type: "boolean"
                }
            }
        },
        S22: {
            type: "list",
            member: {
                type: "structure",
                required: [ "message" ],
                members: {
                    message: {
                        shape: "S24"
                    },
                    variations: {
                        type: "list",
                        member: {
                            shape: "S24"
                        }
                    }
                }
            }
        },
        S24: {
            type: "structure",
            members: {
                plainTextMessage: {
                    type: "structure",
                    required: [ "value" ],
                    members: {
                        value: {}
                    }
                },
                customPayload: {
                    type: "structure",
                    required: [ "value" ],
                    members: {
                        value: {}
                    }
                },
                ssmlMessage: {
                    type: "structure",
                    required: [ "value" ],
                    members: {
                        value: {}
                    }
                },
                imageResponseCard: {
                    type: "structure",
                    required: [ "title" ],
                    members: {
                        title: {},
                        subtitle: {},
                        imageUrl: {},
                        buttons: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "text", "value" ],
                                members: {
                                    text: {},
                                    value: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S2q: {
            type: "structure",
            required: [ "promptSpecification", "declinationResponse" ],
            members: {
                promptSpecification: {
                    shape: "S2r"
                },
                declinationResponse: {
                    shape: "S21"
                },
                active: {
                    type: "boolean"
                }
            }
        },
        S2r: {
            type: "structure",
            required: [ "messageGroups", "maxRetries" ],
            members: {
                messageGroups: {
                    shape: "S22"
                },
                maxRetries: {
                    type: "integer"
                },
                allowInterrupt: {
                    type: "boolean"
                }
            }
        },
        S2t: {
            type: "structure",
            required: [ "closingResponse" ],
            members: {
                closingResponse: {
                    shape: "S21"
                },
                active: {
                    type: "boolean"
                }
            }
        },
        S2u: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            }
        },
        S2w: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "timeToLiveInSeconds", "turnsToLive" ],
                members: {
                    name: {},
                    timeToLiveInSeconds: {
                        type: "integer"
                    },
                    turnsToLive: {
                        type: "integer"
                    }
                }
            }
        },
        S30: {
            type: "structure",
            required: [ "kendraIndex" ],
            members: {
                kendraIndex: {},
                queryFilterStringEnabled: {
                    type: "boolean"
                },
                queryFilterString: {}
            }
        },
        S3p: {
            type: "structure",
            required: [ "slotConstraint" ],
            members: {
                defaultValueSpecification: {
                    type: "structure",
                    required: [ "defaultValueList" ],
                    members: {
                        defaultValueList: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "defaultValue" ],
                                members: {
                                    defaultValue: {}
                                }
                            }
                        }
                    }
                },
                slotConstraint: {},
                promptSpecification: {
                    shape: "S2r"
                },
                sampleUtterances: {
                    shape: "S1v"
                },
                waitAndContinueSpecification: {
                    type: "structure",
                    required: [ "waitingResponse", "continueResponse" ],
                    members: {
                        waitingResponse: {
                            shape: "S21"
                        },
                        continueResponse: {
                            shape: "S21"
                        },
                        stillWaitingResponse: {
                            type: "structure",
                            required: [ "messageGroups", "frequencyInSeconds", "timeoutInSeconds" ],
                            members: {
                                messageGroups: {
                                    shape: "S22"
                                },
                                frequencyInSeconds: {
                                    type: "integer"
                                },
                                timeoutInSeconds: {
                                    type: "integer"
                                },
                                allowInterrupt: {
                                    type: "boolean"
                                }
                            }
                        },
                        active: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S3z: {
            type: "structure",
            required: [ "obfuscationSettingType" ],
            members: {
                obfuscationSettingType: {}
            }
        },
        S41: {
            type: "structure",
            members: {
                allowMultipleValues: {
                    type: "boolean"
                }
            }
        },
        S44: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    sampleValue: {
                        shape: "S46"
                    },
                    synonyms: {
                        type: "list",
                        member: {
                            shape: "S46"
                        }
                    }
                }
            }
        },
        S46: {
            type: "structure",
            required: [ "value" ],
            members: {
                value: {}
            }
        },
        S49: {
            type: "structure",
            required: [ "resolutionStrategy" ],
            members: {
                resolutionStrategy: {},
                regexFilter: {
                    type: "structure",
                    required: [ "pattern" ],
                    members: {
                        pattern: {}
                    }
                }
            }
        },
        S5f: {
            type: "list",
            member: {}
        },
        S5q: {
            type: "structure",
            members: {
                botImportSpecification: {
                    type: "structure",
                    required: [ "botName", "roleArn", "dataPrivacy" ],
                    members: {
                        botName: {},
                        roleArn: {},
                        dataPrivacy: {
                            shape: "Sc"
                        },
                        idleSessionTTLInSeconds: {
                            type: "integer"
                        },
                        botTags: {
                            shape: "Sf"
                        },
                        testBotAliasTags: {
                            shape: "Sf"
                        }
                    }
                },
                botLocaleImportSpecification: {
                    type: "structure",
                    required: [ "botId", "botVersion", "localeId" ],
                    members: {
                        botId: {},
                        botVersion: {},
                        localeId: {},
                        nluIntentConfidenceThreshold: {
                            type: "double"
                        },
                        voiceSettings: {
                            shape: "S1c"
                        }
                    }
                }
            }
        },
        S5x: {
            type: "list",
            member: {
                type: "structure",
                required: [ "priority", "slotId" ],
                members: {
                    priority: {
                        type: "integer"
                    },
                    slotId: {}
                }
            }
        },
        S67: {
            type: "structure",
            required: [ "relativeAggregationDuration" ],
            members: {
                relativeAggregationDuration: {
                    type: "structure",
                    required: [ "timeDimension", "timeValue" ],
                    members: {
                        timeDimension: {},
                        timeValue: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S6h: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListAggregatedUtterances: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBotAliases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBotLocales: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBotVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBuiltInIntents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListBuiltInSlotTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListExports: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListImports: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListIntents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSlotTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSlots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    },
    waiters: {
        BotAvailable: {
            delay: 10,
            operation: "DescribeBot",
            maxAttempts: 35,
            description: "Wait until a bot is available",
            acceptors: [ {
                expected: "Available",
                matcher: "path",
                state: "success",
                argument: "botStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "botStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "botStatus"
            }, {
                expected: "Inactive",
                matcher: "path",
                state: "failure",
                argument: "botStatus"
            } ]
        },
        BotAliasAvailable: {
            delay: 10,
            operation: "DescribeBotAlias",
            maxAttempts: 35,
            description: "Wait until a bot alias is available",
            acceptors: [ {
                expected: "Available",
                matcher: "path",
                state: "success",
                argument: "botAliasStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "botAliasStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "botAliasStatus"
            } ]
        },
        BotExportCompleted: {
            delay: 10,
            operation: "DescribeExport",
            maxAttempts: 35,
            description: "Wait until a bot has been exported",
            acceptors: [ {
                expected: "Completed",
                matcher: "path",
                state: "success",
                argument: "exportStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "exportStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "exportStatus"
            } ]
        },
        BotImportCompleted: {
            delay: 10,
            operation: "DescribeImport",
            maxAttempts: 35,
            description: "Wait until a bot has been imported",
            acceptors: [ {
                expected: "Completed",
                matcher: "path",
                state: "success",
                argument: "importStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "importStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "importStatus"
            } ]
        },
        BotLocaleBuilt: {
            delay: 10,
            operation: "DescribeBotLocale",
            maxAttempts: 35,
            description: "Wait until a bot locale is built",
            acceptors: [ {
                expected: "Built",
                matcher: "path",
                state: "success",
                argument: "botLocaleStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            }, {
                expected: "NotBuilt",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            } ]
        },
        BotLocaleExpressTestingAvailable: {
            delay: 10,
            operation: "DescribeBotLocale",
            maxAttempts: 35,
            description: "Wait until a bot locale build is ready for express testing",
            acceptors: [ {
                expected: "Built",
                matcher: "path",
                state: "success",
                argument: "botLocaleStatus"
            }, {
                expected: "ReadyExpressTesting",
                matcher: "path",
                state: "success",
                argument: "botLocaleStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            }, {
                expected: "NotBuilt",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            } ]
        },
        BotVersionAvailable: {
            delay: 10,
            operation: "DescribeBotVersion",
            maxAttempts: 35,
            description: "Wait until a bot version is available",
            acceptors: [ {
                expected: "Available",
                matcher: "path",
                state: "success",
                argument: "botStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "botStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "botStatus"
            }, {
                state: "retry",
                matcher: "status",
                expected: 404
            } ]
        },
        BotLocaleCreated: {
            delay: 10,
            operation: "DescribeBotLocale",
            maxAttempts: 35,
            description: "Wait unit a bot locale is created",
            acceptors: [ {
                expected: "Built",
                matcher: "path",
                state: "success",
                argument: "botLocaleStatus"
            }, {
                expected: "ReadyExpressTesting",
                matcher: "path",
                state: "success",
                argument: "botLocaleStatus"
            }, {
                expected: "NotBuilt",
                matcher: "path",
                state: "success",
                argument: "botLocaleStatus"
            }, {
                expected: "Deleting",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "botLocaleStatus"
            } ]
        }
    }
};

AWS.apiLoader.services["lexruntimev2"] = {};

AWS.LexRuntimeV2 = AWS.Service.defineService("lexruntimev2", [ "2020-08-07" ]);

AWS.apiLoader.services["lexruntimev2"]["2020-08-07"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-07",
        endpointPrefix: "runtime-v2-lex",
        jsonVersion: "1.1",
        protocol: "rest-json",
        protocolSettings: {
            h2: "eventstream"
        },
        serviceAbbreviation: "Lex Runtime V2",
        serviceFullName: "Amazon Lex Runtime V2",
        serviceId: "Lex Runtime V2",
        signatureVersion: "v4",
        signingName: "lex",
        uid: "runtime.lex.v2-2020-08-07"
    },
    operations: {
        DeleteSession: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}"
            },
            input: {
                type: "structure",
                required: [ "botId", "botAliasId", "sessionId", "localeId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botId: {},
                    botAliasId: {},
                    localeId: {},
                    sessionId: {}
                }
            }
        },
        GetSession: {
            http: {
                method: "GET",
                requestUri: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}"
            },
            input: {
                type: "structure",
                required: [ "botId", "botAliasId", "localeId", "sessionId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    sessionId: {},
                    messages: {
                        shape: "Sa"
                    },
                    interpretations: {
                        shape: "Sl"
                    },
                    sessionState: {
                        shape: "S11"
                    }
                }
            }
        },
        PutSession: {
            http: {
                requestUri: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}"
            },
            input: {
                type: "structure",
                required: [ "botId", "botAliasId", "localeId", "sessionState", "sessionId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    messages: {
                        shape: "Sa"
                    },
                    sessionState: {
                        shape: "S11"
                    },
                    requestAttributes: {
                        shape: "S1c"
                    },
                    responseContentType: {
                        location: "header",
                        locationName: "ResponseContentType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    messages: {
                        location: "header",
                        locationName: "x-amz-lex-messages"
                    },
                    sessionState: {
                        location: "header",
                        locationName: "x-amz-lex-session-state"
                    },
                    requestAttributes: {
                        location: "header",
                        locationName: "x-amz-lex-request-attributes"
                    },
                    sessionId: {
                        location: "header",
                        locationName: "x-amz-lex-session-id"
                    },
                    audioStream: {
                        shape: "S1g"
                    }
                },
                payload: "audioStream"
            }
        },
        RecognizeText: {
            http: {
                requestUri: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/text"
            },
            input: {
                type: "structure",
                required: [ "botId", "botAliasId", "localeId", "text", "sessionId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    text: {
                        shape: "Sc"
                    },
                    sessionState: {
                        shape: "S11"
                    },
                    requestAttributes: {
                        shape: "S1c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    messages: {
                        shape: "Sa"
                    },
                    sessionState: {
                        shape: "S11"
                    },
                    interpretations: {
                        shape: "Sl"
                    },
                    requestAttributes: {
                        shape: "S1c"
                    },
                    sessionId: {}
                }
            }
        },
        RecognizeUtterance: {
            http: {
                requestUri: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/utterance"
            },
            input: {
                type: "structure",
                required: [ "botId", "botAliasId", "localeId", "requestContentType", "sessionId" ],
                members: {
                    botId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    botAliasId: {
                        location: "uri",
                        locationName: "botAliasId"
                    },
                    localeId: {
                        location: "uri",
                        locationName: "localeId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    sessionState: {
                        shape: "S1k",
                        location: "header",
                        locationName: "x-amz-lex-session-state"
                    },
                    requestAttributes: {
                        shape: "S1k",
                        location: "header",
                        locationName: "x-amz-lex-request-attributes"
                    },
                    requestContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    responseContentType: {
                        location: "header",
                        locationName: "Response-Content-Type"
                    },
                    inputStream: {
                        shape: "S1g"
                    }
                },
                payload: "inputStream"
            },
            output: {
                type: "structure",
                members: {
                    inputMode: {
                        location: "header",
                        locationName: "x-amz-lex-input-mode"
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    messages: {
                        location: "header",
                        locationName: "x-amz-lex-messages"
                    },
                    interpretations: {
                        location: "header",
                        locationName: "x-amz-lex-interpretations"
                    },
                    sessionState: {
                        location: "header",
                        locationName: "x-amz-lex-session-state"
                    },
                    requestAttributes: {
                        location: "header",
                        locationName: "x-amz-lex-request-attributes"
                    },
                    sessionId: {
                        location: "header",
                        locationName: "x-amz-lex-session-id"
                    },
                    inputTranscript: {
                        location: "header",
                        locationName: "x-amz-lex-input-transcript"
                    },
                    audioStream: {
                        shape: "S1g"
                    }
                },
                payload: "audioStream"
            },
            authtype: "v4-unsigned-body"
        }
    },
    shapes: {
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "contentType" ],
                members: {
                    content: {
                        shape: "Sc"
                    },
                    contentType: {},
                    imageResponseCard: {
                        type: "structure",
                        required: [ "title" ],
                        members: {
                            title: {},
                            subtitle: {},
                            imageUrl: {},
                            buttons: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "text", "value" ],
                                    members: {
                                        text: {},
                                        value: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sc: {
            type: "string",
            sensitive: true
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    nluConfidence: {
                        type: "structure",
                        members: {
                            score: {
                                type: "double"
                            }
                        }
                    },
                    sentimentResponse: {
                        type: "structure",
                        members: {
                            sentiment: {},
                            sentimentScore: {
                                type: "structure",
                                members: {
                                    positive: {
                                        type: "double"
                                    },
                                    negative: {
                                        type: "double"
                                    },
                                    neutral: {
                                        type: "double"
                                    },
                                    mixed: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    },
                    intent: {
                        shape: "Ss"
                    }
                }
            }
        },
        Ss: {
            type: "structure",
            required: [ "name" ],
            members: {
                name: {},
                slots: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "Su"
                    }
                },
                state: {},
                confirmationState: {}
            }
        },
        Su: {
            type: "structure",
            members: {
                value: {
                    type: "structure",
                    required: [ "interpretedValue" ],
                    members: {
                        originalValue: {},
                        interpretedValue: {},
                        resolvedValues: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                shape: {},
                values: {
                    type: "list",
                    member: {
                        shape: "Su"
                    }
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                dialogAction: {
                    type: "structure",
                    required: [ "type" ],
                    members: {
                        type: {},
                        slotToElicit: {}
                    }
                },
                intent: {
                    shape: "Ss"
                },
                activeContexts: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name", "timeToLive", "contextAttributes" ],
                        members: {
                            name: {},
                            timeToLive: {
                                type: "structure",
                                required: [ "timeToLiveInSeconds", "turnsToLive" ],
                                members: {
                                    timeToLiveInSeconds: {
                                        type: "integer"
                                    },
                                    turnsToLive: {
                                        type: "integer"
                                    }
                                }
                            },
                            contextAttributes: {
                                type: "map",
                                key: {},
                                value: {
                                    shape: "Sc"
                                }
                            }
                        }
                    }
                },
                sessionAttributes: {
                    shape: "S1c"
                },
                originatingRequestId: {}
            }
        },
        S1c: {
            type: "map",
            key: {},
            value: {}
        },
        S1g: {
            type: "blob",
            streaming: true
        },
        S1k: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {}
};

AWS.apiLoader.services["fis"] = {};

AWS.Fis = AWS.Service.defineService("fis", [ "2020-12-01" ]);

AWS.apiLoader.services["fis"]["2020-12-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-12-01",
        endpointPrefix: "fis",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "FIS",
        serviceFullName: "AWS Fault Injection Simulator",
        serviceId: "fis",
        signatureVersion: "v4",
        signingName: "fis",
        uid: "fis-2020-12-01"
    },
    operations: {
        CreateExperimentTemplate: {
            http: {
                requestUri: "/experimentTemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clientToken", "description", "stopConditions", "actions", "roleArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    stopConditions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "source" ],
                            members: {
                                source: {},
                                value: {}
                            }
                        }
                    },
                    targets: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "resourceType", "selectionMode" ],
                            members: {
                                resourceType: {},
                                resourceArns: {
                                    shape: "Sc"
                                },
                                resourceTags: {
                                    shape: "Se"
                                },
                                filters: {
                                    shape: "Sh"
                                },
                                selectionMode: {}
                            }
                        }
                    },
                    actions: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "actionId" ],
                            members: {
                                actionId: {},
                                description: {},
                                parameters: {
                                    shape: "Ss"
                                },
                                targets: {
                                    shape: "Sv"
                                },
                                startAfter: {
                                    shape: "Sx"
                                }
                            }
                        }
                    },
                    roleArn: {},
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experimentTemplate: {
                        shape: "S11"
                    }
                }
            }
        },
        DeleteExperimentTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/experimentTemplates/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experimentTemplate: {
                        shape: "S11"
                    }
                }
            }
        },
        GetAction: {
            http: {
                method: "GET",
                requestUri: "/actions/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    action: {
                        type: "structure",
                        members: {
                            id: {},
                            description: {},
                            parameters: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        description: {},
                                        required: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            },
                            targets: {
                                shape: "S1o"
                            },
                            tags: {
                                shape: "Se"
                            }
                        }
                    }
                }
            }
        },
        GetExperiment: {
            http: {
                method: "GET",
                requestUri: "/experiments/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experiment: {
                        shape: "S1v"
                    }
                }
            }
        },
        GetExperimentTemplate: {
            http: {
                method: "GET",
                requestUri: "/experimentTemplates/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experimentTemplate: {
                        shape: "S11"
                    }
                }
            }
        },
        ListActions: {
            http: {
                method: "GET",
                requestUri: "/actions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    actions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                description: {},
                                targets: {
                                    shape: "S1o"
                                },
                                tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListExperimentTemplates: {
            http: {
                method: "GET",
                requestUri: "/experimentTemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experimentTemplates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                description: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListExperiments: {
            http: {
                method: "GET",
                requestUri: "/experiments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experiments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                experimentTemplateId: {},
                                state: {
                                    shape: "S1w"
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Se"
                    }
                }
            }
        },
        StartExperiment: {
            http: {
                requestUri: "/experiments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clientToken", "experimentTemplateId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    experimentTemplateId: {},
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experiment: {
                        shape: "S1v"
                    }
                }
            }
        },
        StopExperiment: {
            http: {
                method: "DELETE",
                requestUri: "/experiments/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experiment: {
                        shape: "S1v"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateExperimentTemplate: {
            http: {
                method: "PATCH",
                requestUri: "/experimentTemplates/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    description: {},
                    stopConditions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "source" ],
                            members: {
                                source: {},
                                value: {}
                            }
                        }
                    },
                    targets: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "resourceType", "selectionMode" ],
                            members: {
                                resourceType: {},
                                resourceArns: {
                                    shape: "Sc"
                                },
                                resourceTags: {
                                    shape: "Se"
                                },
                                filters: {
                                    shape: "Sh"
                                },
                                selectionMode: {}
                            }
                        }
                    },
                    actions: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                actionId: {},
                                description: {},
                                parameters: {
                                    shape: "Ss"
                                },
                                targets: {
                                    shape: "Sv"
                                },
                                startAfter: {
                                    shape: "Sx"
                                }
                            }
                        }
                    },
                    roleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    experimentTemplate: {
                        shape: "S11"
                    }
                }
            }
        }
    },
    shapes: {
        Sc: {
            type: "list",
            member: {}
        },
        Se: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                required: [ "path", "values" ],
                members: {
                    path: {},
                    values: {
                        shape: "Sk"
                    }
                }
            }
        },
        Sk: {
            type: "list",
            member: {}
        },
        Ss: {
            type: "map",
            key: {},
            value: {}
        },
        Sv: {
            type: "map",
            key: {},
            value: {}
        },
        Sx: {
            type: "list",
            member: {}
        },
        S11: {
            type: "structure",
            members: {
                id: {},
                description: {},
                targets: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            resourceType: {},
                            resourceArns: {
                                shape: "Sc"
                            },
                            resourceTags: {
                                shape: "Se"
                            },
                            filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        path: {},
                                        values: {
                                            shape: "Sk"
                                        }
                                    }
                                }
                            },
                            selectionMode: {}
                        }
                    }
                },
                actions: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            actionId: {},
                            description: {},
                            parameters: {
                                shape: "Ss"
                            },
                            targets: {
                                shape: "Sv"
                            },
                            startAfter: {
                                shape: "Sx"
                            }
                        }
                    }
                },
                stopConditions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            source: {},
                            value: {}
                        }
                    }
                },
                creationTime: {
                    type: "timestamp"
                },
                lastUpdateTime: {
                    type: "timestamp"
                },
                roleArn: {},
                tags: {
                    shape: "Se"
                }
            }
        },
        S1o: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    resourceType: {}
                }
            }
        },
        S1v: {
            type: "structure",
            members: {
                id: {},
                experimentTemplateId: {},
                roleArn: {},
                state: {
                    shape: "S1w"
                },
                targets: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            resourceType: {},
                            resourceArns: {
                                shape: "Sc"
                            },
                            resourceTags: {
                                shape: "Se"
                            },
                            filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        path: {},
                                        values: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            },
                            selectionMode: {}
                        }
                    }
                },
                actions: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            actionId: {},
                            description: {},
                            parameters: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            targets: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            startAfter: {
                                type: "list",
                                member: {}
                            },
                            state: {
                                type: "structure",
                                members: {
                                    status: {},
                                    reason: {}
                                }
                            }
                        }
                    }
                },
                stopConditions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            source: {},
                            value: {}
                        }
                    }
                },
                creationTime: {
                    type: "timestamp"
                },
                startTime: {
                    type: "timestamp"
                },
                endTime: {
                    type: "timestamp"
                },
                tags: {
                    shape: "Se"
                }
            }
        },
        S1w: {
            type: "structure",
            members: {
                status: {},
                reason: {}
            }
        }
    },
    paginators: {
        ListActions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListExperimentTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListExperiments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["lookoutmetrics"] = {};

AWS.LookoutMetrics = AWS.Service.defineService("lookoutmetrics", [ "2017-07-25" ]);

AWS.apiLoader.services["lookoutmetrics"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "lookoutmetrics",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "LookoutMetrics",
        serviceFullName: "Amazon Lookout for Metrics",
        serviceId: "LookoutMetrics",
        signatureVersion: "v4",
        signingName: "lookoutmetrics",
        uid: "lookoutmetrics-2017-07-25"
    },
    operations: {
        ActivateAnomalyDetector: {
            http: {
                requestUri: "/ActivateAnomalyDetector"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BackTestAnomalyDetector: {
            http: {
                requestUri: "/BackTestAnomalyDetector"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateAlert: {
            http: {
                requestUri: "/CreateAlert"
            },
            input: {
                type: "structure",
                required: [ "AlertName", "AlertSensitivityThreshold", "AnomalyDetectorArn", "Action" ],
                members: {
                    AlertName: {},
                    AlertSensitivityThreshold: {
                        type: "integer"
                    },
                    AlertDescription: {},
                    AnomalyDetectorArn: {},
                    Action: {
                        shape: "Sa"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AlertArn: {}
                }
            }
        },
        CreateAnomalyDetector: {
            http: {
                requestUri: "/CreateAnomalyDetector"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorName", "AnomalyDetectorConfig" ],
                members: {
                    AnomalyDetectorName: {},
                    AnomalyDetectorDescription: {},
                    AnomalyDetectorConfig: {
                        shape: "Sk"
                    },
                    KmsKeyArn: {},
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyDetectorArn: {}
                }
            }
        },
        CreateMetricSet: {
            http: {
                requestUri: "/CreateMetricSet"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn", "MetricSetName", "MetricList", "MetricSource" ],
                members: {
                    AnomalyDetectorArn: {},
                    MetricSetName: {},
                    MetricSetDescription: {},
                    MetricList: {
                        shape: "Sr"
                    },
                    Offset: {
                        type: "integer"
                    },
                    TimestampColumn: {
                        shape: "Sx"
                    },
                    DimensionList: {
                        shape: "Sz"
                    },
                    MetricSetFrequency: {},
                    MetricSource: {
                        shape: "S10"
                    },
                    Timezone: {},
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MetricSetArn: {}
                }
            }
        },
        DeleteAlert: {
            http: {
                requestUri: "/DeleteAlert"
            },
            input: {
                type: "structure",
                required: [ "AlertArn" ],
                members: {
                    AlertArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAnomalyDetector: {
            http: {
                requestUri: "/DeleteAnomalyDetector"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAlert: {
            http: {
                requestUri: "/DescribeAlert"
            },
            input: {
                type: "structure",
                required: [ "AlertArn" ],
                members: {
                    AlertArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Alert: {
                        type: "structure",
                        members: {
                            Action: {
                                shape: "Sa"
                            },
                            AlertDescription: {},
                            AlertArn: {},
                            AnomalyDetectorArn: {},
                            AlertName: {},
                            AlertSensitivityThreshold: {
                                type: "integer"
                            },
                            AlertType: {},
                            AlertStatus: {},
                            LastModificationTime: {
                                type: "timestamp"
                            },
                            CreationTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeAnomalyDetectionExecutions: {
            http: {
                requestUri: "/DescribeAnomalyDetectionExecutions"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {},
                    Timestamp: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExecutionList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {},
                                Status: {},
                                FailureReason: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAnomalyDetector: {
            http: {
                requestUri: "/DescribeAnomalyDetector"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyDetectorArn: {},
                    AnomalyDetectorName: {},
                    AnomalyDetectorDescription: {},
                    AnomalyDetectorConfig: {
                        type: "structure",
                        members: {
                            AnomalyDetectorFrequency: {}
                        }
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    Status: {},
                    FailureReason: {},
                    KmsKeyArn: {}
                }
            }
        },
        DescribeMetricSet: {
            http: {
                requestUri: "/DescribeMetricSet"
            },
            input: {
                type: "structure",
                required: [ "MetricSetArn" ],
                members: {
                    MetricSetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MetricSetArn: {},
                    AnomalyDetectorArn: {},
                    MetricSetName: {},
                    MetricSetDescription: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    Offset: {
                        type: "integer"
                    },
                    MetricList: {
                        shape: "Sr"
                    },
                    TimestampColumn: {
                        shape: "Sx"
                    },
                    DimensionList: {
                        shape: "Sz"
                    },
                    MetricSetFrequency: {},
                    Timezone: {},
                    MetricSource: {
                        shape: "S10"
                    }
                }
            }
        },
        GetAnomalyGroup: {
            http: {
                requestUri: "/GetAnomalyGroup"
            },
            input: {
                type: "structure",
                required: [ "AnomalyGroupId", "AnomalyDetectorArn" ],
                members: {
                    AnomalyGroupId: {},
                    AnomalyDetectorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyGroup: {
                        type: "structure",
                        members: {
                            StartTime: {},
                            EndTime: {},
                            AnomalyGroupId: {},
                            AnomalyGroupScore: {
                                type: "double"
                            },
                            PrimaryMetricName: {},
                            MetricLevelImpactList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        MetricName: {},
                                        NumTimeSeries: {
                                            type: "integer"
                                        },
                                        ContributionMatrix: {
                                            type: "structure",
                                            members: {
                                                DimensionContributionList: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            DimensionName: {},
                                                            DimensionValueContributionList: {
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    members: {
                                                                        DimensionValue: {},
                                                                        ContributionScore: {
                                                                            type: "double"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetFeedback: {
            http: {
                requestUri: "/GetFeedback"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn", "AnomalyGroupTimeSeriesFeedback" ],
                members: {
                    AnomalyDetectorArn: {},
                    AnomalyGroupTimeSeriesFeedback: {
                        type: "structure",
                        required: [ "AnomalyGroupId" ],
                        members: {
                            AnomalyGroupId: {},
                            TimeSeriesId: {}
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyGroupTimeSeriesFeedback: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TimeSeriesId: {},
                                IsAnomaly: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetSampleData: {
            http: {
                requestUri: "/GetSampleData"
            },
            input: {
                type: "structure",
                members: {
                    S3SourceConfig: {
                        type: "structure",
                        required: [ "RoleArn", "FileFormatDescriptor" ],
                        members: {
                            RoleArn: {},
                            TemplatedPathList: {
                                shape: "S12"
                            },
                            HistoricalDataPathList: {
                                shape: "S14"
                            },
                            FileFormatDescriptor: {
                                shape: "S16"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HeaderValues: {
                        type: "list",
                        member: {}
                    },
                    SampleRows: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        ListAlerts: {
            http: {
                requestUri: "/ListAlerts"
            },
            input: {
                type: "structure",
                members: {
                    AnomalyDetectorArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AlertSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AlertArn: {},
                                AnomalyDetectorArn: {},
                                AlertName: {},
                                AlertSensitivityThreshold: {
                                    type: "integer"
                                },
                                AlertType: {},
                                AlertStatus: {},
                                LastModificationTime: {
                                    type: "timestamp"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAnomalyDetectors: {
            http: {
                requestUri: "/ListAnomalyDetectors"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyDetectorSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AnomalyDetectorArn: {},
                                AnomalyDetectorName: {},
                                AnomalyDetectorDescription: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                },
                                Status: {},
                                Tags: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAnomalyGroupSummaries: {
            http: {
                requestUri: "/ListAnomalyGroupSummaries"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn", "SensitivityThreshold" ],
                members: {
                    AnomalyDetectorArn: {},
                    SensitivityThreshold: {
                        type: "integer"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyGroupSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StartTime: {},
                                EndTime: {},
                                AnomalyGroupId: {},
                                AnomalyGroupScore: {
                                    type: "double"
                                },
                                PrimaryMetricName: {}
                            }
                        }
                    },
                    AnomalyGroupStatistics: {
                        type: "structure",
                        members: {
                            EvaluationStartDate: {},
                            TotalCount: {
                                type: "integer"
                            },
                            ItemizedMetricStatsList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        MetricName: {},
                                        OccurrenceCount: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAnomalyGroupTimeSeries: {
            http: {
                requestUri: "/ListAnomalyGroupTimeSeries"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn", "AnomalyGroupId", "MetricName" ],
                members: {
                    AnomalyDetectorArn: {},
                    AnomalyGroupId: {},
                    MetricName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyGroupId: {},
                    MetricName: {},
                    TimestampList: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    TimeSeriesList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TimeSeriesId", "DimensionList", "MetricValueList" ],
                            members: {
                                TimeSeriesId: {},
                                DimensionList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "DimensionName", "DimensionValue" ],
                                        members: {
                                            DimensionName: {},
                                            DimensionValue: {}
                                        }
                                    }
                                },
                                MetricValueList: {
                                    type: "list",
                                    member: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListMetricSets: {
            http: {
                requestUri: "/ListMetricSets"
            },
            input: {
                type: "structure",
                members: {
                    AnomalyDetectorArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MetricSetSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MetricSetArn: {},
                                AnomalyDetectorArn: {},
                                MetricSetDescription: {},
                                MetricSetName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sd",
                        locationName: "Tags"
                    }
                }
            }
        },
        PutFeedback: {
            http: {
                requestUri: "/PutFeedback"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn", "AnomalyGroupTimeSeriesFeedback" ],
                members: {
                    AnomalyDetectorArn: {},
                    AnomalyGroupTimeSeriesFeedback: {
                        type: "structure",
                        required: [ "AnomalyGroupId", "TimeSeriesId", "IsAnomaly" ],
                        members: {
                            AnomalyGroupId: {},
                            TimeSeriesId: {},
                            IsAnomaly: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Sd",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAnomalyDetector: {
            http: {
                requestUri: "/UpdateAnomalyDetector"
            },
            input: {
                type: "structure",
                required: [ "AnomalyDetectorArn" ],
                members: {
                    AnomalyDetectorArn: {},
                    KmsKeyArn: {},
                    AnomalyDetectorDescription: {},
                    AnomalyDetectorConfig: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnomalyDetectorArn: {}
                }
            }
        },
        UpdateMetricSet: {
            http: {
                requestUri: "/UpdateMetricSet"
            },
            input: {
                type: "structure",
                required: [ "MetricSetArn" ],
                members: {
                    MetricSetArn: {},
                    MetricSetDescription: {},
                    MetricList: {
                        shape: "Sr"
                    },
                    Offset: {
                        type: "integer"
                    },
                    TimestampColumn: {
                        shape: "Sx"
                    },
                    DimensionList: {
                        shape: "Sz"
                    },
                    MetricSetFrequency: {},
                    MetricSource: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MetricSetArn: {}
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "structure",
            members: {
                SNSConfiguration: {
                    type: "structure",
                    required: [ "RoleArn", "SnsTopicArn" ],
                    members: {
                        RoleArn: {},
                        SnsTopicArn: {}
                    }
                },
                LambdaConfiguration: {
                    type: "structure",
                    required: [ "RoleArn", "LambdaArn" ],
                    members: {
                        RoleArn: {},
                        LambdaArn: {}
                    }
                }
            }
        },
        Sd: {
            type: "map",
            key: {},
            value: {}
        },
        Sk: {
            type: "structure",
            members: {
                AnomalyDetectorFrequency: {}
            }
        },
        Sr: {
            type: "list",
            member: {
                type: "structure",
                required: [ "MetricName", "AggregationFunction" ],
                members: {
                    MetricName: {},
                    AggregationFunction: {},
                    Namespace: {}
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                ColumnName: {},
                ColumnFormat: {}
            }
        },
        Sz: {
            type: "list",
            member: {}
        },
        S10: {
            type: "structure",
            members: {
                S3SourceConfig: {
                    type: "structure",
                    required: [ "RoleArn" ],
                    members: {
                        RoleArn: {},
                        TemplatedPathList: {
                            shape: "S12"
                        },
                        HistoricalDataPathList: {
                            shape: "S14"
                        },
                        FileFormatDescriptor: {
                            shape: "S16"
                        }
                    }
                },
                AppFlowConfig: {
                    type: "structure",
                    required: [ "RoleArn", "FlowName" ],
                    members: {
                        RoleArn: {},
                        FlowName: {}
                    }
                },
                CloudWatchConfig: {
                    type: "structure",
                    required: [ "RoleArn" ],
                    members: {
                        RoleArn: {}
                    }
                },
                RDSSourceConfig: {
                    type: "structure",
                    required: [ "DBInstanceIdentifier", "DatabaseHost", "DatabasePort", "SecretManagerArn", "DatabaseName", "TableName", "RoleArn", "VpcConfiguration" ],
                    members: {
                        DBInstanceIdentifier: {},
                        DatabaseHost: {},
                        DatabasePort: {
                            type: "integer"
                        },
                        SecretManagerArn: {},
                        DatabaseName: {},
                        TableName: {},
                        RoleArn: {},
                        VpcConfiguration: {
                            shape: "S1q"
                        }
                    }
                },
                RedshiftSourceConfig: {
                    type: "structure",
                    required: [ "ClusterIdentifier", "DatabaseHost", "DatabasePort", "SecretManagerArn", "DatabaseName", "TableName", "RoleArn", "VpcConfiguration" ],
                    members: {
                        ClusterIdentifier: {},
                        DatabaseHost: {},
                        DatabasePort: {
                            type: "integer"
                        },
                        SecretManagerArn: {},
                        DatabaseName: {},
                        TableName: {},
                        RoleArn: {},
                        VpcConfiguration: {
                            shape: "S1q"
                        }
                    }
                }
            }
        },
        S12: {
            type: "list",
            member: {}
        },
        S14: {
            type: "list",
            member: {}
        },
        S16: {
            type: "structure",
            members: {
                CsvFormatDescriptor: {
                    type: "structure",
                    members: {
                        FileCompression: {},
                        Charset: {},
                        ContainsHeader: {
                            type: "boolean"
                        },
                        Delimiter: {},
                        HeaderList: {
                            type: "list",
                            member: {}
                        },
                        QuoteSymbol: {}
                    }
                },
                JsonFormatDescriptor: {
                    type: "structure",
                    members: {
                        FileCompression: {},
                        Charset: {}
                    }
                }
            }
        },
        S1q: {
            type: "structure",
            required: [ "SubnetIdList", "SecurityGroupIdList" ],
            members: {
                SubnetIdList: {
                    type: "list",
                    member: {}
                },
                SecurityGroupIdList: {
                    type: "list",
                    member: {}
                }
            }
        }
    },
    paginators: {
        DescribeAnomalyDetectionExecutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetFeedback: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAlerts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAnomalyDetectors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAnomalyGroupSummaries: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAnomalyGroupTimeSeries: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMetricSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["mgn"] = {};

AWS.Mgn = AWS.Service.defineService("mgn", [ "2020-02-26" ]);

AWS.apiLoader.services["mgn"]["2020-02-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-02-26",
        endpointPrefix: "mgn",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "mgn",
        serviceFullName: "Application Migration Service",
        serviceId: "mgn",
        signatureVersion: "v4",
        signingName: "mgn",
        uid: "mgn-2020-02-26"
    },
    operations: {
        ChangeServerLifeCycleState: {
            http: {
                requestUri: "/ChangeServerLifeCycleState",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "lifeCycle", "sourceServerID" ],
                members: {
                    lifeCycle: {
                        type: "structure",
                        required: [ "state" ],
                        members: {
                            state: {}
                        }
                    },
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S5"
            }
        },
        CreateReplicationConfigurationTemplate: {
            http: {
                requestUri: "/CreateReplicationConfigurationTemplate",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "associateDefaultSecurityGroup", "bandwidthThrottling", "createPublicIP", "dataPlaneRouting", "defaultLargeStagingDiskType", "ebsEncryption", "replicationServerInstanceType", "replicationServersSecurityGroupsIDs", "stagingAreaSubnetId", "stagingAreaTags", "useDedicatedReplicationServer" ],
                members: {
                    associateDefaultSecurityGroup: {
                        type: "boolean"
                    },
                    bandwidthThrottling: {
                        type: "long"
                    },
                    createPublicIP: {
                        type: "boolean"
                    },
                    dataPlaneRouting: {},
                    defaultLargeStagingDiskType: {},
                    ebsEncryption: {},
                    ebsEncryptionKeyArn: {},
                    replicationServerInstanceType: {},
                    replicationServersSecurityGroupsIDs: {
                        shape: "S1j"
                    },
                    stagingAreaSubnetId: {},
                    stagingAreaTags: {
                        shape: "S1c"
                    },
                    tags: {
                        shape: "S1c"
                    },
                    useDedicatedReplicationServer: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S1m"
            }
        },
        DeleteJob: {
            http: {
                requestUri: "/DeleteJob",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "jobID" ],
                members: {
                    jobID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteReplicationConfigurationTemplate: {
            http: {
                requestUri: "/DeleteReplicationConfigurationTemplate",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "replicationConfigurationTemplateID" ],
                members: {
                    replicationConfigurationTemplateID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteSourceServer: {
            http: {
                requestUri: "/DeleteSourceServer",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeJobLogItems: {
            http: {
                requestUri: "/DescribeJobLogItems",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobID" ],
                members: {
                    jobID: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                event: {},
                                eventData: {
                                    type: "structure",
                                    members: {
                                        conversionServerID: {},
                                        rawError: {},
                                        sourceServerID: {},
                                        targetInstanceID: {}
                                    }
                                },
                                logDateTime: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeJobs: {
            http: {
                requestUri: "/DescribeJobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "filters" ],
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            fromDate: {},
                            jobIDs: {
                                type: "list",
                                member: {}
                            },
                            toDate: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S27"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeReplicationConfigurationTemplates: {
            http: {
                requestUri: "/DescribeReplicationConfigurationTemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "replicationConfigurationTemplateIDs" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    replicationConfigurationTemplateIDs: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S1m"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeSourceServers: {
            http: {
                requestUri: "/DescribeSourceServers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "filters" ],
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            isArchived: {
                                type: "boolean"
                            },
                            sourceServerIDs: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S5"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DisconnectFromService: {
            http: {
                requestUri: "/DisconnectFromService",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S5"
            }
        },
        FinalizeCutover: {
            http: {
                requestUri: "/FinalizeCutover",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S5"
            }
        },
        GetLaunchConfiguration: {
            http: {
                requestUri: "/GetLaunchConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S2q"
            }
        },
        GetReplicationConfiguration: {
            http: {
                requestUri: "/GetReplicationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S2w"
            }
        },
        InitializeService: {
            http: {
                requestUri: "/InitializeService",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1c"
                    }
                }
            }
        },
        MarkAsArchived: {
            http: {
                requestUri: "/MarkAsArchived",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S5"
            }
        },
        RetryDataReplication: {
            http: {
                requestUri: "/RetryDataReplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S5"
            }
        },
        StartCutover: {
            http: {
                requestUri: "/StartCutover",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "sourceServerIDs" ],
                members: {
                    sourceServerIDs: {
                        type: "list",
                        member: {}
                    },
                    tags: {
                        shape: "S1c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S27"
                    }
                }
            }
        },
        StartTest: {
            http: {
                requestUri: "/StartTest",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "sourceServerIDs" ],
                members: {
                    sourceServerIDs: {
                        type: "list",
                        member: {}
                    },
                    tags: {
                        shape: "S1c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S27"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1c"
                    }
                }
            },
            idempotent: true
        },
        TerminateTargetInstances: {
            http: {
                requestUri: "/TerminateTargetInstances",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "sourceServerIDs" ],
                members: {
                    sourceServerIDs: {
                        type: "list",
                        member: {}
                    },
                    tags: {
                        shape: "S1c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S27"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            idempotent: true
        },
        UpdateLaunchConfiguration: {
            http: {
                requestUri: "/UpdateLaunchConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    copyPrivateIp: {
                        type: "boolean"
                    },
                    copyTags: {
                        type: "boolean"
                    },
                    launchDisposition: {},
                    licensing: {
                        shape: "S2s"
                    },
                    name: {},
                    sourceServerID: {},
                    targetInstanceTypeRightSizingMethod: {}
                }
            },
            output: {
                shape: "S2q"
            },
            idempotent: true
        },
        UpdateReplicationConfiguration: {
            http: {
                requestUri: "/UpdateReplicationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    associateDefaultSecurityGroup: {
                        type: "boolean"
                    },
                    bandwidthThrottling: {
                        type: "long"
                    },
                    createPublicIP: {
                        type: "boolean"
                    },
                    dataPlaneRouting: {},
                    defaultLargeStagingDiskType: {},
                    ebsEncryption: {},
                    ebsEncryptionKeyArn: {},
                    name: {},
                    replicatedDisks: {
                        shape: "S2x"
                    },
                    replicationServerInstanceType: {},
                    replicationServersSecurityGroupsIDs: {
                        shape: "S1j"
                    },
                    sourceServerID: {},
                    stagingAreaSubnetId: {},
                    stagingAreaTags: {
                        shape: "S1c"
                    },
                    useDedicatedReplicationServer: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S2w"
            },
            idempotent: true
        },
        UpdateReplicationConfigurationTemplate: {
            http: {
                requestUri: "/UpdateReplicationConfigurationTemplate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "replicationConfigurationTemplateID" ],
                members: {
                    arn: {},
                    associateDefaultSecurityGroup: {
                        type: "boolean"
                    },
                    bandwidthThrottling: {
                        type: "long"
                    },
                    createPublicIP: {
                        type: "boolean"
                    },
                    dataPlaneRouting: {},
                    defaultLargeStagingDiskType: {},
                    ebsEncryption: {},
                    ebsEncryptionKeyArn: {},
                    replicationConfigurationTemplateID: {},
                    replicationServerInstanceType: {},
                    replicationServersSecurityGroupsIDs: {
                        shape: "S1j"
                    },
                    stagingAreaSubnetId: {},
                    stagingAreaTags: {
                        shape: "S1c"
                    },
                    useDedicatedReplicationServer: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S1m"
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                arn: {},
                dataReplicationInfo: {
                    type: "structure",
                    members: {
                        dataReplicationError: {
                            type: "structure",
                            members: {
                                error: {},
                                rawError: {}
                            }
                        },
                        dataReplicationInitiation: {
                            type: "structure",
                            members: {
                                nextAttemptDateTime: {},
                                startDateTime: {},
                                steps: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            status: {}
                                        }
                                    }
                                }
                            }
                        },
                        dataReplicationState: {},
                        etaDateTime: {},
                        lagDuration: {},
                        replicatedDisks: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    backloggedStorageBytes: {
                                        type: "long"
                                    },
                                    deviceName: {},
                                    replicatedStorageBytes: {
                                        type: "long"
                                    },
                                    rescannedStorageBytes: {
                                        type: "long"
                                    },
                                    totalStorageBytes: {
                                        type: "long"
                                    }
                                }
                            }
                        }
                    }
                },
                isArchived: {
                    type: "boolean"
                },
                launchedInstance: {
                    type: "structure",
                    members: {
                        ec2InstanceID: {},
                        firstBoot: {},
                        jobID: {}
                    }
                },
                lifeCycle: {
                    type: "structure",
                    members: {
                        addedToServiceDateTime: {},
                        elapsedReplicationDuration: {},
                        firstByteDateTime: {},
                        lastCutover: {
                            type: "structure",
                            members: {
                                finalized: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {}
                                    }
                                },
                                initiated: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {},
                                        jobID: {}
                                    }
                                },
                                reverted: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {}
                                    }
                                }
                            }
                        },
                        lastSeenByServiceDateTime: {},
                        lastTest: {
                            type: "structure",
                            members: {
                                finalized: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {}
                                    }
                                },
                                initiated: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {},
                                        jobID: {}
                                    }
                                },
                                reverted: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {}
                                    }
                                }
                            }
                        },
                        state: {}
                    }
                },
                sourceProperties: {
                    type: "structure",
                    members: {
                        cpus: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    cores: {
                                        type: "long"
                                    },
                                    modelName: {}
                                }
                            }
                        },
                        disks: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    bytes: {
                                        type: "long"
                                    },
                                    deviceName: {}
                                }
                            }
                        },
                        identificationHints: {
                            type: "structure",
                            members: {
                                awsInstanceID: {},
                                fqdn: {},
                                hostname: {},
                                vmWareUuid: {}
                            }
                        },
                        lastUpdatedDateTime: {},
                        networkInterfaces: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    ips: {
                                        type: "list",
                                        member: {}
                                    },
                                    isPrimary: {
                                        type: "boolean"
                                    },
                                    macAddress: {}
                                }
                            }
                        },
                        os: {
                            type: "structure",
                            members: {
                                fullString: {}
                            }
                        },
                        ramBytes: {
                            type: "long"
                        },
                        recommendedInstanceType: {}
                    }
                },
                sourceServerID: {},
                tags: {
                    shape: "S1c"
                }
            }
        },
        S1c: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S1j: {
            type: "list",
            member: {}
        },
        S1m: {
            type: "structure",
            required: [ "replicationConfigurationTemplateID" ],
            members: {
                arn: {},
                associateDefaultSecurityGroup: {
                    type: "boolean"
                },
                bandwidthThrottling: {
                    type: "long"
                },
                createPublicIP: {
                    type: "boolean"
                },
                dataPlaneRouting: {},
                defaultLargeStagingDiskType: {},
                ebsEncryption: {},
                ebsEncryptionKeyArn: {},
                replicationConfigurationTemplateID: {},
                replicationServerInstanceType: {},
                replicationServersSecurityGroupsIDs: {
                    shape: "S1j"
                },
                stagingAreaSubnetId: {},
                stagingAreaTags: {
                    shape: "S1c"
                },
                tags: {
                    shape: "S1c"
                },
                useDedicatedReplicationServer: {
                    type: "boolean"
                }
            }
        },
        S27: {
            type: "structure",
            required: [ "jobID" ],
            members: {
                arn: {},
                creationDateTime: {},
                endDateTime: {},
                initiatedBy: {},
                jobID: {},
                participatingServers: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            launchStatus: {},
                            sourceServerID: {}
                        }
                    }
                },
                status: {},
                tags: {
                    shape: "S1c"
                },
                type: {}
            }
        },
        S2q: {
            type: "structure",
            members: {
                copyPrivateIp: {
                    type: "boolean"
                },
                copyTags: {
                    type: "boolean"
                },
                ec2LaunchTemplateID: {},
                launchDisposition: {},
                licensing: {
                    shape: "S2s"
                },
                name: {},
                sourceServerID: {},
                targetInstanceTypeRightSizingMethod: {}
            }
        },
        S2s: {
            type: "structure",
            members: {
                osByol: {
                    type: "boolean"
                }
            }
        },
        S2w: {
            type: "structure",
            members: {
                associateDefaultSecurityGroup: {
                    type: "boolean"
                },
                bandwidthThrottling: {
                    type: "long"
                },
                createPublicIP: {
                    type: "boolean"
                },
                dataPlaneRouting: {},
                defaultLargeStagingDiskType: {},
                ebsEncryption: {},
                ebsEncryptionKeyArn: {},
                name: {},
                replicatedDisks: {
                    shape: "S2x"
                },
                replicationServerInstanceType: {},
                replicationServersSecurityGroupsIDs: {
                    shape: "S1j"
                },
                sourceServerID: {},
                stagingAreaSubnetId: {},
                stagingAreaTags: {
                    shape: "S1c"
                },
                useDedicatedReplicationServer: {
                    type: "boolean"
                }
            }
        },
        S2x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    deviceName: {},
                    iops: {
                        type: "long"
                    },
                    isBootDisk: {
                        type: "boolean"
                    },
                    stagingDiskType: {}
                }
            }
        }
    },
    paginators: {
        DescribeJobLogItems: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeReplicationConfigurationTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeSourceServers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        }
    }
};

AWS.apiLoader.services["lookoutequipment"] = {};

AWS.LookoutEquipment = AWS.Service.defineService("lookoutequipment", [ "2020-12-15" ]);

AWS.apiLoader.services["lookoutequipment"]["2020-12-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-12-15",
        endpointPrefix: "lookoutequipment",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "LookoutEquipment",
        serviceFullName: "Amazon Lookout for Equipment",
        serviceId: "LookoutEquipment",
        signatureVersion: "v4",
        targetPrefix: "AWSLookoutEquipmentFrontendService",
        uid: "lookoutequipment-2020-12-15"
    },
    operations: {
        CreateDataset: {
            input: {
                type: "structure",
                required: [ "DatasetName", "DatasetSchema", "ClientToken" ],
                members: {
                    DatasetName: {},
                    DatasetSchema: {
                        shape: "S3"
                    },
                    ServerSideKmsKeyId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetName: {},
                    DatasetArn: {},
                    Status: {}
                }
            }
        },
        CreateInferenceScheduler: {
            input: {
                type: "structure",
                required: [ "ModelName", "InferenceSchedulerName", "DataUploadFrequency", "DataInputConfiguration", "DataOutputConfiguration", "RoleArn", "ClientToken" ],
                members: {
                    ModelName: {},
                    InferenceSchedulerName: {},
                    DataDelayOffsetInMinutes: {
                        type: "long"
                    },
                    DataUploadFrequency: {},
                    DataInputConfiguration: {
                        shape: "Sj"
                    },
                    DataOutputConfiguration: {
                        shape: "Sr"
                    },
                    RoleArn: {},
                    ServerSideKmsKeyId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InferenceSchedulerArn: {},
                    InferenceSchedulerName: {},
                    Status: {}
                }
            }
        },
        CreateModel: {
            input: {
                type: "structure",
                required: [ "ModelName", "DatasetName", "ClientToken" ],
                members: {
                    ModelName: {},
                    DatasetName: {},
                    DatasetSchema: {
                        shape: "S3"
                    },
                    LabelsInputConfiguration: {
                        shape: "Sz"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    TrainingDataStartTime: {
                        type: "timestamp"
                    },
                    TrainingDataEndTime: {
                        type: "timestamp"
                    },
                    EvaluationDataStartTime: {
                        type: "timestamp"
                    },
                    EvaluationDataEndTime: {
                        type: "timestamp"
                    },
                    RoleArn: {},
                    DataPreProcessingConfiguration: {
                        shape: "S12"
                    },
                    ServerSideKmsKeyId: {},
                    Tags: {
                        shape: "S7"
                    },
                    OffCondition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelArn: {},
                    Status: {}
                }
            }
        },
        DeleteDataset: {
            input: {
                type: "structure",
                required: [ "DatasetName" ],
                members: {
                    DatasetName: {}
                }
            }
        },
        DeleteInferenceScheduler: {
            input: {
                type: "structure",
                required: [ "InferenceSchedulerName" ],
                members: {
                    InferenceSchedulerName: {}
                }
            }
        },
        DeleteModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            }
        },
        DescribeDataIngestionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    DatasetArn: {},
                    IngestionInputConfiguration: {
                        shape: "S1f"
                    },
                    RoleArn: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    Status: {},
                    FailedReason: {}
                }
            }
        },
        DescribeDataset: {
            input: {
                type: "structure",
                required: [ "DatasetName" ],
                members: {
                    DatasetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetName: {},
                    DatasetArn: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Status: {},
                    Schema: {
                        jsonvalue: true
                    },
                    ServerSideKmsKeyId: {},
                    IngestionInputConfiguration: {
                        shape: "S1f"
                    }
                }
            }
        },
        DescribeInferenceScheduler: {
            input: {
                type: "structure",
                required: [ "InferenceSchedulerName" ],
                members: {
                    InferenceSchedulerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelArn: {},
                    ModelName: {},
                    InferenceSchedulerName: {},
                    InferenceSchedulerArn: {},
                    Status: {},
                    DataDelayOffsetInMinutes: {
                        type: "long"
                    },
                    DataUploadFrequency: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    DataInputConfiguration: {
                        shape: "Sj"
                    },
                    DataOutputConfiguration: {
                        shape: "Sr"
                    },
                    RoleArn: {},
                    ServerSideKmsKeyId: {}
                }
            }
        },
        DescribeModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelName: {},
                    ModelArn: {},
                    DatasetName: {},
                    DatasetArn: {},
                    Schema: {
                        jsonvalue: true
                    },
                    LabelsInputConfiguration: {
                        shape: "Sz"
                    },
                    TrainingDataStartTime: {
                        type: "timestamp"
                    },
                    TrainingDataEndTime: {
                        type: "timestamp"
                    },
                    EvaluationDataStartTime: {
                        type: "timestamp"
                    },
                    EvaluationDataEndTime: {
                        type: "timestamp"
                    },
                    RoleArn: {},
                    DataPreProcessingConfiguration: {
                        shape: "S12"
                    },
                    Status: {},
                    TrainingExecutionStartTime: {
                        type: "timestamp"
                    },
                    TrainingExecutionEndTime: {
                        type: "timestamp"
                    },
                    FailedReason: {},
                    ModelMetrics: {
                        jsonvalue: true
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    ServerSideKmsKeyId: {},
                    OffCondition: {}
                }
            }
        },
        ListDataIngestionJobs: {
            input: {
                type: "structure",
                members: {
                    DatasetName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DataIngestionJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobId: {},
                                DatasetName: {},
                                DatasetArn: {},
                                IngestionInputConfiguration: {
                                    shape: "S1f"
                                },
                                Status: {}
                            }
                        }
                    }
                }
            }
        },
        ListDatasets: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    DatasetNameBeginsWith: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DatasetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DatasetName: {},
                                DatasetArn: {},
                                Status: {},
                                CreatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListInferenceExecutions: {
            input: {
                type: "structure",
                required: [ "InferenceSchedulerName" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    InferenceSchedulerName: {},
                    DataStartTimeAfter: {
                        type: "timestamp"
                    },
                    DataEndTimeBefore: {
                        type: "timestamp"
                    },
                    Status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    InferenceExecutionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModelName: {},
                                ModelArn: {},
                                InferenceSchedulerName: {},
                                InferenceSchedulerArn: {},
                                ScheduledStartTime: {
                                    type: "timestamp"
                                },
                                DataStartTime: {
                                    type: "timestamp"
                                },
                                DataEndTime: {
                                    type: "timestamp"
                                },
                                DataInputConfiguration: {
                                    shape: "Sj"
                                },
                                DataOutputConfiguration: {
                                    shape: "Sr"
                                },
                                CustomerResultObject: {
                                    type: "structure",
                                    required: [ "Bucket", "Key" ],
                                    members: {
                                        Bucket: {},
                                        Key: {}
                                    }
                                },
                                Status: {},
                                FailedReason: {}
                            }
                        }
                    }
                }
            }
        },
        ListInferenceSchedulers: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    InferenceSchedulerNameBeginsWith: {},
                    ModelName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    InferenceSchedulerSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModelName: {},
                                ModelArn: {},
                                InferenceSchedulerName: {},
                                InferenceSchedulerArn: {},
                                Status: {},
                                DataDelayOffsetInMinutes: {
                                    type: "long"
                                },
                                DataUploadFrequency: {}
                            }
                        }
                    }
                }
            }
        },
        ListModels: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Status: {},
                    ModelNameBeginsWith: {},
                    DatasetNameBeginsWith: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ModelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModelName: {},
                                ModelArn: {},
                                DatasetName: {},
                                DatasetArn: {},
                                Status: {},
                                CreatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        StartDataIngestionJob: {
            input: {
                type: "structure",
                required: [ "DatasetName", "IngestionInputConfiguration", "RoleArn", "ClientToken" ],
                members: {
                    DatasetName: {},
                    IngestionInputConfiguration: {
                        shape: "S1f"
                    },
                    RoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    Status: {}
                }
            }
        },
        StartInferenceScheduler: {
            input: {
                type: "structure",
                required: [ "InferenceSchedulerName" ],
                members: {
                    InferenceSchedulerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelArn: {},
                    ModelName: {},
                    InferenceSchedulerName: {},
                    InferenceSchedulerArn: {},
                    Status: {}
                }
            }
        },
        StopInferenceScheduler: {
            input: {
                type: "structure",
                required: [ "InferenceSchedulerName" ],
                members: {
                    InferenceSchedulerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelArn: {},
                    ModelName: {},
                    InferenceSchedulerName: {},
                    InferenceSchedulerArn: {},
                    Status: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateInferenceScheduler: {
            input: {
                type: "structure",
                required: [ "InferenceSchedulerName" ],
                members: {
                    InferenceSchedulerName: {},
                    DataDelayOffsetInMinutes: {
                        type: "long"
                    },
                    DataUploadFrequency: {},
                    DataInputConfiguration: {
                        shape: "Sj"
                    },
                    DataOutputConfiguration: {
                        shape: "Sr"
                    },
                    RoleArn: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                InlineDataSchema: {
                    jsonvalue: true
                }
            }
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                S3InputConfiguration: {
                    type: "structure",
                    required: [ "Bucket" ],
                    members: {
                        Bucket: {},
                        Prefix: {}
                    }
                },
                InputTimeZoneOffset: {},
                InferenceInputNameConfiguration: {
                    type: "structure",
                    members: {
                        TimestampFormat: {},
                        ComponentTimestampDelimiter: {}
                    }
                }
            }
        },
        Sr: {
            type: "structure",
            required: [ "S3OutputConfiguration" ],
            members: {
                S3OutputConfiguration: {
                    type: "structure",
                    required: [ "Bucket" ],
                    members: {
                        Bucket: {},
                        Prefix: {}
                    }
                },
                KmsKeyId: {}
            }
        },
        Sz: {
            type: "structure",
            required: [ "S3InputConfiguration" ],
            members: {
                S3InputConfiguration: {
                    type: "structure",
                    required: [ "Bucket" ],
                    members: {
                        Bucket: {},
                        Prefix: {}
                    }
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                TargetSamplingRate: {}
            }
        },
        S1f: {
            type: "structure",
            required: [ "S3InputConfiguration" ],
            members: {
                S3InputConfiguration: {
                    type: "structure",
                    required: [ "Bucket" ],
                    members: {
                        Bucket: {},
                        Prefix: {}
                    }
                }
            }
        }
    },
    paginators: {
        ListDataIngestionJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDatasets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListInferenceExecutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListInferenceSchedulers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListModels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["nimble"] = {};

AWS.Nimble = AWS.Service.defineService("nimble", [ "2020-08-01" ]);

AWS.apiLoader.services["nimble"]["2020-08-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-01",
        endpointPrefix: "nimble",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AmazonNimbleStudio",
        serviceId: "nimble",
        signatureVersion: "v4",
        signingName: "nimble",
        uid: "nimble-2020-08-01"
    },
    operations: {
        AcceptEulas: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/eula-acceptances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    eulaIds: {
                        shape: "S3"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eulaAcceptances: {
                        shape: "S6"
                    }
                }
            }
        },
        CreateLaunchProfile: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ec2SubnetIds", "launchProfileProtocolVersions", "name", "streamConfiguration", "studioComponentIds", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    description: {
                        shape: "Sc"
                    },
                    ec2SubnetIds: {
                        shape: "Sd"
                    },
                    launchProfileProtocolVersions: {
                        shape: "Sf"
                    },
                    name: {
                        shape: "Sh"
                    },
                    streamConfiguration: {
                        shape: "Si"
                    },
                    studioComponentIds: {
                        shape: "Sq"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    tags: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfile: {
                        shape: "St"
                    }
                }
            }
        },
        CreateStreamingImage: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/streaming-images",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ec2ImageId", "name", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    description: {
                        type: "string",
                        sensitive: true
                    },
                    ec2ImageId: {},
                    name: {
                        type: "string",
                        sensitive: true
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    tags: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamingImage: {
                        shape: "S13"
                    }
                }
            }
        },
        CreateStreamingSession: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    ec2InstanceType: {},
                    launchProfileId: {},
                    ownedBy: {},
                    streamingImageId: {},
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    tags: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1f"
                    }
                }
            }
        },
        CreateStreamingSessionStream: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/streams",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    expirationInSeconds: {
                        type: "integer"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    stream: {
                        shape: "S1m"
                    }
                }
            },
            idempotent: true
        },
        CreateStudio: {
            http: {
                requestUri: "/2020-08-01/studios",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "adminRoleArn", "displayName", "studioName", "userRoleArn" ],
                members: {
                    adminRoleArn: {},
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    displayName: {
                        type: "string",
                        sensitive: true
                    },
                    studioEncryptionConfiguration: {
                        shape: "S1s"
                    },
                    studioName: {},
                    tags: {
                        shape: "Sr"
                    },
                    userRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    studio: {
                        shape: "S1x"
                    }
                }
            }
        },
        CreateStudioComponent: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/studio-components",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "studioId", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    configuration: {
                        shape: "S23"
                    },
                    description: {
                        shape: "S2j"
                    },
                    ec2SecurityGroupIds: {
                        shape: "S2k"
                    },
                    initializationScripts: {
                        shape: "S2m"
                    },
                    name: {
                        shape: "S2r"
                    },
                    scriptParameters: {
                        shape: "S2s"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    subtype: {},
                    tags: {
                        shape: "Sr"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    studioComponent: {
                        shape: "S2z"
                    }
                }
            }
        },
        DeleteLaunchProfile: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfile: {
                        shape: "St"
                    }
                }
            },
            idempotent: true
        },
        DeleteLaunchProfileMember: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "principalId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    principalId: {
                        location: "uri",
                        locationName: "principalId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteStreamingImage: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "streamingImageId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    streamingImageId: {
                        location: "uri",
                        locationName: "streamingImageId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamingImage: {
                        shape: "S13"
                    }
                }
            },
            idempotent: true
        },
        DeleteStreamingSession: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1f"
                    }
                }
            },
            idempotent: true
        },
        DeleteStudio: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "studio" ],
                members: {
                    studio: {
                        shape: "S1x"
                    }
                }
            },
            idempotent: true
        },
        DeleteStudioComponent: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioComponentId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    studioComponentId: {
                        location: "uri",
                        locationName: "studioComponentId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    studioComponent: {
                        shape: "S2z"
                    }
                }
            },
            idempotent: true
        },
        DeleteStudioMember: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/studios/{studioId}/membership/{principalId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "principalId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    principalId: {
                        location: "uri",
                        locationName: "principalId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetEula: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/eulas/{eulaId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "eulaId" ],
                members: {
                    eulaId: {
                        location: "uri",
                        locationName: "eulaId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eula: {
                        shape: "S3j"
                    }
                }
            }
        },
        GetLaunchProfile: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "studioId" ],
                members: {
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfile: {
                        shape: "St"
                    }
                }
            }
        },
        GetLaunchProfileDetails: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/details",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "studioId" ],
                members: {
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfile: {
                        shape: "St"
                    },
                    streamingImages: {
                        shape: "S3p"
                    },
                    studioComponentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdAt: {
                                    shape: "S8"
                                },
                                createdBy: {},
                                description: {
                                    shape: "S2j"
                                },
                                name: {
                                    shape: "S2r"
                                },
                                studioComponentId: {},
                                subtype: {},
                                type: {},
                                updatedAt: {
                                    shape: "S8"
                                },
                                updatedBy: {}
                            }
                        }
                    }
                }
            }
        },
        GetLaunchProfileInitialization: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/init",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "launchProfileProtocolVersions", "launchPurpose", "platform", "studioId" ],
                members: {
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    launchProfileProtocolVersions: {
                        shape: "S3t",
                        location: "querystring",
                        locationName: "launchProfileProtocolVersions"
                    },
                    launchPurpose: {
                        location: "querystring",
                        locationName: "launchPurpose"
                    },
                    platform: {
                        location: "querystring",
                        locationName: "platform"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfileInitialization: {
                        type: "structure",
                        members: {
                            activeDirectory: {
                                type: "structure",
                                members: {
                                    computerAttributes: {
                                        shape: "S25"
                                    },
                                    directoryId: {},
                                    directoryName: {},
                                    dnsIpAddresses: {
                                        type: "list",
                                        member: {}
                                    },
                                    organizationalUnitDistinguishedName: {},
                                    studioComponentId: {},
                                    studioComponentName: {
                                        shape: "S2r"
                                    }
                                }
                            },
                            ec2SecurityGroupIds: {
                                type: "list",
                                member: {}
                            },
                            launchProfileId: {},
                            launchProfileProtocolVersion: {},
                            launchPurpose: {},
                            name: {
                                shape: "Sh"
                            },
                            platform: {},
                            systemInitializationScripts: {
                                shape: "S41"
                            },
                            userInitializationScripts: {
                                shape: "S41"
                            }
                        }
                    }
                }
            }
        },
        GetLaunchProfileMember: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "principalId", "studioId" ],
                members: {
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    principalId: {
                        location: "uri",
                        locationName: "principalId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    member: {
                        shape: "S45"
                    }
                }
            }
        },
        GetStreamingImage: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "streamingImageId", "studioId" ],
                members: {
                    streamingImageId: {
                        location: "uri",
                        locationName: "streamingImageId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamingImage: {
                        shape: "S13"
                    }
                }
            }
        },
        GetStreamingSession: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "studioId" ],
                members: {
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1f"
                    }
                }
            }
        },
        GetStreamingSessionStream: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/streams/{streamId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "streamId", "studioId" ],
                members: {
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    streamId: {
                        location: "uri",
                        locationName: "streamId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    stream: {
                        shape: "S1m"
                    }
                }
            }
        },
        GetStudio: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "studio" ],
                members: {
                    studio: {
                        shape: "S1x"
                    }
                }
            }
        },
        GetStudioComponent: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioComponentId", "studioId" ],
                members: {
                    studioComponentId: {
                        location: "uri",
                        locationName: "studioComponentId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    studioComponent: {
                        shape: "S2z"
                    }
                }
            }
        },
        GetStudioMember: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/membership/{principalId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "principalId", "studioId" ],
                members: {
                    principalId: {
                        location: "uri",
                        locationName: "principalId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    member: {
                        shape: "S4j"
                    }
                }
            }
        },
        ListEulaAcceptances: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/eula-acceptances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    eulaIds: {
                        shape: "S3t",
                        location: "querystring",
                        locationName: "eulaIds"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eulaAcceptances: {
                        shape: "S6"
                    },
                    nextToken: {}
                }
            }
        },
        ListEulas: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/eulas",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    eulaIds: {
                        shape: "S3t",
                        location: "querystring",
                        locationName: "eulaIds"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eulas: {
                        type: "list",
                        member: {
                            shape: "S3j"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLaunchProfileMembers: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "studioId" ],
                members: {
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    members: {
                        type: "list",
                        member: {
                            shape: "S45"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLaunchProfiles: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    principalId: {
                        location: "querystring",
                        locationName: "principalId"
                    },
                    states: {
                        shape: "S3t",
                        location: "querystring",
                        locationName: "states"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfiles: {
                        type: "list",
                        member: {
                            shape: "St"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListStreamingImages: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-images",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    owner: {
                        location: "querystring",
                        locationName: "owner"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    streamingImages: {
                        shape: "S3p"
                    }
                }
            }
        },
        ListStreamingSessions: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    createdBy: {
                        location: "querystring",
                        locationName: "createdBy"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ownedBy: {
                        location: "querystring",
                        locationName: "ownedBy"
                    },
                    sessionIds: {
                        location: "querystring",
                        locationName: "sessionIds"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    sessions: {
                        type: "list",
                        member: {
                            shape: "S1f"
                        }
                    }
                }
            }
        },
        ListStudioComponents: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/studio-components",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    states: {
                        shape: "S3t",
                        location: "querystring",
                        locationName: "states"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    types: {
                        shape: "S3t",
                        location: "querystring",
                        locationName: "types"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    studioComponents: {
                        type: "list",
                        member: {
                            shape: "S2z"
                        }
                    }
                }
            }
        },
        ListStudioMembers: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios/{studioId}/membership",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    members: {
                        type: "list",
                        member: {
                            shape: "S4j"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListStudios: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/studios",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "studios" ],
                members: {
                    nextToken: {},
                    studios: {
                        type: "list",
                        member: {
                            shape: "S1x"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/2020-08-01/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sr"
                    }
                }
            }
        },
        PutLaunchProfileMembers: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identityStoreId", "launchProfileId", "members", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    identityStoreId: {},
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    members: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "persona", "principalId" ],
                            members: {
                                persona: {},
                                principalId: {}
                            }
                        }
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutStudioMembers: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/membership",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identityStoreId", "members", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    identityStoreId: {},
                    members: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "persona", "principalId" ],
                            members: {
                                persona: {},
                                principalId: {}
                            }
                        }
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartStreamingSession: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1f"
                    }
                }
            },
            idempotent: true
        },
        StartStudioSSOConfigurationRepair: {
            http: {
                method: "PUT",
                requestUri: "/2020-08-01/studios/{studioId}/sso-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "studio" ],
                members: {
                    studio: {
                        shape: "S1x"
                    }
                }
            },
            idempotent: true
        },
        StopStreamingSession: {
            http: {
                requestUri: "/2020-08-01/studios/{studioId}/streaming-sessions/{sessionId}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sessionId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1f"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/2020-08-01/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/2020-08-01/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        shape: "S3t",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateLaunchProfile: {
            http: {
                method: "PATCH",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    description: {
                        shape: "Sc"
                    },
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    launchProfileProtocolVersions: {
                        shape: "Sf"
                    },
                    name: {
                        shape: "Sh"
                    },
                    streamConfiguration: {
                        shape: "Si"
                    },
                    studioComponentIds: {
                        shape: "Sq"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launchProfile: {
                        shape: "St"
                    }
                }
            }
        },
        UpdateLaunchProfileMember: {
            http: {
                method: "PATCH",
                requestUri: "/2020-08-01/studios/{studioId}/launch-profiles/{launchProfileId}/membership/{principalId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launchProfileId", "persona", "principalId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    launchProfileId: {
                        location: "uri",
                        locationName: "launchProfileId"
                    },
                    persona: {},
                    principalId: {
                        location: "uri",
                        locationName: "principalId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    member: {
                        shape: "S45"
                    }
                }
            }
        },
        UpdateStreamingImage: {
            http: {
                method: "PATCH",
                requestUri: "/2020-08-01/studios/{studioId}/streaming-images/{streamingImageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "streamingImageId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    description: {
                        type: "string",
                        sensitive: true
                    },
                    name: {
                        type: "string",
                        sensitive: true
                    },
                    streamingImageId: {
                        location: "uri",
                        locationName: "streamingImageId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamingImage: {
                        shape: "S13"
                    }
                }
            }
        },
        UpdateStudio: {
            http: {
                method: "PATCH",
                requestUri: "/2020-08-01/studios/{studioId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioId" ],
                members: {
                    adminRoleArn: {},
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    displayName: {
                        type: "string",
                        sensitive: true
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    userRoleArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "studio" ],
                members: {
                    studio: {
                        shape: "S1x"
                    }
                }
            }
        },
        UpdateStudioComponent: {
            http: {
                method: "PATCH",
                requestUri: "/2020-08-01/studios/{studioId}/studio-components/{studioComponentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "studioComponentId", "studioId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amz-Client-Token"
                    },
                    configuration: {
                        shape: "S23"
                    },
                    description: {
                        shape: "S2j"
                    },
                    ec2SecurityGroupIds: {
                        shape: "S2k"
                    },
                    initializationScripts: {
                        shape: "S2m"
                    },
                    name: {
                        shape: "S2r"
                    },
                    scriptParameters: {
                        shape: "S2s"
                    },
                    studioComponentId: {
                        location: "uri",
                        locationName: "studioComponentId"
                    },
                    studioId: {
                        location: "uri",
                        locationName: "studioId"
                    },
                    subtype: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    studioComponent: {
                        shape: "S2z"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    acceptedAt: {
                        shape: "S8"
                    },
                    acceptedBy: {},
                    accepteeId: {},
                    eulaAcceptanceId: {},
                    eulaId: {}
                }
            }
        },
        S8: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sc: {
            type: "string",
            sensitive: true
        },
        Sd: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "list",
            member: {}
        },
        Sh: {
            type: "string",
            sensitive: true
        },
        Si: {
            type: "structure",
            required: [ "clipboardMode", "ec2InstanceTypes", "streamingImageIds" ],
            members: {
                clipboardMode: {},
                ec2InstanceTypes: {
                    shape: "Sk"
                },
                maxSessionLengthInMinutes: {
                    type: "integer"
                },
                maxStoppedSessionLengthInMinutes: {
                    type: "integer"
                },
                streamingImageIds: {
                    shape: "So"
                }
            }
        },
        Sk: {
            type: "list",
            member: {}
        },
        So: {
            type: "list",
            member: {}
        },
        Sq: {
            type: "list",
            member: {}
        },
        Sr: {
            type: "map",
            key: {},
            value: {}
        },
        St: {
            type: "structure",
            members: {
                arn: {},
                createdAt: {
                    shape: "S8"
                },
                createdBy: {},
                description: {
                    shape: "Sc"
                },
                ec2SubnetIds: {
                    shape: "Sd"
                },
                launchProfileId: {},
                launchProfileProtocolVersions: {
                    shape: "Sf"
                },
                name: {
                    shape: "Sh"
                },
                state: {},
                statusCode: {},
                statusMessage: {},
                streamConfiguration: {
                    type: "structure",
                    required: [ "clipboardMode", "ec2InstanceTypes", "streamingImageIds" ],
                    members: {
                        clipboardMode: {},
                        ec2InstanceTypes: {
                            shape: "Sk"
                        },
                        maxSessionLengthInMinutes: {
                            type: "integer"
                        },
                        maxStoppedSessionLengthInMinutes: {
                            type: "integer"
                        },
                        streamingImageIds: {
                            shape: "So"
                        }
                    }
                },
                studioComponentIds: {
                    shape: "Sq"
                },
                tags: {
                    shape: "Sr"
                },
                updatedAt: {
                    shape: "S8"
                },
                updatedBy: {}
            }
        },
        S13: {
            type: "structure",
            members: {
                arn: {},
                description: {
                    type: "string",
                    sensitive: true
                },
                ec2ImageId: {},
                encryptionConfiguration: {
                    type: "structure",
                    required: [ "keyType" ],
                    members: {
                        keyArn: {},
                        keyType: {}
                    }
                },
                eulaIds: {
                    shape: "S3"
                },
                name: {
                    type: "string",
                    sensitive: true
                },
                owner: {},
                platform: {},
                state: {},
                statusCode: {},
                statusMessage: {},
                streamingImageId: {},
                tags: {
                    shape: "Sr"
                }
            }
        },
        S1f: {
            type: "structure",
            members: {
                arn: {},
                createdAt: {
                    shape: "S8"
                },
                createdBy: {},
                ec2InstanceType: {},
                launchProfileId: {},
                ownedBy: {},
                sessionId: {},
                startedAt: {
                    shape: "S8"
                },
                startedBy: {},
                state: {},
                statusCode: {},
                statusMessage: {},
                stopAt: {
                    shape: "S8"
                },
                stoppedAt: {
                    shape: "S8"
                },
                stoppedBy: {},
                streamingImageId: {},
                tags: {
                    shape: "Sr"
                },
                terminateAt: {
                    shape: "S8"
                },
                updatedAt: {
                    shape: "S8"
                },
                updatedBy: {}
            }
        },
        S1m: {
            type: "structure",
            members: {
                createdAt: {
                    shape: "S8"
                },
                createdBy: {},
                expiresAt: {
                    shape: "S8"
                },
                ownedBy: {},
                state: {},
                statusCode: {},
                streamId: {},
                url: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S1s: {
            type: "structure",
            required: [ "keyType" ],
            members: {
                keyArn: {},
                keyType: {}
            }
        },
        S1x: {
            type: "structure",
            members: {
                adminRoleArn: {},
                arn: {},
                createdAt: {
                    shape: "S8"
                },
                displayName: {
                    type: "string",
                    sensitive: true
                },
                homeRegion: {},
                ssoClientId: {},
                state: {},
                statusCode: {},
                statusMessage: {},
                studioEncryptionConfiguration: {
                    shape: "S1s"
                },
                studioId: {},
                studioName: {},
                studioUrl: {},
                tags: {
                    shape: "Sr"
                },
                updatedAt: {
                    shape: "S8"
                },
                userRoleArn: {}
            }
        },
        S23: {
            type: "structure",
            members: {
                activeDirectoryConfiguration: {
                    type: "structure",
                    members: {
                        computerAttributes: {
                            shape: "S25"
                        },
                        directoryId: {},
                        organizationalUnitDistinguishedName: {}
                    }
                },
                computeFarmConfiguration: {
                    type: "structure",
                    members: {
                        activeDirectoryUser: {},
                        endpoint: {
                            type: "string",
                            sensitive: true
                        }
                    }
                },
                licenseServiceConfiguration: {
                    type: "structure",
                    members: {
                        endpoint: {
                            type: "string",
                            sensitive: true
                        }
                    }
                },
                sharedFileSystemConfiguration: {
                    type: "structure",
                    members: {
                        endpoint: {
                            shape: "S2g"
                        },
                        fileSystemId: {},
                        linuxMountPoint: {
                            type: "string",
                            sensitive: true
                        },
                        shareName: {
                            shape: "S2g"
                        },
                        windowsMountDrive: {}
                    }
                }
            },
            union: true
        },
        S25: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    value: {}
                }
            },
            sensitive: true
        },
        S2g: {
            type: "string",
            sensitive: true
        },
        S2j: {
            type: "string",
            sensitive: true
        },
        S2k: {
            type: "list",
            member: {}
        },
        S2m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    launchProfileProtocolVersion: {},
                    platform: {},
                    runContext: {},
                    script: {
                        shape: "S2q"
                    }
                }
            }
        },
        S2q: {
            type: "string",
            sensitive: true
        },
        S2r: {
            type: "string",
            sensitive: true
        },
        S2s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            },
            sensitive: true
        },
        S2z: {
            type: "structure",
            members: {
                arn: {},
                configuration: {
                    shape: "S23"
                },
                createdAt: {
                    shape: "S8"
                },
                createdBy: {},
                description: {
                    shape: "S2j"
                },
                ec2SecurityGroupIds: {
                    shape: "S2k"
                },
                initializationScripts: {
                    shape: "S2m"
                },
                name: {
                    shape: "S2r"
                },
                scriptParameters: {
                    shape: "S2s"
                },
                state: {},
                statusCode: {},
                statusMessage: {},
                studioComponentId: {},
                subtype: {},
                tags: {
                    shape: "Sr"
                },
                type: {},
                updatedAt: {
                    shape: "S8"
                },
                updatedBy: {}
            }
        },
        S3j: {
            type: "structure",
            members: {
                content: {},
                createdAt: {
                    shape: "S8"
                },
                eulaId: {},
                name: {},
                updatedAt: {
                    shape: "S8"
                }
            }
        },
        S3p: {
            type: "list",
            member: {
                shape: "S13"
            }
        },
        S3t: {
            type: "list",
            member: {}
        },
        S41: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    script: {
                        shape: "S2q"
                    },
                    studioComponentId: {},
                    studioComponentName: {
                        shape: "S2r"
                    }
                }
            }
        },
        S45: {
            type: "structure",
            members: {
                identityStoreId: {},
                persona: {},
                principalId: {},
                sid: {}
            }
        },
        S4j: {
            type: "structure",
            members: {
                identityStoreId: {},
                persona: {},
                principalId: {},
                sid: {}
            }
        }
    },
    paginators: {
        ListEulaAcceptances: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "eulaAcceptances"
        },
        ListEulas: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "eulas"
        },
        ListLaunchProfileMembers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "members"
        },
        ListLaunchProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "launchProfiles"
        },
        ListStreamingImages: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "streamingImages"
        },
        ListStreamingSessions: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "sessions"
        },
        ListStudioComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "studioComponents"
        },
        ListStudioMembers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "members"
        },
        ListStudios: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "studios"
        }
    },
    waiters: {
        LaunchProfileDeleted: {
            description: "Wait until a LaunchProfile is Deleted. Use this after invoking DeleteLaunchProfile",
            delay: 5,
            maxAttempts: 150,
            operation: "GetLaunchProfile",
            acceptors: [ {
                matcher: "path",
                argument: "launchProfile.state",
                state: "success",
                expected: "DELETED"
            }, {
                matcher: "path",
                argument: "launchProfile.state",
                state: "failure",
                expected: "DELETE_FAILED"
            } ]
        },
        LaunchProfileReady: {
            description: "Wait until a LaunchProfile is Ready. Use this after invoking CreateLaunchProfile or UpdateLaunchProfile",
            delay: 5,
            maxAttempts: 150,
            operation: "GetLaunchProfile",
            acceptors: [ {
                matcher: "path",
                argument: "launchProfile.state",
                state: "success",
                expected: "READY"
            }, {
                matcher: "path",
                argument: "launchProfile.state",
                state: "failure",
                expected: "CREATE_FAILED"
            }, {
                matcher: "path",
                argument: "launchProfile.state",
                state: "failure",
                expected: "UPDATE_FAILED"
            } ]
        },
        StreamingImageDeleted: {
            description: "Wait until a StreamingImage Deleted. Use this after invoking DeleteStreamingImage",
            delay: 2,
            maxAttempts: 60,
            operation: "GetStreamingImage",
            acceptors: [ {
                matcher: "path",
                argument: "streamingImage.state",
                state: "success",
                expected: "DELETED"
            }, {
                matcher: "path",
                argument: "streamingImage.state",
                state: "failure",
                expected: "DELETE_FAILED"
            } ]
        },
        StreamingImageReady: {
            description: "Wait until a StreamingImage is Ready. Use this after invoking CreateStreamingImage or UpdateStreamingImage",
            delay: 2,
            maxAttempts: 60,
            operation: "GetStreamingImage",
            acceptors: [ {
                matcher: "path",
                argument: "streamingImage.state",
                state: "success",
                expected: "READY"
            }, {
                matcher: "path",
                argument: "streamingImage.state",
                state: "failure",
                expected: "CREATE_FAILED"
            }, {
                matcher: "path",
                argument: "streamingImage.state",
                state: "failure",
                expected: "UPDATE_FAILED"
            } ]
        },
        StreamingSessionDeleted: {
            description: "Wait until a StreamingSessionDeleted. Use this after invoking Deletesession",
            delay: 5,
            maxAttempts: 180,
            operation: "GetStreamingSession",
            acceptors: [ {
                matcher: "path",
                argument: "session.state",
                state: "success",
                expected: "DELETED"
            }, {
                matcher: "path",
                argument: "session.state",
                state: "failure",
                expected: "DELETE_FAILED"
            } ]
        },
        StreamingSessionReady: {
            description: "Wait until a StreamingSession is ready. Use this after invoking CreateStreamingSession, StartStreamingSession",
            delay: 10,
            maxAttempts: 180,
            operation: "GetStreamingSession",
            acceptors: [ {
                matcher: "path",
                argument: "session.state",
                state: "success",
                expected: "READY"
            }, {
                matcher: "path",
                argument: "session.state",
                state: "failure",
                expected: "CREATE_FAILED"
            }, {
                matcher: "path",
                argument: "session.state",
                state: "failure",
                expected: "START_FAILED"
            } ]
        },
        StreamingSessionStopped: {
            description: "Wait until a StreamingSessionStopped. Use this after invoking StopStreamingSession",
            delay: 5,
            maxAttempts: 180,
            operation: "GetStreamingSession",
            acceptors: [ {
                matcher: "path",
                argument: "session.state",
                state: "success",
                expected: "STOPPED"
            }, {
                matcher: "path",
                argument: "session.state",
                state: "failure",
                expected: "STOP_FAILED"
            } ]
        },
        StreamingSessionStreamReady: {
            description: "Wait until a StreamingSessionStream is ready. Use this after invoking CreateStreamingSessionStream",
            delay: 5,
            maxAttempts: 30,
            operation: "GetStreamingSessionStream",
            acceptors: [ {
                matcher: "path",
                argument: "stream.state",
                state: "success",
                expected: "READY"
            }, {
                matcher: "path",
                argument: "stream.state",
                state: "failure",
                expected: "CREATE_FAILED"
            } ]
        },
        StudioComponentDeleted: {
            description: "Wait until a StudioComponent Deleted. Use this after invoking DeleteStudioComponent",
            delay: 1,
            maxAttempts: 120,
            operation: "GetStudioComponent",
            acceptors: [ {
                matcher: "path",
                argument: "studioComponent.state",
                state: "success",
                expected: "DELETED"
            }, {
                matcher: "path",
                argument: "studioComponent.state",
                state: "failure",
                expected: "DELETE_FAILED"
            } ]
        },
        StudioComponentReady: {
            description: "Wait until a StudioComponent is Ready. Use this after invoking CreateStudioComponent or UpdateStudioComponent",
            delay: 2,
            maxAttempts: 60,
            operation: "GetStudioComponent",
            acceptors: [ {
                matcher: "path",
                argument: "studioComponent.state",
                state: "success",
                expected: "READY"
            }, {
                matcher: "path",
                argument: "studioComponent.state",
                state: "failure",
                expected: "CREATE_FAILED"
            }, {
                matcher: "path",
                argument: "studioComponent.state",
                state: "failure",
                expected: "UPDATE_FAILED"
            } ]
        },
        StudioDeleted: {
            description: "Wait until a Studio is Deleted. Use this after invoking DeleteStudio.",
            delay: 2,
            maxAttempts: 60,
            operation: "GetStudio",
            acceptors: [ {
                matcher: "path",
                argument: "studio.state",
                state: "success",
                expected: "DELETED"
            }, {
                matcher: "path",
                argument: "studio.state",
                state: "failure",
                expected: "DELETE_FAILED"
            } ]
        },
        StudioReady: {
            description: "Wait until a Studio is Ready. Use this after invoking CreateStudio, UpdateStudio, or StartStudioSSOConfigurationRepair",
            delay: 2,
            maxAttempts: 60,
            operation: "GetStudio",
            acceptors: [ {
                matcher: "path",
                argument: "studio.state",
                state: "success",
                expected: "READY"
            }, {
                matcher: "path",
                argument: "studio.state",
                state: "failure",
                expected: "CREATE_FAILED"
            }, {
                matcher: "path",
                argument: "studio.state",
                state: "failure",
                expected: "UPDATE_FAILED"
            } ]
        }
    }
};

AWS.apiLoader.services["finspace"] = {};

AWS.Finspace = AWS.Service.defineService("finspace", [ "2021-03-12" ]);

AWS.apiLoader.services["finspace"]["2021-03-12"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-03-12",
        endpointPrefix: "finspace",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "finspace",
        serviceFullName: "FinSpace User Environment Management service",
        serviceId: "finspace",
        signatureVersion: "v4",
        signingName: "finspace",
        uid: "finspace-2021-03-12"
    },
    operations: {
        CreateEnvironment: {
            http: {
                requestUri: "/environment"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    kmsKeyId: {},
                    tags: {
                        shape: "S5"
                    },
                    federationMode: {},
                    federationParameters: {
                        shape: "S9"
                    },
                    superuserParameters: {
                        type: "structure",
                        required: [ "emailAddress", "firstName", "lastName" ],
                        members: {
                            emailAddress: {
                                type: "string",
                                sensitive: true
                            },
                            firstName: {},
                            lastName: {}
                        }
                    },
                    dataBundles: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentId: {},
                    environmentArn: {},
                    environmentUrl: {}
                }
            }
        },
        DeleteEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/environment/{environmentId}"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetEnvironment: {
            http: {
                method: "GET",
                requestUri: "/environment/{environmentId}"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environment: {
                        shape: "Ss"
                    }
                }
            }
        },
        ListEnvironments: {
            http: {
                method: "GET",
                requestUri: "/environment"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environments: {
                        type: "list",
                        member: {
                            shape: "Ss"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S5"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEnvironment: {
            http: {
                method: "PUT",
                requestUri: "/environment/{environmentId}"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    name: {},
                    description: {},
                    federationMode: {},
                    federationParameters: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environment: {
                        shape: "Ss"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "map",
            key: {},
            value: {}
        },
        S9: {
            type: "structure",
            members: {
                samlMetadataDocument: {},
                samlMetadataURL: {},
                applicationCallBackURL: {},
                federationURN: {},
                federationProviderName: {},
                attributeMap: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        Ss: {
            type: "structure",
            members: {
                name: {},
                environmentId: {},
                awsAccountId: {},
                status: {},
                environmentUrl: {},
                description: {},
                environmentArn: {},
                sageMakerStudioDomainUrl: {},
                kmsKeyId: {},
                dedicatedServiceAccountId: {},
                federationMode: {},
                federationParameters: {
                    shape: "S9"
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["finspacedata"] = {};

AWS.Finspacedata = AWS.Service.defineService("finspacedata", [ "2020-07-13" ]);

AWS.apiLoader.services["finspacedata"]["2020-07-13"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-13",
        endpointPrefix: "finspace-api",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "FinSpace Data",
        serviceFullName: "FinSpace Public API",
        serviceId: "finspace data",
        signatureVersion: "v4",
        signingName: "finspace-api",
        uid: "finspace-2020-07-13"
    },
    operations: {
        CreateChangeset: {
            http: {
                requestUri: "/datasets/{datasetId}/changesets"
            },
            input: {
                type: "structure",
                required: [ "datasetId", "changeType", "sourceType", "sourceParams" ],
                members: {
                    datasetId: {
                        location: "uri",
                        locationName: "datasetId"
                    },
                    changeType: {},
                    sourceType: {},
                    sourceParams: {
                        shape: "S5"
                    },
                    formatType: {},
                    formatParams: {
                        shape: "S5"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    changeset: {
                        type: "structure",
                        members: {
                            id: {},
                            changesetArn: {},
                            datasetId: {},
                            changeType: {},
                            sourceType: {},
                            sourceParams: {
                                shape: "S5"
                            },
                            formatType: {},
                            formatParams: {
                                shape: "S5"
                            },
                            createTimestamp: {
                                type: "timestamp"
                            },
                            status: {},
                            errorInfo: {
                                type: "structure",
                                members: {
                                    errorMessage: {},
                                    errorCategory: {}
                                }
                            },
                            changesetLabels: {
                                shape: "S5"
                            },
                            updatesChangesetId: {},
                            updatedByChangesetId: {}
                        }
                    }
                }
            }
        },
        GetProgrammaticAccessCredentials: {
            http: {
                method: "GET",
                requestUri: "/credentials/programmatic"
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    durationInMinutes: {
                        location: "querystring",
                        locationName: "durationInMinutes",
                        type: "long"
                    },
                    environmentId: {
                        location: "querystring",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    credentials: {
                        type: "structure",
                        members: {
                            accessKeyId: {},
                            secretAccessKey: {},
                            sessionToken: {}
                        }
                    },
                    durationInMinutes: {
                        type: "long"
                    }
                }
            }
        },
        GetWorkingLocation: {
            http: {
                requestUri: "/workingLocationV1"
            },
            input: {
                type: "structure",
                members: {
                    locationType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    s3Uri: {},
                    s3Path: {},
                    s3Bucket: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["ssmcontacts"] = {};

AWS.SSMContacts = AWS.Service.defineService("ssmcontacts", [ "2021-05-03" ]);

AWS.apiLoader.services["ssmcontacts"]["2021-05-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-05-03",
        endpointPrefix: "ssm-contacts",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "SSM Contacts",
        serviceFullName: "AWS Systems Manager Incident Manager Contacts",
        serviceId: "SSM Contacts",
        signatureVersion: "v4",
        signingName: "ssm-contacts",
        targetPrefix: "SSMContacts",
        uid: "ssm-contacts-2021-05-03"
    },
    operations: {
        AcceptPage: {
            input: {
                type: "structure",
                required: [ "PageId", "AcceptType", "AcceptCode" ],
                members: {
                    PageId: {},
                    ContactChannelId: {},
                    AcceptType: {},
                    Note: {},
                    AcceptCode: {},
                    AcceptCodeValidation: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ActivateContactChannel: {
            input: {
                type: "structure",
                required: [ "ContactChannelId", "ActivationCode" ],
                members: {
                    ContactChannelId: {},
                    ActivationCode: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateContact: {
            input: {
                type: "structure",
                required: [ "Alias", "Type", "Plan" ],
                members: {
                    Alias: {},
                    DisplayName: {},
                    Type: {},
                    Plan: {
                        shape: "Sf"
                    },
                    Tags: {
                        shape: "Sp"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ContactArn" ],
                members: {
                    ContactArn: {}
                }
            }
        },
        CreateContactChannel: {
            input: {
                type: "structure",
                required: [ "ContactId", "Name", "Type", "DeliveryAddress" ],
                members: {
                    ContactId: {},
                    Name: {},
                    Type: {},
                    DeliveryAddress: {
                        shape: "Sy"
                    },
                    DeferActivation: {
                        type: "boolean"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ContactChannelArn" ],
                members: {
                    ContactChannelArn: {}
                }
            }
        },
        DeactivateContactChannel: {
            input: {
                type: "structure",
                required: [ "ContactChannelId" ],
                members: {
                    ContactChannelId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteContact: {
            input: {
                type: "structure",
                required: [ "ContactId" ],
                members: {
                    ContactId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteContactChannel: {
            input: {
                type: "structure",
                required: [ "ContactChannelId" ],
                members: {
                    ContactChannelId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeEngagement: {
            input: {
                type: "structure",
                required: [ "EngagementId" ],
                members: {
                    EngagementId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ContactArn", "EngagementArn", "Sender", "Subject", "Content" ],
                members: {
                    ContactArn: {},
                    EngagementArn: {},
                    Sender: {},
                    Subject: {},
                    Content: {},
                    PublicSubject: {},
                    PublicContent: {},
                    IncidentId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    StopTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribePage: {
            input: {
                type: "structure",
                required: [ "PageId" ],
                members: {
                    PageId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "PageArn", "EngagementArn", "ContactArn", "Sender", "Subject", "Content" ],
                members: {
                    PageArn: {},
                    EngagementArn: {},
                    ContactArn: {},
                    Sender: {},
                    Subject: {},
                    Content: {},
                    PublicSubject: {},
                    PublicContent: {},
                    IncidentId: {},
                    SentTime: {
                        type: "timestamp"
                    },
                    ReadTime: {
                        type: "timestamp"
                    },
                    DeliveryTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetContact: {
            input: {
                type: "structure",
                required: [ "ContactId" ],
                members: {
                    ContactId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ContactArn", "Alias", "Type", "Plan" ],
                members: {
                    ContactArn: {},
                    Alias: {},
                    DisplayName: {},
                    Type: {},
                    Plan: {
                        shape: "Sf"
                    }
                }
            }
        },
        GetContactChannel: {
            input: {
                type: "structure",
                required: [ "ContactChannelId" ],
                members: {
                    ContactChannelId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ContactArn", "ContactChannelArn", "Name", "Type", "DeliveryAddress" ],
                members: {
                    ContactArn: {},
                    ContactChannelArn: {},
                    Name: {},
                    Type: {},
                    DeliveryAddress: {
                        shape: "Sy"
                    },
                    ActivationStatus: {}
                }
            }
        },
        GetContactPolicy: {
            input: {
                type: "structure",
                required: [ "ContactArn" ],
                members: {
                    ContactArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactArn: {},
                    Policy: {}
                }
            }
        },
        ListContactChannels: {
            input: {
                type: "structure",
                required: [ "ContactId" ],
                members: {
                    ContactId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ContactChannels" ],
                members: {
                    NextToken: {},
                    ContactChannels: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ContactChannelArn", "ContactArn", "Name", "DeliveryAddress", "ActivationStatus" ],
                            members: {
                                ContactChannelArn: {},
                                ContactArn: {},
                                Name: {},
                                Type: {},
                                DeliveryAddress: {
                                    shape: "Sy"
                                },
                                ActivationStatus: {}
                            }
                        }
                    }
                }
            }
        },
        ListContacts: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    AliasPrefix: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Contacts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ContactArn", "Alias", "Type" ],
                            members: {
                                ContactArn: {},
                                Alias: {},
                                DisplayName: {},
                                Type: {}
                            }
                        }
                    }
                }
            }
        },
        ListEngagements: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    IncidentId: {},
                    TimeRangeValue: {
                        type: "structure",
                        members: {
                            StartTime: {
                                type: "timestamp"
                            },
                            EndTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Engagements" ],
                members: {
                    NextToken: {},
                    Engagements: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EngagementArn", "ContactArn", "Sender" ],
                            members: {
                                EngagementArn: {},
                                ContactArn: {},
                                Sender: {},
                                IncidentId: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                StopTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPageReceipts: {
            input: {
                type: "structure",
                required: [ "PageId" ],
                members: {
                    PageId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Receipts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ReceiptType", "ReceiptTime" ],
                            members: {
                                ContactChannelArn: {},
                                ReceiptType: {},
                                ReceiptInfo: {},
                                ReceiptTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPagesByContact: {
            input: {
                type: "structure",
                required: [ "ContactId" ],
                members: {
                    ContactId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Pages" ],
                members: {
                    NextToken: {},
                    Pages: {
                        shape: "S2d"
                    }
                }
            }
        },
        ListPagesByEngagement: {
            input: {
                type: "structure",
                required: [ "EngagementId" ],
                members: {
                    EngagementId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Pages" ],
                members: {
                    NextToken: {},
                    Pages: {
                        shape: "S2d"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sp"
                    }
                }
            }
        },
        PutContactPolicy: {
            input: {
                type: "structure",
                required: [ "ContactArn", "Policy" ],
                members: {
                    ContactArn: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendActivationCode: {
            input: {
                type: "structure",
                required: [ "ContactChannelId" ],
                members: {
                    ContactChannelId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartEngagement: {
            input: {
                type: "structure",
                required: [ "ContactId", "Sender", "Subject", "Content" ],
                members: {
                    ContactId: {},
                    Sender: {},
                    Subject: {},
                    Content: {},
                    PublicSubject: {},
                    PublicContent: {},
                    IncidentId: {},
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EngagementArn" ],
                members: {
                    EngagementArn: {}
                }
            }
        },
        StopEngagement: {
            input: {
                type: "structure",
                required: [ "EngagementId" ],
                members: {
                    EngagementId: {},
                    Reason: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContact: {
            input: {
                type: "structure",
                required: [ "ContactId" ],
                members: {
                    ContactId: {},
                    DisplayName: {},
                    Plan: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContactChannel: {
            input: {
                type: "structure",
                required: [ "ContactChannelId" ],
                members: {
                    ContactChannelId: {},
                    Name: {},
                    DeliveryAddress: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sf: {
            type: "structure",
            required: [ "Stages" ],
            members: {
                Stages: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DurationInMinutes", "Targets" ],
                        members: {
                            DurationInMinutes: {
                                type: "integer"
                            },
                            Targets: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ChannelTargetInfo: {
                                            type: "structure",
                                            required: [ "ContactChannelId" ],
                                            members: {
                                                ContactChannelId: {},
                                                RetryIntervalInMinutes: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        ContactTargetInfo: {
                                            type: "structure",
                                            required: [ "IsEssential" ],
                                            members: {
                                                ContactId: {},
                                                IsEssential: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sy: {
            type: "structure",
            members: {
                SimpleAddress: {}
            }
        },
        S2d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "PageArn", "EngagementArn", "ContactArn", "Sender" ],
                members: {
                    PageArn: {},
                    EngagementArn: {},
                    ContactArn: {},
                    Sender: {},
                    IncidentId: {},
                    SentTime: {
                        type: "timestamp"
                    },
                    DeliveryTime: {
                        type: "timestamp"
                    },
                    ReadTime: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    paginators: {
        ListContactChannels: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ContactChannels"
        },
        ListContacts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Contacts"
        },
        ListEngagements: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Engagements"
        },
        ListPageReceipts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Receipts"
        },
        ListPagesByContact: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Pages"
        },
        ListPagesByEngagement: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Pages"
        }
    }
};

AWS.apiLoader.services["ssmincidents"] = {};

AWS.SSMIncidents = AWS.Service.defineService("ssmincidents", [ "2018-05-10" ]);

AWS.apiLoader.services["ssmincidents"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "ssm-incidents",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "SSM Incidents",
        serviceFullName: "AWS Systems Manager Incident Manager",
        serviceId: "SSM Incidents",
        signatureVersion: "v4",
        signingName: "ssm-incidents",
        uid: "ssm-incidents-2018-05-10"
    },
    operations: {
        CreateReplicationSet: {
            http: {
                requestUri: "/createReplicationSet",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "regions" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    regions: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                sseKmsKeyId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        CreateResponsePlan: {
            http: {
                requestUri: "/createResponsePlan",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "incidentTemplate", "name" ],
                members: {
                    actions: {
                        shape: "Sa"
                    },
                    chatChannel: {
                        shape: "Sl"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    displayName: {},
                    engagements: {
                        shape: "Sq"
                    },
                    incidentTemplate: {
                        shape: "Ss"
                    },
                    name: {},
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateTimelineEvent: {
            http: {
                requestUri: "/createTimelineEvent",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "eventData", "eventTime", "eventType", "incidentRecordArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    eventData: {},
                    eventTime: {
                        type: "timestamp"
                    },
                    eventType: {},
                    incidentRecordArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "eventId", "incidentRecordArn" ],
                members: {
                    eventId: {},
                    incidentRecordArn: {}
                }
            },
            idempotent: true
        },
        DeleteIncidentRecord: {
            http: {
                requestUri: "/deleteIncidentRecord",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteReplicationSet: {
            http: {
                requestUri: "/deleteReplicationSet",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteResourcePolicy: {
            http: {
                requestUri: "/deleteResourcePolicy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policyId", "resourceArn" ],
                members: {
                    policyId: {},
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteResponsePlan: {
            http: {
                requestUri: "/deleteResponsePlan",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteTimelineEvent: {
            http: {
                requestUri: "/deleteTimelineEvent",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "eventId", "incidentRecordArn" ],
                members: {
                    eventId: {},
                    incidentRecordArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetIncidentRecord: {
            http: {
                method: "GET",
                requestUri: "/getIncidentRecord",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "incidentRecord" ],
                members: {
                    incidentRecord: {
                        type: "structure",
                        required: [ "arn", "creationTime", "dedupeString", "impact", "incidentRecordSource", "lastModifiedBy", "lastModifiedTime", "status", "title" ],
                        members: {
                            arn: {},
                            automationExecutions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ssmExecutionArn: {}
                                    },
                                    union: true
                                }
                            },
                            chatChannel: {
                                shape: "Sl"
                            },
                            creationTime: {
                                type: "timestamp"
                            },
                            dedupeString: {},
                            impact: {
                                type: "integer"
                            },
                            incidentRecordSource: {
                                shape: "S1q"
                            },
                            lastModifiedBy: {},
                            lastModifiedTime: {
                                type: "timestamp"
                            },
                            notificationTargets: {
                                shape: "Sv"
                            },
                            resolvedTime: {
                                type: "timestamp"
                            },
                            status: {},
                            summary: {},
                            title: {}
                        }
                    }
                }
            }
        },
        GetReplicationSet: {
            http: {
                method: "GET",
                requestUri: "/getReplicationSet",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "replicationSet" ],
                members: {
                    replicationSet: {
                        type: "structure",
                        required: [ "createdBy", "createdTime", "deletionProtected", "lastModifiedBy", "lastModifiedTime", "regionMap", "status" ],
                        members: {
                            arn: {},
                            createdBy: {},
                            createdTime: {
                                type: "timestamp"
                            },
                            deletionProtected: {
                                type: "boolean"
                            },
                            lastModifiedBy: {},
                            lastModifiedTime: {
                                type: "timestamp"
                            },
                            regionMap: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    required: [ "status", "statusUpdateDateTime" ],
                                    members: {
                                        sseKmsKeyId: {},
                                        status: {},
                                        statusMessage: {},
                                        statusUpdateDateTime: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            },
                            status: {}
                        }
                    }
                }
            }
        },
        GetResourcePolicies: {
            http: {
                requestUri: "/getResourcePolicies",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resourcePolicies" ],
                members: {
                    nextToken: {},
                    resourcePolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "policyDocument", "policyId", "ramResourceShareRegion" ],
                            members: {
                                policyDocument: {},
                                policyId: {},
                                ramResourceShareRegion: {}
                            }
                        }
                    }
                }
            }
        },
        GetResponsePlan: {
            http: {
                method: "GET",
                requestUri: "/getResponsePlan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "incidentTemplate", "name" ],
                members: {
                    actions: {
                        shape: "Sa"
                    },
                    arn: {},
                    chatChannel: {
                        shape: "Sl"
                    },
                    displayName: {},
                    engagements: {
                        shape: "Sq"
                    },
                    incidentTemplate: {
                        shape: "Ss"
                    },
                    name: {}
                }
            }
        },
        GetTimelineEvent: {
            http: {
                method: "GET",
                requestUri: "/getTimelineEvent",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "eventId", "incidentRecordArn" ],
                members: {
                    eventId: {
                        location: "querystring",
                        locationName: "eventId"
                    },
                    incidentRecordArn: {
                        location: "querystring",
                        locationName: "incidentRecordArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "event" ],
                members: {
                    event: {
                        type: "structure",
                        required: [ "eventData", "eventId", "eventTime", "eventType", "eventUpdatedTime", "incidentRecordArn" ],
                        members: {
                            eventData: {},
                            eventId: {},
                            eventTime: {
                                type: "timestamp"
                            },
                            eventType: {},
                            eventUpdatedTime: {
                                type: "timestamp"
                            },
                            incidentRecordArn: {}
                        }
                    }
                }
            }
        },
        ListIncidentRecords: {
            http: {
                requestUri: "/listIncidentRecords",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        shape: "S2f"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "incidentRecordSummaries" ],
                members: {
                    incidentRecordSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "creationTime", "impact", "incidentRecordSource", "status", "title" ],
                            members: {
                                arn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                impact: {
                                    type: "integer"
                                },
                                incidentRecordSource: {
                                    shape: "S1q"
                                },
                                resolvedTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                title: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRelatedItems: {
            http: {
                requestUri: "/listRelatedItems",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "incidentRecordArn" ],
                members: {
                    incidentRecordArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "relatedItems" ],
                members: {
                    nextToken: {},
                    relatedItems: {
                        shape: "S2t"
                    }
                }
            }
        },
        ListReplicationSets: {
            http: {
                requestUri: "/listReplicationSets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "replicationSetArns" ],
                members: {
                    nextToken: {},
                    replicationSetArns: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListResponsePlans: {
            http: {
                requestUri: "/listResponsePlans",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "responsePlanSummaries" ],
                members: {
                    nextToken: {},
                    responsePlanSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "name" ],
                            members: {
                                arn: {},
                                displayName: {},
                                name: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "S10"
                    }
                }
            }
        },
        ListTimelineEvents: {
            http: {
                requestUri: "/listTimelineEvents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "incidentRecordArn" ],
                members: {
                    filters: {
                        shape: "S2f"
                    },
                    incidentRecordArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    sortBy: {},
                    sortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "eventSummaries" ],
                members: {
                    eventSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "eventId", "eventTime", "eventType", "eventUpdatedTime", "incidentRecordArn" ],
                            members: {
                                eventId: {},
                                eventTime: {
                                    type: "timestamp"
                                },
                                eventType: {},
                                eventUpdatedTime: {
                                    type: "timestamp"
                                },
                                incidentRecordArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        PutResourcePolicy: {
            http: {
                requestUri: "/putResourcePolicy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policy", "resourceArn" ],
                members: {
                    policy: {},
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policyId" ],
                members: {
                    policyId: {}
                }
            }
        },
        StartIncident: {
            http: {
                requestUri: "/startIncident",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "responsePlanArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    impact: {
                        type: "integer"
                    },
                    relatedItems: {
                        shape: "S2t"
                    },
                    responsePlanArn: {},
                    title: {},
                    triggerDetails: {
                        type: "structure",
                        required: [ "source", "timestamp" ],
                        members: {
                            rawData: {},
                            source: {},
                            timestamp: {
                                type: "timestamp"
                            },
                            triggerArn: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "incidentRecordArn" ],
                members: {
                    incidentRecordArn: {}
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateDeletionProtection: {
            http: {
                requestUri: "/updateDeletionProtection",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn", "deletionProtected" ],
                members: {
                    arn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    deletionProtected: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateIncidentRecord: {
            http: {
                requestUri: "/updateIncidentRecord",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    chatChannel: {
                        shape: "Sl"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    impact: {
                        type: "integer"
                    },
                    notificationTargets: {
                        shape: "Sv"
                    },
                    status: {},
                    summary: {},
                    title: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateRelatedItems: {
            http: {
                requestUri: "/updateRelatedItems",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "incidentRecordArn", "relatedItemsUpdate" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    incidentRecordArn: {},
                    relatedItemsUpdate: {
                        type: "structure",
                        members: {
                            itemToAdd: {
                                shape: "S2u"
                            },
                            itemToRemove: {
                                shape: "S2v"
                            }
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateReplicationSet: {
            http: {
                requestUri: "/updateReplicationSet",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "actions", "arn" ],
                members: {
                    actions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                addRegionAction: {
                                    type: "structure",
                                    required: [ "regionName" ],
                                    members: {
                                        regionName: {},
                                        sseKmsKeyId: {}
                                    }
                                },
                                deleteRegionAction: {
                                    type: "structure",
                                    required: [ "regionName" ],
                                    members: {
                                        regionName: {}
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    arn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResponsePlan: {
            http: {
                requestUri: "/updateResponsePlan",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    actions: {
                        shape: "Sa"
                    },
                    arn: {},
                    chatChannel: {
                        shape: "Sl"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    displayName: {},
                    engagements: {
                        shape: "Sq"
                    },
                    incidentTemplateDedupeString: {},
                    incidentTemplateImpact: {
                        type: "integer"
                    },
                    incidentTemplateNotificationTargets: {
                        shape: "Sv"
                    },
                    incidentTemplateSummary: {},
                    incidentTemplateTitle: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateTimelineEvent: {
            http: {
                requestUri: "/updateTimelineEvent",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "eventId", "incidentRecordArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    eventData: {},
                    eventId: {},
                    eventTime: {
                        type: "timestamp"
                    },
                    eventType: {},
                    incidentRecordArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        Sa: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ssmAutomation: {
                        type: "structure",
                        required: [ "documentName", "roleArn" ],
                        members: {
                            documentName: {},
                            documentVersion: {},
                            parameters: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "list",
                                    member: {}
                                }
                            },
                            roleArn: {},
                            targetAccount: {}
                        }
                    }
                },
                union: true
            }
        },
        Sl: {
            type: "structure",
            members: {
                chatbotSns: {
                    type: "list",
                    member: {}
                },
                empty: {
                    type: "structure",
                    members: {}
                }
            },
            union: true
        },
        Sq: {
            type: "list",
            member: {}
        },
        Ss: {
            type: "structure",
            required: [ "impact", "title" ],
            members: {
                dedupeString: {},
                impact: {
                    type: "integer"
                },
                notificationTargets: {
                    shape: "Sv"
                },
                summary: {},
                title: {}
            }
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    snsTopicArn: {}
                },
                union: true
            }
        },
        S10: {
            type: "map",
            key: {},
            value: {}
        },
        S1q: {
            type: "structure",
            required: [ "createdBy", "source" ],
            members: {
                createdBy: {},
                invokedBy: {},
                resourceArn: {},
                source: {}
            }
        },
        S2f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "condition", "key" ],
                members: {
                    condition: {
                        type: "structure",
                        members: {
                            after: {
                                type: "timestamp"
                            },
                            before: {
                                type: "timestamp"
                            },
                            equals: {
                                type: "structure",
                                members: {
                                    integerValues: {
                                        type: "list",
                                        member: {
                                            type: "integer"
                                        }
                                    },
                                    stringValues: {
                                        type: "list",
                                        member: {}
                                    }
                                },
                                union: true
                            }
                        },
                        union: true
                    },
                    key: {}
                }
            }
        },
        S2t: {
            type: "list",
            member: {
                shape: "S2u"
            }
        },
        S2u: {
            type: "structure",
            required: [ "identifier" ],
            members: {
                identifier: {
                    shape: "S2v"
                },
                title: {}
            }
        },
        S2v: {
            type: "structure",
            required: [ "type", "value" ],
            members: {
                type: {},
                value: {
                    type: "structure",
                    members: {
                        arn: {},
                        metricDefinition: {},
                        url: {}
                    },
                    union: true
                }
            }
        }
    },
    paginators: {
        GetResourcePolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "resourcePolicies"
        },
        ListIncidentRecords: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "incidentRecordSummaries"
        },
        ListRelatedItems: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "relatedItems"
        },
        ListReplicationSets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "replicationSetArns"
        },
        ListResponsePlans: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "responsePlanSummaries"
        },
        ListTimelineEvents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "eventSummaries"
        }
    },
    waiters: {
        WaitForReplicationSetActive: {
            description: "Wait for a replication set to become ACTIVE",
            delay: 30,
            maxAttempts: 5,
            operation: "GetReplicationSet",
            acceptors: [ {
                matcher: "path",
                argument: "replicationSet.status",
                state: "success",
                expected: "ACTIVE"
            }, {
                matcher: "path",
                argument: "replicationSet.status",
                state: "retry",
                expected: "CREATING"
            }, {
                matcher: "path",
                argument: "replicationSet.status",
                state: "retry",
                expected: "UPDATING"
            }, {
                matcher: "path",
                argument: "replicationSet.status",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        WaitForReplicationSetDeleted: {
            description: "Wait for a replication set to be deleted",
            delay: 30,
            maxAttempts: 5,
            operation: "GetReplicationSet",
            acceptors: [ {
                matcher: "error",
                state: "success",
                expected: "ResourceNotFoundException"
            }, {
                matcher: "path",
                argument: "replicationSet.status",
                state: "retry",
                expected: "DELETING"
            }, {
                matcher: "path",
                argument: "replicationSet.status",
                state: "failure",
                expected: "FAILED"
            } ]
        }
    }
};

AWS.apiLoader.services["applicationcostprofiler"] = {};

AWS.ApplicationCostProfiler = AWS.Service.defineService("applicationcostprofiler", [ "2020-09-10" ]);

AWS.apiLoader.services["applicationcostprofiler"]["2020-09-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-09-10",
        endpointPrefix: "application-cost-profiler",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Application Cost Profiler",
        serviceId: "ApplicationCostProfiler",
        signatureVersion: "v4",
        signingName: "application-cost-profiler",
        uid: "AWSApplicationCostProfiler-2020-09-10"
    },
    operations: {
        DeleteReportDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/reportDefinition/{reportId}"
            },
            input: {
                type: "structure",
                required: [ "reportId" ],
                members: {
                    reportId: {
                        location: "uri",
                        locationName: "reportId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportId: {}
                }
            }
        },
        GetReportDefinition: {
            http: {
                method: "GET",
                requestUri: "/reportDefinition/{reportId}"
            },
            input: {
                type: "structure",
                required: [ "reportId" ],
                members: {
                    reportId: {
                        location: "uri",
                        locationName: "reportId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "reportId", "reportDescription", "reportFrequency", "format", "destinationS3Location", "createdAt", "lastUpdated" ],
                members: {
                    reportId: {},
                    reportDescription: {},
                    reportFrequency: {},
                    format: {},
                    destinationS3Location: {
                        shape: "S9"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    lastUpdated: {
                        type: "timestamp"
                    }
                }
            }
        },
        ImportApplicationUsage: {
            http: {
                requestUri: "/importApplicationUsage"
            },
            input: {
                type: "structure",
                required: [ "sourceS3Location" ],
                members: {
                    sourceS3Location: {
                        type: "structure",
                        required: [ "bucket", "key" ],
                        members: {
                            bucket: {},
                            key: {},
                            region: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "importId" ],
                members: {
                    importId: {}
                }
            }
        },
        ListReportDefinitions: {
            http: {
                method: "GET",
                requestUri: "/reportDefinition"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                reportId: {},
                                reportDescription: {},
                                reportFrequency: {},
                                format: {},
                                destinationS3Location: {
                                    shape: "S9"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        PutReportDefinition: {
            http: {
                requestUri: "/reportDefinition"
            },
            input: {
                type: "structure",
                required: [ "reportId", "reportDescription", "reportFrequency", "format", "destinationS3Location" ],
                members: {
                    reportId: {},
                    reportDescription: {},
                    reportFrequency: {},
                    format: {},
                    destinationS3Location: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportId: {}
                }
            }
        },
        UpdateReportDefinition: {
            http: {
                method: "PUT",
                requestUri: "/reportDefinition/{reportId}"
            },
            input: {
                type: "structure",
                required: [ "reportId", "reportDescription", "reportFrequency", "format", "destinationS3Location" ],
                members: {
                    reportId: {
                        location: "uri",
                        locationName: "reportId"
                    },
                    reportDescription: {},
                    reportFrequency: {},
                    format: {},
                    destinationS3Location: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportId: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "structure",
            required: [ "bucket", "prefix" ],
            members: {
                bucket: {},
                prefix: {}
            }
        }
    },
    paginators: {
        ListReportDefinitions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "reportDefinitions"
        }
    }
};

AWS.apiLoader.services["apprunner"] = {};

AWS.AppRunner = AWS.Service.defineService("apprunner", [ "2020-05-15" ]);

AWS.apiLoader.services["apprunner"]["2020-05-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-05-15",
        endpointPrefix: "apprunner",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "AWS App Runner",
        serviceId: "AppRunner",
        signatureVersion: "v4",
        signingName: "apprunner",
        targetPrefix: "AppRunner",
        uid: "apprunner-2020-05-15"
    },
    operations: {
        AssociateCustomDomain: {
            input: {
                type: "structure",
                required: [ "ServiceArn", "DomainName" ],
                members: {
                    ServiceArn: {},
                    DomainName: {},
                    EnableWWWSubdomain: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DNSTarget", "ServiceArn", "CustomDomain" ],
                members: {
                    DNSTarget: {},
                    ServiceArn: {},
                    CustomDomain: {
                        shape: "S7"
                    }
                }
            }
        },
        CreateAutoScalingConfiguration: {
            input: {
                type: "structure",
                required: [ "AutoScalingConfigurationName" ],
                members: {
                    AutoScalingConfigurationName: {},
                    MaxConcurrency: {
                        type: "integer"
                    },
                    MinSize: {
                        type: "integer"
                    },
                    MaxSize: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AutoScalingConfiguration" ],
                members: {
                    AutoScalingConfiguration: {
                        shape: "Sm"
                    }
                }
            }
        },
        CreateConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionName", "ProviderType" ],
                members: {
                    ConnectionName: {},
                    ProviderType: {},
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Connection" ],
                members: {
                    Connection: {
                        shape: "Sv"
                    }
                }
            }
        },
        CreateService: {
            input: {
                type: "structure",
                required: [ "ServiceName", "SourceConfiguration" ],
                members: {
                    ServiceName: {},
                    SourceConfiguration: {
                        shape: "Sz"
                    },
                    InstanceConfiguration: {
                        shape: "S1i"
                    },
                    Tags: {
                        shape: "Sh"
                    },
                    EncryptionConfiguration: {
                        shape: "S1l"
                    },
                    HealthCheckConfiguration: {
                        shape: "S1n"
                    },
                    AutoScalingConfigurationArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Service", "OperationId" ],
                members: {
                    Service: {
                        shape: "S1v"
                    },
                    OperationId: {}
                }
            }
        },
        DeleteAutoScalingConfiguration: {
            input: {
                type: "structure",
                required: [ "AutoScalingConfigurationArn" ],
                members: {
                    AutoScalingConfigurationArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AutoScalingConfiguration" ],
                members: {
                    AutoScalingConfiguration: {
                        shape: "Sm"
                    }
                }
            }
        },
        DeleteConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionArn" ],
                members: {
                    ConnectionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "Sv"
                    }
                }
            }
        },
        DeleteService: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Service", "OperationId" ],
                members: {
                    Service: {
                        shape: "S1v"
                    },
                    OperationId: {}
                }
            }
        },
        DescribeAutoScalingConfiguration: {
            input: {
                type: "structure",
                required: [ "AutoScalingConfigurationArn" ],
                members: {
                    AutoScalingConfigurationArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AutoScalingConfiguration" ],
                members: {
                    AutoScalingConfiguration: {
                        shape: "Sm"
                    }
                }
            }
        },
        DescribeCustomDomains: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DNSTarget", "ServiceArn", "CustomDomains" ],
                members: {
                    DNSTarget: {},
                    ServiceArn: {},
                    CustomDomains: {
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeService: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Service" ],
                members: {
                    Service: {
                        shape: "S1v"
                    }
                }
            }
        },
        DisassociateCustomDomain: {
            input: {
                type: "structure",
                required: [ "ServiceArn", "DomainName" ],
                members: {
                    ServiceArn: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DNSTarget", "ServiceArn", "CustomDomain" ],
                members: {
                    DNSTarget: {},
                    ServiceArn: {},
                    CustomDomain: {
                        shape: "S7"
                    }
                }
            }
        },
        ListAutoScalingConfigurations: {
            input: {
                type: "structure",
                members: {
                    AutoScalingConfigurationName: {},
                    LatestOnly: {
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AutoScalingConfigurationSummaryList" ],
                members: {
                    AutoScalingConfigurationSummaryList: {
                        type: "list",
                        member: {
                            shape: "S1y"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConnections: {
            input: {
                type: "structure",
                members: {
                    ConnectionName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ConnectionSummaryList" ],
                members: {
                    ConnectionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConnectionName: {},
                                ConnectionArn: {},
                                ProviderType: {},
                                Status: {},
                                CreatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListOperations: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Type: {},
                                Status: {},
                                TargetArn: {},
                                StartedAt: {
                                    type: "timestamp"
                                },
                                EndedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListServices: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ServiceSummaryList" ],
                members: {
                    ServiceSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ServiceName: {},
                                ServiceId: {},
                                ServiceArn: {},
                                ServiceUrl: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sh"
                    }
                }
            }
        },
        PauseService: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Service" ],
                members: {
                    Service: {
                        shape: "S1v"
                    },
                    OperationId: {}
                }
            }
        },
        ResumeService: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Service" ],
                members: {
                    Service: {
                        shape: "S1v"
                    },
                    OperationId: {}
                }
            }
        },
        StartDeployment: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "OperationId" ],
                members: {
                    OperationId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateService: {
            input: {
                type: "structure",
                required: [ "ServiceArn" ],
                members: {
                    ServiceArn: {},
                    SourceConfiguration: {
                        shape: "Sz"
                    },
                    InstanceConfiguration: {
                        shape: "S1i"
                    },
                    AutoScalingConfigurationArn: {},
                    HealthCheckConfiguration: {
                        shape: "S1n"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Service", "OperationId" ],
                members: {
                    Service: {
                        shape: "S1v"
                    },
                    OperationId: {}
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            required: [ "DomainName", "EnableWWWSubdomain", "Status" ],
            members: {
                DomainName: {},
                EnableWWWSubdomain: {
                    type: "boolean"
                },
                CertificateValidationRecords: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {},
                            Type: {},
                            Value: {},
                            Status: {}
                        }
                    }
                },
                Status: {}
            }
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                AutoScalingConfigurationArn: {},
                AutoScalingConfigurationName: {},
                AutoScalingConfigurationRevision: {
                    type: "integer"
                },
                Latest: {
                    type: "boolean"
                },
                Status: {},
                MaxConcurrency: {
                    type: "integer"
                },
                MinSize: {
                    type: "integer"
                },
                MaxSize: {
                    type: "integer"
                },
                CreatedAt: {
                    type: "timestamp"
                },
                DeletedAt: {
                    type: "timestamp"
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                ConnectionName: {},
                ConnectionArn: {},
                ProviderType: {},
                Status: {},
                CreatedAt: {
                    type: "timestamp"
                }
            }
        },
        Sz: {
            type: "structure",
            members: {
                CodeRepository: {
                    type: "structure",
                    required: [ "RepositoryUrl", "SourceCodeVersion" ],
                    members: {
                        RepositoryUrl: {},
                        SourceCodeVersion: {
                            type: "structure",
                            required: [ "Type", "Value" ],
                            members: {
                                Type: {},
                                Value: {}
                            }
                        },
                        CodeConfiguration: {
                            type: "structure",
                            required: [ "ConfigurationSource" ],
                            members: {
                                ConfigurationSource: {},
                                CodeConfigurationValues: {
                                    type: "structure",
                                    required: [ "Runtime" ],
                                    members: {
                                        Runtime: {},
                                        BuildCommand: {
                                            type: "string",
                                            sensitive: true
                                        },
                                        StartCommand: {
                                            type: "string",
                                            sensitive: true
                                        },
                                        Port: {},
                                        RuntimeEnvironmentVariables: {
                                            shape: "S19"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                ImageRepository: {
                    type: "structure",
                    required: [ "ImageIdentifier", "ImageRepositoryType" ],
                    members: {
                        ImageIdentifier: {},
                        ImageConfiguration: {
                            type: "structure",
                            members: {
                                RuntimeEnvironmentVariables: {
                                    shape: "S19"
                                },
                                StartCommand: {},
                                Port: {}
                            }
                        },
                        ImageRepositoryType: {}
                    }
                },
                AutoDeploymentsEnabled: {
                    type: "boolean"
                },
                AuthenticationConfiguration: {
                    type: "structure",
                    members: {
                        ConnectionArn: {},
                        AccessRoleArn: {}
                    }
                }
            }
        },
        S19: {
            type: "map",
            key: {
                type: "string",
                sensitive: true
            },
            value: {
                type: "string",
                sensitive: true
            }
        },
        S1i: {
            type: "structure",
            members: {
                Cpu: {},
                Memory: {},
                InstanceRoleArn: {}
            }
        },
        S1l: {
            type: "structure",
            required: [ "KmsKey" ],
            members: {
                KmsKey: {}
            }
        },
        S1n: {
            type: "structure",
            members: {
                Protocol: {},
                Path: {},
                Interval: {
                    type: "integer"
                },
                Timeout: {
                    type: "integer"
                },
                HealthyThreshold: {
                    type: "integer"
                },
                UnhealthyThreshold: {
                    type: "integer"
                }
            }
        },
        S1v: {
            type: "structure",
            required: [ "ServiceName", "ServiceId", "ServiceArn", "ServiceUrl", "CreatedAt", "UpdatedAt", "Status", "SourceConfiguration", "InstanceConfiguration", "AutoScalingConfigurationSummary" ],
            members: {
                ServiceName: {},
                ServiceId: {},
                ServiceArn: {},
                ServiceUrl: {},
                CreatedAt: {
                    type: "timestamp"
                },
                UpdatedAt: {
                    type: "timestamp"
                },
                DeletedAt: {
                    type: "timestamp"
                },
                Status: {},
                SourceConfiguration: {
                    shape: "Sz"
                },
                InstanceConfiguration: {
                    shape: "S1i"
                },
                EncryptionConfiguration: {
                    shape: "S1l"
                },
                HealthCheckConfiguration: {
                    shape: "S1n"
                },
                AutoScalingConfigurationSummary: {
                    shape: "S1y"
                }
            }
        },
        S1y: {
            type: "structure",
            members: {
                AutoScalingConfigurationArn: {},
                AutoScalingConfigurationName: {},
                AutoScalingConfigurationRevision: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        DescribeCustomDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAutoScalingConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListOperations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListServices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["proton"] = {};

AWS.Proton = AWS.Service.defineService("proton", [ "2020-07-20" ]);

AWS.apiLoader.services["proton"]["2020-07-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-20",
        endpointPrefix: "proton",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "AWS Proton",
        serviceId: "Proton",
        signatureVersion: "v4",
        signingName: "proton",
        targetPrefix: "AwsProton20200720",
        uid: "proton-2020-07-20"
    },
    operations: {
        AcceptEnvironmentAccountConnection: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentAccountConnection" ],
                members: {
                    environmentAccountConnection: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        CancelEnvironmentDeployment: {
            input: {
                type: "structure",
                required: [ "environmentName" ],
                members: {
                    environmentName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environment" ],
                members: {
                    environment: {
                        shape: "Sd"
                    }
                }
            }
        },
        CancelServiceInstanceDeployment: {
            input: {
                type: "structure",
                required: [ "serviceInstanceName", "serviceName" ],
                members: {
                    serviceInstanceName: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceInstance" ],
                members: {
                    serviceInstance: {
                        shape: "Sn"
                    }
                }
            }
        },
        CancelServicePipelineDeployment: {
            input: {
                type: "structure",
                required: [ "serviceName" ],
                members: {
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "pipeline" ],
                members: {
                    pipeline: {
                        shape: "Sr"
                    }
                }
            }
        },
        CreateEnvironment: {
            input: {
                type: "structure",
                required: [ "name", "spec", "templateMajorVersion", "templateName" ],
                members: {
                    description: {
                        shape: "Sh"
                    },
                    environmentAccountConnectionId: {},
                    name: {},
                    protonServiceRoleArn: {},
                    spec: {
                        shape: "Sj"
                    },
                    tags: {
                        shape: "St"
                    },
                    templateMajorVersion: {},
                    templateMinorVersion: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environment" ],
                members: {
                    environment: {
                        shape: "Sd"
                    }
                }
            },
            idempotent: true
        },
        CreateEnvironmentAccountConnection: {
            input: {
                type: "structure",
                required: [ "environmentName", "managementAccountId", "roleArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    environmentName: {},
                    managementAccountId: {},
                    roleArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentAccountConnection" ],
                members: {
                    environmentAccountConnection: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        CreateEnvironmentTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    description: {
                        shape: "Sh"
                    },
                    displayName: {
                        shape: "S12"
                    },
                    encryptionKey: {},
                    name: {},
                    provisioning: {},
                    tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "environmentTemplate" ],
                members: {
                    environmentTemplate: {
                        shape: "S14"
                    }
                }
            },
            idempotent: true
        },
        CreateEnvironmentTemplateVersion: {
            input: {
                type: "structure",
                required: [ "source", "templateName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {
                        shape: "Sh"
                    },
                    majorVersion: {},
                    source: {
                        shape: "S18"
                    },
                    tags: {
                        shape: "St"
                    },
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentTemplateVersion" ],
                members: {
                    environmentTemplateVersion: {
                        shape: "S1d"
                    }
                }
            },
            idempotent: true
        },
        CreateService: {
            input: {
                type: "structure",
                required: [ "name", "spec", "templateMajorVersion", "templateName" ],
                members: {
                    branchName: {},
                    description: {
                        shape: "Sh"
                    },
                    name: {},
                    repositoryConnectionArn: {},
                    repositoryId: {},
                    spec: {
                        shape: "Sj"
                    },
                    tags: {
                        shape: "St"
                    },
                    templateMajorVersion: {},
                    templateMinorVersion: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "service" ],
                members: {
                    service: {
                        shape: "S1l"
                    }
                }
            },
            idempotent: true
        },
        CreateServiceTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    description: {
                        shape: "Sh"
                    },
                    displayName: {
                        shape: "S12"
                    },
                    encryptionKey: {},
                    name: {},
                    pipelineProvisioning: {},
                    tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "serviceTemplate" ],
                members: {
                    serviceTemplate: {
                        shape: "S1q"
                    }
                }
            },
            idempotent: true
        },
        CreateServiceTemplateVersion: {
            input: {
                type: "structure",
                required: [ "compatibleEnvironmentTemplates", "source", "templateName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    compatibleEnvironmentTemplates: {
                        shape: "S1t"
                    },
                    description: {
                        shape: "Sh"
                    },
                    majorVersion: {},
                    source: {
                        shape: "S18"
                    },
                    tags: {
                        shape: "St"
                    },
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceTemplateVersion" ],
                members: {
                    serviceTemplateVersion: {
                        shape: "S1w"
                    }
                }
            },
            idempotent: true
        },
        DeleteEnvironment: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    environment: {
                        shape: "Sd"
                    }
                }
            },
            idempotent: true
        },
        DeleteEnvironmentAccountConnection: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentAccountConnection: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        DeleteEnvironmentTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentTemplate: {
                        shape: "S14"
                    }
                }
            },
            idempotent: true
        },
        DeleteEnvironmentTemplateVersion: {
            input: {
                type: "structure",
                required: [ "majorVersion", "minorVersion", "templateName" ],
                members: {
                    majorVersion: {},
                    minorVersion: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentTemplateVersion: {
                        shape: "S1d"
                    }
                }
            },
            idempotent: true
        },
        DeleteService: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    service: {
                        shape: "S1l"
                    }
                }
            },
            idempotent: true
        },
        DeleteServiceTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    serviceTemplate: {
                        shape: "S1q"
                    }
                }
            },
            idempotent: true
        },
        DeleteServiceTemplateVersion: {
            input: {
                type: "structure",
                required: [ "majorVersion", "minorVersion", "templateName" ],
                members: {
                    majorVersion: {},
                    minorVersion: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    serviceTemplateVersion: {
                        shape: "S1w"
                    }
                }
            },
            idempotent: true
        },
        GetAccountSettings: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    accountSettings: {
                        shape: "S2g"
                    }
                }
            }
        },
        GetEnvironment: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environment" ],
                members: {
                    environment: {
                        shape: "Sd"
                    }
                }
            }
        },
        GetEnvironmentAccountConnection: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentAccountConnection" ],
                members: {
                    environmentAccountConnection: {
                        shape: "S4"
                    }
                }
            }
        },
        GetEnvironmentTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentTemplate" ],
                members: {
                    environmentTemplate: {
                        shape: "S14"
                    }
                }
            }
        },
        GetEnvironmentTemplateVersion: {
            input: {
                type: "structure",
                required: [ "majorVersion", "minorVersion", "templateName" ],
                members: {
                    majorVersion: {},
                    minorVersion: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentTemplateVersion" ],
                members: {
                    environmentTemplateVersion: {
                        shape: "S1d"
                    }
                }
            }
        },
        GetService: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    service: {
                        shape: "S1l"
                    }
                }
            }
        },
        GetServiceInstance: {
            input: {
                type: "structure",
                required: [ "name", "serviceName" ],
                members: {
                    name: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceInstance" ],
                members: {
                    serviceInstance: {
                        shape: "Sn"
                    }
                }
            }
        },
        GetServiceTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceTemplate" ],
                members: {
                    serviceTemplate: {
                        shape: "S1q"
                    }
                }
            }
        },
        GetServiceTemplateVersion: {
            input: {
                type: "structure",
                required: [ "majorVersion", "minorVersion", "templateName" ],
                members: {
                    majorVersion: {},
                    minorVersion: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceTemplateVersion" ],
                members: {
                    serviceTemplateVersion: {
                        shape: "S1w"
                    }
                }
            }
        },
        ListEnvironmentAccountConnections: {
            input: {
                type: "structure",
                required: [ "requestedBy" ],
                members: {
                    environmentName: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    requestedBy: {},
                    statuses: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "environmentAccountConnections" ],
                members: {
                    environmentAccountConnections: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "environmentAccountId", "environmentName", "id", "lastModifiedAt", "managementAccountId", "requestedAt", "roleArn", "status" ],
                            members: {
                                arn: {},
                                environmentAccountId: {},
                                environmentName: {},
                                id: {},
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                managementAccountId: {},
                                requestedAt: {
                                    type: "timestamp"
                                },
                                roleArn: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEnvironmentTemplateVersions: {
            input: {
                type: "structure",
                required: [ "templateName" ],
                members: {
                    majorVersion: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "templateVersions" ],
                members: {
                    nextToken: {},
                    templateVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastModifiedAt", "majorVersion", "minorVersion", "status", "templateName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Sh"
                                },
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                majorVersion: {},
                                minorVersion: {},
                                recommendedMinorVersion: {},
                                status: {},
                                statusMessage: {
                                    shape: "Sg"
                                },
                                templateName: {}
                            }
                        }
                    }
                }
            }
        },
        ListEnvironmentTemplates: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "templates" ],
                members: {
                    nextToken: {},
                    templates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastModifiedAt", "name" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Sh"
                                },
                                displayName: {
                                    shape: "S12"
                                },
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                name: {},
                                provisioning: {},
                                recommendedVersion: {}
                            }
                        }
                    }
                }
            }
        },
        ListEnvironments: {
            input: {
                type: "structure",
                members: {
                    environmentTemplates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "majorVersion", "templateName" ],
                            members: {
                                majorVersion: {},
                                templateName: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environments" ],
                members: {
                    environments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "deploymentStatus", "lastDeploymentAttemptedAt", "lastDeploymentSucceededAt", "name", "templateMajorVersion", "templateMinorVersion", "templateName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                deploymentStatus: {},
                                deploymentStatusMessage: {
                                    shape: "Sg"
                                },
                                description: {
                                    shape: "Sh"
                                },
                                environmentAccountConnectionId: {},
                                environmentAccountId: {},
                                lastDeploymentAttemptedAt: {
                                    type: "timestamp"
                                },
                                lastDeploymentSucceededAt: {
                                    type: "timestamp"
                                },
                                name: {},
                                protonServiceRoleArn: {},
                                provisioning: {},
                                templateMajorVersion: {},
                                templateMinorVersion: {},
                                templateName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListServiceInstances: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceInstances" ],
                members: {
                    nextToken: {},
                    serviceInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "deploymentStatus", "environmentName", "lastDeploymentAttemptedAt", "lastDeploymentSucceededAt", "name", "serviceName", "templateMajorVersion", "templateMinorVersion", "templateName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                deploymentStatus: {},
                                deploymentStatusMessage: {
                                    shape: "Sg"
                                },
                                environmentName: {},
                                lastDeploymentAttemptedAt: {
                                    type: "timestamp"
                                },
                                lastDeploymentSucceededAt: {
                                    type: "timestamp"
                                },
                                name: {},
                                serviceName: {},
                                templateMajorVersion: {},
                                templateMinorVersion: {},
                                templateName: {}
                            }
                        }
                    }
                }
            }
        },
        ListServiceTemplateVersions: {
            input: {
                type: "structure",
                required: [ "templateName" ],
                members: {
                    majorVersion: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "templateVersions" ],
                members: {
                    nextToken: {},
                    templateVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastModifiedAt", "majorVersion", "minorVersion", "status", "templateName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Sh"
                                },
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                majorVersion: {},
                                minorVersion: {},
                                recommendedMinorVersion: {},
                                status: {},
                                statusMessage: {
                                    shape: "Sg"
                                },
                                templateName: {}
                            }
                        }
                    }
                }
            }
        },
        ListServiceTemplates: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "templates" ],
                members: {
                    nextToken: {},
                    templates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastModifiedAt", "name" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Sh"
                                },
                                displayName: {
                                    shape: "S12"
                                },
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                name: {},
                                pipelineProvisioning: {},
                                recommendedVersion: {}
                            }
                        }
                    }
                }
            }
        },
        ListServices: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "services" ],
                members: {
                    nextToken: {},
                    services: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastModifiedAt", "name", "status", "templateName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Sh"
                                },
                                lastModifiedAt: {
                                    type: "timestamp"
                                },
                                name: {},
                                status: {},
                                statusMessage: {
                                    shape: "Sg"
                                },
                                templateName: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    nextToken: {},
                    tags: {
                        shape: "St"
                    }
                }
            }
        },
        RejectEnvironmentAccountConnection: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentAccountConnection" ],
                members: {
                    environmentAccountConnection: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateAccountSettings: {
            input: {
                type: "structure",
                members: {
                    pipelineServiceRoleArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "accountSettings" ],
                members: {
                    accountSettings: {
                        shape: "S2g"
                    }
                }
            }
        },
        UpdateEnvironment: {
            input: {
                type: "structure",
                required: [ "deploymentType", "name" ],
                members: {
                    deploymentType: {},
                    description: {
                        shape: "Sh"
                    },
                    environmentAccountConnectionId: {},
                    name: {},
                    protonServiceRoleArn: {},
                    spec: {
                        shape: "Sj"
                    },
                    templateMajorVersion: {},
                    templateMinorVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environment" ],
                members: {
                    environment: {
                        shape: "Sd"
                    }
                }
            }
        },
        UpdateEnvironmentAccountConnection: {
            input: {
                type: "structure",
                required: [ "id", "roleArn" ],
                members: {
                    id: {},
                    roleArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentAccountConnection" ],
                members: {
                    environmentAccountConnection: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        UpdateEnvironmentTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    description: {
                        shape: "Sh"
                    },
                    displayName: {
                        shape: "S12"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentTemplate" ],
                members: {
                    environmentTemplate: {
                        shape: "S14"
                    }
                }
            }
        },
        UpdateEnvironmentTemplateVersion: {
            input: {
                type: "structure",
                required: [ "majorVersion", "minorVersion", "templateName" ],
                members: {
                    description: {
                        shape: "Sh"
                    },
                    majorVersion: {},
                    minorVersion: {},
                    status: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentTemplateVersion" ],
                members: {
                    environmentTemplateVersion: {
                        shape: "S1d"
                    }
                }
            }
        },
        UpdateService: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    description: {
                        shape: "Sh"
                    },
                    name: {},
                    spec: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "service" ],
                members: {
                    service: {
                        shape: "S1l"
                    }
                }
            }
        },
        UpdateServiceInstance: {
            input: {
                type: "structure",
                required: [ "deploymentType", "name", "serviceName" ],
                members: {
                    deploymentType: {},
                    name: {},
                    serviceName: {},
                    spec: {
                        shape: "Sj"
                    },
                    templateMajorVersion: {},
                    templateMinorVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceInstance" ],
                members: {
                    serviceInstance: {
                        shape: "Sn"
                    }
                }
            }
        },
        UpdateServicePipeline: {
            input: {
                type: "structure",
                required: [ "deploymentType", "serviceName", "spec" ],
                members: {
                    deploymentType: {},
                    serviceName: {},
                    spec: {
                        shape: "Sj"
                    },
                    templateMajorVersion: {},
                    templateMinorVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "pipeline" ],
                members: {
                    pipeline: {
                        shape: "Sr"
                    }
                }
            }
        },
        UpdateServiceTemplate: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    description: {
                        shape: "Sh"
                    },
                    displayName: {
                        shape: "S12"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceTemplate" ],
                members: {
                    serviceTemplate: {
                        shape: "S1q"
                    }
                }
            }
        },
        UpdateServiceTemplateVersion: {
            input: {
                type: "structure",
                required: [ "majorVersion", "minorVersion", "templateName" ],
                members: {
                    compatibleEnvironmentTemplates: {
                        shape: "S1t"
                    },
                    description: {
                        shape: "Sh"
                    },
                    majorVersion: {},
                    minorVersion: {},
                    status: {},
                    templateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "serviceTemplateVersion" ],
                members: {
                    serviceTemplateVersion: {
                        shape: "S1w"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "arn", "environmentAccountId", "environmentName", "id", "lastModifiedAt", "managementAccountId", "requestedAt", "roleArn", "status" ],
            members: {
                arn: {},
                environmentAccountId: {},
                environmentName: {},
                id: {},
                lastModifiedAt: {
                    type: "timestamp"
                },
                managementAccountId: {},
                requestedAt: {
                    type: "timestamp"
                },
                roleArn: {},
                status: {}
            }
        },
        Sd: {
            type: "structure",
            required: [ "arn", "createdAt", "deploymentStatus", "lastDeploymentAttemptedAt", "lastDeploymentSucceededAt", "name", "templateMajorVersion", "templateMinorVersion", "templateName" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                deploymentStatus: {},
                deploymentStatusMessage: {
                    shape: "Sg"
                },
                description: {
                    shape: "Sh"
                },
                environmentAccountConnectionId: {},
                environmentAccountId: {},
                lastDeploymentAttemptedAt: {
                    type: "timestamp"
                },
                lastDeploymentSucceededAt: {
                    type: "timestamp"
                },
                name: {},
                protonServiceRoleArn: {},
                provisioning: {},
                spec: {
                    shape: "Sj"
                },
                templateMajorVersion: {},
                templateMinorVersion: {},
                templateName: {}
            }
        },
        Sg: {
            type: "string",
            sensitive: true
        },
        Sh: {
            type: "string",
            sensitive: true
        },
        Sj: {
            type: "string",
            sensitive: true
        },
        Sn: {
            type: "structure",
            required: [ "arn", "createdAt", "deploymentStatus", "environmentName", "lastDeploymentAttemptedAt", "lastDeploymentSucceededAt", "name", "serviceName", "templateMajorVersion", "templateMinorVersion", "templateName" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                deploymentStatus: {},
                deploymentStatusMessage: {
                    shape: "Sg"
                },
                environmentName: {},
                lastDeploymentAttemptedAt: {
                    type: "timestamp"
                },
                lastDeploymentSucceededAt: {
                    type: "timestamp"
                },
                name: {},
                serviceName: {},
                spec: {
                    shape: "Sj"
                },
                templateMajorVersion: {},
                templateMinorVersion: {},
                templateName: {}
            }
        },
        Sr: {
            type: "structure",
            required: [ "arn", "createdAt", "deploymentStatus", "lastDeploymentAttemptedAt", "lastDeploymentSucceededAt", "templateMajorVersion", "templateMinorVersion", "templateName" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                deploymentStatus: {},
                deploymentStatusMessage: {
                    shape: "Sg"
                },
                lastDeploymentAttemptedAt: {
                    type: "timestamp"
                },
                lastDeploymentSucceededAt: {
                    type: "timestamp"
                },
                spec: {
                    shape: "Sj"
                },
                templateMajorVersion: {},
                templateMinorVersion: {},
                templateName: {}
            }
        },
        St: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S12: {
            type: "string",
            sensitive: true
        },
        S14: {
            type: "structure",
            required: [ "arn", "createdAt", "lastModifiedAt", "name" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                description: {
                    shape: "Sh"
                },
                displayName: {
                    shape: "S12"
                },
                encryptionKey: {},
                lastModifiedAt: {
                    type: "timestamp"
                },
                name: {},
                provisioning: {},
                recommendedVersion: {}
            }
        },
        S18: {
            type: "structure",
            members: {
                s3: {
                    type: "structure",
                    required: [ "bucket", "key" ],
                    members: {
                        bucket: {},
                        key: {}
                    }
                }
            },
            union: true
        },
        S1d: {
            type: "structure",
            required: [ "arn", "createdAt", "lastModifiedAt", "majorVersion", "minorVersion", "status", "templateName" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                description: {
                    shape: "Sh"
                },
                lastModifiedAt: {
                    type: "timestamp"
                },
                majorVersion: {},
                minorVersion: {},
                recommendedMinorVersion: {},
                schema: {
                    shape: "S1f"
                },
                status: {},
                statusMessage: {
                    shape: "Sg"
                },
                templateName: {}
            }
        },
        S1f: {
            type: "string",
            sensitive: true
        },
        S1l: {
            type: "structure",
            required: [ "arn", "createdAt", "lastModifiedAt", "name", "spec", "status", "templateName" ],
            members: {
                arn: {},
                branchName: {},
                createdAt: {
                    type: "timestamp"
                },
                description: {
                    shape: "Sh"
                },
                lastModifiedAt: {
                    type: "timestamp"
                },
                name: {},
                pipeline: {
                    shape: "Sr"
                },
                repositoryConnectionArn: {},
                repositoryId: {},
                spec: {
                    shape: "Sj"
                },
                status: {},
                statusMessage: {
                    shape: "Sg"
                },
                templateName: {}
            }
        },
        S1q: {
            type: "structure",
            required: [ "arn", "createdAt", "lastModifiedAt", "name" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                description: {
                    shape: "Sh"
                },
                displayName: {
                    shape: "S12"
                },
                encryptionKey: {},
                lastModifiedAt: {
                    type: "timestamp"
                },
                name: {},
                pipelineProvisioning: {},
                recommendedVersion: {}
            }
        },
        S1t: {
            type: "list",
            member: {
                type: "structure",
                required: [ "majorVersion", "templateName" ],
                members: {
                    majorVersion: {},
                    templateName: {}
                }
            }
        },
        S1w: {
            type: "structure",
            required: [ "arn", "compatibleEnvironmentTemplates", "createdAt", "lastModifiedAt", "majorVersion", "minorVersion", "status", "templateName" ],
            members: {
                arn: {},
                compatibleEnvironmentTemplates: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "majorVersion", "templateName" ],
                        members: {
                            majorVersion: {},
                            templateName: {}
                        }
                    }
                },
                createdAt: {
                    type: "timestamp"
                },
                description: {
                    shape: "Sh"
                },
                lastModifiedAt: {
                    type: "timestamp"
                },
                majorVersion: {},
                minorVersion: {},
                recommendedMinorVersion: {},
                schema: {
                    shape: "S1f"
                },
                status: {},
                statusMessage: {
                    shape: "Sg"
                },
                templateName: {}
            }
        },
        S2g: {
            type: "structure",
            members: {
                pipelineServiceRoleArn: {}
            }
        }
    },
    paginators: {
        ListEnvironmentAccountConnections: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "environmentAccountConnections"
        },
        ListEnvironmentTemplateVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templateVersions"
        },
        ListEnvironmentTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templates"
        },
        ListEnvironments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "environments"
        },
        ListServiceInstances: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "serviceInstances"
        },
        ListServiceTemplateVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templateVersions"
        },
        ListServiceTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templates"
        },
        ListServices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "services"
        },
        ListTagsForResource: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tags"
        }
    },
    waiters: {
        EnvironmentDeployed: {
            description: "Wait until an Environment is deployed. Use this after invoking CreateEnvironment or UpdateEnvironment",
            delay: 5,
            maxAttempts: 999,
            operation: "GetEnvironment",
            acceptors: [ {
                matcher: "path",
                argument: "environment.deploymentStatus",
                state: "success",
                expected: "SUCCEEDED"
            }, {
                matcher: "path",
                argument: "environment.deploymentStatus",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        EnvironmentTemplateVersionRegistered: {
            description: "Wait until an EnvironmentTemplateVersion is registered. Use this after invoking CreateEnvironmentTemplateVersion",
            delay: 2,
            maxAttempts: 150,
            operation: "GetEnvironmentTemplateVersion",
            acceptors: [ {
                matcher: "path",
                argument: "environmentTemplateVersion.status",
                state: "success",
                expected: "DRAFT"
            }, {
                matcher: "path",
                argument: "environmentTemplateVersion.status",
                state: "success",
                expected: "PUBLISHED"
            }, {
                matcher: "path",
                argument: "environmentTemplateVersion.status",
                state: "failure",
                expected: "REGISTRATION_FAILED"
            } ]
        },
        ServiceCreated: {
            description: "Wait until an Service has deployed its instances and possibly pipeline. Use this after invoking CreateService",
            delay: 5,
            maxAttempts: 999,
            operation: "GetService",
            acceptors: [ {
                matcher: "path",
                argument: "service.status",
                state: "success",
                expected: "ACTIVE"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "CREATE_FAILED_CLEANUP_COMPLETE"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "CREATE_FAILED_CLEANUP_FAILED"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "CREATE_FAILED"
            } ]
        },
        ServiceDeleted: {
            description: "Wait until a Service, its instances, and possibly pipeline have been deleted after DeleteService is invoked",
            delay: 5,
            maxAttempts: 999,
            operation: "GetService",
            acceptors: [ {
                matcher: "error",
                state: "success",
                expected: "ResourceNotFoundException"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "DELETE_FAILED"
            } ]
        },
        ServiceInstanceDeployed: {
            description: "Wait until a ServiceInstance is deployed. Use this after invoking CreateService or UpdateServiceInstance",
            delay: 5,
            maxAttempts: 999,
            operation: "GetServiceInstance",
            acceptors: [ {
                matcher: "path",
                argument: "serviceInstance.deploymentStatus",
                state: "success",
                expected: "SUCCEEDED"
            }, {
                matcher: "path",
                argument: "serviceInstance.deploymentStatus",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        ServicePipelineDeployed: {
            description: "Wait until an ServicePipeline is deployed. Use this after invoking CreateService or UpdateServicePipeline",
            delay: 10,
            maxAttempts: 360,
            operation: "GetService",
            acceptors: [ {
                matcher: "path",
                argument: "service.pipeline.deploymentStatus",
                state: "success",
                expected: "SUCCEEDED"
            }, {
                matcher: "path",
                argument: "service.pipeline.deploymentStatus",
                state: "failure",
                expected: "FAILED"
            } ]
        },
        ServiceTemplateVersionRegistered: {
            description: "Wait until a ServiceTemplateVersion is registered. Use this after invoking CreateServiceTemplateVersion",
            delay: 2,
            maxAttempts: 150,
            operation: "GetServiceTemplateVersion",
            acceptors: [ {
                matcher: "path",
                argument: "serviceTemplateVersion.status",
                state: "success",
                expected: "DRAFT"
            }, {
                matcher: "path",
                argument: "serviceTemplateVersion.status",
                state: "success",
                expected: "PUBLISHED"
            }, {
                matcher: "path",
                argument: "serviceTemplateVersion.status",
                state: "failure",
                expected: "REGISTRATION_FAILED"
            } ]
        },
        ServiceUpdated: {
            description: "Wait until a Service, its instances, and possibly pipeline have been deployed after UpdateService is invoked",
            delay: 5,
            maxAttempts: 999,
            operation: "GetService",
            acceptors: [ {
                matcher: "path",
                argument: "service.status",
                state: "success",
                expected: "ACTIVE"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "UPDATE_FAILED_CLEANUP_COMPLETE"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "UPDATE_FAILED_CLEANUP_FAILED"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "UPDATE_FAILED"
            }, {
                matcher: "path",
                argument: "service.status",
                state: "failure",
                expected: "UPDATE_COMPLETE_CLEANUP_FAILED"
            } ]
        }
    }
};

AWS.apiLoader.services["route53recoverycluster"] = {};

AWS.Route53RecoveryCluster = AWS.Service.defineService("route53recoverycluster", [ "2019-12-02" ]);

AWS.apiLoader.services["route53recoverycluster"]["2019-12-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-02",
        endpointPrefix: "route53-recovery-cluster",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "Route53 Recovery Cluster",
        serviceId: "Route53 Recovery Cluster",
        signatureVersion: "v4",
        signingName: "route53-recovery-cluster",
        targetPrefix: "ToggleCustomerAPI",
        uid: "route53-recovery-cluster-2019-12-02"
    },
    operations: {
        GetRoutingControlState: {
            input: {
                type: "structure",
                required: [ "RoutingControlArn" ],
                members: {
                    RoutingControlArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RoutingControlArn", "RoutingControlState" ],
                members: {
                    RoutingControlArn: {},
                    RoutingControlState: {}
                }
            }
        },
        UpdateRoutingControlState: {
            input: {
                type: "structure",
                required: [ "RoutingControlArn", "RoutingControlState" ],
                members: {
                    RoutingControlArn: {},
                    RoutingControlState: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRoutingControlStates: {
            input: {
                type: "structure",
                required: [ "UpdateRoutingControlStateEntries" ],
                members: {
                    UpdateRoutingControlStateEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RoutingControlArn", "RoutingControlState" ],
                            members: {
                                RoutingControlArn: {},
                                RoutingControlState: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["route53recoverycontrolconfig"] = {};

AWS.Route53RecoveryControlConfig = AWS.Service.defineService("route53recoverycontrolconfig", [ "2020-11-02" ]);

AWS.apiLoader.services["route53recoverycontrolconfig"]["2020-11-02"] = {
    metadata: {
        apiVersion: "2020-11-02",
        endpointPrefix: "route53-recovery-control-config",
        signingName: "route53-recovery-control-config",
        serviceFullName: "AWS Route53 Recovery Control Config",
        serviceId: "Route53 Recovery Control Config",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "route53-recovery-control-config-2020-11-02",
        signatureVersion: "v4"
    },
    operations: {
        CreateCluster: {
            http: {
                requestUri: "/cluster",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ClusterName: {}
                },
                required: [ "ClusterName" ]
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S5"
                    }
                }
            }
        },
        CreateControlPanel: {
            http: {
                requestUri: "/controlpanel",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ClusterArn: {},
                    ControlPanelName: {}
                },
                required: [ "ClusterArn", "ControlPanelName" ]
            },
            output: {
                type: "structure",
                members: {
                    ControlPanel: {
                        shape: "Se"
                    }
                }
            }
        },
        CreateRoutingControl: {
            http: {
                requestUri: "/routingcontrol",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ClusterArn: {},
                    ControlPanelArn: {},
                    RoutingControlName: {}
                },
                required: [ "ClusterArn", "RoutingControlName" ]
            },
            output: {
                type: "structure",
                members: {
                    RoutingControl: {
                        shape: "Sj"
                    }
                }
            }
        },
        CreateSafetyRule: {
            http: {
                requestUri: "/safetyrule",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AssertionRule: {
                        type: "structure",
                        members: {
                            AssertedControls: {
                                shape: "Sm"
                            },
                            ControlPanelArn: {},
                            Name: {},
                            RuleConfig: {
                                shape: "Sn"
                            },
                            WaitPeriodMs: {
                                type: "integer"
                            }
                        },
                        required: [ "ControlPanelArn", "AssertedControls", "RuleConfig", "WaitPeriodMs", "Name" ]
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    GatingRule: {
                        type: "structure",
                        members: {
                            ControlPanelArn: {},
                            GatingControls: {
                                shape: "Sm"
                            },
                            Name: {},
                            RuleConfig: {
                                shape: "Sn"
                            },
                            TargetControls: {
                                shape: "Sm"
                            },
                            WaitPeriodMs: {
                                type: "integer"
                            }
                        },
                        required: [ "TargetControls", "ControlPanelArn", "GatingControls", "RuleConfig", "WaitPeriodMs", "Name" ]
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssertionRule: {
                        shape: "Sr"
                    },
                    GatingRule: {
                        shape: "Ss"
                    }
                }
            }
        },
        DeleteCluster: {
            http: {
                method: "DELETE",
                requestUri: "/cluster/{ClusterArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "ClusterArn"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteControlPanel: {
            http: {
                method: "DELETE",
                requestUri: "/controlpanel/{ControlPanelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ControlPanelArn: {
                        location: "uri",
                        locationName: "ControlPanelArn"
                    }
                },
                required: [ "ControlPanelArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRoutingControl: {
            http: {
                method: "DELETE",
                requestUri: "/routingcontrol/{RoutingControlArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RoutingControlArn: {
                        location: "uri",
                        locationName: "RoutingControlArn"
                    }
                },
                required: [ "RoutingControlArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSafetyRule: {
            http: {
                method: "DELETE",
                requestUri: "/safetyrule/{SafetyRuleArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    SafetyRuleArn: {
                        location: "uri",
                        locationName: "SafetyRuleArn"
                    }
                },
                required: [ "SafetyRuleArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeCluster: {
            http: {
                method: "GET",
                requestUri: "/cluster/{ClusterArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "ClusterArn"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S5"
                    }
                }
            }
        },
        DescribeControlPanel: {
            http: {
                method: "GET",
                requestUri: "/controlpanel/{ControlPanelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ControlPanelArn: {
                        location: "uri",
                        locationName: "ControlPanelArn"
                    }
                },
                required: [ "ControlPanelArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ControlPanel: {
                        shape: "Se"
                    }
                }
            }
        },
        DescribeRoutingControl: {
            http: {
                method: "GET",
                requestUri: "/routingcontrol/{RoutingControlArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RoutingControlArn: {
                        location: "uri",
                        locationName: "RoutingControlArn"
                    }
                },
                required: [ "RoutingControlArn" ]
            },
            output: {
                type: "structure",
                members: {
                    RoutingControl: {
                        shape: "Sj"
                    }
                }
            }
        },
        DescribeSafetyRule: {
            http: {
                method: "GET",
                requestUri: "/safetyrule/{SafetyRuleArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    SafetyRuleArn: {
                        location: "uri",
                        locationName: "SafetyRuleArn"
                    }
                },
                required: [ "SafetyRuleArn" ]
            },
            output: {
                type: "structure",
                members: {
                    AssertionRule: {
                        shape: "Sr"
                    },
                    GatingRule: {
                        shape: "Ss"
                    }
                }
            }
        },
        ListAssociatedRoute53HealthChecks: {
            http: {
                method: "GET",
                requestUri: "/routingcontrol/{RoutingControlArn}/associatedRoute53HealthChecks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    RoutingControlArn: {
                        location: "uri",
                        locationName: "RoutingControlArn"
                    }
                },
                required: [ "RoutingControlArn" ]
            },
            output: {
                type: "structure",
                members: {
                    HealthCheckIds: {
                        shape: "Sm"
                    },
                    NextToken: {}
                }
            }
        },
        ListClusters: {
            http: {
                method: "GET",
                requestUri: "/cluster",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Clusters: {
                        type: "list",
                        member: {
                            shape: "S5"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListControlPanels: {
            http: {
                method: "GET",
                requestUri: "/controlpanels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "querystring",
                        locationName: "ClusterArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ControlPanels: {
                        type: "list",
                        member: {
                            shape: "Se"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRoutingControls: {
            http: {
                method: "GET",
                requestUri: "/controlpanel/{ControlPanelArn}/routingcontrols",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ControlPanelArn: {
                        location: "uri",
                        locationName: "ControlPanelArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "ControlPanelArn" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RoutingControls: {
                        type: "list",
                        member: {
                            shape: "Sj"
                        }
                    }
                }
            }
        },
        ListSafetyRules: {
            http: {
                method: "GET",
                requestUri: "/controlpanel/{ControlPanelArn}/safetyrules",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ControlPanelArn: {
                        location: "uri",
                        locationName: "ControlPanelArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "ControlPanelArn" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    SafetyRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ASSERTION: {
                                    shape: "Sr"
                                },
                                GATING: {
                                    shape: "Ss"
                                }
                            }
                        }
                    }
                }
            }
        },
        UpdateControlPanel: {
            http: {
                method: "PUT",
                requestUri: "/controlpanel",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ControlPanelArn: {},
                    ControlPanelName: {}
                },
                required: [ "ControlPanelArn", "ControlPanelName" ]
            },
            output: {
                type: "structure",
                members: {
                    ControlPanel: {
                        shape: "Se"
                    }
                }
            }
        },
        UpdateRoutingControl: {
            http: {
                method: "PUT",
                requestUri: "/routingcontrol",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RoutingControlArn: {},
                    RoutingControlName: {}
                },
                required: [ "RoutingControlName", "RoutingControlArn" ]
            },
            output: {
                type: "structure",
                members: {
                    RoutingControl: {
                        shape: "Sj"
                    }
                }
            }
        },
        UpdateSafetyRule: {
            http: {
                method: "PUT",
                requestUri: "/safetyrule",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AssertionRuleUpdate: {
                        type: "structure",
                        members: {
                            Name: {},
                            SafetyRuleArn: {},
                            WaitPeriodMs: {
                                type: "integer"
                            }
                        },
                        required: [ "SafetyRuleArn", "WaitPeriodMs", "Name" ]
                    },
                    GatingRuleUpdate: {
                        type: "structure",
                        members: {
                            Name: {},
                            SafetyRuleArn: {},
                            WaitPeriodMs: {
                                type: "integer"
                            }
                        },
                        required: [ "SafetyRuleArn", "WaitPeriodMs", "Name" ]
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssertionRule: {
                        shape: "Sr"
                    },
                    GatingRule: {
                        shape: "Ss"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                ClusterArn: {},
                ClusterEndpoints: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Endpoint: {},
                            Region: {}
                        }
                    }
                },
                Name: {},
                Status: {}
            }
        },
        Se: {
            type: "structure",
            members: {
                ClusterArn: {},
                ControlPanelArn: {},
                DefaultControlPanel: {
                    type: "boolean"
                },
                Name: {},
                RoutingControlCount: {
                    type: "integer"
                },
                Status: {}
            }
        },
        Sj: {
            type: "structure",
            members: {
                ControlPanelArn: {},
                Name: {},
                RoutingControlArn: {},
                Status: {}
            }
        },
        Sm: {
            type: "list",
            member: {}
        },
        Sn: {
            type: "structure",
            members: {
                Inverted: {
                    type: "boolean"
                },
                Threshold: {
                    type: "integer"
                },
                Type: {}
            },
            required: [ "Type", "Inverted", "Threshold" ]
        },
        Sr: {
            type: "structure",
            members: {
                AssertedControls: {
                    shape: "Sm"
                },
                ControlPanelArn: {},
                Name: {},
                RuleConfig: {
                    shape: "Sn"
                },
                SafetyRuleArn: {},
                Status: {},
                WaitPeriodMs: {
                    type: "integer"
                }
            },
            required: [ "Status", "ControlPanelArn", "SafetyRuleArn", "AssertedControls", "RuleConfig", "WaitPeriodMs", "Name" ]
        },
        Ss: {
            type: "structure",
            members: {
                ControlPanelArn: {},
                GatingControls: {
                    shape: "Sm"
                },
                Name: {},
                RuleConfig: {
                    shape: "Sn"
                },
                SafetyRuleArn: {},
                Status: {},
                TargetControls: {
                    shape: "Sm"
                },
                WaitPeriodMs: {
                    type: "integer"
                }
            },
            required: [ "Status", "TargetControls", "ControlPanelArn", "SafetyRuleArn", "GatingControls", "RuleConfig", "WaitPeriodMs", "Name" ]
        }
    },
    paginators: {
        ListAssociatedRoute53HealthChecks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListClusters: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListControlPanels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRoutingControls: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSafetyRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    },
    waiters: {
        ClusterCreated: {
            description: "Wait until a cluster is created",
            operation: "DescribeCluster",
            delay: 5,
            maxAttempts: 26,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "Cluster.Status",
                expected: "DEPLOYED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "Cluster.Status",
                expected: "PENDING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        ClusterDeleted: {
            description: "Wait for a cluster to be deleted",
            operation: "DescribeCluster",
            delay: 5,
            maxAttempts: 26,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 404
            }, {
                state: "retry",
                matcher: "path",
                argument: "Cluster.Status",
                expected: "PENDING_DELETION"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        ControlPanelCreated: {
            description: "Wait until a control panel is created",
            operation: "DescribeControlPanel",
            delay: 5,
            maxAttempts: 26,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "ControlPanel.Status",
                expected: "DEPLOYED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "ControlPanel.Status",
                expected: "PENDING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        ControlPanelDeleted: {
            description: "Wait until a control panel is deleted",
            operation: "DescribeControlPanel",
            delay: 5,
            maxAttempts: 26,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 404
            }, {
                state: "retry",
                matcher: "path",
                argument: "ControlPanel.Status",
                expected: "PENDING_DELETION"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        RoutingControlCreated: {
            description: "Wait until a routing control is created",
            operation: "DescribeRoutingControl",
            delay: 5,
            maxAttempts: 26,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "RoutingControl.Status",
                expected: "DEPLOYED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "RoutingControl.Status",
                expected: "PENDING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        RoutingControlDeleted: {
            description: "Wait for a routing control to be deleted",
            operation: "DescribeRoutingControl",
            delay: 5,
            maxAttempts: 26,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 404
            }, {
                state: "retry",
                matcher: "path",
                argument: "RoutingControl.Status",
                expected: "PENDING_DELETION"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        }
    }
};

AWS.apiLoader.services["route53recoveryreadiness"] = {};

AWS.Route53RecoveryReadiness = AWS.Service.defineService("route53recoveryreadiness", [ "2019-12-02" ]);

AWS.apiLoader.services["route53recoveryreadiness"]["2019-12-02"] = {
    metadata: {
        apiVersion: "2019-12-02",
        endpointPrefix: "route53-recovery-readiness",
        signingName: "route53-recovery-readiness",
        serviceFullName: "AWS Route53 Recovery Readiness",
        serviceId: "Route53 Recovery Readiness",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "route53-recovery-readiness-2019-12-02",
        signatureVersion: "v4"
    },
    operations: {
        CreateCell: {
            http: {
                requestUri: "/cells",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CellName: {
                        locationName: "cellName"
                    },
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                },
                required: [ "CellName" ]
            },
            output: {
                type: "structure",
                members: {
                    CellArn: {
                        locationName: "cellArn"
                    },
                    CellName: {
                        locationName: "cellName"
                    },
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    ParentReadinessScopes: {
                        shape: "S3",
                        locationName: "parentReadinessScopes"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateCrossAccountAuthorization: {
            http: {
                requestUri: "/crossaccountauthorizations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CrossAccountAuthorization: {
                        locationName: "crossAccountAuthorization"
                    }
                },
                required: [ "CrossAccountAuthorization" ]
            },
            output: {
                type: "structure",
                members: {
                    CrossAccountAuthorization: {
                        locationName: "crossAccountAuthorization"
                    }
                }
            }
        },
        CreateReadinessCheck: {
            http: {
                requestUri: "/readinesschecks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ReadinessCheckName: {
                        locationName: "readinessCheckName"
                    },
                    ResourceSetName: {
                        locationName: "resourceSetName"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceSetName", "ReadinessCheckName" ]
            },
            output: {
                type: "structure",
                members: {
                    ReadinessCheckArn: {
                        locationName: "readinessCheckArn"
                    },
                    ReadinessCheckName: {
                        locationName: "readinessCheckName"
                    },
                    ResourceSet: {
                        locationName: "resourceSet"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateRecoveryGroup: {
            http: {
                requestUri: "/recoverygroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    RecoveryGroupName: {
                        locationName: "recoveryGroupName"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                },
                required: [ "RecoveryGroupName" ]
            },
            output: {
                type: "structure",
                members: {
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    RecoveryGroupArn: {
                        locationName: "recoveryGroupArn"
                    },
                    RecoveryGroupName: {
                        locationName: "recoveryGroupName"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateResourceSet: {
            http: {
                requestUri: "/resourcesets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceSetName: {
                        locationName: "resourceSetName"
                    },
                    ResourceSetType: {
                        locationName: "resourceSetType"
                    },
                    Resources: {
                        shape: "Sh",
                        locationName: "resources"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceSetType", "ResourceSetName", "Resources" ]
            },
            output: {
                type: "structure",
                members: {
                    ResourceSetArn: {
                        locationName: "resourceSetArn"
                    },
                    ResourceSetName: {
                        locationName: "resourceSetName"
                    },
                    ResourceSetType: {
                        locationName: "resourceSetType"
                    },
                    Resources: {
                        shape: "Sh",
                        locationName: "resources"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        DeleteCell: {
            http: {
                method: "DELETE",
                requestUri: "/cells/{cellName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    CellName: {
                        location: "uri",
                        locationName: "cellName"
                    }
                },
                required: [ "CellName" ]
            }
        },
        DeleteCrossAccountAuthorization: {
            http: {
                method: "DELETE",
                requestUri: "/crossaccountauthorizations/{crossAccountAuthorization}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CrossAccountAuthorization: {
                        location: "uri",
                        locationName: "crossAccountAuthorization"
                    }
                },
                required: [ "CrossAccountAuthorization" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteReadinessCheck: {
            http: {
                method: "DELETE",
                requestUri: "/readinesschecks/{readinessCheckName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ReadinessCheckName: {
                        location: "uri",
                        locationName: "readinessCheckName"
                    }
                },
                required: [ "ReadinessCheckName" ]
            }
        },
        DeleteRecoveryGroup: {
            http: {
                method: "DELETE",
                requestUri: "/recoverygroups/{recoveryGroupName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    RecoveryGroupName: {
                        location: "uri",
                        locationName: "recoveryGroupName"
                    }
                },
                required: [ "RecoveryGroupName" ]
            }
        },
        DeleteResourceSet: {
            http: {
                method: "DELETE",
                requestUri: "/resourcesets/{resourceSetName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceSetName: {
                        location: "uri",
                        locationName: "resourceSetName"
                    }
                },
                required: [ "ResourceSetName" ]
            }
        },
        GetArchitectureRecommendations: {
            http: {
                method: "GET",
                requestUri: "/recoverygroups/{recoveryGroupName}/architectureRecommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RecoveryGroupName: {
                        location: "uri",
                        locationName: "recoveryGroupName"
                    }
                },
                required: [ "RecoveryGroupName" ]
            },
            output: {
                type: "structure",
                members: {
                    LastAuditTimestamp: {
                        locationName: "lastAuditTimestamp",
                        type: "timestamp",
                        timestampFormat: "iso8601"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Recommendations: {
                        locationName: "recommendations",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RecommendationText: {
                                    locationName: "recommendationText"
                                }
                            },
                            required: [ "RecommendationText" ]
                        }
                    }
                }
            }
        },
        GetCell: {
            http: {
                method: "GET",
                requestUri: "/cells/{cellName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CellName: {
                        location: "uri",
                        locationName: "cellName"
                    }
                },
                required: [ "CellName" ]
            },
            output: {
                type: "structure",
                members: {
                    CellArn: {
                        locationName: "cellArn"
                    },
                    CellName: {
                        locationName: "cellName"
                    },
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    ParentReadinessScopes: {
                        shape: "S3",
                        locationName: "parentReadinessScopes"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        GetCellReadinessSummary: {
            http: {
                method: "GET",
                requestUri: "/cellreadiness/{cellName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CellName: {
                        location: "uri",
                        locationName: "cellName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "CellName" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Readiness: {
                        locationName: "readiness"
                    },
                    ReadinessChecks: {
                        shape: "S15",
                        locationName: "readinessChecks"
                    }
                }
            }
        },
        GetReadinessCheck: {
            http: {
                method: "GET",
                requestUri: "/readinesschecks/{readinessCheckName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ReadinessCheckName: {
                        location: "uri",
                        locationName: "readinessCheckName"
                    }
                },
                required: [ "ReadinessCheckName" ]
            },
            output: {
                type: "structure",
                members: {
                    ReadinessCheckArn: {
                        locationName: "readinessCheckArn"
                    },
                    ReadinessCheckName: {
                        locationName: "readinessCheckName"
                    },
                    ResourceSet: {
                        locationName: "resourceSet"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        GetReadinessCheckResourceStatus: {
            http: {
                method: "GET",
                requestUri: "/readinesschecks/{readinessCheckName}/resource/{resourceIdentifier}/status",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ReadinessCheckName: {
                        location: "uri",
                        locationName: "readinessCheckName"
                    },
                    ResourceIdentifier: {
                        location: "uri",
                        locationName: "resourceIdentifier"
                    }
                },
                required: [ "ReadinessCheckName", "ResourceIdentifier" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Readiness: {
                        locationName: "readiness"
                    },
                    Rules: {
                        locationName: "rules",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LastCheckedTimestamp: {
                                    shape: "S1d",
                                    locationName: "lastCheckedTimestamp"
                                },
                                Messages: {
                                    shape: "S1e",
                                    locationName: "messages"
                                },
                                Readiness: {
                                    locationName: "readiness"
                                },
                                RuleId: {
                                    locationName: "ruleId"
                                }
                            },
                            required: [ "Messages", "Readiness", "RuleId", "LastCheckedTimestamp" ]
                        }
                    }
                }
            }
        },
        GetReadinessCheckStatus: {
            http: {
                method: "GET",
                requestUri: "/readinesschecks/{readinessCheckName}/status",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ReadinessCheckName: {
                        location: "uri",
                        locationName: "readinessCheckName"
                    }
                },
                required: [ "ReadinessCheckName" ]
            },
            output: {
                type: "structure",
                members: {
                    Messages: {
                        shape: "S1e",
                        locationName: "messages"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Readiness: {
                        locationName: "readiness"
                    },
                    Resources: {
                        locationName: "resources",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ComponentId: {
                                    locationName: "componentId"
                                },
                                LastCheckedTimestamp: {
                                    shape: "S1d",
                                    locationName: "lastCheckedTimestamp"
                                },
                                Readiness: {
                                    locationName: "readiness"
                                },
                                ResourceArn: {
                                    locationName: "resourceArn"
                                }
                            },
                            required: [ "Readiness", "LastCheckedTimestamp" ]
                        }
                    }
                }
            }
        },
        GetRecoveryGroup: {
            http: {
                method: "GET",
                requestUri: "/recoverygroups/{recoveryGroupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RecoveryGroupName: {
                        location: "uri",
                        locationName: "recoveryGroupName"
                    }
                },
                required: [ "RecoveryGroupName" ]
            },
            output: {
                type: "structure",
                members: {
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    RecoveryGroupArn: {
                        locationName: "recoveryGroupArn"
                    },
                    RecoveryGroupName: {
                        locationName: "recoveryGroupName"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        GetRecoveryGroupReadinessSummary: {
            http: {
                method: "GET",
                requestUri: "/recoverygroupreadiness/{recoveryGroupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RecoveryGroupName: {
                        location: "uri",
                        locationName: "recoveryGroupName"
                    }
                },
                required: [ "RecoveryGroupName" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Readiness: {
                        locationName: "readiness"
                    },
                    ReadinessChecks: {
                        shape: "S15",
                        locationName: "readinessChecks"
                    }
                }
            }
        },
        GetResourceSet: {
            http: {
                method: "GET",
                requestUri: "/resourcesets/{resourceSetName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceSetName: {
                        location: "uri",
                        locationName: "resourceSetName"
                    }
                },
                required: [ "ResourceSetName" ]
            },
            output: {
                type: "structure",
                members: {
                    ResourceSetArn: {
                        locationName: "resourceSetArn"
                    },
                    ResourceSetName: {
                        locationName: "resourceSetName"
                    },
                    ResourceSetType: {
                        locationName: "resourceSetType"
                    },
                    Resources: {
                        shape: "Sh",
                        locationName: "resources"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        ListCells: {
            http: {
                method: "GET",
                requestUri: "/cells",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Cells: {
                        locationName: "cells",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CellArn: {
                                    locationName: "cellArn"
                                },
                                CellName: {
                                    locationName: "cellName"
                                },
                                Cells: {
                                    shape: "S3",
                                    locationName: "cells"
                                },
                                ParentReadinessScopes: {
                                    shape: "S3",
                                    locationName: "parentReadinessScopes"
                                },
                                Tags: {
                                    shape: "S4",
                                    locationName: "tags"
                                }
                            },
                            required: [ "ParentReadinessScopes", "CellArn", "CellName", "Cells" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListCrossAccountAuthorizations: {
            http: {
                method: "GET",
                requestUri: "/crossaccountauthorizations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CrossAccountAuthorizations: {
                        locationName: "crossAccountAuthorizations",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListReadinessChecks: {
            http: {
                method: "GET",
                requestUri: "/readinesschecks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    ReadinessChecks: {
                        locationName: "readinessChecks",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReadinessCheckArn: {
                                    locationName: "readinessCheckArn"
                                },
                                ReadinessCheckName: {
                                    locationName: "readinessCheckName"
                                },
                                ResourceSet: {
                                    locationName: "resourceSet"
                                },
                                Tags: {
                                    shape: "S4",
                                    locationName: "tags"
                                }
                            },
                            required: [ "ReadinessCheckArn", "ResourceSet" ]
                        }
                    }
                }
            }
        },
        ListRecoveryGroups: {
            http: {
                method: "GET",
                requestUri: "/recoverygroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    RecoveryGroups: {
                        locationName: "recoveryGroups",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Cells: {
                                    shape: "S3",
                                    locationName: "cells"
                                },
                                RecoveryGroupArn: {
                                    locationName: "recoveryGroupArn"
                                },
                                RecoveryGroupName: {
                                    locationName: "recoveryGroupName"
                                },
                                Tags: {
                                    shape: "S4",
                                    locationName: "tags"
                                }
                            },
                            required: [ "RecoveryGroupArn", "RecoveryGroupName", "Cells" ]
                        }
                    }
                }
            }
        },
        ListResourceSets: {
            http: {
                method: "GET",
                requestUri: "/resourcesets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    ResourceSets: {
                        locationName: "resourceSets",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceSetArn: {
                                    locationName: "resourceSetArn"
                                },
                                ResourceSetName: {
                                    locationName: "resourceSetName"
                                },
                                ResourceSetType: {
                                    locationName: "resourceSetType"
                                },
                                Resources: {
                                    shape: "Sh",
                                    locationName: "resources"
                                },
                                Tags: {
                                    shape: "S4",
                                    locationName: "tags"
                                }
                            },
                            required: [ "ResourceSetType", "ResourceSetName", "ResourceSetArn", "Resources" ]
                        }
                    }
                }
            }
        },
        ListRules: {
            http: {
                method: "GET",
                requestUri: "/rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Rules: {
                        locationName: "rules",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceType: {
                                    locationName: "resourceType"
                                },
                                RuleDescription: {
                                    locationName: "ruleDescription"
                                },
                                RuleId: {
                                    locationName: "ruleId"
                                }
                            },
                            required: [ "RuleDescription", "RuleId", "ResourceType" ]
                        }
                    }
                }
            }
        },
        ListTagsForResources: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn", "Tags" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        shape: "S3",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateCell: {
            http: {
                method: "PUT",
                requestUri: "/cells/{cellName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CellName: {
                        location: "uri",
                        locationName: "cellName"
                    },
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    }
                },
                required: [ "CellName", "Cells" ]
            },
            output: {
                type: "structure",
                members: {
                    CellArn: {
                        locationName: "cellArn"
                    },
                    CellName: {
                        locationName: "cellName"
                    },
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    ParentReadinessScopes: {
                        shape: "S3",
                        locationName: "parentReadinessScopes"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateReadinessCheck: {
            http: {
                method: "PUT",
                requestUri: "/readinesschecks/{readinessCheckName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ReadinessCheckName: {
                        location: "uri",
                        locationName: "readinessCheckName"
                    },
                    ResourceSetName: {
                        locationName: "resourceSetName"
                    }
                },
                required: [ "ReadinessCheckName", "ResourceSetName" ]
            },
            output: {
                type: "structure",
                members: {
                    ReadinessCheckArn: {
                        locationName: "readinessCheckArn"
                    },
                    ReadinessCheckName: {
                        locationName: "readinessCheckName"
                    },
                    ResourceSet: {
                        locationName: "resourceSet"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateRecoveryGroup: {
            http: {
                method: "PUT",
                requestUri: "/recoverygroups/{recoveryGroupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    RecoveryGroupName: {
                        location: "uri",
                        locationName: "recoveryGroupName"
                    }
                },
                required: [ "RecoveryGroupName", "Cells" ]
            },
            output: {
                type: "structure",
                members: {
                    Cells: {
                        shape: "S3",
                        locationName: "cells"
                    },
                    RecoveryGroupArn: {
                        locationName: "recoveryGroupArn"
                    },
                    RecoveryGroupName: {
                        locationName: "recoveryGroupName"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateResourceSet: {
            http: {
                method: "PUT",
                requestUri: "/resourcesets/{resourceSetName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceSetName: {
                        location: "uri",
                        locationName: "resourceSetName"
                    },
                    ResourceSetType: {
                        locationName: "resourceSetType"
                    },
                    Resources: {
                        shape: "Sh",
                        locationName: "resources"
                    }
                },
                required: [ "ResourceSetName", "ResourceSetType", "Resources" ]
            },
            output: {
                type: "structure",
                members: {
                    ResourceSetArn: {
                        locationName: "resourceSetArn"
                    },
                    ResourceSetName: {
                        locationName: "resourceSetName"
                    },
                    ResourceSetType: {
                        locationName: "resourceSetType"
                    },
                    Resources: {
                        shape: "Sh",
                        locationName: "resources"
                    },
                    Tags: {
                        shape: "S4",
                        locationName: "tags"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S4: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ComponentId: {
                        locationName: "componentId"
                    },
                    DnsTargetResource: {
                        locationName: "dnsTargetResource",
                        type: "structure",
                        members: {
                            DomainName: {
                                locationName: "domainName"
                            },
                            HostedZoneArn: {
                                locationName: "hostedZoneArn"
                            },
                            RecordSetId: {
                                locationName: "recordSetId"
                            },
                            RecordType: {
                                locationName: "recordType"
                            },
                            TargetResource: {
                                locationName: "targetResource",
                                type: "structure",
                                members: {
                                    NLBResource: {
                                        locationName: "nLBResource",
                                        type: "structure",
                                        members: {
                                            Arn: {
                                                locationName: "arn"
                                            }
                                        }
                                    },
                                    R53Resource: {
                                        locationName: "r53Resource",
                                        type: "structure",
                                        members: {
                                            DomainName: {
                                                locationName: "domainName"
                                            },
                                            RecordSetId: {
                                                locationName: "recordSetId"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ReadinessScopes: {
                        shape: "S3",
                        locationName: "readinessScopes"
                    },
                    ResourceArn: {
                        locationName: "resourceArn"
                    }
                }
            }
        },
        S15: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Readiness: {
                        locationName: "readiness"
                    },
                    ReadinessCheckName: {
                        locationName: "readinessCheckName"
                    }
                }
            }
        },
        S1d: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    MessageText: {
                        locationName: "messageText"
                    }
                }
            }
        }
    },
    paginators: {
        ListReadinessChecks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ReadinessChecks"
        },
        ListResourceSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResourceSets"
        },
        ListCells: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Cells"
        },
        ListRecoveryGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RecoveryGroups"
        },
        ListRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Rules"
        },
        ListCrossAccountAuthorizations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CrossAccountAuthorizations"
        },
        GetCellReadinessSummary: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ReadinessChecks",
            non_aggregate_keys: [ "Readiness" ]
        },
        GetRecoveryGroupReadinessSummary: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ReadinessChecks",
            non_aggregate_keys: [ "Readiness" ]
        },
        GetReadinessCheckStatus: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Resources",
            non_aggregate_keys: [ "Readiness", "Messages" ]
        },
        GetReadinessCheckResourceStatus: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Rules",
            non_aggregate_keys: [ "Readiness" ]
        }
    }
};

AWS.apiLoader.services["chimesdkidentity"] = {};

AWS.ChimeSDKIdentity = AWS.Service.defineService("chimesdkidentity", [ "2021-04-20" ]);

AWS.apiLoader.services["chimesdkidentity"]["2021-04-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-04-20",
        endpointPrefix: "identity-chime",
        protocol: "rest-json",
        serviceFullName: "Amazon Chime SDK Identity",
        serviceId: "Chime SDK Identity",
        signatureVersion: "v4",
        signingName: "chime",
        uid: "chime-sdk-identity-2021-04-20"
    },
    operations: {
        CreateAppInstance: {
            http: {
                requestUri: "/app-instances",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "ClientRequestToken" ],
                members: {
                    Name: {
                        shape: "S2"
                    },
                    Metadata: {
                        shape: "S3"
                    },
                    ClientRequestToken: {
                        shape: "S4",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {}
                }
            }
        },
        CreateAppInstanceAdmin: {
            http: {
                requestUri: "/app-instances/{appInstanceArn}/admins",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceAdminArn", "AppInstanceArn" ],
                members: {
                    AppInstanceAdminArn: {},
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceAdmin: {
                        shape: "Sd"
                    },
                    AppInstanceArn: {}
                }
            }
        },
        CreateAppInstanceUser: {
            http: {
                requestUri: "/app-instance-users",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "AppInstanceUserId", "Name", "ClientRequestToken" ],
                members: {
                    AppInstanceArn: {},
                    AppInstanceUserId: {
                        type: "string",
                        sensitive: true
                    },
                    Name: {
                        shape: "Sh"
                    },
                    Metadata: {
                        shape: "S3"
                    },
                    ClientRequestToken: {
                        shape: "S4",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {}
                }
            }
        },
        DeleteAppInstance: {
            http: {
                method: "DELETE",
                requestUri: "/app-instances/{appInstanceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            }
        },
        DeleteAppInstanceAdmin: {
            http: {
                method: "DELETE",
                requestUri: "/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceAdminArn", "AppInstanceArn" ],
                members: {
                    AppInstanceAdminArn: {
                        location: "uri",
                        locationName: "appInstanceAdminArn"
                    },
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            }
        },
        DeleteAppInstanceUser: {
            http: {
                method: "DELETE",
                requestUri: "/app-instance-users/{appInstanceUserArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    }
                }
            }
        },
        DeregisterAppInstanceUserEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/app-instance-users/{appInstanceUserArn}/endpoints/{endpointId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn", "EndpointId" ],
                members: {
                    AppInstanceUserArn: {
                        shape: "Sn",
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    EndpointId: {
                        shape: "So",
                        location: "uri",
                        locationName: "endpointId"
                    }
                }
            }
        },
        DescribeAppInstance: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}"
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstance: {
                        type: "structure",
                        members: {
                            AppInstanceArn: {},
                            Name: {
                                shape: "S2"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            Metadata: {
                                shape: "S3"
                            }
                        }
                    }
                }
            }
        },
        DescribeAppInstanceAdmin: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceAdminArn", "AppInstanceArn" ],
                members: {
                    AppInstanceAdminArn: {
                        location: "uri",
                        locationName: "appInstanceAdminArn"
                    },
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceAdmin: {
                        type: "structure",
                        members: {
                            Admin: {
                                shape: "Sd"
                            },
                            AppInstanceArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/app-instance-users/{appInstanceUserArn}"
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUser: {
                        type: "structure",
                        members: {
                            AppInstanceUserArn: {},
                            Name: {
                                shape: "Sh"
                            },
                            Metadata: {
                                shape: "S3"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeAppInstanceUserEndpoint: {
            http: {
                method: "GET",
                requestUri: "/app-instance-users/{appInstanceUserArn}/endpoints/{endpointId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn", "EndpointId" ],
                members: {
                    AppInstanceUserArn: {
                        shape: "S10",
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    EndpointId: {
                        shape: "So",
                        location: "uri",
                        locationName: "endpointId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserEndpoint: {
                        type: "structure",
                        members: {
                            AppInstanceUserArn: {
                                shape: "Sn"
                            },
                            EndpointId: {
                                shape: "So"
                            },
                            Name: {
                                shape: "S10"
                            },
                            Type: {},
                            ResourceArn: {
                                shape: "Sn"
                            },
                            EndpointAttributes: {
                                shape: "S14"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            AllowMessages: {},
                            EndpointState: {
                                shape: "S17"
                            }
                        }
                    }
                }
            }
        },
        GetAppInstanceRetentionSettings: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/retention-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceRetentionSettings: {
                        shape: "S1c"
                    },
                    InitiateDeletionTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        ListAppInstanceAdmins: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/admins",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S1h",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {},
                    AppInstanceAdmins: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Admin: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S1h"
                    }
                }
            }
        },
        ListAppInstanceUserEndpoints: {
            http: {
                method: "GET",
                requestUri: "/app-instance-users/{appInstanceUserArn}/endpoints",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn" ],
                members: {
                    AppInstanceUserArn: {
                        shape: "Sn",
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S1h",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserEndpoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppInstanceUserArn: {
                                    shape: "Sn"
                                },
                                EndpointId: {
                                    shape: "So"
                                },
                                Name: {
                                    shape: "S10"
                                },
                                Type: {},
                                AllowMessages: {},
                                EndpointState: {
                                    shape: "S17"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S1h"
                    }
                }
            }
        },
        ListAppInstanceUsers: {
            http: {
                method: "GET",
                requestUri: "/app-instance-users"
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "querystring",
                        locationName: "app-instance-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S1h",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {},
                    AppInstanceUsers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppInstanceUserArn: {},
                                Name: {
                                    shape: "Sh"
                                },
                                Metadata: {
                                    shape: "S3"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S1h"
                    }
                }
            }
        },
        ListAppInstances: {
            http: {
                method: "GET",
                requestUri: "/app-instances"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S1h",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppInstanceArn: {},
                                Name: {
                                    shape: "S2"
                                },
                                Metadata: {
                                    shape: "S3"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S1h"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S5"
                    }
                }
            }
        },
        PutAppInstanceRetentionSettings: {
            http: {
                method: "PUT",
                requestUri: "/app-instances/{appInstanceArn}/retention-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "AppInstanceRetentionSettings" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    AppInstanceRetentionSettings: {
                        shape: "S1c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceRetentionSettings: {
                        shape: "S1c"
                    },
                    InitiateDeletionTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        RegisterAppInstanceUserEndpoint: {
            http: {
                requestUri: "/app-instance-users/{appInstanceUserArn}/endpoints",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn", "Type", "ResourceArn", "EndpointAttributes", "ClientRequestToken" ],
                members: {
                    AppInstanceUserArn: {
                        shape: "Sn",
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    Name: {
                        shape: "S10"
                    },
                    Type: {},
                    ResourceArn: {
                        shape: "Sn"
                    },
                    EndpointAttributes: {
                        shape: "S14"
                    },
                    ClientRequestToken: {
                        shape: "S4",
                        idempotencyToken: true
                    },
                    AllowMessages: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {
                        shape: "Sn"
                    },
                    EndpointId: {
                        shape: "So"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags?operation=tag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                requestUri: "/tags?operation=untag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    }
                }
            }
        },
        UpdateAppInstance: {
            http: {
                method: "PUT",
                requestUri: "/app-instances/{appInstanceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "Name", "Metadata" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    Name: {
                        shape: "S2"
                    },
                    Metadata: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {}
                }
            }
        },
        UpdateAppInstanceUser: {
            http: {
                method: "PUT",
                requestUri: "/app-instance-users/{appInstanceUserArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn", "Name", "Metadata" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    Name: {
                        shape: "Sh"
                    },
                    Metadata: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {}
                }
            }
        },
        UpdateAppInstanceUserEndpoint: {
            http: {
                method: "PUT",
                requestUri: "/app-instance-users/{appInstanceUserArn}/endpoints/{endpointId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn", "EndpointId" ],
                members: {
                    AppInstanceUserArn: {
                        shape: "Sn",
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    EndpointId: {
                        shape: "So",
                        location: "uri",
                        locationName: "endpointId"
                    },
                    Name: {
                        shape: "S10"
                    },
                    AllowMessages: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {
                        shape: "Sn"
                    },
                    EndpointId: {
                        shape: "So"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "string",
            sensitive: true
        },
        S3: {
            type: "string",
            sensitive: true
        },
        S4: {
            type: "string",
            sensitive: true
        },
        S5: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "S7"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S7: {
            type: "string",
            sensitive: true
        },
        Sd: {
            type: "structure",
            members: {
                Arn: {},
                Name: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Sh: {
            type: "string",
            sensitive: true
        },
        Sn: {
            type: "string",
            sensitive: true
        },
        So: {
            type: "string",
            sensitive: true
        },
        S10: {
            type: "string",
            sensitive: true
        },
        S14: {
            type: "structure",
            required: [ "DeviceToken" ],
            members: {
                DeviceToken: {
                    shape: "S15"
                },
                VoipDeviceToken: {
                    shape: "S15"
                }
            }
        },
        S15: {
            type: "string",
            sensitive: true
        },
        S17: {
            type: "structure",
            required: [ "Status" ],
            members: {
                Status: {},
                StatusReason: {}
            }
        },
        S1c: {
            type: "structure",
            members: {
                ChannelRetentionSettings: {
                    type: "structure",
                    members: {
                        RetentionDays: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S1h: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListAppInstanceAdmins: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAppInstanceUserEndpoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAppInstanceUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAppInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["chimesdkmessaging"] = {};

AWS.ChimeSDKMessaging = AWS.Service.defineService("chimesdkmessaging", [ "2021-05-15" ]);

AWS.apiLoader.services["chimesdkmessaging"]["2021-05-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-05-15",
        endpointPrefix: "messaging-chime",
        protocol: "rest-json",
        serviceFullName: "Amazon Chime SDK Messaging",
        serviceId: "Chime SDK Messaging",
        signatureVersion: "v4",
        signingName: "chime",
        uid: "chime-sdk-messaging-2021-05-15"
    },
    operations: {
        AssociateChannelFlow: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}/channel-flow",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelFlowArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelFlowArn: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            }
        },
        BatchCreateChannelMembership: {
            http: {
                requestUri: "/channels/{channelArn}/memberships?operation=batch-create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArns", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Type: {},
                    MemberArns: {
                        type: "list",
                        member: {}
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BatchChannelMemberships: {
                        type: "structure",
                        members: {
                            InvitedBy: {
                                shape: "S8"
                            },
                            Type: {},
                            Members: {
                                type: "list",
                                member: {
                                    shape: "S8"
                                }
                            },
                            ChannelArn: {}
                        }
                    },
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MemberArn: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        ChannelFlowCallback: {
            http: {
                requestUri: "/channels/{channelArn}?operation=channel-flow-callback",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CallbackId", "ChannelArn", "ChannelMessage" ],
                members: {
                    CallbackId: {
                        idempotencyToken: true
                    },
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    DeleteResource: {
                        type: "boolean"
                    },
                    ChannelMessage: {
                        type: "structure",
                        required: [ "MessageId" ],
                        members: {
                            MessageId: {},
                            Content: {
                                shape: "Sk"
                            },
                            Metadata: {
                                shape: "Sl"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    CallbackId: {}
                }
            }
        },
        CreateChannel: {
            http: {
                requestUri: "/channels",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "Name", "ClientRequestToken", "ChimeBearer" ],
                members: {
                    AppInstanceArn: {},
                    Name: {
                        shape: "So"
                    },
                    Mode: {},
                    Privacy: {},
                    Metadata: {
                        shape: "Sl"
                    },
                    ClientRequestToken: {
                        shape: "Sr",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Ss"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {}
                }
            }
        },
        CreateChannelBan: {
            http: {
                requestUri: "/channels/{channelArn}/bans",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Member: {
                        shape: "S8"
                    }
                }
            }
        },
        CreateChannelFlow: {
            http: {
                requestUri: "/channel-flows",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "Processors", "Name", "ClientRequestToken" ],
                members: {
                    AppInstanceArn: {},
                    Processors: {
                        shape: "S10"
                    },
                    Name: {
                        shape: "So"
                    },
                    Tags: {
                        shape: "Ss"
                    },
                    ClientRequestToken: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelFlowArn: {}
                }
            }
        },
        CreateChannelMembership: {
            http: {
                requestUri: "/channels/{channelArn}/memberships",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "Type", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {},
                    Type: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Member: {
                        shape: "S8"
                    }
                }
            }
        },
        CreateChannelModerator: {
            http: {
                requestUri: "/channels/{channelArn}/moderators",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelModeratorArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelModeratorArn: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    ChannelModerator: {
                        shape: "S8"
                    }
                }
            }
        },
        DeleteChannel: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            }
        },
        DeleteChannelBan: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/bans/{memberArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            }
        },
        DeleteChannelFlow: {
            http: {
                method: "DELETE",
                requestUri: "/channel-flows/{channelFlowArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelFlowArn" ],
                members: {
                    ChannelFlowArn: {
                        location: "uri",
                        locationName: "channelFlowArn"
                    }
                }
            }
        },
        DeleteChannelMembership: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/memberships/{memberArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            }
        },
        DeleteChannelMessage: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/messages/{messageId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            }
        },
        DeleteChannelModerator: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/moderators/{channelModeratorArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelModeratorArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelModeratorArn: {
                        location: "uri",
                        locationName: "channelModeratorArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            }
        },
        DescribeChannel: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        type: "structure",
                        members: {
                            Name: {
                                shape: "So"
                            },
                            ChannelArn: {},
                            Mode: {},
                            Privacy: {},
                            Metadata: {
                                shape: "Sl"
                            },
                            CreatedBy: {
                                shape: "S8"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastMessageTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            ChannelFlowArn: {}
                        }
                    }
                }
            }
        },
        DescribeChannelBan: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/bans/{memberArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelBan: {
                        type: "structure",
                        members: {
                            Member: {
                                shape: "S8"
                            },
                            ChannelArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            CreatedBy: {
                                shape: "S8"
                            }
                        }
                    }
                }
            }
        },
        DescribeChannelFlow: {
            http: {
                method: "GET",
                requestUri: "/channel-flows/{channelFlowArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelFlowArn" ],
                members: {
                    ChannelFlowArn: {
                        location: "uri",
                        locationName: "channelFlowArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelFlow: {
                        type: "structure",
                        members: {
                            ChannelFlowArn: {},
                            Processors: {
                                shape: "S10"
                            },
                            Name: {
                                shape: "So"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeChannelMembership: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/memberships/{memberArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMembership: {
                        type: "structure",
                        members: {
                            InvitedBy: {
                                shape: "S8"
                            },
                            Type: {},
                            Member: {
                                shape: "S8"
                            },
                            ChannelArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeChannelMembershipForAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}?scope=app-instance-user-membership",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "AppInstanceUserArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMembership: {
                        shape: "S1y"
                    }
                }
            }
        },
        DescribeChannelModeratedByAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}?scope=app-instance-user-moderated-channel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "AppInstanceUserArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        shape: "S23"
                    }
                }
            }
        },
        DescribeChannelModerator: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/moderators/{channelModeratorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelModeratorArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelModeratorArn: {
                        location: "uri",
                        locationName: "channelModeratorArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelModerator: {
                        type: "structure",
                        members: {
                            Moderator: {
                                shape: "S8"
                            },
                            ChannelArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            CreatedBy: {
                                shape: "S8"
                            }
                        }
                    }
                }
            }
        },
        DisassociateChannelFlow: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/channel-flow/{channelFlowArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelFlowArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelFlowArn: {
                        location: "uri",
                        locationName: "channelFlowArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            }
        },
        GetChannelMembershipPreferences: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/memberships/{memberArn}/preferences",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Member: {
                        shape: "S8"
                    },
                    Preferences: {
                        shape: "S2a"
                    }
                }
            }
        },
        GetChannelMessage: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/messages/{messageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMessage: {
                        type: "structure",
                        members: {
                            ChannelArn: {},
                            MessageId: {},
                            Content: {
                                shape: "S2h"
                            },
                            Metadata: {
                                shape: "Sl"
                            },
                            Type: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastEditedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            Sender: {
                                shape: "S8"
                            },
                            Redacted: {
                                type: "boolean"
                            },
                            Persistence: {},
                            Status: {
                                shape: "S2k"
                            },
                            MessageAttributes: {
                                shape: "S2n"
                            }
                        }
                    }
                }
            }
        },
        GetChannelMessageStatus: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/messages/{messageId}?scope=message-status",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        shape: "S2k"
                    }
                }
            }
        },
        GetMessagingSessionEndpoint: {
            http: {
                method: "GET",
                requestUri: "/endpoints/messaging-session",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Endpoint: {
                        type: "structure",
                        members: {
                            Url: {}
                        }
                    }
                }
            }
        },
        ListChannelBans: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/bans",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S30",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    NextToken: {
                        shape: "S30"
                    },
                    ChannelBans: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Member: {
                                    shape: "S8"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListChannelFlows: {
            http: {
                method: "GET",
                requestUri: "/channel-flows",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "querystring",
                        locationName: "app-instance-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S30",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelFlows: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ChannelFlowArn: {},
                                Name: {
                                    shape: "So"
                                },
                                Processors: {
                                    shape: "S10"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S30"
                    }
                }
            }
        },
        ListChannelMemberships: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/memberships",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S30",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    ChannelMemberships: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Member: {
                                    shape: "S8"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S30"
                    }
                }
            }
        },
        ListChannelMembershipsForAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels?scope=app-instance-user-memberships",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChimeBearer" ],
                members: {
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S30",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMemberships: {
                        type: "list",
                        member: {
                            shape: "S1y"
                        }
                    },
                    NextToken: {
                        shape: "S30"
                    }
                }
            }
        },
        ListChannelMessages: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/messages",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    SortOrder: {
                        location: "querystring",
                        locationName: "sort-order"
                    },
                    NotBefore: {
                        location: "querystring",
                        locationName: "not-before",
                        type: "timestamp"
                    },
                    NotAfter: {
                        location: "querystring",
                        locationName: "not-after",
                        type: "timestamp"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S30",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    NextToken: {
                        shape: "S30"
                    },
                    ChannelMessages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MessageId: {},
                                Content: {
                                    shape: "S2h"
                                },
                                Metadata: {
                                    shape: "Sl"
                                },
                                Type: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                },
                                LastUpdatedTimestamp: {
                                    type: "timestamp"
                                },
                                LastEditedTimestamp: {
                                    type: "timestamp"
                                },
                                Sender: {
                                    shape: "S8"
                                },
                                Redacted: {
                                    type: "boolean"
                                },
                                Status: {
                                    shape: "S2k"
                                },
                                MessageAttributes: {
                                    shape: "S2n"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListChannelModerators: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/moderators",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S30",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    NextToken: {
                        shape: "S30"
                    },
                    ChannelModerators: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Moderator: {
                                    shape: "S8"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListChannels: {
            http: {
                method: "GET",
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "ChimeBearer" ],
                members: {
                    AppInstanceArn: {
                        location: "querystring",
                        locationName: "app-instance-arn"
                    },
                    Privacy: {
                        location: "querystring",
                        locationName: "privacy"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S30",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        type: "list",
                        member: {
                            shape: "S1z"
                        }
                    },
                    NextToken: {
                        shape: "S30"
                    }
                }
            }
        },
        ListChannelsAssociatedWithChannelFlow: {
            http: {
                method: "GET",
                requestUri: "/channels?scope=channel-flow-associations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelFlowArn" ],
                members: {
                    ChannelFlowArn: {
                        location: "querystring",
                        locationName: "channel-flow-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S30",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    shape: "So"
                                },
                                ChannelArn: {},
                                Mode: {},
                                Privacy: {},
                                Metadata: {
                                    shape: "Sl"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "S30"
                    }
                }
            }
        },
        ListChannelsModeratedByAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels?scope=app-instance-user-moderated-channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChimeBearer" ],
                members: {
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "S30",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        type: "list",
                        member: {
                            shape: "S23"
                        }
                    },
                    NextToken: {
                        shape: "S30"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Ss"
                    }
                }
            }
        },
        PutChannelMembershipPreferences: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}/memberships/{memberArn}/preferences",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "ChimeBearer", "Preferences" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    Preferences: {
                        shape: "S2a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Member: {
                        shape: "S8"
                    },
                    Preferences: {
                        shape: "S2a"
                    }
                }
            }
        },
        RedactChannelMessage: {
            http: {
                requestUri: "/channels/{channelArn}/messages/{messageId}?operation=redact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    MessageId: {}
                }
            }
        },
        SendChannelMessage: {
            http: {
                requestUri: "/channels/{channelArn}/messages",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "Content", "Type", "Persistence", "ClientRequestToken", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Content: {
                        shape: "Sk"
                    },
                    Type: {},
                    Persistence: {},
                    Metadata: {
                        shape: "Sl"
                    },
                    ClientRequestToken: {
                        shape: "Sr",
                        idempotencyToken: true
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    },
                    PushNotification: {
                        type: "structure",
                        required: [ "Title", "Body", "Type" ],
                        members: {
                            Title: {
                                type: "string",
                                sensitive: true
                            },
                            Body: {
                                type: "string",
                                sensitive: true
                            },
                            Type: {}
                        }
                    },
                    MessageAttributes: {
                        shape: "S2n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    MessageId: {},
                    Status: {
                        shape: "S2k"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags?operation=tag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Ss"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                requestUri: "/tags?operation=untag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    }
                }
            }
        },
        UpdateChannel: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "Name", "Mode", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Name: {
                        shape: "So"
                    },
                    Mode: {},
                    Metadata: {
                        shape: "Sl"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {}
                }
            }
        },
        UpdateChannelFlow: {
            http: {
                method: "PUT",
                requestUri: "/channel-flows/{channelFlowArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelFlowArn", "Processors", "Name" ],
                members: {
                    ChannelFlowArn: {
                        location: "uri",
                        locationName: "channelFlowArn"
                    },
                    Processors: {
                        shape: "S10"
                    },
                    Name: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelFlowArn: {}
                }
            }
        },
        UpdateChannelMessage: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}/messages/{messageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    Content: {
                        shape: "S2h"
                    },
                    Metadata: {
                        shape: "Sl"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    MessageId: {},
                    Status: {
                        shape: "S2k"
                    }
                }
            }
        },
        UpdateChannelReadMarker: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}/readMarker",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChimeBearer" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {}
                }
            }
        }
    },
    shapes: {
        S8: {
            type: "structure",
            members: {
                Arn: {},
                Name: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Sk: {
            type: "string",
            sensitive: true
        },
        Sl: {
            type: "string",
            sensitive: true
        },
        So: {
            type: "string",
            sensitive: true
        },
        Sr: {
            type: "string",
            sensitive: true
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "Su"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        Su: {
            type: "string",
            sensitive: true
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Configuration", "ExecutionOrder", "FallbackAction" ],
                members: {
                    Name: {
                        shape: "So"
                    },
                    Configuration: {
                        type: "structure",
                        required: [ "Lambda" ],
                        members: {
                            Lambda: {
                                type: "structure",
                                required: [ "ResourceArn", "InvocationType" ],
                                members: {
                                    ResourceArn: {},
                                    InvocationType: {}
                                }
                            }
                        }
                    },
                    ExecutionOrder: {
                        type: "integer"
                    },
                    FallbackAction: {}
                }
            }
        },
        S1y: {
            type: "structure",
            members: {
                ChannelSummary: {
                    shape: "S1z"
                },
                AppInstanceUserMembershipSummary: {
                    type: "structure",
                    members: {
                        Type: {},
                        ReadMarkerTimestamp: {
                            type: "timestamp"
                        }
                    }
                }
            }
        },
        S1z: {
            type: "structure",
            members: {
                Name: {
                    shape: "So"
                },
                ChannelArn: {},
                Mode: {},
                Privacy: {},
                Metadata: {
                    shape: "Sl"
                },
                LastMessageTimestamp: {
                    type: "timestamp"
                }
            }
        },
        S23: {
            type: "structure",
            members: {
                ChannelSummary: {
                    shape: "S1z"
                }
            }
        },
        S2a: {
            type: "structure",
            members: {
                PushNotifications: {
                    type: "structure",
                    required: [ "AllowNotifications" ],
                    members: {
                        AllowNotifications: {},
                        FilterRule: {
                            type: "string",
                            sensitive: true
                        }
                    }
                }
            }
        },
        S2h: {
            type: "string",
            sensitive: true
        },
        S2k: {
            type: "structure",
            members: {
                Value: {},
                Detail: {}
            }
        },
        S2n: {
            type: "map",
            key: {
                type: "string",
                sensitive: true
            },
            value: {
                type: "structure",
                members: {
                    StringValues: {
                        type: "list",
                        member: {
                            type: "string",
                            sensitive: true
                        }
                    }
                }
            }
        },
        S30: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListChannelBans: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelFlows: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelMemberships: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelMembershipsForAppInstanceUser: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelMessages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelModerators: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelsAssociatedWithChannelFlow: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelsModeratedByAppInstanceUser: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["snowdevicemanagement"] = {};

AWS.SnowDeviceManagement = AWS.Service.defineService("snowdevicemanagement", [ "2021-08-04" ]);

AWS.apiLoader.services["snowdevicemanagement"]["2021-08-04"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-08-04",
        endpointPrefix: "snow-device-management",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Snow Device Management",
        serviceId: "Snow Device Management",
        signatureVersion: "v4",
        signingName: "snow-device-management",
        uid: "snow-device-management-2021-08-04"
    },
    operations: {
        CancelTask: {
            http: {
                requestUri: "/task/{taskId}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskId: {}
                }
            }
        },
        CreateTask: {
            http: {
                requestUri: "/task",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "command", "targets" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    command: {
                        type: "structure",
                        members: {
                            reboot: {
                                type: "structure",
                                members: {}
                            },
                            unlock: {
                                type: "structure",
                                members: {}
                            }
                        },
                        union: true
                    },
                    description: {},
                    tags: {
                        shape: "Sb"
                    },
                    targets: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskArn: {},
                    taskId: {}
                }
            }
        },
        DescribeDevice: {
            http: {
                requestUri: "/managed-device/{managedDeviceId}/describe",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "managedDeviceId" ],
                members: {
                    managedDeviceId: {
                        location: "uri",
                        locationName: "managedDeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    associatedWithJob: {},
                    deviceCapacities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                available: {
                                    type: "long"
                                },
                                name: {},
                                total: {
                                    type: "long"
                                },
                                unit: {},
                                used: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    deviceState: {},
                    deviceType: {},
                    lastReachedOutAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    managedDeviceArn: {},
                    managedDeviceId: {},
                    physicalNetworkInterfaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                defaultGateway: {},
                                ipAddress: {},
                                ipAddressAssignment: {},
                                macAddress: {},
                                netmask: {},
                                physicalConnectorType: {},
                                physicalNetworkInterfaceId: {}
                            }
                        }
                    },
                    software: {
                        type: "structure",
                        members: {
                            installState: {},
                            installedVersion: {},
                            installingVersion: {}
                        }
                    },
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        DescribeDeviceEc2Instances: {
            http: {
                requestUri: "/managed-device/{managedDeviceId}/resources/ec2/describe",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "instanceIds", "managedDeviceId" ],
                members: {
                    instanceIds: {
                        type: "list",
                        member: {}
                    },
                    managedDeviceId: {
                        location: "uri",
                        locationName: "managedDeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    instances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                instance: {
                                    type: "structure",
                                    members: {
                                        amiLaunchIndex: {
                                            type: "integer"
                                        },
                                        blockDeviceMappings: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    deviceName: {},
                                                    ebs: {
                                                        type: "structure",
                                                        members: {
                                                            attachTime: {
                                                                type: "timestamp"
                                                            },
                                                            deleteOnTermination: {
                                                                type: "boolean"
                                                            },
                                                            status: {},
                                                            volumeId: {}
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        cpuOptions: {
                                            type: "structure",
                                            members: {
                                                coreCount: {
                                                    type: "integer"
                                                },
                                                threadsPerCore: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        createdAt: {
                                            type: "timestamp"
                                        },
                                        imageId: {},
                                        instanceId: {},
                                        instanceType: {},
                                        privateIpAddress: {},
                                        publicIpAddress: {},
                                        rootDeviceName: {},
                                        securityGroups: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    groupId: {},
                                                    groupName: {}
                                                }
                                            }
                                        },
                                        state: {
                                            type: "structure",
                                            members: {
                                                code: {
                                                    type: "integer"
                                                },
                                                name: {}
                                            }
                                        },
                                        updatedAt: {
                                            type: "timestamp"
                                        }
                                    }
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeExecution: {
            http: {
                requestUri: "/task/{taskId}/execution/{managedDeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "managedDeviceId", "taskId" ],
                members: {
                    managedDeviceId: {
                        location: "uri",
                        locationName: "managedDeviceId"
                    },
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    executionId: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    managedDeviceId: {},
                    startedAt: {
                        type: "timestamp"
                    },
                    state: {},
                    taskId: {}
                }
            }
        },
        DescribeTask: {
            http: {
                requestUri: "/task/{taskId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    completedAt: {
                        type: "timestamp"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    description: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    state: {},
                    tags: {
                        shape: "Sb"
                    },
                    targets: {
                        shape: "Sc"
                    },
                    taskArn: {},
                    taskId: {}
                }
            }
        },
        ListDeviceResources: {
            http: {
                method: "GET",
                requestUri: "/managed-device/{managedDeviceId}/resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "managedDeviceId" ],
                members: {
                    managedDeviceId: {
                        location: "uri",
                        locationName: "managedDeviceId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    resources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "resourceType" ],
                            members: {
                                arn: {},
                                id: {},
                                resourceType: {}
                            }
                        }
                    }
                }
            }
        },
        ListDevices: {
            http: {
                method: "GET",
                requestUri: "/managed-devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    jobId: {
                        location: "querystring",
                        locationName: "jobId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    devices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                associatedWithJob: {},
                                managedDeviceArn: {},
                                managedDeviceId: {},
                                tags: {
                                    shape: "Sb"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListExecutions: {
            http: {
                method: "GET",
                requestUri: "/executions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    state: {
                        location: "querystring",
                        locationName: "state"
                    },
                    taskId: {
                        location: "querystring",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    executions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                executionId: {},
                                managedDeviceId: {},
                                state: {},
                                taskId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        ListTasks: {
            http: {
                method: "GET",
                requestUri: "/tasks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    state: {
                        location: "querystring",
                        locationName: "state"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    tasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "taskId" ],
                            members: {
                                state: {},
                                tags: {
                                    shape: "Sb"
                                },
                                taskArn: {},
                                taskId: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        Sb: {
            type: "map",
            key: {},
            value: {}
        },
        Sc: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListDeviceResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "resources"
        },
        ListDevices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "devices"
        },
        ListExecutions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "executions"
        },
        ListTasks: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tasks"
        }
    }
};

AWS.apiLoader.services["memorydb"] = {};

AWS.MemoryDB = AWS.Service.defineService("memorydb", [ "2021-01-01" ]);

AWS.apiLoader.services["memorydb"]["2021-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-01-01",
        endpointPrefix: "memory-db",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Amazon MemoryDB",
        serviceFullName: "Amazon MemoryDB",
        serviceId: "MemoryDB",
        signatureVersion: "v4",
        signingName: "memorydb",
        targetPrefix: "AmazonMemoryDB",
        uid: "memorydb-2021-01-01"
    },
    operations: {
        BatchUpdateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterNames" ],
                members: {
                    ClusterNames: {
                        shape: "S2"
                    },
                    ServiceUpdate: {
                        type: "structure",
                        members: {
                            ServiceUpdateNameToApply: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProcessedClusters: {
                        shape: "S6"
                    },
                    UnprocessedClusters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ClusterName: {},
                                ErrorType: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        CopySnapshot: {
            input: {
                type: "structure",
                required: [ "SourceSnapshotName", "TargetSnapshotName" ],
                members: {
                    SourceSnapshotName: {},
                    TargetSnapshotName: {},
                    TargetBucket: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S11"
                    }
                }
            }
        },
        CreateACL: {
            input: {
                type: "structure",
                required: [ "ACLName" ],
                members: {
                    ACLName: {},
                    UserNames: {
                        shape: "S17"
                    },
                    Tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ACL: {
                        shape: "S1a"
                    }
                }
            }
        },
        CreateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName", "NodeType", "ACLName" ],
                members: {
                    ClusterName: {},
                    NodeType: {},
                    ParameterGroupName: {},
                    Description: {},
                    NumShards: {
                        type: "integer"
                    },
                    NumReplicasPerShard: {
                        type: "integer"
                    },
                    SubnetGroupName: {},
                    SecurityGroupIds: {
                        shape: "S1f"
                    },
                    MaintenanceWindow: {},
                    Port: {
                        type: "integer"
                    },
                    SnsTopicArn: {},
                    TLSEnabled: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    SnapshotArns: {
                        type: "list",
                        member: {}
                    },
                    SnapshotName: {},
                    SnapshotRetentionLimit: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sy"
                    },
                    SnapshotWindow: {},
                    ACLName: {},
                    EngineVersion: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S7"
                    }
                }
            }
        },
        CreateParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName", "Family" ],
                members: {
                    ParameterGroupName: {},
                    Family: {},
                    Description: {},
                    Tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ParameterGroup: {
                        shape: "S1k"
                    }
                }
            }
        },
        CreateSnapshot: {
            input: {
                type: "structure",
                required: [ "ClusterName", "SnapshotName" ],
                members: {
                    ClusterName: {},
                    SnapshotName: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S11"
                    }
                }
            }
        },
        CreateSubnetGroup: {
            input: {
                type: "structure",
                required: [ "SubnetGroupName", "SubnetIds" ],
                members: {
                    SubnetGroupName: {},
                    Description: {},
                    SubnetIds: {
                        shape: "S1o"
                    },
                    Tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SubnetGroup: {
                        shape: "S1q"
                    }
                }
            }
        },
        CreateUser: {
            input: {
                type: "structure",
                required: [ "UserName", "AuthenticationMode", "AccessString" ],
                members: {
                    UserName: {},
                    AuthenticationMode: {
                        shape: "S1v"
                    },
                    AccessString: {},
                    Tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S20"
                    }
                }
            }
        },
        DeleteACL: {
            input: {
                type: "structure",
                required: [ "ACLName" ],
                members: {
                    ACLName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ACL: {
                        shape: "S1a"
                    }
                }
            }
        },
        DeleteCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName" ],
                members: {
                    ClusterName: {},
                    FinalSnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S7"
                    }
                }
            }
        },
        DeleteParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ParameterGroup: {
                        shape: "S1k"
                    }
                }
            }
        },
        DeleteSnapshot: {
            input: {
                type: "structure",
                required: [ "SnapshotName" ],
                members: {
                    SnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S11"
                    }
                }
            }
        },
        DeleteSubnetGroup: {
            input: {
                type: "structure",
                required: [ "SubnetGroupName" ],
                members: {
                    SubnetGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SubnetGroup: {
                        shape: "S1q"
                    }
                }
            }
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S20"
                    }
                }
            }
        },
        DescribeACLs: {
            input: {
                type: "structure",
                members: {
                    ACLName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ACLs: {
                        type: "list",
                        member: {
                            shape: "S1a"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeClusters: {
            input: {
                type: "structure",
                members: {
                    ClusterName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ShowShardDetails: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Clusters: {
                        shape: "S6"
                    }
                }
            }
        },
        DescribeEngineVersions: {
            input: {
                type: "structure",
                members: {
                    EngineVersion: {},
                    ParameterGroupFamily: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DefaultOnly: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    EngineVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EngineVersion: {},
                                EnginePatchVersion: {},
                                ParameterGroupFamily: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    SourceName: {},
                    SourceType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "integer"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceName: {},
                                SourceType: {},
                                Message: {},
                                Date: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeParameterGroups: {
            input: {
                type: "structure",
                members: {
                    ParameterGroupName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ParameterGroups: {
                        type: "list",
                        member: {
                            shape: "S1k"
                        }
                    }
                }
            }
        },
        DescribeParameters: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Value: {},
                                Description: {},
                                DataType: {},
                                AllowedValues: {},
                                MinimumEngineVersion: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeServiceUpdates: {
            input: {
                type: "structure",
                members: {
                    ServiceUpdateName: {},
                    ClusterNames: {
                        shape: "S2"
                    },
                    Status: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ServiceUpdates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ClusterName: {},
                                ServiceUpdateName: {},
                                ReleaseDate: {
                                    type: "timestamp"
                                },
                                Description: {},
                                Status: {},
                                Type: {},
                                NodesUpdated: {},
                                AutoUpdateStartDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeSnapshots: {
            input: {
                type: "structure",
                members: {
                    ClusterName: {},
                    SnapshotName: {},
                    Source: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ShowDetail: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Snapshots: {
                        type: "list",
                        member: {
                            shape: "S11"
                        }
                    }
                }
            }
        },
        DescribeSubnetGroups: {
            input: {
                type: "structure",
                members: {
                    SubnetGroupName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    SubnetGroups: {
                        type: "list",
                        member: {
                            shape: "S1q"
                        }
                    }
                }
            }
        },
        DescribeUsers: {
            input: {
                type: "structure",
                members: {
                    UserName: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            shape: "S20"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        FailoverShard: {
            input: {
                type: "structure",
                required: [ "ClusterName", "ShardName" ],
                members: {
                    ClusterName: {},
                    ShardName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S7"
                    }
                }
            }
        },
        ListAllowedNodeTypeUpdates: {
            input: {
                type: "structure",
                required: [ "ClusterName" ],
                members: {
                    ClusterName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ScaleUpNodeTypes: {
                        shape: "S3q"
                    },
                    ScaleDownNodeTypes: {
                        shape: "S3q"
                    }
                }
            }
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "Sy"
                    }
                }
            }
        },
        ResetParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {},
                    AllParameters: {
                        type: "boolean"
                    },
                    ParameterNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ParameterGroup: {
                        shape: "S1k"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "Sy"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "Sy"
                    }
                }
            }
        },
        UpdateACL: {
            input: {
                type: "structure",
                required: [ "ACLName" ],
                members: {
                    ACLName: {},
                    UserNamesToAdd: {
                        shape: "S17"
                    },
                    UserNamesToRemove: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ACL: {
                        shape: "S1a"
                    }
                }
            }
        },
        UpdateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName" ],
                members: {
                    ClusterName: {},
                    Description: {},
                    SecurityGroupIds: {
                        shape: "S1f"
                    },
                    MaintenanceWindow: {},
                    SnsTopicArn: {},
                    SnsTopicStatus: {},
                    ParameterGroupName: {},
                    SnapshotWindow: {},
                    SnapshotRetentionLimit: {
                        type: "integer"
                    },
                    NodeType: {},
                    EngineVersion: {},
                    ReplicaConfiguration: {
                        type: "structure",
                        members: {
                            ReplicaCount: {
                                type: "integer"
                            }
                        }
                    },
                    ShardConfiguration: {
                        type: "structure",
                        members: {
                            ShardCount: {
                                type: "integer"
                            }
                        }
                    },
                    ACLName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S7"
                    }
                }
            }
        },
        UpdateParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName", "ParameterNameValues" ],
                members: {
                    ParameterGroupName: {},
                    ParameterNameValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ParameterName: {},
                                ParameterValue: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ParameterGroup: {
                        shape: "S1k"
                    }
                }
            }
        },
        UpdateSubnetGroup: {
            input: {
                type: "structure",
                required: [ "SubnetGroupName" ],
                members: {
                    SubnetGroupName: {},
                    Description: {},
                    SubnetIds: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SubnetGroup: {
                        shape: "S1q"
                    }
                }
            }
        },
        UpdateUser: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {},
                    AuthenticationMode: {
                        shape: "S1v"
                    },
                    AccessString: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S20"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {}
        },
        S6: {
            type: "list",
            member: {
                shape: "S7"
            }
        },
        S7: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                Status: {},
                PendingUpdates: {
                    type: "structure",
                    members: {
                        Resharding: {
                            type: "structure",
                            members: {
                                SlotMigration: {
                                    type: "structure",
                                    members: {
                                        ProgressPercentage: {
                                            type: "double"
                                        }
                                    }
                                }
                            }
                        },
                        ACLs: {
                            type: "structure",
                            members: {
                                ACLToApply: {}
                            }
                        },
                        ServiceUpdates: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    ServiceUpdateName: {},
                                    Status: {}
                                }
                            }
                        }
                    }
                },
                NumberOfShards: {
                    type: "integer"
                },
                Shards: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {},
                            Status: {},
                            Slots: {},
                            Nodes: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Status: {},
                                        AvailabilityZone: {},
                                        CreateTime: {
                                            type: "timestamp"
                                        },
                                        Endpoint: {
                                            shape: "Sn"
                                        }
                                    }
                                }
                            },
                            NumberOfNodes: {
                                type: "integer"
                            }
                        }
                    }
                },
                AvailabilityMode: {},
                ClusterEndpoint: {
                    shape: "Sn"
                },
                NodeType: {},
                EngineVersion: {},
                EnginePatchVersion: {},
                ParameterGroupName: {},
                ParameterGroupStatus: {},
                SecurityGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            SecurityGroupId: {},
                            Status: {}
                        }
                    }
                },
                SubnetGroupName: {},
                TLSEnabled: {
                    type: "boolean"
                },
                KmsKeyId: {},
                ARN: {},
                SnsTopicArn: {},
                SnsTopicStatus: {},
                SnapshotRetentionLimit: {
                    type: "integer"
                },
                MaintenanceWindow: {},
                SnapshotWindow: {},
                ACLName: {},
                AutoMinorVersionUpgrade: {
                    type: "boolean"
                }
            }
        },
        Sn: {
            type: "structure",
            members: {
                Address: {},
                Port: {
                    type: "integer"
                }
            }
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                Name: {},
                Status: {},
                Source: {},
                KmsKeyId: {},
                ARN: {},
                ClusterConfiguration: {
                    type: "structure",
                    members: {
                        Name: {},
                        Description: {},
                        NodeType: {},
                        EngineVersion: {},
                        MaintenanceWindow: {},
                        TopicArn: {},
                        Port: {
                            type: "integer"
                        },
                        ParameterGroupName: {},
                        SubnetGroupName: {},
                        VpcId: {},
                        SnapshotRetentionLimit: {
                            type: "integer"
                        },
                        SnapshotWindow: {},
                        NumShards: {
                            type: "integer"
                        },
                        Shards: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    Name: {},
                                    Configuration: {
                                        type: "structure",
                                        members: {
                                            Slots: {},
                                            ReplicaCount: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    Size: {},
                                    SnapshotCreationTime: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S17: {
            type: "list",
            member: {}
        },
        S1a: {
            type: "structure",
            members: {
                Name: {},
                Status: {},
                UserNames: {
                    shape: "S1b"
                },
                MinimumEngineVersion: {},
                PendingChanges: {
                    type: "structure",
                    members: {
                        UserNamesToRemove: {
                            shape: "S1b"
                        },
                        UserNamesToAdd: {
                            shape: "S1b"
                        }
                    }
                },
                Clusters: {
                    type: "list",
                    member: {}
                },
                ARN: {}
            }
        },
        S1b: {
            type: "list",
            member: {}
        },
        S1f: {
            type: "list",
            member: {}
        },
        S1k: {
            type: "structure",
            members: {
                Name: {},
                Family: {},
                Description: {},
                ARN: {}
            }
        },
        S1o: {
            type: "list",
            member: {}
        },
        S1q: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                VpcId: {},
                Subnets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Identifier: {},
                            AvailabilityZone: {
                                type: "structure",
                                members: {
                                    Name: {}
                                }
                            }
                        }
                    }
                },
                ARN: {}
            }
        },
        S1v: {
            type: "structure",
            members: {
                Type: {},
                Passwords: {
                    type: "list",
                    member: {}
                }
            }
        },
        S20: {
            type: "structure",
            members: {
                Name: {},
                Status: {},
                AccessString: {},
                ACLNames: {
                    type: "list",
                    member: {}
                },
                MinimumEngineVersion: {},
                Authentication: {
                    type: "structure",
                    members: {
                        Type: {},
                        PasswordCount: {
                            type: "integer"
                        }
                    }
                },
                ARN: {}
            }
        },
        S3q: {
            type: "list",
            member: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["opensearch"] = {};

AWS.OpenSearch = AWS.Service.defineService("opensearch", [ "2021-01-01" ]);

AWS.apiLoader.services["opensearch"]["2021-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-01-01",
        endpointPrefix: "es",
        protocol: "rest-json",
        serviceFullName: "Amazon OpenSearch Service",
        serviceId: "OpenSearch",
        signatureVersion: "v4",
        uid: "opensearch-2021-01-01"
    },
    operations: {
        AcceptInboundConnection: {
            http: {
                method: "PUT",
                requestUri: "/2021-01-01/opensearch/cc/inboundConnection/{ConnectionId}/accept"
            },
            input: {
                type: "structure",
                required: [ "ConnectionId" ],
                members: {
                    ConnectionId: {
                        location: "uri",
                        locationName: "ConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S4"
                    }
                }
            }
        },
        AddTags: {
            http: {
                requestUri: "/2021-01-01/tags"
            },
            input: {
                type: "structure",
                required: [ "ARN", "TagList" ],
                members: {
                    ARN: {},
                    TagList: {
                        shape: "Sf"
                    }
                }
            }
        },
        AssociatePackage: {
            http: {
                requestUri: "/2021-01-01/packages/associate/{PackageID}/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "PackageID", "DomainName" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainPackageDetails: {
                        shape: "Sm"
                    }
                }
            }
        },
        CancelServiceSoftwareUpdate: {
            http: {
                requestUri: "/2021-01-01/opensearch/serviceSoftwareUpdate/cancel"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceSoftwareOptions: {
                        shape: "Sy"
                    }
                }
            }
        },
        CreateDomain: {
            http: {
                requestUri: "/2021-01-01/opensearch/domain"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    EngineVersion: {},
                    ClusterConfig: {
                        shape: "S15"
                    },
                    EBSOptions: {
                        shape: "S1b"
                    },
                    AccessPolicies: {},
                    SnapshotOptions: {
                        shape: "S1e"
                    },
                    VPCOptions: {
                        shape: "S1f"
                    },
                    CognitoOptions: {
                        shape: "S1h"
                    },
                    EncryptionAtRestOptions: {
                        shape: "S1l"
                    },
                    NodeToNodeEncryptionOptions: {
                        shape: "S1n"
                    },
                    AdvancedOptions: {
                        shape: "S1o"
                    },
                    LogPublishingOptions: {
                        shape: "S1p"
                    },
                    DomainEndpointOptions: {
                        shape: "S1t"
                    },
                    AdvancedSecurityOptions: {
                        shape: "S1w"
                    },
                    TagList: {
                        shape: "Sf"
                    },
                    AutoTuneOptions: {
                        type: "structure",
                        members: {
                            DesiredState: {},
                            MaintenanceSchedules: {
                                shape: "S27"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainStatus: {
                        shape: "S2e"
                    }
                }
            }
        },
        CreateOutboundConnection: {
            http: {
                requestUri: "/2021-01-01/opensearch/cc/outboundConnection"
            },
            input: {
                type: "structure",
                required: [ "LocalDomainInfo", "RemoteDomainInfo", "ConnectionAlias" ],
                members: {
                    LocalDomainInfo: {
                        shape: "S5"
                    },
                    RemoteDomainInfo: {
                        shape: "S5"
                    },
                    ConnectionAlias: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalDomainInfo: {
                        shape: "S5"
                    },
                    RemoteDomainInfo: {
                        shape: "S5"
                    },
                    ConnectionAlias: {},
                    ConnectionStatus: {
                        shape: "S2q"
                    },
                    ConnectionId: {}
                }
            }
        },
        CreatePackage: {
            http: {
                requestUri: "/2021-01-01/packages"
            },
            input: {
                type: "structure",
                required: [ "PackageName", "PackageType", "PackageSource" ],
                members: {
                    PackageName: {},
                    PackageType: {},
                    PackageDescription: {},
                    PackageSource: {
                        shape: "S2u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageDetails: {
                        shape: "S2y"
                    }
                }
            }
        },
        DeleteDomain: {
            http: {
                method: "DELETE",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainStatus: {
                        shape: "S2e"
                    }
                }
            }
        },
        DeleteInboundConnection: {
            http: {
                method: "DELETE",
                requestUri: "/2021-01-01/opensearch/cc/inboundConnection/{ConnectionId}"
            },
            input: {
                type: "structure",
                required: [ "ConnectionId" ],
                members: {
                    ConnectionId: {
                        location: "uri",
                        locationName: "ConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteOutboundConnection: {
            http: {
                method: "DELETE",
                requestUri: "/2021-01-01/opensearch/cc/outboundConnection/{ConnectionId}"
            },
            input: {
                type: "structure",
                required: [ "ConnectionId" ],
                members: {
                    ConnectionId: {
                        location: "uri",
                        locationName: "ConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S37"
                    }
                }
            }
        },
        DeletePackage: {
            http: {
                method: "DELETE",
                requestUri: "/2021-01-01/packages/{PackageID}"
            },
            input: {
                type: "structure",
                required: [ "PackageID" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageDetails: {
                        shape: "S2y"
                    }
                }
            }
        },
        DescribeDomain: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainStatus" ],
                members: {
                    DomainStatus: {
                        shape: "S2e"
                    }
                }
            }
        },
        DescribeDomainAutoTunes: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/autoTunes"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AutoTunes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AutoTuneType: {},
                                AutoTuneDetails: {
                                    type: "structure",
                                    members: {
                                        ScheduledAutoTuneDetails: {
                                            type: "structure",
                                            members: {
                                                Date: {
                                                    type: "timestamp"
                                                },
                                                ActionType: {},
                                                Action: {},
                                                Severity: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeDomainConfig: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/config"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainConfig" ],
                members: {
                    DomainConfig: {
                        shape: "S3r"
                    }
                }
            }
        },
        DescribeDomains: {
            http: {
                requestUri: "/2021-01-01/opensearch/domain-info"
            },
            input: {
                type: "structure",
                required: [ "DomainNames" ],
                members: {
                    DomainNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainStatusList" ],
                members: {
                    DomainStatusList: {
                        type: "list",
                        member: {
                            shape: "S2e"
                        }
                    }
                }
            }
        },
        DescribeInboundConnections: {
            http: {
                requestUri: "/2021-01-01/opensearch/cc/inboundConnection/search"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4i"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connections: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeInstanceTypeLimits: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/instanceTypeLimits/{EngineVersion}/{InstanceType}"
            },
            input: {
                type: "structure",
                required: [ "InstanceType", "EngineVersion" ],
                members: {
                    DomainName: {
                        location: "querystring",
                        locationName: "domainName"
                    },
                    InstanceType: {
                        location: "uri",
                        locationName: "InstanceType"
                    },
                    EngineVersion: {
                        location: "uri",
                        locationName: "EngineVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LimitsByRole: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                StorageTypes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            StorageTypeName: {},
                                            StorageSubTypeName: {},
                                            StorageTypeLimits: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        LimitName: {},
                                                        LimitValues: {
                                                            shape: "S50"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                InstanceLimits: {
                                    type: "structure",
                                    members: {
                                        InstanceCountLimits: {
                                            type: "structure",
                                            members: {
                                                MinimumInstanceCount: {
                                                    type: "integer"
                                                },
                                                MaximumInstanceCount: {
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                },
                                AdditionalLimits: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            LimitName: {},
                                            LimitValues: {
                                                shape: "S50"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeOutboundConnections: {
            http: {
                requestUri: "/2021-01-01/opensearch/cc/outboundConnection/search"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4i"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connections: {
                        type: "list",
                        member: {
                            shape: "S37"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribePackages: {
            http: {
                requestUri: "/2021-01-01/packages/describe"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Value: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageDetailsList: {
                        type: "list",
                        member: {
                            shape: "S2y"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeReservedInstanceOfferings: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/reservedInstanceOfferings"
            },
            input: {
                type: "structure",
                members: {
                    ReservedInstanceOfferingId: {
                        location: "querystring",
                        locationName: "offeringId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ReservedInstanceOfferings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReservedInstanceOfferingId: {},
                                InstanceType: {},
                                Duration: {
                                    type: "integer"
                                },
                                FixedPrice: {
                                    type: "double"
                                },
                                UsagePrice: {
                                    type: "double"
                                },
                                CurrencyCode: {},
                                PaymentOption: {},
                                RecurringCharges: {
                                    shape: "S5r"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeReservedInstances: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/reservedInstances"
            },
            input: {
                type: "structure",
                members: {
                    ReservedInstanceId: {
                        location: "querystring",
                        locationName: "reservationId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ReservedInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReservationName: {},
                                ReservedInstanceId: {},
                                BillingSubscriptionId: {
                                    type: "long"
                                },
                                ReservedInstanceOfferingId: {},
                                InstanceType: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                Duration: {
                                    type: "integer"
                                },
                                FixedPrice: {
                                    type: "double"
                                },
                                UsagePrice: {
                                    type: "double"
                                },
                                CurrencyCode: {},
                                InstanceCount: {
                                    type: "integer"
                                },
                                State: {},
                                PaymentOption: {},
                                RecurringCharges: {
                                    shape: "S5r"
                                }
                            }
                        }
                    }
                }
            }
        },
        DissociatePackage: {
            http: {
                requestUri: "/2021-01-01/packages/dissociate/{PackageID}/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "PackageID", "DomainName" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainPackageDetails: {
                        shape: "Sm"
                    }
                }
            }
        },
        GetCompatibleVersions: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/compatibleVersions"
            },
            input: {
                type: "structure",
                members: {
                    DomainName: {
                        location: "querystring",
                        locationName: "domainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CompatibleVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceVersion: {},
                                TargetVersions: {
                                    shape: "S65"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetPackageVersionHistory: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/packages/{PackageID}/history"
            },
            input: {
                type: "structure",
                required: [ "PackageID" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageID: {},
                    PackageVersionHistoryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PackageVersion: {},
                                CommitMessage: {},
                                CreatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetUpgradeHistory: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/upgradeDomain/{DomainName}/history"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpgradeHistories: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UpgradeName: {},
                                StartTimestamp: {
                                    type: "timestamp"
                                },
                                UpgradeStatus: {},
                                StepsList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            UpgradeStep: {},
                                            UpgradeStepStatus: {},
                                            Issues: {
                                                type: "list",
                                                member: {}
                                            },
                                            ProgressPercent: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetUpgradeStatus: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/upgradeDomain/{DomainName}/status"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpgradeStep: {},
                    StepStatus: {},
                    UpgradeName: {}
                }
            }
        },
        ListDomainNames: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/domain"
            },
            input: {
                type: "structure",
                members: {
                    EngineType: {
                        location: "querystring",
                        locationName: "engineType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainNames: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainName: {},
                                EngineType: {}
                            }
                        }
                    }
                }
            }
        },
        ListDomainsForPackage: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/packages/{PackageID}/domains"
            },
            input: {
                type: "structure",
                required: [ "PackageID" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainPackageDetailsList: {
                        shape: "S6w"
                    },
                    NextToken: {}
                }
            }
        },
        ListInstanceTypeDetails: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/instanceTypeDetails/{EngineVersion}"
            },
            input: {
                type: "structure",
                required: [ "EngineVersion" ],
                members: {
                    EngineVersion: {
                        location: "uri",
                        locationName: "EngineVersion"
                    },
                    DomainName: {
                        location: "querystring",
                        locationName: "domainName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceTypeDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceType: {},
                                EncryptionEnabled: {
                                    type: "boolean"
                                },
                                CognitoEnabled: {
                                    type: "boolean"
                                },
                                AppLogsEnabled: {
                                    type: "boolean"
                                },
                                AdvancedSecurityEnabled: {
                                    type: "boolean"
                                },
                                WarmEnabled: {
                                    type: "boolean"
                                },
                                InstanceRole: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPackagesForDomain: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/domain/{DomainName}/packages"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainPackageDetailsList: {
                        shape: "S6w"
                    },
                    NextToken: {}
                }
            }
        },
        ListTags: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/tags/"
            },
            input: {
                type: "structure",
                required: [ "ARN" ],
                members: {
                    ARN: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "Sf"
                    }
                }
            }
        },
        ListVersions: {
            http: {
                method: "GET",
                requestUri: "/2021-01-01/opensearch/versions"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Versions: {
                        shape: "S65"
                    },
                    NextToken: {}
                }
            }
        },
        PurchaseReservedInstanceOffering: {
            http: {
                requestUri: "/2021-01-01/opensearch/purchaseReservedInstanceOffering"
            },
            input: {
                type: "structure",
                required: [ "ReservedInstanceOfferingId", "ReservationName" ],
                members: {
                    ReservedInstanceOfferingId: {},
                    ReservationName: {},
                    InstanceCount: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReservedInstanceId: {},
                    ReservationName: {}
                }
            }
        },
        RejectInboundConnection: {
            http: {
                method: "PUT",
                requestUri: "/2021-01-01/opensearch/cc/inboundConnection/{ConnectionId}/reject"
            },
            input: {
                type: "structure",
                required: [ "ConnectionId" ],
                members: {
                    ConnectionId: {
                        location: "uri",
                        locationName: "ConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S4"
                    }
                }
            }
        },
        RemoveTags: {
            http: {
                requestUri: "/2021-01-01/tags-removal"
            },
            input: {
                type: "structure",
                required: [ "ARN", "TagKeys" ],
                members: {
                    ARN: {},
                    TagKeys: {
                        shape: "S1g"
                    }
                }
            }
        },
        StartServiceSoftwareUpdate: {
            http: {
                requestUri: "/2021-01-01/opensearch/serviceSoftwareUpdate/start"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceSoftwareOptions: {
                        shape: "Sy"
                    }
                }
            }
        },
        UpdateDomainConfig: {
            http: {
                requestUri: "/2021-01-01/opensearch/domain/{DomainName}/config"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ClusterConfig: {
                        shape: "S15"
                    },
                    EBSOptions: {
                        shape: "S1b"
                    },
                    SnapshotOptions: {
                        shape: "S1e"
                    },
                    VPCOptions: {
                        shape: "S1f"
                    },
                    CognitoOptions: {
                        shape: "S1h"
                    },
                    AdvancedOptions: {
                        shape: "S1o"
                    },
                    AccessPolicies: {},
                    LogPublishingOptions: {
                        shape: "S1p"
                    },
                    EncryptionAtRestOptions: {
                        shape: "S1l"
                    },
                    DomainEndpointOptions: {
                        shape: "S1t"
                    },
                    NodeToNodeEncryptionOptions: {
                        shape: "S1n"
                    },
                    AdvancedSecurityOptions: {
                        shape: "S1w"
                    },
                    AutoTuneOptions: {
                        shape: "S4a"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainConfig" ],
                members: {
                    DomainConfig: {
                        shape: "S3r"
                    }
                }
            }
        },
        UpdatePackage: {
            http: {
                requestUri: "/2021-01-01/packages/update"
            },
            input: {
                type: "structure",
                required: [ "PackageID", "PackageSource" ],
                members: {
                    PackageID: {},
                    PackageSource: {
                        shape: "S2u"
                    },
                    PackageDescription: {},
                    CommitMessage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageDetails: {
                        shape: "S2y"
                    }
                }
            }
        },
        UpgradeDomain: {
            http: {
                requestUri: "/2021-01-01/opensearch/upgradeDomain"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "TargetVersion" ],
                members: {
                    DomainName: {},
                    TargetVersion: {},
                    PerformCheckOnly: {
                        type: "boolean"
                    },
                    AdvancedOptions: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpgradeId: {},
                    DomainName: {},
                    TargetVersion: {},
                    PerformCheckOnly: {
                        type: "boolean"
                    },
                    AdvancedOptions: {
                        shape: "S1o"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                LocalDomainInfo: {
                    shape: "S5"
                },
                RemoteDomainInfo: {
                    shape: "S5"
                },
                ConnectionId: {},
                ConnectionStatus: {
                    type: "structure",
                    members: {
                        StatusCode: {},
                        Message: {}
                    }
                }
            }
        },
        S5: {
            type: "structure",
            members: {
                AWSDomainInformation: {
                    type: "structure",
                    required: [ "DomainName" ],
                    members: {
                        OwnerId: {},
                        DomainName: {},
                        Region: {}
                    }
                }
            }
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                PackageID: {},
                PackageName: {},
                PackageType: {},
                LastUpdated: {
                    type: "timestamp"
                },
                DomainName: {},
                DomainPackageStatus: {},
                PackageVersion: {},
                ReferencePath: {},
                ErrorDetails: {
                    shape: "St"
                }
            }
        },
        St: {
            type: "structure",
            members: {
                ErrorType: {},
                ErrorMessage: {}
            }
        },
        Sy: {
            type: "structure",
            members: {
                CurrentVersion: {},
                NewVersion: {},
                UpdateAvailable: {
                    type: "boolean"
                },
                Cancellable: {
                    type: "boolean"
                },
                UpdateStatus: {},
                Description: {},
                AutomatedUpdateDate: {
                    type: "timestamp"
                },
                OptionalDeployment: {
                    type: "boolean"
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                InstanceType: {},
                InstanceCount: {
                    type: "integer"
                },
                DedicatedMasterEnabled: {
                    type: "boolean"
                },
                ZoneAwarenessEnabled: {
                    type: "boolean"
                },
                ZoneAwarenessConfig: {
                    type: "structure",
                    members: {
                        AvailabilityZoneCount: {
                            type: "integer"
                        }
                    }
                },
                DedicatedMasterType: {},
                DedicatedMasterCount: {
                    type: "integer"
                },
                WarmEnabled: {
                    type: "boolean"
                },
                WarmType: {},
                WarmCount: {
                    type: "integer"
                },
                ColdStorageOptions: {
                    type: "structure",
                    required: [ "Enabled" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S1b: {
            type: "structure",
            members: {
                EBSEnabled: {
                    type: "boolean"
                },
                VolumeType: {},
                VolumeSize: {
                    type: "integer"
                },
                Iops: {
                    type: "integer"
                }
            }
        },
        S1e: {
            type: "structure",
            members: {
                AutomatedSnapshotStartHour: {
                    type: "integer"
                }
            }
        },
        S1f: {
            type: "structure",
            members: {
                SubnetIds: {
                    shape: "S1g"
                },
                SecurityGroupIds: {
                    shape: "S1g"
                }
            }
        },
        S1g: {
            type: "list",
            member: {}
        },
        S1h: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                UserPoolId: {},
                IdentityPoolId: {},
                RoleArn: {}
            }
        },
        S1l: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                KmsKeyId: {}
            }
        },
        S1n: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                }
            }
        },
        S1o: {
            type: "map",
            key: {},
            value: {}
        },
        S1p: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    CloudWatchLogsLogGroupArn: {},
                    Enabled: {
                        type: "boolean"
                    }
                }
            }
        },
        S1t: {
            type: "structure",
            members: {
                EnforceHTTPS: {
                    type: "boolean"
                },
                TLSSecurityPolicy: {},
                CustomEndpointEnabled: {
                    type: "boolean"
                },
                CustomEndpoint: {},
                CustomEndpointCertificateArn: {}
            }
        },
        S1w: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                InternalUserDatabaseEnabled: {
                    type: "boolean"
                },
                MasterUserOptions: {
                    type: "structure",
                    members: {
                        MasterUserARN: {},
                        MasterUserName: {
                            shape: "S1y"
                        },
                        MasterUserPassword: {
                            type: "string",
                            sensitive: true
                        }
                    }
                },
                SAMLOptions: {
                    type: "structure",
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        Idp: {
                            shape: "S21"
                        },
                        MasterUserName: {
                            shape: "S1y"
                        },
                        MasterBackendRole: {},
                        SubjectKey: {},
                        RolesKey: {},
                        SessionTimeoutMinutes: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S1y: {
            type: "string",
            sensitive: true
        },
        S21: {
            type: "structure",
            required: [ "MetadataContent", "EntityId" ],
            members: {
                MetadataContent: {},
                EntityId: {}
            }
        },
        S27: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StartAt: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "structure",
                        members: {
                            Value: {
                                type: "long"
                            },
                            Unit: {}
                        }
                    },
                    CronExpressionForRecurrence: {}
                }
            }
        },
        S2e: {
            type: "structure",
            required: [ "DomainId", "DomainName", "ARN", "ClusterConfig" ],
            members: {
                DomainId: {},
                DomainName: {},
                ARN: {},
                Created: {
                    type: "boolean"
                },
                Deleted: {
                    type: "boolean"
                },
                Endpoint: {},
                Endpoints: {
                    type: "map",
                    key: {},
                    value: {}
                },
                Processing: {
                    type: "boolean"
                },
                UpgradeProcessing: {
                    type: "boolean"
                },
                EngineVersion: {},
                ClusterConfig: {
                    shape: "S15"
                },
                EBSOptions: {
                    shape: "S1b"
                },
                AccessPolicies: {},
                SnapshotOptions: {
                    shape: "S1e"
                },
                VPCOptions: {
                    shape: "S2i"
                },
                CognitoOptions: {
                    shape: "S1h"
                },
                EncryptionAtRestOptions: {
                    shape: "S1l"
                },
                NodeToNodeEncryptionOptions: {
                    shape: "S1n"
                },
                AdvancedOptions: {
                    shape: "S1o"
                },
                LogPublishingOptions: {
                    shape: "S1p"
                },
                ServiceSoftwareOptions: {
                    shape: "Sy"
                },
                DomainEndpointOptions: {
                    shape: "S1t"
                },
                AdvancedSecurityOptions: {
                    shape: "S2j"
                },
                AutoTuneOptions: {
                    type: "structure",
                    members: {
                        State: {},
                        ErrorMessage: {}
                    }
                }
            }
        },
        S2i: {
            type: "structure",
            members: {
                VPCId: {},
                SubnetIds: {
                    shape: "S1g"
                },
                AvailabilityZones: {
                    shape: "S1g"
                },
                SecurityGroupIds: {
                    shape: "S1g"
                }
            }
        },
        S2j: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                InternalUserDatabaseEnabled: {
                    type: "boolean"
                },
                SAMLOptions: {
                    type: "structure",
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        Idp: {
                            shape: "S21"
                        },
                        SubjectKey: {},
                        RolesKey: {},
                        SessionTimeoutMinutes: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S2q: {
            type: "structure",
            members: {
                StatusCode: {},
                Message: {}
            }
        },
        S2u: {
            type: "structure",
            members: {
                S3BucketName: {},
                S3Key: {}
            }
        },
        S2y: {
            type: "structure",
            members: {
                PackageID: {},
                PackageName: {},
                PackageType: {},
                PackageDescription: {},
                PackageStatus: {},
                CreatedAt: {
                    type: "timestamp"
                },
                LastUpdatedAt: {
                    type: "timestamp"
                },
                AvailablePackageVersion: {},
                ErrorDetails: {
                    shape: "St"
                }
            }
        },
        S37: {
            type: "structure",
            members: {
                LocalDomainInfo: {
                    shape: "S5"
                },
                RemoteDomainInfo: {
                    shape: "S5"
                },
                ConnectionId: {},
                ConnectionAlias: {},
                ConnectionStatus: {
                    shape: "S2q"
                }
            }
        },
        S3r: {
            type: "structure",
            members: {
                EngineVersion: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {},
                        Status: {
                            shape: "S3t"
                        }
                    }
                },
                ClusterConfig: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S15"
                        },
                        Status: {
                            shape: "S3t"
                        }
                    }
                },
                EBSOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1b"
                        },
                        Status: {
                            shape: "S3t"
                        }
                    }
                },
                AccessPolicies: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {},
                        Status: {
                            shape: "S3t"
                        }
                    }
                },
                SnapshotOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1e"
                        },
                        Status: {
                            shape: "S3t"
                        }
                    }
                },
                VPCOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S2i"
                        },
                        Status: {
                            shape: "S3t"
                        }
                    }
                },
                CognitoOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1h"
                        },
                        Status: {
                            shape: "S3t"
                        }
                    }
                },
                EncryptionAtRestOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1l"
                        },
                        Status: {
                            shape: "S3t"
                        }
                    }
                },
                NodeToNodeEncryptionOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1n"
                        },
                        Status: {
                            shape: "S3t"
                        }
                    }
                },
                AdvancedOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1o"
                        },
                        Status: {
                            shape: "S3t"
                        }
                    }
                },
                LogPublishingOptions: {
                    type: "structure",
                    members: {
                        Options: {
                            shape: "S1p"
                        },
                        Status: {
                            shape: "S3t"
                        }
                    }
                },
                DomainEndpointOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1t"
                        },
                        Status: {
                            shape: "S3t"
                        }
                    }
                },
                AdvancedSecurityOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S2j"
                        },
                        Status: {
                            shape: "S3t"
                        }
                    }
                },
                AutoTuneOptions: {
                    type: "structure",
                    members: {
                        Options: {
                            shape: "S4a"
                        },
                        Status: {
                            type: "structure",
                            required: [ "CreationDate", "UpdateDate", "State" ],
                            members: {
                                CreationDate: {
                                    type: "timestamp"
                                },
                                UpdateDate: {
                                    type: "timestamp"
                                },
                                UpdateVersion: {
                                    type: "integer"
                                },
                                State: {},
                                ErrorMessage: {},
                                PendingDeletion: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        S3t: {
            type: "structure",
            required: [ "CreationDate", "UpdateDate", "State" ],
            members: {
                CreationDate: {
                    type: "timestamp"
                },
                UpdateDate: {
                    type: "timestamp"
                },
                UpdateVersion: {
                    type: "integer"
                },
                State: {},
                PendingDeletion: {
                    type: "boolean"
                }
            }
        },
        S4a: {
            type: "structure",
            members: {
                DesiredState: {},
                RollbackOnDisable: {},
                MaintenanceSchedules: {
                    shape: "S27"
                }
            }
        },
        S4i: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S50: {
            type: "list",
            member: {}
        },
        S5r: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RecurringChargeAmount: {
                        type: "double"
                    },
                    RecurringChargeFrequency: {}
                }
            }
        },
        S65: {
            type: "list",
            member: {}
        },
        S6w: {
            type: "list",
            member: {
                shape: "Sm"
            }
        }
    },
    paginators: {
        DescribeDomainAutoTunes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeInboundConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeOutboundConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribePackages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeReservedInstanceOfferings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeReservedInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetPackageVersionHistory: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetUpgradeHistory: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDomainsForPackage: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListInstanceTypeDetails: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPackagesForDomain: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["kafkaconnect"] = {};

AWS.KafkaConnect = AWS.Service.defineService("kafkaconnect", [ "2021-09-14" ]);

AWS.apiLoader.services["kafkaconnect"]["2021-09-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-09-14",
        endpointPrefix: "kafkaconnect",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Kafka Connect",
        serviceFullName: "Managed Streaming for Kafka Connect",
        serviceId: "KafkaConnect",
        signatureVersion: "v4",
        signingName: "kafkaconnect",
        uid: "kafkaconnect-2021-09-14"
    },
    operations: {
        CreateConnector: {
            http: {
                requestUri: "/v1/connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "capacity", "connectorConfiguration", "connectorName", "kafkaCluster", "kafkaClusterClientAuthentication", "kafkaClusterEncryptionInTransit", "kafkaConnectVersion", "plugins", "serviceExecutionRoleArn" ],
                members: {
                    capacity: {
                        type: "structure",
                        members: {
                            autoScaling: {
                                type: "structure",
                                required: [ "maxWorkerCount", "mcuCount", "minWorkerCount" ],
                                members: {
                                    maxWorkerCount: {
                                        type: "integer"
                                    },
                                    mcuCount: {
                                        type: "integer"
                                    },
                                    minWorkerCount: {
                                        type: "integer"
                                    },
                                    scaleInPolicy: {
                                        type: "structure",
                                        required: [ "cpuUtilizationPercentage" ],
                                        members: {
                                            cpuUtilizationPercentage: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    scaleOutPolicy: {
                                        type: "structure",
                                        required: [ "cpuUtilizationPercentage" ],
                                        members: {
                                            cpuUtilizationPercentage: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            },
                            provisionedCapacity: {
                                type: "structure",
                                required: [ "mcuCount", "workerCount" ],
                                members: {
                                    mcuCount: {
                                        type: "integer"
                                    },
                                    workerCount: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    connectorConfiguration: {
                        shape: "Sa"
                    },
                    connectorDescription: {},
                    connectorName: {},
                    kafkaCluster: {
                        type: "structure",
                        required: [ "apacheKafkaCluster" ],
                        members: {
                            apacheKafkaCluster: {
                                type: "structure",
                                required: [ "bootstrapServers", "vpc" ],
                                members: {
                                    bootstrapServers: {},
                                    vpc: {
                                        type: "structure",
                                        required: [ "subnets" ],
                                        members: {
                                            securityGroups: {
                                                shape: "Sh"
                                            },
                                            subnets: {
                                                shape: "Sh"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    kafkaClusterClientAuthentication: {
                        type: "structure",
                        required: [ "authenticationType" ],
                        members: {
                            authenticationType: {}
                        }
                    },
                    kafkaClusterEncryptionInTransit: {
                        type: "structure",
                        required: [ "encryptionType" ],
                        members: {
                            encryptionType: {}
                        }
                    },
                    kafkaConnectVersion: {},
                    logDelivery: {
                        type: "structure",
                        required: [ "workerLogDelivery" ],
                        members: {
                            workerLogDelivery: {
                                type: "structure",
                                members: {
                                    cloudWatchLogs: {
                                        type: "structure",
                                        required: [ "enabled" ],
                                        members: {
                                            enabled: {
                                                type: "boolean"
                                            },
                                            logGroup: {}
                                        }
                                    },
                                    firehose: {
                                        type: "structure",
                                        required: [ "enabled" ],
                                        members: {
                                            deliveryStream: {},
                                            enabled: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    s3: {
                                        type: "structure",
                                        required: [ "enabled" ],
                                        members: {
                                            bucket: {},
                                            enabled: {
                                                type: "boolean"
                                            },
                                            prefix: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    plugins: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "customPlugin" ],
                            members: {
                                customPlugin: {
                                    type: "structure",
                                    required: [ "customPluginArn", "revision" ],
                                    members: {
                                        customPluginArn: {},
                                        revision: {
                                            type: "long"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    serviceExecutionRoleArn: {},
                    workerConfiguration: {
                        type: "structure",
                        required: [ "revision", "workerConfigurationArn" ],
                        members: {
                            revision: {
                                type: "long"
                            },
                            workerConfigurationArn: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorArn: {},
                    connectorName: {},
                    connectorState: {}
                }
            }
        },
        CreateCustomPlugin: {
            http: {
                requestUri: "/v1/custom-plugins",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentType", "location", "name" ],
                members: {
                    contentType: {},
                    description: {},
                    location: {
                        type: "structure",
                        required: [ "s3Location" ],
                        members: {
                            s3Location: {
                                type: "structure",
                                required: [ "bucketArn", "fileKey" ],
                                members: {
                                    bucketArn: {},
                                    fileKey: {},
                                    objectVersion: {}
                                }
                            }
                        }
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    customPluginArn: {},
                    customPluginState: {},
                    name: {},
                    revision: {
                        type: "long"
                    }
                }
            }
        },
        CreateWorkerConfiguration: {
            http: {
                requestUri: "/v1/worker-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "propertiesFileContent" ],
                members: {
                    description: {},
                    name: {},
                    propertiesFileContent: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        shape: "S18"
                    },
                    latestRevision: {
                        shape: "S19"
                    },
                    name: {},
                    workerConfigurationArn: {}
                }
            }
        },
        DeleteConnector: {
            http: {
                method: "DELETE",
                requestUri: "/v1/connectors/{connectorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectorArn" ],
                members: {
                    connectorArn: {
                        location: "uri",
                        locationName: "connectorArn"
                    },
                    currentVersion: {
                        location: "querystring",
                        locationName: "currentVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorArn: {},
                    connectorState: {}
                }
            },
            idempotent: true
        },
        DescribeConnector: {
            http: {
                method: "GET",
                requestUri: "/v1/connectors/{connectorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectorArn" ],
                members: {
                    connectorArn: {
                        location: "uri",
                        locationName: "connectorArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    capacity: {
                        shape: "S1e"
                    },
                    connectorArn: {},
                    connectorConfiguration: {
                        shape: "Sa"
                    },
                    connectorDescription: {},
                    connectorName: {},
                    connectorState: {},
                    creationTime: {
                        shape: "S18"
                    },
                    currentVersion: {},
                    kafkaCluster: {
                        shape: "S1k"
                    },
                    kafkaClusterClientAuthentication: {
                        shape: "S1n"
                    },
                    kafkaClusterEncryptionInTransit: {
                        shape: "S1o"
                    },
                    kafkaConnectVersion: {},
                    logDelivery: {
                        shape: "S1p"
                    },
                    plugins: {
                        shape: "S1u"
                    },
                    serviceExecutionRoleArn: {},
                    workerConfiguration: {
                        shape: "S1x"
                    }
                }
            }
        },
        DescribeCustomPlugin: {
            http: {
                method: "GET",
                requestUri: "/v1/custom-plugins/{customPluginArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "customPluginArn" ],
                members: {
                    customPluginArn: {
                        location: "uri",
                        locationName: "customPluginArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        shape: "S18"
                    },
                    customPluginArn: {},
                    customPluginState: {},
                    description: {},
                    latestRevision: {
                        shape: "S20"
                    },
                    name: {}
                }
            }
        },
        DescribeWorkerConfiguration: {
            http: {
                method: "GET",
                requestUri: "/v1/worker-configurations/{workerConfigurationArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workerConfigurationArn" ],
                members: {
                    workerConfigurationArn: {
                        location: "uri",
                        locationName: "workerConfigurationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        shape: "S18"
                    },
                    description: {},
                    latestRevision: {
                        type: "structure",
                        members: {
                            creationTime: {
                                shape: "S18"
                            },
                            description: {},
                            propertiesFileContent: {},
                            revision: {
                                type: "long"
                            }
                        }
                    },
                    name: {},
                    workerConfigurationArn: {}
                }
            }
        },
        ListConnectors: {
            http: {
                method: "GET",
                requestUri: "/v1/connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    connectorNamePrefix: {
                        location: "querystring",
                        locationName: "connectorNamePrefix"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                capacity: {
                                    shape: "S1e"
                                },
                                connectorArn: {},
                                connectorDescription: {},
                                connectorName: {},
                                connectorState: {},
                                creationTime: {
                                    shape: "S18"
                                },
                                currentVersion: {},
                                kafkaCluster: {
                                    shape: "S1k"
                                },
                                kafkaClusterClientAuthentication: {
                                    shape: "S1n"
                                },
                                kafkaClusterEncryptionInTransit: {
                                    shape: "S1o"
                                },
                                kafkaConnectVersion: {},
                                logDelivery: {
                                    shape: "S1p"
                                },
                                plugins: {
                                    shape: "S1u"
                                },
                                serviceExecutionRoleArn: {},
                                workerConfiguration: {
                                    shape: "S1x"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCustomPlugins: {
            http: {
                method: "GET",
                requestUri: "/v1/custom-plugins",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    customPlugins: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                creationTime: {
                                    shape: "S18"
                                },
                                customPluginArn: {},
                                customPluginState: {},
                                description: {},
                                latestRevision: {
                                    shape: "S20"
                                },
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListWorkerConfigurations: {
            http: {
                method: "GET",
                requestUri: "/v1/worker-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    workerConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                creationTime: {
                                    shape: "S18"
                                },
                                description: {},
                                latestRevision: {
                                    shape: "S19"
                                },
                                name: {},
                                workerConfigurationArn: {}
                            }
                        }
                    }
                }
            }
        },
        UpdateConnector: {
            http: {
                method: "PUT",
                requestUri: "/v1/connectors/{connectorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "capacity", "connectorArn", "currentVersion" ],
                members: {
                    capacity: {
                        type: "structure",
                        members: {
                            autoScaling: {
                                type: "structure",
                                required: [ "maxWorkerCount", "mcuCount", "minWorkerCount", "scaleInPolicy", "scaleOutPolicy" ],
                                members: {
                                    maxWorkerCount: {
                                        type: "integer"
                                    },
                                    mcuCount: {
                                        type: "integer"
                                    },
                                    minWorkerCount: {
                                        type: "integer"
                                    },
                                    scaleInPolicy: {
                                        type: "structure",
                                        required: [ "cpuUtilizationPercentage" ],
                                        members: {
                                            cpuUtilizationPercentage: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    scaleOutPolicy: {
                                        type: "structure",
                                        required: [ "cpuUtilizationPercentage" ],
                                        members: {
                                            cpuUtilizationPercentage: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            },
                            provisionedCapacity: {
                                type: "structure",
                                required: [ "mcuCount", "workerCount" ],
                                members: {
                                    mcuCount: {
                                        type: "integer"
                                    },
                                    workerCount: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    connectorArn: {
                        location: "uri",
                        locationName: "connectorArn"
                    },
                    currentVersion: {
                        location: "querystring",
                        locationName: "currentVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorArn: {},
                    connectorState: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        Sa: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "list",
            member: {}
        },
        S18: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S19: {
            type: "structure",
            members: {
                creationTime: {
                    shape: "S18"
                },
                description: {},
                revision: {
                    type: "long"
                }
            }
        },
        S1e: {
            type: "structure",
            members: {
                autoScaling: {
                    type: "structure",
                    members: {
                        maxWorkerCount: {
                            type: "integer"
                        },
                        mcuCount: {
                            type: "integer"
                        },
                        minWorkerCount: {
                            type: "integer"
                        },
                        scaleInPolicy: {
                            type: "structure",
                            members: {
                                cpuUtilizationPercentage: {
                                    type: "integer"
                                }
                            }
                        },
                        scaleOutPolicy: {
                            type: "structure",
                            members: {
                                cpuUtilizationPercentage: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                },
                provisionedCapacity: {
                    type: "structure",
                    members: {
                        mcuCount: {
                            type: "integer"
                        },
                        workerCount: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S1k: {
            type: "structure",
            members: {
                apacheKafkaCluster: {
                    type: "structure",
                    members: {
                        bootstrapServers: {},
                        vpc: {
                            type: "structure",
                            members: {
                                securityGroups: {
                                    shape: "Sh"
                                },
                                subnets: {
                                    shape: "Sh"
                                }
                            }
                        }
                    }
                }
            }
        },
        S1n: {
            type: "structure",
            members: {
                authenticationType: {}
            }
        },
        S1o: {
            type: "structure",
            members: {
                encryptionType: {}
            }
        },
        S1p: {
            type: "structure",
            members: {
                workerLogDelivery: {
                    type: "structure",
                    members: {
                        cloudWatchLogs: {
                            type: "structure",
                            members: {
                                enabled: {
                                    type: "boolean"
                                },
                                logGroup: {}
                            }
                        },
                        firehose: {
                            type: "structure",
                            members: {
                                deliveryStream: {},
                                enabled: {
                                    type: "boolean"
                                }
                            }
                        },
                        s3: {
                            type: "structure",
                            members: {
                                bucket: {},
                                enabled: {
                                    type: "boolean"
                                },
                                prefix: {}
                            }
                        }
                    }
                }
            }
        },
        S1u: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    customPlugin: {
                        type: "structure",
                        members: {
                            customPluginArn: {},
                            revision: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S1x: {
            type: "structure",
            members: {
                revision: {
                    type: "long"
                },
                workerConfigurationArn: {}
            }
        },
        S20: {
            type: "structure",
            members: {
                contentType: {},
                creationTime: {
                    shape: "S18"
                },
                description: {},
                fileDescription: {
                    type: "structure",
                    members: {
                        fileMd5: {},
                        fileSize: {
                            type: "long"
                        }
                    }
                },
                location: {
                    type: "structure",
                    members: {
                        s3Location: {
                            type: "structure",
                            members: {
                                bucketArn: {},
                                fileKey: {},
                                objectVersion: {}
                            }
                        }
                    }
                },
                revision: {
                    type: "long"
                }
            }
        }
    },
    paginators: {
        ListConnectors: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "connectors"
        },
        ListCustomPlugins: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "customPlugins"
        },
        ListWorkerConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workerConfigurations"
        }
    }
};

AWS.apiLoader.services["voiceid"] = {};

AWS.VoiceID = AWS.Service.defineService("voiceid", [ "2021-09-27" ]);

AWS.apiLoader.services["voiceid"]["2021-09-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-09-27",
        endpointPrefix: "voiceid",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "Amazon Voice ID",
        serviceId: "Voice ID",
        signatureVersion: "v4",
        signingName: "voiceid",
        targetPrefix: "VoiceID",
        uid: "voice-id-2021-09-27"
    },
    operations: {
        CreateDomain: {
            input: {
                type: "structure",
                required: [ "Name", "ServerSideEncryptionConfiguration" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Description: {
                        shape: "S3"
                    },
                    Name: {
                        shape: "S4"
                    },
                    ServerSideEncryptionConfiguration: {
                        shape: "S5"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Domain: {
                        shape: "Sc"
                    }
                }
            },
            idempotent: true
        },
        DeleteDomain: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {}
                }
            }
        },
        DeleteFraudster: {
            input: {
                type: "structure",
                required: [ "DomainId", "FraudsterId" ],
                members: {
                    DomainId: {},
                    FraudsterId: {
                        shape: "Sj"
                    }
                }
            }
        },
        DeleteSpeaker: {
            input: {
                type: "structure",
                required: [ "DomainId", "SpeakerId" ],
                members: {
                    DomainId: {},
                    SpeakerId: {
                        shape: "Sl"
                    }
                }
            }
        },
        DescribeDomain: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Domain: {
                        shape: "Sc"
                    }
                }
            }
        },
        DescribeFraudster: {
            input: {
                type: "structure",
                required: [ "DomainId", "FraudsterId" ],
                members: {
                    DomainId: {},
                    FraudsterId: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Fraudster: {
                        type: "structure",
                        members: {
                            CreatedAt: {
                                type: "timestamp"
                            },
                            DomainId: {},
                            GeneratedFraudsterId: {}
                        }
                    }
                }
            }
        },
        DescribeFraudsterRegistrationJob: {
            input: {
                type: "structure",
                required: [ "DomainId", "JobId" ],
                members: {
                    DomainId: {},
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "Sv"
                    }
                }
            }
        },
        DescribeSpeaker: {
            input: {
                type: "structure",
                required: [ "DomainId", "SpeakerId" ],
                members: {
                    DomainId: {},
                    SpeakerId: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Speaker: {
                        shape: "S1b"
                    }
                }
            }
        },
        DescribeSpeakerEnrollmentJob: {
            input: {
                type: "structure",
                required: [ "DomainId", "JobId" ],
                members: {
                    DomainId: {},
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "S1h"
                    }
                }
            }
        },
        EvaluateSession: {
            input: {
                type: "structure",
                required: [ "DomainId", "SessionNameOrId" ],
                members: {
                    DomainId: {},
                    SessionNameOrId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthenticationResult: {
                        type: "structure",
                        members: {
                            AudioAggregationEndedAt: {
                                type: "timestamp"
                            },
                            AudioAggregationStartedAt: {
                                type: "timestamp"
                            },
                            AuthenticationResultId: {},
                            Configuration: {
                                type: "structure",
                                required: [ "AcceptanceThreshold" ],
                                members: {
                                    AcceptanceThreshold: {
                                        type: "integer"
                                    }
                                }
                            },
                            CustomerSpeakerId: {
                                shape: "S1c"
                            },
                            Decision: {},
                            GeneratedSpeakerId: {},
                            Score: {
                                type: "integer"
                            }
                        }
                    },
                    DomainId: {},
                    FraudDetectionResult: {
                        type: "structure",
                        members: {
                            AudioAggregationEndedAt: {
                                type: "timestamp"
                            },
                            AudioAggregationStartedAt: {
                                type: "timestamp"
                            },
                            Configuration: {
                                type: "structure",
                                required: [ "RiskThreshold" ],
                                members: {
                                    RiskThreshold: {
                                        type: "integer"
                                    }
                                }
                            },
                            Decision: {},
                            FraudDetectionResultId: {},
                            Reasons: {
                                type: "list",
                                member: {}
                            },
                            RiskDetails: {
                                type: "structure",
                                required: [ "KnownFraudsterRisk" ],
                                members: {
                                    KnownFraudsterRisk: {
                                        type: "structure",
                                        required: [ "RiskScore" ],
                                        members: {
                                            GeneratedFraudsterId: {},
                                            RiskScore: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    SessionId: {},
                    SessionName: {},
                    StreamingStatus: {}
                }
            }
        },
        ListDomains: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                Description: {
                                    shape: "S3"
                                },
                                DomainId: {},
                                DomainStatus: {},
                                Name: {
                                    shape: "S4"
                                },
                                ServerSideEncryptionConfiguration: {
                                    shape: "S5"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFraudsterRegistrationJobs: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    JobStatus: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                DomainId: {},
                                EndedAt: {
                                    type: "timestamp"
                                },
                                FailureDetails: {
                                    shape: "Sx"
                                },
                                JobId: {},
                                JobName: {
                                    shape: "S12"
                                },
                                JobProgress: {
                                    shape: "S13"
                                },
                                JobStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSpeakerEnrollmentJobs: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    JobStatus: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                DomainId: {},
                                EndedAt: {
                                    type: "timestamp"
                                },
                                FailureDetails: {
                                    shape: "Sx"
                                },
                                JobId: {},
                                JobName: {
                                    shape: "S12"
                                },
                                JobProgress: {
                                    shape: "S13"
                                },
                                JobStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSpeakers: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    SpeakerSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                CustomerSpeakerId: {
                                    shape: "S1c"
                                },
                                DomainId: {},
                                GeneratedSpeakerId: {},
                                Status: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        OptOutSpeaker: {
            input: {
                type: "structure",
                required: [ "DomainId", "SpeakerId" ],
                members: {
                    DomainId: {},
                    SpeakerId: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Speaker: {
                        shape: "S1b"
                    }
                }
            }
        },
        StartFraudsterRegistrationJob: {
            input: {
                type: "structure",
                required: [ "DataAccessRoleArn", "DomainId", "InputDataConfig", "OutputDataConfig" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DataAccessRoleArn: {},
                    DomainId: {},
                    InputDataConfig: {
                        shape: "S10"
                    },
                    JobName: {
                        shape: "S12"
                    },
                    OutputDataConfig: {
                        shape: "S16"
                    },
                    RegistrationConfig: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "Sv"
                    }
                }
            },
            idempotent: true
        },
        StartSpeakerEnrollmentJob: {
            input: {
                type: "structure",
                required: [ "DataAccessRoleArn", "DomainId", "InputDataConfig", "OutputDataConfig" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DataAccessRoleArn: {},
                    DomainId: {},
                    EnrollmentConfig: {
                        shape: "S1i"
                    },
                    InputDataConfig: {
                        shape: "S10"
                    },
                    JobName: {
                        shape: "S12"
                    },
                    OutputDataConfig: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "S1h"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "S9"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDomain: {
            input: {
                type: "structure",
                required: [ "DomainId", "Name", "ServerSideEncryptionConfiguration" ],
                members: {
                    Description: {
                        shape: "S3"
                    },
                    DomainId: {},
                    Name: {
                        shape: "S4"
                    },
                    ServerSideEncryptionConfiguration: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Domain: {
                        shape: "Sc"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "string",
            sensitive: true
        },
        S4: {
            type: "string",
            sensitive: true
        },
        S5: {
            type: "structure",
            required: [ "KmsKeyId" ],
            members: {
                KmsKeyId: {}
            }
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "S9"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S9: {
            type: "string",
            sensitive: true
        },
        Sc: {
            type: "structure",
            members: {
                Arn: {},
                CreatedAt: {
                    type: "timestamp"
                },
                Description: {
                    shape: "S3"
                },
                DomainId: {},
                DomainStatus: {},
                Name: {
                    shape: "S4"
                },
                ServerSideEncryptionConfiguration: {
                    shape: "S5"
                },
                UpdatedAt: {
                    type: "timestamp"
                }
            }
        },
        Sj: {
            type: "string",
            sensitive: true
        },
        Sl: {
            type: "string",
            sensitive: true
        },
        Sv: {
            type: "structure",
            members: {
                CreatedAt: {
                    type: "timestamp"
                },
                DataAccessRoleArn: {},
                DomainId: {},
                EndedAt: {
                    type: "timestamp"
                },
                FailureDetails: {
                    shape: "Sx"
                },
                InputDataConfig: {
                    shape: "S10"
                },
                JobId: {},
                JobName: {
                    shape: "S12"
                },
                JobProgress: {
                    shape: "S13"
                },
                JobStatus: {},
                OutputDataConfig: {
                    shape: "S16"
                },
                RegistrationConfig: {
                    shape: "S17"
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                Message: {},
                StatusCode: {
                    type: "integer"
                }
            }
        },
        S10: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                S3Uri: {}
            }
        },
        S12: {
            type: "string",
            sensitive: true
        },
        S13: {
            type: "structure",
            members: {
                PercentComplete: {
                    type: "integer"
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                KmsKeyId: {},
                S3Uri: {}
            }
        },
        S17: {
            type: "structure",
            members: {
                DuplicateRegistrationAction: {},
                FraudsterSimilarityThreshold: {
                    type: "integer"
                }
            }
        },
        S1b: {
            type: "structure",
            members: {
                CreatedAt: {
                    type: "timestamp"
                },
                CustomerSpeakerId: {
                    shape: "S1c"
                },
                DomainId: {},
                GeneratedSpeakerId: {},
                Status: {},
                UpdatedAt: {
                    type: "timestamp"
                }
            }
        },
        S1c: {
            type: "string",
            sensitive: true
        },
        S1h: {
            type: "structure",
            members: {
                CreatedAt: {
                    type: "timestamp"
                },
                DataAccessRoleArn: {},
                DomainId: {},
                EndedAt: {
                    type: "timestamp"
                },
                EnrollmentConfig: {
                    shape: "S1i"
                },
                FailureDetails: {
                    shape: "Sx"
                },
                InputDataConfig: {
                    shape: "S10"
                },
                JobId: {},
                JobName: {
                    shape: "S12"
                },
                JobProgress: {
                    shape: "S13"
                },
                JobStatus: {},
                OutputDataConfig: {
                    shape: "S16"
                }
            }
        },
        S1i: {
            type: "structure",
            members: {
                ExistingEnrollmentAction: {},
                FraudDetectionConfig: {
                    type: "structure",
                    members: {
                        FraudDetectionAction: {},
                        RiskThreshold: {
                            type: "integer"
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListFraudsterRegistrationJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSpeakerEnrollmentJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSpeakers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["wisdom"] = {};

AWS.Wisdom = AWS.Service.defineService("wisdom", [ "2020-10-19" ]);

AWS.apiLoader.services["wisdom"]["2020-10-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-10-19",
        endpointPrefix: "wisdom",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Connect Wisdom Service",
        serviceId: "Wisdom",
        signatureVersion: "v4",
        signingName: "wisdom",
        uid: "wisdom-2020-10-19"
    },
    operations: {
        CreateAssistant: {
            http: {
                requestUri: "/assistants",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    serverSideEncryptionConfiguration: {
                        shape: "S5"
                    },
                    tags: {
                        shape: "S7"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    assistant: {
                        shape: "Sc"
                    }
                }
            },
            idempotent: true
        },
        CreateAssistantAssociation: {
            http: {
                requestUri: "/assistants/{assistantId}/associations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "association", "associationType" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    association: {
                        type: "structure",
                        members: {
                            knowledgeBaseId: {}
                        },
                        union: true
                    },
                    associationType: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assistantAssociation: {
                        shape: "Sl"
                    }
                }
            },
            idempotent: true
        },
        CreateContent: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "name", "uploadId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    metadata: {
                        shape: "Sp"
                    },
                    name: {},
                    overrideLinkOutUri: {},
                    tags: {
                        shape: "S7"
                    },
                    title: {},
                    uploadId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    content: {
                        shape: "St"
                    }
                }
            },
            idempotent: true
        },
        CreateKnowledgeBase: {
            http: {
                requestUri: "/knowledgeBases",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseType", "name" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    knowledgeBaseType: {},
                    name: {},
                    renderingConfiguration: {
                        shape: "S10"
                    },
                    serverSideEncryptionConfiguration: {
                        shape: "S5"
                    },
                    sourceConfiguration: {
                        shape: "S11"
                    },
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    knowledgeBase: {
                        shape: "S16"
                    }
                }
            },
            idempotent: true
        },
        CreateSession: {
            http: {
                requestUri: "/assistants/{assistantId}/sessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "name" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1a"
                    }
                }
            },
            idempotent: true
        },
        DeleteAssistant: {
            http: {
                method: "DELETE",
                requestUri: "/assistants/{assistantId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "assistantId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteAssistantAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/assistants/{assistantId}/associations/{assistantAssociationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "assistantAssociationId", "assistantId" ],
                members: {
                    assistantAssociationId: {
                        location: "uri",
                        locationName: "assistantAssociationId"
                    },
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteContent: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteKnowledgeBase: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetAssistant: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assistant: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetAssistantAssociation: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/associations/{assistantAssociationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantAssociationId", "assistantId" ],
                members: {
                    assistantAssociationId: {
                        location: "uri",
                        locationName: "assistantAssociationId"
                    },
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assistantAssociation: {
                        shape: "Sl"
                    }
                }
            }
        },
        GetContent: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    content: {
                        shape: "St"
                    }
                }
            }
        },
        GetContentSummary: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}/summary",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contentSummary: {
                        shape: "S1r"
                    }
                }
            }
        },
        GetKnowledgeBase: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    knowledgeBase: {
                        shape: "S16"
                    }
                }
            }
        },
        GetRecommendations: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/sessions/{sessionId}/recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "sessionId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    waitTimeSeconds: {
                        location: "querystring",
                        locationName: "waitTimeSeconds",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "recommendations" ],
                members: {
                    recommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "document", "recommendationId" ],
                            members: {
                                document: {
                                    shape: "S20"
                                },
                                recommendationId: {},
                                relevanceLevel: {},
                                relevanceScore: {
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetSession: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/sessions/{sessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "sessionId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1a"
                    }
                }
            }
        },
        ListAssistantAssociations: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/associations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assistantAssociationSummaries" ],
                members: {
                    assistantAssociationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assistantArn", "assistantAssociationArn", "assistantAssociationId", "assistantId", "associationData", "associationType" ],
                            members: {
                                assistantArn: {},
                                assistantAssociationArn: {},
                                assistantAssociationId: {},
                                assistantId: {},
                                associationData: {
                                    shape: "Sm"
                                },
                                associationType: {},
                                tags: {
                                    shape: "S7"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAssistants: {
            http: {
                method: "GET",
                requestUri: "/assistants",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assistantSummaries" ],
                members: {
                    assistantSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assistantArn", "assistantId", "name", "status", "type" ],
                            members: {
                                assistantArn: {},
                                assistantId: {},
                                description: {},
                                name: {},
                                serverSideEncryptionConfiguration: {
                                    shape: "S5"
                                },
                                status: {},
                                tags: {
                                    shape: "S7"
                                },
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListContents: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "contentSummaries" ],
                members: {
                    contentSummaries: {
                        shape: "S2n"
                    },
                    nextToken: {}
                }
            }
        },
        ListKnowledgeBases: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "knowledgeBaseSummaries" ],
                members: {
                    knowledgeBaseSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "knowledgeBaseArn", "knowledgeBaseId", "knowledgeBaseType", "name", "status" ],
                            members: {
                                description: {},
                                knowledgeBaseArn: {},
                                knowledgeBaseId: {},
                                knowledgeBaseType: {},
                                name: {},
                                renderingConfiguration: {
                                    shape: "S10"
                                },
                                serverSideEncryptionConfiguration: {
                                    shape: "S5"
                                },
                                sourceConfiguration: {
                                    shape: "S11"
                                },
                                status: {},
                                tags: {
                                    shape: "S7"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S7"
                    }
                }
            }
        },
        NotifyRecommendationsReceived: {
            http: {
                requestUri: "/assistants/{assistantId}/sessions/{sessionId}/recommendations/notify",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "recommendationIds", "sessionId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    recommendationIds: {
                        shape: "S2v"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                message: {},
                                recommendationId: {}
                            }
                        }
                    },
                    recommendationIds: {
                        shape: "S2v"
                    }
                }
            },
            idempotent: true
        },
        QueryAssistant: {
            http: {
                requestUri: "/assistants/{assistantId}/query",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "queryText" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    queryText: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "results" ],
                members: {
                    nextToken: {},
                    results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "document", "resultId" ],
                            members: {
                                document: {
                                    shape: "S20"
                                },
                                relevanceScore: {
                                    type: "double"
                                },
                                resultId: {}
                            }
                        }
                    }
                }
            }
        },
        RemoveKnowledgeBaseTemplateUri: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/templateUri",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchContent: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "searchExpression" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    searchExpression: {
                        shape: "S38"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "contentSummaries" ],
                members: {
                    contentSummaries: {
                        shape: "S2n"
                    },
                    nextToken: {}
                }
            }
        },
        SearchSessions: {
            http: {
                requestUri: "/assistants/{assistantId}/searchSessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "searchExpression" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    searchExpression: {
                        shape: "S38"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "sessionSummaries" ],
                members: {
                    nextToken: {},
                    sessionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assistantArn", "assistantId", "sessionArn", "sessionId" ],
                            members: {
                                assistantArn: {},
                                assistantId: {},
                                sessionArn: {},
                                sessionId: {}
                            }
                        }
                    }
                }
            }
        },
        StartContentUpload: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/upload",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentType", "knowledgeBaseId" ],
                members: {
                    contentType: {},
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "headersToInclude", "uploadId", "url", "urlExpiry" ],
                members: {
                    headersToInclude: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    uploadId: {},
                    url: {
                        type: "string",
                        sensitive: true
                    },
                    urlExpiry: {
                        shape: "Sx"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateContent: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    metadata: {
                        shape: "Sp"
                    },
                    overrideLinkOutUri: {},
                    removeOverrideLinkOutUri: {
                        type: "boolean"
                    },
                    revisionId: {},
                    title: {},
                    uploadId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    content: {
                        shape: "St"
                    }
                }
            }
        },
        UpdateKnowledgeBaseTemplateUri: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/templateUri",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "templateUri" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    templateUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    knowledgeBase: {
                        shape: "S16"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                kmsKeyId: {}
            }
        },
        S7: {
            type: "map",
            key: {},
            value: {}
        },
        Sc: {
            type: "structure",
            required: [ "assistantArn", "assistantId", "name", "status", "type" ],
            members: {
                assistantArn: {},
                assistantId: {},
                description: {},
                name: {},
                serverSideEncryptionConfiguration: {
                    shape: "S5"
                },
                status: {},
                tags: {
                    shape: "S7"
                },
                type: {}
            }
        },
        Sl: {
            type: "structure",
            required: [ "assistantArn", "assistantAssociationArn", "assistantAssociationId", "assistantId", "associationData", "associationType" ],
            members: {
                assistantArn: {},
                assistantAssociationArn: {},
                assistantAssociationId: {},
                assistantId: {},
                associationData: {
                    shape: "Sm"
                },
                associationType: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                knowledgeBaseAssociation: {
                    type: "structure",
                    members: {
                        knowledgeBaseArn: {},
                        knowledgeBaseId: {}
                    }
                }
            },
            union: true
        },
        Sp: {
            type: "map",
            key: {},
            value: {}
        },
        St: {
            type: "structure",
            required: [ "contentArn", "contentId", "contentType", "knowledgeBaseArn", "knowledgeBaseId", "metadata", "name", "revisionId", "status", "title", "url", "urlExpiry" ],
            members: {
                contentArn: {},
                contentId: {},
                contentType: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                linkOutUri: {},
                metadata: {
                    shape: "Sp"
                },
                name: {},
                revisionId: {},
                status: {},
                tags: {
                    shape: "S7"
                },
                title: {},
                url: {
                    type: "string",
                    sensitive: true
                },
                urlExpiry: {
                    shape: "Sx"
                }
            }
        },
        Sx: {
            type: "timestamp",
            timestampFormat: "unixTimestamp"
        },
        S10: {
            type: "structure",
            members: {
                templateUri: {}
            }
        },
        S11: {
            type: "structure",
            members: {
                appIntegrations: {
                    type: "structure",
                    required: [ "appIntegrationArn", "objectFields" ],
                    members: {
                        appIntegrationArn: {},
                        objectFields: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            },
            union: true
        },
        S16: {
            type: "structure",
            required: [ "knowledgeBaseArn", "knowledgeBaseId", "knowledgeBaseType", "name", "status" ],
            members: {
                description: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                knowledgeBaseType: {},
                lastContentModificationTime: {
                    shape: "Sx"
                },
                name: {},
                renderingConfiguration: {
                    shape: "S10"
                },
                serverSideEncryptionConfiguration: {
                    shape: "S5"
                },
                sourceConfiguration: {
                    shape: "S11"
                },
                status: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        S1a: {
            type: "structure",
            required: [ "name", "sessionArn", "sessionId" ],
            members: {
                description: {},
                name: {},
                sessionArn: {},
                sessionId: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        S1r: {
            type: "structure",
            required: [ "contentArn", "contentId", "contentType", "knowledgeBaseArn", "knowledgeBaseId", "metadata", "name", "revisionId", "status", "title" ],
            members: {
                contentArn: {},
                contentId: {},
                contentType: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                metadata: {
                    shape: "Sp"
                },
                name: {},
                revisionId: {},
                status: {},
                tags: {
                    shape: "S7"
                },
                title: {}
            }
        },
        S20: {
            type: "structure",
            required: [ "contentReference" ],
            members: {
                contentReference: {
                    type: "structure",
                    members: {
                        contentArn: {},
                        contentId: {},
                        knowledgeBaseArn: {},
                        knowledgeBaseId: {}
                    }
                },
                excerpt: {
                    shape: "S22"
                },
                title: {
                    shape: "S22"
                }
            }
        },
        S22: {
            type: "structure",
            members: {
                highlights: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            beginOffsetInclusive: {
                                type: "integer"
                            },
                            endOffsetExclusive: {
                                type: "integer"
                            }
                        }
                    }
                },
                text: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S2n: {
            type: "list",
            member: {
                shape: "S1r"
            }
        },
        S2v: {
            type: "list",
            member: {}
        },
        S38: {
            type: "structure",
            required: [ "filters" ],
            members: {
                filters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "field", "operator", "value" ],
                        members: {
                            field: {},
                            operator: {},
                            value: {}
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListAssistantAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assistantAssociationSummaries"
        },
        ListAssistants: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assistantSummaries"
        },
        ListContents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "contentSummaries"
        },
        ListKnowledgeBases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "knowledgeBaseSummaries"
        },
        QueryAssistant: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "results"
        },
        SearchContent: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "contentSummaries"
        },
        SearchSessions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "sessionSummaries"
        }
    }
};

AWS.apiLoader.services["account"] = {};

AWS.Account = AWS.Service.defineService("account", [ "2021-02-01" ]);

AWS.apiLoader.services["account"]["2021-02-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-02-01",
        endpointPrefix: "account",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Account",
        serviceId: "Account",
        signatureVersion: "v4",
        signingName: "account",
        uid: "account-2021-02-01"
    },
    operations: {
        DeleteAlternateContact: {
            http: {
                requestUri: "/deleteAlternateContact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AlternateContactType" ],
                members: {
                    AccountId: {},
                    AlternateContactType: {}
                }
            },
            idempotent: true
        },
        GetAlternateContact: {
            http: {
                requestUri: "/getAlternateContact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AlternateContactType" ],
                members: {
                    AccountId: {},
                    AlternateContactType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AlternateContact: {
                        type: "structure",
                        members: {
                            AlternateContactType: {},
                            EmailAddress: {
                                shape: "S7"
                            },
                            Name: {
                                shape: "S8"
                            },
                            PhoneNumber: {
                                shape: "S9"
                            },
                            Title: {
                                shape: "Sa"
                            }
                        }
                    }
                }
            }
        },
        PutAlternateContact: {
            http: {
                requestUri: "/putAlternateContact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AlternateContactType", "EmailAddress", "Name", "PhoneNumber", "Title" ],
                members: {
                    AccountId: {},
                    AlternateContactType: {},
                    EmailAddress: {
                        shape: "S7"
                    },
                    Name: {
                        shape: "S8"
                    },
                    PhoneNumber: {
                        shape: "S9"
                    },
                    Title: {
                        shape: "Sa"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S7: {
            type: "string",
            sensitive: true
        },
        S8: {
            type: "string",
            sensitive: true
        },
        S9: {
            type: "string",
            sensitive: true
        },
        Sa: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {}
};

AWS.apiLoader.services["cloudcontrol"] = {};

AWS.CloudControl = AWS.Service.defineService("cloudcontrol", [ "2021-09-30" ]);

AWS.apiLoader.services["cloudcontrol"]["2021-09-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-09-30",
        endpointPrefix: "cloudcontrolapi",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "CloudControlApi",
        serviceFullName: "AWS Cloud Control API",
        serviceId: "CloudControl",
        signatureVersion: "v4",
        signingName: "cloudcontrolapi",
        targetPrefix: "CloudApiService",
        uid: "cloudcontrol-2021-09-30"
    },
    operations: {
        CancelResourceRequest: {
            input: {
                type: "structure",
                required: [ "RequestToken" ],
                members: {
                    RequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        CreateResource: {
            input: {
                type: "structure",
                required: [ "TypeName", "DesiredState" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DesiredState: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteResource: {
            input: {
                type: "structure",
                required: [ "TypeName", "Identifier" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            }
        },
        GetResource: {
            input: {
                type: "structure",
                required: [ "TypeName", "Identifier" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    Identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TypeName: {},
                    ResourceDescription: {
                        shape: "Sm"
                    }
                }
            }
        },
        GetResourceRequestStatus: {
            input: {
                type: "structure",
                required: [ "RequestToken" ],
                members: {
                    RequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            }
        },
        ListResourceRequests: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ResourceRequestStatusFilter: {
                        type: "structure",
                        members: {
                            Operations: {
                                type: "list",
                                member: {}
                            },
                            OperationStatuses: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceRequestStatusSummaries: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListResources: {
            input: {
                type: "structure",
                required: [ "TypeName" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceModel: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TypeName: {},
                    ResourceDescriptions: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        UpdateResource: {
            input: {
                type: "structure",
                required: [ "TypeName", "Identifier", "PatchDocument" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Identifier: {},
                    PatchDocument: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                TypeName: {},
                Identifier: {},
                RequestToken: {},
                Operation: {},
                OperationStatus: {},
                EventTime: {
                    type: "timestamp"
                },
                ResourceModel: {
                    shape: "Sa"
                },
                StatusMessage: {},
                ErrorCode: {},
                RetryAfter: {
                    type: "timestamp"
                }
            }
        },
        Sa: {
            type: "string",
            sensitive: true
        },
        Sm: {
            type: "structure",
            members: {
                Identifier: {},
                Properties: {
                    shape: "Sa"
                }
            }
        }
    },
    paginators: {
        ListResourceRequests: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    },
    waiters: {
        ResourceRequestSuccess: {
            description: "Wait until resource operation request is successful",
            operation: "GetResourceRequestStatus",
            delay: 5,
            maxAttempts: 720,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "ProgressEvent.OperationStatus",
                expected: "SUCCESS"
            }, {
                state: "failure",
                matcher: "path",
                argument: "ProgressEvent.OperationStatus",
                expected: "FAILED"
            }, {
                state: "failure",
                matcher: "path",
                argument: "ProgressEvent.OperationStatus",
                expected: "CANCEL_COMPLETE"
            } ]
        }
    }
};

AWS.apiLoader.services["grafana"] = {};

AWS.Grafana = AWS.Service.defineService("grafana", [ "2020-08-18" ]);

AWS.apiLoader.services["grafana"]["2020-08-18"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-18",
        endpointPrefix: "grafana",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Managed Grafana",
        serviceId: "grafana",
        signatureVersion: "v4",
        signingName: "grafana",
        uid: "grafana-2020-08-18"
    },
    operations: {
        AssociateLicense: {
            http: {
                requestUri: "/workspaces/{workspaceId}/licenses/{licenseType}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "licenseType", "workspaceId" ],
                members: {
                    licenseType: {
                        location: "uri",
                        locationName: "licenseType"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            }
        },
        CreateWorkspace: {
            http: {
                requestUri: "/workspaces",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "accountAccessType", "authenticationProviders", "permissionType" ],
                members: {
                    accountAccessType: {},
                    authenticationProviders: {
                        shape: "S8"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    organizationRoleName: {
                        shape: "Sl"
                    },
                    permissionType: {},
                    stackSetName: {},
                    workspaceDataSources: {
                        shape: "Sc"
                    },
                    workspaceDescription: {
                        shape: "Se"
                    },
                    workspaceName: {
                        shape: "Si"
                    },
                    workspaceNotificationDestinations: {
                        shape: "Sj"
                    },
                    workspaceOrganizationalUnits: {
                        shape: "Sm"
                    },
                    workspaceRoleArn: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            },
            idempotent: true
        },
        DeleteWorkspace: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            },
            idempotent: true
        },
        DescribeWorkspace: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            }
        },
        DescribeWorkspaceAuthentication: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/authentication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "authentication" ],
                members: {
                    authentication: {
                        shape: "S11"
                    }
                }
            }
        },
        DisassociateLicense: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/licenses/{licenseType}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "licenseType", "workspaceId" ],
                members: {
                    licenseType: {
                        location: "uri",
                        locationName: "licenseType"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            }
        },
        ListPermissions: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/permissions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    groupId: {
                        location: "querystring",
                        locationName: "groupId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    userId: {
                        location: "querystring",
                        locationName: "userId"
                    },
                    userType: {
                        location: "querystring",
                        locationName: "userType"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "permissions" ],
                members: {
                    nextToken: {},
                    permissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "role", "user" ],
                            members: {
                                role: {},
                                user: {
                                    shape: "S1s"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListWorkspaces: {
            http: {
                method: "GET",
                requestUri: "/workspaces",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspaces" ],
                members: {
                    nextToken: {},
                    workspaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "authentication", "created", "endpoint", "grafanaVersion", "id", "modified", "status" ],
                            members: {
                                authentication: {
                                    shape: "S7"
                                },
                                created: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Se"
                                },
                                endpoint: {},
                                grafanaVersion: {},
                                id: {},
                                modified: {
                                    type: "timestamp"
                                },
                                name: {
                                    shape: "Si"
                                },
                                notificationDestinations: {
                                    shape: "Sj"
                                },
                                status: {}
                            }
                        }
                    }
                }
            }
        },
        UpdatePermissions: {
            http: {
                method: "PATCH",
                requestUri: "/workspaces/{workspaceId}/permissions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "updateInstructionBatch", "workspaceId" ],
                members: {
                    updateInstructionBatch: {
                        type: "list",
                        member: {
                            shape: "S20"
                        }
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "errors" ],
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "causedBy", "code", "message" ],
                            members: {
                                causedBy: {
                                    shape: "S20"
                                },
                                code: {
                                    type: "integer"
                                },
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        UpdateWorkspace: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    accountAccessType: {},
                    organizationRoleName: {
                        shape: "Sl"
                    },
                    permissionType: {},
                    stackSetName: {},
                    workspaceDataSources: {
                        shape: "Sc"
                    },
                    workspaceDescription: {
                        shape: "Se"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    workspaceName: {
                        shape: "Si"
                    },
                    workspaceNotificationDestinations: {
                        shape: "Sj"
                    },
                    workspaceOrganizationalUnits: {
                        shape: "Sm"
                    },
                    workspaceRoleArn: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            }
        },
        UpdateWorkspaceAuthentication: {
            http: {
                requestUri: "/workspaces/{workspaceId}/authentication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "authenticationProviders", "workspaceId" ],
                members: {
                    authenticationProviders: {
                        shape: "S8"
                    },
                    samlConfiguration: {
                        shape: "S15"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "authentication" ],
                members: {
                    authentication: {
                        shape: "S11"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "authentication", "created", "dataSources", "endpoint", "grafanaVersion", "id", "modified", "status" ],
            members: {
                accountAccessType: {},
                authentication: {
                    shape: "S7"
                },
                created: {
                    type: "timestamp"
                },
                dataSources: {
                    shape: "Sc"
                },
                description: {
                    shape: "Se"
                },
                endpoint: {},
                freeTrialConsumed: {
                    type: "boolean"
                },
                freeTrialExpiration: {
                    type: "timestamp"
                },
                grafanaVersion: {},
                id: {},
                licenseExpiration: {
                    type: "timestamp"
                },
                licenseType: {},
                modified: {
                    type: "timestamp"
                },
                name: {
                    shape: "Si"
                },
                notificationDestinations: {
                    shape: "Sj"
                },
                organizationRoleName: {
                    shape: "Sl"
                },
                organizationalUnits: {
                    shape: "Sm"
                },
                permissionType: {},
                stackSetName: {},
                status: {},
                workspaceRoleArn: {
                    shape: "Sr"
                }
            }
        },
        S7: {
            type: "structure",
            required: [ "providers" ],
            members: {
                providers: {
                    shape: "S8"
                },
                samlConfigurationStatus: {}
            }
        },
        S8: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "list",
            member: {}
        },
        Se: {
            type: "string",
            sensitive: true
        },
        Si: {
            type: "string",
            sensitive: true
        },
        Sj: {
            type: "list",
            member: {}
        },
        Sl: {
            type: "string",
            sensitive: true
        },
        Sm: {
            type: "list",
            member: {},
            sensitive: true
        },
        Sr: {
            type: "string",
            sensitive: true
        },
        S11: {
            type: "structure",
            required: [ "providers" ],
            members: {
                awsSso: {
                    type: "structure",
                    members: {
                        ssoClientId: {}
                    }
                },
                providers: {
                    shape: "S8"
                },
                saml: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        configuration: {
                            shape: "S15"
                        },
                        status: {}
                    }
                }
            }
        },
        S15: {
            type: "structure",
            required: [ "idpMetadata" ],
            members: {
                allowedOrganizations: {
                    type: "list",
                    member: {}
                },
                assertionAttributes: {
                    type: "structure",
                    members: {
                        email: {},
                        groups: {},
                        login: {},
                        name: {},
                        org: {},
                        role: {}
                    }
                },
                idpMetadata: {
                    type: "structure",
                    members: {
                        url: {},
                        xml: {}
                    },
                    union: true
                },
                loginValidityDuration: {
                    type: "integer"
                },
                roleValues: {
                    type: "structure",
                    members: {
                        admin: {
                            shape: "S1f"
                        },
                        editor: {
                            shape: "S1f"
                        }
                    }
                }
            }
        },
        S1f: {
            type: "list",
            member: {}
        },
        S1s: {
            type: "structure",
            required: [ "id", "type" ],
            members: {
                id: {},
                type: {}
            }
        },
        S20: {
            type: "structure",
            required: [ "action", "role", "users" ],
            members: {
                action: {},
                role: {},
                users: {
                    type: "list",
                    member: {
                        shape: "S1s"
                    }
                }
            }
        }
    },
    paginators: {
        ListPermissions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "permissions"
        },
        ListWorkspaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workspaces"
        }
    }
};

AWS.apiLoader.services["panorama"] = {};

AWS.Panorama = AWS.Service.defineService("panorama", [ "2019-07-24" ]);

AWS.apiLoader.services["panorama"]["2019-07-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-07-24",
        endpointPrefix: "panorama",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Panorama",
        serviceFullName: "AWS Panorama",
        serviceId: "Panorama",
        signatureVersion: "v4",
        signingName: "panorama",
        uid: "panorama-2019-07-24"
    },
    operations: {
        CreateApplicationInstance: {
            http: {
                requestUri: "/application-instances"
            },
            input: {
                type: "structure",
                required: [ "ManifestPayload", "DefaultRuntimeContextDevice" ],
                members: {
                    Name: {},
                    Description: {},
                    ManifestPayload: {
                        shape: "S4"
                    },
                    ManifestOverridesPayload: {
                        shape: "S6"
                    },
                    ApplicationInstanceIdToReplace: {},
                    RuntimeRoleArn: {},
                    DefaultRuntimeContextDevice: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {}
                }
            }
        },
        CreateJobForDevices: {
            http: {
                requestUri: "/jobs"
            },
            input: {
                type: "structure",
                required: [ "DeviceIds", "DeviceJobConfig", "JobType" ],
                members: {
                    DeviceIds: {
                        type: "list",
                        member: {}
                    },
                    DeviceJobConfig: {
                        type: "structure",
                        members: {
                            OTAJobConfig: {
                                type: "structure",
                                required: [ "ImageVersion" ],
                                members: {
                                    ImageVersion: {}
                                }
                            }
                        }
                    },
                    JobType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Jobs" ],
                members: {
                    Jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobId: {},
                                DeviceId: {}
                            }
                        }
                    }
                }
            }
        },
        CreateNodeFromTemplateJob: {
            http: {
                requestUri: "/packages/template-job"
            },
            input: {
                type: "structure",
                required: [ "TemplateType", "OutputPackageName", "OutputPackageVersion", "NodeName", "TemplateParameters" ],
                members: {
                    TemplateType: {},
                    OutputPackageName: {},
                    OutputPackageVersion: {},
                    NodeName: {},
                    NodeDescription: {},
                    TemplateParameters: {
                        shape: "Sv"
                    },
                    JobTags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            }
        },
        CreatePackage: {
            http: {
                requestUri: "/packages"
            },
            input: {
                type: "structure",
                required: [ "PackageName" ],
                members: {
                    PackageName: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "StorageLocation" ],
                members: {
                    PackageId: {},
                    Arn: {},
                    StorageLocation: {
                        shape: "S16"
                    }
                }
            }
        },
        CreatePackageImportJob: {
            http: {
                requestUri: "/packages/import-jobs"
            },
            input: {
                type: "structure",
                required: [ "JobType", "InputConfig", "OutputConfig", "ClientToken" ],
                members: {
                    JobType: {},
                    InputConfig: {
                        shape: "S1b"
                    },
                    OutputConfig: {
                        shape: "S1h"
                    },
                    ClientToken: {},
                    JobTags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            }
        },
        DeleteDevice: {
            http: {
                method: "DELETE",
                requestUri: "/devices/{DeviceId}"
            },
            input: {
                type: "structure",
                required: [ "DeviceId" ],
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceId: {}
                }
            }
        },
        DeletePackage: {
            http: {
                method: "DELETE",
                requestUri: "/packages/{PackageId}"
            },
            input: {
                type: "structure",
                required: [ "PackageId" ],
                members: {
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    },
                    ForceDelete: {
                        location: "querystring",
                        locationName: "ForceDelete",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterPackageVersion: {
            http: {
                method: "DELETE",
                requestUri: "/packages/{PackageId}/versions/{PackageVersion}/patch/{PatchVersion}"
            },
            input: {
                type: "structure",
                required: [ "PackageId", "PackageVersion", "PatchVersion" ],
                members: {
                    OwnerAccount: {
                        location: "querystring",
                        locationName: "OwnerAccount"
                    },
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    },
                    PackageVersion: {
                        location: "uri",
                        locationName: "PackageVersion"
                    },
                    PatchVersion: {
                        location: "uri",
                        locationName: "PatchVersion"
                    },
                    UpdatedLatestPatchVersion: {
                        location: "querystring",
                        locationName: "UpdatedLatestPatchVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeApplicationInstance: {
            http: {
                method: "GET",
                requestUri: "/application-instances/{applicationInstanceId}"
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "applicationInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Description: {},
                    DefaultRuntimeContextDevice: {},
                    DefaultRuntimeContextDeviceName: {},
                    ApplicationInstanceIdToReplace: {},
                    RuntimeRoleArn: {},
                    Status: {},
                    HealthStatus: {},
                    StatusDescription: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    ApplicationInstanceId: {},
                    Arn: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        DescribeApplicationInstanceDetails: {
            http: {
                method: "GET",
                requestUri: "/application-instances/{applicationInstanceId}/details"
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "applicationInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Description: {},
                    DefaultRuntimeContextDevice: {},
                    ManifestPayload: {
                        shape: "S4"
                    },
                    ManifestOverridesPayload: {
                        shape: "S6"
                    },
                    ApplicationInstanceIdToReplace: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    ApplicationInstanceId: {}
                }
            }
        },
        DescribeDevice: {
            http: {
                method: "GET",
                requestUri: "/devices/{DeviceId}"
            },
            input: {
                type: "structure",
                required: [ "DeviceId" ],
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceId: {},
                    Name: {},
                    Arn: {},
                    Description: {},
                    Type: {},
                    DeviceConnectionStatus: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    ProvisioningStatus: {},
                    LatestSoftware: {},
                    CurrentSoftware: {},
                    SerialNumber: {},
                    Tags: {
                        shape: "Sb"
                    },
                    NetworkingConfiguration: {
                        shape: "S2f"
                    },
                    CurrentNetworkingStatus: {
                        type: "structure",
                        members: {
                            Ethernet0Status: {
                                shape: "S2p"
                            },
                            Ethernet1Status: {
                                shape: "S2p"
                            }
                        }
                    },
                    LeaseExpirationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeDeviceJob: {
            http: {
                method: "GET",
                requestUri: "/jobs/{JobId}"
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    DeviceId: {},
                    DeviceArn: {},
                    DeviceName: {},
                    DeviceType: {},
                    ImageVersion: {},
                    Status: {},
                    CreatedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeNode: {
            http: {
                method: "GET",
                requestUri: "/nodes/{NodeId}"
            },
            input: {
                type: "structure",
                required: [ "NodeId" ],
                members: {
                    NodeId: {
                        location: "uri",
                        locationName: "NodeId"
                    },
                    OwnerAccount: {
                        location: "querystring",
                        locationName: "OwnerAccount"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "NodeId", "Name", "Category", "OwnerAccount", "PackageName", "PackageId", "PackageVersion", "PatchVersion", "NodeInterface", "Description", "CreatedTime", "LastUpdatedTime" ],
                members: {
                    NodeId: {},
                    Name: {},
                    Category: {},
                    OwnerAccount: {},
                    PackageName: {},
                    PackageId: {},
                    PackageArn: {},
                    PackageVersion: {},
                    PatchVersion: {},
                    NodeInterface: {
                        type: "structure",
                        required: [ "Inputs", "Outputs" ],
                        members: {
                            Inputs: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Description: {},
                                        Type: {},
                                        DefaultValue: {},
                                        MaxConnections: {
                                            type: "integer"
                                        }
                                    }
                                }
                            },
                            Outputs: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Description: {},
                                        Type: {}
                                    }
                                }
                            }
                        }
                    },
                    AssetName: {},
                    Description: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeNodeFromTemplateJob: {
            http: {
                method: "GET",
                requestUri: "/packages/template-job/{JobId}"
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobId", "Status", "StatusMessage", "CreatedTime", "LastUpdatedTime", "OutputPackageName", "OutputPackageVersion", "NodeName", "TemplateType", "TemplateParameters" ],
                members: {
                    JobId: {},
                    Status: {},
                    StatusMessage: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    OutputPackageName: {},
                    OutputPackageVersion: {},
                    NodeName: {},
                    NodeDescription: {},
                    TemplateType: {},
                    TemplateParameters: {
                        shape: "Sv"
                    },
                    JobTags: {
                        shape: "Sy"
                    }
                }
            }
        },
        DescribePackage: {
            http: {
                method: "GET",
                requestUri: "/packages/metadata/{PackageId}"
            },
            input: {
                type: "structure",
                required: [ "PackageId" ],
                members: {
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "PackageId", "PackageName", "Arn", "StorageLocation", "CreatedTime", "Tags" ],
                members: {
                    PackageId: {},
                    PackageName: {},
                    Arn: {},
                    StorageLocation: {
                        shape: "S16"
                    },
                    ReadAccessPrincipalArns: {
                        shape: "S3i"
                    },
                    WriteAccessPrincipalArns: {
                        shape: "S3i"
                    },
                    CreatedTime: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        DescribePackageImportJob: {
            http: {
                method: "GET",
                requestUri: "/packages/import-jobs/{JobId}"
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobId", "JobType", "InputConfig", "OutputConfig", "Output", "CreatedTime", "LastUpdatedTime", "Status", "StatusMessage" ],
                members: {
                    JobId: {},
                    ClientToken: {},
                    JobType: {},
                    InputConfig: {
                        shape: "S1b"
                    },
                    OutputConfig: {
                        shape: "S1h"
                    },
                    Output: {
                        type: "structure",
                        required: [ "PackageId", "PackageVersion", "PatchVersion", "OutputS3Location" ],
                        members: {
                            PackageId: {},
                            PackageVersion: {},
                            PatchVersion: {},
                            OutputS3Location: {
                                type: "structure",
                                required: [ "BucketName", "ObjectKey" ],
                                members: {
                                    BucketName: {},
                                    ObjectKey: {}
                                }
                            }
                        }
                    },
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Status: {},
                    StatusMessage: {},
                    JobTags: {
                        shape: "Sy"
                    }
                }
            }
        },
        DescribePackageVersion: {
            http: {
                method: "GET",
                requestUri: "/packages/metadata/{PackageId}/versions/{PackageVersion}"
            },
            input: {
                type: "structure",
                required: [ "PackageId", "PackageVersion" ],
                members: {
                    OwnerAccount: {
                        location: "querystring",
                        locationName: "OwnerAccount"
                    },
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    },
                    PackageVersion: {
                        location: "uri",
                        locationName: "PackageVersion"
                    },
                    PatchVersion: {
                        location: "querystring",
                        locationName: "PatchVersion"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "PackageId", "PackageName", "PackageVersion", "PatchVersion", "IsLatestPatch", "Status" ],
                members: {
                    OwnerAccount: {},
                    PackageId: {},
                    PackageArn: {},
                    PackageName: {},
                    PackageVersion: {},
                    PatchVersion: {},
                    IsLatestPatch: {
                        type: "boolean"
                    },
                    Status: {},
                    StatusDescription: {},
                    RegisteredTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        ListApplicationInstanceDependencies: {
            http: {
                method: "GET",
                requestUri: "/application-instances/{applicationInstanceId}/package-dependencies"
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "applicationInstanceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageObjects: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "PackageVersion", "PatchVersion" ],
                            members: {
                                Name: {},
                                PackageVersion: {},
                                PatchVersion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListApplicationInstanceNodeInstances: {
            http: {
                method: "GET",
                requestUri: "/application-instances/{applicationInstanceId}/node-instances"
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "applicationInstanceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NodeInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "NodeInstanceId", "CurrentStatus" ],
                            members: {
                                NodeInstanceId: {},
                                NodeId: {},
                                PackageName: {},
                                PackageVersion: {},
                                PackagePatchVersion: {},
                                NodeName: {},
                                CurrentStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListApplicationInstances: {
            http: {
                method: "GET",
                requestUri: "/application-instances"
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "querystring",
                        locationName: "deviceId"
                    },
                    StatusFilter: {
                        location: "querystring",
                        locationName: "statusFilter"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                ApplicationInstanceId: {},
                                DefaultRuntimeContextDevice: {},
                                DefaultRuntimeContextDeviceName: {},
                                Description: {},
                                Status: {},
                                HealthStatus: {},
                                StatusDescription: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Arn: {},
                                Tags: {
                                    shape: "Sb"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDevices: {
            http: {
                method: "GET",
                requestUri: "/devices"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Devices" ],
                members: {
                    Devices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeviceId: {},
                                Name: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                ProvisioningStatus: {},
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                LeaseExpirationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDevicesJobs: {
            http: {
                method: "GET",
                requestUri: "/jobs"
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "querystring",
                        locationName: "DeviceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeviceName: {},
                                DeviceId: {},
                                JobId: {},
                                CreatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNodeFromTemplateJobs: {
            http: {
                method: "GET",
                requestUri: "/packages/template-job"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "NodeFromTemplateJobs" ],
                members: {
                    NodeFromTemplateJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobId: {},
                                TemplateType: {},
                                Status: {},
                                StatusMessage: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                NodeName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNodes: {
            http: {
                method: "GET",
                requestUri: "/nodes"
            },
            input: {
                type: "structure",
                members: {
                    Category: {
                        location: "querystring",
                        locationName: "category"
                    },
                    OwnerAccount: {
                        location: "querystring",
                        locationName: "ownerAccount"
                    },
                    PackageName: {
                        location: "querystring",
                        locationName: "packageName"
                    },
                    PackageVersion: {
                        location: "querystring",
                        locationName: "packageVersion"
                    },
                    PatchVersion: {
                        location: "querystring",
                        locationName: "patchVersion"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Nodes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "NodeId", "Name", "Category", "PackageName", "PackageId", "PackageVersion", "PatchVersion", "CreatedTime" ],
                            members: {
                                NodeId: {},
                                Name: {},
                                Category: {},
                                OwnerAccount: {},
                                PackageName: {},
                                PackageId: {},
                                PackageArn: {},
                                PackageVersion: {},
                                PatchVersion: {},
                                Description: {},
                                CreatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPackageImportJobs: {
            http: {
                method: "GET",
                requestUri: "/packages/import-jobs"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "PackageImportJobs" ],
                members: {
                    PackageImportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobId: {},
                                JobType: {},
                                Status: {},
                                StatusMessage: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPackages: {
            http: {
                method: "GET",
                requestUri: "/packages"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Packages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PackageId: {},
                                PackageName: {},
                                Arn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Sb"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        ProvisionDevice: {
            http: {
                requestUri: "/devices"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    Tags: {
                        shape: "Sb"
                    },
                    NetworkingConfiguration: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "Status" ],
                members: {
                    DeviceId: {},
                    Arn: {},
                    Status: {},
                    Certificates: {
                        type: "blob"
                    },
                    IotThingName: {}
                }
            }
        },
        RegisterPackageVersion: {
            http: {
                method: "PUT",
                requestUri: "/packages/{PackageId}/versions/{PackageVersion}/patch/{PatchVersion}"
            },
            input: {
                type: "structure",
                required: [ "PackageId", "PackageVersion", "PatchVersion" ],
                members: {
                    OwnerAccount: {},
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    },
                    PackageVersion: {
                        location: "uri",
                        locationName: "PackageVersion"
                    },
                    PatchVersion: {
                        location: "uri",
                        locationName: "PatchVersion"
                    },
                    MarkLatest: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveApplicationInstance: {
            http: {
                method: "DELETE",
                requestUri: "/application-instances/{applicationInstanceId}"
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "applicationInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDeviceMetadata: {
            http: {
                method: "PUT",
                requestUri: "/devices/{DeviceId}"
            },
            input: {
                type: "structure",
                required: [ "DeviceId" ],
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceId: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                PayloadData: {}
            },
            union: true
        },
        S6: {
            type: "structure",
            members: {
                PayloadData: {}
            },
            union: true
        },
        Sb: {
            type: "map",
            key: {},
            value: {}
        },
        Sv: {
            type: "map",
            key: {},
            value: {
                type: "string",
                sensitive: true
            }
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ResourceType", "Tags" ],
                members: {
                    ResourceType: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "Bucket", "RepoPrefixLocation", "GeneratedPrefixLocation", "BinaryPrefixLocation", "ManifestPrefixLocation" ],
            members: {
                Bucket: {},
                RepoPrefixLocation: {},
                GeneratedPrefixLocation: {},
                BinaryPrefixLocation: {},
                ManifestPrefixLocation: {}
            }
        },
        S1b: {
            type: "structure",
            members: {
                PackageVersionInputConfig: {
                    type: "structure",
                    required: [ "S3Location" ],
                    members: {
                        S3Location: {
                            type: "structure",
                            required: [ "BucketName", "ObjectKey" ],
                            members: {
                                Region: {},
                                BucketName: {},
                                ObjectKey: {}
                            }
                        }
                    }
                }
            }
        },
        S1h: {
            type: "structure",
            members: {
                PackageVersionOutputConfig: {
                    type: "structure",
                    required: [ "PackageName", "PackageVersion" ],
                    members: {
                        PackageName: {},
                        PackageVersion: {},
                        MarkLatest: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S2f: {
            type: "structure",
            members: {
                Ethernet0: {
                    shape: "S2g"
                },
                Ethernet1: {
                    shape: "S2g"
                }
            }
        },
        S2g: {
            type: "structure",
            required: [ "ConnectionType" ],
            members: {
                ConnectionType: {},
                StaticIpConnectionInfo: {
                    type: "structure",
                    required: [ "IpAddress", "Mask", "Dns", "DefaultGateway" ],
                    members: {
                        IpAddress: {},
                        Mask: {},
                        Dns: {
                            type: "list",
                            member: {}
                        },
                        DefaultGateway: {}
                    }
                }
            }
        },
        S2p: {
            type: "structure",
            members: {
                IpAddress: {},
                ConnectionStatus: {},
                HwAddress: {}
            }
        },
        S3i: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListApplicationInstanceDependencies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListApplicationInstanceNodeInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListApplicationInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDevicesJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNodeFromTemplateJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNodes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPackageImportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPackages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["chimesdkmeetings"] = {};

AWS.ChimeSDKMeetings = AWS.Service.defineService("chimesdkmeetings", [ "2021-07-15" ]);

AWS.apiLoader.services["chimesdkmeetings"]["2021-07-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-07-15",
        endpointPrefix: "meetings-chime",
        protocol: "rest-json",
        serviceFullName: "Amazon Chime SDK Meetings",
        serviceId: "Chime SDK Meetings",
        signatureVersion: "v4",
        signingName: "chime",
        uid: "chime-sdk-meetings-2021-07-15"
    },
    operations: {
        BatchCreateAttendee: {
            http: {
                requestUri: "/meetings/{MeetingId}/attendees?operation=batch-create"
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "Attendees" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    Attendees: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendees: {
                        shape: "S7"
                    },
                    Errors: {
                        shape: "Sa"
                    }
                }
            }
        },
        CreateAttendee: {
            http: {
                requestUri: "/meetings/{MeetingId}/attendees"
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "ExternalUserId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    ExternalUserId: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendee: {
                        shape: "S8"
                    }
                }
            }
        },
        CreateMeeting: {
            http: {
                requestUri: "/meetings"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "MediaRegion", "ExternalMeetingId" ],
                members: {
                    ClientRequestToken: {
                        shape: "Sf",
                        idempotencyToken: true
                    },
                    MediaRegion: {},
                    MeetingHostId: {
                        shape: "S5"
                    },
                    ExternalMeetingId: {
                        shape: "Sg"
                    },
                    NotificationsConfiguration: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "Sk"
                    }
                }
            }
        },
        CreateMeetingWithAttendees: {
            http: {
                requestUri: "/meetings?operation=create-attendees"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "MediaRegion", "ExternalMeetingId", "Attendees" ],
                members: {
                    ClientRequestToken: {
                        shape: "Sf",
                        idempotencyToken: true
                    },
                    MediaRegion: {},
                    MeetingHostId: {
                        shape: "S5"
                    },
                    ExternalMeetingId: {
                        shape: "Sg"
                    },
                    NotificationsConfiguration: {
                        shape: "Sh"
                    },
                    Attendees: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "Sk"
                    },
                    Attendees: {
                        shape: "S7"
                    },
                    Errors: {
                        shape: "Sa"
                    }
                }
            }
        },
        DeleteAttendee: {
            http: {
                method: "DELETE",
                requestUri: "/meetings/{MeetingId}/attendees/{AttendeeId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "AttendeeId"
                    }
                }
            }
        },
        DeleteMeeting: {
            http: {
                method: "DELETE",
                requestUri: "/meetings/{MeetingId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    }
                }
            }
        },
        GetAttendee: {
            http: {
                method: "GET",
                requestUri: "/meetings/{MeetingId}/attendees/{AttendeeId}"
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "AttendeeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendee: {
                        shape: "S8"
                    }
                }
            }
        },
        GetMeeting: {
            http: {
                method: "GET",
                requestUri: "/meetings/{MeetingId}"
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "Sk"
                    }
                }
            }
        },
        ListAttendees: {
            http: {
                method: "GET",
                requestUri: "/meetings/{MeetingId}/attendees",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendees: {
                        shape: "S7"
                    },
                    NextToken: {}
                }
            }
        },
        StartMeetingTranscription: {
            http: {
                requestUri: "/meetings/{MeetingId}/transcription?operation=start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "TranscriptionConfiguration" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    TranscriptionConfiguration: {
                        type: "structure",
                        members: {
                            EngineTranscribeSettings: {
                                type: "structure",
                                required: [ "LanguageCode" ],
                                members: {
                                    LanguageCode: {},
                                    VocabularyFilterMethod: {},
                                    VocabularyFilterName: {},
                                    VocabularyName: {},
                                    Region: {}
                                }
                            },
                            EngineTranscribeMedicalSettings: {
                                type: "structure",
                                required: [ "LanguageCode", "Specialty", "Type" ],
                                members: {
                                    LanguageCode: {},
                                    Specialty: {},
                                    Type: {},
                                    VocabularyName: {},
                                    Region: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        StopMeetingTranscription: {
            http: {
                requestUri: "/meetings/{MeetingId}/transcription?operation=stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "ExternalUserId" ],
            members: {
                ExternalUserId: {
                    shape: "S5"
                }
            }
        },
        S5: {
            type: "string",
            sensitive: true
        },
        S7: {
            type: "list",
            member: {
                shape: "S8"
            }
        },
        S8: {
            type: "structure",
            members: {
                ExternalUserId: {
                    shape: "S5"
                },
                AttendeeId: {},
                JoinToken: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ExternalUserId: {
                        shape: "S5"
                    },
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        Sf: {
            type: "string",
            sensitive: true
        },
        Sg: {
            type: "string",
            sensitive: true
        },
        Sh: {
            type: "structure",
            members: {
                LambdaFunctionArn: {
                    shape: "Si"
                },
                SnsTopicArn: {
                    shape: "Si"
                },
                SqsQueueArn: {
                    shape: "Si"
                }
            }
        },
        Si: {
            type: "string",
            sensitive: true
        },
        Sk: {
            type: "structure",
            members: {
                MeetingId: {},
                MeetingHostId: {
                    shape: "S5"
                },
                ExternalMeetingId: {
                    shape: "Sg"
                },
                MediaRegion: {},
                MediaPlacement: {
                    type: "structure",
                    members: {
                        AudioHostUrl: {},
                        AudioFallbackUrl: {},
                        SignalingUrl: {},
                        TurnControlUrl: {},
                        ScreenDataUrl: {},
                        ScreenViewingUrl: {},
                        ScreenSharingUrl: {},
                        EventIngestionUrl: {}
                    }
                }
            }
        }
    },
    paginators: {
        ListAttendees: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};