AWS.apiLoader.services["pinpointemail"] = {};

AWS.PinpointEmail = AWS.Service.defineService("pinpointemail", [ "2018-07-26" ]);

AWS.apiLoader.services["pinpointemail"]["2018-07-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-07-26",
        endpointPrefix: "email",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Pinpoint Email",
        serviceFullName: "Amazon Pinpoint Email Service",
        serviceId: "Pinpoint Email",
        signatureVersion: "v4",
        signingName: "ses",
        uid: "pinpoint-email-2018-07-26"
    },
    operations: {
        CreateConfigurationSet: {
            http: {
                requestUri: "/v1/email/configuration-sets"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {},
                    TrackingOptions: {
                        shape: "S3"
                    },
                    DeliveryOptions: {
                        shape: "S5"
                    },
                    ReputationOptions: {
                        shape: "S8"
                    },
                    SendingOptions: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateConfigurationSetEventDestination: {
            http: {
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName", "EventDestination" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {},
                    EventDestination: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDedicatedIpPool: {
            http: {
                requestUri: "/v1/email/dedicated-ip-pools"
            },
            input: {
                type: "structure",
                required: [ "PoolName" ],
                members: {
                    PoolName: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDeliverabilityTestReport: {
            http: {
                requestUri: "/v1/email/deliverability-dashboard/test"
            },
            input: {
                type: "structure",
                required: [ "FromEmailAddress", "Content" ],
                members: {
                    ReportName: {},
                    FromEmailAddress: {},
                    Content: {
                        shape: "S12"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ReportId", "DeliverabilityTestStatus" ],
                members: {
                    ReportId: {},
                    DeliverabilityTestStatus: {}
                }
            }
        },
        CreateEmailIdentity: {
            http: {
                requestUri: "/v1/email/identities"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityType: {},
                    VerifiedForSendingStatus: {
                        type: "boolean"
                    },
                    DkimAttributes: {
                        shape: "S1k"
                    }
                }
            }
        },
        DeleteConfigurationSet: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSetEventDestination: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDedicatedIpPool: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/dedicated-ip-pools/{PoolName}"
            },
            input: {
                type: "structure",
                required: [ "PoolName" ],
                members: {
                    PoolName: {
                        location: "uri",
                        locationName: "PoolName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEmailIdentity: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/identities/{EmailIdentity}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccount: {
            http: {
                method: "GET",
                requestUri: "/v1/email/account"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    SendQuota: {
                        type: "structure",
                        members: {
                            Max24HourSend: {
                                type: "double"
                            },
                            MaxSendRate: {
                                type: "double"
                            },
                            SentLast24Hours: {
                                type: "double"
                            }
                        }
                    },
                    SendingEnabled: {
                        type: "boolean"
                    },
                    DedicatedIpAutoWarmupEnabled: {
                        type: "boolean"
                    },
                    EnforcementStatus: {},
                    ProductionAccessEnabled: {
                        type: "boolean"
                    }
                }
            }
        },
        GetBlacklistReports: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/blacklist-report"
            },
            input: {
                type: "structure",
                required: [ "BlacklistItemNames" ],
                members: {
                    BlacklistItemNames: {
                        location: "querystring",
                        locationName: "BlacklistItemNames",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "BlacklistReport" ],
                members: {
                    BlacklistReport: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    RblName: {},
                                    ListingTime: {
                                        type: "timestamp"
                                    },
                                    Description: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        GetConfigurationSet: {
            http: {
                method: "GET",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetName: {},
                    TrackingOptions: {
                        shape: "S3"
                    },
                    DeliveryOptions: {
                        shape: "S5"
                    },
                    ReputationOptions: {
                        shape: "S8"
                    },
                    SendingOptions: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetConfigurationSetEventDestinations: {
            http: {
                method: "GET",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventDestinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "MatchingEventTypes" ],
                            members: {
                                Name: {},
                                Enabled: {
                                    type: "boolean"
                                },
                                MatchingEventTypes: {
                                    shape: "Sk"
                                },
                                KinesisFirehoseDestination: {
                                    shape: "Sm"
                                },
                                CloudWatchDestination: {
                                    shape: "So"
                                },
                                SnsDestination: {
                                    shape: "Su"
                                },
                                PinpointDestination: {
                                    shape: "Sv"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetDedicatedIp: {
            http: {
                method: "GET",
                requestUri: "/v1/email/dedicated-ips/{IP}"
            },
            input: {
                type: "structure",
                required: [ "Ip" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIp: {
                        shape: "S2m"
                    }
                }
            }
        },
        GetDedicatedIps: {
            http: {
                method: "GET",
                requestUri: "/v1/email/dedicated-ips"
            },
            input: {
                type: "structure",
                members: {
                    PoolName: {
                        location: "querystring",
                        locationName: "PoolName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIps: {
                        type: "list",
                        member: {
                            shape: "S2m"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetDeliverabilityDashboardOptions: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "DashboardEnabled" ],
                members: {
                    DashboardEnabled: {
                        type: "boolean"
                    },
                    SubscriptionExpiryDate: {
                        type: "timestamp"
                    },
                    AccountStatus: {},
                    ActiveSubscribedDomains: {
                        shape: "S2x"
                    },
                    PendingExpirationSubscribedDomains: {
                        shape: "S2x"
                    }
                }
            }
        },
        GetDeliverabilityTestReport: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/test-reports/{ReportId}"
            },
            input: {
                type: "structure",
                required: [ "ReportId" ],
                members: {
                    ReportId: {
                        location: "uri",
                        locationName: "ReportId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DeliverabilityTestReport", "OverallPlacement", "IspPlacements" ],
                members: {
                    DeliverabilityTestReport: {
                        shape: "S35"
                    },
                    OverallPlacement: {
                        shape: "S37"
                    },
                    IspPlacements: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IspName: {},
                                PlacementStatistics: {
                                    shape: "S37"
                                }
                            }
                        }
                    },
                    Message: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetDomainDeliverabilityCampaign: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/campaigns/{CampaignId}"
            },
            input: {
                type: "structure",
                required: [ "CampaignId" ],
                members: {
                    CampaignId: {
                        location: "uri",
                        locationName: "CampaignId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainDeliverabilityCampaign" ],
                members: {
                    DomainDeliverabilityCampaign: {
                        shape: "S3f"
                    }
                }
            }
        },
        GetDomainStatisticsReport: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/statistics-report/{Domain}"
            },
            input: {
                type: "structure",
                required: [ "Domain", "StartDate", "EndDate" ],
                members: {
                    Domain: {
                        location: "uri",
                        locationName: "Domain"
                    },
                    StartDate: {
                        location: "querystring",
                        locationName: "StartDate",
                        type: "timestamp"
                    },
                    EndDate: {
                        location: "querystring",
                        locationName: "EndDate",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "OverallVolume", "DailyVolumes" ],
                members: {
                    OverallVolume: {
                        type: "structure",
                        members: {
                            VolumeStatistics: {
                                shape: "S3p"
                            },
                            ReadRatePercent: {
                                type: "double"
                            },
                            DomainIspPlacements: {
                                shape: "S3q"
                            }
                        }
                    },
                    DailyVolumes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StartDate: {
                                    type: "timestamp"
                                },
                                VolumeStatistics: {
                                    shape: "S3p"
                                },
                                DomainIspPlacements: {
                                    shape: "S3q"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetEmailIdentity: {
            http: {
                method: "GET",
                requestUri: "/v1/email/identities/{EmailIdentity}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityType: {},
                    FeedbackForwardingStatus: {
                        type: "boolean"
                    },
                    VerifiedForSendingStatus: {
                        type: "boolean"
                    },
                    DkimAttributes: {
                        shape: "S1k"
                    },
                    MailFromAttributes: {
                        type: "structure",
                        required: [ "MailFromDomain", "MailFromDomainStatus", "BehaviorOnMxFailure" ],
                        members: {
                            MailFromDomain: {},
                            MailFromDomainStatus: {},
                            BehaviorOnMxFailure: {}
                        }
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        ListConfigurationSets: {
            http: {
                method: "GET",
                requestUri: "/v1/email/configuration-sets"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSets: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListDedicatedIpPools: {
            http: {
                method: "GET",
                requestUri: "/v1/email/dedicated-ip-pools"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIpPools: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListDeliverabilityTestReports: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/test-reports"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DeliverabilityTestReports" ],
                members: {
                    DeliverabilityTestReports: {
                        type: "list",
                        member: {
                            shape: "S35"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDomainDeliverabilityCampaigns: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/domains/{SubscribedDomain}/campaigns"
            },
            input: {
                type: "structure",
                required: [ "StartDate", "EndDate", "SubscribedDomain" ],
                members: {
                    StartDate: {
                        location: "querystring",
                        locationName: "StartDate",
                        type: "timestamp"
                    },
                    EndDate: {
                        location: "querystring",
                        locationName: "EndDate",
                        type: "timestamp"
                    },
                    SubscribedDomain: {
                        location: "uri",
                        locationName: "SubscribedDomain"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainDeliverabilityCampaigns" ],
                members: {
                    DomainDeliverabilityCampaigns: {
                        type: "list",
                        member: {
                            shape: "S3f"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEmailIdentities: {
            http: {
                method: "GET",
                requestUri: "/v1/email/identities"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmailIdentities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IdentityType: {},
                                IdentityName: {},
                                SendingEnabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v1/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        PutAccountDedicatedIpWarmupAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/account/dedicated-ips/warmup"
            },
            input: {
                type: "structure",
                members: {
                    AutoWarmupEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAccountSendingAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/account/sending"
            },
            input: {
                type: "structure",
                members: {
                    SendingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetDeliveryOptions: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/delivery-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    TlsPolicy: {},
                    SendingPoolName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetReputationOptions: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/reputation-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    ReputationMetricsEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetSendingOptions: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/sending"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    SendingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetTrackingOptions: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/tracking-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    CustomRedirectDomain: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDedicatedIpInPool: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/dedicated-ips/{IP}/pool"
            },
            input: {
                type: "structure",
                required: [ "Ip", "DestinationPoolName" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    },
                    DestinationPoolName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDedicatedIpWarmupAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/dedicated-ips/{IP}/warmup"
            },
            input: {
                type: "structure",
                required: [ "Ip", "WarmupPercentage" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    },
                    WarmupPercentage: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDeliverabilityDashboardOption: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/deliverability-dashboard"
            },
            input: {
                type: "structure",
                required: [ "DashboardEnabled" ],
                members: {
                    DashboardEnabled: {
                        type: "boolean"
                    },
                    SubscribedDomains: {
                        shape: "S2x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityDkimAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/identities/{EmailIdentity}/dkim"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    SigningEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityFeedbackAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/identities/{EmailIdentity}/feedback"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    EmailForwardingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityMailFromAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/identities/{EmailIdentity}/mail-from"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    MailFromDomain: {},
                    BehaviorOnMxFailure: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendEmail: {
            http: {
                requestUri: "/v1/email/outbound-emails"
            },
            input: {
                type: "structure",
                required: [ "Destination", "Content" ],
                members: {
                    FromEmailAddress: {},
                    Destination: {
                        type: "structure",
                        members: {
                            ToAddresses: {
                                shape: "S59"
                            },
                            CcAddresses: {
                                shape: "S59"
                            },
                            BccAddresses: {
                                shape: "S59"
                            }
                        }
                    },
                    ReplyToAddresses: {
                        shape: "S59"
                    },
                    FeedbackForwardingEmailAddress: {},
                    Content: {
                        shape: "S12"
                    },
                    EmailTags: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Value" ],
                            members: {
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "TagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConfigurationSetEventDestination: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName", "EventDestination" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    },
                    EventDestination: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "CustomRedirectDomain" ],
            members: {
                CustomRedirectDomain: {}
            }
        },
        S5: {
            type: "structure",
            members: {
                TlsPolicy: {},
                SendingPoolName: {}
            }
        },
        S8: {
            type: "structure",
            members: {
                ReputationMetricsEnabled: {
                    type: "boolean"
                },
                LastFreshStart: {
                    type: "timestamp"
                }
            }
        },
        Sb: {
            type: "structure",
            members: {
                SendingEnabled: {
                    type: "boolean"
                }
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                MatchingEventTypes: {
                    shape: "Sk"
                },
                KinesisFirehoseDestination: {
                    shape: "Sm"
                },
                CloudWatchDestination: {
                    shape: "So"
                },
                SnsDestination: {
                    shape: "Su"
                },
                PinpointDestination: {
                    shape: "Sv"
                }
            }
        },
        Sk: {
            type: "list",
            member: {}
        },
        Sm: {
            type: "structure",
            required: [ "IamRoleArn", "DeliveryStreamArn" ],
            members: {
                IamRoleArn: {},
                DeliveryStreamArn: {}
            }
        },
        So: {
            type: "structure",
            required: [ "DimensionConfigurations" ],
            members: {
                DimensionConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DimensionName", "DimensionValueSource", "DefaultDimensionValue" ],
                        members: {
                            DimensionName: {},
                            DimensionValueSource: {},
                            DefaultDimensionValue: {}
                        }
                    }
                }
            }
        },
        Su: {
            type: "structure",
            required: [ "TopicArn" ],
            members: {
                TopicArn: {}
            }
        },
        Sv: {
            type: "structure",
            members: {
                ApplicationArn: {}
            }
        },
        S12: {
            type: "structure",
            members: {
                Simple: {
                    type: "structure",
                    required: [ "Subject", "Body" ],
                    members: {
                        Subject: {
                            shape: "S14"
                        },
                        Body: {
                            type: "structure",
                            members: {
                                Text: {
                                    shape: "S14"
                                },
                                Html: {
                                    shape: "S14"
                                }
                            }
                        }
                    }
                },
                Raw: {
                    type: "structure",
                    required: [ "Data" ],
                    members: {
                        Data: {
                            type: "blob"
                        }
                    }
                },
                Template: {
                    type: "structure",
                    members: {
                        TemplateArn: {},
                        TemplateData: {}
                    }
                }
            }
        },
        S14: {
            type: "structure",
            required: [ "Data" ],
            members: {
                Data: {},
                Charset: {}
            }
        },
        S1k: {
            type: "structure",
            members: {
                SigningEnabled: {
                    type: "boolean"
                },
                Status: {},
                Tokens: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2m: {
            type: "structure",
            required: [ "Ip", "WarmupStatus", "WarmupPercentage" ],
            members: {
                Ip: {},
                WarmupStatus: {},
                WarmupPercentage: {
                    type: "integer"
                },
                PoolName: {}
            }
        },
        S2x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Domain: {},
                    SubscriptionStartDate: {
                        type: "timestamp"
                    },
                    InboxPlacementTrackingOption: {
                        type: "structure",
                        members: {
                            Global: {
                                type: "boolean"
                            },
                            TrackedIsps: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S35: {
            type: "structure",
            members: {
                ReportId: {},
                ReportName: {},
                Subject: {},
                FromEmailAddress: {},
                CreateDate: {
                    type: "timestamp"
                },
                DeliverabilityTestStatus: {}
            }
        },
        S37: {
            type: "structure",
            members: {
                InboxPercentage: {
                    type: "double"
                },
                SpamPercentage: {
                    type: "double"
                },
                MissingPercentage: {
                    type: "double"
                },
                SpfPercentage: {
                    type: "double"
                },
                DkimPercentage: {
                    type: "double"
                }
            }
        },
        S3f: {
            type: "structure",
            members: {
                CampaignId: {},
                ImageUrl: {},
                Subject: {},
                FromAddress: {},
                SendingIps: {
                    type: "list",
                    member: {}
                },
                FirstSeenDateTime: {
                    type: "timestamp"
                },
                LastSeenDateTime: {
                    type: "timestamp"
                },
                InboxCount: {
                    type: "long"
                },
                SpamCount: {
                    type: "long"
                },
                ReadRate: {
                    type: "double"
                },
                DeleteRate: {
                    type: "double"
                },
                ReadDeleteRate: {
                    type: "double"
                },
                ProjectedVolume: {
                    type: "long"
                },
                Esps: {
                    type: "list",
                    member: {}
                }
            }
        },
        S3p: {
            type: "structure",
            members: {
                InboxRawCount: {
                    type: "long"
                },
                SpamRawCount: {
                    type: "long"
                },
                ProjectedInbox: {
                    type: "long"
                },
                ProjectedSpam: {
                    type: "long"
                }
            }
        },
        S3q: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    IspName: {},
                    InboxRawCount: {
                        type: "long"
                    },
                    SpamRawCount: {
                        type: "long"
                    },
                    InboxPercentage: {
                        type: "double"
                    },
                    SpamPercentage: {
                        type: "double"
                    }
                }
            }
        },
        S59: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetDedicatedIps: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListConfigurationSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDedicatedIpPools: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDeliverabilityTestReports: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDomainDeliverabilityCampaigns: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListEmailIdentities: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        }
    }
};

AWS.apiLoader.services["ram"] = {};

AWS.RAM = AWS.Service.defineService("ram", [ "2018-01-04" ]);

AWS.apiLoader.services["ram"]["2018-01-04"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-01-04",
        endpointPrefix: "ram",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "RAM",
        serviceFullName: "AWS Resource Access Manager",
        serviceId: "RAM",
        signatureVersion: "v4",
        uid: "ram-2018-01-04"
    },
    operations: {
        AcceptResourceShareInvitation: {
            http: {
                requestUri: "/acceptresourceshareinvitation"
            },
            input: {
                type: "structure",
                required: [ "resourceShareInvitationArn" ],
                members: {
                    resourceShareInvitationArn: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareInvitation: {
                        shape: "S4"
                    },
                    clientToken: {}
                }
            }
        },
        AssociateResourceShare: {
            http: {
                requestUri: "/associateresourceshare"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {},
                    resourceArns: {
                        shape: "Sd"
                    },
                    principals: {
                        shape: "Se"
                    },
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareAssociations: {
                        shape: "S7"
                    },
                    clientToken: {}
                }
            }
        },
        AssociateResourceSharePermission: {
            http: {
                requestUri: "/associateresourcesharepermission"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn", "permissionArn" ],
                members: {
                    resourceShareArn: {},
                    permissionArn: {},
                    replace: {
                        type: "boolean"
                    },
                    clientToken: {},
                    permissionVersion: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            }
        },
        CreateResourceShare: {
            http: {
                requestUri: "/createresourceshare"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    resourceArns: {
                        shape: "Sd"
                    },
                    principals: {
                        shape: "Se"
                    },
                    tags: {
                        shape: "Sk"
                    },
                    allowExternalPrincipals: {
                        type: "boolean"
                    },
                    clientToken: {},
                    permissionArns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShare: {
                        shape: "Sq"
                    },
                    clientToken: {}
                }
            }
        },
        DeleteResourceShare: {
            http: {
                method: "DELETE",
                requestUri: "/deleteresourceshare"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {
                        location: "querystring",
                        locationName: "resourceShareArn"
                    },
                    clientToken: {
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            }
        },
        DisassociateResourceShare: {
            http: {
                requestUri: "/disassociateresourceshare"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {},
                    resourceArns: {
                        shape: "Sd"
                    },
                    principals: {
                        shape: "Se"
                    },
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareAssociations: {
                        shape: "S7"
                    },
                    clientToken: {}
                }
            }
        },
        DisassociateResourceSharePermission: {
            http: {
                requestUri: "/disassociateresourcesharepermission"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn", "permissionArn" ],
                members: {
                    resourceShareArn: {},
                    permissionArn: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            }
        },
        EnableSharingWithAwsOrganization: {
            http: {
                requestUri: "/enablesharingwithawsorganization"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        GetPermission: {
            http: {
                requestUri: "/getpermission"
            },
            input: {
                type: "structure",
                required: [ "permissionArn" ],
                members: {
                    permissionArn: {},
                    permissionVersion: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permission: {
                        type: "structure",
                        members: {
                            arn: {},
                            version: {},
                            defaultVersion: {
                                type: "boolean"
                            },
                            name: {},
                            resourceType: {},
                            permission: {},
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdatedTime: {
                                type: "timestamp"
                            },
                            isResourceTypeDefault: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        GetResourcePolicies: {
            http: {
                requestUri: "/getresourcepolicies"
            },
            input: {
                type: "structure",
                required: [ "resourceArns" ],
                members: {
                    resourceArns: {
                        shape: "Sd"
                    },
                    principal: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policies: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        GetResourceShareAssociations: {
            http: {
                requestUri: "/getresourceshareassociations"
            },
            input: {
                type: "structure",
                required: [ "associationType" ],
                members: {
                    associationType: {},
                    resourceShareArns: {
                        shape: "S1a"
                    },
                    resourceArn: {},
                    principal: {},
                    associationStatus: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareAssociations: {
                        shape: "S7"
                    },
                    nextToken: {}
                }
            }
        },
        GetResourceShareInvitations: {
            http: {
                requestUri: "/getresourceshareinvitations"
            },
            input: {
                type: "structure",
                members: {
                    resourceShareInvitationArns: {
                        type: "list",
                        member: {}
                    },
                    resourceShareArns: {
                        shape: "S1a"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareInvitations: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetResourceShares: {
            http: {
                requestUri: "/getresourceshares"
            },
            input: {
                type: "structure",
                required: [ "resourceOwner" ],
                members: {
                    resourceShareArns: {
                        shape: "S1a"
                    },
                    resourceShareStatus: {},
                    resourceOwner: {},
                    name: {},
                    tagFilters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                tagKey: {},
                                tagValues: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    permissionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShares: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPendingInvitationResources: {
            http: {
                requestUri: "/listpendinginvitationresources"
            },
            input: {
                type: "structure",
                required: [ "resourceShareInvitationArn" ],
                members: {
                    resourceShareInvitationArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resources: {
                        shape: "S1p"
                    },
                    nextToken: {}
                }
            }
        },
        ListPermissions: {
            http: {
                requestUri: "/listpermissions"
            },
            input: {
                type: "structure",
                members: {
                    resourceType: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permissions: {
                        shape: "S1u"
                    },
                    nextToken: {}
                }
            }
        },
        ListPrincipals: {
            http: {
                requestUri: "/listprincipals"
            },
            input: {
                type: "structure",
                required: [ "resourceOwner" ],
                members: {
                    resourceOwner: {},
                    resourceArn: {},
                    principals: {
                        shape: "Se"
                    },
                    resourceType: {},
                    resourceShareArns: {
                        shape: "S1a"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    principals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                resourceShareArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedTime: {
                                    type: "timestamp"
                                },
                                external: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListResourceSharePermissions: {
            http: {
                requestUri: "/listresourcesharepermissions"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permissions: {
                        shape: "S1u"
                    },
                    nextToken: {}
                }
            }
        },
        ListResourceTypes: {
            http: {
                requestUri: "/listresourcetypes"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                resourceType: {},
                                serviceName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListResources: {
            http: {
                requestUri: "/listresources"
            },
            input: {
                type: "structure",
                required: [ "resourceOwner" ],
                members: {
                    resourceOwner: {},
                    principal: {},
                    resourceType: {},
                    resourceArns: {
                        shape: "Sd"
                    },
                    resourceShareArns: {
                        shape: "S1a"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resources: {
                        shape: "S1p"
                    },
                    nextToken: {}
                }
            }
        },
        PromoteResourceShareCreatedFromPolicy: {
            http: {
                requestUri: "/promoteresourcesharecreatedfrompolicy"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {
                        location: "querystring",
                        locationName: "resourceShareArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        RejectResourceShareInvitation: {
            http: {
                requestUri: "/rejectresourceshareinvitation"
            },
            input: {
                type: "structure",
                required: [ "resourceShareInvitationArn" ],
                members: {
                    resourceShareInvitationArn: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareInvitation: {
                        shape: "S4"
                    },
                    clientToken: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tagresource"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn", "tags" ],
                members: {
                    resourceShareArn: {},
                    tags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/untagresource"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn", "tagKeys" ],
                members: {
                    resourceShareArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResourceShare: {
            http: {
                requestUri: "/updateresourceshare"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {},
                    name: {},
                    allowExternalPrincipals: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShare: {
                        shape: "Sq"
                    },
                    clientToken: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                resourceShareInvitationArn: {},
                resourceShareName: {},
                resourceShareArn: {},
                senderAccountId: {},
                receiverAccountId: {},
                invitationTimestamp: {
                    type: "timestamp"
                },
                status: {},
                resourceShareAssociations: {
                    shape: "S7",
                    deprecated: true,
                    deprecatedMessage: "This member has been deprecated. Use ListPendingInvitationResources."
                },
                receiverArn: {}
            }
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    resourceShareArn: {},
                    resourceShareName: {},
                    associatedEntity: {},
                    associationType: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastUpdatedTime: {
                        type: "timestamp"
                    },
                    external: {
                        type: "boolean"
                    }
                }
            }
        },
        Sd: {
            type: "list",
            member: {}
        },
        Se: {
            type: "list",
            member: {}
        },
        Sk: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                resourceShareArn: {},
                name: {},
                owningAccountId: {},
                allowExternalPrincipals: {
                    type: "boolean"
                },
                status: {},
                statusMessage: {},
                tags: {
                    shape: "Sk"
                },
                creationTime: {
                    type: "timestamp"
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                featureSet: {}
            }
        },
        S1a: {
            type: "list",
            member: {}
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    type: {},
                    resourceShareArn: {},
                    resourceGroupArn: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastUpdatedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S1u: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    version: {},
                    defaultVersion: {
                        type: "boolean"
                    },
                    name: {},
                    resourceType: {},
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastUpdatedTime: {
                        type: "timestamp"
                    },
                    isResourceTypeDefault: {
                        type: "boolean"
                    }
                }
            }
        }
    },
    paginators: {
        GetResourcePolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetResourceShareAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetResourceShareInvitations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetResourceShares: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPendingInvitationResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPermissions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPrincipals: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListResourceSharePermissions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListResourceTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["route53resolver"] = {};

AWS.Route53Resolver = AWS.Service.defineService("route53resolver", [ "2018-04-01" ]);

AWS.apiLoader.services["route53resolver"]["2018-04-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-04-01",
        endpointPrefix: "route53resolver",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Route53Resolver",
        serviceFullName: "Amazon Route 53 Resolver",
        serviceId: "Route53Resolver",
        signatureVersion: "v4",
        targetPrefix: "Route53Resolver",
        uid: "route53resolver-2018-04-01"
    },
    operations: {
        AssociateFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "FirewallRuleGroupId", "VpcId", "Priority", "Name" ],
                members: {
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    FirewallRuleGroupId: {},
                    VpcId: {},
                    Priority: {
                        type: "integer"
                    },
                    Name: {},
                    MutationProtection: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        AssociateResolverEndpointIpAddress: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId", "IpAddress" ],
                members: {
                    ResolverEndpointId: {},
                    IpAddress: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "Sn"
                    }
                }
            }
        },
        AssociateResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigId", "ResourceId" ],
                members: {
                    ResolverQueryLogConfigId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfigAssociation: {
                        shape: "Su"
                    }
                }
            }
        },
        AssociateResolverRule: {
            input: {
                type: "structure",
                required: [ "ResolverRuleId", "VPCId" ],
                members: {
                    ResolverRuleId: {},
                    Name: {},
                    VPCId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRuleAssociation: {
                        shape: "S10"
                    }
                }
            }
        },
        CreateFirewallDomainList: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "Name" ],
                members: {
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Name: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallDomainList: {
                        shape: "S14"
                    }
                }
            }
        },
        CreateFirewallRule: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "FirewallRuleGroupId", "FirewallDomainListId", "Priority", "Action", "Name" ],
                members: {
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    FirewallRuleGroupId: {},
                    FirewallDomainListId: {},
                    Priority: {
                        type: "integer"
                    },
                    Action: {},
                    BlockResponse: {},
                    BlockOverrideDomain: {},
                    BlockOverrideDnsType: {},
                    BlockOverrideTtl: {
                        type: "integer"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRule: {
                        shape: "S1e"
                    }
                }
            }
        },
        CreateFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "Name" ],
                members: {
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Name: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroup: {
                        shape: "S1h"
                    }
                }
            }
        },
        CreateResolverEndpoint: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "SecurityGroupIds", "Direction", "IpAddresses" ],
                members: {
                    CreatorRequestId: {},
                    Name: {},
                    SecurityGroupIds: {
                        shape: "So"
                    },
                    Direction: {},
                    IpAddresses: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SubnetId" ],
                            members: {
                                SubnetId: {},
                                Ip: {}
                            }
                        }
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "Name", "DestinationArn", "CreatorRequestId" ],
                members: {
                    Name: {},
                    DestinationArn: {},
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfig: {
                        shape: "S1t"
                    }
                }
            }
        },
        CreateResolverRule: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "RuleType", "DomainName" ],
                members: {
                    CreatorRequestId: {},
                    Name: {},
                    RuleType: {},
                    DomainName: {},
                    TargetIps: {
                        shape: "S1z"
                    },
                    ResolverEndpointId: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRule: {
                        shape: "S23"
                    }
                }
            }
        },
        DeleteFirewallDomainList: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId" ],
                members: {
                    FirewallDomainListId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallDomainList: {
                        shape: "S14"
                    }
                }
            }
        },
        DeleteFirewallRule: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId", "FirewallDomainListId" ],
                members: {
                    FirewallRuleGroupId: {},
                    FirewallDomainListId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRule: {
                        shape: "S1e"
                    }
                }
            }
        },
        DeleteFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId" ],
                members: {
                    FirewallRuleGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroup: {
                        shape: "S1h"
                    }
                }
            }
        },
        DeleteResolverEndpoint: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId" ],
                members: {
                    ResolverEndpointId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "Sn"
                    }
                }
            }
        },
        DeleteResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigId" ],
                members: {
                    ResolverQueryLogConfigId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfig: {
                        shape: "S1t"
                    }
                }
            }
        },
        DeleteResolverRule: {
            input: {
                type: "structure",
                required: [ "ResolverRuleId" ],
                members: {
                    ResolverRuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRule: {
                        shape: "S23"
                    }
                }
            }
        },
        DisassociateFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupAssociationId" ],
                members: {
                    FirewallRuleGroupAssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        DisassociateResolverEndpointIpAddress: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId", "IpAddress" ],
                members: {
                    ResolverEndpointId: {},
                    IpAddress: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "Sn"
                    }
                }
            }
        },
        DisassociateResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigId", "ResourceId" ],
                members: {
                    ResolverQueryLogConfigId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfigAssociation: {
                        shape: "Su"
                    }
                }
            }
        },
        DisassociateResolverRule: {
            input: {
                type: "structure",
                required: [ "VPCId", "ResolverRuleId" ],
                members: {
                    VPCId: {},
                    ResolverRuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRuleAssociation: {
                        shape: "S10"
                    }
                }
            }
        },
        GetFirewallConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallConfig: {
                        shape: "S2r"
                    }
                }
            }
        },
        GetFirewallDomainList: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId" ],
                members: {
                    FirewallDomainListId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallDomainList: {
                        shape: "S14"
                    }
                }
            }
        },
        GetFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId" ],
                members: {
                    FirewallRuleGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroup: {
                        shape: "S1h"
                    }
                }
            }
        },
        GetFirewallRuleGroupAssociation: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupAssociationId" ],
                members: {
                    FirewallRuleGroupAssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetFirewallRuleGroupPolicy: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupPolicy: {}
                }
            }
        },
        GetResolverDnssecConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverDNSSECConfig: {
                        shape: "S34"
                    }
                }
            }
        },
        GetResolverEndpoint: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId" ],
                members: {
                    ResolverEndpointId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "Sn"
                    }
                }
            }
        },
        GetResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigId" ],
                members: {
                    ResolverQueryLogConfigId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfig: {
                        shape: "S1t"
                    }
                }
            }
        },
        GetResolverQueryLogConfigAssociation: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigAssociationId" ],
                members: {
                    ResolverQueryLogConfigAssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfigAssociation: {
                        shape: "Su"
                    }
                }
            }
        },
        GetResolverQueryLogConfigPolicy: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfigPolicy: {}
                }
            }
        },
        GetResolverRule: {
            input: {
                type: "structure",
                required: [ "ResolverRuleId" ],
                members: {
                    ResolverRuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRule: {
                        shape: "S23"
                    }
                }
            }
        },
        GetResolverRuleAssociation: {
            input: {
                type: "structure",
                required: [ "ResolverRuleAssociationId" ],
                members: {
                    ResolverRuleAssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRuleAssociation: {
                        shape: "S10"
                    }
                }
            }
        },
        GetResolverRulePolicy: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRulePolicy: {}
                }
            }
        },
        ImportFirewallDomains: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId", "Operation", "DomainFileUrl" ],
                members: {
                    FirewallDomainListId: {},
                    Operation: {},
                    DomainFileUrl: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    Status: {},
                    StatusMessage: {}
                }
            }
        },
        ListFirewallConfigs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallConfigs: {
                        type: "list",
                        member: {
                            shape: "S2r"
                        }
                    }
                }
            }
        },
        ListFirewallDomainLists: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallDomainLists: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                CreatorRequestId: {},
                                ManagedOwnerName: {}
                            }
                        }
                    }
                }
            }
        },
        ListFirewallDomains: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId" ],
                members: {
                    FirewallDomainListId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Domains: {
                        shape: "S43"
                    }
                }
            }
        },
        ListFirewallRuleGroupAssociations: {
            input: {
                type: "structure",
                members: {
                    FirewallRuleGroupId: {},
                    VpcId: {},
                    Priority: {
                        type: "integer"
                    },
                    Status: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallRuleGroupAssociations: {
                        type: "list",
                        member: {
                            shape: "Sc"
                        }
                    }
                }
            }
        },
        ListFirewallRuleGroups: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallRuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                OwnerId: {},
                                CreatorRequestId: {},
                                ShareStatus: {}
                            }
                        }
                    }
                }
            }
        },
        ListFirewallRules: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId" ],
                members: {
                    FirewallRuleGroupId: {},
                    Priority: {
                        type: "integer"
                    },
                    Action: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallRules: {
                        type: "list",
                        member: {
                            shape: "S1e"
                        }
                    }
                }
            }
        },
        ListResolverDnssecConfigs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S4g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ResolverDnssecConfigs: {
                        type: "list",
                        member: {
                            shape: "S34"
                        }
                    }
                }
            }
        },
        ListResolverEndpointIpAddresses: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId" ],
                members: {
                    ResolverEndpointId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    IpAddresses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IpId: {},
                                SubnetId: {},
                                Ip: {},
                                Status: {},
                                StatusMessage: {},
                                CreationTime: {},
                                ModificationTime: {}
                            }
                        }
                    }
                }
            }
        },
        ListResolverEndpoints: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S4g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResolverEndpoints: {
                        type: "list",
                        member: {
                            shape: "Sn"
                        }
                    }
                }
            }
        },
        ListResolverQueryLogConfigAssociations: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S4g"
                    },
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    },
                    TotalFilteredCount: {
                        type: "integer"
                    },
                    ResolverQueryLogConfigAssociations: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    }
                }
            }
        },
        ListResolverQueryLogConfigs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S4g"
                    },
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    },
                    TotalFilteredCount: {
                        type: "integer"
                    },
                    ResolverQueryLogConfigs: {
                        type: "list",
                        member: {
                            shape: "S1t"
                        }
                    }
                }
            }
        },
        ListResolverRuleAssociations: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S4g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResolverRuleAssociations: {
                        type: "list",
                        member: {
                            shape: "S10"
                        }
                    }
                }
            }
        },
        ListResolverRules: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S4g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResolverRules: {
                        type: "list",
                        member: {
                            shape: "S23"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S7"
                    },
                    NextToken: {}
                }
            }
        },
        PutFirewallRuleGroupPolicy: {
            input: {
                type: "structure",
                required: [ "Arn", "FirewallRuleGroupPolicy" ],
                members: {
                    Arn: {},
                    FirewallRuleGroupPolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        PutResolverQueryLogConfigPolicy: {
            input: {
                type: "structure",
                required: [ "Arn", "ResolverQueryLogConfigPolicy" ],
                members: {
                    Arn: {},
                    ResolverQueryLogConfigPolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        PutResolverRulePolicy: {
            input: {
                type: "structure",
                required: [ "Arn", "ResolverRulePolicy" ],
                members: {
                    Arn: {},
                    ResolverRulePolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFirewallConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId", "FirewallFailOpen" ],
                members: {
                    ResourceId: {},
                    FirewallFailOpen: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallConfig: {
                        shape: "S2r"
                    }
                }
            }
        },
        UpdateFirewallDomains: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId", "Operation", "Domains" ],
                members: {
                    FirewallDomainListId: {},
                    Operation: {},
                    Domains: {
                        shape: "S43"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    Status: {},
                    StatusMessage: {}
                }
            }
        },
        UpdateFirewallRule: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId", "FirewallDomainListId" ],
                members: {
                    FirewallRuleGroupId: {},
                    FirewallDomainListId: {},
                    Priority: {
                        type: "integer"
                    },
                    Action: {},
                    BlockResponse: {},
                    BlockOverrideDomain: {},
                    BlockOverrideDnsType: {},
                    BlockOverrideTtl: {
                        type: "integer"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRule: {
                        shape: "S1e"
                    }
                }
            }
        },
        UpdateFirewallRuleGroupAssociation: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupAssociationId" ],
                members: {
                    FirewallRuleGroupAssociationId: {},
                    Priority: {
                        type: "integer"
                    },
                    MutationProtection: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        UpdateResolverDnssecConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId", "Validation" ],
                members: {
                    ResourceId: {},
                    Validation: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverDNSSECConfig: {
                        shape: "S34"
                    }
                }
            }
        },
        UpdateResolverEndpoint: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId" ],
                members: {
                    ResolverEndpointId: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "Sn"
                    }
                }
            }
        },
        UpdateResolverRule: {
            input: {
                type: "structure",
                required: [ "ResolverRuleId", "Config" ],
                members: {
                    ResolverRuleId: {},
                    Config: {
                        type: "structure",
                        members: {
                            Name: {},
                            TargetIps: {
                                shape: "S1z"
                            },
                            ResolverEndpointId: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRule: {
                        shape: "S23"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sc: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                FirewallRuleGroupId: {},
                VpcId: {},
                Name: {},
                Priority: {
                    type: "integer"
                },
                MutationProtection: {},
                ManagedOwnerName: {},
                Status: {},
                StatusMessage: {},
                CreatorRequestId: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        Sj: {
            type: "structure",
            members: {
                IpId: {},
                SubnetId: {},
                Ip: {}
            }
        },
        Sn: {
            type: "structure",
            members: {
                Id: {},
                CreatorRequestId: {},
                Arn: {},
                Name: {},
                SecurityGroupIds: {
                    shape: "So"
                },
                Direction: {},
                IpAddressCount: {
                    type: "integer"
                },
                HostVPCId: {},
                Status: {},
                StatusMessage: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        So: {
            type: "list",
            member: {}
        },
        Su: {
            type: "structure",
            members: {
                Id: {},
                ResolverQueryLogConfigId: {},
                ResourceId: {},
                Status: {},
                Error: {},
                ErrorMessage: {},
                CreationTime: {}
            }
        },
        S10: {
            type: "structure",
            members: {
                Id: {},
                ResolverRuleId: {},
                Name: {},
                VPCId: {},
                Status: {},
                StatusMessage: {}
            }
        },
        S14: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                DomainCount: {
                    type: "integer"
                },
                Status: {},
                StatusMessage: {},
                ManagedOwnerName: {},
                CreatorRequestId: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        S1e: {
            type: "structure",
            members: {
                FirewallRuleGroupId: {},
                FirewallDomainListId: {},
                Name: {},
                Priority: {
                    type: "integer"
                },
                Action: {},
                BlockResponse: {},
                BlockOverrideDomain: {},
                BlockOverrideDnsType: {},
                BlockOverrideTtl: {
                    type: "integer"
                },
                CreatorRequestId: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        S1h: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                RuleCount: {
                    type: "integer"
                },
                Status: {},
                StatusMessage: {},
                OwnerId: {},
                CreatorRequestId: {},
                ShareStatus: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        S1t: {
            type: "structure",
            members: {
                Id: {},
                OwnerId: {},
                Status: {},
                ShareStatus: {},
                AssociationCount: {
                    type: "integer"
                },
                Arn: {},
                Name: {},
                DestinationArn: {},
                CreatorRequestId: {},
                CreationTime: {}
            }
        },
        S1z: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Ip" ],
                members: {
                    Ip: {},
                    Port: {
                        type: "integer"
                    }
                }
            }
        },
        S23: {
            type: "structure",
            members: {
                Id: {},
                CreatorRequestId: {},
                Arn: {},
                DomainName: {},
                Status: {},
                StatusMessage: {},
                RuleType: {},
                Name: {},
                TargetIps: {
                    shape: "S1z"
                },
                ResolverEndpointId: {},
                OwnerId: {},
                ShareStatus: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        S2r: {
            type: "structure",
            members: {
                Id: {},
                ResourceId: {},
                OwnerId: {},
                FirewallFailOpen: {}
            }
        },
        S34: {
            type: "structure",
            members: {
                Id: {},
                OwnerId: {},
                ResourceId: {},
                ValidationStatus: {}
            }
        },
        S43: {
            type: "list",
            member: {}
        },
        S4g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        }
    },
    paginators: {
        ListFirewallConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallConfigs"
        },
        ListFirewallDomainLists: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallDomainLists"
        },
        ListFirewallDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Domains"
        },
        ListFirewallRuleGroupAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallRuleGroupAssociations"
        },
        ListFirewallRuleGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallRuleGroups"
        },
        ListFirewallRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallRules"
        },
        ListResolverDnssecConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverDnssecConfigs"
        },
        ListResolverEndpointIpAddresses: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "IpAddresses"
        },
        ListResolverEndpoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverEndpoints"
        },
        ListResolverQueryLogConfigAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverQueryLogConfigAssociations"
        },
        ListResolverQueryLogConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverQueryLogConfigs"
        },
        ListResolverRuleAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverRuleAssociations"
        },
        ListResolverRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverRules"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tags"
        }
    }
};

AWS.apiLoader.services["pinpointsmsvoice"] = {};

AWS.PinpointSMSVoice = AWS.Service.defineService("pinpointsmsvoice", [ "2018-09-05" ]);

AWS.apiLoader.services["pinpointsmsvoice"]["2018-09-05"] = {
    metadata: {
        apiVersion: "2018-09-05",
        endpointPrefix: "sms-voice.pinpoint",
        signingName: "sms-voice",
        serviceAbbreviation: "Pinpoint SMS Voice",
        serviceFullName: "Amazon Pinpoint SMS and Voice Service",
        serviceId: "Pinpoint SMS Voice",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "pinpoint-sms-voice-2018-09-05",
        signatureVersion: "v4"
    },
    operations: {
        CreateConfigurationSet: {
            http: {
                requestUri: "/v1/sms-voice/configuration-sets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateConfigurationSetEventDestination: {
            http: {
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestination: {
                        shape: "S6"
                    },
                    EventDestinationName: {}
                },
                required: [ "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSet: {
            http: {
                method: "DELETE",
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                },
                required: [ "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSetEventDestination: {
            http: {
                method: "DELETE",
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    }
                },
                required: [ "EventDestinationName", "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetConfigurationSetEventDestinations: {
            http: {
                method: "GET",
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                },
                required: [ "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {
                    EventDestinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CloudWatchLogsDestination: {
                                    shape: "S7"
                                },
                                Enabled: {
                                    type: "boolean"
                                },
                                KinesisFirehoseDestination: {
                                    shape: "Sa"
                                },
                                MatchingEventTypes: {
                                    shape: "Sb"
                                },
                                Name: {},
                                SnsDestination: {
                                    shape: "Sd"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListConfigurationSets: {
            http: {
                method: "GET",
                requestUri: "/v1/sms-voice/configuration-sets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSets: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        SendVoiceMessage: {
            http: {
                requestUri: "/v1/sms-voice/voice/message",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CallerId: {},
                    ConfigurationSetName: {},
                    Content: {
                        type: "structure",
                        members: {
                            CallInstructionsMessage: {
                                type: "structure",
                                members: {
                                    Text: {}
                                },
                                required: []
                            },
                            PlainTextMessage: {
                                type: "structure",
                                members: {
                                    LanguageCode: {},
                                    Text: {},
                                    VoiceId: {}
                                },
                                required: []
                            },
                            SSMLMessage: {
                                type: "structure",
                                members: {
                                    LanguageCode: {},
                                    Text: {},
                                    VoiceId: {}
                                },
                                required: []
                            }
                        }
                    },
                    DestinationPhoneNumber: {},
                    OriginationPhoneNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        UpdateConfigurationSetEventDestination: {
            http: {
                method: "PUT",
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestination: {
                        shape: "S6"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    }
                },
                required: [ "EventDestinationName", "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            members: {
                CloudWatchLogsDestination: {
                    shape: "S7"
                },
                Enabled: {
                    type: "boolean"
                },
                KinesisFirehoseDestination: {
                    shape: "Sa"
                },
                MatchingEventTypes: {
                    shape: "Sb"
                },
                SnsDestination: {
                    shape: "Sd"
                }
            },
            required: []
        },
        S7: {
            type: "structure",
            members: {
                IamRoleArn: {},
                LogGroupArn: {}
            },
            required: []
        },
        Sa: {
            type: "structure",
            members: {
                DeliveryStreamArn: {},
                IamRoleArn: {}
            },
            required: []
        },
        Sb: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "structure",
            members: {
                TopicArn: {}
            },
            required: []
        }
    }
};

AWS.apiLoader.services["quicksight"] = {};

AWS.QuickSight = AWS.Service.defineService("quicksight", [ "2018-04-01" ]);

AWS.apiLoader.services["quicksight"]["2018-04-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-04-01",
        endpointPrefix: "quicksight",
        jsonVersion: "1.0",
        protocol: "rest-json",
        serviceFullName: "Amazon QuickSight",
        serviceId: "QuickSight",
        signatureVersion: "v4",
        uid: "quicksight-2018-04-01"
    },
    operations: {
        CancelIngestion: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "IngestionId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    IngestionId: {
                        location: "uri",
                        locationName: "IngestionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    IngestionId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateAccountCustomization: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/customizations"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AccountCustomization" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    AccountCustomization: {
                        shape: "Sa"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AwsAccountId: {},
                    Namespace: {},
                    AccountCustomization: {
                        shape: "Sa"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateAnalysis: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId", "Name", "SourceEntity" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    },
                    Name: {},
                    Parameters: {
                        shape: "Sk"
                    },
                    Permissions: {
                        shape: "S11"
                    },
                    SourceEntity: {
                        shape: "S15"
                    },
                    ThemeArn: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AnalysisId: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateDashboard: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "Name", "SourceEntity" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    Name: {},
                    Parameters: {
                        shape: "Sk"
                    },
                    Permissions: {
                        shape: "S11"
                    },
                    SourceEntity: {
                        shape: "S1d"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    VersionDescription: {},
                    DashboardPublishOptions: {
                        shape: "S1g"
                    },
                    ThemeArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VersionArn: {},
                    DashboardId: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateDataSet: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/data-sets"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "Name", "PhysicalTableMap", "ImportMode" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {},
                    Name: {},
                    PhysicalTableMap: {
                        shape: "S1q"
                    },
                    LogicalTableMap: {
                        shape: "S2b"
                    },
                    ImportMode: {},
                    ColumnGroups: {
                        shape: "S38"
                    },
                    FieldFolders: {
                        shape: "S3e"
                    },
                    Permissions: {
                        shape: "S11"
                    },
                    RowLevelPermissionDataSet: {
                        shape: "S3j"
                    },
                    RowLevelPermissionTagConfiguration: {
                        shape: "S3n"
                    },
                    ColumnLevelPermissionRules: {
                        shape: "S3t"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    DataSetUsageConfiguration: {
                        shape: "S3x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSetId: {},
                    IngestionArn: {},
                    IngestionId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateDataSource: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/data-sources"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId", "Name", "Type" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {},
                    Name: {},
                    Type: {},
                    DataSourceParameters: {
                        shape: "S41"
                    },
                    Credentials: {
                        shape: "S53"
                    },
                    Permissions: {
                        shape: "S11"
                    },
                    VpcConnectionProperties: {
                        shape: "S59"
                    },
                    SslProperties: {
                        shape: "S5a"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSourceId: {},
                    CreationStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateFolder: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    Name: {},
                    FolderType: {},
                    ParentFolderArn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    FolderId: {},
                    RequestId: {}
                }
            }
        },
        CreateFolderMembership: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}/members/{MemberType}/{MemberId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId", "MemberId", "MemberType" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "MemberId"
                    },
                    MemberType: {
                        location: "uri",
                        locationName: "MemberType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        type: "integer"
                    },
                    FolderMember: {
                        type: "structure",
                        members: {
                            MemberId: {},
                            MemberType: {}
                        }
                    },
                    RequestId: {}
                }
            }
        },
        CreateGroup: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {},
                    Description: {},
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "S5o"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateGroupMembership: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}"
            },
            input: {
                type: "structure",
                required: [ "MemberName", "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    MemberName: {
                        location: "uri",
                        locationName: "MemberName"
                    },
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupMember: {
                        shape: "S5s"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateIAMPolicyAssignment: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssignmentName", "AssignmentStatus", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentName: {},
                    AssignmentStatus: {},
                    PolicyArn: {},
                    Identities: {
                        shape: "S5w"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssignmentName: {},
                    AssignmentId: {},
                    AssignmentStatus: {},
                    PolicyArn: {},
                    Identities: {
                        shape: "S5w"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateIngestion: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}"
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "IngestionId", "AwsAccountId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    IngestionId: {
                        location: "uri",
                        locationName: "IngestionId"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    IngestionId: {},
                    IngestionStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateNamespace: {
            http: {
                requestUri: "/accounts/{AwsAccountId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace", "IdentityStore" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {},
                    IdentityStore: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {},
                    CapacityRegion: {},
                    CreationStatus: {},
                    IdentityStore: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateTemplate: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "SourceEntity" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    Name: {},
                    Permissions: {
                        shape: "S11"
                    },
                    SourceEntity: {
                        shape: "S69"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    VersionDescription: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VersionArn: {},
                    TemplateId: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateTemplateAlias: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "AliasName", "TemplateVersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    },
                    TemplateVersionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateAlias: {
                        shape: "S6h"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateTheme: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "Name", "BaseThemeId", "Configuration" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    Name: {},
                    BaseThemeId: {},
                    VersionDescription: {},
                    Configuration: {
                        shape: "S6k"
                    },
                    Permissions: {
                        shape: "S11"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VersionArn: {},
                    ThemeId: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateThemeAlias: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "AliasName", "ThemeVersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    },
                    ThemeVersionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeAlias: {
                        shape: "S6z"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DeleteAccountCustomization: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/customizations"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteAnalysis: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    },
                    RecoveryWindowInDays: {
                        location: "querystring",
                        locationName: "recovery-window-in-days",
                        type: "long"
                    },
                    ForceDeleteWithoutRecovery: {
                        location: "querystring",
                        locationName: "force-delete-without-recovery",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    AnalysisId: {},
                    DeletionTime: {
                        type: "timestamp"
                    },
                    RequestId: {}
                }
            }
        },
        DeleteDashboard: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    DashboardId: {},
                    RequestId: {}
                }
            }
        },
        DeleteDataSet: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSetId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteDataSource: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSourceId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteFolder: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    FolderId: {},
                    RequestId: {}
                }
            }
        },
        DeleteFolderMembership: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}/members/{MemberType}/{MemberId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId", "MemberId", "MemberType" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "MemberId"
                    },
                    MemberType: {
                        location: "uri",
                        locationName: "MemberType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DeleteGroup: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteGroupMembership: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}"
            },
            input: {
                type: "structure",
                required: [ "MemberName", "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    MemberName: {
                        location: "uri",
                        locationName: "MemberName"
                    },
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteIAMPolicyAssignment: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespace/{Namespace}/iam-policy-assignments/{AssignmentName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssignmentName", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentName: {
                        location: "uri",
                        locationName: "AssignmentName"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssignmentName: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteNamespace: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Arn: {},
                    TemplateId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteTemplateAlias: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "AliasName" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    TemplateId: {},
                    AliasName: {},
                    Arn: {},
                    RequestId: {}
                }
            }
        },
        DeleteTheme: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    ThemeId: {}
                }
            }
        },
        DeleteThemeAlias: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "AliasName" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AliasName: {},
                    Arn: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    ThemeId: {}
                }
            }
        },
        DeleteUser: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}"
            },
            input: {
                type: "structure",
                required: [ "UserName", "AwsAccountId", "Namespace" ],
                members: {
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteUserByPrincipalId: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/user-principals/{PrincipalId}"
            },
            input: {
                type: "structure",
                required: [ "PrincipalId", "AwsAccountId", "Namespace" ],
                members: {
                    PrincipalId: {
                        location: "uri",
                        locationName: "PrincipalId"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeAccountCustomization: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/customizations"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    Resolved: {
                        location: "querystring",
                        locationName: "resolved",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AwsAccountId: {},
                    Namespace: {},
                    AccountCustomization: {
                        shape: "Sa"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeAccountSettings: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/settings"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountSettings: {
                        type: "structure",
                        members: {
                            AccountName: {},
                            Edition: {},
                            DefaultNamespace: {},
                            NotificationEmail: {}
                        }
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeAnalysis: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Analysis: {
                        type: "structure",
                        members: {
                            AnalysisId: {},
                            Arn: {},
                            Name: {},
                            Status: {},
                            Errors: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Type: {},
                                        Message: {}
                                    }
                                }
                            },
                            DataSetArns: {
                                shape: "S8c"
                            },
                            ThemeArn: {},
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            Sheets: {
                                shape: "S8d"
                            }
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeAnalysisPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisId: {},
                    AnalysisArn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeDashboard: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    },
                    AliasName: {
                        location: "querystring",
                        locationName: "alias-name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Dashboard: {
                        type: "structure",
                        members: {
                            DashboardId: {},
                            Arn: {},
                            Name: {},
                            Version: {
                                type: "structure",
                                members: {
                                    CreatedTime: {
                                        type: "timestamp"
                                    },
                                    Errors: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Type: {},
                                                Message: {}
                                            }
                                        }
                                    },
                                    VersionNumber: {
                                        type: "long"
                                    },
                                    Status: {},
                                    Arn: {},
                                    SourceEntityArn: {},
                                    DataSetArns: {
                                        shape: "S8c"
                                    },
                                    Description: {},
                                    ThemeArn: {},
                                    Sheets: {
                                        shape: "S8d"
                                    }
                                }
                            },
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastPublishedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeDashboardPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardId: {},
                    DashboardArn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeDataSet: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSet: {
                        type: "structure",
                        members: {
                            Arn: {},
                            DataSetId: {},
                            Name: {},
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            PhysicalTableMap: {
                                shape: "S1q"
                            },
                            LogicalTableMap: {
                                shape: "S2b"
                            },
                            OutputColumns: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Description: {},
                                        Type: {}
                                    }
                                }
                            },
                            ImportMode: {},
                            ConsumedSpiceCapacityInBytes: {
                                type: "long"
                            },
                            ColumnGroups: {
                                shape: "S38"
                            },
                            FieldFolders: {
                                shape: "S3e"
                            },
                            RowLevelPermissionDataSet: {
                                shape: "S3j"
                            },
                            RowLevelPermissionTagConfiguration: {
                                shape: "S3n"
                            },
                            ColumnLevelPermissionRules: {
                                shape: "S3t"
                            },
                            DataSetUsageConfiguration: {
                                shape: "S3x"
                            }
                        }
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeDataSetPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSetArn: {},
                    DataSetId: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeDataSource: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSource: {
                        shape: "S8z"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeDataSourcePermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceArn: {},
                    DataSourceId: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeFolder: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Folder: {
                        type: "structure",
                        members: {
                            FolderId: {},
                            Arn: {},
                            Name: {},
                            FolderType: {},
                            FolderPath: {
                                type: "list",
                                member: {}
                            },
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    RequestId: {}
                }
            }
        },
        DescribeFolderPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    FolderId: {},
                    Arn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeFolderResolvedPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}/resolved-permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    FolderId: {},
                    Arn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeGroup: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "S5o"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeIAMPolicyAssignment: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssignmentName", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentName: {
                        location: "uri",
                        locationName: "AssignmentName"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IAMPolicyAssignment: {
                        type: "structure",
                        members: {
                            AwsAccountId: {},
                            AssignmentId: {},
                            AssignmentName: {},
                            PolicyArn: {},
                            Identities: {
                                shape: "S5w"
                            },
                            AssignmentStatus: {}
                        }
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeIngestion: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "IngestionId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    IngestionId: {
                        location: "uri",
                        locationName: "IngestionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ingestion: {
                        shape: "S9j"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeNamespace: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Namespace: {
                        shape: "S9u"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeTemplate: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    },
                    AliasName: {
                        location: "querystring",
                        locationName: "alias-name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Template: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Name: {},
                            Version: {
                                type: "structure",
                                members: {
                                    CreatedTime: {
                                        type: "timestamp"
                                    },
                                    Errors: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Type: {},
                                                Message: {}
                                            }
                                        }
                                    },
                                    VersionNumber: {
                                        type: "long"
                                    },
                                    Status: {},
                                    DataSetConfigurations: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Placeholder: {},
                                                DataSetSchema: {
                                                    type: "structure",
                                                    members: {
                                                        ColumnSchemaList: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Name: {},
                                                                    DataType: {},
                                                                    GeographicRole: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                ColumnGroupSchemaList: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Name: {},
                                                            ColumnGroupColumnSchemaList: {
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    members: {
                                                                        Name: {}
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    Description: {},
                                    SourceEntityArn: {},
                                    ThemeArn: {},
                                    Sheets: {
                                        shape: "S8d"
                                    }
                                }
                            },
                            TemplateId: {},
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            CreatedTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeTemplateAlias: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "AliasName" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateAlias: {
                        shape: "S6h"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeTemplatePermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateId: {},
                    TemplateArn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeTheme: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    },
                    AliasName: {
                        location: "querystring",
                        locationName: "alias-name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Theme: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Name: {},
                            ThemeId: {},
                            Version: {
                                type: "structure",
                                members: {
                                    VersionNumber: {
                                        type: "long"
                                    },
                                    Arn: {},
                                    Description: {},
                                    BaseThemeId: {},
                                    CreatedTime: {
                                        type: "timestamp"
                                    },
                                    Configuration: {
                                        shape: "S6k"
                                    },
                                    Errors: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Type: {},
                                                Message: {}
                                            }
                                        }
                                    },
                                    Status: {}
                                }
                            },
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            Type: {}
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeThemeAlias: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "AliasName" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeAlias: {
                        shape: "S6z"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeThemePermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeId: {},
                    ThemeArn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeUser: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}"
            },
            input: {
                type: "structure",
                required: [ "UserName", "AwsAccountId", "Namespace" ],
                members: {
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "Saw"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        GenerateEmbedUrlForAnonymousUser: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/embed-url/anonymous-user"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace", "AuthorizedResourceArns", "ExperienceConfiguration" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    SessionLifetimeInMinutes: {
                        type: "long"
                    },
                    Namespace: {},
                    SessionTags: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Value" ],
                            members: {
                                Key: {},
                                Value: {
                                    shape: "S3s"
                                }
                            }
                        }
                    },
                    AuthorizedResourceArns: {
                        type: "list",
                        member: {}
                    },
                    ExperienceConfiguration: {
                        type: "structure",
                        members: {
                            Dashboard: {
                                type: "structure",
                                required: [ "InitialDashboardId" ],
                                members: {
                                    InitialDashboardId: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EmbedUrl", "Status", "RequestId" ],
                members: {
                    EmbedUrl: {
                        shape: "Sb8"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        GenerateEmbedUrlForRegisteredUser: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/embed-url/registered-user"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "UserArn", "ExperienceConfiguration" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    SessionLifetimeInMinutes: {
                        type: "long"
                    },
                    UserArn: {},
                    ExperienceConfiguration: {
                        type: "structure",
                        members: {
                            Dashboard: {
                                type: "structure",
                                required: [ "InitialDashboardId" ],
                                members: {
                                    InitialDashboardId: {}
                                }
                            },
                            QuickSightConsole: {
                                type: "structure",
                                members: {
                                    InitialPath: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EmbedUrl", "Status", "RequestId" ],
                members: {
                    EmbedUrl: {
                        shape: "Sb8"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        GetDashboardEmbedUrl: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/embed-url"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "IdentityType" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    IdentityType: {
                        location: "querystring",
                        locationName: "creds-type"
                    },
                    SessionLifetimeInMinutes: {
                        location: "querystring",
                        locationName: "session-lifetime",
                        type: "long"
                    },
                    UndoRedoDisabled: {
                        location: "querystring",
                        locationName: "undo-redo-disabled",
                        type: "boolean"
                    },
                    ResetDisabled: {
                        location: "querystring",
                        locationName: "reset-disabled",
                        type: "boolean"
                    },
                    StatePersistenceEnabled: {
                        location: "querystring",
                        locationName: "state-persistence-enabled",
                        type: "boolean"
                    },
                    UserArn: {
                        location: "querystring",
                        locationName: "user-arn"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    AdditionalDashboardIds: {
                        location: "querystring",
                        locationName: "additional-dashboard-ids",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmbedUrl: {
                        shape: "Sb8"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        GetSessionEmbedUrl: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/session-embed-url"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    EntryPoint: {
                        location: "querystring",
                        locationName: "entry-point"
                    },
                    SessionLifetimeInMinutes: {
                        location: "querystring",
                        locationName: "session-lifetime",
                        type: "long"
                    },
                    UserArn: {
                        location: "querystring",
                        locationName: "user-arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmbedUrl: {
                        shape: "Sb8"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListAnalyses: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/analyses"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisSummaryList: {
                        shape: "Sbp"
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListDashboardVersions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardVersionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                VersionNumber: {
                                    type: "long"
                                },
                                Status: {},
                                SourceEntityArn: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListDashboards: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardSummaryList: {
                        shape: "Sbx"
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListDataSets: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                DataSetId: {},
                                Name: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                ImportMode: {},
                                RowLevelPermissionDataSet: {
                                    shape: "S3j"
                                },
                                RowLevelPermissionTagConfigurationApplied: {
                                    type: "boolean"
                                },
                                ColumnLevelPermissionRulesApplied: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListDataSources: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sources"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSources: {
                        type: "list",
                        member: {
                            shape: "S8z"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListFolderMembers: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}/members"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    FolderMemberList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MemberId: {},
                                MemberArn: {}
                            }
                        }
                    },
                    NextToken: {},
                    RequestId: {}
                }
            }
        },
        ListFolders: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/folders"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    FolderSummaryList: {
                        shape: "Scc"
                    },
                    NextToken: {},
                    RequestId: {}
                }
            }
        },
        ListGroupMemberships: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupMemberList: {
                        type: "list",
                        member: {
                            shape: "S5s"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListGroups: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupList: {
                        shape: "Scj"
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListIAMPolicyAssignments: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentStatus: {},
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IAMPolicyAssignments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssignmentName: {},
                                AssignmentStatus: {}
                            }
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListIAMPolicyAssignmentsForUser: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/iam-policy-assignments"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "UserName", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ActiveAssignments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssignmentName: {},
                                PolicyArn: {}
                            }
                        }
                    },
                    RequestId: {},
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListIngestions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions"
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "AwsAccountId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ingestions: {
                        type: "list",
                        member: {
                            shape: "S9j"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListNamespaces: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Namespaces: {
                        type: "list",
                        member: {
                            shape: "S9u"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/resources/{ResourceArn}/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sb"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListTemplateAliases: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-result",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateAliasList: {
                        type: "list",
                        member: {
                            shape: "S6h"
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {},
                    NextToken: {}
                }
            }
        },
        ListTemplateVersions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/versions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateVersionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                VersionNumber: {
                                    type: "long"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Status: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListTemplates: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-result",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                TemplateId: {},
                                Name: {},
                                LatestVersionNumber: {
                                    type: "long"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListThemeAliases: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-result",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeAliasList: {
                        type: "list",
                        member: {
                            shape: "S6z"
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {},
                    NextToken: {}
                }
            }
        },
        ListThemeVersions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/versions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeVersionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VersionNumber: {
                                    type: "long"
                                },
                                Arn: {},
                                Description: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Status: {}
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListThemes: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                ThemeId: {},
                                LatestVersionNumber: {
                                    type: "long"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListUserGroups: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/groups"
            },
            input: {
                type: "structure",
                required: [ "UserName", "AwsAccountId", "Namespace" ],
                members: {
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupList: {
                        shape: "Scj"
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListUsers: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserList: {
                        type: "list",
                        member: {
                            shape: "Saw"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        RegisterUser: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users"
            },
            input: {
                type: "structure",
                required: [ "IdentityType", "Email", "UserRole", "AwsAccountId", "Namespace" ],
                members: {
                    IdentityType: {},
                    Email: {},
                    UserRole: {},
                    IamArn: {},
                    SessionName: {},
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    UserName: {},
                    CustomPermissionsName: {},
                    ExternalLoginFederationProviderType: {},
                    CustomFederationProviderUrl: {},
                    ExternalLoginId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "Saw"
                    },
                    UserInvitationUrl: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        RestoreAnalysis: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/restore/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    AnalysisId: {},
                    RequestId: {}
                }
            }
        },
        SearchAnalyses: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/search/analyses"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Filters" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Operator: {},
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisSummaryList: {
                        shape: "Sbp"
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        SearchDashboards: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/search/dashboards"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Filters" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Operator" ],
                            members: {
                                Operator: {},
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardSummaryList: {
                        shape: "Sbx"
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        SearchFolders: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/search/folders"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Filters" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Operator: {},
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    FolderSummaryList: {
                        shape: "Scc"
                    },
                    NextToken: {},
                    RequestId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/resources/{ResourceArn}/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/resources/{ResourceArn}/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "keys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateAccountCustomization: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/customizations"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AccountCustomization" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    AccountCustomization: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AwsAccountId: {},
                    Namespace: {},
                    AccountCustomization: {
                        shape: "Sa"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateAccountSettings: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/settings"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DefaultNamespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DefaultNamespace: {},
                    NotificationEmail: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateAnalysis: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId", "Name", "SourceEntity" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    },
                    Name: {},
                    Parameters: {
                        shape: "Sk"
                    },
                    SourceEntity: {
                        shape: "S15"
                    },
                    ThemeArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AnalysisId: {},
                    UpdateStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateAnalysisPermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    },
                    GrantPermissions: {
                        shape: "Sep"
                    },
                    RevokePermissions: {
                        shape: "Sep"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisArn: {},
                    AnalysisId: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDashboard: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "Name", "SourceEntity" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    Name: {},
                    SourceEntity: {
                        shape: "S1d"
                    },
                    Parameters: {
                        shape: "Sk"
                    },
                    VersionDescription: {},
                    DashboardPublishOptions: {
                        shape: "S1g"
                    },
                    ThemeArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VersionArn: {},
                    DashboardId: {},
                    CreationStatus: {},
                    Status: {
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateDashboardPermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    GrantPermissions: {
                        shape: "Sep"
                    },
                    RevokePermissions: {
                        shape: "Sep"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardArn: {},
                    DashboardId: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDashboardPublishedVersion: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions/{VersionNumber}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "VersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    VersionNumber: {
                        location: "uri",
                        locationName: "VersionNumber",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardId: {},
                    DashboardArn: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateDataSet: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "Name", "PhysicalTableMap", "ImportMode" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    Name: {},
                    PhysicalTableMap: {
                        shape: "S1q"
                    },
                    LogicalTableMap: {
                        shape: "S2b"
                    },
                    ImportMode: {},
                    ColumnGroups: {
                        shape: "S38"
                    },
                    FieldFolders: {
                        shape: "S3e"
                    },
                    RowLevelPermissionDataSet: {
                        shape: "S3j"
                    },
                    RowLevelPermissionTagConfiguration: {
                        shape: "S3n"
                    },
                    ColumnLevelPermissionRules: {
                        shape: "S3t"
                    },
                    DataSetUsageConfiguration: {
                        shape: "S3x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSetId: {},
                    IngestionArn: {},
                    IngestionId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDataSetPermissions: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    GrantPermissions: {
                        shape: "S11"
                    },
                    RevokePermissions: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSetArn: {},
                    DataSetId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDataSource: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId", "Name" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    },
                    Name: {},
                    DataSourceParameters: {
                        shape: "S41"
                    },
                    Credentials: {
                        shape: "S53"
                    },
                    VpcConnectionProperties: {
                        shape: "S59"
                    },
                    SslProperties: {
                        shape: "S5a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSourceId: {},
                    UpdateStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDataSourcePermissions: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    },
                    GrantPermissions: {
                        shape: "S11"
                    },
                    RevokePermissions: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceArn: {},
                    DataSourceId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateFolder: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId", "Name" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    FolderId: {},
                    RequestId: {}
                }
            }
        },
        UpdateFolderPermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    GrantPermissions: {
                        shape: "S11"
                    },
                    RevokePermissions: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        type: "integer"
                    },
                    Arn: {},
                    FolderId: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateGroup: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    Description: {},
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "S5o"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateIAMPolicyAssignment: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssignmentName", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentName: {
                        location: "uri",
                        locationName: "AssignmentName"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    AssignmentStatus: {},
                    PolicyArn: {},
                    Identities: {
                        shape: "S5w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssignmentName: {},
                    AssignmentId: {},
                    PolicyArn: {},
                    Identities: {
                        shape: "S5w"
                    },
                    AssignmentStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateTemplate: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "SourceEntity" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    SourceEntity: {
                        shape: "S69"
                    },
                    VersionDescription: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateId: {},
                    Arn: {},
                    VersionArn: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateTemplateAlias: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "AliasName", "TemplateVersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    },
                    TemplateVersionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateAlias: {
                        shape: "S6h"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateTemplatePermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    GrantPermissions: {
                        shape: "Sep"
                    },
                    RevokePermissions: {
                        shape: "Sep"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateId: {},
                    TemplateArn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateTheme: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "BaseThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    Name: {},
                    BaseThemeId: {},
                    VersionDescription: {},
                    Configuration: {
                        shape: "S6k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeId: {},
                    Arn: {},
                    VersionArn: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateThemeAlias: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "AliasName", "ThemeVersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    },
                    ThemeVersionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeAlias: {
                        shape: "S6z"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateThemePermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    GrantPermissions: {
                        shape: "Sep"
                    },
                    RevokePermissions: {
                        shape: "Sep"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeId: {},
                    ThemeArn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateUser: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}"
            },
            input: {
                type: "structure",
                required: [ "UserName", "AwsAccountId", "Namespace", "Email", "Role" ],
                members: {
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    Email: {},
                    Role: {},
                    CustomPermissionsName: {},
                    UnapplyCustomPermissions: {
                        type: "boolean"
                    },
                    ExternalLoginFederationProviderType: {},
                    CustomFederationProviderUrl: {},
                    ExternalLoginId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "Saw"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "structure",
            members: {
                DefaultTheme: {}
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sk: {
            type: "structure",
            members: {
                StringParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                IntegerParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                type: "list",
                                member: {
                                    type: "long"
                                }
                            }
                        }
                    }
                },
                DecimalParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                type: "list",
                                member: {
                                    type: "double"
                                }
                            }
                        }
                    }
                },
                DateTimeParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                type: "list",
                                member: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        S11: {
            type: "list",
            member: {
                shape: "S12"
            }
        },
        S12: {
            type: "structure",
            required: [ "Principal", "Actions" ],
            members: {
                Principal: {},
                Actions: {
                    type: "list",
                    member: {}
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                SourceTemplate: {
                    type: "structure",
                    required: [ "DataSetReferences", "Arn" ],
                    members: {
                        DataSetReferences: {
                            shape: "S17"
                        },
                        Arn: {}
                    }
                }
            }
        },
        S17: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DataSetPlaceholder", "DataSetArn" ],
                members: {
                    DataSetPlaceholder: {},
                    DataSetArn: {}
                }
            }
        },
        S1d: {
            type: "structure",
            members: {
                SourceTemplate: {
                    type: "structure",
                    required: [ "DataSetReferences", "Arn" ],
                    members: {
                        DataSetReferences: {
                            shape: "S17"
                        },
                        Arn: {}
                    }
                }
            }
        },
        S1g: {
            type: "structure",
            members: {
                AdHocFilteringOption: {
                    type: "structure",
                    members: {
                        AvailabilityStatus: {}
                    }
                },
                ExportToCSVOption: {
                    type: "structure",
                    members: {
                        AvailabilityStatus: {}
                    }
                },
                SheetControlsOption: {
                    type: "structure",
                    members: {
                        VisibilityState: {}
                    }
                }
            }
        },
        S1q: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    RelationalTable: {
                        type: "structure",
                        required: [ "DataSourceArn", "Name", "InputColumns" ],
                        members: {
                            DataSourceArn: {},
                            Catalog: {},
                            Schema: {},
                            Name: {},
                            InputColumns: {
                                shape: "S1x"
                            }
                        }
                    },
                    CustomSql: {
                        type: "structure",
                        required: [ "DataSourceArn", "Name", "SqlQuery" ],
                        members: {
                            DataSourceArn: {},
                            Name: {},
                            SqlQuery: {},
                            Columns: {
                                shape: "S1x"
                            }
                        }
                    },
                    S3Source: {
                        type: "structure",
                        required: [ "DataSourceArn", "InputColumns" ],
                        members: {
                            DataSourceArn: {},
                            UploadSettings: {
                                type: "structure",
                                members: {
                                    Format: {},
                                    StartFromRow: {
                                        type: "integer"
                                    },
                                    ContainsHeader: {
                                        type: "boolean"
                                    },
                                    TextQualifier: {},
                                    Delimiter: {}
                                }
                            },
                            InputColumns: {
                                shape: "S1x"
                            }
                        }
                    }
                }
            }
        },
        S1x: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Type" ],
                members: {
                    Name: {},
                    Type: {}
                }
            }
        },
        S2b: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "Alias", "Source" ],
                members: {
                    Alias: {},
                    DataTransforms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProjectOperation: {
                                    type: "structure",
                                    required: [ "ProjectedColumns" ],
                                    members: {
                                        ProjectedColumns: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                },
                                FilterOperation: {
                                    type: "structure",
                                    required: [ "ConditionExpression" ],
                                    members: {
                                        ConditionExpression: {}
                                    }
                                },
                                CreateColumnsOperation: {
                                    type: "structure",
                                    required: [ "Columns" ],
                                    members: {
                                        Columns: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "ColumnName", "ColumnId", "Expression" ],
                                                members: {
                                                    ColumnName: {},
                                                    ColumnId: {},
                                                    Expression: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                RenameColumnOperation: {
                                    type: "structure",
                                    required: [ "ColumnName", "NewColumnName" ],
                                    members: {
                                        ColumnName: {},
                                        NewColumnName: {}
                                    }
                                },
                                CastColumnTypeOperation: {
                                    type: "structure",
                                    required: [ "ColumnName", "NewColumnType" ],
                                    members: {
                                        ColumnName: {},
                                        NewColumnType: {},
                                        Format: {}
                                    }
                                },
                                TagColumnOperation: {
                                    type: "structure",
                                    required: [ "ColumnName", "Tags" ],
                                    members: {
                                        ColumnName: {},
                                        Tags: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    ColumnGeographicRole: {},
                                                    ColumnDescription: {
                                                        type: "structure",
                                                        members: {
                                                            Text: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                UntagColumnOperation: {
                                    type: "structure",
                                    required: [ "ColumnName", "TagNames" ],
                                    members: {
                                        ColumnName: {},
                                        TagNames: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Source: {
                        type: "structure",
                        members: {
                            JoinInstruction: {
                                type: "structure",
                                required: [ "LeftOperand", "RightOperand", "Type", "OnClause" ],
                                members: {
                                    LeftOperand: {},
                                    RightOperand: {},
                                    LeftJoinKeyProperties: {
                                        shape: "S34"
                                    },
                                    RightJoinKeyProperties: {
                                        shape: "S34"
                                    },
                                    Type: {},
                                    OnClause: {}
                                }
                            },
                            PhysicalTableId: {},
                            DataSetArn: {}
                        }
                    }
                }
            }
        },
        S34: {
            type: "structure",
            members: {
                UniqueKey: {
                    type: "boolean"
                }
            }
        },
        S38: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    GeoSpatialColumnGroup: {
                        type: "structure",
                        required: [ "Name", "CountryCode", "Columns" ],
                        members: {
                            Name: {},
                            CountryCode: {},
                            Columns: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S3e: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    description: {},
                    columns: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S3j: {
            type: "structure",
            required: [ "Arn", "PermissionPolicy" ],
            members: {
                Namespace: {},
                Arn: {},
                PermissionPolicy: {},
                FormatVersion: {},
                Status: {}
            }
        },
        S3n: {
            type: "structure",
            required: [ "TagRules" ],
            members: {
                Status: {},
                TagRules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "TagKey", "ColumnName" ],
                        members: {
                            TagKey: {},
                            ColumnName: {},
                            TagMultiValueDelimiter: {},
                            MatchAllValue: {
                                shape: "S3s"
                            }
                        }
                    }
                }
            }
        },
        S3s: {
            type: "string",
            sensitive: true
        },
        S3t: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Principals: {
                        type: "list",
                        member: {}
                    },
                    ColumnNames: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S3x: {
            type: "structure",
            members: {
                DisableUseAsDirectQuerySource: {
                    type: "boolean"
                },
                DisableUseAsImportedSource: {
                    type: "boolean"
                }
            }
        },
        S41: {
            type: "structure",
            members: {
                AmazonElasticsearchParameters: {
                    type: "structure",
                    required: [ "Domain" ],
                    members: {
                        Domain: {}
                    }
                },
                AthenaParameters: {
                    type: "structure",
                    members: {
                        WorkGroup: {}
                    }
                },
                AuroraParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                AuroraPostgreSqlParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                AwsIotAnalyticsParameters: {
                    type: "structure",
                    required: [ "DataSetName" ],
                    members: {
                        DataSetName: {}
                    }
                },
                JiraParameters: {
                    type: "structure",
                    required: [ "SiteBaseUrl" ],
                    members: {
                        SiteBaseUrl: {}
                    }
                },
                MariaDbParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                MySqlParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                OracleParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                PostgreSqlParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                PrestoParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Catalog" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Catalog: {}
                    }
                },
                RdsParameters: {
                    type: "structure",
                    required: [ "InstanceId", "Database" ],
                    members: {
                        InstanceId: {},
                        Database: {}
                    }
                },
                RedshiftParameters: {
                    type: "structure",
                    required: [ "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {},
                        ClusterId: {}
                    }
                },
                S3Parameters: {
                    type: "structure",
                    required: [ "ManifestFileLocation" ],
                    members: {
                        ManifestFileLocation: {
                            type: "structure",
                            required: [ "Bucket", "Key" ],
                            members: {
                                Bucket: {},
                                Key: {}
                            }
                        }
                    }
                },
                ServiceNowParameters: {
                    type: "structure",
                    required: [ "SiteBaseUrl" ],
                    members: {
                        SiteBaseUrl: {}
                    }
                },
                SnowflakeParameters: {
                    type: "structure",
                    required: [ "Host", "Database", "Warehouse" ],
                    members: {
                        Host: {},
                        Database: {},
                        Warehouse: {}
                    }
                },
                SparkParameters: {
                    type: "structure",
                    required: [ "Host", "Port" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        }
                    }
                },
                SqlServerParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                TeradataParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                TwitterParameters: {
                    type: "structure",
                    required: [ "Query", "MaxRows" ],
                    members: {
                        Query: {},
                        MaxRows: {
                            type: "integer"
                        }
                    }
                },
                AmazonOpenSearchParameters: {
                    type: "structure",
                    required: [ "Domain" ],
                    members: {
                        Domain: {}
                    }
                }
            }
        },
        S53: {
            type: "structure",
            members: {
                CredentialPair: {
                    type: "structure",
                    required: [ "Username", "Password" ],
                    members: {
                        Username: {},
                        Password: {},
                        AlternateDataSourceParameters: {
                            shape: "S57"
                        }
                    }
                },
                CopySourceArn: {}
            },
            sensitive: true
        },
        S57: {
            type: "list",
            member: {
                shape: "S41"
            }
        },
        S59: {
            type: "structure",
            required: [ "VpcConnectionArn" ],
            members: {
                VpcConnectionArn: {}
            }
        },
        S5a: {
            type: "structure",
            members: {
                DisableSsl: {
                    type: "boolean"
                }
            }
        },
        S5o: {
            type: "structure",
            members: {
                Arn: {},
                GroupName: {},
                Description: {},
                PrincipalId: {}
            }
        },
        S5s: {
            type: "structure",
            members: {
                Arn: {},
                MemberName: {}
            }
        },
        S5w: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        },
        S69: {
            type: "structure",
            members: {
                SourceAnalysis: {
                    type: "structure",
                    required: [ "Arn", "DataSetReferences" ],
                    members: {
                        Arn: {},
                        DataSetReferences: {
                            shape: "S17"
                        }
                    }
                },
                SourceTemplate: {
                    type: "structure",
                    required: [ "Arn" ],
                    members: {
                        Arn: {}
                    }
                }
            }
        },
        S6h: {
            type: "structure",
            members: {
                AliasName: {},
                Arn: {},
                TemplateVersionNumber: {
                    type: "long"
                }
            }
        },
        S6k: {
            type: "structure",
            members: {
                DataColorPalette: {
                    type: "structure",
                    members: {
                        Colors: {
                            shape: "S6m"
                        },
                        MinMaxGradient: {
                            shape: "S6m"
                        },
                        EmptyFillColor: {}
                    }
                },
                UIColorPalette: {
                    type: "structure",
                    members: {
                        PrimaryForeground: {},
                        PrimaryBackground: {},
                        SecondaryForeground: {},
                        SecondaryBackground: {},
                        Accent: {},
                        AccentForeground: {},
                        Danger: {},
                        DangerForeground: {},
                        Warning: {},
                        WarningForeground: {},
                        Success: {},
                        SuccessForeground: {},
                        Dimension: {},
                        DimensionForeground: {},
                        Measure: {},
                        MeasureForeground: {}
                    }
                },
                Sheet: {
                    type: "structure",
                    members: {
                        Tile: {
                            type: "structure",
                            members: {
                                Border: {
                                    type: "structure",
                                    members: {
                                        Show: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        },
                        TileLayout: {
                            type: "structure",
                            members: {
                                Gutter: {
                                    type: "structure",
                                    members: {
                                        Show: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                Margin: {
                                    type: "structure",
                                    members: {
                                        Show: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S6m: {
            type: "list",
            member: {}
        },
        S6z: {
            type: "structure",
            members: {
                Arn: {},
                AliasName: {},
                ThemeVersionNumber: {
                    type: "long"
                }
            }
        },
        S8c: {
            type: "list",
            member: {}
        },
        S8d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SheetId: {},
                    Name: {}
                }
            }
        },
        S8z: {
            type: "structure",
            members: {
                Arn: {},
                DataSourceId: {},
                Name: {},
                Type: {},
                Status: {},
                CreatedTime: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                },
                DataSourceParameters: {
                    shape: "S41"
                },
                AlternateDataSourceParameters: {
                    shape: "S57"
                },
                VpcConnectionProperties: {
                    shape: "S59"
                },
                SslProperties: {
                    shape: "S5a"
                },
                ErrorInfo: {
                    type: "structure",
                    members: {
                        Type: {},
                        Message: {}
                    }
                }
            }
        },
        S9j: {
            type: "structure",
            required: [ "Arn", "IngestionStatus", "CreatedTime" ],
            members: {
                Arn: {},
                IngestionId: {},
                IngestionStatus: {},
                ErrorInfo: {
                    type: "structure",
                    members: {
                        Type: {},
                        Message: {}
                    }
                },
                RowInfo: {
                    type: "structure",
                    members: {
                        RowsIngested: {
                            type: "long"
                        },
                        RowsDropped: {
                            type: "long"
                        }
                    }
                },
                QueueInfo: {
                    type: "structure",
                    required: [ "WaitingOnIngestion", "QueuedIngestion" ],
                    members: {
                        WaitingOnIngestion: {},
                        QueuedIngestion: {}
                    }
                },
                CreatedTime: {
                    type: "timestamp"
                },
                IngestionTimeInSeconds: {
                    type: "long"
                },
                IngestionSizeInBytes: {
                    type: "long"
                },
                RequestSource: {},
                RequestType: {}
            }
        },
        S9u: {
            type: "structure",
            members: {
                Name: {},
                Arn: {},
                CapacityRegion: {},
                CreationStatus: {},
                IdentityStore: {},
                NamespaceError: {
                    type: "structure",
                    members: {
                        Type: {},
                        Message: {}
                    }
                }
            }
        },
        Saw: {
            type: "structure",
            members: {
                Arn: {},
                UserName: {},
                Email: {},
                Role: {},
                IdentityType: {},
                Active: {
                    type: "boolean"
                },
                PrincipalId: {},
                CustomPermissionsName: {},
                ExternalLoginFederationProviderType: {},
                ExternalLoginFederationProviderUrl: {},
                ExternalLoginId: {}
            }
        },
        Sb8: {
            type: "string",
            sensitive: true
        },
        Sbp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    AnalysisId: {},
                    Name: {},
                    Status: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        Sbx: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    DashboardId: {},
                    Name: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    PublishedVersionNumber: {
                        type: "long"
                    },
                    LastPublishedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        Scc: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    FolderId: {},
                    Name: {},
                    FolderType: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        Scj: {
            type: "list",
            member: {
                shape: "S5o"
            }
        },
        Sep: {
            type: "list",
            member: {
                shape: "S12"
            }
        }
    },
    paginators: {
        ListAnalyses: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AnalysisSummaryList"
        },
        ListDashboardVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DashboardVersionSummaryList"
        },
        ListDashboards: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DashboardSummaryList"
        },
        ListDataSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DataSetSummaries"
        },
        ListDataSources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DataSources"
        },
        ListIngestions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Ingestions"
        },
        ListNamespaces: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Namespaces"
        },
        ListTemplateAliases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TemplateAliasList"
        },
        ListTemplateVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TemplateVersionSummaryList"
        },
        ListTemplates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TemplateSummaryList"
        },
        ListThemeVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ThemeVersionSummaryList"
        },
        ListThemes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ThemeSummaryList"
        },
        SearchAnalyses: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AnalysisSummaryList"
        },
        SearchDashboards: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DashboardSummaryList"
        }
    }
};

AWS.apiLoader.services["rdsdataservice"] = {};

AWS.RDSDataService = AWS.Service.defineService("rdsdataservice", [ "2018-08-01" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    107: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.util.update(AWS.RDSDataService.prototype, {
            retryableError: function retryableError(error) {
                if (error.code === "BadRequestException" && error.message && error.message.match(/^Communications link failure/) && error.statusCode === 400) {
                    return true;
                } else {
                    var _super = AWS.Service.prototype.retryableError;
                    return _super.call(this, error);
                }
            }
        });
    }, {
        "../core": 39
    } ]
}, {}, [ 107 ]);

AWS.apiLoader.services["rdsdataservice"]["2018-08-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-08-01",
        endpointPrefix: "rds-data",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS RDS DataService",
        serviceId: "RDS Data",
        signatureVersion: "v4",
        signingName: "rds-data",
        uid: "rds-data-2018-08-01"
    },
    operations: {
        BatchExecuteStatement: {
            http: {
                requestUri: "/BatchExecute",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "secretArn", "sql" ],
                members: {
                    database: {},
                    parameterSets: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    resourceArn: {},
                    schema: {},
                    secretArn: {},
                    sql: {},
                    transactionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    updateResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                generatedFields: {
                                    shape: "Sq"
                                }
                            }
                        }
                    }
                }
            }
        },
        BeginTransaction: {
            http: {
                requestUri: "/BeginTransaction",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "secretArn" ],
                members: {
                    database: {},
                    resourceArn: {},
                    schema: {},
                    secretArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    transactionId: {}
                }
            }
        },
        CommitTransaction: {
            http: {
                requestUri: "/CommitTransaction",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "secretArn", "transactionId" ],
                members: {
                    resourceArn: {},
                    secretArn: {},
                    transactionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    transactionStatus: {}
                }
            }
        },
        ExecuteSql: {
            http: {
                requestUri: "/ExecuteSql",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "awsSecretStoreArn", "dbClusterOrInstanceArn", "sqlStatements" ],
                members: {
                    awsSecretStoreArn: {},
                    database: {},
                    dbClusterOrInstanceArn: {},
                    schema: {},
                    sqlStatements: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    sqlStatementResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                numberOfRecordsUpdated: {
                                    type: "long"
                                },
                                resultFrame: {
                                    type: "structure",
                                    members: {
                                        records: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    values: {
                                                        type: "list",
                                                        member: {
                                                            shape: "S15"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        resultSetMetadata: {
                                            type: "structure",
                                            members: {
                                                columnCount: {
                                                    type: "long"
                                                },
                                                columnMetadata: {
                                                    shape: "S1c"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "The ExecuteSql API is deprecated, please use the ExecuteStatement API."
        },
        ExecuteStatement: {
            http: {
                requestUri: "/Execute",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "secretArn", "sql" ],
                members: {
                    continueAfterTimeout: {
                        type: "boolean"
                    },
                    database: {},
                    includeResultMetadata: {
                        type: "boolean"
                    },
                    parameters: {
                        shape: "S4"
                    },
                    resourceArn: {},
                    resultSetOptions: {
                        type: "structure",
                        members: {
                            decimalReturnType: {}
                        }
                    },
                    schema: {},
                    secretArn: {},
                    sql: {},
                    transactionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    columnMetadata: {
                        shape: "S1c"
                    },
                    generatedFields: {
                        shape: "Sq"
                    },
                    numberOfRecordsUpdated: {
                        type: "long"
                    },
                    records: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    }
                }
            }
        },
        RollbackTransaction: {
            http: {
                requestUri: "/RollbackTransaction",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "secretArn", "transactionId" ],
                members: {
                    resourceArn: {},
                    secretArn: {},
                    transactionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    transactionStatus: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    typeHint: {},
                    value: {
                        shape: "S8"
                    }
                }
            }
        },
        S8: {
            type: "structure",
            members: {
                arrayValue: {
                    shape: "S9"
                },
                blobValue: {
                    type: "blob"
                },
                booleanValue: {
                    type: "boolean"
                },
                doubleValue: {
                    type: "double"
                },
                isNull: {
                    type: "boolean"
                },
                longValue: {
                    type: "long"
                },
                stringValue: {}
            },
            union: true
        },
        S9: {
            type: "structure",
            members: {
                arrayValues: {
                    type: "list",
                    member: {
                        shape: "S9"
                    }
                },
                booleanValues: {
                    type: "list",
                    member: {
                        type: "boolean"
                    }
                },
                doubleValues: {
                    type: "list",
                    member: {
                        type: "double"
                    }
                },
                longValues: {
                    type: "list",
                    member: {
                        type: "long"
                    }
                },
                stringValues: {
                    type: "list",
                    member: {}
                }
            },
            union: true
        },
        Sq: {
            type: "list",
            member: {
                shape: "S8"
            }
        },
        S15: {
            type: "structure",
            members: {
                arrayValues: {
                    shape: "S16"
                },
                bigIntValue: {
                    type: "long"
                },
                bitValue: {
                    type: "boolean"
                },
                blobValue: {
                    type: "blob"
                },
                doubleValue: {
                    type: "double"
                },
                intValue: {
                    type: "integer"
                },
                isNull: {
                    type: "boolean"
                },
                realValue: {
                    type: "float"
                },
                stringValue: {},
                structValue: {
                    type: "structure",
                    members: {
                        attributes: {
                            shape: "S16"
                        }
                    }
                }
            },
            union: true
        },
        S16: {
            type: "list",
            member: {
                shape: "S15"
            }
        },
        S1c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arrayBaseColumnType: {
                        type: "integer"
                    },
                    isAutoIncrement: {
                        type: "boolean"
                    },
                    isCaseSensitive: {
                        type: "boolean"
                    },
                    isCurrency: {
                        type: "boolean"
                    },
                    isSigned: {
                        type: "boolean"
                    },
                    label: {},
                    name: {},
                    nullable: {
                        type: "integer"
                    },
                    precision: {
                        type: "integer"
                    },
                    scale: {
                        type: "integer"
                    },
                    schemaName: {},
                    tableName: {},
                    type: {
                        type: "integer"
                    },
                    typeName: {}
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["amplify"] = {};

AWS.Amplify = AWS.Service.defineService("amplify", [ "2017-07-25" ]);

AWS.apiLoader.services["amplify"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "amplify",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amplify",
        serviceFullName: "AWS Amplify",
        serviceId: "Amplify",
        signatureVersion: "v4",
        signingName: "amplify",
        uid: "amplify-2017-07-25"
    },
    operations: {
        CreateApp: {
            http: {
                requestUri: "/apps"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    repository: {},
                    platform: {},
                    iamServiceRoleArn: {},
                    oauthToken: {
                        shape: "S7"
                    },
                    accessToken: {
                        shape: "S8"
                    },
                    environmentVariables: {
                        shape: "S9"
                    },
                    enableBranchAutoBuild: {
                        type: "boolean"
                    },
                    enableBranchAutoDeletion: {
                        type: "boolean"
                    },
                    enableBasicAuth: {
                        type: "boolean"
                    },
                    basicAuthCredentials: {
                        shape: "Sf"
                    },
                    customRules: {
                        shape: "Sg"
                    },
                    tags: {
                        shape: "Sm"
                    },
                    buildSpec: {},
                    customHeaders: {},
                    enableAutoBranchCreation: {
                        type: "boolean"
                    },
                    autoBranchCreationPatterns: {
                        shape: "Ss"
                    },
                    autoBranchCreationConfig: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "S12"
                    }
                }
            }
        },
        CreateBackendEnvironment: {
            http: {
                requestUri: "/apps/{appId}/backendenvironments"
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {},
                    stackName: {},
                    deploymentArtifacts: {}
                }
            },
            output: {
                type: "structure",
                required: [ "backendEnvironment" ],
                members: {
                    backendEnvironment: {
                        shape: "S1h"
                    }
                }
            }
        },
        CreateBranch: {
            http: {
                requestUri: "/apps/{appId}/branches"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {},
                    description: {},
                    stage: {},
                    framework: {},
                    enableNotification: {
                        type: "boolean"
                    },
                    enableAutoBuild: {
                        type: "boolean"
                    },
                    environmentVariables: {
                        shape: "S9"
                    },
                    basicAuthCredentials: {
                        shape: "Sf"
                    },
                    enableBasicAuth: {
                        type: "boolean"
                    },
                    enablePerformanceMode: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "Sm"
                    },
                    buildSpec: {},
                    ttl: {},
                    displayName: {},
                    enablePullRequestPreview: {
                        type: "boolean"
                    },
                    pullRequestEnvironmentName: {},
                    backendEnvironmentArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "branch" ],
                members: {
                    branch: {
                        shape: "S1o"
                    }
                }
            }
        },
        CreateDeployment: {
            http: {
                requestUri: "/apps/{appId}/branches/{branchName}/deployments"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    fileMap: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "fileUploadUrls", "zipUploadUrl" ],
                members: {
                    jobId: {},
                    fileUploadUrls: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    zipUploadUrl: {}
                }
            }
        },
        CreateDomainAssociation: {
            http: {
                requestUri: "/apps/{appId}/domains"
            },
            input: {
                type: "structure",
                required: [ "appId", "domainName", "subDomainSettings" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    domainName: {},
                    enableAutoSubDomain: {
                        type: "boolean"
                    },
                    subDomainSettings: {
                        shape: "S27"
                    },
                    autoSubDomainCreationPatterns: {
                        shape: "S2a"
                    },
                    autoSubDomainIAMRole: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainAssociation" ],
                members: {
                    domainAssociation: {
                        shape: "S2e"
                    }
                }
            }
        },
        CreateWebhook: {
            http: {
                requestUri: "/apps/{appId}/webhooks"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "webhook" ],
                members: {
                    webhook: {
                        shape: "S2p"
                    }
                }
            }
        },
        DeleteApp: {
            http: {
                method: "DELETE",
                requestUri: "/apps/{appId}"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "S12"
                    }
                }
            }
        },
        DeleteBackendEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/apps/{appId}/backendenvironments/{environmentName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "backendEnvironment" ],
                members: {
                    backendEnvironment: {
                        shape: "S1h"
                    }
                }
            }
        },
        DeleteBranch: {
            http: {
                method: "DELETE",
                requestUri: "/apps/{appId}/branches/{branchName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "branch" ],
                members: {
                    branch: {
                        shape: "S1o"
                    }
                }
            }
        },
        DeleteDomainAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/apps/{appId}/domains/{domainName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "domainName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    domainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainAssociation" ],
                members: {
                    domainAssociation: {
                        shape: "S2e"
                    }
                }
            }
        },
        DeleteJob: {
            http: {
                method: "DELETE",
                requestUri: "/apps/{appId}/branches/{branchName}/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName", "jobId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobSummary" ],
                members: {
                    jobSummary: {
                        shape: "S33"
                    }
                }
            }
        },
        DeleteWebhook: {
            http: {
                method: "DELETE",
                requestUri: "/webhooks/{webhookId}"
            },
            input: {
                type: "structure",
                required: [ "webhookId" ],
                members: {
                    webhookId: {
                        location: "uri",
                        locationName: "webhookId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "webhook" ],
                members: {
                    webhook: {
                        shape: "S2p"
                    }
                }
            }
        },
        GenerateAccessLogs: {
            http: {
                requestUri: "/apps/{appId}/accesslogs"
            },
            input: {
                type: "structure",
                required: [ "domainName", "appId" ],
                members: {
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    domainName: {},
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    logUrl: {}
                }
            }
        },
        GetApp: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "S12"
                    }
                }
            }
        },
        GetArtifactUrl: {
            http: {
                method: "GET",
                requestUri: "/artifacts/{artifactId}"
            },
            input: {
                type: "structure",
                required: [ "artifactId" ],
                members: {
                    artifactId: {
                        location: "uri",
                        locationName: "artifactId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "artifactId", "artifactUrl" ],
                members: {
                    artifactId: {},
                    artifactUrl: {}
                }
            }
        },
        GetBackendEnvironment: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/backendenvironments/{environmentName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "backendEnvironment" ],
                members: {
                    backendEnvironment: {
                        shape: "S1h"
                    }
                }
            }
        },
        GetBranch: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/branches/{branchName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "branch" ],
                members: {
                    branch: {
                        shape: "S1o"
                    }
                }
            }
        },
        GetDomainAssociation: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/domains/{domainName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "domainName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    domainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainAssociation" ],
                members: {
                    domainAssociation: {
                        shape: "S2e"
                    }
                }
            }
        },
        GetJob: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/branches/{branchName}/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName", "jobId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {
                        type: "structure",
                        required: [ "summary", "steps" ],
                        members: {
                            summary: {
                                shape: "S33"
                            },
                            steps: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "stepName", "startTime", "status", "endTime" ],
                                    members: {
                                        stepName: {},
                                        startTime: {
                                            type: "timestamp"
                                        },
                                        status: {},
                                        endTime: {
                                            type: "timestamp"
                                        },
                                        logUrl: {},
                                        artifactsUrl: {},
                                        testArtifactsUrl: {},
                                        testConfigUrl: {},
                                        screenshots: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        },
                                        statusReason: {},
                                        context: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetWebhook: {
            http: {
                method: "GET",
                requestUri: "/webhooks/{webhookId}"
            },
            input: {
                type: "structure",
                required: [ "webhookId" ],
                members: {
                    webhookId: {
                        location: "uri",
                        locationName: "webhookId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "webhook" ],
                members: {
                    webhook: {
                        shape: "S2p"
                    }
                }
            }
        },
        ListApps: {
            http: {
                method: "GET",
                requestUri: "/apps"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "apps" ],
                members: {
                    apps: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListArtifacts: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/branches/{branchName}/jobs/{jobId}/artifacts"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName", "jobId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "artifacts" ],
                members: {
                    artifacts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "artifactFileName", "artifactId" ],
                            members: {
                                artifactFileName: {},
                                artifactId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBackendEnvironments: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/backendenvironments"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "querystring",
                        locationName: "environmentName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "backendEnvironments" ],
                members: {
                    backendEnvironments: {
                        type: "list",
                        member: {
                            shape: "S1h"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBranches: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/branches"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "branches" ],
                members: {
                    branches: {
                        type: "list",
                        member: {
                            shape: "S1o"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDomainAssociations: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/domains"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainAssociations" ],
                members: {
                    domainAssociations: {
                        type: "list",
                        member: {
                            shape: "S2e"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListJobs: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/branches/{branchName}/jobs"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobSummaries" ],
                members: {
                    jobSummaries: {
                        type: "list",
                        member: {
                            shape: "S33"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sm"
                    }
                }
            }
        },
        ListWebhooks: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/webhooks"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "webhooks" ],
                members: {
                    webhooks: {
                        type: "list",
                        member: {
                            shape: "S2p"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        StartDeployment: {
            http: {
                requestUri: "/apps/{appId}/branches/{branchName}/deployments/start"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    jobId: {},
                    sourceUrl: {}
                }
            },
            output: {
                type: "structure",
                required: [ "jobSummary" ],
                members: {
                    jobSummary: {
                        shape: "S33"
                    }
                }
            }
        },
        StartJob: {
            http: {
                requestUri: "/apps/{appId}/branches/{branchName}/jobs"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName", "jobType" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    jobId: {},
                    jobType: {},
                    jobReason: {},
                    commitId: {},
                    commitMessage: {},
                    commitTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobSummary" ],
                members: {
                    jobSummary: {
                        shape: "S33"
                    }
                }
            }
        },
        StopJob: {
            http: {
                method: "DELETE",
                requestUri: "/apps/{appId}/branches/{branchName}/jobs/{jobId}/stop"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName", "jobId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobSummary" ],
                members: {
                    jobSummary: {
                        shape: "S33"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApp: {
            http: {
                requestUri: "/apps/{appId}"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    name: {},
                    description: {},
                    platform: {},
                    iamServiceRoleArn: {},
                    environmentVariables: {
                        shape: "S9"
                    },
                    enableBranchAutoBuild: {
                        type: "boolean"
                    },
                    enableBranchAutoDeletion: {
                        type: "boolean"
                    },
                    enableBasicAuth: {
                        type: "boolean"
                    },
                    basicAuthCredentials: {
                        shape: "Sf"
                    },
                    customRules: {
                        shape: "Sg"
                    },
                    buildSpec: {},
                    customHeaders: {},
                    enableAutoBranchCreation: {
                        type: "boolean"
                    },
                    autoBranchCreationPatterns: {
                        shape: "Ss"
                    },
                    autoBranchCreationConfig: {
                        shape: "Su"
                    },
                    repository: {},
                    oauthToken: {
                        shape: "S7"
                    },
                    accessToken: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "S12"
                    }
                }
            }
        },
        UpdateBranch: {
            http: {
                requestUri: "/apps/{appId}/branches/{branchName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    description: {},
                    framework: {},
                    stage: {},
                    enableNotification: {
                        type: "boolean"
                    },
                    enableAutoBuild: {
                        type: "boolean"
                    },
                    environmentVariables: {
                        shape: "S9"
                    },
                    basicAuthCredentials: {
                        shape: "Sf"
                    },
                    enableBasicAuth: {
                        type: "boolean"
                    },
                    enablePerformanceMode: {
                        type: "boolean"
                    },
                    buildSpec: {},
                    ttl: {},
                    displayName: {},
                    enablePullRequestPreview: {
                        type: "boolean"
                    },
                    pullRequestEnvironmentName: {},
                    backendEnvironmentArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "branch" ],
                members: {
                    branch: {
                        shape: "S1o"
                    }
                }
            }
        },
        UpdateDomainAssociation: {
            http: {
                requestUri: "/apps/{appId}/domains/{domainName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "domainName", "subDomainSettings" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    domainName: {
                        location: "uri",
                        locationName: "domainName"
                    },
                    enableAutoSubDomain: {
                        type: "boolean"
                    },
                    subDomainSettings: {
                        shape: "S27"
                    },
                    autoSubDomainCreationPatterns: {
                        shape: "S2a"
                    },
                    autoSubDomainIAMRole: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainAssociation" ],
                members: {
                    domainAssociation: {
                        shape: "S2e"
                    }
                }
            }
        },
        UpdateWebhook: {
            http: {
                requestUri: "/webhooks/{webhookId}"
            },
            input: {
                type: "structure",
                required: [ "webhookId" ],
                members: {
                    webhookId: {
                        location: "uri",
                        locationName: "webhookId"
                    },
                    branchName: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "webhook" ],
                members: {
                    webhook: {
                        shape: "S2p"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "string",
            sensitive: true
        },
        S8: {
            type: "string",
            sensitive: true
        },
        S9: {
            type: "map",
            key: {},
            value: {}
        },
        Sf: {
            type: "string",
            sensitive: true
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                required: [ "source", "target" ],
                members: {
                    source: {},
                    target: {},
                    status: {},
                    condition: {}
                }
            }
        },
        Sm: {
            type: "map",
            key: {},
            value: {}
        },
        Ss: {
            type: "list",
            member: {}
        },
        Su: {
            type: "structure",
            members: {
                stage: {},
                framework: {},
                enableAutoBuild: {
                    type: "boolean"
                },
                environmentVariables: {
                    shape: "S9"
                },
                basicAuthCredentials: {
                    shape: "Sf"
                },
                enableBasicAuth: {
                    type: "boolean"
                },
                enablePerformanceMode: {
                    type: "boolean"
                },
                buildSpec: {},
                enablePullRequestPreview: {
                    type: "boolean"
                },
                pullRequestEnvironmentName: {}
            }
        },
        S12: {
            type: "structure",
            required: [ "appId", "appArn", "name", "description", "repository", "platform", "createTime", "updateTime", "environmentVariables", "defaultDomain", "enableBranchAutoBuild", "enableBasicAuth" ],
            members: {
                appId: {},
                appArn: {},
                name: {},
                tags: {
                    shape: "Sm"
                },
                description: {},
                repository: {},
                platform: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                },
                iamServiceRoleArn: {},
                environmentVariables: {
                    shape: "S9"
                },
                defaultDomain: {},
                enableBranchAutoBuild: {
                    type: "boolean"
                },
                enableBranchAutoDeletion: {
                    type: "boolean"
                },
                enableBasicAuth: {
                    type: "boolean"
                },
                basicAuthCredentials: {
                    shape: "Sf"
                },
                customRules: {
                    shape: "Sg"
                },
                productionBranch: {
                    type: "structure",
                    members: {
                        lastDeployTime: {
                            type: "timestamp"
                        },
                        status: {},
                        thumbnailUrl: {},
                        branchName: {}
                    }
                },
                buildSpec: {},
                customHeaders: {},
                enableAutoBranchCreation: {
                    type: "boolean"
                },
                autoBranchCreationPatterns: {
                    shape: "Ss"
                },
                autoBranchCreationConfig: {
                    shape: "Su"
                }
            }
        },
        S1h: {
            type: "structure",
            required: [ "backendEnvironmentArn", "environmentName", "createTime", "updateTime" ],
            members: {
                backendEnvironmentArn: {},
                environmentName: {},
                stackName: {},
                deploymentArtifacts: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                }
            }
        },
        S1o: {
            type: "structure",
            required: [ "branchArn", "branchName", "description", "stage", "displayName", "enableNotification", "createTime", "updateTime", "environmentVariables", "enableAutoBuild", "customDomains", "framework", "activeJobId", "totalNumberOfJobs", "enableBasicAuth", "ttl", "enablePullRequestPreview" ],
            members: {
                branchArn: {},
                branchName: {},
                description: {},
                tags: {
                    shape: "Sm"
                },
                stage: {},
                displayName: {},
                enableNotification: {
                    type: "boolean"
                },
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                },
                environmentVariables: {
                    shape: "S9"
                },
                enableAutoBuild: {
                    type: "boolean"
                },
                customDomains: {
                    type: "list",
                    member: {}
                },
                framework: {},
                activeJobId: {},
                totalNumberOfJobs: {},
                enableBasicAuth: {
                    type: "boolean"
                },
                enablePerformanceMode: {
                    type: "boolean"
                },
                thumbnailUrl: {},
                basicAuthCredentials: {
                    shape: "Sf"
                },
                buildSpec: {},
                ttl: {},
                associatedResources: {
                    type: "list",
                    member: {}
                },
                enablePullRequestPreview: {
                    type: "boolean"
                },
                pullRequestEnvironmentName: {},
                destinationBranch: {},
                sourceBranch: {},
                backendEnvironmentArn: {}
            }
        },
        S27: {
            type: "list",
            member: {
                shape: "S28"
            }
        },
        S28: {
            type: "structure",
            required: [ "prefix", "branchName" ],
            members: {
                prefix: {},
                branchName: {}
            }
        },
        S2a: {
            type: "list",
            member: {}
        },
        S2e: {
            type: "structure",
            required: [ "domainAssociationArn", "domainName", "enableAutoSubDomain", "domainStatus", "statusReason", "subDomains" ],
            members: {
                domainAssociationArn: {},
                domainName: {},
                enableAutoSubDomain: {
                    type: "boolean"
                },
                autoSubDomainCreationPatterns: {
                    shape: "S2a"
                },
                autoSubDomainIAMRole: {},
                domainStatus: {},
                statusReason: {},
                certificateVerificationDNSRecord: {},
                subDomains: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "subDomainSetting", "verified", "dnsRecord" ],
                        members: {
                            subDomainSetting: {
                                shape: "S28"
                            },
                            verified: {
                                type: "boolean"
                            },
                            dnsRecord: {}
                        }
                    }
                }
            }
        },
        S2p: {
            type: "structure",
            required: [ "webhookArn", "webhookId", "webhookUrl", "branchName", "description", "createTime", "updateTime" ],
            members: {
                webhookArn: {},
                webhookId: {},
                webhookUrl: {},
                branchName: {},
                description: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                }
            }
        },
        S33: {
            type: "structure",
            required: [ "jobArn", "jobId", "commitId", "commitMessage", "commitTime", "startTime", "status", "jobType" ],
            members: {
                jobArn: {},
                jobId: {},
                commitId: {},
                commitMessage: {},
                commitTime: {
                    type: "timestamp"
                },
                startTime: {
                    type: "timestamp"
                },
                status: {},
                endTime: {
                    type: "timestamp"
                },
                jobType: {}
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["datasync"] = {};

AWS.DataSync = AWS.Service.defineService("datasync", [ "2018-11-09" ]);

AWS.apiLoader.services["datasync"]["2018-11-09"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-11-09",
        endpointPrefix: "datasync",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "DataSync",
        serviceFullName: "AWS DataSync",
        serviceId: "DataSync",
        signatureVersion: "v4",
        signingName: "datasync",
        targetPrefix: "FmrsService",
        uid: "datasync-2018-11-09"
    },
    operations: {
        CancelTaskExecution: {
            input: {
                type: "structure",
                required: [ "TaskExecutionArn" ],
                members: {
                    TaskExecutionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateAgent: {
            input: {
                type: "structure",
                required: [ "ActivationKey" ],
                members: {
                    ActivationKey: {},
                    AgentName: {},
                    Tags: {
                        shape: "S7"
                    },
                    VpcEndpointId: {},
                    SubnetArns: {
                        shape: "Sb"
                    },
                    SecurityGroupArns: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AgentArn: {}
                }
            }
        },
        CreateLocationEfs: {
            input: {
                type: "structure",
                required: [ "EfsFilesystemArn", "Ec2Config" ],
                members: {
                    Subdirectory: {},
                    EfsFilesystemArn: {},
                    Ec2Config: {
                        shape: "Sk"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationFsxWindows: {
            input: {
                type: "structure",
                required: [ "FsxFilesystemArn", "SecurityGroupArns", "User", "Password" ],
                members: {
                    Subdirectory: {},
                    FsxFilesystemArn: {},
                    SecurityGroupArns: {
                        shape: "Sl"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    User: {},
                    Domain: {},
                    Password: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationNfs: {
            input: {
                type: "structure",
                required: [ "Subdirectory", "ServerHostname", "OnPremConfig" ],
                members: {
                    Subdirectory: {},
                    ServerHostname: {},
                    OnPremConfig: {
                        shape: "Sy"
                    },
                    MountOptions: {
                        shape: "S10"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationObjectStorage: {
            input: {
                type: "structure",
                required: [ "ServerHostname", "BucketName", "AgentArns" ],
                members: {
                    ServerHostname: {},
                    ServerPort: {
                        type: "integer"
                    },
                    ServerProtocol: {},
                    Subdirectory: {},
                    BucketName: {},
                    AccessKey: {},
                    SecretKey: {
                        shape: "S19"
                    },
                    AgentArns: {
                        shape: "Sz"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationS3: {
            input: {
                type: "structure",
                required: [ "S3BucketArn", "S3Config" ],
                members: {
                    Subdirectory: {},
                    S3BucketArn: {},
                    S3StorageClass: {},
                    S3Config: {
                        shape: "S1e"
                    },
                    AgentArns: {
                        shape: "Sz"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationSmb: {
            input: {
                type: "structure",
                required: [ "Subdirectory", "ServerHostname", "User", "Password", "AgentArns" ],
                members: {
                    Subdirectory: {},
                    ServerHostname: {},
                    User: {},
                    Domain: {},
                    Password: {
                        shape: "St"
                    },
                    AgentArns: {
                        shape: "Sz"
                    },
                    MountOptions: {
                        shape: "S1j"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateTask: {
            input: {
                type: "structure",
                required: [ "SourceLocationArn", "DestinationLocationArn" ],
                members: {
                    SourceLocationArn: {},
                    DestinationLocationArn: {},
                    CloudWatchLogGroupArn: {},
                    Name: {},
                    Options: {
                        shape: "S1o"
                    },
                    Excludes: {
                        shape: "S23"
                    },
                    Schedule: {
                        shape: "S27"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    Includes: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskArn: {}
                }
            }
        },
        DeleteAgent: {
            input: {
                type: "structure",
                required: [ "AgentArn" ],
                members: {
                    AgentArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLocation: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTask: {
            input: {
                type: "structure",
                required: [ "TaskArn" ],
                members: {
                    TaskArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAgent: {
            input: {
                type: "structure",
                required: [ "AgentArn" ],
                members: {
                    AgentArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AgentArn: {},
                    Name: {},
                    Status: {},
                    LastConnectionTime: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    EndpointType: {},
                    PrivateLinkConfig: {
                        type: "structure",
                        members: {
                            VpcEndpointId: {},
                            PrivateLinkEndpoint: {},
                            SubnetArns: {
                                shape: "Sb"
                            },
                            SecurityGroupArns: {
                                shape: "Sd"
                            }
                        }
                    }
                }
            }
        },
        DescribeLocationEfs: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    Ec2Config: {
                        shape: "Sk"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeLocationFsxWindows: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    SecurityGroupArns: {
                        shape: "Sl"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    User: {},
                    Domain: {}
                }
            }
        },
        DescribeLocationNfs: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    OnPremConfig: {
                        shape: "Sy"
                    },
                    MountOptions: {
                        shape: "S10"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeLocationObjectStorage: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    AccessKey: {},
                    ServerPort: {
                        type: "integer"
                    },
                    ServerProtocol: {},
                    AgentArns: {
                        shape: "Sz"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeLocationS3: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    S3StorageClass: {},
                    S3Config: {
                        shape: "S1e"
                    },
                    AgentArns: {
                        shape: "Sz"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeLocationSmb: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    AgentArns: {
                        shape: "Sz"
                    },
                    User: {},
                    Domain: {},
                    MountOptions: {
                        shape: "S1j"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeTask: {
            input: {
                type: "structure",
                required: [ "TaskArn" ],
                members: {
                    TaskArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskArn: {},
                    Status: {},
                    Name: {},
                    CurrentTaskExecutionArn: {},
                    SourceLocationArn: {},
                    DestinationLocationArn: {},
                    CloudWatchLogGroupArn: {},
                    SourceNetworkInterfaceArns: {
                        type: "list",
                        member: {}
                    },
                    DestinationNetworkInterfaceArns: {
                        type: "list",
                        member: {}
                    },
                    Options: {
                        shape: "S1o"
                    },
                    Excludes: {
                        shape: "S23"
                    },
                    Schedule: {
                        shape: "S27"
                    },
                    ErrorCode: {},
                    ErrorDetail: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    Includes: {
                        shape: "S23"
                    }
                }
            }
        },
        DescribeTaskExecution: {
            input: {
                type: "structure",
                required: [ "TaskExecutionArn" ],
                members: {
                    TaskExecutionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskExecutionArn: {},
                    Status: {},
                    Options: {
                        shape: "S1o"
                    },
                    Excludes: {
                        shape: "S23"
                    },
                    Includes: {
                        shape: "S23"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EstimatedFilesToTransfer: {
                        type: "long"
                    },
                    EstimatedBytesToTransfer: {
                        type: "long"
                    },
                    FilesTransferred: {
                        type: "long"
                    },
                    BytesWritten: {
                        type: "long"
                    },
                    BytesTransferred: {
                        type: "long"
                    },
                    Result: {
                        type: "structure",
                        members: {
                            PrepareDuration: {
                                type: "long"
                            },
                            PrepareStatus: {},
                            TotalDuration: {
                                type: "long"
                            },
                            TransferDuration: {
                                type: "long"
                            },
                            TransferStatus: {},
                            VerifyDuration: {
                                type: "long"
                            },
                            VerifyStatus: {},
                            ErrorCode: {},
                            ErrorDetail: {}
                        }
                    }
                }
            }
        },
        ListAgents: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Agents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AgentArn: {},
                                Name: {},
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLocations: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values", "Operator" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3p"
                                },
                                Operator: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Locations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LocationArn: {},
                                LocationUri: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTaskExecutions: {
            input: {
                type: "structure",
                members: {
                    TaskArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TaskExecutionArn: {},
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTasks: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values", "Operator" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3p"
                                },
                                Operator: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TaskArn: {},
                                Status: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        StartTaskExecution: {
            input: {
                type: "structure",
                required: [ "TaskArn" ],
                members: {
                    TaskArn: {},
                    OverrideOptions: {
                        shape: "S1o"
                    },
                    Includes: {
                        shape: "S23"
                    },
                    Excludes: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskExecutionArn: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Keys" ],
                members: {
                    ResourceArn: {},
                    Keys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAgent: {
            input: {
                type: "structure",
                required: [ "AgentArn" ],
                members: {
                    AgentArn: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLocationNfs: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {},
                    Subdirectory: {},
                    OnPremConfig: {
                        shape: "Sy"
                    },
                    MountOptions: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLocationObjectStorage: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {},
                    ServerPort: {
                        type: "integer"
                    },
                    ServerProtocol: {},
                    Subdirectory: {},
                    AccessKey: {},
                    SecretKey: {
                        shape: "S19"
                    },
                    AgentArns: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLocationSmb: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {},
                    Subdirectory: {},
                    User: {},
                    Domain: {},
                    Password: {
                        shape: "St"
                    },
                    AgentArns: {
                        shape: "Sz"
                    },
                    MountOptions: {
                        shape: "S1j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTask: {
            input: {
                type: "structure",
                required: [ "TaskArn" ],
                members: {
                    TaskArn: {},
                    Options: {
                        shape: "S1o"
                    },
                    Excludes: {
                        shape: "S23"
                    },
                    Schedule: {
                        shape: "S27"
                    },
                    Name: {},
                    CloudWatchLogGroupArn: {},
                    Includes: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTaskExecution: {
            input: {
                type: "structure",
                required: [ "TaskExecutionArn", "Options" ],
                members: {
                    TaskExecutionArn: {},
                    Options: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S7: {
            type: "list",
            member: {
                shape: "S8"
            }
        },
        S8: {
            type: "structure",
            required: [ "Key" ],
            members: {
                Key: {},
                Value: {}
            }
        },
        Sb: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "list",
            member: {}
        },
        Sk: {
            type: "structure",
            required: [ "SubnetArn", "SecurityGroupArns" ],
            members: {
                SubnetArn: {},
                SecurityGroupArns: {
                    shape: "Sl"
                }
            }
        },
        Sl: {
            type: "list",
            member: {}
        },
        St: {
            type: "string",
            sensitive: true
        },
        Sy: {
            type: "structure",
            required: [ "AgentArns" ],
            members: {
                AgentArns: {
                    shape: "Sz"
                }
            }
        },
        Sz: {
            type: "list",
            member: {}
        },
        S10: {
            type: "structure",
            members: {
                Version: {}
            }
        },
        S19: {
            type: "string",
            sensitive: true
        },
        S1e: {
            type: "structure",
            required: [ "BucketAccessRoleArn" ],
            members: {
                BucketAccessRoleArn: {}
            }
        },
        S1j: {
            type: "structure",
            members: {
                Version: {}
            }
        },
        S1o: {
            type: "structure",
            members: {
                VerifyMode: {},
                OverwriteMode: {},
                Atime: {},
                Mtime: {},
                Uid: {},
                Gid: {},
                PreserveDeletedFiles: {},
                PreserveDevices: {},
                PosixPermissions: {},
                BytesPerSecond: {
                    type: "long"
                },
                TaskQueueing: {},
                LogLevel: {},
                TransferMode: {},
                SecurityDescriptorCopyFlags: {}
            }
        },
        S23: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FilterType: {},
                    Value: {}
                }
            }
        },
        S27: {
            type: "structure",
            required: [ "ScheduleExpression" ],
            members: {
                ScheduleExpression: {}
            }
        },
        S3p: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListAgents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLocations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTaskExecutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTasks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["robomaker"] = {};

AWS.RoboMaker = AWS.Service.defineService("robomaker", [ "2018-06-29" ]);

AWS.apiLoader.services["robomaker"]["2018-06-29"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-06-29",
        endpointPrefix: "robomaker",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "RoboMaker",
        serviceFullName: "AWS RoboMaker",
        serviceId: "RoboMaker",
        signatureVersion: "v4",
        signingName: "robomaker",
        uid: "robomaker-2018-06-29"
    },
    operations: {
        BatchDeleteWorlds: {
            http: {
                requestUri: "/batchDeleteWorlds"
            },
            input: {
                type: "structure",
                required: [ "worlds" ],
                members: {
                    worlds: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    unprocessedWorlds: {
                        shape: "S2"
                    }
                }
            }
        },
        BatchDescribeSimulationJob: {
            http: {
                requestUri: "/batchDescribeSimulationJob"
            },
            input: {
                type: "structure",
                required: [ "jobs" ],
                members: {
                    jobs: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                status: {},
                                lastStartedAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                failureBehavior: {},
                                failureCode: {},
                                failureReason: {},
                                clientRequestToken: {},
                                outputLocation: {
                                    shape: "Sh"
                                },
                                loggingConfig: {
                                    shape: "Sk"
                                },
                                maxJobDurationInSeconds: {
                                    type: "long"
                                },
                                simulationTimeMillis: {
                                    type: "long"
                                },
                                iamRole: {},
                                robotApplications: {
                                    shape: "Sp"
                                },
                                simulationApplications: {
                                    shape: "S1b"
                                },
                                dataSources: {
                                    shape: "S1f"
                                },
                                tags: {
                                    shape: "S1k"
                                },
                                vpcConfig: {
                                    shape: "S1n"
                                },
                                networkInterface: {
                                    shape: "S1r"
                                },
                                compute: {
                                    shape: "S1s"
                                }
                            }
                        }
                    },
                    unprocessedJobs: {
                        shape: "S2"
                    }
                }
            }
        },
        CancelDeploymentJob: {
            http: {
                requestUri: "/cancelDeploymentJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelSimulationJob: {
            http: {
                requestUri: "/cancelSimulationJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelSimulationJobBatch: {
            http: {
                requestUri: "/cancelSimulationJobBatch"
            },
            input: {
                type: "structure",
                required: [ "batch" ],
                members: {
                    batch: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelWorldExportJob: {
            http: {
                requestUri: "/cancelWorldExportJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelWorldGenerationJob: {
            http: {
                requestUri: "/cancelWorldGenerationJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDeploymentJob: {
            http: {
                requestUri: "/createDeploymentJob"
            },
            input: {
                type: "structure",
                required: [ "clientRequestToken", "fleet", "deploymentApplicationConfigs" ],
                members: {
                    deploymentConfig: {
                        shape: "S25"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    fleet: {},
                    deploymentApplicationConfigs: {
                        shape: "S29"
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    fleet: {},
                    status: {},
                    deploymentApplicationConfigs: {
                        shape: "S29"
                    },
                    failureReason: {},
                    failureCode: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    deploymentConfig: {
                        shape: "S25"
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        CreateFleet: {
            http: {
                requestUri: "/createFleet"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    tags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        CreateRobot: {
            http: {
                requestUri: "/createRobot"
            },
            input: {
                type: "structure",
                required: [ "name", "architecture", "greengrassGroupId" ],
                members: {
                    name: {},
                    architecture: {},
                    greengrassGroupId: {},
                    tags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    greengrassGroupId: {},
                    architecture: {},
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        CreateRobotApplication: {
            http: {
                requestUri: "/createRobotApplication"
            },
            input: {
                type: "structure",
                required: [ "name", "robotSoftwareSuite" ],
                members: {
                    name: {},
                    sources: {
                        shape: "S2o"
                    },
                    robotSoftwareSuite: {
                        shape: "S2q"
                    },
                    tags: {
                        shape: "S1k"
                    },
                    environment: {
                        shape: "S2t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S2w"
                    },
                    robotSoftwareSuite: {
                        shape: "S2q"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    revisionId: {},
                    tags: {
                        shape: "S1k"
                    },
                    environment: {
                        shape: "S2t"
                    }
                }
            }
        },
        CreateRobotApplicationVersion: {
            http: {
                requestUri: "/createRobotApplicationVersion"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {},
                    currentRevisionId: {},
                    s3Etags: {
                        shape: "S30"
                    },
                    imageDigest: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S2w"
                    },
                    robotSoftwareSuite: {
                        shape: "S2q"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    revisionId: {},
                    environment: {
                        shape: "S2t"
                    }
                }
            }
        },
        CreateSimulationApplication: {
            http: {
                requestUri: "/createSimulationApplication"
            },
            input: {
                type: "structure",
                required: [ "name", "simulationSoftwareSuite", "robotSoftwareSuite" ],
                members: {
                    name: {},
                    sources: {
                        shape: "S2o"
                    },
                    simulationSoftwareSuite: {
                        shape: "S34"
                    },
                    robotSoftwareSuite: {
                        shape: "S2q"
                    },
                    renderingEngine: {
                        shape: "S37"
                    },
                    tags: {
                        shape: "S1k"
                    },
                    environment: {
                        shape: "S2t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S2w"
                    },
                    simulationSoftwareSuite: {
                        shape: "S34"
                    },
                    robotSoftwareSuite: {
                        shape: "S2q"
                    },
                    renderingEngine: {
                        shape: "S37"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    revisionId: {},
                    tags: {
                        shape: "S1k"
                    },
                    environment: {
                        shape: "S2t"
                    }
                }
            }
        },
        CreateSimulationApplicationVersion: {
            http: {
                requestUri: "/createSimulationApplicationVersion"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {},
                    currentRevisionId: {},
                    s3Etags: {
                        shape: "S30"
                    },
                    imageDigest: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S2w"
                    },
                    simulationSoftwareSuite: {
                        shape: "S34"
                    },
                    robotSoftwareSuite: {
                        shape: "S2q"
                    },
                    renderingEngine: {
                        shape: "S37"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    revisionId: {},
                    environment: {
                        shape: "S2t"
                    }
                }
            }
        },
        CreateSimulationJob: {
            http: {
                requestUri: "/createSimulationJob"
            },
            input: {
                type: "structure",
                required: [ "maxJobDurationInSeconds", "iamRole" ],
                members: {
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    outputLocation: {
                        shape: "Sh"
                    },
                    loggingConfig: {
                        shape: "Sk"
                    },
                    maxJobDurationInSeconds: {
                        type: "long"
                    },
                    iamRole: {},
                    failureBehavior: {},
                    robotApplications: {
                        shape: "Sp"
                    },
                    simulationApplications: {
                        shape: "S1b"
                    },
                    dataSources: {
                        shape: "S3e"
                    },
                    tags: {
                        shape: "S1k"
                    },
                    vpcConfig: {
                        shape: "S3h"
                    },
                    compute: {
                        shape: "S3i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    lastStartedAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    failureBehavior: {},
                    failureCode: {},
                    clientRequestToken: {},
                    outputLocation: {
                        shape: "Sh"
                    },
                    loggingConfig: {
                        shape: "Sk"
                    },
                    maxJobDurationInSeconds: {
                        type: "long"
                    },
                    simulationTimeMillis: {
                        type: "long"
                    },
                    iamRole: {},
                    robotApplications: {
                        shape: "Sp"
                    },
                    simulationApplications: {
                        shape: "S1b"
                    },
                    dataSources: {
                        shape: "S1f"
                    },
                    tags: {
                        shape: "S1k"
                    },
                    vpcConfig: {
                        shape: "S1n"
                    },
                    compute: {
                        shape: "S1s"
                    }
                }
            }
        },
        CreateWorldExportJob: {
            http: {
                requestUri: "/createWorldExportJob"
            },
            input: {
                type: "structure",
                required: [ "worlds", "outputLocation", "iamRole" ],
                members: {
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    worlds: {
                        shape: "S2"
                    },
                    outputLocation: {
                        shape: "Sh"
                    },
                    iamRole: {},
                    tags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    failureCode: {},
                    clientRequestToken: {},
                    outputLocation: {
                        shape: "Sh"
                    },
                    iamRole: {},
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        CreateWorldGenerationJob: {
            http: {
                requestUri: "/createWorldGenerationJob"
            },
            input: {
                type: "structure",
                required: [ "template", "worldCount" ],
                members: {
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    template: {},
                    worldCount: {
                        shape: "S3p"
                    },
                    tags: {
                        shape: "S1k"
                    },
                    worldTags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    failureCode: {},
                    clientRequestToken: {},
                    template: {},
                    worldCount: {
                        shape: "S3p"
                    },
                    tags: {
                        shape: "S1k"
                    },
                    worldTags: {
                        shape: "S1k"
                    }
                }
            }
        },
        CreateWorldTemplate: {
            http: {
                requestUri: "/createWorldTemplate"
            },
            input: {
                type: "structure",
                members: {
                    clientRequestToken: {},
                    name: {},
                    templateBody: {},
                    templateLocation: {
                        shape: "S3y"
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    clientRequestToken: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    name: {},
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        DeleteFleet: {
            http: {
                requestUri: "/deleteFleet"
            },
            input: {
                type: "structure",
                required: [ "fleet" ],
                members: {
                    fleet: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRobot: {
            http: {
                requestUri: "/deleteRobot"
            },
            input: {
                type: "structure",
                required: [ "robot" ],
                members: {
                    robot: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRobotApplication: {
            http: {
                requestUri: "/deleteRobotApplication"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {},
                    applicationVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSimulationApplication: {
            http: {
                requestUri: "/deleteSimulationApplication"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {},
                    applicationVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorldTemplate: {
            http: {
                requestUri: "/deleteWorldTemplate"
            },
            input: {
                type: "structure",
                required: [ "template" ],
                members: {
                    template: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterRobot: {
            http: {
                requestUri: "/deregisterRobot"
            },
            input: {
                type: "structure",
                required: [ "fleet", "robot" ],
                members: {
                    fleet: {},
                    robot: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    fleet: {},
                    robot: {}
                }
            }
        },
        DescribeDeploymentJob: {
            http: {
                requestUri: "/describeDeploymentJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    fleet: {},
                    status: {},
                    deploymentConfig: {
                        shape: "S25"
                    },
                    deploymentApplicationConfigs: {
                        shape: "S29"
                    },
                    failureReason: {},
                    failureCode: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    robotDeploymentSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                deploymentStartTime: {
                                    type: "timestamp"
                                },
                                deploymentFinishTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                progressDetail: {
                                    type: "structure",
                                    members: {
                                        currentProgress: {},
                                        percentDone: {
                                            type: "float"
                                        },
                                        estimatedTimeRemainingSeconds: {
                                            type: "integer"
                                        },
                                        targetResource: {}
                                    }
                                },
                                failureReason: {},
                                failureCode: {}
                            }
                        }
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        DescribeFleet: {
            http: {
                requestUri: "/describeFleet"
            },
            input: {
                type: "structure",
                required: [ "fleet" ],
                members: {
                    fleet: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    arn: {},
                    robots: {
                        shape: "S4n"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    lastDeploymentStatus: {},
                    lastDeploymentJob: {},
                    lastDeploymentTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        DescribeRobot: {
            http: {
                requestUri: "/describeRobot"
            },
            input: {
                type: "structure",
                required: [ "robot" ],
                members: {
                    robot: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    fleetArn: {},
                    status: {},
                    greengrassGroupId: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    architecture: {},
                    lastDeploymentJob: {},
                    lastDeploymentTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        DescribeRobotApplication: {
            http: {
                requestUri: "/describeRobotApplication"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {},
                    applicationVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S2w"
                    },
                    robotSoftwareSuite: {
                        shape: "S2q"
                    },
                    revisionId: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1k"
                    },
                    environment: {
                        shape: "S2t"
                    },
                    imageDigest: {}
                }
            }
        },
        DescribeSimulationApplication: {
            http: {
                requestUri: "/describeSimulationApplication"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {},
                    applicationVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S2w"
                    },
                    simulationSoftwareSuite: {
                        shape: "S34"
                    },
                    robotSoftwareSuite: {
                        shape: "S2q"
                    },
                    renderingEngine: {
                        shape: "S37"
                    },
                    revisionId: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1k"
                    },
                    environment: {
                        shape: "S2t"
                    },
                    imageDigest: {}
                }
            }
        },
        DescribeSimulationJob: {
            http: {
                requestUri: "/describeSimulationJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    status: {},
                    lastStartedAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    failureBehavior: {},
                    failureCode: {},
                    failureReason: {},
                    clientRequestToken: {},
                    outputLocation: {
                        shape: "Sh"
                    },
                    loggingConfig: {
                        shape: "Sk"
                    },
                    maxJobDurationInSeconds: {
                        type: "long"
                    },
                    simulationTimeMillis: {
                        type: "long"
                    },
                    iamRole: {},
                    robotApplications: {
                        shape: "Sp"
                    },
                    simulationApplications: {
                        shape: "S1b"
                    },
                    dataSources: {
                        shape: "S1f"
                    },
                    tags: {
                        shape: "S1k"
                    },
                    vpcConfig: {
                        shape: "S1n"
                    },
                    networkInterface: {
                        shape: "S1r"
                    },
                    compute: {
                        shape: "S1s"
                    }
                }
            }
        },
        DescribeSimulationJobBatch: {
            http: {
                requestUri: "/describeSimulationJobBatch"
            },
            input: {
                type: "structure",
                required: [ "batch" ],
                members: {
                    batch: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    clientRequestToken: {},
                    batchPolicy: {
                        shape: "S50"
                    },
                    failureCode: {},
                    failureReason: {},
                    failedRequests: {
                        shape: "S54"
                    },
                    pendingRequests: {
                        shape: "S58"
                    },
                    createdRequests: {
                        shape: "S59"
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        DescribeWorld: {
            http: {
                requestUri: "/describeWorld"
            },
            input: {
                type: "structure",
                required: [ "world" ],
                members: {
                    world: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    generationJob: {},
                    template: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1k"
                    },
                    worldDescriptionBody: {}
                }
            }
        },
        DescribeWorldExportJob: {
            http: {
                requestUri: "/describeWorldExportJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    failureCode: {},
                    failureReason: {},
                    clientRequestToken: {},
                    worlds: {
                        shape: "S2"
                    },
                    outputLocation: {
                        shape: "Sh"
                    },
                    iamRole: {},
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        DescribeWorldGenerationJob: {
            http: {
                requestUri: "/describeWorldGenerationJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    failureCode: {},
                    failureReason: {},
                    clientRequestToken: {},
                    template: {},
                    worldCount: {
                        shape: "S3p"
                    },
                    finishedWorldsSummary: {
                        type: "structure",
                        members: {
                            finishedCount: {
                                type: "integer"
                            },
                            succeededWorlds: {
                                shape: "S2"
                            },
                            failureSummary: {
                                type: "structure",
                                members: {
                                    totalFailureCount: {
                                        type: "integer"
                                    },
                                    failures: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                failureCode: {},
                                                sampleFailureReason: {},
                                                failureCount: {
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    tags: {
                        shape: "S1k"
                    },
                    worldTags: {
                        shape: "S1k"
                    }
                }
            }
        },
        DescribeWorldTemplate: {
            http: {
                requestUri: "/describeWorldTemplate"
            },
            input: {
                type: "structure",
                required: [ "template" ],
                members: {
                    template: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    clientRequestToken: {},
                    name: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1k"
                    },
                    version: {}
                }
            }
        },
        GetWorldTemplateBody: {
            http: {
                requestUri: "/getWorldTemplateBody"
            },
            input: {
                type: "structure",
                members: {
                    template: {},
                    generationJob: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    templateBody: {}
                }
            }
        },
        ListDeploymentJobs: {
            http: {
                requestUri: "/listDeploymentJobs"
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        shape: "S5u"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                fleet: {},
                                status: {},
                                deploymentApplicationConfigs: {
                                    shape: "S29"
                                },
                                deploymentConfig: {
                                    shape: "S25"
                                },
                                failureReason: {},
                                failureCode: {},
                                createdAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFleets: {
            http: {
                requestUri: "/listFleets"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fleetDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastDeploymentStatus: {},
                                lastDeploymentJob: {},
                                lastDeploymentTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRobotApplications: {
            http: {
                requestUri: "/listRobotApplications"
            },
            input: {
                type: "structure",
                members: {
                    versionQualifier: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    robotApplicationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {},
                                version: {},
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                robotSoftwareSuite: {
                                    shape: "S2q"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRobots: {
            http: {
                requestUri: "/listRobots"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    robots: {
                        shape: "S4n"
                    },
                    nextToken: {}
                }
            }
        },
        ListSimulationApplications: {
            http: {
                requestUri: "/listSimulationApplications"
            },
            input: {
                type: "structure",
                members: {
                    versionQualifier: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    simulationApplicationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {},
                                version: {},
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                robotSoftwareSuite: {
                                    shape: "S2q"
                                },
                                simulationSoftwareSuite: {
                                    shape: "S34"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSimulationJobBatches: {
            http: {
                requestUri: "/listSimulationJobBatches"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    simulationJobBatchSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                status: {},
                                failedRequestCount: {
                                    type: "integer"
                                },
                                pendingRequestCount: {
                                    type: "integer"
                                },
                                createdRequestCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSimulationJobs: {
            http: {
                requestUri: "/listSimulationJobs"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5u"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "simulationJobSummaries" ],
                members: {
                    simulationJobSummaries: {
                        shape: "S59"
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        ListWorldExportJobs: {
            http: {
                requestUri: "/listWorldExportJobs"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5u"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "worldExportJobSummaries" ],
                members: {
                    worldExportJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                status: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                worlds: {
                                    shape: "S2"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListWorldGenerationJobs: {
            http: {
                requestUri: "/listWorldGenerationJobs"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5u"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "worldGenerationJobSummaries" ],
                members: {
                    worldGenerationJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                template: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                status: {},
                                worldCount: {
                                    shape: "S3p"
                                },
                                succeededWorldCount: {
                                    type: "integer"
                                },
                                failedWorldCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListWorldTemplates: {
            http: {
                requestUri: "/listWorldTemplates"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    templateSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                name: {},
                                version: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListWorlds: {
            http: {
                requestUri: "/listWorlds"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    worldSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                generationJob: {},
                                template: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        RegisterRobot: {
            http: {
                requestUri: "/registerRobot"
            },
            input: {
                type: "structure",
                required: [ "fleet", "robot" ],
                members: {
                    fleet: {},
                    robot: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    fleet: {},
                    robot: {}
                }
            }
        },
        RestartSimulationJob: {
            http: {
                requestUri: "/restartSimulationJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartSimulationJobBatch: {
            http: {
                requestUri: "/startSimulationJobBatch"
            },
            input: {
                type: "structure",
                required: [ "createSimulationJobRequests" ],
                members: {
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    batchPolicy: {
                        shape: "S50"
                    },
                    createSimulationJobRequests: {
                        shape: "S58"
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    clientRequestToken: {},
                    batchPolicy: {
                        shape: "S50"
                    },
                    failureCode: {},
                    failureReason: {},
                    failedRequests: {
                        shape: "S54"
                    },
                    pendingRequests: {
                        shape: "S58"
                    },
                    createdRequests: {
                        shape: "S59"
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        SyncDeploymentJob: {
            http: {
                requestUri: "/syncDeploymentJob"
            },
            input: {
                type: "structure",
                required: [ "clientRequestToken", "fleet" ],
                members: {
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    fleet: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    fleet: {},
                    status: {},
                    deploymentConfig: {
                        shape: "S25"
                    },
                    deploymentApplicationConfigs: {
                        shape: "S29"
                    },
                    failureReason: {},
                    failureCode: {},
                    createdAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRobotApplication: {
            http: {
                requestUri: "/updateRobotApplication"
            },
            input: {
                type: "structure",
                required: [ "application", "robotSoftwareSuite" ],
                members: {
                    application: {},
                    sources: {
                        shape: "S2o"
                    },
                    robotSoftwareSuite: {
                        shape: "S2q"
                    },
                    currentRevisionId: {},
                    environment: {
                        shape: "S2t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S2w"
                    },
                    robotSoftwareSuite: {
                        shape: "S2q"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    revisionId: {},
                    environment: {
                        shape: "S2t"
                    }
                }
            }
        },
        UpdateSimulationApplication: {
            http: {
                requestUri: "/updateSimulationApplication"
            },
            input: {
                type: "structure",
                required: [ "application", "simulationSoftwareSuite", "robotSoftwareSuite" ],
                members: {
                    application: {},
                    sources: {
                        shape: "S2o"
                    },
                    simulationSoftwareSuite: {
                        shape: "S34"
                    },
                    robotSoftwareSuite: {
                        shape: "S2q"
                    },
                    renderingEngine: {
                        shape: "S37"
                    },
                    currentRevisionId: {},
                    environment: {
                        shape: "S2t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S2w"
                    },
                    simulationSoftwareSuite: {
                        shape: "S34"
                    },
                    robotSoftwareSuite: {
                        shape: "S2q"
                    },
                    renderingEngine: {
                        shape: "S37"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    revisionId: {},
                    environment: {
                        shape: "S2t"
                    }
                }
            }
        },
        UpdateWorldTemplate: {
            http: {
                requestUri: "/updateWorldTemplate"
            },
            input: {
                type: "structure",
                required: [ "template" ],
                members: {
                    template: {},
                    name: {},
                    templateBody: {},
                    templateLocation: {
                        shape: "S3y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {}
        },
        Sh: {
            type: "structure",
            members: {
                s3Bucket: {},
                s3Prefix: {}
            }
        },
        Sk: {
            type: "structure",
            required: [ "recordAllRosTopics" ],
            members: {
                recordAllRosTopics: {
                    type: "boolean"
                }
            }
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                required: [ "application", "launchConfig" ],
                members: {
                    application: {},
                    applicationVersion: {},
                    launchConfig: {
                        shape: "Ss"
                    },
                    uploadConfigurations: {
                        shape: "S13"
                    },
                    useDefaultUploadConfigurations: {
                        type: "boolean"
                    },
                    tools: {
                        shape: "S17"
                    },
                    useDefaultTools: {
                        type: "boolean"
                    }
                }
            }
        },
        Ss: {
            type: "structure",
            required: [ "packageName", "launchFile" ],
            members: {
                packageName: {},
                launchFile: {},
                environmentVariables: {
                    shape: "Su"
                },
                portForwardingConfig: {
                    type: "structure",
                    members: {
                        portMappings: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "jobPort", "applicationPort" ],
                                members: {
                                    jobPort: {
                                        type: "integer"
                                    },
                                    applicationPort: {
                                        type: "integer"
                                    },
                                    enableOnPublicIp: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                streamUI: {
                    type: "boolean"
                }
            }
        },
        Su: {
            type: "map",
            key: {},
            value: {}
        },
        S13: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "path", "uploadBehavior" ],
                members: {
                    name: {},
                    path: {},
                    uploadBehavior: {}
                }
            }
        },
        S17: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "command" ],
                members: {
                    streamUI: {
                        type: "boolean"
                    },
                    name: {},
                    command: {},
                    streamOutputToCloudWatch: {
                        type: "boolean"
                    },
                    exitBehavior: {}
                }
            }
        },
        S1b: {
            type: "list",
            member: {
                type: "structure",
                required: [ "application", "launchConfig" ],
                members: {
                    application: {},
                    applicationVersion: {},
                    launchConfig: {
                        shape: "Ss"
                    },
                    uploadConfigurations: {
                        shape: "S13"
                    },
                    worldConfigs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                world: {}
                            }
                        }
                    },
                    useDefaultUploadConfigurations: {
                        type: "boolean"
                    },
                    tools: {
                        shape: "S17"
                    },
                    useDefaultTools: {
                        type: "boolean"
                    }
                }
            }
        },
        S1f: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    s3Bucket: {},
                    s3Keys: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                s3Key: {},
                                etag: {}
                            }
                        }
                    }
                }
            }
        },
        S1k: {
            type: "map",
            key: {},
            value: {}
        },
        S1n: {
            type: "structure",
            members: {
                subnets: {
                    shape: "S1o"
                },
                securityGroups: {
                    shape: "S1q"
                },
                vpcId: {},
                assignPublicIp: {
                    type: "boolean"
                }
            }
        },
        S1o: {
            type: "list",
            member: {}
        },
        S1q: {
            type: "list",
            member: {}
        },
        S1r: {
            type: "structure",
            members: {
                networkInterfaceId: {},
                privateIpAddress: {},
                publicIpAddress: {}
            }
        },
        S1s: {
            type: "structure",
            members: {
                simulationUnitLimit: {
                    type: "integer"
                }
            }
        },
        S25: {
            type: "structure",
            members: {
                concurrentDeploymentPercentage: {
                    type: "integer"
                },
                failureThresholdPercentage: {
                    type: "integer"
                },
                robotDeploymentTimeoutInSeconds: {
                    type: "long"
                },
                downloadConditionFile: {
                    type: "structure",
                    required: [ "bucket", "key" ],
                    members: {
                        bucket: {},
                        key: {},
                        etag: {}
                    }
                }
            }
        },
        S29: {
            type: "list",
            member: {
                type: "structure",
                required: [ "application", "applicationVersion", "launchConfig" ],
                members: {
                    application: {},
                    applicationVersion: {},
                    launchConfig: {
                        type: "structure",
                        required: [ "packageName", "launchFile" ],
                        members: {
                            packageName: {},
                            preLaunchFile: {},
                            launchFile: {},
                            postLaunchFile: {},
                            environmentVariables: {
                                shape: "Su"
                            }
                        }
                    }
                }
            }
        },
        S2o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    s3Bucket: {},
                    s3Key: {},
                    architecture: {}
                }
            }
        },
        S2q: {
            type: "structure",
            members: {
                name: {},
                version: {}
            }
        },
        S2t: {
            type: "structure",
            members: {
                uri: {}
            }
        },
        S2w: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    s3Bucket: {},
                    s3Key: {},
                    etag: {},
                    architecture: {}
                }
            }
        },
        S30: {
            type: "list",
            member: {}
        },
        S34: {
            type: "structure",
            members: {
                name: {},
                version: {}
            }
        },
        S37: {
            type: "structure",
            members: {
                name: {},
                version: {}
            }
        },
        S3e: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "s3Bucket", "s3Keys" ],
                members: {
                    name: {},
                    s3Bucket: {},
                    s3Keys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S3h: {
            type: "structure",
            required: [ "subnets" ],
            members: {
                subnets: {
                    shape: "S1o"
                },
                securityGroups: {
                    shape: "S1q"
                },
                assignPublicIp: {
                    type: "boolean"
                }
            }
        },
        S3i: {
            type: "structure",
            members: {
                simulationUnitLimit: {
                    type: "integer"
                }
            }
        },
        S3p: {
            type: "structure",
            members: {
                floorplanCount: {
                    type: "integer"
                },
                interiorCountPerFloorplan: {
                    type: "integer"
                }
            }
        },
        S3y: {
            type: "structure",
            required: [ "s3Bucket", "s3Key" ],
            members: {
                s3Bucket: {},
                s3Key: {}
            }
        },
        S4n: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    fleetArn: {},
                    status: {},
                    greenGrassGroupId: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    architecture: {},
                    lastDeploymentJob: {},
                    lastDeploymentTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S50: {
            type: "structure",
            members: {
                timeoutInSeconds: {
                    type: "long"
                },
                maxConcurrency: {
                    type: "integer"
                }
            }
        },
        S54: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    request: {
                        shape: "S56"
                    },
                    failureReason: {},
                    failureCode: {},
                    failedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        S56: {
            type: "structure",
            required: [ "maxJobDurationInSeconds" ],
            members: {
                outputLocation: {
                    shape: "Sh"
                },
                loggingConfig: {
                    shape: "Sk"
                },
                maxJobDurationInSeconds: {
                    type: "long"
                },
                iamRole: {},
                failureBehavior: {},
                useDefaultApplications: {
                    type: "boolean"
                },
                robotApplications: {
                    shape: "Sp"
                },
                simulationApplications: {
                    shape: "S1b"
                },
                dataSources: {
                    shape: "S3e"
                },
                vpcConfig: {
                    shape: "S3h"
                },
                compute: {
                    shape: "S3i"
                },
                tags: {
                    shape: "S1k"
                }
            }
        },
        S58: {
            type: "list",
            member: {
                shape: "S56"
            }
        },
        S59: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    name: {},
                    status: {},
                    simulationApplicationNames: {
                        type: "list",
                        member: {}
                    },
                    robotApplicationNames: {
                        type: "list",
                        member: {}
                    },
                    dataSourceNames: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S5u: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        }
    },
    paginators: {
        ListDeploymentJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "deploymentJobs"
        },
        ListFleets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "fleetDetails"
        },
        ListRobotApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "robotApplicationSummaries"
        },
        ListRobots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "robots"
        },
        ListSimulationApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "simulationApplicationSummaries"
        },
        ListSimulationJobBatches: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "simulationJobBatchSummaries"
        },
        ListSimulationJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "simulationJobSummaries"
        },
        ListWorldExportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "worldExportJobSummaries"
        },
        ListWorldGenerationJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "worldGenerationJobSummaries"
        },
        ListWorldTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templateSummaries"
        },
        ListWorlds: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "worldSummaries"
        }
    }
};

AWS.apiLoader.services["transfer"] = {};

AWS.Transfer = AWS.Service.defineService("transfer", [ "2018-11-05" ]);

AWS.apiLoader.services["transfer"]["2018-11-05"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-11-05",
        endpointPrefix: "transfer",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "AWS Transfer",
        serviceFullName: "AWS Transfer Family",
        serviceId: "Transfer",
        signatureVersion: "v4",
        signingName: "transfer",
        targetPrefix: "TransferService",
        uid: "transfer-2018-11-05"
    },
    operations: {
        CreateAccess: {
            input: {
                type: "structure",
                required: [ "Role", "ServerId", "ExternalId" ],
                members: {
                    HomeDirectory: {},
                    HomeDirectoryType: {},
                    HomeDirectoryMappings: {
                        shape: "S4"
                    },
                    Policy: {},
                    PosixProfile: {
                        shape: "S9"
                    },
                    Role: {},
                    ServerId: {},
                    ExternalId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "ExternalId" ],
                members: {
                    ServerId: {},
                    ExternalId: {}
                }
            }
        },
        CreateServer: {
            input: {
                type: "structure",
                members: {
                    Certificate: {},
                    Domain: {},
                    EndpointDetails: {
                        shape: "Sj"
                    },
                    EndpointType: {},
                    HostKey: {
                        shape: "St"
                    },
                    IdentityProviderDetails: {
                        shape: "Su"
                    },
                    IdentityProviderType: {},
                    LoggingRole: {},
                    Protocols: {
                        shape: "Sy"
                    },
                    SecurityPolicyName: {},
                    Tags: {
                        shape: "S11"
                    },
                    WorkflowDetails: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    ServerId: {}
                }
            }
        },
        CreateUser: {
            input: {
                type: "structure",
                required: [ "Role", "ServerId", "UserName" ],
                members: {
                    HomeDirectory: {},
                    HomeDirectoryType: {},
                    HomeDirectoryMappings: {
                        shape: "S4"
                    },
                    Policy: {},
                    PosixProfile: {
                        shape: "S9"
                    },
                    Role: {},
                    ServerId: {},
                    SshPublicKeyBody: {},
                    Tags: {
                        shape: "S11"
                    },
                    UserName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "UserName" ],
                members: {
                    ServerId: {},
                    UserName: {}
                }
            }
        },
        CreateWorkflow: {
            input: {
                type: "structure",
                required: [ "Steps" ],
                members: {
                    Description: {},
                    Steps: {
                        shape: "S1g"
                    },
                    OnExceptionSteps: {
                        shape: "S1g"
                    },
                    Tags: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "WorkflowId" ],
                members: {
                    WorkflowId: {}
                }
            }
        },
        DeleteAccess: {
            input: {
                type: "structure",
                required: [ "ServerId", "ExternalId" ],
                members: {
                    ServerId: {},
                    ExternalId: {}
                }
            }
        },
        DeleteServer: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    ServerId: {}
                }
            }
        },
        DeleteSshPublicKey: {
            input: {
                type: "structure",
                required: [ "ServerId", "SshPublicKeyId", "UserName" ],
                members: {
                    ServerId: {},
                    SshPublicKeyId: {},
                    UserName: {}
                }
            }
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "ServerId", "UserName" ],
                members: {
                    ServerId: {},
                    UserName: {}
                }
            }
        },
        DeleteWorkflow: {
            input: {
                type: "structure",
                required: [ "WorkflowId" ],
                members: {
                    WorkflowId: {}
                }
            }
        },
        DescribeAccess: {
            input: {
                type: "structure",
                required: [ "ServerId", "ExternalId" ],
                members: {
                    ServerId: {},
                    ExternalId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "Access" ],
                members: {
                    ServerId: {},
                    Access: {
                        type: "structure",
                        members: {
                            HomeDirectory: {},
                            HomeDirectoryMappings: {
                                shape: "S4"
                            },
                            HomeDirectoryType: {},
                            Policy: {},
                            PosixProfile: {
                                shape: "S9"
                            },
                            Role: {},
                            ExternalId: {}
                        }
                    }
                }
            }
        },
        DescribeExecution: {
            input: {
                type: "structure",
                required: [ "ExecutionId", "WorkflowId" ],
                members: {
                    ExecutionId: {},
                    WorkflowId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "WorkflowId", "Execution" ],
                members: {
                    WorkflowId: {},
                    Execution: {
                        type: "structure",
                        members: {
                            ExecutionId: {},
                            InitialFileLocation: {
                                shape: "S2g"
                            },
                            ServiceMetadata: {
                                shape: "S2k"
                            },
                            ExecutionRole: {},
                            LoggingConfiguration: {
                                type: "structure",
                                members: {
                                    LoggingRole: {},
                                    LogGroupName: {}
                                }
                            },
                            PosixProfile: {
                                shape: "S9"
                            },
                            Status: {},
                            Results: {
                                type: "structure",
                                members: {
                                    Steps: {
                                        shape: "S2r"
                                    },
                                    OnExceptionSteps: {
                                        shape: "S2r"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeSecurityPolicy: {
            input: {
                type: "structure",
                required: [ "SecurityPolicyName" ],
                members: {
                    SecurityPolicyName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SecurityPolicy" ],
                members: {
                    SecurityPolicy: {
                        type: "structure",
                        required: [ "SecurityPolicyName" ],
                        members: {
                            Fips: {
                                type: "boolean"
                            },
                            SecurityPolicyName: {},
                            SshCiphers: {
                                shape: "S31"
                            },
                            SshKexs: {
                                shape: "S31"
                            },
                            SshMacs: {
                                shape: "S31"
                            },
                            TlsCiphers: {
                                shape: "S31"
                            }
                        }
                    }
                }
            }
        },
        DescribeServer: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    ServerId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Server" ],
                members: {
                    Server: {
                        type: "structure",
                        required: [ "Arn" ],
                        members: {
                            Arn: {},
                            Certificate: {},
                            ProtocolDetails: {
                                shape: "S37"
                            },
                            Domain: {},
                            EndpointDetails: {
                                shape: "Sj"
                            },
                            EndpointType: {},
                            HostKeyFingerprint: {},
                            IdentityProviderDetails: {
                                shape: "Su"
                            },
                            IdentityProviderType: {},
                            LoggingRole: {},
                            Protocols: {
                                shape: "Sy"
                            },
                            SecurityPolicyName: {},
                            ServerId: {},
                            State: {},
                            Tags: {
                                shape: "S11"
                            },
                            UserCount: {
                                type: "integer"
                            },
                            WorkflowDetails: {
                                shape: "S15"
                            }
                        }
                    }
                }
            }
        },
        DescribeUser: {
            input: {
                type: "structure",
                required: [ "ServerId", "UserName" ],
                members: {
                    ServerId: {},
                    UserName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "User" ],
                members: {
                    ServerId: {},
                    User: {
                        type: "structure",
                        required: [ "Arn" ],
                        members: {
                            Arn: {},
                            HomeDirectory: {},
                            HomeDirectoryMappings: {
                                shape: "S4"
                            },
                            HomeDirectoryType: {},
                            Policy: {},
                            PosixProfile: {
                                shape: "S9"
                            },
                            Role: {},
                            SshPublicKeys: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "DateImported", "SshPublicKeyBody", "SshPublicKeyId" ],
                                    members: {
                                        DateImported: {
                                            type: "timestamp"
                                        },
                                        SshPublicKeyBody: {},
                                        SshPublicKeyId: {}
                                    }
                                }
                            },
                            Tags: {
                                shape: "S11"
                            },
                            UserName: {}
                        }
                    }
                }
            }
        },
        DescribeWorkflow: {
            input: {
                type: "structure",
                required: [ "WorkflowId" ],
                members: {
                    WorkflowId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Workflow" ],
                members: {
                    Workflow: {
                        type: "structure",
                        required: [ "Arn" ],
                        members: {
                            Arn: {},
                            Description: {},
                            Steps: {
                                shape: "S1g"
                            },
                            OnExceptionSteps: {
                                shape: "S1g"
                            },
                            WorkflowId: {},
                            Tags: {
                                shape: "S11"
                            }
                        }
                    }
                }
            }
        },
        ImportSshPublicKey: {
            input: {
                type: "structure",
                required: [ "ServerId", "SshPublicKeyBody", "UserName" ],
                members: {
                    ServerId: {},
                    SshPublicKeyBody: {},
                    UserName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "SshPublicKeyId", "UserName" ],
                members: {
                    ServerId: {},
                    SshPublicKeyId: {},
                    UserName: {}
                }
            }
        },
        ListAccesses: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ServerId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "Accesses" ],
                members: {
                    NextToken: {},
                    ServerId: {},
                    Accesses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                HomeDirectory: {},
                                HomeDirectoryType: {},
                                Role: {},
                                ExternalId: {}
                            }
                        }
                    }
                }
            }
        },
        ListExecutions: {
            input: {
                type: "structure",
                required: [ "WorkflowId" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    WorkflowId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "WorkflowId", "Executions" ],
                members: {
                    NextToken: {},
                    WorkflowId: {},
                    Executions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ExecutionId: {},
                                InitialFileLocation: {
                                    shape: "S2g"
                                },
                                ServiceMetadata: {
                                    shape: "S2k"
                                },
                                Status: {}
                            }
                        }
                    }
                }
            }
        },
        ListSecurityPolicies: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SecurityPolicyNames" ],
                members: {
                    NextToken: {},
                    SecurityPolicyNames: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListServers: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Servers" ],
                members: {
                    NextToken: {},
                    Servers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn" ],
                            members: {
                                Arn: {},
                                Domain: {},
                                IdentityProviderType: {},
                                EndpointType: {},
                                LoggingRole: {},
                                ServerId: {},
                                State: {},
                                UserCount: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    NextToken: {},
                    Tags: {
                        shape: "S11"
                    }
                }
            }
        },
        ListUsers: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ServerId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "Users" ],
                members: {
                    NextToken: {},
                    ServerId: {},
                    Users: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn" ],
                            members: {
                                Arn: {},
                                HomeDirectory: {},
                                HomeDirectoryType: {},
                                Role: {},
                                SshPublicKeyCount: {
                                    type: "integer"
                                },
                                UserName: {}
                            }
                        }
                    }
                }
            }
        },
        ListWorkflows: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Workflows" ],
                members: {
                    NextToken: {},
                    Workflows: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkflowId: {},
                                Description: {},
                                Arn: {}
                            }
                        }
                    }
                }
            }
        },
        SendWorkflowStepState: {
            input: {
                type: "structure",
                required: [ "WorkflowId", "ExecutionId", "Token", "Status" ],
                members: {
                    WorkflowId: {},
                    ExecutionId: {},
                    Token: {},
                    Status: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartServer: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    ServerId: {}
                }
            }
        },
        StopServer: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    ServerId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "Arn", "Tags" ],
                members: {
                    Arn: {},
                    Tags: {
                        shape: "S11"
                    }
                }
            }
        },
        TestIdentityProvider: {
            input: {
                type: "structure",
                required: [ "ServerId", "UserName" ],
                members: {
                    ServerId: {},
                    ServerProtocol: {},
                    SourceIp: {},
                    UserName: {},
                    UserPassword: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "StatusCode", "Url" ],
                members: {
                    Response: {},
                    StatusCode: {
                        type: "integer"
                    },
                    Message: {},
                    Url: {}
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "Arn", "TagKeys" ],
                members: {
                    Arn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateAccess: {
            input: {
                type: "structure",
                required: [ "ServerId", "ExternalId" ],
                members: {
                    HomeDirectory: {},
                    HomeDirectoryType: {},
                    HomeDirectoryMappings: {
                        shape: "S4"
                    },
                    Policy: {},
                    PosixProfile: {
                        shape: "S9"
                    },
                    Role: {},
                    ServerId: {},
                    ExternalId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "ExternalId" ],
                members: {
                    ServerId: {},
                    ExternalId: {}
                }
            }
        },
        UpdateServer: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    Certificate: {},
                    ProtocolDetails: {
                        shape: "S37"
                    },
                    EndpointDetails: {
                        shape: "Sj"
                    },
                    EndpointType: {},
                    HostKey: {
                        shape: "St"
                    },
                    IdentityProviderDetails: {
                        shape: "Su"
                    },
                    LoggingRole: {},
                    Protocols: {
                        shape: "Sy"
                    },
                    SecurityPolicyName: {},
                    ServerId: {},
                    WorkflowDetails: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    ServerId: {}
                }
            }
        },
        UpdateUser: {
            input: {
                type: "structure",
                required: [ "ServerId", "UserName" ],
                members: {
                    HomeDirectory: {},
                    HomeDirectoryType: {},
                    HomeDirectoryMappings: {
                        shape: "S4"
                    },
                    Policy: {},
                    PosixProfile: {
                        shape: "S9"
                    },
                    Role: {},
                    ServerId: {},
                    UserName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "UserName" ],
                members: {
                    ServerId: {},
                    UserName: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Entry", "Target" ],
                members: {
                    Entry: {},
                    Target: {}
                }
            }
        },
        S9: {
            type: "structure",
            required: [ "Uid", "Gid" ],
            members: {
                Uid: {
                    type: "long"
                },
                Gid: {
                    type: "long"
                },
                SecondaryGids: {
                    type: "list",
                    member: {
                        type: "long"
                    }
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                AddressAllocationIds: {
                    type: "list",
                    member: {}
                },
                SubnetIds: {
                    type: "list",
                    member: {}
                },
                VpcEndpointId: {},
                VpcId: {},
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        St: {
            type: "string",
            sensitive: true
        },
        Su: {
            type: "structure",
            members: {
                Url: {},
                InvocationRole: {},
                DirectoryId: {}
            }
        },
        Sy: {
            type: "list",
            member: {}
        },
        S11: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S15: {
            type: "structure",
            required: [ "OnUpload" ],
            members: {
                OnUpload: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "WorkflowId", "ExecutionRole" ],
                        members: {
                            WorkflowId: {},
                            ExecutionRole: {}
                        }
                    }
                }
            }
        },
        S1g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    CopyStepDetails: {
                        type: "structure",
                        members: {
                            Name: {},
                            DestinationFileLocation: {
                                type: "structure",
                                members: {
                                    S3FileLocation: {
                                        type: "structure",
                                        members: {
                                            Bucket: {},
                                            Key: {}
                                        }
                                    },
                                    EfsFileLocation: {
                                        shape: "S1p"
                                    }
                                }
                            },
                            OverwriteExisting: {}
                        }
                    },
                    CustomStepDetails: {
                        type: "structure",
                        members: {
                            Name: {},
                            Target: {},
                            TimeoutSeconds: {
                                type: "integer"
                            }
                        }
                    },
                    DeleteStepDetails: {
                        type: "structure",
                        members: {
                            Name: {}
                        }
                    },
                    TagStepDetails: {
                        type: "structure",
                        members: {
                            Name: {},
                            Tags: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Key", "Value" ],
                                    members: {
                                        Key: {},
                                        Value: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1p: {
            type: "structure",
            members: {
                FileSystemId: {},
                Path: {}
            }
        },
        S2g: {
            type: "structure",
            members: {
                S3FileLocation: {
                    type: "structure",
                    members: {
                        Bucket: {},
                        Key: {},
                        VersionId: {},
                        Etag: {}
                    }
                },
                EfsFileLocation: {
                    shape: "S1p"
                }
            }
        },
        S2k: {
            type: "structure",
            required: [ "UserDetails" ],
            members: {
                UserDetails: {
                    type: "structure",
                    required: [ "UserName", "ServerId" ],
                    members: {
                        UserName: {},
                        ServerId: {},
                        SessionId: {}
                    }
                }
            }
        },
        S2r: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StepType: {},
                    Outputs: {},
                    Error: {
                        type: "structure",
                        required: [ "Type", "Message" ],
                        members: {
                            Type: {},
                            Message: {}
                        }
                    }
                }
            }
        },
        S31: {
            type: "list",
            member: {}
        },
        S37: {
            type: "structure",
            members: {
                PassiveIp: {}
            }
        }
    },
    paginators: {
        ListAccesses: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListExecutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSecurityPolicies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListServers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWorkflows: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["globalaccelerator"] = {};

AWS.GlobalAccelerator = AWS.Service.defineService("globalaccelerator", [ "2018-08-08" ]);

AWS.apiLoader.services["globalaccelerator"]["2018-08-08"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-08-08",
        endpointPrefix: "globalaccelerator",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Global Accelerator",
        serviceId: "Global Accelerator",
        signatureVersion: "v4",
        signingName: "globalaccelerator",
        targetPrefix: "GlobalAccelerator_V20180706",
        uid: "globalaccelerator-2018-08-08"
    },
    operations: {
        AddCustomRoutingEndpoints: {
            input: {
                type: "structure",
                required: [ "EndpointConfigurations", "EndpointGroupArn" ],
                members: {
                    EndpointConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EndpointId: {}
                            }
                        }
                    },
                    EndpointGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointDescriptions: {
                        shape: "S6"
                    },
                    EndpointGroupArn: {}
                }
            }
        },
        AdvertiseByoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr" ],
                members: {
                    Cidr: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidr: {
                        shape: "Sa"
                    }
                }
            }
        },
        AllowCustomRoutingTraffic: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn", "EndpointId" ],
                members: {
                    EndpointGroupArn: {},
                    EndpointId: {},
                    DestinationAddresses: {
                        shape: "Sg"
                    },
                    DestinationPorts: {
                        shape: "Si"
                    },
                    AllowAllTrafficToEndpoint: {
                        type: "boolean"
                    }
                }
            }
        },
        CreateAccelerator: {
            input: {
                type: "structure",
                required: [ "Name", "IdempotencyToken" ],
                members: {
                    Name: {},
                    IpAddressType: {},
                    IpAddresses: {
                        shape: "Sn"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerator: {
                        shape: "Su"
                    }
                }
            }
        },
        CreateCustomRoutingAccelerator: {
            input: {
                type: "structure",
                required: [ "Name", "IdempotencyToken" ],
                members: {
                    Name: {},
                    IpAddressType: {},
                    IpAddresses: {
                        shape: "Sn"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerator: {
                        shape: "S10"
                    }
                }
            }
        },
        CreateCustomRoutingEndpointGroup: {
            input: {
                type: "structure",
                required: [ "ListenerArn", "EndpointGroupRegion", "DestinationConfigurations", "IdempotencyToken" ],
                members: {
                    ListenerArn: {},
                    EndpointGroupRegion: {},
                    DestinationConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FromPort", "ToPort", "Protocols" ],
                            members: {
                                FromPort: {
                                    type: "integer"
                                },
                                ToPort: {
                                    type: "integer"
                                },
                                Protocols: {
                                    shape: "S15"
                                }
                            }
                        }
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroup: {
                        shape: "S18"
                    }
                }
            }
        },
        CreateCustomRoutingListener: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn", "PortRanges", "IdempotencyToken" ],
                members: {
                    AcceleratorArn: {},
                    PortRanges: {
                        shape: "S1e"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Listener: {
                        shape: "S1h"
                    }
                }
            }
        },
        CreateEndpointGroup: {
            input: {
                type: "structure",
                required: [ "ListenerArn", "EndpointGroupRegion", "IdempotencyToken" ],
                members: {
                    ListenerArn: {},
                    EndpointGroupRegion: {},
                    EndpointConfigurations: {
                        shape: "S1j"
                    },
                    TrafficDialPercentage: {
                        type: "float"
                    },
                    HealthCheckPort: {
                        type: "integer"
                    },
                    HealthCheckProtocol: {},
                    HealthCheckPath: {},
                    HealthCheckIntervalSeconds: {
                        type: "integer"
                    },
                    ThresholdCount: {
                        type: "integer"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    },
                    PortOverrides: {
                        shape: "S1s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroup: {
                        shape: "S1v"
                    }
                }
            }
        },
        CreateListener: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn", "PortRanges", "Protocol", "IdempotencyToken" ],
                members: {
                    AcceleratorArn: {},
                    PortRanges: {
                        shape: "S1e"
                    },
                    Protocol: {},
                    ClientAffinity: {},
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Listener: {
                        shape: "S22"
                    }
                }
            }
        },
        DeleteAccelerator: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {}
                }
            }
        },
        DeleteCustomRoutingAccelerator: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {}
                }
            }
        },
        DeleteCustomRoutingEndpointGroup: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn" ],
                members: {
                    EndpointGroupArn: {}
                }
            }
        },
        DeleteCustomRoutingListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {}
                }
            }
        },
        DeleteEndpointGroup: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn" ],
                members: {
                    EndpointGroupArn: {}
                }
            }
        },
        DeleteListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {}
                }
            }
        },
        DenyCustomRoutingTraffic: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn", "EndpointId" ],
                members: {
                    EndpointGroupArn: {},
                    EndpointId: {},
                    DestinationAddresses: {
                        shape: "Sg"
                    },
                    DestinationPorts: {
                        shape: "Si"
                    },
                    DenyAllTrafficToEndpoint: {
                        type: "boolean"
                    }
                }
            }
        },
        DeprovisionByoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr" ],
                members: {
                    Cidr: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidr: {
                        shape: "Sa"
                    }
                }
            }
        },
        DescribeAccelerator: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerator: {
                        shape: "Su"
                    }
                }
            }
        },
        DescribeAcceleratorAttributes: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AcceleratorAttributes: {
                        shape: "S2g"
                    }
                }
            }
        },
        DescribeCustomRoutingAccelerator: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerator: {
                        shape: "S10"
                    }
                }
            }
        },
        DescribeCustomRoutingAcceleratorAttributes: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AcceleratorAttributes: {
                        shape: "S2l"
                    }
                }
            }
        },
        DescribeCustomRoutingEndpointGroup: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn" ],
                members: {
                    EndpointGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroup: {
                        shape: "S18"
                    }
                }
            }
        },
        DescribeCustomRoutingListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Listener: {
                        shape: "S1h"
                    }
                }
            }
        },
        DescribeEndpointGroup: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn" ],
                members: {
                    EndpointGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroup: {
                        shape: "S1v"
                    }
                }
            }
        },
        DescribeListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Listener: {
                        shape: "S22"
                    }
                }
            }
        },
        ListAccelerators: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerators: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListByoipCidrs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidrs: {
                        type: "list",
                        member: {
                            shape: "Sa"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomRoutingAccelerators: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerators: {
                        type: "list",
                        member: {
                            shape: "S10"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomRoutingEndpointGroups: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroups: {
                        type: "list",
                        member: {
                            shape: "S18"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomRoutingListeners: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Listeners: {
                        type: "list",
                        member: {
                            shape: "S1h"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomRoutingPortMappings: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    EndpointGroupArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PortMappings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AcceleratorPort: {
                                    type: "integer"
                                },
                                EndpointGroupArn: {},
                                EndpointId: {},
                                DestinationSocketAddress: {
                                    shape: "S3f"
                                },
                                Protocols: {
                                    shape: "S15"
                                },
                                DestinationTrafficState: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomRoutingPortMappingsByDestination: {
            input: {
                type: "structure",
                required: [ "EndpointId", "DestinationAddress" ],
                members: {
                    EndpointId: {},
                    DestinationAddress: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DestinationPortMappings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AcceleratorArn: {},
                                AcceleratorSocketAddresses: {
                                    type: "list",
                                    member: {
                                        shape: "S3f"
                                    }
                                },
                                EndpointGroupArn: {},
                                EndpointId: {},
                                EndpointGroupRegion: {},
                                DestinationSocketAddress: {
                                    shape: "S3f"
                                },
                                IpAddressType: {},
                                DestinationTrafficState: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEndpointGroups: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroups: {
                        type: "list",
                        member: {
                            shape: "S1v"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListListeners: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Listeners: {
                        type: "list",
                        member: {
                            shape: "S22"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sp"
                    }
                }
            }
        },
        ProvisionByoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr", "CidrAuthorizationContext" ],
                members: {
                    Cidr: {},
                    CidrAuthorizationContext: {
                        type: "structure",
                        required: [ "Message", "Signature" ],
                        members: {
                            Message: {},
                            Signature: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidr: {
                        shape: "Sa"
                    }
                }
            }
        },
        RemoveCustomRoutingEndpoints: {
            input: {
                type: "structure",
                required: [ "EndpointIds", "EndpointGroupArn" ],
                members: {
                    EndpointIds: {
                        type: "list",
                        member: {}
                    },
                    EndpointGroupArn: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAccelerator: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    Name: {},
                    IpAddressType: {},
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerator: {
                        shape: "Su"
                    }
                }
            }
        },
        UpdateAcceleratorAttributes: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    FlowLogsEnabled: {
                        type: "boolean"
                    },
                    FlowLogsS3Bucket: {},
                    FlowLogsS3Prefix: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AcceleratorAttributes: {
                        shape: "S2g"
                    }
                }
            }
        },
        UpdateCustomRoutingAccelerator: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    Name: {},
                    IpAddressType: {},
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerator: {
                        shape: "S10"
                    }
                }
            }
        },
        UpdateCustomRoutingAcceleratorAttributes: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    FlowLogsEnabled: {
                        type: "boolean"
                    },
                    FlowLogsS3Bucket: {},
                    FlowLogsS3Prefix: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AcceleratorAttributes: {
                        shape: "S2l"
                    }
                }
            }
        },
        UpdateCustomRoutingListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn", "PortRanges" ],
                members: {
                    ListenerArn: {},
                    PortRanges: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Listener: {
                        shape: "S1h"
                    }
                }
            }
        },
        UpdateEndpointGroup: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn" ],
                members: {
                    EndpointGroupArn: {},
                    EndpointConfigurations: {
                        shape: "S1j"
                    },
                    TrafficDialPercentage: {
                        type: "float"
                    },
                    HealthCheckPort: {
                        type: "integer"
                    },
                    HealthCheckProtocol: {},
                    HealthCheckPath: {},
                    HealthCheckIntervalSeconds: {
                        type: "integer"
                    },
                    ThresholdCount: {
                        type: "integer"
                    },
                    PortOverrides: {
                        shape: "S1s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroup: {
                        shape: "S1v"
                    }
                }
            }
        },
        UpdateListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {},
                    PortRanges: {
                        shape: "S1e"
                    },
                    Protocol: {},
                    ClientAffinity: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Listener: {
                        shape: "S22"
                    }
                }
            }
        },
        WithdrawByoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr" ],
                members: {
                    Cidr: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidr: {
                        shape: "Sa"
                    }
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EndpointId: {}
                }
            }
        },
        Sa: {
            type: "structure",
            members: {
                Cidr: {},
                State: {},
                Events: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Message: {},
                            Timestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        Sg: {
            type: "list",
            member: {}
        },
        Si: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        Sn: {
            type: "list",
            member: {}
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                AcceleratorArn: {},
                Name: {},
                IpAddressType: {},
                Enabled: {
                    type: "boolean"
                },
                IpSets: {
                    shape: "Sv"
                },
                DnsName: {},
                Status: {},
                CreatedTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                }
            }
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    IpFamily: {},
                    IpAddresses: {
                        shape: "Sn"
                    }
                }
            }
        },
        S10: {
            type: "structure",
            members: {
                AcceleratorArn: {},
                Name: {},
                IpAddressType: {},
                Enabled: {
                    type: "boolean"
                },
                IpSets: {
                    shape: "Sv"
                },
                DnsName: {},
                Status: {},
                CreatedTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                }
            }
        },
        S15: {
            type: "list",
            member: {}
        },
        S18: {
            type: "structure",
            members: {
                EndpointGroupArn: {},
                EndpointGroupRegion: {},
                DestinationDescriptions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            FromPort: {
                                type: "integer"
                            },
                            ToPort: {
                                type: "integer"
                            },
                            Protocols: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                EndpointDescriptions: {
                    shape: "S6"
                }
            }
        },
        S1e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FromPort: {
                        type: "integer"
                    },
                    ToPort: {
                        type: "integer"
                    }
                }
            }
        },
        S1h: {
            type: "structure",
            members: {
                ListenerArn: {},
                PortRanges: {
                    shape: "S1e"
                }
            }
        },
        S1j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EndpointId: {},
                    Weight: {
                        type: "integer"
                    },
                    ClientIPPreservationEnabled: {
                        type: "boolean"
                    }
                }
            }
        },
        S1s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ListenerPort: {
                        type: "integer"
                    },
                    EndpointPort: {
                        type: "integer"
                    }
                }
            }
        },
        S1v: {
            type: "structure",
            members: {
                EndpointGroupArn: {},
                EndpointGroupRegion: {},
                EndpointDescriptions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            EndpointId: {},
                            Weight: {
                                type: "integer"
                            },
                            HealthState: {},
                            HealthReason: {},
                            ClientIPPreservationEnabled: {
                                type: "boolean"
                            }
                        }
                    }
                },
                TrafficDialPercentage: {
                    type: "float"
                },
                HealthCheckPort: {
                    type: "integer"
                },
                HealthCheckProtocol: {},
                HealthCheckPath: {},
                HealthCheckIntervalSeconds: {
                    type: "integer"
                },
                ThresholdCount: {
                    type: "integer"
                },
                PortOverrides: {
                    shape: "S1s"
                }
            }
        },
        S22: {
            type: "structure",
            members: {
                ListenerArn: {},
                PortRanges: {
                    shape: "S1e"
                },
                Protocol: {},
                ClientAffinity: {}
            }
        },
        S2g: {
            type: "structure",
            members: {
                FlowLogsEnabled: {
                    type: "boolean"
                },
                FlowLogsS3Bucket: {},
                FlowLogsS3Prefix: {}
            }
        },
        S2l: {
            type: "structure",
            members: {
                FlowLogsEnabled: {
                    type: "boolean"
                },
                FlowLogsS3Bucket: {},
                FlowLogsS3Prefix: {}
            }
        },
        S3f: {
            type: "structure",
            members: {
                IpAddress: {},
                Port: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        ListAccelerators: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Accelerators"
        },
        ListByoipCidrs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ByoipCidrs"
        },
        ListCustomRoutingAccelerators: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Accelerators"
        },
        ListCustomRoutingEndpointGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListCustomRoutingListeners: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Listeners"
        },
        ListCustomRoutingPortMappings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PortMappings"
        },
        ListCustomRoutingPortMappingsByDestination: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DestinationPortMappings"
        },
        ListEndpointGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EndpointGroups"
        },
        ListListeners: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Listeners"
        }
    }
};

AWS.apiLoader.services["comprehendmedical"] = {};

AWS.ComprehendMedical = AWS.Service.defineService("comprehendmedical", [ "2018-10-30" ]);

AWS.apiLoader.services["comprehendmedical"]["2018-10-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-10-30",
        endpointPrefix: "comprehendmedical",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "ComprehendMedical",
        serviceFullName: "AWS Comprehend Medical",
        serviceId: "ComprehendMedical",
        signatureVersion: "v4",
        signingName: "comprehendmedical",
        targetPrefix: "ComprehendMedical_20181030",
        uid: "comprehendmedical-2018-10-30"
    },
    operations: {
        DescribeEntitiesDetectionV2Job: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobProperties: {
                        shape: "S4"
                    }
                }
            }
        },
        DescribeICD10CMInferenceJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobProperties: {
                        shape: "S4"
                    }
                }
            }
        },
        DescribePHIDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobProperties: {
                        shape: "S4"
                    }
                }
            }
        },
        DescribeRxNormInferenceJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobProperties: {
                        shape: "S4"
                    }
                }
            }
        },
        DetectEntities: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entities", "ModelVersion" ],
                members: {
                    Entities: {
                        shape: "Sr"
                    },
                    UnmappedAttributes: {
                        shape: "S14"
                    },
                    PaginationToken: {},
                    ModelVersion: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This operation is deprecated, use DetectEntitiesV2 instead."
        },
        DetectEntitiesV2: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entities", "ModelVersion" ],
                members: {
                    Entities: {
                        shape: "Sr"
                    },
                    UnmappedAttributes: {
                        shape: "S14"
                    },
                    PaginationToken: {},
                    ModelVersion: {}
                }
            }
        },
        DetectPHI: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entities", "ModelVersion" ],
                members: {
                    Entities: {
                        shape: "Sr"
                    },
                    PaginationToken: {},
                    ModelVersion: {}
                }
            }
        },
        InferICD10CM: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entities" ],
                members: {
                    Entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {
                                    type: "integer"
                                },
                                Text: {},
                                Category: {},
                                Type: {},
                                Score: {
                                    type: "float"
                                },
                                BeginOffset: {
                                    type: "integer"
                                },
                                EndOffset: {
                                    type: "integer"
                                },
                                Attributes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Type: {},
                                            Score: {
                                                type: "float"
                                            },
                                            RelationshipScore: {
                                                type: "float"
                                            },
                                            Id: {
                                                type: "integer"
                                            },
                                            BeginOffset: {
                                                type: "integer"
                                            },
                                            EndOffset: {
                                                type: "integer"
                                            },
                                            Text: {},
                                            Traits: {
                                                shape: "S1k"
                                            },
                                            Category: {},
                                            RelationshipType: {}
                                        }
                                    }
                                },
                                Traits: {
                                    shape: "S1k"
                                },
                                ICD10CMConcepts: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Description: {},
                                            Code: {},
                                            Score: {
                                                type: "float"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    PaginationToken: {},
                    ModelVersion: {}
                }
            }
        },
        InferRxNorm: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entities" ],
                members: {
                    Entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {
                                    type: "integer"
                                },
                                Text: {},
                                Category: {},
                                Type: {},
                                Score: {
                                    type: "float"
                                },
                                BeginOffset: {
                                    type: "integer"
                                },
                                EndOffset: {
                                    type: "integer"
                                },
                                Attributes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Type: {},
                                            Score: {
                                                type: "float"
                                            },
                                            RelationshipScore: {
                                                type: "float"
                                            },
                                            Id: {
                                                type: "integer"
                                            },
                                            BeginOffset: {
                                                type: "integer"
                                            },
                                            EndOffset: {
                                                type: "integer"
                                            },
                                            Text: {},
                                            Traits: {
                                                shape: "S1z"
                                            }
                                        }
                                    }
                                },
                                Traits: {
                                    shape: "S1z"
                                },
                                RxNormConcepts: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Description: {},
                                            Code: {},
                                            Score: {
                                                type: "float"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    PaginationToken: {},
                    ModelVersion: {}
                }
            }
        },
        ListEntitiesDetectionV2Jobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S25"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobPropertiesList: {
                        shape: "S28"
                    },
                    NextToken: {}
                }
            }
        },
        ListICD10CMInferenceJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S25"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobPropertiesList: {
                        shape: "S28"
                    },
                    NextToken: {}
                }
            }
        },
        ListPHIDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S25"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobPropertiesList: {
                        shape: "S28"
                    },
                    NextToken: {}
                }
            }
        },
        ListRxNormInferenceJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S25"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobPropertiesList: {
                        shape: "S28"
                    },
                    NextToken: {}
                }
            }
        },
        StartEntitiesDetectionV2Job: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S9"
                    },
                    OutputDataConfig: {
                        shape: "Sc"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    KMSKey: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StartICD10CMInferenceJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S9"
                    },
                    OutputDataConfig: {
                        shape: "Sc"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    KMSKey: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StartPHIDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S9"
                    },
                    OutputDataConfig: {
                        shape: "Sc"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    KMSKey: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StartRxNormInferenceJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S9"
                    },
                    OutputDataConfig: {
                        shape: "Sc"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    KMSKey: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StopEntitiesDetectionV2Job: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StopICD10CMInferenceJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StopPHIDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StopRxNormInferenceJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                ExpirationTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S9"
                },
                OutputDataConfig: {
                    shape: "Sc"
                },
                LanguageCode: {},
                DataAccessRoleArn: {},
                ManifestFilePath: {},
                KMSKey: {},
                ModelVersion: {}
            }
        },
        S9: {
            type: "structure",
            required: [ "S3Bucket" ],
            members: {
                S3Bucket: {},
                S3Key: {}
            }
        },
        Sc: {
            type: "structure",
            required: [ "S3Bucket" ],
            members: {
                S3Bucket: {},
                S3Key: {}
            }
        },
        Sr: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {
                        type: "integer"
                    },
                    BeginOffset: {
                        type: "integer"
                    },
                    EndOffset: {
                        type: "integer"
                    },
                    Score: {
                        type: "float"
                    },
                    Text: {},
                    Category: {},
                    Type: {},
                    Traits: {
                        shape: "Sy"
                    },
                    Attributes: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    }
                }
            }
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Score: {
                        type: "float"
                    }
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                Type: {},
                Score: {
                    type: "float"
                },
                RelationshipScore: {
                    type: "float"
                },
                RelationshipType: {},
                Id: {
                    type: "integer"
                },
                BeginOffset: {
                    type: "integer"
                },
                EndOffset: {
                    type: "integer"
                },
                Text: {},
                Category: {},
                Traits: {
                    shape: "Sy"
                }
            }
        },
        S14: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Attribute: {
                        shape: "S12"
                    }
                }
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Score: {
                        type: "float"
                    }
                }
            }
        },
        S1z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Score: {
                        type: "float"
                    }
                }
            }
        },
        S25: {
            type: "structure",
            members: {
                JobName: {},
                JobStatus: {},
                SubmitTimeBefore: {
                    type: "timestamp"
                },
                SubmitTimeAfter: {
                    type: "timestamp"
                }
            }
        },
        S28: {
            type: "list",
            member: {
                shape: "S4"
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["kinesisanalyticsv2"] = {};

AWS.KinesisAnalyticsV2 = AWS.Service.defineService("kinesisanalyticsv2", [ "2018-05-23" ]);

AWS.apiLoader.services["kinesisanalyticsv2"]["2018-05-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-23",
        endpointPrefix: "kinesisanalytics",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Kinesis Analytics V2",
        serviceFullName: "Amazon Kinesis Analytics",
        serviceId: "Kinesis Analytics V2",
        signatureVersion: "v4",
        signingName: "kinesisanalytics",
        targetPrefix: "KinesisAnalytics_20180523",
        uid: "kinesisanalyticsv2-2018-05-23"
    },
    operations: {
        AddApplicationCloudWatchLoggingOption: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CloudWatchLoggingOption" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    CloudWatchLoggingOption: {
                        shape: "S4"
                    },
                    ConditionalToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    CloudWatchLoggingOptionDescriptions: {
                        shape: "S9"
                    }
                }
            }
        },
        AddApplicationInput: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "Input" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    Input: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    InputDescriptions: {
                        shape: "S12"
                    }
                }
            }
        },
        AddApplicationInputProcessingConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "InputId", "InputProcessingConfiguration" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    InputId: {},
                    InputProcessingConfiguration: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    InputId: {},
                    InputProcessingConfigurationDescription: {
                        shape: "S15"
                    }
                }
            }
        },
        AddApplicationOutput: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "Output" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    Output: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    OutputDescriptions: {
                        shape: "S1k"
                    }
                }
            }
        },
        AddApplicationReferenceDataSource: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "ReferenceDataSource" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    ReferenceDataSource: {
                        shape: "S1q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    ReferenceDataSourceDescriptions: {
                        shape: "S1w"
                    }
                }
            }
        },
        AddApplicationVpcConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "VpcConfiguration" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    VpcConfiguration: {
                        shape: "S20"
                    },
                    ConditionalToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    VpcConfigurationDescription: {
                        shape: "S26"
                    }
                }
            }
        },
        CreateApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "RuntimeEnvironment", "ServiceExecutionRole" ],
                members: {
                    ApplicationName: {},
                    ApplicationDescription: {},
                    RuntimeEnvironment: {},
                    ServiceExecutionRole: {},
                    ApplicationConfiguration: {
                        type: "structure",
                        members: {
                            SqlApplicationConfiguration: {
                                type: "structure",
                                members: {
                                    Inputs: {
                                        type: "list",
                                        member: {
                                            shape: "Se"
                                        }
                                    },
                                    Outputs: {
                                        type: "list",
                                        member: {
                                            shape: "S1e"
                                        }
                                    },
                                    ReferenceDataSources: {
                                        type: "list",
                                        member: {
                                            shape: "S1q"
                                        }
                                    }
                                }
                            },
                            FlinkApplicationConfiguration: {
                                type: "structure",
                                members: {
                                    CheckpointConfiguration: {
                                        type: "structure",
                                        required: [ "ConfigurationType" ],
                                        members: {
                                            ConfigurationType: {},
                                            CheckpointingEnabled: {
                                                type: "boolean"
                                            },
                                            CheckpointInterval: {
                                                type: "long"
                                            },
                                            MinPauseBetweenCheckpoints: {
                                                type: "long"
                                            }
                                        }
                                    },
                                    MonitoringConfiguration: {
                                        type: "structure",
                                        required: [ "ConfigurationType" ],
                                        members: {
                                            ConfigurationType: {},
                                            MetricsLevel: {},
                                            LogLevel: {}
                                        }
                                    },
                                    ParallelismConfiguration: {
                                        type: "structure",
                                        required: [ "ConfigurationType" ],
                                        members: {
                                            ConfigurationType: {},
                                            Parallelism: {
                                                type: "integer"
                                            },
                                            ParallelismPerKPU: {
                                                type: "integer"
                                            },
                                            AutoScalingEnabled: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                }
                            },
                            EnvironmentProperties: {
                                type: "structure",
                                required: [ "PropertyGroups" ],
                                members: {
                                    PropertyGroups: {
                                        shape: "S2t"
                                    }
                                }
                            },
                            ApplicationCodeConfiguration: {
                                type: "structure",
                                required: [ "CodeContentType" ],
                                members: {
                                    CodeContent: {
                                        type: "structure",
                                        members: {
                                            TextContent: {},
                                            ZipFileContent: {
                                                type: "blob"
                                            },
                                            S3ContentLocation: {
                                                shape: "S32"
                                            }
                                        }
                                    },
                                    CodeContentType: {}
                                }
                            },
                            ApplicationSnapshotConfiguration: {
                                type: "structure",
                                required: [ "SnapshotsEnabled" ],
                                members: {
                                    SnapshotsEnabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            VpcConfigurations: {
                                type: "list",
                                member: {
                                    shape: "S20"
                                }
                            },
                            ZeppelinApplicationConfiguration: {
                                type: "structure",
                                members: {
                                    MonitoringConfiguration: {
                                        type: "structure",
                                        required: [ "LogLevel" ],
                                        members: {
                                            LogLevel: {}
                                        }
                                    },
                                    CatalogConfiguration: {
                                        type: "structure",
                                        required: [ "GlueDataCatalogConfiguration" ],
                                        members: {
                                            GlueDataCatalogConfiguration: {
                                                type: "structure",
                                                required: [ "DatabaseARN" ],
                                                members: {
                                                    DatabaseARN: {}
                                                }
                                            }
                                        }
                                    },
                                    DeployAsApplicationConfiguration: {
                                        type: "structure",
                                        required: [ "S3ContentLocation" ],
                                        members: {
                                            S3ContentLocation: {
                                                type: "structure",
                                                required: [ "BucketARN" ],
                                                members: {
                                                    BucketARN: {},
                                                    BasePath: {}
                                                }
                                            }
                                        }
                                    },
                                    CustomArtifactsConfiguration: {
                                        shape: "S3f"
                                    }
                                }
                            }
                        }
                    },
                    CloudWatchLoggingOptions: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    Tags: {
                        shape: "S3n"
                    },
                    ApplicationMode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationDetail" ],
                members: {
                    ApplicationDetail: {
                        shape: "S3t"
                    }
                }
            }
        },
        CreateApplicationPresignedUrl: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "UrlType" ],
                members: {
                    ApplicationName: {},
                    UrlType: {},
                    SessionExpirationDurationInSeconds: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthorizedUrl: {}
                }
            }
        },
        CreateApplicationSnapshot: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "SnapshotName" ],
                members: {
                    ApplicationName: {},
                    SnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CreateTimestamp" ],
                members: {
                    ApplicationName: {},
                    CreateTimestamp: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApplicationCloudWatchLoggingOption: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CloudWatchLoggingOptionId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    CloudWatchLoggingOptionId: {},
                    ConditionalToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    CloudWatchLoggingOptionDescriptions: {
                        shape: "S9"
                    }
                }
            }
        },
        DeleteApplicationInputProcessingConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "InputId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    InputId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    }
                }
            }
        },
        DeleteApplicationOutput: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "OutputId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    OutputId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    }
                }
            }
        },
        DeleteApplicationReferenceDataSource: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "ReferenceId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    ReferenceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    }
                }
            }
        },
        DeleteApplicationSnapshot: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "SnapshotName", "SnapshotCreationTimestamp" ],
                members: {
                    ApplicationName: {},
                    SnapshotName: {},
                    SnapshotCreationTimestamp: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApplicationVpcConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "VpcConfigurationId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    VpcConfigurationId: {},
                    ConditionalToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    }
                }
            }
        },
        DescribeApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    IncludeAdditionalDetails: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationDetail" ],
                members: {
                    ApplicationDetail: {
                        shape: "S3t"
                    }
                }
            }
        },
        DescribeApplicationSnapshot: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "SnapshotName" ],
                members: {
                    ApplicationName: {},
                    SnapshotName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SnapshotDetails" ],
                members: {
                    SnapshotDetails: {
                        shape: "S5g"
                    }
                }
            }
        },
        DescribeApplicationVersion: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "ApplicationVersionId" ],
                members: {
                    ApplicationName: {},
                    ApplicationVersionId: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationVersionDetail: {
                        shape: "S3t"
                    }
                }
            }
        },
        DiscoverInputSchema: {
            input: {
                type: "structure",
                required: [ "ServiceExecutionRole" ],
                members: {
                    ResourceARN: {},
                    ServiceExecutionRole: {},
                    InputStartingPositionConfiguration: {
                        shape: "S19"
                    },
                    S3Configuration: {
                        type: "structure",
                        required: [ "BucketARN", "FileKey" ],
                        members: {
                            BucketARN: {},
                            FileKey: {}
                        }
                    },
                    InputProcessingConfiguration: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InputSchema: {
                        shape: "Sm"
                    },
                    ParsedInputRecords: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {}
                        }
                    },
                    ProcessedInputRecords: {
                        type: "list",
                        member: {}
                    },
                    RawInputRecords: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListApplicationSnapshots: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotSummaries: {
                        type: "list",
                        member: {
                            shape: "S5g"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListApplicationVersions: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ApplicationVersionId", "ApplicationStatus" ],
                            members: {
                                ApplicationVersionId: {
                                    type: "long"
                                },
                                ApplicationStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListApplications: {
            input: {
                type: "structure",
                members: {
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationSummaries" ],
                members: {
                    ApplicationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ApplicationName", "ApplicationARN", "ApplicationStatus", "ApplicationVersionId", "RuntimeEnvironment" ],
                            members: {
                                ApplicationName: {},
                                ApplicationARN: {},
                                ApplicationStatus: {},
                                ApplicationVersionId: {
                                    type: "long"
                                },
                                RuntimeEnvironment: {},
                                ApplicationMode: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S3n"
                    }
                }
            }
        },
        RollbackApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationDetail" ],
                members: {
                    ApplicationDetail: {
                        shape: "S3t"
                    }
                }
            }
        },
        StartApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    RunConfiguration: {
                        type: "structure",
                        members: {
                            FlinkRunConfiguration: {
                                shape: "S47"
                            },
                            SqlRunConfigurations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "InputId", "InputStartingPositionConfiguration" ],
                                    members: {
                                        InputId: {},
                                        InputStartingPositionConfiguration: {
                                            shape: "S19"
                                        }
                                    }
                                }
                            },
                            ApplicationRestoreConfiguration: {
                                shape: "S44"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    Force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S3n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    ApplicationConfigurationUpdate: {
                        type: "structure",
                        members: {
                            SqlApplicationConfigurationUpdate: {
                                type: "structure",
                                members: {
                                    InputUpdates: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "InputId" ],
                                            members: {
                                                InputId: {},
                                                NamePrefixUpdate: {},
                                                InputProcessingConfigurationUpdate: {
                                                    type: "structure",
                                                    required: [ "InputLambdaProcessorUpdate" ],
                                                    members: {
                                                        InputLambdaProcessorUpdate: {
                                                            type: "structure",
                                                            required: [ "ResourceARNUpdate" ],
                                                            members: {
                                                                ResourceARNUpdate: {}
                                                            }
                                                        }
                                                    }
                                                },
                                                KinesisStreamsInputUpdate: {
                                                    type: "structure",
                                                    required: [ "ResourceARNUpdate" ],
                                                    members: {
                                                        ResourceARNUpdate: {}
                                                    }
                                                },
                                                KinesisFirehoseInputUpdate: {
                                                    type: "structure",
                                                    required: [ "ResourceARNUpdate" ],
                                                    members: {
                                                        ResourceARNUpdate: {}
                                                    }
                                                },
                                                InputSchemaUpdate: {
                                                    type: "structure",
                                                    members: {
                                                        RecordFormatUpdate: {
                                                            shape: "Sn"
                                                        },
                                                        RecordEncodingUpdate: {},
                                                        RecordColumnUpdates: {
                                                            shape: "Sw"
                                                        }
                                                    }
                                                },
                                                InputParallelismUpdate: {
                                                    type: "structure",
                                                    required: [ "CountUpdate" ],
                                                    members: {
                                                        CountUpdate: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    OutputUpdates: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "OutputId" ],
                                            members: {
                                                OutputId: {},
                                                NameUpdate: {},
                                                KinesisStreamsOutputUpdate: {
                                                    type: "structure",
                                                    required: [ "ResourceARNUpdate" ],
                                                    members: {
                                                        ResourceARNUpdate: {}
                                                    }
                                                },
                                                KinesisFirehoseOutputUpdate: {
                                                    type: "structure",
                                                    required: [ "ResourceARNUpdate" ],
                                                    members: {
                                                        ResourceARNUpdate: {}
                                                    }
                                                },
                                                LambdaOutputUpdate: {
                                                    type: "structure",
                                                    required: [ "ResourceARNUpdate" ],
                                                    members: {
                                                        ResourceARNUpdate: {}
                                                    }
                                                },
                                                DestinationSchemaUpdate: {
                                                    shape: "S1i"
                                                }
                                            }
                                        }
                                    },
                                    ReferenceDataSourceUpdates: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "ReferenceId" ],
                                            members: {
                                                ReferenceId: {},
                                                TableNameUpdate: {},
                                                S3ReferenceDataSourceUpdate: {
                                                    type: "structure",
                                                    members: {
                                                        BucketARNUpdate: {},
                                                        FileKeyUpdate: {}
                                                    }
                                                },
                                                ReferenceSchemaUpdate: {
                                                    shape: "Sm"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            ApplicationCodeConfigurationUpdate: {
                                type: "structure",
                                members: {
                                    CodeContentTypeUpdate: {},
                                    CodeContentUpdate: {
                                        type: "structure",
                                        members: {
                                            TextContentUpdate: {},
                                            ZipFileContentUpdate: {
                                                type: "blob"
                                            },
                                            S3ContentLocationUpdate: {
                                                type: "structure",
                                                members: {
                                                    BucketARNUpdate: {},
                                                    FileKeyUpdate: {},
                                                    ObjectVersionUpdate: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            FlinkApplicationConfigurationUpdate: {
                                type: "structure",
                                members: {
                                    CheckpointConfigurationUpdate: {
                                        type: "structure",
                                        members: {
                                            ConfigurationTypeUpdate: {},
                                            CheckpointingEnabledUpdate: {
                                                type: "boolean"
                                            },
                                            CheckpointIntervalUpdate: {
                                                type: "long"
                                            },
                                            MinPauseBetweenCheckpointsUpdate: {
                                                type: "long"
                                            }
                                        }
                                    },
                                    MonitoringConfigurationUpdate: {
                                        type: "structure",
                                        members: {
                                            ConfigurationTypeUpdate: {},
                                            MetricsLevelUpdate: {},
                                            LogLevelUpdate: {}
                                        }
                                    },
                                    ParallelismConfigurationUpdate: {
                                        type: "structure",
                                        members: {
                                            ConfigurationTypeUpdate: {},
                                            ParallelismUpdate: {
                                                type: "integer"
                                            },
                                            ParallelismPerKPUUpdate: {
                                                type: "integer"
                                            },
                                            AutoScalingEnabledUpdate: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                }
                            },
                            EnvironmentPropertyUpdates: {
                                type: "structure",
                                required: [ "PropertyGroups" ],
                                members: {
                                    PropertyGroups: {
                                        shape: "S2t"
                                    }
                                }
                            },
                            ApplicationSnapshotConfigurationUpdate: {
                                type: "structure",
                                required: [ "SnapshotsEnabledUpdate" ],
                                members: {
                                    SnapshotsEnabledUpdate: {
                                        type: "boolean"
                                    }
                                }
                            },
                            VpcConfigurationUpdates: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "VpcConfigurationId" ],
                                    members: {
                                        VpcConfigurationId: {},
                                        SubnetIdUpdates: {
                                            shape: "S21"
                                        },
                                        SecurityGroupIdUpdates: {
                                            shape: "S23"
                                        }
                                    }
                                }
                            },
                            ZeppelinApplicationConfigurationUpdate: {
                                type: "structure",
                                members: {
                                    MonitoringConfigurationUpdate: {
                                        type: "structure",
                                        required: [ "LogLevelUpdate" ],
                                        members: {
                                            LogLevelUpdate: {}
                                        }
                                    },
                                    CatalogConfigurationUpdate: {
                                        type: "structure",
                                        required: [ "GlueDataCatalogConfigurationUpdate" ],
                                        members: {
                                            GlueDataCatalogConfigurationUpdate: {
                                                type: "structure",
                                                members: {
                                                    DatabaseARNUpdate: {}
                                                }
                                            }
                                        }
                                    },
                                    DeployAsApplicationConfigurationUpdate: {
                                        type: "structure",
                                        required: [ "S3ContentLocationUpdate" ],
                                        members: {
                                            S3ContentLocationUpdate: {
                                                type: "structure",
                                                required: [ "BucketARNUpdate" ],
                                                members: {
                                                    BucketARNUpdate: {},
                                                    BasePathUpdate: {}
                                                }
                                            }
                                        }
                                    },
                                    CustomArtifactsConfigurationUpdate: {
                                        shape: "S3f"
                                    }
                                }
                            }
                        }
                    },
                    ServiceExecutionRoleUpdate: {},
                    RunConfigurationUpdate: {
                        type: "structure",
                        members: {
                            FlinkRunConfiguration: {
                                shape: "S47"
                            },
                            ApplicationRestoreConfiguration: {
                                shape: "S44"
                            }
                        }
                    },
                    CloudWatchLoggingOptionUpdates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CloudWatchLoggingOptionId" ],
                            members: {
                                CloudWatchLoggingOptionId: {},
                                LogStreamARNUpdate: {}
                            }
                        }
                    },
                    ConditionalToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationDetail" ],
                members: {
                    ApplicationDetail: {
                        shape: "S3t"
                    }
                }
            }
        },
        UpdateApplicationMaintenanceConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "ApplicationMaintenanceConfigurationUpdate" ],
                members: {
                    ApplicationName: {},
                    ApplicationMaintenanceConfigurationUpdate: {
                        type: "structure",
                        required: [ "ApplicationMaintenanceWindowStartTimeUpdate" ],
                        members: {
                            ApplicationMaintenanceWindowStartTimeUpdate: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationMaintenanceConfigurationDescription: {
                        shape: "S4o"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "LogStreamARN" ],
            members: {
                LogStreamARN: {}
            }
        },
        S9: {
            type: "list",
            member: {
                type: "structure",
                required: [ "LogStreamARN" ],
                members: {
                    CloudWatchLoggingOptionId: {},
                    LogStreamARN: {},
                    RoleARN: {}
                }
            }
        },
        Se: {
            type: "structure",
            required: [ "NamePrefix", "InputSchema" ],
            members: {
                NamePrefix: {},
                InputProcessingConfiguration: {
                    shape: "Sg"
                },
                KinesisStreamsInput: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {}
                    }
                },
                KinesisFirehoseInput: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {}
                    }
                },
                InputParallelism: {
                    shape: "Sk"
                },
                InputSchema: {
                    shape: "Sm"
                }
            }
        },
        Sg: {
            type: "structure",
            required: [ "InputLambdaProcessor" ],
            members: {
                InputLambdaProcessor: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {}
                    }
                }
            }
        },
        Sk: {
            type: "structure",
            members: {
                Count: {
                    type: "integer"
                }
            }
        },
        Sm: {
            type: "structure",
            required: [ "RecordFormat", "RecordColumns" ],
            members: {
                RecordFormat: {
                    shape: "Sn"
                },
                RecordEncoding: {},
                RecordColumns: {
                    shape: "Sw"
                }
            }
        },
        Sn: {
            type: "structure",
            required: [ "RecordFormatType" ],
            members: {
                RecordFormatType: {},
                MappingParameters: {
                    type: "structure",
                    members: {
                        JSONMappingParameters: {
                            type: "structure",
                            required: [ "RecordRowPath" ],
                            members: {
                                RecordRowPath: {}
                            }
                        },
                        CSVMappingParameters: {
                            type: "structure",
                            required: [ "RecordRowDelimiter", "RecordColumnDelimiter" ],
                            members: {
                                RecordRowDelimiter: {},
                                RecordColumnDelimiter: {}
                            }
                        }
                    }
                }
            }
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "SqlType" ],
                members: {
                    Name: {},
                    Mapping: {},
                    SqlType: {}
                }
            }
        },
        S12: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    InputId: {},
                    NamePrefix: {},
                    InAppStreamNames: {
                        type: "list",
                        member: {}
                    },
                    InputProcessingConfigurationDescription: {
                        shape: "S15"
                    },
                    KinesisStreamsInputDescription: {
                        type: "structure",
                        required: [ "ResourceARN" ],
                        members: {
                            ResourceARN: {},
                            RoleARN: {}
                        }
                    },
                    KinesisFirehoseInputDescription: {
                        type: "structure",
                        required: [ "ResourceARN" ],
                        members: {
                            ResourceARN: {},
                            RoleARN: {}
                        }
                    },
                    InputSchema: {
                        shape: "Sm"
                    },
                    InputParallelism: {
                        shape: "Sk"
                    },
                    InputStartingPositionConfiguration: {
                        shape: "S19"
                    }
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                InputLambdaProcessorDescription: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {},
                        RoleARN: {}
                    }
                }
            }
        },
        S19: {
            type: "structure",
            members: {
                InputStartingPosition: {}
            }
        },
        S1e: {
            type: "structure",
            required: [ "Name", "DestinationSchema" ],
            members: {
                Name: {},
                KinesisStreamsOutput: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {}
                    }
                },
                KinesisFirehoseOutput: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {}
                    }
                },
                LambdaOutput: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {}
                    }
                },
                DestinationSchema: {
                    shape: "S1i"
                }
            }
        },
        S1i: {
            type: "structure",
            required: [ "RecordFormatType" ],
            members: {
                RecordFormatType: {}
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    OutputId: {},
                    Name: {},
                    KinesisStreamsOutputDescription: {
                        type: "structure",
                        required: [ "ResourceARN" ],
                        members: {
                            ResourceARN: {},
                            RoleARN: {}
                        }
                    },
                    KinesisFirehoseOutputDescription: {
                        type: "structure",
                        required: [ "ResourceARN" ],
                        members: {
                            ResourceARN: {},
                            RoleARN: {}
                        }
                    },
                    LambdaOutputDescription: {
                        type: "structure",
                        required: [ "ResourceARN" ],
                        members: {
                            ResourceARN: {},
                            RoleARN: {}
                        }
                    },
                    DestinationSchema: {
                        shape: "S1i"
                    }
                }
            }
        },
        S1q: {
            type: "structure",
            required: [ "TableName", "ReferenceSchema" ],
            members: {
                TableName: {},
                S3ReferenceDataSource: {
                    type: "structure",
                    members: {
                        BucketARN: {},
                        FileKey: {}
                    }
                },
                ReferenceSchema: {
                    shape: "Sm"
                }
            }
        },
        S1w: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ReferenceId", "TableName", "S3ReferenceDataSourceDescription" ],
                members: {
                    ReferenceId: {},
                    TableName: {},
                    S3ReferenceDataSourceDescription: {
                        type: "structure",
                        required: [ "BucketARN", "FileKey" ],
                        members: {
                            BucketARN: {},
                            FileKey: {},
                            ReferenceRoleARN: {}
                        }
                    },
                    ReferenceSchema: {
                        shape: "Sm"
                    }
                }
            }
        },
        S20: {
            type: "structure",
            required: [ "SubnetIds", "SecurityGroupIds" ],
            members: {
                SubnetIds: {
                    shape: "S21"
                },
                SecurityGroupIds: {
                    shape: "S23"
                }
            }
        },
        S21: {
            type: "list",
            member: {}
        },
        S23: {
            type: "list",
            member: {}
        },
        S26: {
            type: "structure",
            required: [ "VpcConfigurationId", "VpcId", "SubnetIds", "SecurityGroupIds" ],
            members: {
                VpcConfigurationId: {},
                VpcId: {},
                SubnetIds: {
                    shape: "S21"
                },
                SecurityGroupIds: {
                    shape: "S23"
                }
            }
        },
        S2t: {
            type: "list",
            member: {
                type: "structure",
                required: [ "PropertyGroupId", "PropertyMap" ],
                members: {
                    PropertyGroupId: {},
                    PropertyMap: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S32: {
            type: "structure",
            required: [ "BucketARN", "FileKey" ],
            members: {
                BucketARN: {},
                FileKey: {},
                ObjectVersion: {}
            }
        },
        S3f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ArtifactType" ],
                members: {
                    ArtifactType: {},
                    S3ContentLocation: {
                        shape: "S32"
                    },
                    MavenReference: {
                        shape: "S3i"
                    }
                }
            }
        },
        S3i: {
            type: "structure",
            required: [ "GroupId", "ArtifactId", "Version" ],
            members: {
                GroupId: {},
                ArtifactId: {},
                Version: {}
            }
        },
        S3n: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S3t: {
            type: "structure",
            required: [ "ApplicationARN", "ApplicationName", "RuntimeEnvironment", "ApplicationStatus", "ApplicationVersionId" ],
            members: {
                ApplicationARN: {},
                ApplicationDescription: {},
                ApplicationName: {},
                RuntimeEnvironment: {},
                ServiceExecutionRole: {},
                ApplicationStatus: {},
                ApplicationVersionId: {
                    type: "long"
                },
                CreateTimestamp: {
                    type: "timestamp"
                },
                LastUpdateTimestamp: {
                    type: "timestamp"
                },
                ApplicationConfigurationDescription: {
                    type: "structure",
                    members: {
                        SqlApplicationConfigurationDescription: {
                            type: "structure",
                            members: {
                                InputDescriptions: {
                                    shape: "S12"
                                },
                                OutputDescriptions: {
                                    shape: "S1k"
                                },
                                ReferenceDataSourceDescriptions: {
                                    shape: "S1w"
                                }
                            }
                        },
                        ApplicationCodeConfigurationDescription: {
                            type: "structure",
                            required: [ "CodeContentType" ],
                            members: {
                                CodeContentType: {},
                                CodeContentDescription: {
                                    type: "structure",
                                    members: {
                                        TextContent: {},
                                        CodeMD5: {},
                                        CodeSize: {
                                            type: "long"
                                        },
                                        S3ApplicationCodeLocationDescription: {
                                            type: "structure",
                                            required: [ "BucketARN", "FileKey" ],
                                            members: {
                                                BucketARN: {},
                                                FileKey: {},
                                                ObjectVersion: {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        RunConfigurationDescription: {
                            type: "structure",
                            members: {
                                ApplicationRestoreConfigurationDescription: {
                                    shape: "S44"
                                },
                                FlinkRunConfigurationDescription: {
                                    shape: "S47"
                                }
                            }
                        },
                        FlinkApplicationConfigurationDescription: {
                            type: "structure",
                            members: {
                                CheckpointConfigurationDescription: {
                                    type: "structure",
                                    members: {
                                        ConfigurationType: {},
                                        CheckpointingEnabled: {
                                            type: "boolean"
                                        },
                                        CheckpointInterval: {
                                            type: "long"
                                        },
                                        MinPauseBetweenCheckpoints: {
                                            type: "long"
                                        }
                                    }
                                },
                                MonitoringConfigurationDescription: {
                                    type: "structure",
                                    members: {
                                        ConfigurationType: {},
                                        MetricsLevel: {},
                                        LogLevel: {}
                                    }
                                },
                                ParallelismConfigurationDescription: {
                                    type: "structure",
                                    members: {
                                        ConfigurationType: {},
                                        Parallelism: {
                                            type: "integer"
                                        },
                                        ParallelismPerKPU: {
                                            type: "integer"
                                        },
                                        CurrentParallelism: {
                                            type: "integer"
                                        },
                                        AutoScalingEnabled: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                JobPlanDescription: {}
                            }
                        },
                        EnvironmentPropertyDescriptions: {
                            type: "structure",
                            members: {
                                PropertyGroupDescriptions: {
                                    shape: "S2t"
                                }
                            }
                        },
                        ApplicationSnapshotConfigurationDescription: {
                            type: "structure",
                            required: [ "SnapshotsEnabled" ],
                            members: {
                                SnapshotsEnabled: {
                                    type: "boolean"
                                }
                            }
                        },
                        VpcConfigurationDescriptions: {
                            type: "list",
                            member: {
                                shape: "S26"
                            }
                        },
                        ZeppelinApplicationConfigurationDescription: {
                            type: "structure",
                            required: [ "MonitoringConfigurationDescription" ],
                            members: {
                                MonitoringConfigurationDescription: {
                                    type: "structure",
                                    members: {
                                        LogLevel: {}
                                    }
                                },
                                CatalogConfigurationDescription: {
                                    type: "structure",
                                    required: [ "GlueDataCatalogConfigurationDescription" ],
                                    members: {
                                        GlueDataCatalogConfigurationDescription: {
                                            type: "structure",
                                            required: [ "DatabaseARN" ],
                                            members: {
                                                DatabaseARN: {}
                                            }
                                        }
                                    }
                                },
                                DeployAsApplicationConfigurationDescription: {
                                    type: "structure",
                                    required: [ "S3ContentLocationDescription" ],
                                    members: {
                                        S3ContentLocationDescription: {
                                            type: "structure",
                                            required: [ "BucketARN" ],
                                            members: {
                                                BucketARN: {},
                                                BasePath: {}
                                            }
                                        }
                                    }
                                },
                                CustomArtifactsConfigurationDescription: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ArtifactType: {},
                                            S3ContentLocationDescription: {
                                                shape: "S32"
                                            },
                                            MavenReferenceDescription: {
                                                shape: "S3i"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                CloudWatchLoggingOptionDescriptions: {
                    shape: "S9"
                },
                ApplicationMaintenanceConfigurationDescription: {
                    shape: "S4o"
                },
                ApplicationVersionUpdatedFrom: {
                    type: "long"
                },
                ApplicationVersionRolledBackFrom: {
                    type: "long"
                },
                ConditionalToken: {},
                ApplicationVersionRolledBackTo: {
                    type: "long"
                },
                ApplicationMode: {}
            }
        },
        S44: {
            type: "structure",
            required: [ "ApplicationRestoreType" ],
            members: {
                ApplicationRestoreType: {},
                SnapshotName: {}
            }
        },
        S47: {
            type: "structure",
            members: {
                AllowNonRestoredState: {
                    type: "boolean"
                }
            }
        },
        S4o: {
            type: "structure",
            required: [ "ApplicationMaintenanceWindowStartTime", "ApplicationMaintenanceWindowEndTime" ],
            members: {
                ApplicationMaintenanceWindowStartTime: {},
                ApplicationMaintenanceWindowEndTime: {}
            }
        },
        S5g: {
            type: "structure",
            required: [ "SnapshotName", "SnapshotStatus", "ApplicationVersionId" ],
            members: {
                SnapshotName: {},
                SnapshotStatus: {},
                ApplicationVersionId: {
                    type: "long"
                },
                SnapshotCreationTimestamp: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["mediaconnect"] = {};

AWS.MediaConnect = AWS.Service.defineService("mediaconnect", [ "2018-11-14" ]);

AWS.apiLoader.services["mediaconnect"]["2018-11-14"] = {
    metadata: {
        apiVersion: "2018-11-14",
        endpointPrefix: "mediaconnect",
        signingName: "mediaconnect",
        serviceFullName: "AWS MediaConnect",
        serviceId: "MediaConnect",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "mediaconnect-2018-11-14",
        signatureVersion: "v4"
    },
    operations: {
        AddFlowMediaStreams: {
            http: {
                requestUri: "/v1/flows/{flowArn}/mediaStreams",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    MediaStreams: {
                        shape: "S3",
                        locationName: "mediaStreams"
                    }
                },
                required: [ "FlowArn", "MediaStreams" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    MediaStreams: {
                        shape: "Se",
                        locationName: "mediaStreams"
                    }
                }
            }
        },
        AddFlowOutputs: {
            http: {
                requestUri: "/v1/flows/{flowArn}/outputs",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    Outputs: {
                        shape: "Sj",
                        locationName: "outputs"
                    }
                },
                required: [ "FlowArn", "Outputs" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Outputs: {
                        shape: "S11",
                        locationName: "outputs"
                    }
                }
            }
        },
        AddFlowSources: {
            http: {
                requestUri: "/v1/flows/{flowArn}/source",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    Sources: {
                        shape: "S1b",
                        locationName: "sources"
                    }
                },
                required: [ "FlowArn", "Sources" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Sources: {
                        shape: "S1i",
                        locationName: "sources"
                    }
                }
            }
        },
        AddFlowVpcInterfaces: {
            http: {
                requestUri: "/v1/flows/{flowArn}/vpcInterfaces",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    VpcInterfaces: {
                        shape: "S1p",
                        locationName: "vpcInterfaces"
                    }
                },
                required: [ "FlowArn", "VpcInterfaces" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    VpcInterfaces: {
                        shape: "S1t",
                        locationName: "vpcInterfaces"
                    }
                }
            }
        },
        CreateFlow: {
            http: {
                requestUri: "/v1/flows",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    AvailabilityZone: {
                        locationName: "availabilityZone"
                    },
                    Entitlements: {
                        shape: "S1w",
                        locationName: "entitlements"
                    },
                    MediaStreams: {
                        shape: "S3",
                        locationName: "mediaStreams"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Outputs: {
                        shape: "Sj",
                        locationName: "outputs"
                    },
                    Source: {
                        shape: "S1c",
                        locationName: "source"
                    },
                    SourceFailoverConfig: {
                        shape: "S1z",
                        locationName: "sourceFailoverConfig"
                    },
                    Sources: {
                        shape: "S1b",
                        locationName: "sources"
                    },
                    VpcInterfaces: {
                        shape: "S1p",
                        locationName: "vpcInterfaces"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Flow: {
                        shape: "S24",
                        locationName: "flow"
                    }
                }
            }
        },
        DeleteFlow: {
            http: {
                method: "DELETE",
                requestUri: "/v1/flows/{flowArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    }
                },
                required: [ "FlowArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        DescribeFlow: {
            http: {
                method: "GET",
                requestUri: "/v1/flows/{flowArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    }
                },
                required: [ "FlowArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Flow: {
                        shape: "S24",
                        locationName: "flow"
                    },
                    Messages: {
                        locationName: "messages",
                        type: "structure",
                        members: {
                            Errors: {
                                shape: "Sl",
                                locationName: "errors"
                            }
                        },
                        required: [ "Errors" ]
                    }
                }
            }
        },
        DescribeOffering: {
            http: {
                method: "GET",
                requestUri: "/v1/offerings/{offeringArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    OfferingArn: {
                        location: "uri",
                        locationName: "offeringArn"
                    }
                },
                required: [ "OfferingArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Offering: {
                        shape: "S2f",
                        locationName: "offering"
                    }
                }
            }
        },
        DescribeReservation: {
            http: {
                method: "GET",
                requestUri: "/v1/reservations/{reservationArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ReservationArn: {
                        location: "uri",
                        locationName: "reservationArn"
                    }
                },
                required: [ "ReservationArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Reservation: {
                        shape: "S2m",
                        locationName: "reservation"
                    }
                }
            }
        },
        GrantFlowEntitlements: {
            http: {
                requestUri: "/v1/flows/{flowArn}/entitlements",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Entitlements: {
                        shape: "S1w",
                        locationName: "entitlements"
                    },
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    }
                },
                required: [ "FlowArn", "Entitlements" ]
            },
            output: {
                type: "structure",
                members: {
                    Entitlements: {
                        shape: "S25",
                        locationName: "entitlements"
                    },
                    FlowArn: {
                        locationName: "flowArn"
                    }
                }
            }
        },
        ListEntitlements: {
            http: {
                method: "GET",
                requestUri: "/v1/entitlements",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Entitlements: {
                        locationName: "entitlements",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DataTransferSubscriberFeePercent: {
                                    locationName: "dataTransferSubscriberFeePercent",
                                    type: "integer"
                                },
                                EntitlementArn: {
                                    locationName: "entitlementArn"
                                },
                                EntitlementName: {
                                    locationName: "entitlementName"
                                }
                            },
                            required: [ "EntitlementArn", "EntitlementName" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListFlows: {
            http: {
                method: "GET",
                requestUri: "/v1/flows",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Flows: {
                        locationName: "flows",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                FlowArn: {
                                    locationName: "flowArn"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                SourceType: {
                                    locationName: "sourceType"
                                },
                                Status: {
                                    locationName: "status"
                                }
                            },
                            required: [ "Status", "Description", "SourceType", "AvailabilityZone", "FlowArn", "Name" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListOfferings: {
            http: {
                method: "GET",
                requestUri: "/v1/offerings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Offerings: {
                        locationName: "offerings",
                        type: "list",
                        member: {
                            shape: "S2f"
                        }
                    }
                }
            }
        },
        ListReservations: {
            http: {
                method: "GET",
                requestUri: "/v1/reservations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Reservations: {
                        locationName: "reservations",
                        type: "list",
                        member: {
                            shape: "S2m"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S38",
                        locationName: "tags"
                    }
                }
            }
        },
        PurchaseOffering: {
            http: {
                requestUri: "/v1/offerings/{offeringArn}",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    OfferingArn: {
                        location: "uri",
                        locationName: "offeringArn"
                    },
                    ReservationName: {
                        locationName: "reservationName"
                    },
                    Start: {
                        locationName: "start"
                    }
                },
                required: [ "OfferingArn", "Start", "ReservationName" ]
            },
            output: {
                type: "structure",
                members: {
                    Reservation: {
                        shape: "S2m",
                        locationName: "reservation"
                    }
                }
            }
        },
        RemoveFlowMediaStream: {
            http: {
                method: "DELETE",
                requestUri: "/v1/flows/{flowArn}/mediaStreams/{mediaStreamName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    MediaStreamName: {
                        location: "uri",
                        locationName: "mediaStreamName"
                    }
                },
                required: [ "FlowArn", "MediaStreamName" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    MediaStreamName: {
                        locationName: "mediaStreamName"
                    }
                }
            }
        },
        RemoveFlowOutput: {
            http: {
                method: "DELETE",
                requestUri: "/v1/flows/{flowArn}/outputs/{outputArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    OutputArn: {
                        location: "uri",
                        locationName: "outputArn"
                    }
                },
                required: [ "FlowArn", "OutputArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    OutputArn: {
                        locationName: "outputArn"
                    }
                }
            }
        },
        RemoveFlowSource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/flows/{flowArn}/source/{sourceArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    SourceArn: {
                        location: "uri",
                        locationName: "sourceArn"
                    }
                },
                required: [ "FlowArn", "SourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    SourceArn: {
                        locationName: "sourceArn"
                    }
                }
            }
        },
        RemoveFlowVpcInterface: {
            http: {
                method: "DELETE",
                requestUri: "/v1/flows/{flowArn}/vpcInterfaces/{vpcInterfaceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    VpcInterfaceName: {
                        location: "uri",
                        locationName: "vpcInterfaceName"
                    }
                },
                required: [ "FlowArn", "VpcInterfaceName" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    NonDeletedNetworkInterfaceIds: {
                        shape: "Sl",
                        locationName: "nonDeletedNetworkInterfaceIds"
                    },
                    VpcInterfaceName: {
                        locationName: "vpcInterfaceName"
                    }
                }
            }
        },
        RevokeFlowEntitlement: {
            http: {
                method: "DELETE",
                requestUri: "/v1/flows/{flowArn}/entitlements/{entitlementArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    EntitlementArn: {
                        location: "uri",
                        locationName: "entitlementArn"
                    },
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    }
                },
                required: [ "FlowArn", "EntitlementArn" ]
            },
            output: {
                type: "structure",
                members: {
                    EntitlementArn: {
                        locationName: "entitlementArn"
                    },
                    FlowArn: {
                        locationName: "flowArn"
                    }
                }
            }
        },
        StartFlow: {
            http: {
                requestUri: "/v1/flows/start/{flowArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    }
                },
                required: [ "FlowArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        StopFlow: {
            http: {
                requestUri: "/v1/flows/stop/{flowArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    }
                },
                required: [ "FlowArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "S38",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn", "Tags" ]
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        shape: "Sl",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateFlow: {
            http: {
                method: "PUT",
                requestUri: "/v1/flows/{flowArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    SourceFailoverConfig: {
                        locationName: "sourceFailoverConfig",
                        type: "structure",
                        members: {
                            FailoverMode: {
                                locationName: "failoverMode"
                            },
                            RecoveryWindow: {
                                locationName: "recoveryWindow",
                                type: "integer"
                            },
                            SourcePriority: {
                                shape: "S21",
                                locationName: "sourcePriority"
                            },
                            State: {
                                locationName: "state"
                            }
                        }
                    }
                },
                required: [ "FlowArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Flow: {
                        shape: "S24",
                        locationName: "flow"
                    }
                }
            }
        },
        UpdateFlowEntitlement: {
            http: {
                method: "PUT",
                requestUri: "/v1/flows/{flowArn}/entitlements/{entitlementArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Description: {
                        locationName: "description"
                    },
                    Encryption: {
                        shape: "S3v",
                        locationName: "encryption"
                    },
                    EntitlementArn: {
                        location: "uri",
                        locationName: "entitlementArn"
                    },
                    EntitlementStatus: {
                        locationName: "entitlementStatus"
                    },
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    Subscribers: {
                        shape: "Sl",
                        locationName: "subscribers"
                    }
                },
                required: [ "FlowArn", "EntitlementArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Entitlement: {
                        shape: "S26",
                        locationName: "entitlement"
                    },
                    FlowArn: {
                        locationName: "flowArn"
                    }
                }
            }
        },
        UpdateFlowMediaStream: {
            http: {
                method: "PUT",
                requestUri: "/v1/flows/{flowArn}/mediaStreams/{mediaStreamName}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S5",
                        locationName: "attributes"
                    },
                    ClockRate: {
                        locationName: "clockRate",
                        type: "integer"
                    },
                    Description: {
                        locationName: "description"
                    },
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    MediaStreamName: {
                        location: "uri",
                        locationName: "mediaStreamName"
                    },
                    MediaStreamType: {
                        locationName: "mediaStreamType"
                    },
                    VideoFormat: {
                        locationName: "videoFormat"
                    }
                },
                required: [ "FlowArn", "MediaStreamName" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    MediaStream: {
                        shape: "Sf",
                        locationName: "mediaStream"
                    }
                }
            }
        },
        UpdateFlowOutput: {
            http: {
                method: "PUT",
                requestUri: "/v1/flows/{flowArn}/outputs/{outputArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    CidrAllowList: {
                        shape: "Sl",
                        locationName: "cidrAllowList"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Destination: {
                        locationName: "destination"
                    },
                    Encryption: {
                        shape: "S3v",
                        locationName: "encryption"
                    },
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    MaxLatency: {
                        locationName: "maxLatency",
                        type: "integer"
                    },
                    MediaStreamOutputConfigurations: {
                        shape: "Sp",
                        locationName: "mediaStreamOutputConfigurations"
                    },
                    MinLatency: {
                        locationName: "minLatency",
                        type: "integer"
                    },
                    OutputArn: {
                        location: "uri",
                        locationName: "outputArn"
                    },
                    Port: {
                        locationName: "port",
                        type: "integer"
                    },
                    Protocol: {
                        locationName: "protocol"
                    },
                    RemoteId: {
                        locationName: "remoteId"
                    },
                    SmoothingLatency: {
                        locationName: "smoothingLatency",
                        type: "integer"
                    },
                    StreamId: {
                        locationName: "streamId"
                    },
                    VpcInterfaceAttachment: {
                        shape: "Sz",
                        locationName: "vpcInterfaceAttachment"
                    }
                },
                required: [ "FlowArn", "OutputArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Output: {
                        shape: "S12",
                        locationName: "output"
                    }
                }
            }
        },
        UpdateFlowSource: {
            http: {
                method: "PUT",
                requestUri: "/v1/flows/{flowArn}/source/{sourceArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Decryption: {
                        shape: "S3v",
                        locationName: "decryption"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EntitlementArn: {
                        locationName: "entitlementArn"
                    },
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    IngestPort: {
                        locationName: "ingestPort",
                        type: "integer"
                    },
                    MaxBitrate: {
                        locationName: "maxBitrate",
                        type: "integer"
                    },
                    MaxLatency: {
                        locationName: "maxLatency",
                        type: "integer"
                    },
                    MaxSyncBuffer: {
                        locationName: "maxSyncBuffer",
                        type: "integer"
                    },
                    MediaStreamSourceConfigurations: {
                        shape: "S1d",
                        locationName: "mediaStreamSourceConfigurations"
                    },
                    MinLatency: {
                        locationName: "minLatency",
                        type: "integer"
                    },
                    Protocol: {
                        locationName: "protocol"
                    },
                    SourceArn: {
                        location: "uri",
                        locationName: "sourceArn"
                    },
                    StreamId: {
                        locationName: "streamId"
                    },
                    VpcInterfaceName: {
                        locationName: "vpcInterfaceName"
                    },
                    WhitelistCidr: {
                        locationName: "whitelistCidr"
                    }
                },
                required: [ "FlowArn", "SourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Source: {
                        shape: "S1j",
                        locationName: "source"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S5",
                        locationName: "attributes"
                    },
                    ClockRate: {
                        locationName: "clockRate",
                        type: "integer"
                    },
                    Description: {
                        locationName: "description"
                    },
                    MediaStreamId: {
                        locationName: "mediaStreamId",
                        type: "integer"
                    },
                    MediaStreamName: {
                        locationName: "mediaStreamName"
                    },
                    MediaStreamType: {
                        locationName: "mediaStreamType"
                    },
                    VideoFormat: {
                        locationName: "videoFormat"
                    }
                },
                required: [ "MediaStreamType", "MediaStreamId", "MediaStreamName" ]
            }
        },
        S5: {
            type: "structure",
            members: {
                Fmtp: {
                    locationName: "fmtp",
                    type: "structure",
                    members: {
                        ChannelOrder: {
                            locationName: "channelOrder"
                        },
                        Colorimetry: {
                            locationName: "colorimetry"
                        },
                        ExactFramerate: {
                            locationName: "exactFramerate"
                        },
                        Par: {
                            locationName: "par"
                        },
                        Range: {
                            locationName: "range"
                        },
                        ScanMode: {
                            locationName: "scanMode"
                        },
                        Tcs: {
                            locationName: "tcs"
                        }
                    }
                },
                Lang: {
                    locationName: "lang"
                }
            }
        },
        Se: {
            type: "list",
            member: {
                shape: "Sf"
            }
        },
        Sf: {
            type: "structure",
            members: {
                Attributes: {
                    locationName: "attributes",
                    type: "structure",
                    members: {
                        Fmtp: {
                            locationName: "fmtp",
                            type: "structure",
                            members: {
                                ChannelOrder: {
                                    locationName: "channelOrder"
                                },
                                Colorimetry: {
                                    locationName: "colorimetry"
                                },
                                ExactFramerate: {
                                    locationName: "exactFramerate"
                                },
                                Par: {
                                    locationName: "par"
                                },
                                Range: {
                                    locationName: "range"
                                },
                                ScanMode: {
                                    locationName: "scanMode"
                                },
                                Tcs: {
                                    locationName: "tcs"
                                }
                            }
                        },
                        Lang: {
                            locationName: "lang"
                        }
                    },
                    required: [ "Fmtp" ]
                },
                ClockRate: {
                    locationName: "clockRate",
                    type: "integer"
                },
                Description: {
                    locationName: "description"
                },
                Fmt: {
                    locationName: "fmt",
                    type: "integer"
                },
                MediaStreamId: {
                    locationName: "mediaStreamId",
                    type: "integer"
                },
                MediaStreamName: {
                    locationName: "mediaStreamName"
                },
                MediaStreamType: {
                    locationName: "mediaStreamType"
                },
                VideoFormat: {
                    locationName: "videoFormat"
                }
            },
            required: [ "MediaStreamType", "MediaStreamId", "MediaStreamName", "Fmt" ]
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    CidrAllowList: {
                        shape: "Sl",
                        locationName: "cidrAllowList"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Destination: {
                        locationName: "destination"
                    },
                    Encryption: {
                        shape: "Sm",
                        locationName: "encryption"
                    },
                    MaxLatency: {
                        locationName: "maxLatency",
                        type: "integer"
                    },
                    MediaStreamOutputConfigurations: {
                        shape: "Sp",
                        locationName: "mediaStreamOutputConfigurations"
                    },
                    MinLatency: {
                        locationName: "minLatency",
                        type: "integer"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Port: {
                        locationName: "port",
                        type: "integer"
                    },
                    Protocol: {
                        locationName: "protocol"
                    },
                    RemoteId: {
                        locationName: "remoteId"
                    },
                    SmoothingLatency: {
                        locationName: "smoothingLatency",
                        type: "integer"
                    },
                    StreamId: {
                        locationName: "streamId"
                    },
                    VpcInterfaceAttachment: {
                        shape: "Sz",
                        locationName: "vpcInterfaceAttachment"
                    }
                },
                required: [ "Protocol" ]
            }
        },
        Sl: {
            type: "list",
            member: {}
        },
        Sm: {
            type: "structure",
            members: {
                Algorithm: {
                    locationName: "algorithm"
                },
                ConstantInitializationVector: {
                    locationName: "constantInitializationVector"
                },
                DeviceId: {
                    locationName: "deviceId"
                },
                KeyType: {
                    locationName: "keyType"
                },
                Region: {
                    locationName: "region"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                RoleArn: {
                    locationName: "roleArn"
                },
                SecretArn: {
                    locationName: "secretArn"
                },
                Url: {
                    locationName: "url"
                }
            },
            required: [ "RoleArn" ]
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DestinationConfigurations: {
                        locationName: "destinationConfigurations",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DestinationIp: {
                                    locationName: "destinationIp"
                                },
                                DestinationPort: {
                                    locationName: "destinationPort",
                                    type: "integer"
                                },
                                Interface: {
                                    shape: "St",
                                    locationName: "interface"
                                }
                            },
                            required: [ "DestinationIp", "DestinationPort", "Interface" ]
                        }
                    },
                    EncodingName: {
                        locationName: "encodingName"
                    },
                    EncodingParameters: {
                        locationName: "encodingParameters",
                        type: "structure",
                        members: {
                            CompressionFactor: {
                                locationName: "compressionFactor",
                                type: "double"
                            },
                            EncoderProfile: {
                                locationName: "encoderProfile"
                            }
                        },
                        required: [ "EncoderProfile", "CompressionFactor" ]
                    },
                    MediaStreamName: {
                        locationName: "mediaStreamName"
                    }
                },
                required: [ "MediaStreamName", "EncodingName" ]
            }
        },
        St: {
            type: "structure",
            members: {
                Name: {
                    locationName: "name"
                }
            },
            required: [ "Name" ]
        },
        Sz: {
            type: "structure",
            members: {
                VpcInterfaceName: {
                    locationName: "vpcInterfaceName"
                }
            }
        },
        S11: {
            type: "list",
            member: {
                shape: "S12"
            }
        },
        S12: {
            type: "structure",
            members: {
                DataTransferSubscriberFeePercent: {
                    locationName: "dataTransferSubscriberFeePercent",
                    type: "integer"
                },
                Description: {
                    locationName: "description"
                },
                Destination: {
                    locationName: "destination"
                },
                Encryption: {
                    shape: "Sm",
                    locationName: "encryption"
                },
                EntitlementArn: {
                    locationName: "entitlementArn"
                },
                ListenerAddress: {
                    locationName: "listenerAddress"
                },
                MediaLiveInputArn: {
                    locationName: "mediaLiveInputArn"
                },
                MediaStreamOutputConfigurations: {
                    locationName: "mediaStreamOutputConfigurations",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            DestinationConfigurations: {
                                locationName: "destinationConfigurations",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        DestinationIp: {
                                            locationName: "destinationIp"
                                        },
                                        DestinationPort: {
                                            locationName: "destinationPort",
                                            type: "integer"
                                        },
                                        Interface: {
                                            shape: "S17",
                                            locationName: "interface"
                                        },
                                        OutboundIp: {
                                            locationName: "outboundIp"
                                        }
                                    },
                                    required: [ "DestinationIp", "DestinationPort", "Interface", "OutboundIp" ]
                                }
                            },
                            EncodingName: {
                                locationName: "encodingName"
                            },
                            EncodingParameters: {
                                locationName: "encodingParameters",
                                type: "structure",
                                members: {
                                    CompressionFactor: {
                                        locationName: "compressionFactor",
                                        type: "double"
                                    },
                                    EncoderProfile: {
                                        locationName: "encoderProfile"
                                    }
                                },
                                required: [ "EncoderProfile", "CompressionFactor" ]
                            },
                            MediaStreamName: {
                                locationName: "mediaStreamName"
                            }
                        },
                        required: [ "MediaStreamName", "EncodingName" ]
                    }
                },
                Name: {
                    locationName: "name"
                },
                OutputArn: {
                    locationName: "outputArn"
                },
                Port: {
                    locationName: "port",
                    type: "integer"
                },
                Transport: {
                    shape: "S19",
                    locationName: "transport"
                },
                VpcInterfaceAttachment: {
                    shape: "Sz",
                    locationName: "vpcInterfaceAttachment"
                }
            },
            required: [ "OutputArn", "Name" ]
        },
        S17: {
            type: "structure",
            members: {
                Name: {
                    locationName: "name"
                }
            },
            required: [ "Name" ]
        },
        S19: {
            type: "structure",
            members: {
                CidrAllowList: {
                    shape: "Sl",
                    locationName: "cidrAllowList"
                },
                MaxBitrate: {
                    locationName: "maxBitrate",
                    type: "integer"
                },
                MaxLatency: {
                    locationName: "maxLatency",
                    type: "integer"
                },
                MaxSyncBuffer: {
                    locationName: "maxSyncBuffer",
                    type: "integer"
                },
                MinLatency: {
                    locationName: "minLatency",
                    type: "integer"
                },
                Protocol: {
                    locationName: "protocol"
                },
                RemoteId: {
                    locationName: "remoteId"
                },
                SmoothingLatency: {
                    locationName: "smoothingLatency",
                    type: "integer"
                },
                StreamId: {
                    locationName: "streamId"
                }
            },
            required: [ "Protocol" ]
        },
        S1b: {
            type: "list",
            member: {
                shape: "S1c"
            }
        },
        S1c: {
            type: "structure",
            members: {
                Decryption: {
                    shape: "Sm",
                    locationName: "decryption"
                },
                Description: {
                    locationName: "description"
                },
                EntitlementArn: {
                    locationName: "entitlementArn"
                },
                IngestPort: {
                    locationName: "ingestPort",
                    type: "integer"
                },
                MaxBitrate: {
                    locationName: "maxBitrate",
                    type: "integer"
                },
                MaxLatency: {
                    locationName: "maxLatency",
                    type: "integer"
                },
                MaxSyncBuffer: {
                    locationName: "maxSyncBuffer",
                    type: "integer"
                },
                MediaStreamSourceConfigurations: {
                    shape: "S1d",
                    locationName: "mediaStreamSourceConfigurations"
                },
                MinLatency: {
                    locationName: "minLatency",
                    type: "integer"
                },
                Name: {
                    locationName: "name"
                },
                Protocol: {
                    locationName: "protocol"
                },
                StreamId: {
                    locationName: "streamId"
                },
                VpcInterfaceName: {
                    locationName: "vpcInterfaceName"
                },
                WhitelistCidr: {
                    locationName: "whitelistCidr"
                }
            }
        },
        S1d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EncodingName: {
                        locationName: "encodingName"
                    },
                    InputConfigurations: {
                        locationName: "inputConfigurations",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InputPort: {
                                    locationName: "inputPort",
                                    type: "integer"
                                },
                                Interface: {
                                    shape: "St",
                                    locationName: "interface"
                                }
                            },
                            required: [ "InputPort", "Interface" ]
                        }
                    },
                    MediaStreamName: {
                        locationName: "mediaStreamName"
                    }
                },
                required: [ "MediaStreamName", "EncodingName" ]
            }
        },
        S1i: {
            type: "list",
            member: {
                shape: "S1j"
            }
        },
        S1j: {
            type: "structure",
            members: {
                DataTransferSubscriberFeePercent: {
                    locationName: "dataTransferSubscriberFeePercent",
                    type: "integer"
                },
                Decryption: {
                    shape: "Sm",
                    locationName: "decryption"
                },
                Description: {
                    locationName: "description"
                },
                EntitlementArn: {
                    locationName: "entitlementArn"
                },
                IngestIp: {
                    locationName: "ingestIp"
                },
                IngestPort: {
                    locationName: "ingestPort",
                    type: "integer"
                },
                MediaStreamSourceConfigurations: {
                    locationName: "mediaStreamSourceConfigurations",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            EncodingName: {
                                locationName: "encodingName"
                            },
                            InputConfigurations: {
                                locationName: "inputConfigurations",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        InputIp: {
                                            locationName: "inputIp"
                                        },
                                        InputPort: {
                                            locationName: "inputPort",
                                            type: "integer"
                                        },
                                        Interface: {
                                            shape: "S17",
                                            locationName: "interface"
                                        }
                                    },
                                    required: [ "InputPort", "InputIp", "Interface" ]
                                }
                            },
                            MediaStreamName: {
                                locationName: "mediaStreamName"
                            }
                        },
                        required: [ "MediaStreamName", "EncodingName" ]
                    }
                },
                Name: {
                    locationName: "name"
                },
                SourceArn: {
                    locationName: "sourceArn"
                },
                Transport: {
                    shape: "S19",
                    locationName: "transport"
                },
                VpcInterfaceName: {
                    locationName: "vpcInterfaceName"
                },
                WhitelistCidr: {
                    locationName: "whitelistCidr"
                }
            },
            required: [ "SourceArn", "Name" ]
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name"
                    },
                    NetworkInterfaceType: {
                        locationName: "networkInterfaceType"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    SecurityGroupIds: {
                        shape: "Sl",
                        locationName: "securityGroupIds"
                    },
                    SubnetId: {
                        locationName: "subnetId"
                    }
                },
                required: [ "SubnetId", "SecurityGroupIds", "RoleArn", "Name" ]
            }
        },
        S1t: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name"
                    },
                    NetworkInterfaceIds: {
                        shape: "Sl",
                        locationName: "networkInterfaceIds"
                    },
                    NetworkInterfaceType: {
                        locationName: "networkInterfaceType"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    SecurityGroupIds: {
                        shape: "Sl",
                        locationName: "securityGroupIds"
                    },
                    SubnetId: {
                        locationName: "subnetId"
                    }
                },
                required: [ "NetworkInterfaceType", "NetworkInterfaceIds", "SubnetId", "SecurityGroupIds", "RoleArn", "Name" ]
            }
        },
        S1w: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DataTransferSubscriberFeePercent: {
                        locationName: "dataTransferSubscriberFeePercent",
                        type: "integer"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Encryption: {
                        shape: "Sm",
                        locationName: "encryption"
                    },
                    EntitlementStatus: {
                        locationName: "entitlementStatus"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Subscribers: {
                        shape: "Sl",
                        locationName: "subscribers"
                    }
                },
                required: [ "Subscribers" ]
            }
        },
        S1z: {
            type: "structure",
            members: {
                FailoverMode: {
                    locationName: "failoverMode"
                },
                RecoveryWindow: {
                    locationName: "recoveryWindow",
                    type: "integer"
                },
                SourcePriority: {
                    shape: "S21",
                    locationName: "sourcePriority"
                },
                State: {
                    locationName: "state"
                }
            }
        },
        S21: {
            type: "structure",
            members: {
                PrimarySource: {
                    locationName: "primarySource"
                }
            }
        },
        S24: {
            type: "structure",
            members: {
                AvailabilityZone: {
                    locationName: "availabilityZone"
                },
                Description: {
                    locationName: "description"
                },
                EgressIp: {
                    locationName: "egressIp"
                },
                Entitlements: {
                    shape: "S25",
                    locationName: "entitlements"
                },
                FlowArn: {
                    locationName: "flowArn"
                },
                MediaStreams: {
                    shape: "Se",
                    locationName: "mediaStreams"
                },
                Name: {
                    locationName: "name"
                },
                Outputs: {
                    shape: "S11",
                    locationName: "outputs"
                },
                Source: {
                    shape: "S1j",
                    locationName: "source"
                },
                SourceFailoverConfig: {
                    shape: "S1z",
                    locationName: "sourceFailoverConfig"
                },
                Sources: {
                    shape: "S1i",
                    locationName: "sources"
                },
                Status: {
                    locationName: "status"
                },
                VpcInterfaces: {
                    shape: "S1t",
                    locationName: "vpcInterfaces"
                }
            },
            required: [ "Status", "Entitlements", "Outputs", "AvailabilityZone", "FlowArn", "Source", "Name" ]
        },
        S25: {
            type: "list",
            member: {
                shape: "S26"
            }
        },
        S26: {
            type: "structure",
            members: {
                DataTransferSubscriberFeePercent: {
                    locationName: "dataTransferSubscriberFeePercent",
                    type: "integer"
                },
                Description: {
                    locationName: "description"
                },
                Encryption: {
                    shape: "Sm",
                    locationName: "encryption"
                },
                EntitlementArn: {
                    locationName: "entitlementArn"
                },
                EntitlementStatus: {
                    locationName: "entitlementStatus"
                },
                Name: {
                    locationName: "name"
                },
                Subscribers: {
                    shape: "Sl",
                    locationName: "subscribers"
                }
            },
            required: [ "EntitlementArn", "Subscribers", "Name" ]
        },
        S2f: {
            type: "structure",
            members: {
                CurrencyCode: {
                    locationName: "currencyCode"
                },
                Duration: {
                    locationName: "duration",
                    type: "integer"
                },
                DurationUnits: {
                    locationName: "durationUnits"
                },
                OfferingArn: {
                    locationName: "offeringArn"
                },
                OfferingDescription: {
                    locationName: "offeringDescription"
                },
                PricePerUnit: {
                    locationName: "pricePerUnit"
                },
                PriceUnits: {
                    locationName: "priceUnits"
                },
                ResourceSpecification: {
                    shape: "S2i",
                    locationName: "resourceSpecification"
                }
            },
            required: [ "CurrencyCode", "OfferingArn", "OfferingDescription", "DurationUnits", "Duration", "PricePerUnit", "ResourceSpecification", "PriceUnits" ]
        },
        S2i: {
            type: "structure",
            members: {
                ReservedBitrate: {
                    locationName: "reservedBitrate",
                    type: "integer"
                },
                ResourceType: {
                    locationName: "resourceType"
                }
            },
            required: [ "ResourceType" ]
        },
        S2m: {
            type: "structure",
            members: {
                CurrencyCode: {
                    locationName: "currencyCode"
                },
                Duration: {
                    locationName: "duration",
                    type: "integer"
                },
                DurationUnits: {
                    locationName: "durationUnits"
                },
                End: {
                    locationName: "end"
                },
                OfferingArn: {
                    locationName: "offeringArn"
                },
                OfferingDescription: {
                    locationName: "offeringDescription"
                },
                PricePerUnit: {
                    locationName: "pricePerUnit"
                },
                PriceUnits: {
                    locationName: "priceUnits"
                },
                ReservationArn: {
                    locationName: "reservationArn"
                },
                ReservationName: {
                    locationName: "reservationName"
                },
                ReservationState: {
                    locationName: "reservationState"
                },
                ResourceSpecification: {
                    shape: "S2i",
                    locationName: "resourceSpecification"
                },
                Start: {
                    locationName: "start"
                }
            },
            required: [ "CurrencyCode", "ReservationState", "OfferingArn", "ReservationArn", "Start", "OfferingDescription", "ReservationName", "End", "Duration", "DurationUnits", "PricePerUnit", "ResourceSpecification", "PriceUnits" ]
        },
        S38: {
            type: "map",
            key: {},
            value: {}
        },
        S3v: {
            type: "structure",
            members: {
                Algorithm: {
                    locationName: "algorithm"
                },
                ConstantInitializationVector: {
                    locationName: "constantInitializationVector"
                },
                DeviceId: {
                    locationName: "deviceId"
                },
                KeyType: {
                    locationName: "keyType"
                },
                Region: {
                    locationName: "region"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                RoleArn: {
                    locationName: "roleArn"
                },
                SecretArn: {
                    locationName: "secretArn"
                },
                Url: {
                    locationName: "url"
                }
            }
        }
    },
    paginators: {
        ListEntitlements: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entitlements"
        },
        ListFlows: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Flows"
        },
        ListOfferings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Offerings"
        },
        ListReservations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Reservations"
        }
    },
    waiters: {
        FlowActive: {
            description: "Wait until a flow is active",
            operation: "DescribeFlow",
            delay: 3,
            maxAttempts: 40,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "Flow.Status",
                expected: "ACTIVE"
            }, {
                state: "retry",
                matcher: "path",
                argument: "Flow.Status",
                expected: "STARTING"
            }, {
                state: "retry",
                matcher: "path",
                argument: "Flow.Status",
                expected: "UPDATING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            }, {
                state: "retry",
                matcher: "status",
                expected: 503
            }, {
                state: "failure",
                matcher: "path",
                argument: "Flow.Status",
                expected: "ERROR"
            } ]
        },
        FlowStandby: {
            description: "Wait until a flow is in standby mode",
            operation: "DescribeFlow",
            delay: 3,
            maxAttempts: 40,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "Flow.Status",
                expected: "STANDBY"
            }, {
                state: "retry",
                matcher: "path",
                argument: "Flow.Status",
                expected: "STOPPING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            }, {
                state: "retry",
                matcher: "status",
                expected: 503
            }, {
                state: "failure",
                matcher: "path",
                argument: "Flow.Status",
                expected: "ERROR"
            } ]
        },
        FlowDeleted: {
            description: "Wait until a flow is deleted",
            operation: "DescribeFlow",
            delay: 3,
            maxAttempts: 40,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 404
            }, {
                state: "retry",
                matcher: "path",
                argument: "Flow.Status",
                expected: "DELETING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            }, {
                state: "retry",
                matcher: "status",
                expected: 503
            }, {
                state: "failure",
                matcher: "path",
                argument: "Flow.Status",
                expected: "ERROR"
            } ]
        }
    }
};

AWS.apiLoader.services["fsx"] = {};

AWS.FSx = AWS.Service.defineService("fsx", [ "2018-03-01" ]);

AWS.apiLoader.services["fsx"]["2018-03-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-03-01",
        endpointPrefix: "fsx",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon FSx",
        serviceId: "FSx",
        signatureVersion: "v4",
        signingName: "fsx",
        targetPrefix: "AWSSimbaAPIService_v20180301",
        uid: "fsx-2018-03-01"
    },
    operations: {
        AssociateFileSystemAliases: {
            input: {
                type: "structure",
                required: [ "FileSystemId", "Aliases" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    FileSystemId: {},
                    Aliases: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Aliases: {
                        shape: "S7"
                    }
                }
            }
        },
        CancelDataRepositoryTask: {
            input: {
                type: "structure",
                required: [ "TaskId" ],
                members: {
                    TaskId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Lifecycle: {},
                    TaskId: {}
                }
            },
            idempotent: true
        },
        CopyBackup: {
            input: {
                type: "structure",
                required: [ "SourceBackupId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    SourceBackupId: {},
                    SourceRegion: {},
                    KmsKeyId: {},
                    CopyTags: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Backup: {
                        shape: "So"
                    }
                }
            },
            idempotent: true
        },
        CreateBackup: {
            input: {
                type: "structure",
                members: {
                    FileSystemId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sj"
                    },
                    VolumeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Backup: {
                        shape: "So"
                    }
                }
            },
            idempotent: true
        },
        CreateDataRepositoryTask: {
            input: {
                type: "structure",
                required: [ "Type", "FileSystemId", "Report" ],
                members: {
                    Type: {},
                    Paths: {
                        shape: "S39"
                    },
                    FileSystemId: {},
                    Report: {
                        shape: "S3b"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataRepositoryTask: {
                        shape: "S3f"
                    }
                }
            },
            idempotent: true
        },
        CreateFileSystem: {
            input: {
                type: "structure",
                required: [ "FileSystemType", "StorageCapacity", "SubnetIds" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    FileSystemType: {},
                    StorageCapacity: {
                        type: "integer"
                    },
                    StorageType: {},
                    SubnetIds: {
                        shape: "S15"
                    },
                    SecurityGroupIds: {
                        shape: "S3p"
                    },
                    Tags: {
                        shape: "Sj"
                    },
                    KmsKeyId: {},
                    WindowsConfiguration: {
                        shape: "S3r"
                    },
                    LustreConfiguration: {
                        shape: "S3v"
                    },
                    OntapConfiguration: {
                        type: "structure",
                        required: [ "DeploymentType", "ThroughputCapacity" ],
                        members: {
                            AutomaticBackupRetentionDays: {
                                type: "integer"
                            },
                            DailyAutomaticBackupStartTime: {},
                            DeploymentType: {},
                            EndpointIpAddressRange: {},
                            FsxAdminPassword: {
                                shape: "S3x"
                            },
                            DiskIopsConfiguration: {
                                shape: "S2y"
                            },
                            PreferredSubnetId: {},
                            RouteTableIds: {
                                shape: "S31"
                            },
                            ThroughputCapacity: {
                                type: "integer"
                            },
                            WeeklyMaintenanceStartTime: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystem: {
                        shape: "Sx"
                    }
                }
            }
        },
        CreateFileSystemFromBackup: {
            input: {
                type: "structure",
                required: [ "BackupId", "SubnetIds" ],
                members: {
                    BackupId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    SubnetIds: {
                        shape: "S15"
                    },
                    SecurityGroupIds: {
                        shape: "S3p"
                    },
                    Tags: {
                        shape: "Sj"
                    },
                    WindowsConfiguration: {
                        shape: "S3r"
                    },
                    LustreConfiguration: {
                        shape: "S3v"
                    },
                    StorageType: {},
                    KmsKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystem: {
                        shape: "Sx"
                    }
                }
            }
        },
        CreateStorageVirtualMachine: {
            input: {
                type: "structure",
                required: [ "FileSystemId", "Name" ],
                members: {
                    ActiveDirectoryConfiguration: {
                        type: "structure",
                        required: [ "NetBiosName" ],
                        members: {
                            NetBiosName: {},
                            SelfManagedActiveDirectoryConfiguration: {
                                shape: "S3s"
                            }
                        }
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    FileSystemId: {},
                    Name: {},
                    SvmAdminPassword: {
                        shape: "S3x"
                    },
                    Tags: {
                        shape: "Sj"
                    },
                    RootVolumeSecurityStyle: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageVirtualMachine: {
                        shape: "S47"
                    }
                }
            }
        },
        CreateVolume: {
            input: {
                type: "structure",
                required: [ "VolumeType", "Name" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeType: {},
                    Name: {},
                    OntapConfiguration: {
                        shape: "S4e"
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Volume: {
                        shape: "S2b"
                    }
                }
            }
        },
        CreateVolumeFromBackup: {
            input: {
                type: "structure",
                required: [ "BackupId", "Name" ],
                members: {
                    BackupId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Name: {},
                    OntapConfiguration: {
                        shape: "S4e"
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Volume: {
                        shape: "S2b"
                    }
                }
            }
        },
        DeleteBackup: {
            input: {
                type: "structure",
                required: [ "BackupId" ],
                members: {
                    BackupId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupId: {},
                    Lifecycle: {}
                }
            },
            idempotent: true
        },
        DeleteFileSystem: {
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    FileSystemId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    WindowsConfiguration: {
                        type: "structure",
                        members: {
                            SkipFinalBackup: {
                                type: "boolean"
                            },
                            FinalBackupTags: {
                                shape: "Sj"
                            }
                        }
                    },
                    LustreConfiguration: {
                        type: "structure",
                        members: {
                            SkipFinalBackup: {
                                type: "boolean"
                            },
                            FinalBackupTags: {
                                shape: "Sj"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystemId: {},
                    Lifecycle: {},
                    WindowsResponse: {
                        type: "structure",
                        members: {
                            FinalBackupId: {},
                            FinalBackupTags: {
                                shape: "Sj"
                            }
                        }
                    },
                    LustreResponse: {
                        type: "structure",
                        members: {
                            FinalBackupId: {},
                            FinalBackupTags: {
                                shape: "Sj"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DeleteStorageVirtualMachine: {
            input: {
                type: "structure",
                required: [ "StorageVirtualMachineId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    StorageVirtualMachineId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageVirtualMachineId: {},
                    Lifecycle: {}
                }
            }
        },
        DeleteVolume: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeId: {},
                    OntapConfiguration: {
                        type: "structure",
                        members: {
                            SkipFinalBackup: {
                                type: "boolean"
                            },
                            FinalBackupTags: {
                                shape: "Sj"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeId: {},
                    Lifecycle: {},
                    OntapResponse: {
                        type: "structure",
                        members: {
                            FinalBackupId: {},
                            FinalBackupTags: {
                                shape: "Sj"
                            }
                        }
                    }
                }
            }
        },
        DescribeBackups: {
            input: {
                type: "structure",
                members: {
                    BackupIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Backups: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeDataRepositoryTasks: {
            input: {
                type: "structure",
                members: {
                    TaskIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataRepositoryTasks: {
                        type: "list",
                        member: {
                            shape: "S3f"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeFileSystemAliases: {
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    FileSystemId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Aliases: {
                        shape: "S7"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeFileSystems: {
            input: {
                type: "structure",
                members: {
                    FileSystemIds: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystems: {
                        type: "list",
                        member: {
                            shape: "Sx"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeStorageVirtualMachines: {
            input: {
                type: "structure",
                members: {
                    StorageVirtualMachineIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageVirtualMachines: {
                        type: "list",
                        member: {
                            shape: "S47"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeVolumes: {
            input: {
                type: "structure",
                members: {
                    VolumeIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Volumes: {
                        type: "list",
                        member: {
                            shape: "S2b"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisassociateFileSystemAliases: {
            input: {
                type: "structure",
                required: [ "FileSystemId", "Aliases" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    FileSystemId: {},
                    Aliases: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Aliases: {
                        shape: "S7"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sj"
                    },
                    NextToken: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateFileSystem: {
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    FileSystemId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    StorageCapacity: {
                        type: "integer"
                    },
                    WindowsConfiguration: {
                        type: "structure",
                        members: {
                            WeeklyMaintenanceStartTime: {},
                            DailyAutomaticBackupStartTime: {},
                            AutomaticBackupRetentionDays: {
                                type: "integer"
                            },
                            ThroughputCapacity: {
                                type: "integer"
                            },
                            SelfManagedActiveDirectoryConfiguration: {
                                shape: "S6f"
                            },
                            AuditLogConfiguration: {
                                shape: "S3u"
                            }
                        }
                    },
                    LustreConfiguration: {
                        type: "structure",
                        members: {
                            WeeklyMaintenanceStartTime: {},
                            DailyAutomaticBackupStartTime: {},
                            AutomaticBackupRetentionDays: {
                                type: "integer"
                            },
                            AutoImportPolicy: {},
                            DataCompressionType: {}
                        }
                    },
                    OntapConfiguration: {
                        type: "structure",
                        members: {
                            AutomaticBackupRetentionDays: {
                                type: "integer"
                            },
                            DailyAutomaticBackupStartTime: {},
                            FsxAdminPassword: {
                                shape: "S3x"
                            },
                            WeeklyMaintenanceStartTime: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystem: {
                        shape: "Sx"
                    }
                }
            }
        },
        UpdateStorageVirtualMachine: {
            input: {
                type: "structure",
                required: [ "StorageVirtualMachineId" ],
                members: {
                    ActiveDirectoryConfiguration: {
                        type: "structure",
                        members: {
                            SelfManagedActiveDirectoryConfiguration: {
                                shape: "S6f"
                            }
                        }
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    StorageVirtualMachineId: {},
                    SvmAdminPassword: {
                        shape: "S3x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageVirtualMachine: {
                        shape: "S47"
                    }
                }
            }
        },
        UpdateVolume: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeId: {},
                    OntapConfiguration: {
                        type: "structure",
                        members: {
                            JunctionPath: {},
                            SecurityStyle: {},
                            SizeInMegabytes: {
                                type: "integer"
                            },
                            StorageEfficiencyEnabled: {
                                type: "boolean"
                            },
                            TieringPolicy: {
                                shape: "S2k"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Volume: {
                        shape: "S2b"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {}
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Lifecycle: {}
                }
            }
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        So: {
            type: "structure",
            required: [ "BackupId", "Lifecycle", "Type", "CreationTime", "FileSystem" ],
            members: {
                BackupId: {},
                Lifecycle: {},
                FailureDetails: {
                    type: "structure",
                    members: {
                        Message: {}
                    }
                },
                Type: {},
                ProgressPercent: {
                    type: "integer"
                },
                CreationTime: {
                    type: "timestamp"
                },
                KmsKeyId: {},
                ResourceARN: {},
                Tags: {
                    shape: "Sj"
                },
                FileSystem: {
                    shape: "Sx"
                },
                DirectoryInformation: {
                    type: "structure",
                    members: {
                        DomainName: {},
                        ActiveDirectoryId: {},
                        ResourceARN: {}
                    }
                },
                OwnerId: {},
                SourceBackupId: {},
                SourceBackupRegion: {},
                ResourceType: {},
                Volume: {
                    shape: "S2b"
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                OwnerId: {},
                CreationTime: {
                    type: "timestamp"
                },
                FileSystemId: {},
                FileSystemType: {},
                Lifecycle: {},
                FailureDetails: {
                    type: "structure",
                    members: {
                        Message: {}
                    }
                },
                StorageCapacity: {
                    type: "integer"
                },
                StorageType: {},
                VpcId: {},
                SubnetIds: {
                    shape: "S15"
                },
                NetworkInterfaceIds: {
                    type: "list",
                    member: {}
                },
                DNSName: {},
                KmsKeyId: {},
                ResourceARN: {},
                Tags: {
                    shape: "Sj"
                },
                WindowsConfiguration: {
                    type: "structure",
                    members: {
                        ActiveDirectoryId: {},
                        SelfManagedActiveDirectoryConfiguration: {
                            shape: "S1c"
                        },
                        DeploymentType: {},
                        RemoteAdministrationEndpoint: {},
                        PreferredSubnetId: {},
                        PreferredFileServerIp: {},
                        ThroughputCapacity: {
                            type: "integer"
                        },
                        MaintenanceOperationsInProgress: {
                            type: "list",
                            member: {}
                        },
                        WeeklyMaintenanceStartTime: {},
                        DailyAutomaticBackupStartTime: {},
                        AutomaticBackupRetentionDays: {
                            type: "integer"
                        },
                        CopyTagsToBackups: {
                            type: "boolean"
                        },
                        Aliases: {
                            shape: "S7"
                        },
                        AuditLogConfiguration: {
                            type: "structure",
                            required: [ "FileAccessAuditLogLevel", "FileShareAccessAuditLogLevel" ],
                            members: {
                                FileAccessAuditLogLevel: {},
                                FileShareAccessAuditLogLevel: {},
                                AuditLogDestination: {}
                            }
                        }
                    }
                },
                LustreConfiguration: {
                    type: "structure",
                    members: {
                        WeeklyMaintenanceStartTime: {},
                        DataRepositoryConfiguration: {
                            type: "structure",
                            members: {
                                Lifecycle: {},
                                ImportPath: {},
                                ExportPath: {},
                                ImportedFileChunkSize: {
                                    type: "integer"
                                },
                                AutoImportPolicy: {},
                                FailureDetails: {
                                    type: "structure",
                                    members: {
                                        Message: {}
                                    }
                                }
                            }
                        },
                        DeploymentType: {},
                        PerUnitStorageThroughput: {
                            type: "integer"
                        },
                        MountName: {},
                        DailyAutomaticBackupStartTime: {},
                        AutomaticBackupRetentionDays: {
                            type: "integer"
                        },
                        CopyTagsToBackups: {
                            type: "boolean"
                        },
                        DriveCacheType: {},
                        DataCompressionType: {}
                    }
                },
                AdministrativeActions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            AdministrativeActionType: {},
                            ProgressPercent: {
                                type: "integer"
                            },
                            RequestTime: {
                                type: "timestamp"
                            },
                            Status: {},
                            TargetFileSystemValues: {
                                shape: "Sx"
                            },
                            FailureDetails: {
                                type: "structure",
                                members: {
                                    Message: {}
                                }
                            },
                            TargetVolumeValues: {
                                shape: "S2b"
                            }
                        }
                    }
                },
                OntapConfiguration: {
                    type: "structure",
                    members: {
                        AutomaticBackupRetentionDays: {
                            type: "integer"
                        },
                        DailyAutomaticBackupStartTime: {},
                        DeploymentType: {},
                        EndpointIpAddressRange: {},
                        Endpoints: {
                            type: "structure",
                            members: {
                                Intercluster: {
                                    shape: "S2w"
                                },
                                Management: {
                                    shape: "S2w"
                                }
                            }
                        },
                        DiskIopsConfiguration: {
                            shape: "S2y"
                        },
                        PreferredSubnetId: {},
                        RouteTableIds: {
                            shape: "S31"
                        },
                        ThroughputCapacity: {
                            type: "integer"
                        },
                        WeeklyMaintenanceStartTime: {}
                    }
                }
            }
        },
        S15: {
            type: "list",
            member: {}
        },
        S1c: {
            type: "structure",
            members: {
                DomainName: {},
                OrganizationalUnitDistinguishedName: {},
                FileSystemAdministratorsGroup: {},
                UserName: {},
                DnsIps: {
                    shape: "S1h"
                }
            }
        },
        S1h: {
            type: "list",
            member: {}
        },
        S2b: {
            type: "structure",
            members: {
                CreationTime: {
                    type: "timestamp"
                },
                FileSystemId: {},
                Lifecycle: {},
                Name: {},
                OntapConfiguration: {
                    type: "structure",
                    members: {
                        FlexCacheEndpointType: {},
                        JunctionPath: {},
                        SecurityStyle: {},
                        SizeInMegabytes: {
                            type: "integer"
                        },
                        StorageEfficiencyEnabled: {
                            type: "boolean"
                        },
                        StorageVirtualMachineId: {},
                        StorageVirtualMachineRoot: {
                            type: "boolean"
                        },
                        TieringPolicy: {
                            shape: "S2k"
                        },
                        UUID: {},
                        OntapVolumeType: {}
                    }
                },
                ResourceARN: {},
                Tags: {
                    shape: "Sj"
                },
                VolumeId: {},
                VolumeType: {},
                LifecycleTransitionReason: {
                    shape: "S2r"
                }
            }
        },
        S2k: {
            type: "structure",
            members: {
                CoolingPeriod: {
                    type: "integer"
                },
                Name: {}
            }
        },
        S2r: {
            type: "structure",
            members: {
                Message: {}
            }
        },
        S2w: {
            type: "structure",
            members: {
                DNSName: {},
                IpAddresses: {
                    shape: "S2x"
                }
            }
        },
        S2x: {
            type: "list",
            member: {}
        },
        S2y: {
            type: "structure",
            members: {
                Mode: {},
                Iops: {
                    type: "long"
                }
            }
        },
        S31: {
            type: "list",
            member: {}
        },
        S39: {
            type: "list",
            member: {}
        },
        S3b: {
            type: "structure",
            required: [ "Enabled" ],
            members: {
                Enabled: {
                    type: "boolean"
                },
                Path: {},
                Format: {},
                Scope: {}
            }
        },
        S3f: {
            type: "structure",
            required: [ "TaskId", "Lifecycle", "Type", "CreationTime", "FileSystemId" ],
            members: {
                TaskId: {},
                Lifecycle: {},
                Type: {},
                CreationTime: {
                    type: "timestamp"
                },
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                ResourceARN: {},
                Tags: {
                    shape: "Sj"
                },
                FileSystemId: {},
                Paths: {
                    shape: "S39"
                },
                FailureDetails: {
                    type: "structure",
                    members: {
                        Message: {}
                    }
                },
                Status: {
                    type: "structure",
                    members: {
                        TotalCount: {
                            type: "long"
                        },
                        SucceededCount: {
                            type: "long"
                        },
                        FailedCount: {
                            type: "long"
                        },
                        LastUpdatedTime: {
                            type: "timestamp"
                        }
                    }
                },
                Report: {
                    shape: "S3b"
                }
            }
        },
        S3p: {
            type: "list",
            member: {}
        },
        S3r: {
            type: "structure",
            required: [ "ThroughputCapacity" ],
            members: {
                ActiveDirectoryId: {},
                SelfManagedActiveDirectoryConfiguration: {
                    shape: "S3s"
                },
                DeploymentType: {},
                PreferredSubnetId: {},
                ThroughputCapacity: {
                    type: "integer"
                },
                WeeklyMaintenanceStartTime: {},
                DailyAutomaticBackupStartTime: {},
                AutomaticBackupRetentionDays: {
                    type: "integer"
                },
                CopyTagsToBackups: {
                    type: "boolean"
                },
                Aliases: {
                    shape: "S4"
                },
                AuditLogConfiguration: {
                    shape: "S3u"
                }
            }
        },
        S3s: {
            type: "structure",
            required: [ "DomainName", "UserName", "Password", "DnsIps" ],
            members: {
                DomainName: {},
                OrganizationalUnitDistinguishedName: {},
                FileSystemAdministratorsGroup: {},
                UserName: {},
                Password: {
                    shape: "S3t"
                },
                DnsIps: {
                    shape: "S1h"
                }
            }
        },
        S3t: {
            type: "string",
            sensitive: true
        },
        S3u: {
            type: "structure",
            required: [ "FileAccessAuditLogLevel", "FileShareAccessAuditLogLevel" ],
            members: {
                FileAccessAuditLogLevel: {},
                FileShareAccessAuditLogLevel: {},
                AuditLogDestination: {}
            }
        },
        S3v: {
            type: "structure",
            members: {
                WeeklyMaintenanceStartTime: {},
                ImportPath: {},
                ExportPath: {},
                ImportedFileChunkSize: {
                    type: "integer"
                },
                DeploymentType: {},
                AutoImportPolicy: {},
                PerUnitStorageThroughput: {
                    type: "integer"
                },
                DailyAutomaticBackupStartTime: {},
                AutomaticBackupRetentionDays: {
                    type: "integer"
                },
                CopyTagsToBackups: {
                    type: "boolean"
                },
                DriveCacheType: {},
                DataCompressionType: {}
            }
        },
        S3x: {
            type: "string",
            sensitive: true
        },
        S47: {
            type: "structure",
            members: {
                ActiveDirectoryConfiguration: {
                    type: "structure",
                    members: {
                        NetBiosName: {},
                        SelfManagedActiveDirectoryConfiguration: {
                            shape: "S1c"
                        }
                    }
                },
                CreationTime: {
                    type: "timestamp"
                },
                Endpoints: {
                    type: "structure",
                    members: {
                        Iscsi: {
                            shape: "S4a"
                        },
                        Management: {
                            shape: "S4a"
                        },
                        Nfs: {
                            shape: "S4a"
                        },
                        Smb: {
                            shape: "S4a"
                        }
                    }
                },
                FileSystemId: {},
                Lifecycle: {},
                Name: {},
                ResourceARN: {},
                StorageVirtualMachineId: {},
                Subtype: {},
                UUID: {},
                Tags: {
                    shape: "Sj"
                },
                LifecycleTransitionReason: {
                    shape: "S2r"
                },
                RootVolumeSecurityStyle: {}
            }
        },
        S4a: {
            type: "structure",
            members: {
                DNSName: {},
                IpAddresses: {
                    shape: "S2x"
                }
            }
        },
        S4e: {
            type: "structure",
            required: [ "JunctionPath", "SizeInMegabytes", "StorageEfficiencyEnabled", "StorageVirtualMachineId" ],
            members: {
                JunctionPath: {},
                SecurityStyle: {},
                SizeInMegabytes: {
                    type: "integer"
                },
                StorageEfficiencyEnabled: {
                    type: "boolean"
                },
                StorageVirtualMachineId: {},
                TieringPolicy: {
                    shape: "S2k"
                }
            }
        },
        S6f: {
            type: "structure",
            members: {
                UserName: {},
                Password: {
                    shape: "S3t"
                },
                DnsIps: {
                    shape: "S1h"
                }
            }
        }
    },
    paginators: {
        DescribeBackups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeDataRepositoryTasks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeFileSystemAliases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeFileSystems: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeStorageVirtualMachines: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeVolumes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["securityhub"] = {};

AWS.SecurityHub = AWS.Service.defineService("securityhub", [ "2018-10-26" ]);

AWS.apiLoader.services["securityhub"]["2018-10-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-10-26",
        endpointPrefix: "securityhub",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS SecurityHub",
        serviceId: "SecurityHub",
        signatureVersion: "v4",
        signingName: "securityhub",
        uid: "securityhub-2018-10-26"
    },
    operations: {
        AcceptAdministratorInvitation: {
            http: {
                requestUri: "/administrator"
            },
            input: {
                type: "structure",
                required: [ "AdministratorId", "InvitationId" ],
                members: {
                    AdministratorId: {},
                    InvitationId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AcceptInvitation: {
            http: {
                requestUri: "/master"
            },
            input: {
                type: "structure",
                required: [ "MasterId", "InvitationId" ],
                members: {
                    MasterId: {},
                    InvitationId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "This API has been deprecated, use AcceptAdministratorInvitation API instead."
        },
        BatchDisableStandards: {
            http: {
                requestUri: "/standards/deregister"
            },
            input: {
                type: "structure",
                required: [ "StandardsSubscriptionArns" ],
                members: {
                    StandardsSubscriptionArns: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StandardsSubscriptions: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchEnableStandards: {
            http: {
                requestUri: "/standards/register"
            },
            input: {
                type: "structure",
                required: [ "StandardsSubscriptionRequests" ],
                members: {
                    StandardsSubscriptionRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "StandardsArn" ],
                            members: {
                                StandardsArn: {},
                                StandardsInput: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StandardsSubscriptions: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchImportFindings: {
            http: {
                requestUri: "/findings/import"
            },
            input: {
                type: "structure",
                required: [ "Findings" ],
                members: {
                    Findings: {
                        type: "list",
                        member: {
                            shape: "Sj"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FailedCount", "SuccessCount" ],
                members: {
                    FailedCount: {
                        type: "integer"
                    },
                    SuccessCount: {
                        type: "integer"
                    },
                    FailedFindings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "ErrorCode", "ErrorMessage" ],
                            members: {
                                Id: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchUpdateFindings: {
            http: {
                method: "PATCH",
                requestUri: "/findings/batchupdate"
            },
            input: {
                type: "structure",
                required: [ "FindingIdentifiers" ],
                members: {
                    FindingIdentifiers: {
                        shape: "Sdt"
                    },
                    Note: {
                        shape: "Sdv"
                    },
                    Severity: {
                        type: "structure",
                        members: {
                            Normalized: {
                                type: "integer"
                            },
                            Product: {
                                type: "double"
                            },
                            Label: {}
                        }
                    },
                    VerificationState: {},
                    Confidence: {
                        type: "integer"
                    },
                    Criticality: {
                        type: "integer"
                    },
                    Types: {
                        shape: "Sk"
                    },
                    UserDefinedFields: {
                        shape: "Sr"
                    },
                    Workflow: {
                        type: "structure",
                        members: {
                            Status: {}
                        }
                    },
                    RelatedFindings: {
                        shape: "Sct"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProcessedFindings", "UnprocessedFindings" ],
                members: {
                    ProcessedFindings: {
                        shape: "Sdt"
                    },
                    UnprocessedFindings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FindingIdentifier", "ErrorCode", "ErrorMessage" ],
                            members: {
                                FindingIdentifier: {
                                    shape: "Sdu"
                                },
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        CreateActionTarget: {
            http: {
                requestUri: "/actionTargets"
            },
            input: {
                type: "structure",
                required: [ "Name", "Description", "Id" ],
                members: {
                    Name: {},
                    Description: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ActionTargetArn" ],
                members: {
                    ActionTargetArn: {}
                }
            }
        },
        CreateInsight: {
            http: {
                requestUri: "/insights"
            },
            input: {
                type: "structure",
                required: [ "Name", "Filters", "GroupByAttribute" ],
                members: {
                    Name: {},
                    Filters: {
                        shape: "Se4"
                    },
                    GroupByAttribute: {}
                }
            },
            output: {
                type: "structure",
                required: [ "InsightArn" ],
                members: {
                    InsightArn: {}
                }
            }
        },
        CreateMembers: {
            http: {
                requestUri: "/members"
            },
            input: {
                type: "structure",
                required: [ "AccountDetails" ],
                members: {
                    AccountDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AccountId" ],
                            members: {
                                AccountId: {},
                                Email: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedAccounts: {
                        shape: "Ser"
                    }
                }
            }
        },
        DeclineInvitations: {
            http: {
                requestUri: "/invitations/decline"
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "Seu"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedAccounts: {
                        shape: "Ser"
                    }
                }
            }
        },
        DeleteActionTarget: {
            http: {
                method: "DELETE",
                requestUri: "/actionTargets/{ActionTargetArn+}"
            },
            input: {
                type: "structure",
                required: [ "ActionTargetArn" ],
                members: {
                    ActionTargetArn: {
                        location: "uri",
                        locationName: "ActionTargetArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ActionTargetArn" ],
                members: {
                    ActionTargetArn: {}
                }
            }
        },
        DeleteInsight: {
            http: {
                method: "DELETE",
                requestUri: "/insights/{InsightArn+}"
            },
            input: {
                type: "structure",
                required: [ "InsightArn" ],
                members: {
                    InsightArn: {
                        location: "uri",
                        locationName: "InsightArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "InsightArn" ],
                members: {
                    InsightArn: {}
                }
            }
        },
        DeleteInvitations: {
            http: {
                requestUri: "/invitations/delete"
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "Seu"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedAccounts: {
                        shape: "Ser"
                    }
                }
            }
        },
        DeleteMembers: {
            http: {
                requestUri: "/members/delete"
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "Seu"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedAccounts: {
                        shape: "Ser"
                    }
                }
            }
        },
        DescribeActionTargets: {
            http: {
                requestUri: "/actionTargets/get"
            },
            input: {
                type: "structure",
                members: {
                    ActionTargetArns: {
                        shape: "Sf5"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ActionTargets" ],
                members: {
                    ActionTargets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ActionTargetArn", "Name", "Description" ],
                            members: {
                                ActionTargetArn: {},
                                Name: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeHub: {
            http: {
                method: "GET",
                requestUri: "/accounts"
            },
            input: {
                type: "structure",
                members: {
                    HubArn: {
                        location: "querystring",
                        locationName: "HubArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HubArn: {},
                    SubscribedAt: {},
                    AutoEnableControls: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeOrganizationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/organization/configuration"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AutoEnable: {
                        type: "boolean"
                    },
                    MemberAccountLimitReached: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeProducts: {
            http: {
                method: "GET",
                requestUri: "/products"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    ProductArn: {
                        location: "querystring",
                        locationName: "ProductArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Products" ],
                members: {
                    Products: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ProductArn" ],
                            members: {
                                ProductArn: {},
                                ProductName: {},
                                CompanyName: {},
                                Description: {},
                                Categories: {
                                    type: "list",
                                    member: {}
                                },
                                IntegrationTypes: {
                                    type: "list",
                                    member: {}
                                },
                                MarketplaceUrl: {},
                                ActivationUrl: {},
                                ProductSubscriptionResourcePolicy: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeStandards: {
            http: {
                method: "GET",
                requestUri: "/standards"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Standards: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StandardsArn: {},
                                Name: {},
                                Description: {},
                                EnabledByDefault: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeStandardsControls: {
            http: {
                method: "GET",
                requestUri: "/standards/controls/{StandardsSubscriptionArn+}"
            },
            input: {
                type: "structure",
                required: [ "StandardsSubscriptionArn" ],
                members: {
                    StandardsSubscriptionArn: {
                        location: "uri",
                        locationName: "StandardsSubscriptionArn"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Controls: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StandardsControlArn: {},
                                ControlStatus: {},
                                DisabledReason: {},
                                ControlStatusUpdatedAt: {
                                    shape: "Sfv"
                                },
                                ControlId: {},
                                Title: {},
                                Description: {},
                                RemediationUrl: {},
                                SeverityRating: {},
                                RelatedRequirements: {
                                    shape: "Scl"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisableImportFindingsForProduct: {
            http: {
                method: "DELETE",
                requestUri: "/productSubscriptions/{ProductSubscriptionArn+}"
            },
            input: {
                type: "structure",
                required: [ "ProductSubscriptionArn" ],
                members: {
                    ProductSubscriptionArn: {
                        location: "uri",
                        locationName: "ProductSubscriptionArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableOrganizationAdminAccount: {
            http: {
                requestUri: "/organization/admin/disable"
            },
            input: {
                type: "structure",
                required: [ "AdminAccountId" ],
                members: {
                    AdminAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableSecurityHub: {
            http: {
                method: "DELETE",
                requestUri: "/accounts"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFromAdministratorAccount: {
            http: {
                requestUri: "/administrator/disassociate"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFromMasterAccount: {
            http: {
                requestUri: "/master/disassociate"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "This API has been deprecated, use DisassociateFromAdministratorAccount API instead."
        },
        DisassociateMembers: {
            http: {
                requestUri: "/members/disassociate"
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "Seu"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableImportFindingsForProduct: {
            http: {
                requestUri: "/productSubscriptions"
            },
            input: {
                type: "structure",
                required: [ "ProductArn" ],
                members: {
                    ProductArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProductSubscriptionArn: {}
                }
            }
        },
        EnableOrganizationAdminAccount: {
            http: {
                requestUri: "/organization/admin/enable"
            },
            input: {
                type: "structure",
                required: [ "AdminAccountId" ],
                members: {
                    AdminAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableSecurityHub: {
            http: {
                requestUri: "/accounts"
            },
            input: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sge"
                    },
                    EnableDefaultStandards: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAdministratorAccount: {
            http: {
                method: "GET",
                requestUri: "/administrator"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Administrator: {
                        shape: "Sgk"
                    }
                }
            }
        },
        GetEnabledStandards: {
            http: {
                requestUri: "/standards/get"
            },
            input: {
                type: "structure",
                members: {
                    StandardsSubscriptionArns: {
                        shape: "S7"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StandardsSubscriptions: {
                        shape: "S9"
                    },
                    NextToken: {}
                }
            }
        },
        GetFindings: {
            http: {
                requestUri: "/findings"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "Se4"
                    },
                    SortCriteria: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Field: {},
                                SortOrder: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Findings" ],
                members: {
                    Findings: {
                        type: "list",
                        member: {
                            shape: "Sj"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetInsightResults: {
            http: {
                method: "GET",
                requestUri: "/insights/results/{InsightArn+}"
            },
            input: {
                type: "structure",
                required: [ "InsightArn" ],
                members: {
                    InsightArn: {
                        location: "uri",
                        locationName: "InsightArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "InsightResults" ],
                members: {
                    InsightResults: {
                        type: "structure",
                        required: [ "InsightArn", "GroupByAttribute", "ResultValues" ],
                        members: {
                            InsightArn: {},
                            GroupByAttribute: {},
                            ResultValues: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "GroupByAttributeValue", "Count" ],
                                    members: {
                                        GroupByAttributeValue: {},
                                        Count: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetInsights: {
            http: {
                requestUri: "/insights/get"
            },
            input: {
                type: "structure",
                members: {
                    InsightArns: {
                        shape: "Sf5"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Insights" ],
                members: {
                    Insights: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "InsightArn", "Name", "Filters", "GroupByAttribute" ],
                            members: {
                                InsightArn: {},
                                Name: {},
                                Filters: {
                                    shape: "Se4"
                                },
                                GroupByAttribute: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetInvitationsCount: {
            http: {
                method: "GET",
                requestUri: "/invitations/count"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    InvitationsCount: {
                        type: "integer"
                    }
                }
            }
        },
        GetMasterAccount: {
            http: {
                method: "GET",
                requestUri: "/master"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Master: {
                        shape: "Sgk"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This API has been deprecated, use GetAdministratorAccount API instead."
        },
        GetMembers: {
            http: {
                requestUri: "/members/get"
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "Seu"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Members: {
                        shape: "Sh8"
                    },
                    UnprocessedAccounts: {
                        shape: "Ser"
                    }
                }
            }
        },
        InviteMembers: {
            http: {
                requestUri: "/members/invite"
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "Seu"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedAccounts: {
                        shape: "Ser"
                    }
                }
            }
        },
        ListEnabledProductsForImport: {
            http: {
                method: "GET",
                requestUri: "/productSubscriptions"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProductSubscriptions: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListInvitations: {
            http: {
                method: "GET",
                requestUri: "/invitations"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Invitations: {
                        type: "list",
                        member: {
                            shape: "Sgk"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMembers: {
            http: {
                method: "GET",
                requestUri: "/members"
            },
            input: {
                type: "structure",
                members: {
                    OnlyAssociated: {
                        location: "querystring",
                        locationName: "OnlyAssociated",
                        type: "boolean"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Members: {
                        shape: "Sh8"
                    },
                    NextToken: {}
                }
            }
        },
        ListOrganizationAdminAccounts: {
            http: {
                method: "GET",
                requestUri: "/organization/admin"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdminAccounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sge"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Sge"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateActionTarget: {
            http: {
                method: "PATCH",
                requestUri: "/actionTargets/{ActionTargetArn+}"
            },
            input: {
                type: "structure",
                required: [ "ActionTargetArn" ],
                members: {
                    ActionTargetArn: {
                        location: "uri",
                        locationName: "ActionTargetArn"
                    },
                    Name: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFindings: {
            http: {
                method: "PATCH",
                requestUri: "/findings"
            },
            input: {
                type: "structure",
                required: [ "Filters" ],
                members: {
                    Filters: {
                        shape: "Se4"
                    },
                    Note: {
                        shape: "Sdv"
                    },
                    RecordState: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateInsight: {
            http: {
                method: "PATCH",
                requestUri: "/insights/{InsightArn+}"
            },
            input: {
                type: "structure",
                required: [ "InsightArn" ],
                members: {
                    InsightArn: {
                        location: "uri",
                        locationName: "InsightArn"
                    },
                    Name: {},
                    Filters: {
                        shape: "Se4"
                    },
                    GroupByAttribute: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateOrganizationConfiguration: {
            http: {
                requestUri: "/organization/configuration"
            },
            input: {
                type: "structure",
                required: [ "AutoEnable" ],
                members: {
                    AutoEnable: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSecurityHubConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/accounts"
            },
            input: {
                type: "structure",
                members: {
                    AutoEnableControls: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateStandardsControl: {
            http: {
                method: "PATCH",
                requestUri: "/standards/control/{StandardsControlArn+}"
            },
            input: {
                type: "structure",
                required: [ "StandardsControlArn" ],
                members: {
                    StandardsControlArn: {
                        location: "uri",
                        locationName: "StandardsControlArn"
                    },
                    ControlStatus: {},
                    DisabledReason: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S7: {
            type: "list",
            member: {}
        },
        S9: {
            type: "list",
            member: {
                type: "structure",
                required: [ "StandardsSubscriptionArn", "StandardsArn", "StandardsInput", "StandardsStatus" ],
                members: {
                    StandardsSubscriptionArn: {},
                    StandardsArn: {},
                    StandardsInput: {
                        shape: "Sb"
                    },
                    StandardsStatus: {}
                }
            }
        },
        Sb: {
            type: "map",
            key: {},
            value: {}
        },
        Sj: {
            type: "structure",
            required: [ "SchemaVersion", "Id", "ProductArn", "GeneratorId", "AwsAccountId", "CreatedAt", "UpdatedAt", "Title", "Description", "Resources" ],
            members: {
                SchemaVersion: {},
                Id: {},
                ProductArn: {},
                ProductName: {},
                CompanyName: {},
                Region: {},
                GeneratorId: {},
                AwsAccountId: {},
                Types: {
                    shape: "Sk"
                },
                FirstObservedAt: {},
                LastObservedAt: {},
                CreatedAt: {},
                UpdatedAt: {},
                Severity: {
                    type: "structure",
                    members: {
                        Product: {
                            type: "double"
                        },
                        Label: {},
                        Normalized: {
                            type: "integer"
                        },
                        Original: {}
                    }
                },
                Confidence: {
                    type: "integer"
                },
                Criticality: {
                    type: "integer"
                },
                Title: {},
                Description: {},
                Remediation: {
                    type: "structure",
                    members: {
                        Recommendation: {
                            type: "structure",
                            members: {
                                Text: {},
                                Url: {}
                            }
                        }
                    }
                },
                SourceUrl: {},
                ProductFields: {
                    shape: "Sr"
                },
                UserDefinedFields: {
                    shape: "Sr"
                },
                Malware: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            Type: {},
                            Path: {},
                            State: {}
                        }
                    }
                },
                Network: {
                    type: "structure",
                    members: {
                        Direction: {},
                        Protocol: {},
                        OpenPortRange: {
                            shape: "Sy"
                        },
                        SourceIpV4: {},
                        SourceIpV6: {},
                        SourcePort: {
                            type: "integer"
                        },
                        SourceDomain: {},
                        SourceMac: {},
                        DestinationIpV4: {},
                        DestinationIpV6: {},
                        DestinationPort: {
                            type: "integer"
                        },
                        DestinationDomain: {}
                    }
                },
                NetworkPath: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ComponentId: {},
                            ComponentType: {},
                            Egress: {
                                shape: "S11"
                            },
                            Ingress: {
                                shape: "S11"
                            }
                        }
                    }
                },
                Process: {
                    type: "structure",
                    members: {
                        Name: {},
                        Path: {},
                        Pid: {
                            type: "integer"
                        },
                        ParentPid: {
                            type: "integer"
                        },
                        LaunchedAt: {},
                        TerminatedAt: {}
                    }
                },
                ThreatIntelIndicators: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Type: {},
                            Value: {},
                            Category: {},
                            LastObservedAt: {},
                            Source: {},
                            SourceUrl: {}
                        }
                    }
                },
                Resources: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Type", "Id" ],
                        members: {
                            Type: {},
                            Id: {},
                            Partition: {},
                            Region: {},
                            ResourceRole: {},
                            Tags: {
                                shape: "Sr"
                            },
                            DataClassification: {
                                type: "structure",
                                members: {
                                    DetailedResultsLocation: {},
                                    Result: {
                                        type: "structure",
                                        members: {
                                            MimeType: {},
                                            SizeClassified: {
                                                type: "long"
                                            },
                                            AdditionalOccurrences: {
                                                type: "boolean"
                                            },
                                            Status: {
                                                type: "structure",
                                                members: {
                                                    Code: {},
                                                    Reason: {}
                                                }
                                            },
                                            SensitiveData: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Category: {},
                                                        Detections: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Count: {
                                                                        type: "long"
                                                                    },
                                                                    Type: {},
                                                                    Occurrences: {
                                                                        shape: "S1m"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        TotalCount: {
                                                            type: "long"
                                                        }
                                                    }
                                                }
                                            },
                                            CustomDataIdentifiers: {
                                                type: "structure",
                                                members: {
                                                    Detections: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Count: {
                                                                    type: "long"
                                                                },
                                                                Arn: {},
                                                                Name: {},
                                                                Occurrences: {
                                                                    shape: "S1m"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    TotalCount: {
                                                        type: "long"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            Details: {
                                type: "structure",
                                members: {
                                    AwsAutoScalingAutoScalingGroup: {
                                        type: "structure",
                                        members: {
                                            LaunchConfigurationName: {},
                                            LoadBalancerNames: {
                                                shape: "S13"
                                            },
                                            HealthCheckType: {},
                                            HealthCheckGracePeriod: {
                                                type: "integer"
                                            },
                                            CreatedTime: {}
                                        }
                                    },
                                    AwsCodeBuildProject: {
                                        type: "structure",
                                        members: {
                                            EncryptionKey: {},
                                            Environment: {
                                                type: "structure",
                                                members: {
                                                    Certificate: {},
                                                    ImagePullCredentialsType: {},
                                                    RegistryCredential: {
                                                        type: "structure",
                                                        members: {
                                                            Credential: {},
                                                            CredentialProvider: {}
                                                        }
                                                    },
                                                    Type: {}
                                                }
                                            },
                                            Name: {},
                                            Source: {
                                                type: "structure",
                                                members: {
                                                    Type: {},
                                                    Location: {},
                                                    GitCloneDepth: {
                                                        type: "integer"
                                                    },
                                                    InsecureSsl: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            ServiceRole: {},
                                            VpcConfig: {
                                                type: "structure",
                                                members: {
                                                    VpcId: {},
                                                    Subnets: {
                                                        shape: "S25"
                                                    },
                                                    SecurityGroupIds: {
                                                        shape: "S25"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsCloudFrontDistribution: {
                                        type: "structure",
                                        members: {
                                            CacheBehaviors: {
                                                type: "structure",
                                                members: {
                                                    Items: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                ViewerProtocolPolicy: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            DefaultCacheBehavior: {
                                                type: "structure",
                                                members: {
                                                    ViewerProtocolPolicy: {}
                                                }
                                            },
                                            DefaultRootObject: {},
                                            DomainName: {},
                                            ETag: {},
                                            LastModifiedTime: {},
                                            Logging: {
                                                type: "structure",
                                                members: {
                                                    Bucket: {},
                                                    Enabled: {
                                                        type: "boolean"
                                                    },
                                                    IncludeCookies: {
                                                        type: "boolean"
                                                    },
                                                    Prefix: {}
                                                }
                                            },
                                            Origins: {
                                                type: "structure",
                                                members: {
                                                    Items: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                DomainName: {},
                                                                Id: {},
                                                                OriginPath: {},
                                                                S3OriginConfig: {
                                                                    type: "structure",
                                                                    members: {
                                                                        OriginAccessIdentity: {}
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            OriginGroups: {
                                                type: "structure",
                                                members: {
                                                    Items: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                FailoverCriteria: {
                                                                    type: "structure",
                                                                    members: {
                                                                        StatusCodes: {
                                                                            type: "structure",
                                                                            members: {
                                                                                Items: {
                                                                                    type: "list",
                                                                                    member: {
                                                                                        type: "integer"
                                                                                    }
                                                                                },
                                                                                Quantity: {
                                                                                    type: "integer"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            Status: {},
                                            WebAclId: {}
                                        }
                                    },
                                    AwsEc2Instance: {
                                        type: "structure",
                                        members: {
                                            Type: {},
                                            ImageId: {},
                                            IpV4Addresses: {
                                                shape: "S13"
                                            },
                                            IpV6Addresses: {
                                                shape: "S13"
                                            },
                                            KeyName: {},
                                            IamInstanceProfileArn: {},
                                            VpcId: {},
                                            SubnetId: {},
                                            LaunchedAt: {},
                                            NetworkInterfaces: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        NetworkInterfaceId: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsEc2NetworkInterface: {
                                        type: "structure",
                                        members: {
                                            Attachment: {
                                                type: "structure",
                                                members: {
                                                    AttachTime: {},
                                                    AttachmentId: {},
                                                    DeleteOnTermination: {
                                                        type: "boolean"
                                                    },
                                                    DeviceIndex: {
                                                        type: "integer"
                                                    },
                                                    InstanceId: {},
                                                    InstanceOwnerId: {},
                                                    Status: {}
                                                }
                                            },
                                            NetworkInterfaceId: {},
                                            SecurityGroups: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        GroupName: {},
                                                        GroupId: {}
                                                    }
                                                }
                                            },
                                            SourceDestCheck: {
                                                type: "boolean"
                                            },
                                            IpV6Addresses: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        IpV6Address: {}
                                                    }
                                                }
                                            },
                                            PrivateIpAddresses: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        PrivateIpAddress: {},
                                                        PrivateDnsName: {}
                                                    }
                                                }
                                            },
                                            PublicDnsName: {},
                                            PublicIp: {}
                                        }
                                    },
                                    AwsEc2SecurityGroup: {
                                        type: "structure",
                                        members: {
                                            GroupName: {},
                                            GroupId: {},
                                            OwnerId: {},
                                            VpcId: {},
                                            IpPermissions: {
                                                shape: "S2y"
                                            },
                                            IpPermissionsEgress: {
                                                shape: "S2y"
                                            }
                                        }
                                    },
                                    AwsEc2Volume: {
                                        type: "structure",
                                        members: {
                                            CreateTime: {},
                                            Encrypted: {
                                                type: "boolean"
                                            },
                                            Size: {
                                                type: "integer"
                                            },
                                            SnapshotId: {},
                                            Status: {},
                                            KmsKeyId: {},
                                            Attachments: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        AttachTime: {},
                                                        DeleteOnTermination: {
                                                            type: "boolean"
                                                        },
                                                        InstanceId: {},
                                                        Status: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsEc2Vpc: {
                                        type: "structure",
                                        members: {
                                            CidrBlockAssociationSet: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        AssociationId: {},
                                                        CidrBlock: {},
                                                        CidrBlockState: {}
                                                    }
                                                }
                                            },
                                            Ipv6CidrBlockAssociationSet: {
                                                shape: "S3e"
                                            },
                                            DhcpOptionsId: {},
                                            State: {}
                                        }
                                    },
                                    AwsEc2Eip: {
                                        type: "structure",
                                        members: {
                                            InstanceId: {},
                                            PublicIp: {},
                                            AllocationId: {},
                                            AssociationId: {},
                                            Domain: {},
                                            PublicIpv4Pool: {},
                                            NetworkBorderGroup: {},
                                            NetworkInterfaceId: {},
                                            NetworkInterfaceOwnerId: {},
                                            PrivateIpAddress: {}
                                        }
                                    },
                                    AwsEc2Subnet: {
                                        type: "structure",
                                        members: {
                                            AssignIpv6AddressOnCreation: {
                                                type: "boolean"
                                            },
                                            AvailabilityZone: {},
                                            AvailabilityZoneId: {},
                                            AvailableIpAddressCount: {
                                                type: "integer"
                                            },
                                            CidrBlock: {},
                                            DefaultForAz: {
                                                type: "boolean"
                                            },
                                            MapPublicIpOnLaunch: {
                                                type: "boolean"
                                            },
                                            OwnerId: {},
                                            State: {},
                                            SubnetArn: {},
                                            SubnetId: {},
                                            VpcId: {},
                                            Ipv6CidrBlockAssociationSet: {
                                                shape: "S3e"
                                            }
                                        }
                                    },
                                    AwsEc2NetworkAcl: {
                                        type: "structure",
                                        members: {
                                            IsDefault: {
                                                type: "boolean"
                                            },
                                            NetworkAclId: {},
                                            OwnerId: {},
                                            VpcId: {},
                                            Associations: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        NetworkAclAssociationId: {},
                                                        NetworkAclId: {},
                                                        SubnetId: {}
                                                    }
                                                }
                                            },
                                            Entries: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        CidrBlock: {},
                                                        Egress: {
                                                            type: "boolean"
                                                        },
                                                        IcmpTypeCode: {
                                                            type: "structure",
                                                            members: {
                                                                Code: {
                                                                    type: "integer"
                                                                },
                                                                Type: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        Ipv6CidrBlock: {},
                                                        PortRange: {
                                                            type: "structure",
                                                            members: {
                                                                From: {
                                                                    type: "integer"
                                                                },
                                                                To: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        Protocol: {},
                                                        RuleAction: {},
                                                        RuleNumber: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsElbv2LoadBalancer: {
                                        type: "structure",
                                        members: {
                                            AvailabilityZones: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        ZoneName: {},
                                                        SubnetId: {}
                                                    }
                                                }
                                            },
                                            CanonicalHostedZoneId: {},
                                            CreatedTime: {},
                                            DNSName: {},
                                            IpAddressType: {},
                                            Scheme: {},
                                            SecurityGroups: {
                                                type: "list",
                                                member: {}
                                            },
                                            State: {
                                                type: "structure",
                                                members: {
                                                    Code: {},
                                                    Reason: {}
                                                }
                                            },
                                            Type: {},
                                            VpcId: {}
                                        }
                                    },
                                    AwsElasticBeanstalkEnvironment: {
                                        type: "structure",
                                        members: {
                                            ApplicationName: {},
                                            Cname: {},
                                            DateCreated: {},
                                            DateUpdated: {},
                                            Description: {},
                                            EndpointUrl: {},
                                            EnvironmentArn: {},
                                            EnvironmentId: {},
                                            EnvironmentLinks: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        EnvironmentName: {},
                                                        LinkName: {}
                                                    }
                                                }
                                            },
                                            EnvironmentName: {},
                                            OptionSettings: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Namespace: {},
                                                        OptionName: {},
                                                        ResourceName: {},
                                                        Value: {}
                                                    }
                                                }
                                            },
                                            PlatformArn: {},
                                            SolutionStackName: {},
                                            Status: {},
                                            Tier: {
                                                type: "structure",
                                                members: {
                                                    Name: {},
                                                    Type: {},
                                                    Version: {}
                                                }
                                            },
                                            VersionLabel: {}
                                        }
                                    },
                                    AwsElasticsearchDomain: {
                                        type: "structure",
                                        members: {
                                            AccessPolicies: {},
                                            DomainEndpointOptions: {
                                                type: "structure",
                                                members: {
                                                    EnforceHTTPS: {
                                                        type: "boolean"
                                                    },
                                                    TLSSecurityPolicy: {}
                                                }
                                            },
                                            DomainId: {},
                                            DomainName: {},
                                            Endpoint: {},
                                            Endpoints: {
                                                shape: "Sr"
                                            },
                                            ElasticsearchVersion: {},
                                            ElasticsearchClusterConfig: {
                                                type: "structure",
                                                members: {
                                                    DedicatedMasterCount: {
                                                        type: "integer"
                                                    },
                                                    DedicatedMasterEnabled: {
                                                        type: "boolean"
                                                    },
                                                    DedicatedMasterType: {},
                                                    InstanceCount: {
                                                        type: "integer"
                                                    },
                                                    InstanceType: {},
                                                    ZoneAwarenessConfig: {
                                                        type: "structure",
                                                        members: {
                                                            AvailabilityZoneCount: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    },
                                                    ZoneAwarenessEnabled: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            EncryptionAtRestOptions: {
                                                type: "structure",
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    },
                                                    KmsKeyId: {}
                                                }
                                            },
                                            LogPublishingOptions: {
                                                type: "structure",
                                                members: {
                                                    IndexSlowLogs: {
                                                        shape: "S46"
                                                    },
                                                    SearchSlowLogs: {
                                                        shape: "S46"
                                                    },
                                                    AuditLogs: {
                                                        shape: "S46"
                                                    }
                                                }
                                            },
                                            NodeToNodeEncryptionOptions: {
                                                type: "structure",
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            ServiceSoftwareOptions: {
                                                type: "structure",
                                                members: {
                                                    AutomatedUpdateDate: {},
                                                    Cancellable: {
                                                        type: "boolean"
                                                    },
                                                    CurrentVersion: {},
                                                    Description: {},
                                                    NewVersion: {},
                                                    UpdateAvailable: {
                                                        type: "boolean"
                                                    },
                                                    UpdateStatus: {}
                                                }
                                            },
                                            VPCOptions: {
                                                type: "structure",
                                                members: {
                                                    AvailabilityZones: {
                                                        shape: "S25"
                                                    },
                                                    SecurityGroupIds: {
                                                        shape: "S25"
                                                    },
                                                    SubnetIds: {
                                                        shape: "S25"
                                                    },
                                                    VPCId: {}
                                                }
                                            }
                                        }
                                    },
                                    AwsS3Bucket: {
                                        type: "structure",
                                        members: {
                                            OwnerId: {},
                                            OwnerName: {},
                                            CreatedAt: {},
                                            ServerSideEncryptionConfiguration: {
                                                type: "structure",
                                                members: {
                                                    Rules: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                ApplyServerSideEncryptionByDefault: {
                                                                    type: "structure",
                                                                    members: {
                                                                        SSEAlgorithm: {},
                                                                        KMSMasterKeyID: {}
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            BucketLifecycleConfiguration: {
                                                type: "structure",
                                                members: {
                                                    Rules: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                AbortIncompleteMultipartUpload: {
                                                                    type: "structure",
                                                                    members: {
                                                                        DaysAfterInitiation: {
                                                                            type: "integer"
                                                                        }
                                                                    }
                                                                },
                                                                ExpirationDate: {},
                                                                ExpirationInDays: {
                                                                    type: "integer"
                                                                },
                                                                ExpiredObjectDeleteMarker: {
                                                                    type: "boolean"
                                                                },
                                                                Filter: {
                                                                    type: "structure",
                                                                    members: {
                                                                        Predicate: {
                                                                            type: "structure",
                                                                            members: {
                                                                                Operands: {
                                                                                    type: "list",
                                                                                    member: {
                                                                                        type: "structure",
                                                                                        members: {
                                                                                            Prefix: {},
                                                                                            Tag: {
                                                                                                type: "structure",
                                                                                                members: {
                                                                                                    Key: {},
                                                                                                    Value: {}
                                                                                                }
                                                                                            },
                                                                                            Type: {}
                                                                                        }
                                                                                    }
                                                                                },
                                                                                Prefix: {},
                                                                                Tag: {
                                                                                    type: "structure",
                                                                                    members: {
                                                                                        Key: {},
                                                                                        Value: {}
                                                                                    }
                                                                                },
                                                                                Type: {}
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                ID: {},
                                                                NoncurrentVersionExpirationInDays: {
                                                                    type: "integer"
                                                                },
                                                                NoncurrentVersionTransitions: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Days: {
                                                                                type: "integer"
                                                                            },
                                                                            StorageClass: {}
                                                                        }
                                                                    }
                                                                },
                                                                Prefix: {},
                                                                Status: {},
                                                                Transitions: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Date: {},
                                                                            Days: {
                                                                                type: "integer"
                                                                            },
                                                                            StorageClass: {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            PublicAccessBlockConfiguration: {
                                                shape: "S4t"
                                            },
                                            AccessControlList: {},
                                            BucketLoggingConfiguration: {
                                                type: "structure",
                                                members: {
                                                    DestinationBucketName: {},
                                                    LogFilePrefix: {}
                                                }
                                            },
                                            BucketWebsiteConfiguration: {
                                                type: "structure",
                                                members: {
                                                    ErrorDocument: {},
                                                    IndexDocumentSuffix: {},
                                                    RedirectAllRequestsTo: {
                                                        type: "structure",
                                                        members: {
                                                            Hostname: {},
                                                            Protocol: {}
                                                        }
                                                    },
                                                    RoutingRules: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Condition: {
                                                                    type: "structure",
                                                                    members: {
                                                                        HttpErrorCodeReturnedEquals: {},
                                                                        KeyPrefixEquals: {}
                                                                    }
                                                                },
                                                                Redirect: {
                                                                    type: "structure",
                                                                    members: {
                                                                        Hostname: {},
                                                                        HttpRedirectCode: {},
                                                                        Protocol: {},
                                                                        ReplaceKeyPrefixWith: {},
                                                                        ReplaceKeyWith: {}
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            BucketNotificationConfiguration: {
                                                type: "structure",
                                                members: {
                                                    Configurations: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Events: {
                                                                    type: "list",
                                                                    member: {}
                                                                },
                                                                Filter: {
                                                                    type: "structure",
                                                                    members: {
                                                                        S3KeyFilter: {
                                                                            type: "structure",
                                                                            members: {
                                                                                FilterRules: {
                                                                                    type: "list",
                                                                                    member: {
                                                                                        type: "structure",
                                                                                        members: {
                                                                                            Name: {},
                                                                                            Value: {}
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                Destination: {},
                                                                Type: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsS3AccountPublicAccessBlock: {
                                        shape: "S4t"
                                    },
                                    AwsS3Object: {
                                        type: "structure",
                                        members: {
                                            LastModified: {},
                                            ETag: {},
                                            VersionId: {},
                                            ContentType: {},
                                            ServerSideEncryption: {},
                                            SSEKMSKeyId: {}
                                        }
                                    },
                                    AwsSecretsManagerSecret: {
                                        type: "structure",
                                        members: {
                                            RotationRules: {
                                                type: "structure",
                                                members: {
                                                    AutomaticallyAfterDays: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            RotationOccurredWithinFrequency: {
                                                type: "boolean"
                                            },
                                            KmsKeyId: {},
                                            RotationEnabled: {
                                                type: "boolean"
                                            },
                                            RotationLambdaArn: {},
                                            Deleted: {
                                                type: "boolean"
                                            },
                                            Name: {},
                                            Description: {}
                                        }
                                    },
                                    AwsIamAccessKey: {
                                        type: "structure",
                                        members: {
                                            UserName: {
                                                deprecated: true,
                                                deprecatedMessage: "This filter is deprecated. Instead, use PrincipalName."
                                            },
                                            Status: {},
                                            CreatedAt: {},
                                            PrincipalId: {},
                                            PrincipalType: {},
                                            PrincipalName: {},
                                            AccountId: {},
                                            AccessKeyId: {},
                                            SessionContext: {
                                                type: "structure",
                                                members: {
                                                    Attributes: {
                                                        type: "structure",
                                                        members: {
                                                            MfaAuthenticated: {
                                                                type: "boolean"
                                                            },
                                                            CreationDate: {}
                                                        }
                                                    },
                                                    SessionIssuer: {
                                                        type: "structure",
                                                        members: {
                                                            Type: {},
                                                            PrincipalId: {},
                                                            Arn: {},
                                                            AccountId: {},
                                                            UserName: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsIamUser: {
                                        type: "structure",
                                        members: {
                                            AttachedManagedPolicies: {
                                                shape: "S5j"
                                            },
                                            CreateDate: {},
                                            GroupList: {
                                                shape: "S13"
                                            },
                                            Path: {},
                                            PermissionsBoundary: {
                                                shape: "S5l"
                                            },
                                            UserId: {},
                                            UserName: {},
                                            UserPolicyList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        PolicyName: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsIamPolicy: {
                                        type: "structure",
                                        members: {
                                            AttachmentCount: {
                                                type: "integer"
                                            },
                                            CreateDate: {},
                                            DefaultVersionId: {},
                                            Description: {},
                                            IsAttachable: {
                                                type: "boolean"
                                            },
                                            Path: {},
                                            PermissionsBoundaryUsageCount: {
                                                type: "integer"
                                            },
                                            PolicyId: {},
                                            PolicyName: {},
                                            PolicyVersionList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        VersionId: {},
                                                        IsDefaultVersion: {
                                                            type: "boolean"
                                                        },
                                                        CreateDate: {}
                                                    }
                                                }
                                            },
                                            UpdateDate: {}
                                        }
                                    },
                                    AwsApiGatewayV2Stage: {
                                        type: "structure",
                                        members: {
                                            ClientCertificateId: {},
                                            CreatedDate: {},
                                            Description: {},
                                            DefaultRouteSettings: {
                                                shape: "S5s"
                                            },
                                            DeploymentId: {},
                                            LastUpdatedDate: {},
                                            RouteSettings: {
                                                shape: "S5s"
                                            },
                                            StageName: {},
                                            StageVariables: {
                                                shape: "Sr"
                                            },
                                            AccessLogSettings: {
                                                shape: "S5t"
                                            },
                                            AutoDeploy: {
                                                type: "boolean"
                                            },
                                            LastDeploymentStatusMessage: {},
                                            ApiGatewayManaged: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    AwsApiGatewayV2Api: {
                                        type: "structure",
                                        members: {
                                            ApiEndpoint: {},
                                            ApiId: {},
                                            ApiKeySelectionExpression: {},
                                            CreatedDate: {},
                                            Description: {},
                                            Version: {},
                                            Name: {},
                                            ProtocolType: {},
                                            RouteSelectionExpression: {},
                                            CorsConfiguration: {
                                                type: "structure",
                                                members: {
                                                    AllowOrigins: {
                                                        shape: "S25"
                                                    },
                                                    AllowCredentials: {
                                                        type: "boolean"
                                                    },
                                                    ExposeHeaders: {
                                                        shape: "S25"
                                                    },
                                                    MaxAge: {
                                                        type: "integer"
                                                    },
                                                    AllowMethods: {
                                                        shape: "S25"
                                                    },
                                                    AllowHeaders: {
                                                        shape: "S25"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsDynamoDbTable: {
                                        type: "structure",
                                        members: {
                                            AttributeDefinitions: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        AttributeName: {},
                                                        AttributeType: {}
                                                    }
                                                }
                                            },
                                            BillingModeSummary: {
                                                type: "structure",
                                                members: {
                                                    BillingMode: {},
                                                    LastUpdateToPayPerRequestDateTime: {}
                                                }
                                            },
                                            CreationDateTime: {},
                                            GlobalSecondaryIndexes: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Backfilling: {
                                                            type: "boolean"
                                                        },
                                                        IndexArn: {},
                                                        IndexName: {},
                                                        IndexSizeBytes: {
                                                            type: "long"
                                                        },
                                                        IndexStatus: {},
                                                        ItemCount: {
                                                            type: "integer"
                                                        },
                                                        KeySchema: {
                                                            shape: "S63"
                                                        },
                                                        Projection: {
                                                            shape: "S65"
                                                        },
                                                        ProvisionedThroughput: {
                                                            shape: "S66"
                                                        }
                                                    }
                                                }
                                            },
                                            GlobalTableVersion: {},
                                            ItemCount: {
                                                type: "integer"
                                            },
                                            KeySchema: {
                                                shape: "S63"
                                            },
                                            LatestStreamArn: {},
                                            LatestStreamLabel: {},
                                            LocalSecondaryIndexes: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        IndexArn: {},
                                                        IndexName: {},
                                                        KeySchema: {
                                                            shape: "S63"
                                                        },
                                                        Projection: {
                                                            shape: "S65"
                                                        }
                                                    }
                                                }
                                            },
                                            ProvisionedThroughput: {
                                                shape: "S66"
                                            },
                                            Replicas: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        GlobalSecondaryIndexes: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    IndexName: {},
                                                                    ProvisionedThroughputOverride: {
                                                                        shape: "S6d"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        KmsMasterKeyId: {},
                                                        ProvisionedThroughputOverride: {
                                                            shape: "S6d"
                                                        },
                                                        RegionName: {},
                                                        ReplicaStatus: {},
                                                        ReplicaStatusDescription: {}
                                                    }
                                                }
                                            },
                                            RestoreSummary: {
                                                type: "structure",
                                                members: {
                                                    SourceBackupArn: {},
                                                    SourceTableArn: {},
                                                    RestoreDateTime: {},
                                                    RestoreInProgress: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            SseDescription: {
                                                type: "structure",
                                                members: {
                                                    InaccessibleEncryptionDateTime: {},
                                                    Status: {},
                                                    SseType: {},
                                                    KmsMasterKeyArn: {}
                                                }
                                            },
                                            StreamSpecification: {
                                                type: "structure",
                                                members: {
                                                    StreamEnabled: {
                                                        type: "boolean"
                                                    },
                                                    StreamViewType: {}
                                                }
                                            },
                                            TableId: {},
                                            TableName: {},
                                            TableSizeBytes: {
                                                type: "long"
                                            },
                                            TableStatus: {}
                                        }
                                    },
                                    AwsApiGatewayStage: {
                                        type: "structure",
                                        members: {
                                            DeploymentId: {},
                                            ClientCertificateId: {},
                                            StageName: {},
                                            Description: {},
                                            CacheClusterEnabled: {
                                                type: "boolean"
                                            },
                                            CacheClusterSize: {},
                                            CacheClusterStatus: {},
                                            MethodSettings: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        MetricsEnabled: {
                                                            type: "boolean"
                                                        },
                                                        LoggingLevel: {},
                                                        DataTraceEnabled: {
                                                            type: "boolean"
                                                        },
                                                        ThrottlingBurstLimit: {
                                                            type: "integer"
                                                        },
                                                        ThrottlingRateLimit: {
                                                            type: "double"
                                                        },
                                                        CachingEnabled: {
                                                            type: "boolean"
                                                        },
                                                        CacheTtlInSeconds: {
                                                            type: "integer"
                                                        },
                                                        CacheDataEncrypted: {
                                                            type: "boolean"
                                                        },
                                                        RequireAuthorizationForCacheControl: {
                                                            type: "boolean"
                                                        },
                                                        UnauthorizedCacheControlHeaderStrategy: {},
                                                        HttpMethod: {},
                                                        ResourcePath: {}
                                                    }
                                                }
                                            },
                                            Variables: {
                                                shape: "Sr"
                                            },
                                            DocumentationVersion: {},
                                            AccessLogSettings: {
                                                shape: "S5t"
                                            },
                                            CanarySettings: {
                                                type: "structure",
                                                members: {
                                                    PercentTraffic: {
                                                        type: "double"
                                                    },
                                                    DeploymentId: {},
                                                    StageVariableOverrides: {
                                                        shape: "Sr"
                                                    },
                                                    UseStageCache: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            TracingEnabled: {
                                                type: "boolean"
                                            },
                                            CreatedDate: {},
                                            LastUpdatedDate: {},
                                            WebAclArn: {}
                                        }
                                    },
                                    AwsApiGatewayRestApi: {
                                        type: "structure",
                                        members: {
                                            Id: {},
                                            Name: {},
                                            Description: {},
                                            CreatedDate: {},
                                            Version: {},
                                            BinaryMediaTypes: {
                                                shape: "S25"
                                            },
                                            MinimumCompressionSize: {
                                                type: "integer"
                                            },
                                            ApiKeySource: {},
                                            EndpointConfiguration: {
                                                type: "structure",
                                                members: {
                                                    Types: {
                                                        shape: "S25"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsCloudTrailTrail: {
                                        type: "structure",
                                        members: {
                                            CloudWatchLogsLogGroupArn: {},
                                            CloudWatchLogsRoleArn: {},
                                            HasCustomEventSelectors: {
                                                type: "boolean"
                                            },
                                            HomeRegion: {},
                                            IncludeGlobalServiceEvents: {
                                                type: "boolean"
                                            },
                                            IsMultiRegionTrail: {
                                                type: "boolean"
                                            },
                                            IsOrganizationTrail: {
                                                type: "boolean"
                                            },
                                            KmsKeyId: {},
                                            LogFileValidationEnabled: {
                                                type: "boolean"
                                            },
                                            Name: {},
                                            S3BucketName: {},
                                            S3KeyPrefix: {},
                                            SnsTopicArn: {},
                                            SnsTopicName: {},
                                            TrailArn: {}
                                        }
                                    },
                                    AwsSsmPatchCompliance: {
                                        type: "structure",
                                        members: {
                                            Patch: {
                                                type: "structure",
                                                members: {
                                                    ComplianceSummary: {
                                                        type: "structure",
                                                        members: {
                                                            Status: {},
                                                            CompliantCriticalCount: {
                                                                type: "integer"
                                                            },
                                                            CompliantHighCount: {
                                                                type: "integer"
                                                            },
                                                            CompliantMediumCount: {
                                                                type: "integer"
                                                            },
                                                            ExecutionType: {},
                                                            NonCompliantCriticalCount: {
                                                                type: "integer"
                                                            },
                                                            CompliantInformationalCount: {
                                                                type: "integer"
                                                            },
                                                            NonCompliantInformationalCount: {
                                                                type: "integer"
                                                            },
                                                            CompliantUnspecifiedCount: {
                                                                type: "integer"
                                                            },
                                                            NonCompliantLowCount: {
                                                                type: "integer"
                                                            },
                                                            NonCompliantHighCount: {
                                                                type: "integer"
                                                            },
                                                            CompliantLowCount: {
                                                                type: "integer"
                                                            },
                                                            ComplianceType: {},
                                                            PatchBaselineId: {},
                                                            OverallSeverity: {},
                                                            NonCompliantMediumCount: {
                                                                type: "integer"
                                                            },
                                                            NonCompliantUnspecifiedCount: {
                                                                type: "integer"
                                                            },
                                                            PatchGroup: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsCertificateManagerCertificate: {
                                        type: "structure",
                                        members: {
                                            CertificateAuthorityArn: {},
                                            CreatedAt: {},
                                            DomainName: {},
                                            DomainValidationOptions: {
                                                shape: "S6s"
                                            },
                                            ExtendedKeyUsages: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        OId: {}
                                                    }
                                                }
                                            },
                                            FailureReason: {},
                                            ImportedAt: {},
                                            InUseBy: {
                                                shape: "S13"
                                            },
                                            IssuedAt: {},
                                            Issuer: {},
                                            KeyAlgorithm: {},
                                            KeyUsages: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {}
                                                    }
                                                }
                                            },
                                            NotAfter: {},
                                            NotBefore: {},
                                            Options: {
                                                type: "structure",
                                                members: {
                                                    CertificateTransparencyLoggingPreference: {}
                                                }
                                            },
                                            RenewalEligibility: {},
                                            RenewalSummary: {
                                                type: "structure",
                                                members: {
                                                    DomainValidationOptions: {
                                                        shape: "S6s"
                                                    },
                                                    RenewalStatus: {},
                                                    RenewalStatusReason: {},
                                                    UpdatedAt: {}
                                                }
                                            },
                                            Serial: {},
                                            SignatureAlgorithm: {},
                                            Status: {},
                                            Subject: {},
                                            SubjectAlternativeNames: {
                                                shape: "S13"
                                            },
                                            Type: {}
                                        }
                                    },
                                    AwsRedshiftCluster: {
                                        type: "structure",
                                        members: {
                                            AllowVersionUpgrade: {
                                                type: "boolean"
                                            },
                                            AutomatedSnapshotRetentionPeriod: {
                                                type: "integer"
                                            },
                                            AvailabilityZone: {},
                                            ClusterAvailabilityStatus: {},
                                            ClusterCreateTime: {},
                                            ClusterIdentifier: {},
                                            ClusterNodes: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        NodeRole: {},
                                                        PrivateIpAddress: {},
                                                        PublicIpAddress: {}
                                                    }
                                                }
                                            },
                                            ClusterParameterGroups: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        ClusterParameterStatusList: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    ParameterName: {},
                                                                    ParameterApplyStatus: {},
                                                                    ParameterApplyErrorDescription: {}
                                                                }
                                                            }
                                                        },
                                                        ParameterApplyStatus: {},
                                                        ParameterGroupName: {}
                                                    }
                                                }
                                            },
                                            ClusterPublicKey: {},
                                            ClusterRevisionNumber: {},
                                            ClusterSecurityGroups: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        ClusterSecurityGroupName: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            ClusterSnapshotCopyStatus: {
                                                type: "structure",
                                                members: {
                                                    DestinationRegion: {},
                                                    ManualSnapshotRetentionPeriod: {
                                                        type: "integer"
                                                    },
                                                    RetentionPeriod: {
                                                        type: "integer"
                                                    },
                                                    SnapshotCopyGrantName: {}
                                                }
                                            },
                                            ClusterStatus: {},
                                            ClusterSubnetGroupName: {},
                                            ClusterVersion: {},
                                            DBName: {},
                                            DeferredMaintenanceWindows: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DeferMaintenanceEndTime: {},
                                                        DeferMaintenanceIdentifier: {},
                                                        DeferMaintenanceStartTime: {}
                                                    }
                                                }
                                            },
                                            ElasticIpStatus: {
                                                type: "structure",
                                                members: {
                                                    ElasticIp: {},
                                                    Status: {}
                                                }
                                            },
                                            ElasticResizeNumberOfNodeOptions: {},
                                            Encrypted: {
                                                type: "boolean"
                                            },
                                            Endpoint: {
                                                type: "structure",
                                                members: {
                                                    Address: {},
                                                    Port: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            EnhancedVpcRouting: {
                                                type: "boolean"
                                            },
                                            ExpectedNextSnapshotScheduleTime: {},
                                            ExpectedNextSnapshotScheduleTimeStatus: {},
                                            HsmStatus: {
                                                type: "structure",
                                                members: {
                                                    HsmClientCertificateIdentifier: {},
                                                    HsmConfigurationIdentifier: {},
                                                    Status: {}
                                                }
                                            },
                                            IamRoles: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        ApplyStatus: {},
                                                        IamRoleArn: {}
                                                    }
                                                }
                                            },
                                            KmsKeyId: {},
                                            MaintenanceTrackName: {},
                                            ManualSnapshotRetentionPeriod: {
                                                type: "integer"
                                            },
                                            MasterUsername: {},
                                            NextMaintenanceWindowStartTime: {},
                                            NodeType: {},
                                            NumberOfNodes: {
                                                type: "integer"
                                            },
                                            PendingActions: {
                                                shape: "S13"
                                            },
                                            PendingModifiedValues: {
                                                type: "structure",
                                                members: {
                                                    AutomatedSnapshotRetentionPeriod: {
                                                        type: "integer"
                                                    },
                                                    ClusterIdentifier: {},
                                                    ClusterType: {},
                                                    ClusterVersion: {},
                                                    EncryptionType: {},
                                                    EnhancedVpcRouting: {
                                                        type: "boolean"
                                                    },
                                                    MaintenanceTrackName: {},
                                                    MasterUserPassword: {},
                                                    NodeType: {},
                                                    NumberOfNodes: {
                                                        type: "integer"
                                                    },
                                                    PubliclyAccessible: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            PreferredMaintenanceWindow: {},
                                            PubliclyAccessible: {
                                                type: "boolean"
                                            },
                                            ResizeInfo: {
                                                type: "structure",
                                                members: {
                                                    AllowCancelResize: {
                                                        type: "boolean"
                                                    },
                                                    ResizeType: {}
                                                }
                                            },
                                            RestoreStatus: {
                                                type: "structure",
                                                members: {
                                                    CurrentRestoreRateInMegaBytesPerSecond: {
                                                        type: "double"
                                                    },
                                                    ElapsedTimeInSeconds: {
                                                        type: "long"
                                                    },
                                                    EstimatedTimeToCompletionInSeconds: {
                                                        type: "long"
                                                    },
                                                    ProgressInMegaBytes: {
                                                        type: "long"
                                                    },
                                                    SnapshotSizeInMegaBytes: {
                                                        type: "long"
                                                    },
                                                    Status: {}
                                                }
                                            },
                                            SnapshotScheduleIdentifier: {},
                                            SnapshotScheduleState: {},
                                            VpcId: {},
                                            VpcSecurityGroups: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Status: {},
                                                        VpcSecurityGroupId: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsElbLoadBalancer: {
                                        type: "structure",
                                        members: {
                                            AvailabilityZones: {
                                                shape: "S13"
                                            },
                                            BackendServerDescriptions: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        InstancePort: {
                                                            type: "integer"
                                                        },
                                                        PolicyNames: {
                                                            shape: "S13"
                                                        }
                                                    }
                                                }
                                            },
                                            CanonicalHostedZoneName: {},
                                            CanonicalHostedZoneNameID: {},
                                            CreatedTime: {},
                                            DnsName: {},
                                            HealthCheck: {
                                                type: "structure",
                                                members: {
                                                    HealthyThreshold: {
                                                        type: "integer"
                                                    },
                                                    Interval: {
                                                        type: "integer"
                                                    },
                                                    Target: {},
                                                    Timeout: {
                                                        type: "integer"
                                                    },
                                                    UnhealthyThreshold: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            Instances: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        InstanceId: {}
                                                    }
                                                }
                                            },
                                            ListenerDescriptions: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Listener: {
                                                            type: "structure",
                                                            members: {
                                                                InstancePort: {
                                                                    type: "integer"
                                                                },
                                                                InstanceProtocol: {},
                                                                LoadBalancerPort: {
                                                                    type: "integer"
                                                                },
                                                                Protocol: {},
                                                                SslCertificateId: {}
                                                            }
                                                        },
                                                        PolicyNames: {
                                                            shape: "S13"
                                                        }
                                                    }
                                                }
                                            },
                                            LoadBalancerAttributes: {
                                                type: "structure",
                                                members: {
                                                    AccessLog: {
                                                        type: "structure",
                                                        members: {
                                                            EmitInterval: {
                                                                type: "integer"
                                                            },
                                                            Enabled: {
                                                                type: "boolean"
                                                            },
                                                            S3BucketName: {},
                                                            S3BucketPrefix: {}
                                                        }
                                                    },
                                                    ConnectionDraining: {
                                                        type: "structure",
                                                        members: {
                                                            Enabled: {
                                                                type: "boolean"
                                                            },
                                                            Timeout: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    },
                                                    ConnectionSettings: {
                                                        type: "structure",
                                                        members: {
                                                            IdleTimeout: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    },
                                                    CrossZoneLoadBalancing: {
                                                        type: "structure",
                                                        members: {
                                                            Enabled: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            LoadBalancerName: {},
                                            Policies: {
                                                type: "structure",
                                                members: {
                                                    AppCookieStickinessPolicies: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                CookieName: {},
                                                                PolicyName: {}
                                                            }
                                                        }
                                                    },
                                                    LbCookieStickinessPolicies: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                CookieExpirationPeriod: {
                                                                    type: "long"
                                                                },
                                                                PolicyName: {}
                                                            }
                                                        }
                                                    },
                                                    OtherPolicies: {
                                                        shape: "S13"
                                                    }
                                                }
                                            },
                                            Scheme: {},
                                            SecurityGroups: {
                                                shape: "S13"
                                            },
                                            SourceSecurityGroup: {
                                                type: "structure",
                                                members: {
                                                    GroupName: {},
                                                    OwnerAlias: {}
                                                }
                                            },
                                            Subnets: {
                                                shape: "S13"
                                            },
                                            VpcId: {}
                                        }
                                    },
                                    AwsIamGroup: {
                                        type: "structure",
                                        members: {
                                            AttachedManagedPolicies: {
                                                shape: "S5j"
                                            },
                                            CreateDate: {},
                                            GroupId: {},
                                            GroupName: {},
                                            GroupPolicyList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        PolicyName: {}
                                                    }
                                                }
                                            },
                                            Path: {}
                                        }
                                    },
                                    AwsIamRole: {
                                        type: "structure",
                                        members: {
                                            AssumeRolePolicyDocument: {},
                                            AttachedManagedPolicies: {
                                                shape: "S5j"
                                            },
                                            CreateDate: {},
                                            InstanceProfileList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Arn: {},
                                                        CreateDate: {},
                                                        InstanceProfileId: {},
                                                        InstanceProfileName: {},
                                                        Path: {},
                                                        Roles: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Arn: {},
                                                                    AssumeRolePolicyDocument: {},
                                                                    CreateDate: {},
                                                                    Path: {},
                                                                    RoleId: {},
                                                                    RoleName: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            PermissionsBoundary: {
                                                shape: "S5l"
                                            },
                                            RoleId: {},
                                            RoleName: {},
                                            RolePolicyList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        PolicyName: {}
                                                    }
                                                }
                                            },
                                            MaxSessionDuration: {
                                                type: "integer"
                                            },
                                            Path: {}
                                        }
                                    },
                                    AwsKmsKey: {
                                        type: "structure",
                                        members: {
                                            AWSAccountId: {},
                                            CreationDate: {
                                                type: "double"
                                            },
                                            KeyId: {},
                                            KeyManager: {},
                                            KeyState: {},
                                            Origin: {},
                                            Description: {},
                                            KeyRotationStatus: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    AwsLambdaFunction: {
                                        type: "structure",
                                        members: {
                                            Code: {
                                                type: "structure",
                                                members: {
                                                    S3Bucket: {},
                                                    S3Key: {},
                                                    S3ObjectVersion: {},
                                                    ZipFile: {}
                                                }
                                            },
                                            CodeSha256: {},
                                            DeadLetterConfig: {
                                                type: "structure",
                                                members: {
                                                    TargetArn: {}
                                                }
                                            },
                                            Environment: {
                                                type: "structure",
                                                members: {
                                                    Variables: {
                                                        shape: "Sr"
                                                    },
                                                    Error: {
                                                        type: "structure",
                                                        members: {
                                                            ErrorCode: {},
                                                            Message: {}
                                                        }
                                                    }
                                                }
                                            },
                                            FunctionName: {},
                                            Handler: {},
                                            KmsKeyArn: {},
                                            LastModified: {},
                                            Layers: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Arn: {},
                                                        CodeSize: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            },
                                            MasterArn: {},
                                            MemorySize: {
                                                type: "integer"
                                            },
                                            RevisionId: {},
                                            Role: {},
                                            Runtime: {},
                                            Timeout: {
                                                type: "integer"
                                            },
                                            TracingConfig: {
                                                type: "structure",
                                                members: {
                                                    Mode: {}
                                                }
                                            },
                                            VpcConfig: {
                                                type: "structure",
                                                members: {
                                                    SecurityGroupIds: {
                                                        shape: "S25"
                                                    },
                                                    SubnetIds: {
                                                        shape: "S25"
                                                    },
                                                    VpcId: {}
                                                }
                                            },
                                            Version: {}
                                        }
                                    },
                                    AwsLambdaLayerVersion: {
                                        type: "structure",
                                        members: {
                                            Version: {
                                                type: "long"
                                            },
                                            CompatibleRuntimes: {
                                                shape: "S25"
                                            },
                                            CreatedDate: {}
                                        }
                                    },
                                    AwsRdsDbInstance: {
                                        type: "structure",
                                        members: {
                                            AssociatedRoles: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        RoleArn: {},
                                                        FeatureName: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            CACertificateIdentifier: {},
                                            DBClusterIdentifier: {},
                                            DBInstanceIdentifier: {},
                                            DBInstanceClass: {},
                                            DbInstancePort: {
                                                type: "integer"
                                            },
                                            DbiResourceId: {},
                                            DBName: {},
                                            DeletionProtection: {
                                                type: "boolean"
                                            },
                                            Endpoint: {
                                                shape: "S8x"
                                            },
                                            Engine: {},
                                            EngineVersion: {},
                                            IAMDatabaseAuthenticationEnabled: {
                                                type: "boolean"
                                            },
                                            InstanceCreateTime: {},
                                            KmsKeyId: {},
                                            PubliclyAccessible: {
                                                type: "boolean"
                                            },
                                            StorageEncrypted: {
                                                type: "boolean"
                                            },
                                            TdeCredentialArn: {},
                                            VpcSecurityGroups: {
                                                shape: "S8y"
                                            },
                                            MultiAz: {
                                                type: "boolean"
                                            },
                                            EnhancedMonitoringResourceArn: {},
                                            DbInstanceStatus: {},
                                            MasterUsername: {},
                                            AllocatedStorage: {
                                                type: "integer"
                                            },
                                            PreferredBackupWindow: {},
                                            BackupRetentionPeriod: {
                                                type: "integer"
                                            },
                                            DbSecurityGroups: {
                                                shape: "S13"
                                            },
                                            DbParameterGroups: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DbParameterGroupName: {},
                                                        ParameterApplyStatus: {}
                                                    }
                                                }
                                            },
                                            AvailabilityZone: {},
                                            DbSubnetGroup: {
                                                type: "structure",
                                                members: {
                                                    DbSubnetGroupName: {},
                                                    DbSubnetGroupDescription: {},
                                                    VpcId: {},
                                                    SubnetGroupStatus: {},
                                                    Subnets: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                SubnetIdentifier: {},
                                                                SubnetAvailabilityZone: {
                                                                    type: "structure",
                                                                    members: {
                                                                        Name: {}
                                                                    }
                                                                },
                                                                SubnetStatus: {}
                                                            }
                                                        }
                                                    },
                                                    DbSubnetGroupArn: {}
                                                }
                                            },
                                            PreferredMaintenanceWindow: {},
                                            PendingModifiedValues: {
                                                type: "structure",
                                                members: {
                                                    DbInstanceClass: {},
                                                    AllocatedStorage: {
                                                        type: "integer"
                                                    },
                                                    MasterUserPassword: {},
                                                    Port: {
                                                        type: "integer"
                                                    },
                                                    BackupRetentionPeriod: {
                                                        type: "integer"
                                                    },
                                                    MultiAZ: {
                                                        type: "boolean"
                                                    },
                                                    EngineVersion: {},
                                                    LicenseModel: {},
                                                    Iops: {
                                                        type: "integer"
                                                    },
                                                    DbInstanceIdentifier: {},
                                                    StorageType: {},
                                                    CaCertificateIdentifier: {},
                                                    DbSubnetGroupName: {},
                                                    PendingCloudWatchLogsExports: {
                                                        type: "structure",
                                                        members: {
                                                            LogTypesToEnable: {
                                                                shape: "S13"
                                                            },
                                                            LogTypesToDisable: {
                                                                shape: "S13"
                                                            }
                                                        }
                                                    },
                                                    ProcessorFeatures: {
                                                        shape: "S98"
                                                    }
                                                }
                                            },
                                            LatestRestorableTime: {},
                                            AutoMinorVersionUpgrade: {
                                                type: "boolean"
                                            },
                                            ReadReplicaSourceDBInstanceIdentifier: {},
                                            ReadReplicaDBInstanceIdentifiers: {
                                                shape: "S13"
                                            },
                                            ReadReplicaDBClusterIdentifiers: {
                                                shape: "S13"
                                            },
                                            LicenseModel: {},
                                            Iops: {
                                                type: "integer"
                                            },
                                            OptionGroupMemberships: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        OptionGroupName: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            CharacterSetName: {},
                                            SecondaryAvailabilityZone: {},
                                            StatusInfos: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        StatusType: {},
                                                        Normal: {
                                                            type: "boolean"
                                                        },
                                                        Status: {},
                                                        Message: {}
                                                    }
                                                }
                                            },
                                            StorageType: {},
                                            DomainMemberships: {
                                                shape: "S9e"
                                            },
                                            CopyTagsToSnapshot: {
                                                type: "boolean"
                                            },
                                            MonitoringInterval: {
                                                type: "integer"
                                            },
                                            MonitoringRoleArn: {},
                                            PromotionTier: {
                                                type: "integer"
                                            },
                                            Timezone: {},
                                            PerformanceInsightsEnabled: {
                                                type: "boolean"
                                            },
                                            PerformanceInsightsKmsKeyId: {},
                                            PerformanceInsightsRetentionPeriod: {
                                                type: "integer"
                                            },
                                            EnabledCloudWatchLogsExports: {
                                                shape: "S13"
                                            },
                                            ProcessorFeatures: {
                                                shape: "S98"
                                            },
                                            ListenerEndpoint: {
                                                shape: "S8x"
                                            },
                                            MaxAllocatedStorage: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    AwsSnsTopic: {
                                        type: "structure",
                                        members: {
                                            KmsMasterKeyId: {},
                                            Subscription: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Endpoint: {},
                                                        Protocol: {}
                                                    }
                                                }
                                            },
                                            TopicName: {},
                                            Owner: {}
                                        }
                                    },
                                    AwsSqsQueue: {
                                        type: "structure",
                                        members: {
                                            KmsDataKeyReusePeriodSeconds: {
                                                type: "integer"
                                            },
                                            KmsMasterKeyId: {},
                                            QueueName: {},
                                            DeadLetterTargetArn: {}
                                        }
                                    },
                                    AwsWafWebAcl: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            DefaultAction: {},
                                            Rules: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Action: {
                                                            type: "structure",
                                                            members: {
                                                                Type: {}
                                                            }
                                                        },
                                                        ExcludedRules: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    RuleId: {}
                                                                }
                                                            }
                                                        },
                                                        OverrideAction: {
                                                            type: "structure",
                                                            members: {
                                                                Type: {}
                                                            }
                                                        },
                                                        Priority: {
                                                            type: "integer"
                                                        },
                                                        RuleId: {},
                                                        Type: {}
                                                    }
                                                }
                                            },
                                            WebAclId: {}
                                        }
                                    },
                                    AwsRdsDbSnapshot: {
                                        type: "structure",
                                        members: {
                                            DbSnapshotIdentifier: {},
                                            DbInstanceIdentifier: {},
                                            SnapshotCreateTime: {},
                                            Engine: {},
                                            AllocatedStorage: {
                                                type: "integer"
                                            },
                                            Status: {},
                                            Port: {
                                                type: "integer"
                                            },
                                            AvailabilityZone: {},
                                            VpcId: {},
                                            InstanceCreateTime: {},
                                            MasterUsername: {},
                                            EngineVersion: {},
                                            LicenseModel: {},
                                            SnapshotType: {},
                                            Iops: {
                                                type: "integer"
                                            },
                                            OptionGroupName: {},
                                            PercentProgress: {
                                                type: "integer"
                                            },
                                            SourceRegion: {},
                                            SourceDbSnapshotIdentifier: {},
                                            StorageType: {},
                                            TdeCredentialArn: {},
                                            Encrypted: {
                                                type: "boolean"
                                            },
                                            KmsKeyId: {},
                                            Timezone: {},
                                            IamDatabaseAuthenticationEnabled: {
                                                type: "boolean"
                                            },
                                            ProcessorFeatures: {
                                                shape: "S98"
                                            },
                                            DbiResourceId: {}
                                        }
                                    },
                                    AwsRdsDbClusterSnapshot: {
                                        type: "structure",
                                        members: {
                                            AvailabilityZones: {
                                                shape: "S13"
                                            },
                                            SnapshotCreateTime: {},
                                            Engine: {},
                                            AllocatedStorage: {
                                                type: "integer"
                                            },
                                            Status: {},
                                            Port: {
                                                type: "integer"
                                            },
                                            VpcId: {},
                                            ClusterCreateTime: {},
                                            MasterUsername: {},
                                            EngineVersion: {},
                                            LicenseModel: {},
                                            SnapshotType: {},
                                            PercentProgress: {
                                                type: "integer"
                                            },
                                            StorageEncrypted: {
                                                type: "boolean"
                                            },
                                            KmsKeyId: {},
                                            DbClusterIdentifier: {},
                                            DbClusterSnapshotIdentifier: {},
                                            IamDatabaseAuthenticationEnabled: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    AwsRdsDbCluster: {
                                        type: "structure",
                                        members: {
                                            AllocatedStorage: {
                                                type: "integer"
                                            },
                                            AvailabilityZones: {
                                                shape: "S13"
                                            },
                                            BackupRetentionPeriod: {
                                                type: "integer"
                                            },
                                            DatabaseName: {},
                                            Status: {},
                                            Endpoint: {},
                                            ReaderEndpoint: {},
                                            CustomEndpoints: {
                                                shape: "S13"
                                            },
                                            MultiAz: {
                                                type: "boolean"
                                            },
                                            Engine: {},
                                            EngineVersion: {},
                                            Port: {
                                                type: "integer"
                                            },
                                            MasterUsername: {},
                                            PreferredBackupWindow: {},
                                            PreferredMaintenanceWindow: {},
                                            ReadReplicaIdentifiers: {
                                                shape: "S13"
                                            },
                                            VpcSecurityGroups: {
                                                shape: "S8y"
                                            },
                                            HostedZoneId: {},
                                            StorageEncrypted: {
                                                type: "boolean"
                                            },
                                            KmsKeyId: {},
                                            DbClusterResourceId: {},
                                            AssociatedRoles: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        RoleArn: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            ClusterCreateTime: {},
                                            EnabledCloudWatchLogsExports: {
                                                shape: "S13"
                                            },
                                            EngineMode: {},
                                            DeletionProtection: {
                                                type: "boolean"
                                            },
                                            HttpEndpointEnabled: {
                                                type: "boolean"
                                            },
                                            ActivityStreamStatus: {},
                                            CopyTagsToSnapshot: {
                                                type: "boolean"
                                            },
                                            CrossAccountClone: {
                                                type: "boolean"
                                            },
                                            DomainMemberships: {
                                                shape: "S9e"
                                            },
                                            DbClusterParameterGroup: {},
                                            DbSubnetGroup: {},
                                            DbClusterOptionGroupMemberships: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DbClusterOptionGroupName: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            DbClusterIdentifier: {},
                                            DbClusterMembers: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        IsClusterWriter: {
                                                            type: "boolean"
                                                        },
                                                        PromotionTier: {
                                                            type: "integer"
                                                        },
                                                        DbInstanceIdentifier: {},
                                                        DbClusterParameterGroupStatus: {}
                                                    }
                                                }
                                            },
                                            IamDatabaseAuthenticationEnabled: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    AwsEcsCluster: {
                                        type: "structure",
                                        members: {
                                            CapacityProviders: {
                                                shape: "S25"
                                            },
                                            ClusterSettings: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Value: {}
                                                    }
                                                }
                                            },
                                            Configuration: {
                                                type: "structure",
                                                members: {
                                                    ExecuteCommandConfiguration: {
                                                        type: "structure",
                                                        members: {
                                                            KmsKeyId: {},
                                                            LogConfiguration: {
                                                                type: "structure",
                                                                members: {
                                                                    CloudWatchEncryptionEnabled: {
                                                                        type: "boolean"
                                                                    },
                                                                    CloudWatchLogGroupName: {},
                                                                    S3BucketName: {},
                                                                    S3EncryptionEnabled: {
                                                                        type: "boolean"
                                                                    },
                                                                    S3KeyPrefix: {}
                                                                }
                                                            },
                                                            Logging: {}
                                                        }
                                                    }
                                                }
                                            },
                                            DefaultCapacityProviderStrategy: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Base: {
                                                            type: "integer"
                                                        },
                                                        CapacityProvider: {},
                                                        Weight: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsEcsTaskDefinition: {
                                        type: "structure",
                                        members: {
                                            ContainerDefinitions: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Command: {
                                                            shape: "S25"
                                                        },
                                                        Cpu: {
                                                            type: "integer"
                                                        },
                                                        DependsOn: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Condition: {},
                                                                    ContainerName: {}
                                                                }
                                                            }
                                                        },
                                                        DisableNetworking: {
                                                            type: "boolean"
                                                        },
                                                        DnsSearchDomains: {
                                                            shape: "S25"
                                                        },
                                                        DnsServers: {
                                                            shape: "S25"
                                                        },
                                                        DockerLabels: {
                                                            shape: "Sr"
                                                        },
                                                        DockerSecurityOptions: {
                                                            shape: "S25"
                                                        },
                                                        EntryPoint: {
                                                            shape: "S25"
                                                        },
                                                        Environment: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Name: {},
                                                                    Value: {}
                                                                }
                                                            }
                                                        },
                                                        EnvironmentFiles: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Type: {},
                                                                    Value: {}
                                                                }
                                                            }
                                                        },
                                                        Essential: {
                                                            type: "boolean"
                                                        },
                                                        ExtraHosts: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Hostname: {},
                                                                    IpAddress: {}
                                                                }
                                                            }
                                                        },
                                                        FirelensConfiguration: {
                                                            type: "structure",
                                                            members: {
                                                                Options: {
                                                                    shape: "Sr"
                                                                },
                                                                Type: {}
                                                            }
                                                        },
                                                        HealthCheck: {
                                                            type: "structure",
                                                            members: {
                                                                Command: {
                                                                    shape: "S25"
                                                                },
                                                                Interval: {
                                                                    type: "integer"
                                                                },
                                                                Retries: {
                                                                    type: "integer"
                                                                },
                                                                StartPeriod: {
                                                                    type: "integer"
                                                                },
                                                                Timeout: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        Hostname: {},
                                                        Image: {},
                                                        Interactive: {
                                                            type: "boolean"
                                                        },
                                                        Links: {
                                                            shape: "S25"
                                                        },
                                                        LinuxParameters: {
                                                            type: "structure",
                                                            members: {
                                                                Capabilities: {
                                                                    type: "structure",
                                                                    members: {
                                                                        Add: {
                                                                            shape: "S25"
                                                                        },
                                                                        Drop: {
                                                                            shape: "S25"
                                                                        }
                                                                    }
                                                                },
                                                                Devices: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            ContainerPath: {},
                                                                            HostPath: {},
                                                                            Permissions: {
                                                                                shape: "S25"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                InitProcessEnabled: {
                                                                    type: "boolean"
                                                                },
                                                                MaxSwap: {
                                                                    type: "integer"
                                                                },
                                                                SharedMemorySize: {
                                                                    type: "integer"
                                                                },
                                                                Swappiness: {
                                                                    type: "integer"
                                                                },
                                                                Tmpfs: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            ContainerPath: {},
                                                                            MountOptions: {
                                                                                shape: "S25"
                                                                            },
                                                                            Size: {
                                                                                type: "integer"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        LogConfiguration: {
                                                            type: "structure",
                                                            members: {
                                                                LogDriver: {},
                                                                Options: {
                                                                    shape: "Sr"
                                                                },
                                                                SecretOptions: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Name: {},
                                                                            ValueFrom: {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        Memory: {
                                                            type: "integer"
                                                        },
                                                        MemoryReservation: {
                                                            type: "integer"
                                                        },
                                                        MountPoints: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    ContainerPath: {},
                                                                    ReadOnly: {
                                                                        type: "boolean"
                                                                    },
                                                                    SourceVolume: {}
                                                                }
                                                            }
                                                        },
                                                        Name: {},
                                                        PortMappings: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    ContainerPort: {
                                                                        type: "integer"
                                                                    },
                                                                    HostPort: {
                                                                        type: "integer"
                                                                    },
                                                                    Protocol: {}
                                                                }
                                                            }
                                                        },
                                                        Privileged: {
                                                            type: "boolean"
                                                        },
                                                        PseudoTerminal: {
                                                            type: "boolean"
                                                        },
                                                        ReadonlyRootFilesystem: {
                                                            type: "boolean"
                                                        },
                                                        RepositoryCredentials: {
                                                            type: "structure",
                                                            members: {
                                                                CredentialsParameter: {}
                                                            }
                                                        },
                                                        ResourceRequirements: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Type: {},
                                                                    Value: {}
                                                                }
                                                            }
                                                        },
                                                        Secrets: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Name: {},
                                                                    ValueFrom: {}
                                                                }
                                                            }
                                                        },
                                                        StartTimeout: {
                                                            type: "integer"
                                                        },
                                                        StopTimeout: {
                                                            type: "integer"
                                                        },
                                                        SystemControls: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Namespace: {},
                                                                    Value: {}
                                                                }
                                                            }
                                                        },
                                                        Ulimits: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    HardLimit: {
                                                                        type: "integer"
                                                                    },
                                                                    Name: {},
                                                                    SoftLimit: {
                                                                        type: "integer"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        User: {},
                                                        VolumesFrom: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    ReadOnly: {
                                                                        type: "boolean"
                                                                    },
                                                                    SourceContainer: {}
                                                                }
                                                            }
                                                        },
                                                        WorkingDirectory: {}
                                                    }
                                                }
                                            },
                                            Cpu: {},
                                            ExecutionRoleArn: {},
                                            Family: {},
                                            InferenceAccelerators: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DeviceName: {},
                                                        DeviceType: {}
                                                    }
                                                }
                                            },
                                            IpcMode: {},
                                            Memory: {},
                                            NetworkMode: {},
                                            PidMode: {},
                                            PlacementConstraints: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Expression: {},
                                                        Type: {}
                                                    }
                                                }
                                            },
                                            ProxyConfiguration: {
                                                type: "structure",
                                                members: {
                                                    ContainerName: {},
                                                    ProxyConfigurationProperties: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Name: {},
                                                                Value: {}
                                                            }
                                                        }
                                                    },
                                                    Type: {}
                                                }
                                            },
                                            RequiresCompatibilities: {
                                                shape: "S25"
                                            },
                                            TaskRoleArn: {},
                                            Volumes: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DockerVolumeConfiguration: {
                                                            type: "structure",
                                                            members: {
                                                                Autoprovision: {
                                                                    type: "boolean"
                                                                },
                                                                Driver: {},
                                                                DriverOpts: {
                                                                    shape: "Sr"
                                                                },
                                                                Labels: {
                                                                    shape: "Sr"
                                                                },
                                                                Scope: {}
                                                            }
                                                        },
                                                        EfsVolumeConfiguration: {
                                                            type: "structure",
                                                            members: {
                                                                AuthorizationConfig: {
                                                                    type: "structure",
                                                                    members: {
                                                                        AccessPointId: {},
                                                                        Iam: {}
                                                                    }
                                                                },
                                                                FilesystemId: {},
                                                                RootDirectory: {},
                                                                TransitEncryption: {},
                                                                TransitEncryptionPort: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        Host: {
                                                            type: "structure",
                                                            members: {
                                                                SourcePath: {}
                                                            }
                                                        },
                                                        Name: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    Container: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            ImageId: {},
                                            ImageName: {},
                                            LaunchedAt: {}
                                        }
                                    },
                                    Other: {
                                        shape: "Sr"
                                    },
                                    AwsRdsEventSubscription: {
                                        type: "structure",
                                        members: {
                                            CustSubscriptionId: {},
                                            CustomerAwsId: {},
                                            Enabled: {
                                                type: "boolean"
                                            },
                                            EventCategoriesList: {
                                                shape: "S25"
                                            },
                                            EventSubscriptionArn: {},
                                            SnsTopicArn: {},
                                            SourceIdsList: {
                                                shape: "S25"
                                            },
                                            SourceType: {},
                                            Status: {},
                                            SubscriptionCreationTime: {}
                                        }
                                    },
                                    AwsEcsService: {
                                        type: "structure",
                                        members: {
                                            CapacityProviderStrategy: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Base: {
                                                            type: "integer"
                                                        },
                                                        CapacityProvider: {},
                                                        Weight: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            },
                                            Cluster: {},
                                            DeploymentConfiguration: {
                                                type: "structure",
                                                members: {
                                                    DeploymentCircuitBreaker: {
                                                        type: "structure",
                                                        members: {
                                                            Enable: {
                                                                type: "boolean"
                                                            },
                                                            Rollback: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    MaximumPercent: {
                                                        type: "integer"
                                                    },
                                                    MinimumHealthyPercent: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            DeploymentController: {
                                                type: "structure",
                                                members: {
                                                    Type: {}
                                                }
                                            },
                                            DesiredCount: {
                                                type: "integer"
                                            },
                                            EnableEcsManagedTags: {
                                                type: "boolean"
                                            },
                                            EnableExecuteCommand: {
                                                type: "boolean"
                                            },
                                            HealthCheckGracePeriodSeconds: {
                                                type: "integer"
                                            },
                                            LaunchType: {},
                                            LoadBalancers: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        ContainerName: {},
                                                        ContainerPort: {
                                                            type: "integer"
                                                        },
                                                        LoadBalancerName: {},
                                                        TargetGroupArn: {}
                                                    }
                                                }
                                            },
                                            Name: {},
                                            NetworkConfiguration: {
                                                type: "structure",
                                                members: {
                                                    AwsVpcConfiguration: {
                                                        type: "structure",
                                                        members: {
                                                            AssignPublicIp: {},
                                                            SecurityGroups: {
                                                                shape: "S25"
                                                            },
                                                            Subnets: {
                                                                shape: "S25"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            PlacementConstraints: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Expression: {},
                                                        Type: {}
                                                    }
                                                }
                                            },
                                            PlacementStrategies: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Field: {},
                                                        Type: {}
                                                    }
                                                }
                                            },
                                            PlatformVersion: {},
                                            PropagateTags: {},
                                            Role: {},
                                            SchedulingStrategy: {},
                                            ServiceArn: {},
                                            ServiceName: {},
                                            ServiceRegistries: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        ContainerName: {},
                                                        ContainerPort: {
                                                            type: "integer"
                                                        },
                                                        Port: {
                                                            type: "integer"
                                                        },
                                                        RegistryArn: {}
                                                    }
                                                }
                                            },
                                            TaskDefinition: {}
                                        }
                                    },
                                    AwsAutoScalingLaunchConfiguration: {
                                        type: "structure",
                                        members: {
                                            AssociatePublicIpAddress: {
                                                type: "boolean"
                                            },
                                            BlockDeviceMappings: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DeviceName: {},
                                                        Ebs: {
                                                            type: "structure",
                                                            members: {
                                                                DeleteOnTermination: {
                                                                    type: "boolean"
                                                                },
                                                                Encrypted: {
                                                                    type: "boolean"
                                                                },
                                                                Iops: {
                                                                    type: "integer"
                                                                },
                                                                SnapshotId: {},
                                                                VolumeSize: {
                                                                    type: "integer"
                                                                },
                                                                VolumeType: {}
                                                            }
                                                        },
                                                        NoDevice: {
                                                            type: "boolean"
                                                        },
                                                        VirtualName: {}
                                                    }
                                                }
                                            },
                                            ClassicLinkVpcId: {},
                                            ClassicLinkVpcSecurityGroups: {
                                                shape: "S25"
                                            },
                                            CreatedTime: {},
                                            EbsOptimized: {
                                                type: "boolean"
                                            },
                                            IamInstanceProfile: {},
                                            ImageId: {},
                                            InstanceMonitoring: {
                                                type: "structure",
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            InstanceType: {},
                                            KernelId: {},
                                            KeyName: {},
                                            LaunchConfigurationName: {},
                                            PlacementTenancy: {},
                                            RamdiskId: {},
                                            SecurityGroups: {
                                                shape: "S25"
                                            },
                                            SpotPrice: {},
                                            UserData: {}
                                        }
                                    },
                                    AwsEc2VpnConnection: {
                                        type: "structure",
                                        members: {
                                            VpnConnectionId: {},
                                            State: {},
                                            CustomerGatewayId: {},
                                            CustomerGatewayConfiguration: {},
                                            Type: {},
                                            VpnGatewayId: {},
                                            Category: {},
                                            VgwTelemetry: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        AcceptedRouteCount: {
                                                            type: "integer"
                                                        },
                                                        CertificateArn: {},
                                                        LastStatusChange: {},
                                                        OutsideIpAddress: {},
                                                        Status: {},
                                                        StatusMessage: {}
                                                    }
                                                }
                                            },
                                            Options: {
                                                type: "structure",
                                                members: {
                                                    StaticRoutesOnly: {
                                                        type: "boolean"
                                                    },
                                                    TunnelOptions: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                DpdTimeoutSeconds: {
                                                                    type: "integer"
                                                                },
                                                                IkeVersions: {
                                                                    shape: "S25"
                                                                },
                                                                OutsideIpAddress: {},
                                                                Phase1DhGroupNumbers: {
                                                                    shape: "Scf"
                                                                },
                                                                Phase1EncryptionAlgorithms: {
                                                                    shape: "S25"
                                                                },
                                                                Phase1IntegrityAlgorithms: {
                                                                    shape: "S25"
                                                                },
                                                                Phase1LifetimeSeconds: {
                                                                    type: "integer"
                                                                },
                                                                Phase2DhGroupNumbers: {
                                                                    shape: "Scf"
                                                                },
                                                                Phase2EncryptionAlgorithms: {
                                                                    shape: "S25"
                                                                },
                                                                Phase2IntegrityAlgorithms: {
                                                                    shape: "S25"
                                                                },
                                                                Phase2LifetimeSeconds: {
                                                                    type: "integer"
                                                                },
                                                                PreSharedKey: {},
                                                                RekeyFuzzPercentage: {
                                                                    type: "integer"
                                                                },
                                                                RekeyMarginTimeSeconds: {
                                                                    type: "integer"
                                                                },
                                                                ReplayWindowSize: {
                                                                    type: "integer"
                                                                },
                                                                TunnelInsideCidr: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            Routes: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DestinationCidrBlock: {},
                                                        State: {}
                                                    }
                                                }
                                            },
                                            TransitGatewayId: {}
                                        }
                                    },
                                    AwsEcrContainerImage: {
                                        type: "structure",
                                        members: {
                                            RegistryId: {},
                                            RepositoryName: {},
                                            Architecture: {},
                                            ImageDigest: {},
                                            ImageTags: {
                                                shape: "S25"
                                            },
                                            ImagePublishedAt: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                Compliance: {
                    type: "structure",
                    members: {
                        Status: {},
                        RelatedRequirements: {
                            shape: "Scl"
                        },
                        StatusReasons: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "ReasonCode" ],
                                members: {
                                    ReasonCode: {},
                                    Description: {}
                                }
                            }
                        }
                    }
                },
                VerificationState: {},
                WorkflowState: {
                    type: "string",
                    deprecated: true,
                    deprecatedMessage: "This filter is deprecated. Instead, use SeverityLabel or FindingProviderFieldsSeverityLabel."
                },
                Workflow: {
                    type: "structure",
                    members: {
                        Status: {}
                    }
                },
                RecordState: {},
                RelatedFindings: {
                    shape: "Sct"
                },
                Note: {
                    type: "structure",
                    required: [ "Text", "UpdatedBy", "UpdatedAt" ],
                    members: {
                        Text: {},
                        UpdatedBy: {},
                        UpdatedAt: {}
                    }
                },
                Vulnerabilities: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Id" ],
                        members: {
                            Id: {},
                            VulnerablePackages: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Version: {},
                                        Epoch: {},
                                        Release: {},
                                        Architecture: {},
                                        PackageManager: {},
                                        FilePath: {}
                                    }
                                }
                            },
                            Cvss: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Version: {},
                                        BaseScore: {
                                            type: "double"
                                        },
                                        BaseVector: {},
                                        Source: {},
                                        Adjustments: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Metric: {},
                                                    Reason: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            RelatedVulnerabilities: {
                                shape: "S13"
                            },
                            Vendor: {
                                type: "structure",
                                required: [ "Name" ],
                                members: {
                                    Name: {},
                                    Url: {},
                                    VendorSeverity: {},
                                    VendorCreatedAt: {},
                                    VendorUpdatedAt: {}
                                }
                            },
                            ReferenceUrls: {
                                shape: "S13"
                            }
                        }
                    }
                },
                PatchSummary: {
                    type: "structure",
                    required: [ "Id" ],
                    members: {
                        Id: {},
                        InstalledCount: {
                            type: "integer"
                        },
                        MissingCount: {
                            type: "integer"
                        },
                        FailedCount: {
                            type: "integer"
                        },
                        InstalledOtherCount: {
                            type: "integer"
                        },
                        InstalledRejectedCount: {
                            type: "integer"
                        },
                        InstalledPendingReboot: {
                            type: "integer"
                        },
                        OperationStartTime: {},
                        OperationEndTime: {},
                        RebootOption: {},
                        Operation: {}
                    }
                },
                Action: {
                    type: "structure",
                    members: {
                        ActionType: {},
                        NetworkConnectionAction: {
                            type: "structure",
                            members: {
                                ConnectionDirection: {},
                                RemoteIpDetails: {
                                    shape: "Sd8"
                                },
                                RemotePortDetails: {
                                    type: "structure",
                                    members: {
                                        Port: {
                                            type: "integer"
                                        },
                                        PortName: {}
                                    }
                                },
                                LocalPortDetails: {
                                    shape: "Sde"
                                },
                                Protocol: {},
                                Blocked: {
                                    type: "boolean"
                                }
                            }
                        },
                        AwsApiCallAction: {
                            type: "structure",
                            members: {
                                Api: {},
                                ServiceName: {},
                                CallerType: {},
                                RemoteIpDetails: {
                                    shape: "Sd8"
                                },
                                DomainDetails: {
                                    type: "structure",
                                    members: {
                                        Domain: {}
                                    }
                                },
                                AffectedResources: {
                                    shape: "Sr"
                                },
                                FirstSeen: {},
                                LastSeen: {}
                            }
                        },
                        DnsRequestAction: {
                            type: "structure",
                            members: {
                                Domain: {},
                                Protocol: {},
                                Blocked: {
                                    type: "boolean"
                                }
                            }
                        },
                        PortProbeAction: {
                            type: "structure",
                            members: {
                                PortProbeDetails: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            LocalPortDetails: {
                                                shape: "Sde"
                                            },
                                            LocalIpDetails: {
                                                type: "structure",
                                                members: {
                                                    IpAddressV4: {}
                                                }
                                            },
                                            RemoteIpDetails: {
                                                shape: "Sd8"
                                            }
                                        }
                                    }
                                },
                                Blocked: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                },
                FindingProviderFields: {
                    type: "structure",
                    members: {
                        Confidence: {
                            type: "integer"
                        },
                        Criticality: {
                            type: "integer"
                        },
                        RelatedFindings: {
                            shape: "Sct"
                        },
                        Severity: {
                            type: "structure",
                            members: {
                                Label: {},
                                Original: {}
                            }
                        },
                        Types: {
                            shape: "Sk"
                        }
                    }
                }
            }
        },
        Sk: {
            type: "list",
            member: {}
        },
        Sr: {
            type: "map",
            key: {},
            value: {}
        },
        Sy: {
            type: "structure",
            members: {
                Begin: {
                    type: "integer"
                },
                End: {
                    type: "integer"
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                Protocol: {},
                Destination: {
                    shape: "S12"
                },
                Source: {
                    shape: "S12"
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                Address: {
                    shape: "S13"
                },
                PortRanges: {
                    type: "list",
                    member: {
                        shape: "Sy"
                    }
                }
            }
        },
        S13: {
            type: "list",
            member: {}
        },
        S1m: {
            type: "structure",
            members: {
                LineRanges: {
                    shape: "S1n"
                },
                OffsetRanges: {
                    shape: "S1n"
                },
                Pages: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            PageNumber: {
                                type: "long"
                            },
                            LineRange: {
                                shape: "S1o"
                            },
                            OffsetRange: {
                                shape: "S1o"
                            }
                        }
                    }
                },
                Records: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            JsonPath: {},
                            RecordIndex: {
                                type: "long"
                            }
                        }
                    }
                },
                Cells: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Column: {
                                type: "long"
                            },
                            Row: {
                                type: "long"
                            },
                            ColumnName: {},
                            CellReference: {}
                        }
                    }
                }
            }
        },
        S1n: {
            type: "list",
            member: {
                shape: "S1o"
            }
        },
        S1o: {
            type: "structure",
            members: {
                Start: {
                    type: "long"
                },
                End: {
                    type: "long"
                },
                StartColumn: {
                    type: "long"
                }
            }
        },
        S25: {
            type: "list",
            member: {}
        },
        S2y: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    IpProtocol: {},
                    FromPort: {
                        type: "integer"
                    },
                    ToPort: {
                        type: "integer"
                    },
                    UserIdGroupPairs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupId: {},
                                GroupName: {},
                                PeeringStatus: {},
                                UserId: {},
                                VpcId: {},
                                VpcPeeringConnectionId: {}
                            }
                        }
                    },
                    IpRanges: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CidrIp: {}
                            }
                        }
                    },
                    Ipv6Ranges: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CidrIpv6: {}
                            }
                        }
                    },
                    PrefixListIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PrefixListId: {}
                            }
                        }
                    }
                }
            }
        },
        S3e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AssociationId: {},
                    Ipv6CidrBlock: {},
                    CidrBlockState: {}
                }
            }
        },
        S46: {
            type: "structure",
            members: {
                CloudWatchLogsLogGroupArn: {},
                Enabled: {
                    type: "boolean"
                }
            }
        },
        S4t: {
            type: "structure",
            members: {
                BlockPublicAcls: {
                    type: "boolean"
                },
                BlockPublicPolicy: {
                    type: "boolean"
                },
                IgnorePublicAcls: {
                    type: "boolean"
                },
                RestrictPublicBuckets: {
                    type: "boolean"
                }
            }
        },
        S5j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PolicyName: {},
                    PolicyArn: {}
                }
            }
        },
        S5l: {
            type: "structure",
            members: {
                PermissionsBoundaryArn: {},
                PermissionsBoundaryType: {}
            }
        },
        S5s: {
            type: "structure",
            members: {
                DetailedMetricsEnabled: {
                    type: "boolean"
                },
                LoggingLevel: {},
                DataTraceEnabled: {
                    type: "boolean"
                },
                ThrottlingBurstLimit: {
                    type: "integer"
                },
                ThrottlingRateLimit: {
                    type: "double"
                }
            }
        },
        S5t: {
            type: "structure",
            members: {
                Format: {},
                DestinationArn: {}
            }
        },
        S63: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AttributeName: {},
                    KeyType: {}
                }
            }
        },
        S65: {
            type: "structure",
            members: {
                NonKeyAttributes: {
                    shape: "S13"
                },
                ProjectionType: {}
            }
        },
        S66: {
            type: "structure",
            members: {
                LastDecreaseDateTime: {},
                LastIncreaseDateTime: {},
                NumberOfDecreasesToday: {
                    type: "integer"
                },
                ReadCapacityUnits: {
                    type: "integer"
                },
                WriteCapacityUnits: {
                    type: "integer"
                }
            }
        },
        S6d: {
            type: "structure",
            members: {
                ReadCapacityUnits: {
                    type: "integer"
                }
            }
        },
        S6s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DomainName: {},
                    ResourceRecord: {
                        type: "structure",
                        members: {
                            Name: {},
                            Type: {},
                            Value: {}
                        }
                    },
                    ValidationDomain: {},
                    ValidationEmails: {
                        shape: "S13"
                    },
                    ValidationMethod: {},
                    ValidationStatus: {}
                }
            }
        },
        S8x: {
            type: "structure",
            members: {
                Address: {},
                Port: {
                    type: "integer"
                },
                HostedZoneId: {}
            }
        },
        S8y: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    VpcSecurityGroupId: {},
                    Status: {}
                }
            }
        },
        S98: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S9e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Domain: {},
                    Status: {},
                    Fqdn: {},
                    IamRoleName: {}
                }
            }
        },
        Scf: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        Scl: {
            type: "list",
            member: {}
        },
        Sct: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ProductArn", "Id" ],
                members: {
                    ProductArn: {},
                    Id: {}
                }
            }
        },
        Sd8: {
            type: "structure",
            members: {
                IpAddressV4: {},
                Organization: {
                    type: "structure",
                    members: {
                        Asn: {
                            type: "integer"
                        },
                        AsnOrg: {},
                        Isp: {},
                        Org: {}
                    }
                },
                Country: {
                    type: "structure",
                    members: {
                        CountryCode: {},
                        CountryName: {}
                    }
                },
                City: {
                    type: "structure",
                    members: {
                        CityName: {}
                    }
                },
                GeoLocation: {
                    type: "structure",
                    members: {
                        Lon: {
                            type: "double"
                        },
                        Lat: {
                            type: "double"
                        }
                    }
                }
            }
        },
        Sde: {
            type: "structure",
            members: {
                Port: {
                    type: "integer"
                },
                PortName: {}
            }
        },
        Sdt: {
            type: "list",
            member: {
                shape: "Sdu"
            }
        },
        Sdu: {
            type: "structure",
            required: [ "Id", "ProductArn" ],
            members: {
                Id: {},
                ProductArn: {}
            }
        },
        Sdv: {
            type: "structure",
            required: [ "Text", "UpdatedBy" ],
            members: {
                Text: {},
                UpdatedBy: {}
            }
        },
        Se4: {
            type: "structure",
            members: {
                ProductArn: {
                    shape: "Se5"
                },
                AwsAccountId: {
                    shape: "Se5"
                },
                Id: {
                    shape: "Se5"
                },
                GeneratorId: {
                    shape: "Se5"
                },
                Region: {
                    shape: "Se5"
                },
                Type: {
                    shape: "Se5"
                },
                FirstObservedAt: {
                    shape: "Se8"
                },
                LastObservedAt: {
                    shape: "Se8"
                },
                CreatedAt: {
                    shape: "Se8"
                },
                UpdatedAt: {
                    shape: "Se8"
                },
                SeverityProduct: {
                    shape: "Sec",
                    deprecated: true,
                    deprecatedMessage: "This filter is deprecated. Instead, use FindingProviderSeverityOriginal."
                },
                SeverityNormalized: {
                    shape: "Sec",
                    deprecated: true,
                    deprecatedMessage: "This filter is deprecated. Instead, use SeverityLabel or FindingProviderFieldsSeverityLabel."
                },
                SeverityLabel: {
                    shape: "Se5"
                },
                Confidence: {
                    shape: "Sec"
                },
                Criticality: {
                    shape: "Sec"
                },
                Title: {
                    shape: "Se5"
                },
                Description: {
                    shape: "Se5"
                },
                RecommendationText: {
                    shape: "Se5"
                },
                SourceUrl: {
                    shape: "Se5"
                },
                ProductFields: {
                    shape: "See"
                },
                ProductName: {
                    shape: "Se5"
                },
                CompanyName: {
                    shape: "Se5"
                },
                UserDefinedFields: {
                    shape: "See"
                },
                MalwareName: {
                    shape: "Se5"
                },
                MalwareType: {
                    shape: "Se5"
                },
                MalwarePath: {
                    shape: "Se5"
                },
                MalwareState: {
                    shape: "Se5"
                },
                NetworkDirection: {
                    shape: "Se5"
                },
                NetworkProtocol: {
                    shape: "Se5"
                },
                NetworkSourceIpV4: {
                    shape: "Seh"
                },
                NetworkSourceIpV6: {
                    shape: "Seh"
                },
                NetworkSourcePort: {
                    shape: "Sec"
                },
                NetworkSourceDomain: {
                    shape: "Se5"
                },
                NetworkSourceMac: {
                    shape: "Se5"
                },
                NetworkDestinationIpV4: {
                    shape: "Seh"
                },
                NetworkDestinationIpV6: {
                    shape: "Seh"
                },
                NetworkDestinationPort: {
                    shape: "Sec"
                },
                NetworkDestinationDomain: {
                    shape: "Se5"
                },
                ProcessName: {
                    shape: "Se5"
                },
                ProcessPath: {
                    shape: "Se5"
                },
                ProcessPid: {
                    shape: "Sec"
                },
                ProcessParentPid: {
                    shape: "Sec"
                },
                ProcessLaunchedAt: {
                    shape: "Se8"
                },
                ProcessTerminatedAt: {
                    shape: "Se8"
                },
                ThreatIntelIndicatorType: {
                    shape: "Se5"
                },
                ThreatIntelIndicatorValue: {
                    shape: "Se5"
                },
                ThreatIntelIndicatorCategory: {
                    shape: "Se5"
                },
                ThreatIntelIndicatorLastObservedAt: {
                    shape: "Se8"
                },
                ThreatIntelIndicatorSource: {
                    shape: "Se5"
                },
                ThreatIntelIndicatorSourceUrl: {
                    shape: "Se5"
                },
                ResourceType: {
                    shape: "Se5"
                },
                ResourceId: {
                    shape: "Se5"
                },
                ResourcePartition: {
                    shape: "Se5"
                },
                ResourceRegion: {
                    shape: "Se5"
                },
                ResourceTags: {
                    shape: "See"
                },
                ResourceAwsEc2InstanceType: {
                    shape: "Se5"
                },
                ResourceAwsEc2InstanceImageId: {
                    shape: "Se5"
                },
                ResourceAwsEc2InstanceIpV4Addresses: {
                    shape: "Seh"
                },
                ResourceAwsEc2InstanceIpV6Addresses: {
                    shape: "Seh"
                },
                ResourceAwsEc2InstanceKeyName: {
                    shape: "Se5"
                },
                ResourceAwsEc2InstanceIamInstanceProfileArn: {
                    shape: "Se5"
                },
                ResourceAwsEc2InstanceVpcId: {
                    shape: "Se5"
                },
                ResourceAwsEc2InstanceSubnetId: {
                    shape: "Se5"
                },
                ResourceAwsEc2InstanceLaunchedAt: {
                    shape: "Se8"
                },
                ResourceAwsS3BucketOwnerId: {
                    shape: "Se5"
                },
                ResourceAwsS3BucketOwnerName: {
                    shape: "Se5"
                },
                ResourceAwsIamAccessKeyUserName: {
                    shape: "Se5",
                    deprecated: true,
                    deprecatedMessage: "This filter is deprecated. Instead, use ResourceAwsIamAccessKeyPrincipalName."
                },
                ResourceAwsIamAccessKeyPrincipalName: {
                    shape: "Se5"
                },
                ResourceAwsIamAccessKeyStatus: {
                    shape: "Se5"
                },
                ResourceAwsIamAccessKeyCreatedAt: {
                    shape: "Se8"
                },
                ResourceAwsIamUserUserName: {
                    shape: "Se5"
                },
                ResourceContainerName: {
                    shape: "Se5"
                },
                ResourceContainerImageId: {
                    shape: "Se5"
                },
                ResourceContainerImageName: {
                    shape: "Se5"
                },
                ResourceContainerLaunchedAt: {
                    shape: "Se8"
                },
                ResourceDetailsOther: {
                    shape: "See"
                },
                ComplianceStatus: {
                    shape: "Se5"
                },
                VerificationState: {
                    shape: "Se5"
                },
                WorkflowState: {
                    shape: "Se5"
                },
                WorkflowStatus: {
                    shape: "Se5"
                },
                RecordState: {
                    shape: "Se5"
                },
                RelatedFindingsProductArn: {
                    shape: "Se5"
                },
                RelatedFindingsId: {
                    shape: "Se5"
                },
                NoteText: {
                    shape: "Se5"
                },
                NoteUpdatedAt: {
                    shape: "Se8"
                },
                NoteUpdatedBy: {
                    shape: "Se5"
                },
                Keyword: {
                    deprecated: true,
                    deprecatedMessage: "The Keyword property is deprecated.",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Value: {}
                        }
                    }
                },
                FindingProviderFieldsConfidence: {
                    shape: "Sec"
                },
                FindingProviderFieldsCriticality: {
                    shape: "Sec"
                },
                FindingProviderFieldsRelatedFindingsId: {
                    shape: "Se5"
                },
                FindingProviderFieldsRelatedFindingsProductArn: {
                    shape: "Se5"
                },
                FindingProviderFieldsSeverityLabel: {
                    shape: "Se5"
                },
                FindingProviderFieldsSeverityOriginal: {
                    shape: "Se5"
                },
                FindingProviderFieldsTypes: {
                    shape: "Se5"
                }
            }
        },
        Se5: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Value: {},
                    Comparison: {}
                }
            }
        },
        Se8: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Start: {},
                    End: {},
                    DateRange: {
                        type: "structure",
                        members: {
                            Value: {
                                type: "integer"
                            },
                            Unit: {}
                        }
                    }
                }
            }
        },
        Sec: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Gte: {
                        type: "double"
                    },
                    Lte: {
                        type: "double"
                    },
                    Eq: {
                        type: "double"
                    }
                }
            }
        },
        See: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {},
                    Comparison: {}
                }
            }
        },
        Seh: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Cidr: {}
                }
            }
        },
        Ser: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AccountId: {},
                    ProcessingResult: {}
                }
            }
        },
        Seu: {
            type: "list",
            member: {}
        },
        Sf5: {
            type: "list",
            member: {}
        },
        Sfv: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sge: {
            type: "map",
            key: {},
            value: {}
        },
        Sgk: {
            type: "structure",
            members: {
                AccountId: {},
                InvitationId: {},
                InvitedAt: {
                    shape: "Sfv"
                },
                MemberStatus: {}
            }
        },
        Sh8: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AccountId: {},
                    Email: {},
                    MasterId: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use AdministratorId instead."
                    },
                    AdministratorId: {},
                    MemberStatus: {},
                    InvitedAt: {
                        shape: "Sfv"
                    },
                    UpdatedAt: {
                        shape: "Sfv"
                    }
                }
            }
        }
    },
    paginators: {
        DescribeActionTargets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ActionTargets"
        },
        DescribeProducts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Products"
        },
        DescribeStandards: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Standards"
        },
        DescribeStandardsControls: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Controls"
        },
        GetEnabledStandards: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "StandardsSubscriptions"
        },
        GetFindings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Findings"
        },
        GetInsights: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Insights"
        },
        ListEnabledProductsForImport: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ProductSubscriptions"
        },
        ListInvitations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Invitations"
        },
        ListMembers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Members"
        },
        ListOrganizationAdminAccounts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AdminAccounts"
        }
    }
};

AWS.apiLoader.services["appmesh"] = {};

AWS.AppMesh = AWS.Service.defineService("appmesh", [ "2018-10-01", "2019-01-25" ]);

AWS.apiLoader.services["appmesh"]["2019-01-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-01-25",
        endpointPrefix: "appmesh",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS App Mesh",
        serviceId: "App Mesh",
        signatureVersion: "v4",
        signingName: "appmesh",
        uid: "appmesh-2019-01-25"
    },
    operations: {
        CreateGatewayRoute: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "gatewayRouteName", "meshName", "spec", "virtualGatewayName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    gatewayRouteName: {},
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S5"
                    },
                    tags: {
                        shape: "S19"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayRoute" ],
                members: {
                    gatewayRoute: {
                        shape: "S1e"
                    }
                },
                payload: "gatewayRoute"
            },
            idempotent: true
        },
        CreateMesh: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {},
                    spec: {
                        shape: "S1l"
                    },
                    tags: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "mesh" ],
                members: {
                    mesh: {
                        shape: "S1p"
                    }
                },
                payload: "mesh"
            },
            idempotent: true
        },
        CreateRoute: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "routeName", "spec", "virtualRouterName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    routeName: {},
                    spec: {
                        shape: "S1t"
                    },
                    tags: {
                        shape: "S19"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "route" ],
                members: {
                    route: {
                        shape: "S2t"
                    }
                },
                payload: "route"
            },
            idempotent: true
        },
        CreateVirtualGateway: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateways",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualGatewayName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S2x"
                    },
                    tags: {
                        shape: "S19"
                    },
                    virtualGatewayName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "virtualGateway" ],
                members: {
                    virtualGateway: {
                        shape: "S47"
                    }
                },
                payload: "virtualGateway"
            },
            idempotent: true
        },
        CreateVirtualNode: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualNodes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualNodeName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S4b"
                    },
                    tags: {
                        shape: "S19"
                    },
                    virtualNodeName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "virtualNode" ],
                members: {
                    virtualNode: {
                        shape: "S5t"
                    }
                },
                payload: "virtualNode"
            },
            idempotent: true
        },
        CreateVirtualRouter: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouters",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualRouterName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S5x"
                    },
                    tags: {
                        shape: "S19"
                    },
                    virtualRouterName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "virtualRouter" ],
                members: {
                    virtualRouter: {
                        shape: "S61"
                    }
                },
                payload: "virtualRouter"
            },
            idempotent: true
        },
        CreateVirtualService: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualServices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualServiceName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S65"
                    },
                    tags: {
                        shape: "S19"
                    },
                    virtualServiceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "virtualService" ],
                members: {
                    virtualService: {
                        shape: "S6a"
                    }
                },
                payload: "virtualService"
            },
            idempotent: true
        },
        DeleteGatewayRoute: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "gatewayRouteName", "meshName", "virtualGatewayName" ],
                members: {
                    gatewayRouteName: {
                        location: "uri",
                        locationName: "gatewayRouteName"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayRoute" ],
                members: {
                    gatewayRoute: {
                        shape: "S1e"
                    }
                },
                payload: "gatewayRoute"
            },
            idempotent: true
        },
        DeleteMesh: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "mesh" ],
                members: {
                    mesh: {
                        shape: "S1p"
                    }
                },
                payload: "mesh"
            },
            idempotent: true
        },
        DeleteRoute: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "routeName", "virtualRouterName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    routeName: {
                        location: "uri",
                        locationName: "routeName"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "route" ],
                members: {
                    route: {
                        shape: "S2t"
                    }
                },
                payload: "route"
            },
            idempotent: true
        },
        DeleteVirtualGateway: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualGatewayName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualGateway" ],
                members: {
                    virtualGateway: {
                        shape: "S47"
                    }
                },
                payload: "virtualGateway"
            },
            idempotent: true
        },
        DeleteVirtualNode: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualNodeName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualNodeName: {
                        location: "uri",
                        locationName: "virtualNodeName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualNode" ],
                members: {
                    virtualNode: {
                        shape: "S5t"
                    }
                },
                payload: "virtualNode"
            },
            idempotent: true
        },
        DeleteVirtualRouter: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualRouterName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualRouter" ],
                members: {
                    virtualRouter: {
                        shape: "S61"
                    }
                },
                payload: "virtualRouter"
            },
            idempotent: true
        },
        DeleteVirtualService: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualServiceName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualServiceName: {
                        location: "uri",
                        locationName: "virtualServiceName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualService" ],
                members: {
                    virtualService: {
                        shape: "S6a"
                    }
                },
                payload: "virtualService"
            },
            idempotent: true
        },
        DescribeGatewayRoute: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "gatewayRouteName", "meshName", "virtualGatewayName" ],
                members: {
                    gatewayRouteName: {
                        location: "uri",
                        locationName: "gatewayRouteName"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayRoute" ],
                members: {
                    gatewayRoute: {
                        shape: "S1e"
                    }
                },
                payload: "gatewayRoute"
            }
        },
        DescribeMesh: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "mesh" ],
                members: {
                    mesh: {
                        shape: "S1p"
                    }
                },
                payload: "mesh"
            }
        },
        DescribeRoute: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "routeName", "virtualRouterName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    routeName: {
                        location: "uri",
                        locationName: "routeName"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "route" ],
                members: {
                    route: {
                        shape: "S2t"
                    }
                },
                payload: "route"
            }
        },
        DescribeVirtualGateway: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualGatewayName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualGateway" ],
                members: {
                    virtualGateway: {
                        shape: "S47"
                    }
                },
                payload: "virtualGateway"
            }
        },
        DescribeVirtualNode: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualNodeName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualNodeName: {
                        location: "uri",
                        locationName: "virtualNodeName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualNode" ],
                members: {
                    virtualNode: {
                        shape: "S5t"
                    }
                },
                payload: "virtualNode"
            }
        },
        DescribeVirtualRouter: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualRouterName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualRouter" ],
                members: {
                    virtualRouter: {
                        shape: "S61"
                    }
                },
                payload: "virtualRouter"
            }
        },
        DescribeVirtualService: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualServiceName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualServiceName: {
                        location: "uri",
                        locationName: "virtualServiceName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualService" ],
                members: {
                    virtualService: {
                        shape: "S6a"
                    }
                },
                payload: "virtualService"
            }
        },
        ListGatewayRoutes: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualGatewayName" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayRoutes" ],
                members: {
                    gatewayRoutes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "gatewayRouteName", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "version", "virtualGatewayName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                gatewayRouteName: {},
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                version: {
                                    type: "long"
                                },
                                virtualGatewayName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListMeshes: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "meshes" ],
                members: {
                    meshes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "version" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                version: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRoutes: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualRouterName" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "routes" ],
                members: {
                    nextToken: {},
                    routes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "routeName", "version", "virtualRouterName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                routeName: {},
                                version: {
                                    type: "long"
                                },
                                virtualRouterName: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v20190125/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    nextToken: {},
                    tags: {
                        shape: "S19"
                    }
                }
            }
        },
        ListVirtualGateways: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateways",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualGateways" ],
                members: {
                    nextToken: {},
                    virtualGateways: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "version", "virtualGatewayName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                version: {
                                    type: "long"
                                },
                                virtualGatewayName: {}
                            }
                        }
                    }
                }
            }
        },
        ListVirtualNodes: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualNodes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualNodes" ],
                members: {
                    nextToken: {},
                    virtualNodes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "version", "virtualNodeName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                version: {
                                    type: "long"
                                },
                                virtualNodeName: {}
                            }
                        }
                    }
                }
            }
        },
        ListVirtualRouters: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouters",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualRouters" ],
                members: {
                    nextToken: {},
                    virtualRouters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "version", "virtualRouterName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                version: {
                                    type: "long"
                                },
                                virtualRouterName: {}
                            }
                        }
                    }
                }
            }
        },
        ListVirtualServices: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualServices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualServices" ],
                members: {
                    nextToken: {},
                    virtualServices: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "version", "virtualServiceName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                version: {
                                    type: "long"
                                },
                                virtualServiceName: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/tag",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/untag",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateGatewayRoute: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "gatewayRouteName", "meshName", "spec", "virtualGatewayName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    gatewayRouteName: {
                        location: "uri",
                        locationName: "gatewayRouteName"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S5"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayRoute" ],
                members: {
                    gatewayRoute: {
                        shape: "S1e"
                    }
                },
                payload: "gatewayRoute"
            },
            idempotent: true
        },
        UpdateMesh: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    spec: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "mesh" ],
                members: {
                    mesh: {
                        shape: "S1p"
                    }
                },
                payload: "mesh"
            },
            idempotent: true
        },
        UpdateRoute: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "routeName", "spec", "virtualRouterName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    routeName: {
                        location: "uri",
                        locationName: "routeName"
                    },
                    spec: {
                        shape: "S1t"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "route" ],
                members: {
                    route: {
                        shape: "S2t"
                    }
                },
                payload: "route"
            },
            idempotent: true
        },
        UpdateVirtualGateway: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualGatewayName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S2x"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualGateway" ],
                members: {
                    virtualGateway: {
                        shape: "S47"
                    }
                },
                payload: "virtualGateway"
            },
            idempotent: true
        },
        UpdateVirtualNode: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualNodeName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S4b"
                    },
                    virtualNodeName: {
                        location: "uri",
                        locationName: "virtualNodeName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualNode" ],
                members: {
                    virtualNode: {
                        shape: "S5t"
                    }
                },
                payload: "virtualNode"
            },
            idempotent: true
        },
        UpdateVirtualRouter: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualRouterName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S5x"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualRouter" ],
                members: {
                    virtualRouter: {
                        shape: "S61"
                    }
                },
                payload: "virtualRouter"
            },
            idempotent: true
        },
        UpdateVirtualService: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualServiceName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S65"
                    },
                    virtualServiceName: {
                        location: "uri",
                        locationName: "virtualServiceName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualService" ],
                members: {
                    virtualService: {
                        shape: "S6a"
                    }
                },
                payload: "virtualService"
            },
            idempotent: true
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                grpcRoute: {
                    type: "structure",
                    required: [ "action", "match" ],
                    members: {
                        action: {
                            type: "structure",
                            required: [ "target" ],
                            members: {
                                rewrite: {
                                    type: "structure",
                                    members: {
                                        hostname: {
                                            shape: "S9"
                                        }
                                    }
                                },
                                target: {
                                    shape: "Sb"
                                }
                            }
                        },
                        match: {
                            type: "structure",
                            members: {
                                hostname: {
                                    shape: "Se"
                                },
                                metadata: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name" ],
                                        members: {
                                            invert: {
                                                type: "boolean"
                                            },
                                            match: {
                                                type: "structure",
                                                members: {
                                                    exact: {},
                                                    prefix: {},
                                                    range: {
                                                        shape: "Sm"
                                                    },
                                                    regex: {},
                                                    suffix: {}
                                                },
                                                union: true
                                            },
                                            name: {}
                                        }
                                    }
                                },
                                serviceName: {}
                            }
                        }
                    }
                },
                http2Route: {
                    shape: "Sq"
                },
                httpRoute: {
                    shape: "Sq"
                },
                priority: {
                    type: "integer"
                }
            }
        },
        S9: {
            type: "structure",
            members: {
                defaultTargetHostname: {}
            }
        },
        Sb: {
            type: "structure",
            required: [ "virtualService" ],
            members: {
                virtualService: {
                    type: "structure",
                    required: [ "virtualServiceName" ],
                    members: {
                        virtualServiceName: {}
                    }
                }
            }
        },
        Se: {
            type: "structure",
            members: {
                exact: {},
                suffix: {}
            }
        },
        Sm: {
            type: "structure",
            required: [ "end", "start" ],
            members: {
                end: {
                    type: "long"
                },
                start: {
                    type: "long"
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "action", "match" ],
            members: {
                action: {
                    type: "structure",
                    required: [ "target" ],
                    members: {
                        rewrite: {
                            type: "structure",
                            members: {
                                hostname: {
                                    shape: "S9"
                                },
                                path: {
                                    type: "structure",
                                    members: {
                                        exact: {}
                                    }
                                },
                                prefix: {
                                    type: "structure",
                                    members: {
                                        defaultPrefix: {},
                                        value: {}
                                    }
                                }
                            }
                        },
                        target: {
                            shape: "Sb"
                        }
                    }
                },
                match: {
                    type: "structure",
                    members: {
                        headers: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "name" ],
                                members: {
                                    invert: {
                                        type: "boolean"
                                    },
                                    match: {
                                        shape: "S10"
                                    },
                                    name: {}
                                }
                            }
                        },
                        hostname: {
                            shape: "Se"
                        },
                        method: {},
                        path: {
                            shape: "S12"
                        },
                        prefix: {},
                        queryParameters: {
                            shape: "S14"
                        }
                    }
                }
            }
        },
        S10: {
            type: "structure",
            members: {
                exact: {},
                prefix: {},
                range: {
                    shape: "Sm"
                },
                regex: {},
                suffix: {}
            },
            union: true
        },
        S12: {
            type: "structure",
            members: {
                exact: {},
                regex: {}
            }
        },
        S14: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name" ],
                members: {
                    match: {
                        type: "structure",
                        members: {
                            exact: {}
                        }
                    },
                    name: {}
                }
            }
        },
        S19: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S1e: {
            type: "structure",
            required: [ "gatewayRouteName", "meshName", "metadata", "spec", "status", "virtualGatewayName" ],
            members: {
                gatewayRouteName: {},
                meshName: {},
                metadata: {
                    shape: "S1f"
                },
                spec: {
                    shape: "S5"
                },
                status: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        status: {}
                    }
                },
                virtualGatewayName: {}
            }
        },
        S1f: {
            type: "structure",
            required: [ "arn", "createdAt", "lastUpdatedAt", "meshOwner", "resourceOwner", "uid", "version" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                lastUpdatedAt: {
                    type: "timestamp"
                },
                meshOwner: {},
                resourceOwner: {},
                uid: {},
                version: {
                    type: "long"
                }
            }
        },
        S1l: {
            type: "structure",
            members: {
                egressFilter: {
                    type: "structure",
                    required: [ "type" ],
                    members: {
                        type: {}
                    }
                }
            }
        },
        S1p: {
            type: "structure",
            required: [ "meshName", "metadata", "spec", "status" ],
            members: {
                meshName: {},
                metadata: {
                    shape: "S1f"
                },
                spec: {
                    shape: "S1l"
                },
                status: {
                    type: "structure",
                    members: {
                        status: {}
                    }
                }
            }
        },
        S1t: {
            type: "structure",
            members: {
                grpcRoute: {
                    type: "structure",
                    required: [ "action", "match" ],
                    members: {
                        action: {
                            type: "structure",
                            required: [ "weightedTargets" ],
                            members: {
                                weightedTargets: {
                                    shape: "S1w"
                                }
                            }
                        },
                        match: {
                            type: "structure",
                            members: {
                                metadata: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name" ],
                                        members: {
                                            invert: {
                                                type: "boolean"
                                            },
                                            match: {
                                                type: "structure",
                                                members: {
                                                    exact: {},
                                                    prefix: {},
                                                    range: {
                                                        shape: "Sm"
                                                    },
                                                    regex: {},
                                                    suffix: {}
                                                },
                                                union: true
                                            },
                                            name: {}
                                        }
                                    }
                                },
                                methodName: {},
                                serviceName: {}
                            }
                        },
                        retryPolicy: {
                            type: "structure",
                            required: [ "maxRetries", "perRetryTimeout" ],
                            members: {
                                grpcRetryEvents: {
                                    type: "list",
                                    member: {}
                                },
                                httpRetryEvents: {
                                    shape: "S27"
                                },
                                maxRetries: {
                                    type: "long"
                                },
                                perRetryTimeout: {
                                    shape: "S2a"
                                },
                                tcpRetryEvents: {
                                    shape: "S2d"
                                }
                            }
                        },
                        timeout: {
                            shape: "S2f"
                        }
                    }
                },
                http2Route: {
                    shape: "S2g"
                },
                httpRoute: {
                    shape: "S2g"
                },
                priority: {
                    type: "integer"
                },
                tcpRoute: {
                    type: "structure",
                    required: [ "action" ],
                    members: {
                        action: {
                            type: "structure",
                            required: [ "weightedTargets" ],
                            members: {
                                weightedTargets: {
                                    shape: "S1w"
                                }
                            }
                        },
                        timeout: {
                            shape: "S2r"
                        }
                    }
                }
            }
        },
        S1w: {
            type: "list",
            member: {
                type: "structure",
                required: [ "virtualNode", "weight" ],
                members: {
                    virtualNode: {},
                    weight: {
                        type: "integer"
                    }
                }
            }
        },
        S27: {
            type: "list",
            member: {}
        },
        S2a: {
            type: "structure",
            members: {
                unit: {},
                value: {
                    type: "long"
                }
            }
        },
        S2d: {
            type: "list",
            member: {}
        },
        S2f: {
            type: "structure",
            members: {
                idle: {
                    shape: "S2a"
                },
                perRequest: {
                    shape: "S2a"
                }
            }
        },
        S2g: {
            type: "structure",
            required: [ "action", "match" ],
            members: {
                action: {
                    type: "structure",
                    required: [ "weightedTargets" ],
                    members: {
                        weightedTargets: {
                            shape: "S1w"
                        }
                    }
                },
                match: {
                    type: "structure",
                    members: {
                        headers: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "name" ],
                                members: {
                                    invert: {
                                        type: "boolean"
                                    },
                                    match: {
                                        shape: "S10"
                                    },
                                    name: {}
                                }
                            }
                        },
                        method: {},
                        path: {
                            shape: "S12"
                        },
                        prefix: {},
                        queryParameters: {
                            shape: "S14"
                        },
                        scheme: {}
                    }
                },
                retryPolicy: {
                    type: "structure",
                    required: [ "maxRetries", "perRetryTimeout" ],
                    members: {
                        httpRetryEvents: {
                            shape: "S27"
                        },
                        maxRetries: {
                            type: "long"
                        },
                        perRetryTimeout: {
                            shape: "S2a"
                        },
                        tcpRetryEvents: {
                            shape: "S2d"
                        }
                    }
                },
                timeout: {
                    shape: "S2n"
                }
            }
        },
        S2n: {
            type: "structure",
            members: {
                idle: {
                    shape: "S2a"
                },
                perRequest: {
                    shape: "S2a"
                }
            }
        },
        S2r: {
            type: "structure",
            members: {
                idle: {
                    shape: "S2a"
                }
            }
        },
        S2t: {
            type: "structure",
            required: [ "meshName", "metadata", "routeName", "spec", "status", "virtualRouterName" ],
            members: {
                meshName: {},
                metadata: {
                    shape: "S1f"
                },
                routeName: {},
                spec: {
                    shape: "S1t"
                },
                status: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        status: {}
                    }
                },
                virtualRouterName: {}
            }
        },
        S2x: {
            type: "structure",
            required: [ "listeners" ],
            members: {
                backendDefaults: {
                    type: "structure",
                    members: {
                        clientPolicy: {
                            type: "structure",
                            members: {
                                tls: {
                                    type: "structure",
                                    required: [ "validation" ],
                                    members: {
                                        certificate: {
                                            type: "structure",
                                            members: {
                                                file: {
                                                    shape: "S32"
                                                },
                                                sds: {
                                                    shape: "S34"
                                                }
                                            },
                                            union: true
                                        },
                                        enforce: {
                                            type: "boolean"
                                        },
                                        ports: {
                                            shape: "S36"
                                        },
                                        validation: {
                                            type: "structure",
                                            required: [ "trust" ],
                                            members: {
                                                subjectAlternativeNames: {
                                                    shape: "S39"
                                                },
                                                trust: {
                                                    type: "structure",
                                                    members: {
                                                        acm: {
                                                            type: "structure",
                                                            required: [ "certificateAuthorityArns" ],
                                                            members: {
                                                                certificateAuthorityArns: {
                                                                    type: "list",
                                                                    member: {}
                                                                }
                                                            }
                                                        },
                                                        file: {
                                                            shape: "S3g"
                                                        },
                                                        sds: {
                                                            shape: "S3h"
                                                        }
                                                    },
                                                    union: true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                listeners: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "portMapping" ],
                        members: {
                            connectionPool: {
                                type: "structure",
                                members: {
                                    grpc: {
                                        type: "structure",
                                        required: [ "maxRequests" ],
                                        members: {
                                            maxRequests: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    http: {
                                        type: "structure",
                                        required: [ "maxConnections" ],
                                        members: {
                                            maxConnections: {
                                                type: "integer"
                                            },
                                            maxPendingRequests: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    http2: {
                                        type: "structure",
                                        required: [ "maxRequests" ],
                                        members: {
                                            maxRequests: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                union: true
                            },
                            healthCheck: {
                                type: "structure",
                                required: [ "healthyThreshold", "intervalMillis", "protocol", "timeoutMillis", "unhealthyThreshold" ],
                                members: {
                                    healthyThreshold: {
                                        type: "integer"
                                    },
                                    intervalMillis: {
                                        type: "long"
                                    },
                                    path: {},
                                    port: {
                                        type: "integer"
                                    },
                                    protocol: {},
                                    timeoutMillis: {
                                        type: "long"
                                    },
                                    unhealthyThreshold: {
                                        type: "integer"
                                    }
                                }
                            },
                            portMapping: {
                                type: "structure",
                                required: [ "port", "protocol" ],
                                members: {
                                    port: {
                                        type: "integer"
                                    },
                                    protocol: {}
                                }
                            },
                            tls: {
                                type: "structure",
                                required: [ "certificate", "mode" ],
                                members: {
                                    certificate: {
                                        type: "structure",
                                        members: {
                                            acm: {
                                                type: "structure",
                                                required: [ "certificateArn" ],
                                                members: {
                                                    certificateArn: {}
                                                }
                                            },
                                            file: {
                                                shape: "S32"
                                            },
                                            sds: {
                                                shape: "S34"
                                            }
                                        },
                                        union: true
                                    },
                                    mode: {},
                                    validation: {
                                        type: "structure",
                                        required: [ "trust" ],
                                        members: {
                                            subjectAlternativeNames: {
                                                shape: "S39"
                                            },
                                            trust: {
                                                type: "structure",
                                                members: {
                                                    file: {
                                                        shape: "S3g"
                                                    },
                                                    sds: {
                                                        shape: "S3h"
                                                    }
                                                },
                                                union: true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                logging: {
                    type: "structure",
                    members: {
                        accessLog: {
                            type: "structure",
                            members: {
                                file: {
                                    type: "structure",
                                    required: [ "path" ],
                                    members: {
                                        path: {}
                                    }
                                }
                            },
                            union: true
                        }
                    }
                }
            }
        },
        S32: {
            type: "structure",
            required: [ "certificateChain", "privateKey" ],
            members: {
                certificateChain: {},
                privateKey: {}
            }
        },
        S34: {
            type: "structure",
            required: [ "secretName" ],
            members: {
                secretName: {}
            }
        },
        S36: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        S39: {
            type: "structure",
            required: [ "match" ],
            members: {
                match: {
                    type: "structure",
                    required: [ "exact" ],
                    members: {
                        exact: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S3g: {
            type: "structure",
            required: [ "certificateChain" ],
            members: {
                certificateChain: {}
            }
        },
        S3h: {
            type: "structure",
            required: [ "secretName" ],
            members: {
                secretName: {}
            }
        },
        S47: {
            type: "structure",
            required: [ "meshName", "metadata", "spec", "status", "virtualGatewayName" ],
            members: {
                meshName: {},
                metadata: {
                    shape: "S1f"
                },
                spec: {
                    shape: "S2x"
                },
                status: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        status: {}
                    }
                },
                virtualGatewayName: {}
            }
        },
        S4b: {
            type: "structure",
            members: {
                backendDefaults: {
                    type: "structure",
                    members: {
                        clientPolicy: {
                            shape: "S4d"
                        }
                    }
                },
                backends: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            virtualService: {
                                type: "structure",
                                required: [ "virtualServiceName" ],
                                members: {
                                    clientPolicy: {
                                        shape: "S4d"
                                    },
                                    virtualServiceName: {}
                                }
                            }
                        },
                        union: true
                    }
                },
                listeners: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "portMapping" ],
                        members: {
                            connectionPool: {
                                type: "structure",
                                members: {
                                    grpc: {
                                        type: "structure",
                                        required: [ "maxRequests" ],
                                        members: {
                                            maxRequests: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    http: {
                                        type: "structure",
                                        required: [ "maxConnections" ],
                                        members: {
                                            maxConnections: {
                                                type: "integer"
                                            },
                                            maxPendingRequests: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    http2: {
                                        type: "structure",
                                        required: [ "maxRequests" ],
                                        members: {
                                            maxRequests: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    tcp: {
                                        type: "structure",
                                        required: [ "maxConnections" ],
                                        members: {
                                            maxConnections: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                union: true
                            },
                            healthCheck: {
                                type: "structure",
                                required: [ "healthyThreshold", "intervalMillis", "protocol", "timeoutMillis", "unhealthyThreshold" ],
                                members: {
                                    healthyThreshold: {
                                        type: "integer"
                                    },
                                    intervalMillis: {
                                        type: "long"
                                    },
                                    path: {},
                                    port: {
                                        type: "integer"
                                    },
                                    protocol: {},
                                    timeoutMillis: {
                                        type: "long"
                                    },
                                    unhealthyThreshold: {
                                        type: "integer"
                                    }
                                }
                            },
                            outlierDetection: {
                                type: "structure",
                                required: [ "baseEjectionDuration", "interval", "maxEjectionPercent", "maxServerErrors" ],
                                members: {
                                    baseEjectionDuration: {
                                        shape: "S2a"
                                    },
                                    interval: {
                                        shape: "S2a"
                                    },
                                    maxEjectionPercent: {
                                        type: "integer"
                                    },
                                    maxServerErrors: {
                                        type: "long"
                                    }
                                }
                            },
                            portMapping: {
                                shape: "S57"
                            },
                            timeout: {
                                type: "structure",
                                members: {
                                    grpc: {
                                        shape: "S2f"
                                    },
                                    http: {
                                        shape: "S2n"
                                    },
                                    http2: {
                                        shape: "S2n"
                                    },
                                    tcp: {
                                        shape: "S2r"
                                    }
                                },
                                union: true
                            },
                            tls: {
                                type: "structure",
                                required: [ "certificate", "mode" ],
                                members: {
                                    certificate: {
                                        type: "structure",
                                        members: {
                                            acm: {
                                                type: "structure",
                                                required: [ "certificateArn" ],
                                                members: {
                                                    certificateArn: {}
                                                }
                                            },
                                            file: {
                                                shape: "S4g"
                                            },
                                            sds: {
                                                shape: "S4h"
                                            }
                                        },
                                        union: true
                                    },
                                    mode: {},
                                    validation: {
                                        type: "structure",
                                        required: [ "trust" ],
                                        members: {
                                            subjectAlternativeNames: {
                                                shape: "S39"
                                            },
                                            trust: {
                                                type: "structure",
                                                members: {
                                                    file: {
                                                        shape: "S4n"
                                                    },
                                                    sds: {
                                                        shape: "S4o"
                                                    }
                                                },
                                                union: true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                logging: {
                    type: "structure",
                    members: {
                        accessLog: {
                            type: "structure",
                            members: {
                                file: {
                                    type: "structure",
                                    required: [ "path" ],
                                    members: {
                                        path: {}
                                    }
                                }
                            },
                            union: true
                        }
                    }
                },
                serviceDiscovery: {
                    type: "structure",
                    members: {
                        awsCloudMap: {
                            type: "structure",
                            required: [ "namespaceName", "serviceName" ],
                            members: {
                                attributes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "key", "value" ],
                                        members: {
                                            key: {},
                                            value: {}
                                        }
                                    }
                                },
                                namespaceName: {},
                                serviceName: {}
                            }
                        },
                        dns: {
                            type: "structure",
                            required: [ "hostname" ],
                            members: {
                                hostname: {},
                                responseType: {}
                            }
                        }
                    },
                    union: true
                }
            }
        },
        S4d: {
            type: "structure",
            members: {
                tls: {
                    type: "structure",
                    required: [ "validation" ],
                    members: {
                        certificate: {
                            type: "structure",
                            members: {
                                file: {
                                    shape: "S4g"
                                },
                                sds: {
                                    shape: "S4h"
                                }
                            },
                            union: true
                        },
                        enforce: {
                            type: "boolean"
                        },
                        ports: {
                            shape: "S36"
                        },
                        validation: {
                            type: "structure",
                            required: [ "trust" ],
                            members: {
                                subjectAlternativeNames: {
                                    shape: "S39"
                                },
                                trust: {
                                    type: "structure",
                                    members: {
                                        acm: {
                                            type: "structure",
                                            required: [ "certificateAuthorityArns" ],
                                            members: {
                                                certificateAuthorityArns: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        },
                                        file: {
                                            shape: "S4n"
                                        },
                                        sds: {
                                            shape: "S4o"
                                        }
                                    },
                                    union: true
                                }
                            }
                        }
                    }
                }
            }
        },
        S4g: {
            type: "structure",
            required: [ "certificateChain", "privateKey" ],
            members: {
                certificateChain: {},
                privateKey: {}
            }
        },
        S4h: {
            type: "structure",
            required: [ "secretName" ],
            members: {
                secretName: {}
            }
        },
        S4n: {
            type: "structure",
            required: [ "certificateChain" ],
            members: {
                certificateChain: {}
            }
        },
        S4o: {
            type: "structure",
            required: [ "secretName" ],
            members: {
                secretName: {}
            }
        },
        S57: {
            type: "structure",
            required: [ "port", "protocol" ],
            members: {
                port: {
                    type: "integer"
                },
                protocol: {}
            }
        },
        S5t: {
            type: "structure",
            required: [ "meshName", "metadata", "spec", "status", "virtualNodeName" ],
            members: {
                meshName: {},
                metadata: {
                    shape: "S1f"
                },
                spec: {
                    shape: "S4b"
                },
                status: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        status: {}
                    }
                },
                virtualNodeName: {}
            }
        },
        S5x: {
            type: "structure",
            members: {
                listeners: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "portMapping" ],
                        members: {
                            portMapping: {
                                shape: "S57"
                            }
                        }
                    }
                }
            }
        },
        S61: {
            type: "structure",
            required: [ "meshName", "metadata", "spec", "status", "virtualRouterName" ],
            members: {
                meshName: {},
                metadata: {
                    shape: "S1f"
                },
                spec: {
                    shape: "S5x"
                },
                status: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        status: {}
                    }
                },
                virtualRouterName: {}
            }
        },
        S65: {
            type: "structure",
            members: {
                provider: {
                    type: "structure",
                    members: {
                        virtualNode: {
                            type: "structure",
                            required: [ "virtualNodeName" ],
                            members: {
                                virtualNodeName: {}
                            }
                        },
                        virtualRouter: {
                            type: "structure",
                            required: [ "virtualRouterName" ],
                            members: {
                                virtualRouterName: {}
                            }
                        }
                    },
                    union: true
                }
            }
        },
        S6a: {
            type: "structure",
            required: [ "meshName", "metadata", "spec", "status", "virtualServiceName" ],
            members: {
                meshName: {},
                metadata: {
                    shape: "S1f"
                },
                spec: {
                    shape: "S65"
                },
                status: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        status: {}
                    }
                },
                virtualServiceName: {}
            }
        }
    },
    paginators: {
        ListGatewayRoutes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "gatewayRoutes"
        },
        ListMeshes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "meshes"
        },
        ListRoutes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "routes"
        },
        ListTagsForResource: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "tags"
        },
        ListVirtualGateways: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "virtualGateways"
        },
        ListVirtualNodes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "virtualNodes"
        },
        ListVirtualRouters: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "virtualRouters"
        },
        ListVirtualServices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "virtualServices"
        }
    }
};

AWS.apiLoader.services["licensemanager"] = {};

AWS.LicenseManager = AWS.Service.defineService("licensemanager", [ "2018-08-01" ]);

AWS.apiLoader.services["licensemanager"]["2018-08-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-08-01",
        endpointPrefix: "license-manager",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS License Manager",
        serviceId: "License Manager",
        signatureVersion: "v4",
        targetPrefix: "AWSLicenseManager",
        uid: "license-manager-2018-08-01"
    },
    operations: {
        AcceptGrant: {
            input: {
                type: "structure",
                required: [ "GrantArn" ],
                members: {
                    GrantArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GrantArn: {},
                    Status: {},
                    Version: {}
                }
            }
        },
        CheckInLicense: {
            input: {
                type: "structure",
                required: [ "LicenseConsumptionToken" ],
                members: {
                    LicenseConsumptionToken: {},
                    Beneficiary: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CheckoutBorrowLicense: {
            input: {
                type: "structure",
                required: [ "LicenseArn", "Entitlements", "DigitalSignatureMethod", "ClientToken" ],
                members: {
                    LicenseArn: {},
                    Entitlements: {
                        shape: "S9"
                    },
                    DigitalSignatureMethod: {},
                    NodeId: {},
                    CheckoutMetadata: {
                        shape: "Sd"
                    },
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseArn: {},
                    LicenseConsumptionToken: {},
                    EntitlementsAllowed: {
                        shape: "S9"
                    },
                    NodeId: {},
                    SignedToken: {},
                    IssuedAt: {},
                    Expiration: {},
                    CheckoutMetadata: {
                        shape: "Sd"
                    }
                }
            }
        },
        CheckoutLicense: {
            input: {
                type: "structure",
                required: [ "ProductSKU", "CheckoutType", "KeyFingerprint", "Entitlements", "ClientToken" ],
                members: {
                    ProductSKU: {},
                    CheckoutType: {},
                    KeyFingerprint: {},
                    Entitlements: {
                        shape: "S9"
                    },
                    ClientToken: {},
                    Beneficiary: {},
                    NodeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CheckoutType: {},
                    LicenseConsumptionToken: {},
                    EntitlementsAllowed: {
                        shape: "S9"
                    },
                    SignedToken: {},
                    NodeId: {},
                    IssuedAt: {},
                    Expiration: {},
                    LicenseArn: {}
                }
            }
        },
        CreateGrant: {
            input: {
                type: "structure",
                required: [ "ClientToken", "GrantName", "LicenseArn", "Principals", "HomeRegion", "AllowedOperations" ],
                members: {
                    ClientToken: {},
                    GrantName: {},
                    LicenseArn: {},
                    Principals: {
                        type: "list",
                        member: {}
                    },
                    HomeRegion: {},
                    AllowedOperations: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GrantArn: {},
                    Status: {},
                    Version: {}
                }
            }
        },
        CreateGrantVersion: {
            input: {
                type: "structure",
                required: [ "ClientToken", "GrantArn" ],
                members: {
                    ClientToken: {},
                    GrantArn: {},
                    GrantName: {},
                    AllowedOperations: {
                        shape: "So"
                    },
                    Status: {},
                    StatusReason: {},
                    SourceVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GrantArn: {},
                    Status: {},
                    Version: {}
                }
            }
        },
        CreateLicense: {
            input: {
                type: "structure",
                required: [ "LicenseName", "ProductName", "ProductSKU", "Issuer", "HomeRegion", "Validity", "Entitlements", "Beneficiary", "ConsumptionConfiguration", "ClientToken" ],
                members: {
                    LicenseName: {},
                    ProductName: {},
                    ProductSKU: {},
                    Issuer: {
                        shape: "Sv"
                    },
                    HomeRegion: {},
                    Validity: {
                        shape: "Sw"
                    },
                    Entitlements: {
                        shape: "Sx"
                    },
                    Beneficiary: {},
                    ConsumptionConfiguration: {
                        shape: "S12"
                    },
                    LicenseMetadata: {
                        shape: "Sd"
                    },
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseArn: {},
                    Status: {},
                    Version: {}
                }
            }
        },
        CreateLicenseConfiguration: {
            input: {
                type: "structure",
                required: [ "Name", "LicenseCountingType" ],
                members: {
                    Name: {},
                    Description: {},
                    LicenseCountingType: {},
                    LicenseCount: {
                        type: "long"
                    },
                    LicenseCountHardLimit: {
                        type: "boolean"
                    },
                    LicenseRules: {
                        shape: "S1c"
                    },
                    Tags: {
                        shape: "S1d"
                    },
                    DisassociateWhenNotFound: {
                        type: "boolean"
                    },
                    ProductInformationList: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConfigurationArn: {}
                }
            }
        },
        CreateLicenseConversionTaskForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "SourceLicenseContext", "DestinationLicenseContext" ],
                members: {
                    ResourceArn: {},
                    SourceLicenseContext: {
                        shape: "S1l"
                    },
                    DestinationLicenseContext: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConversionTaskId: {}
                }
            }
        },
        CreateLicenseManagerReportGenerator: {
            input: {
                type: "structure",
                required: [ "ReportGeneratorName", "Type", "ReportContext", "ReportFrequency", "ClientToken" ],
                members: {
                    ReportGeneratorName: {},
                    Type: {
                        shape: "S1r"
                    },
                    ReportContext: {
                        shape: "S1t"
                    },
                    ReportFrequency: {
                        shape: "S1v"
                    },
                    ClientToken: {},
                    Description: {},
                    Tags: {
                        shape: "S1d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseManagerReportGeneratorArn: {}
                }
            }
        },
        CreateLicenseVersion: {
            input: {
                type: "structure",
                required: [ "LicenseArn", "LicenseName", "ProductName", "Issuer", "HomeRegion", "Validity", "Entitlements", "ConsumptionConfiguration", "Status", "ClientToken" ],
                members: {
                    LicenseArn: {},
                    LicenseName: {},
                    ProductName: {},
                    Issuer: {
                        shape: "Sv"
                    },
                    HomeRegion: {},
                    Validity: {
                        shape: "Sw"
                    },
                    LicenseMetadata: {
                        shape: "Sd"
                    },
                    Entitlements: {
                        shape: "Sx"
                    },
                    ConsumptionConfiguration: {
                        shape: "S12"
                    },
                    Status: {},
                    ClientToken: {},
                    SourceVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseArn: {},
                    Version: {},
                    Status: {}
                }
            }
        },
        CreateToken: {
            input: {
                type: "structure",
                required: [ "LicenseArn", "ClientToken" ],
                members: {
                    LicenseArn: {},
                    RoleArns: {
                        shape: "S1u"
                    },
                    ExpirationInDays: {
                        type: "integer"
                    },
                    TokenProperties: {
                        shape: "S23"
                    },
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TokenId: {},
                    TokenType: {},
                    Token: {}
                }
            }
        },
        DeleteGrant: {
            input: {
                type: "structure",
                required: [ "GrantArn", "Version" ],
                members: {
                    GrantArn: {},
                    StatusReason: {},
                    Version: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GrantArn: {},
                    Status: {},
                    Version: {}
                }
            }
        },
        DeleteLicense: {
            input: {
                type: "structure",
                required: [ "LicenseArn", "SourceVersion" ],
                members: {
                    LicenseArn: {},
                    SourceVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    DeletionDate: {}
                }
            }
        },
        DeleteLicenseConfiguration: {
            input: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLicenseManagerReportGenerator: {
            input: {
                type: "structure",
                required: [ "LicenseManagerReportGeneratorArn" ],
                members: {
                    LicenseManagerReportGeneratorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteToken: {
            input: {
                type: "structure",
                required: [ "TokenId" ],
                members: {
                    TokenId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ExtendLicenseConsumption: {
            input: {
                type: "structure",
                required: [ "LicenseConsumptionToken" ],
                members: {
                    LicenseConsumptionToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConsumptionToken: {},
                    Expiration: {}
                }
            }
        },
        GetAccessToken: {
            input: {
                type: "structure",
                required: [ "Token" ],
                members: {
                    Token: {},
                    TokenProperties: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessToken: {}
                }
            }
        },
        GetGrant: {
            input: {
                type: "structure",
                required: [ "GrantArn" ],
                members: {
                    GrantArn: {},
                    Version: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Grant: {
                        shape: "S2p"
                    }
                }
            }
        },
        GetLicense: {
            input: {
                type: "structure",
                required: [ "LicenseArn" ],
                members: {
                    LicenseArn: {},
                    Version: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    License: {
                        shape: "S2s"
                    }
                }
            }
        },
        GetLicenseConfiguration: {
            input: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConfigurationId: {},
                    LicenseConfigurationArn: {},
                    Name: {},
                    Description: {},
                    LicenseCountingType: {},
                    LicenseRules: {
                        shape: "S1c"
                    },
                    LicenseCount: {
                        type: "long"
                    },
                    LicenseCountHardLimit: {
                        type: "boolean"
                    },
                    ConsumedLicenses: {
                        type: "long"
                    },
                    Status: {},
                    OwnerAccountId: {},
                    ConsumedLicenseSummaryList: {
                        shape: "S2w"
                    },
                    ManagedResourceSummaryList: {
                        shape: "S2z"
                    },
                    Tags: {
                        shape: "S1d"
                    },
                    ProductInformationList: {
                        shape: "S1f"
                    },
                    AutomatedDiscoveryInformation: {
                        shape: "S31"
                    },
                    DisassociateWhenNotFound: {
                        type: "boolean"
                    }
                }
            }
        },
        GetLicenseConversionTask: {
            input: {
                type: "structure",
                required: [ "LicenseConversionTaskId" ],
                members: {
                    LicenseConversionTaskId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConversionTaskId: {},
                    ResourceArn: {},
                    SourceLicenseContext: {
                        shape: "S1l"
                    },
                    DestinationLicenseContext: {
                        shape: "S1l"
                    },
                    StatusMessage: {},
                    Status: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    LicenseConversionTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetLicenseManagerReportGenerator: {
            input: {
                type: "structure",
                required: [ "LicenseManagerReportGeneratorArn" ],
                members: {
                    LicenseManagerReportGeneratorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportGenerator: {
                        shape: "S38"
                    }
                }
            }
        },
        GetLicenseUsage: {
            input: {
                type: "structure",
                required: [ "LicenseArn" ],
                members: {
                    LicenseArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseUsage: {
                        type: "structure",
                        members: {
                            EntitlementUsages: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Name", "ConsumedValue", "Unit" ],
                                    members: {
                                        Name: {},
                                        ConsumedValue: {},
                                        MaxCount: {},
                                        Unit: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetServiceSettings: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    S3BucketArn: {},
                    SnsTopicArn: {},
                    OrganizationConfiguration: {
                        shape: "S3h"
                    },
                    EnableCrossAccountsDiscovery: {
                        type: "boolean"
                    },
                    LicenseManagerResourceShareArn: {}
                }
            }
        },
        ListAssociationsForLicenseConfiguration: {
            input: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConfigurationAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceArn: {},
                                ResourceType: {},
                                ResourceOwnerId: {},
                                AssociationTime: {
                                    type: "timestamp"
                                },
                                AmiAssociationScope: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDistributedGrants: {
            input: {
                type: "structure",
                members: {
                    GrantArns: {
                        shape: "S1u"
                    },
                    Filters: {
                        shape: "S3n"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Grants: {
                        shape: "S3u"
                    },
                    NextToken: {}
                }
            }
        },
        ListFailuresForLicenseConfigurationOperations: {
            input: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseOperationFailureList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceArn: {},
                                ResourceType: {},
                                ErrorMessage: {},
                                FailureTime: {
                                    type: "timestamp"
                                },
                                OperationName: {},
                                ResourceOwnerId: {},
                                OperationRequestedBy: {},
                                MetadataList: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLicenseConfigurations: {
            input: {
                type: "structure",
                members: {
                    LicenseConfigurationArns: {
                        shape: "S1c"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S40"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LicenseConfigurationId: {},
                                LicenseConfigurationArn: {},
                                Name: {},
                                Description: {},
                                LicenseCountingType: {},
                                LicenseRules: {
                                    shape: "S1c"
                                },
                                LicenseCount: {
                                    type: "long"
                                },
                                LicenseCountHardLimit: {
                                    type: "boolean"
                                },
                                DisassociateWhenNotFound: {
                                    type: "boolean"
                                },
                                ConsumedLicenses: {
                                    type: "long"
                                },
                                Status: {},
                                OwnerAccountId: {},
                                ConsumedLicenseSummaryList: {
                                    shape: "S2w"
                                },
                                ManagedResourceSummaryList: {
                                    shape: "S2z"
                                },
                                ProductInformationList: {
                                    shape: "S1f"
                                },
                                AutomatedDiscoveryInformation: {
                                    shape: "S31"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLicenseConversionTasks: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S40"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConversionTasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LicenseConversionTaskId: {},
                                ResourceArn: {},
                                SourceLicenseContext: {
                                    shape: "S1l"
                                },
                                DestinationLicenseContext: {
                                    shape: "S1l"
                                },
                                Status: {},
                                StatusMessage: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                LicenseConversionTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLicenseManagerReportGenerators: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S3n"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportGenerators: {
                        type: "list",
                        member: {
                            shape: "S38"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLicenseSpecificationsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseSpecifications: {
                        shape: "S4d"
                    },
                    NextToken: {}
                }
            }
        },
        ListLicenseVersions: {
            input: {
                type: "structure",
                required: [ "LicenseArn" ],
                members: {
                    LicenseArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Licenses: {
                        shape: "S4h"
                    },
                    NextToken: {}
                }
            }
        },
        ListLicenses: {
            input: {
                type: "structure",
                members: {
                    LicenseArns: {
                        shape: "S1u"
                    },
                    Filters: {
                        shape: "S3n"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Licenses: {
                        shape: "S4h"
                    },
                    NextToken: {}
                }
            }
        },
        ListReceivedGrants: {
            input: {
                type: "structure",
                members: {
                    GrantArns: {
                        shape: "S1u"
                    },
                    Filters: {
                        shape: "S3n"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Grants: {
                        shape: "S3u"
                    },
                    NextToken: {}
                }
            }
        },
        ListReceivedLicenses: {
            input: {
                type: "structure",
                members: {
                    LicenseArns: {
                        shape: "S1u"
                    },
                    Filters: {
                        shape: "S3n"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Licenses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LicenseArn: {},
                                LicenseName: {},
                                ProductName: {},
                                ProductSKU: {},
                                Issuer: {
                                    shape: "S2t"
                                },
                                HomeRegion: {},
                                Status: {},
                                Validity: {
                                    shape: "Sw"
                                },
                                Beneficiary: {},
                                Entitlements: {
                                    shape: "Sx"
                                },
                                ConsumptionConfiguration: {
                                    shape: "S12"
                                },
                                LicenseMetadata: {
                                    shape: "Sd"
                                },
                                CreateTime: {},
                                Version: {},
                                ReceivedMetadata: {
                                    type: "structure",
                                    members: {
                                        ReceivedStatus: {},
                                        ReceivedStatusReason: {},
                                        AllowedOperations: {
                                            shape: "So"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListResourceInventory: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Condition" ],
                            members: {
                                Name: {},
                                Condition: {},
                                Value: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceInventoryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceId: {},
                                ResourceType: {},
                                ResourceArn: {},
                                Platform: {},
                                PlatformVersion: {},
                                ResourceOwningAccountId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1d"
                    }
                }
            }
        },
        ListTokens: {
            input: {
                type: "structure",
                members: {
                    TokenIds: {
                        shape: "S1c"
                    },
                    Filters: {
                        shape: "S3n"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tokens: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TokenId: {},
                                TokenType: {},
                                LicenseArn: {},
                                ExpirationTime: {},
                                TokenProperties: {
                                    shape: "S23"
                                },
                                RoleArns: {
                                    shape: "S1u"
                                },
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListUsageForLicenseConfiguration: {
            input: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S40"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConfigurationUsageList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceArn: {},
                                ResourceType: {},
                                ResourceStatus: {},
                                ResourceOwnerId: {},
                                AssociationTime: {
                                    type: "timestamp"
                                },
                                ConsumedLicenses: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        RejectGrant: {
            input: {
                type: "structure",
                required: [ "GrantArn" ],
                members: {
                    GrantArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GrantArn: {},
                    Status: {},
                    Version: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S1d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLicenseConfiguration: {
            input: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {},
                    LicenseConfigurationStatus: {},
                    LicenseRules: {
                        shape: "S1c"
                    },
                    LicenseCount: {
                        type: "long"
                    },
                    LicenseCountHardLimit: {
                        type: "boolean"
                    },
                    Name: {},
                    Description: {},
                    ProductInformationList: {
                        shape: "S1f"
                    },
                    DisassociateWhenNotFound: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLicenseManagerReportGenerator: {
            input: {
                type: "structure",
                required: [ "LicenseManagerReportGeneratorArn", "ReportGeneratorName", "Type", "ReportContext", "ReportFrequency", "ClientToken" ],
                members: {
                    LicenseManagerReportGeneratorArn: {},
                    ReportGeneratorName: {},
                    Type: {
                        shape: "S1r"
                    },
                    ReportContext: {
                        shape: "S1t"
                    },
                    ReportFrequency: {
                        shape: "S1v"
                    },
                    ClientToken: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLicenseSpecificationsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    AddLicenseSpecifications: {
                        shape: "S4d"
                    },
                    RemoveLicenseSpecifications: {
                        shape: "S4d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateServiceSettings: {
            input: {
                type: "structure",
                members: {
                    S3BucketArn: {},
                    SnsTopicArn: {},
                    OrganizationConfiguration: {
                        shape: "S3h"
                    },
                    EnableCrossAccountsDiscovery: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S9: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Unit" ],
                members: {
                    Name: {},
                    Value: {},
                    Unit: {}
                }
            }
        },
        Sd: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        So: {
            type: "list",
            member: {}
        },
        Sv: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                SignKey: {}
            }
        },
        Sw: {
            type: "structure",
            required: [ "Begin" ],
            members: {
                Begin: {},
                End: {}
            }
        },
        Sx: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Unit" ],
                members: {
                    Name: {},
                    Value: {},
                    MaxCount: {
                        type: "long"
                    },
                    Overage: {
                        type: "boolean"
                    },
                    Unit: {},
                    AllowCheckIn: {
                        type: "boolean"
                    }
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                RenewType: {},
                ProvisionalConfiguration: {
                    type: "structure",
                    required: [ "MaxTimeToLiveInMinutes" ],
                    members: {
                        MaxTimeToLiveInMinutes: {
                            type: "integer"
                        }
                    }
                },
                BorrowConfiguration: {
                    type: "structure",
                    required: [ "AllowEarlyCheckIn", "MaxTimeToLiveInMinutes" ],
                    members: {
                        AllowEarlyCheckIn: {
                            type: "boolean"
                        },
                        MaxTimeToLiveInMinutes: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S1c: {
            type: "list",
            member: {}
        },
        S1d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S1f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ResourceType", "ProductInformationFilterList" ],
                members: {
                    ResourceType: {},
                    ProductInformationFilterList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ProductInformationFilterName", "ProductInformationFilterComparator" ],
                            members: {
                                ProductInformationFilterName: {},
                                ProductInformationFilterValue: {
                                    shape: "S1c"
                                },
                                ProductInformationFilterComparator: {}
                            }
                        }
                    }
                }
            }
        },
        S1l: {
            type: "structure",
            members: {
                UsageOperation: {}
            }
        },
        S1r: {
            type: "list",
            member: {}
        },
        S1t: {
            type: "structure",
            required: [ "licenseConfigurationArns" ],
            members: {
                licenseConfigurationArns: {
                    shape: "S1u"
                }
            }
        },
        S1u: {
            type: "list",
            member: {}
        },
        S1v: {
            type: "structure",
            members: {
                value: {
                    type: "integer"
                },
                period: {}
            }
        },
        S23: {
            type: "list",
            member: {}
        },
        S2p: {
            type: "structure",
            required: [ "GrantArn", "GrantName", "ParentArn", "LicenseArn", "GranteePrincipalArn", "HomeRegion", "GrantStatus", "Version", "GrantedOperations" ],
            members: {
                GrantArn: {},
                GrantName: {},
                ParentArn: {},
                LicenseArn: {},
                GranteePrincipalArn: {},
                HomeRegion: {},
                GrantStatus: {},
                StatusReason: {},
                Version: {},
                GrantedOperations: {
                    shape: "So"
                }
            }
        },
        S2s: {
            type: "structure",
            members: {
                LicenseArn: {},
                LicenseName: {},
                ProductName: {},
                ProductSKU: {},
                Issuer: {
                    shape: "S2t"
                },
                HomeRegion: {},
                Status: {},
                Validity: {
                    shape: "Sw"
                },
                Beneficiary: {},
                Entitlements: {
                    shape: "Sx"
                },
                ConsumptionConfiguration: {
                    shape: "S12"
                },
                LicenseMetadata: {
                    shape: "Sd"
                },
                CreateTime: {},
                Version: {}
            }
        },
        S2t: {
            type: "structure",
            members: {
                Name: {},
                SignKey: {},
                KeyFingerprint: {}
            }
        },
        S2w: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceType: {},
                    ConsumedLicenses: {
                        type: "long"
                    }
                }
            }
        },
        S2z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceType: {},
                    AssociationCount: {
                        type: "long"
                    }
                }
            }
        },
        S31: {
            type: "structure",
            members: {
                LastRunTime: {
                    type: "timestamp"
                }
            }
        },
        S38: {
            type: "structure",
            members: {
                ReportGeneratorName: {},
                ReportType: {
                    shape: "S1r"
                },
                ReportContext: {
                    shape: "S1t"
                },
                ReportFrequency: {
                    shape: "S1v"
                },
                LicenseManagerReportGeneratorArn: {},
                LastRunStatus: {},
                LastRunFailureReason: {},
                LastReportGenerationTime: {},
                ReportCreatorAccount: {},
                Description: {},
                S3Location: {
                    type: "structure",
                    members: {
                        bucket: {},
                        keyPrefix: {}
                    }
                },
                CreateTime: {},
                Tags: {
                    shape: "S1d"
                }
            }
        },
        S3h: {
            type: "structure",
            required: [ "EnableIntegration" ],
            members: {
                EnableIntegration: {
                    type: "boolean"
                }
            }
        },
        S3n: {
            type: "list",
            member: {
                shape: "S3o"
            }
        },
        S3o: {
            type: "structure",
            members: {
                Name: {},
                Values: {
                    type: "list",
                    member: {}
                }
            }
        },
        S3u: {
            type: "list",
            member: {
                shape: "S2p"
            }
        },
        S40: {
            type: "list",
            member: {
                shape: "S3o"
            }
        },
        S4d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {},
                    AmiAssociationScope: {}
                }
            }
        },
        S4h: {
            type: "list",
            member: {
                shape: "S2s"
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["kafka"] = {};

AWS.Kafka = AWS.Service.defineService("kafka", [ "2018-11-14" ]);

AWS.apiLoader.services["kafka"]["2018-11-14"] = {
    metadata: {
        apiVersion: "2018-11-14",
        endpointPrefix: "kafka",
        signingName: "kafka",
        serviceFullName: "Managed Streaming for Kafka",
        serviceAbbreviation: "Kafka",
        serviceId: "Kafka",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "kafka-2018-11-14",
        signatureVersion: "v4"
    },
    operations: {
        BatchAssociateScramSecret: {
            http: {
                requestUri: "/v1/clusters/{clusterArn}/scram-secrets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    SecretArnList: {
                        shape: "S3",
                        locationName: "secretArnList"
                    }
                },
                required: [ "ClusterArn", "SecretArnList" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    UnprocessedScramSecrets: {
                        shape: "S5",
                        locationName: "unprocessedScramSecrets"
                    }
                }
            }
        },
        CreateCluster: {
            http: {
                requestUri: "/v1/clusters",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerNodeGroupInfo: {
                        shape: "S8",
                        locationName: "brokerNodeGroupInfo"
                    },
                    ClientAuthentication: {
                        shape: "Se",
                        locationName: "clientAuthentication"
                    },
                    ClusterName: {
                        locationName: "clusterName"
                    },
                    ConfigurationInfo: {
                        shape: "Sm",
                        locationName: "configurationInfo"
                    },
                    EncryptionInfo: {
                        shape: "So",
                        locationName: "encryptionInfo"
                    },
                    EnhancedMonitoring: {
                        locationName: "enhancedMonitoring"
                    },
                    OpenMonitoring: {
                        shape: "St",
                        locationName: "openMonitoring"
                    },
                    KafkaVersion: {
                        locationName: "kafkaVersion"
                    },
                    LoggingInfo: {
                        shape: "Sy",
                        locationName: "loggingInfo"
                    },
                    NumberOfBrokerNodes: {
                        locationName: "numberOfBrokerNodes",
                        type: "integer"
                    },
                    Tags: {
                        shape: "S14",
                        locationName: "tags"
                    }
                },
                required: [ "BrokerNodeGroupInfo", "KafkaVersion", "NumberOfBrokerNodes", "ClusterName" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterName: {
                        locationName: "clusterName"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        CreateConfiguration: {
            http: {
                requestUri: "/v1/configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Description: {
                        locationName: "description"
                    },
                    KafkaVersions: {
                        shape: "S3",
                        locationName: "kafkaVersions"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ServerProperties: {
                        locationName: "serverProperties",
                        type: "blob"
                    }
                },
                required: [ "ServerProperties", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreationTime: {
                        shape: "S1a",
                        locationName: "creationTime"
                    },
                    LatestRevision: {
                        shape: "S1b",
                        locationName: "latestRevision"
                    },
                    Name: {
                        locationName: "name"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        DeleteCluster: {
            http: {
                method: "DELETE",
                requestUri: "/v1/clusters/{clusterArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        location: "querystring",
                        locationName: "currentVersion"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        DeleteConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/v1/configurations/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        DescribeCluster: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters/{clusterArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterInfo: {
                        shape: "S1j",
                        locationName: "clusterInfo"
                    }
                }
            }
        },
        DescribeClusterOperation: {
            http: {
                method: "GET",
                requestUri: "/v1/operations/{clusterOperationArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterOperationArn: {
                        location: "uri",
                        locationName: "clusterOperationArn"
                    }
                },
                required: [ "ClusterOperationArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterOperationInfo: {
                        shape: "S1t",
                        locationName: "clusterOperationInfo"
                    }
                }
            }
        },
        DescribeConfiguration: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreationTime: {
                        shape: "S1a",
                        locationName: "creationTime"
                    },
                    Description: {
                        locationName: "description"
                    },
                    KafkaVersions: {
                        shape: "S3",
                        locationName: "kafkaVersions"
                    },
                    LatestRevision: {
                        shape: "S1b",
                        locationName: "latestRevision"
                    },
                    Name: {
                        locationName: "name"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        DescribeConfigurationRevision: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations/{arn}/revisions/{revision}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    Revision: {
                        location: "uri",
                        locationName: "revision",
                        type: "long"
                    }
                },
                required: [ "Revision", "Arn" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreationTime: {
                        shape: "S1a",
                        locationName: "creationTime"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Revision: {
                        locationName: "revision",
                        type: "long"
                    },
                    ServerProperties: {
                        locationName: "serverProperties",
                        type: "blob"
                    }
                }
            }
        },
        BatchDisassociateScramSecret: {
            http: {
                method: "PATCH",
                requestUri: "/v1/clusters/{clusterArn}/scram-secrets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    SecretArnList: {
                        shape: "S3",
                        locationName: "secretArnList"
                    }
                },
                required: [ "ClusterArn", "SecretArnList" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    UnprocessedScramSecrets: {
                        shape: "S5",
                        locationName: "unprocessedScramSecrets"
                    }
                }
            }
        },
        GetBootstrapBrokers: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters/{clusterArn}/bootstrap-brokers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    BootstrapBrokerString: {
                        locationName: "bootstrapBrokerString"
                    },
                    BootstrapBrokerStringTls: {
                        locationName: "bootstrapBrokerStringTls"
                    },
                    BootstrapBrokerStringSaslScram: {
                        locationName: "bootstrapBrokerStringSaslScram"
                    },
                    BootstrapBrokerStringSaslIam: {
                        locationName: "bootstrapBrokerStringSaslIam"
                    }
                }
            }
        },
        GetCompatibleKafkaVersions: {
            http: {
                method: "GET",
                requestUri: "/v1/compatible-kafka-versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "querystring",
                        locationName: "clusterArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CompatibleKafkaVersions: {
                        locationName: "compatibleKafkaVersions",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceVersion: {
                                    locationName: "sourceVersion"
                                },
                                TargetVersions: {
                                    shape: "S3",
                                    locationName: "targetVersions"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListClusterOperations: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters/{clusterArn}/operations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterOperationInfoList: {
                        locationName: "clusterOperationInfoList",
                        type: "list",
                        member: {
                            shape: "S1t"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListClusters: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterNameFilter: {
                        location: "querystring",
                        locationName: "clusterNameFilter"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClusterInfoList: {
                        locationName: "clusterInfoList",
                        type: "list",
                        member: {
                            shape: "S1j"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListConfigurationRevisions: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations/{arn}/revisions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Revisions: {
                        locationName: "revisions",
                        type: "list",
                        member: {
                            shape: "S1b"
                        }
                    }
                }
            }
        },
        ListConfigurations: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Configurations: {
                        locationName: "configurations",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                CreationTime: {
                                    shape: "S1a",
                                    locationName: "creationTime"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                KafkaVersions: {
                                    shape: "S3",
                                    locationName: "kafkaVersions"
                                },
                                LatestRevision: {
                                    shape: "S1b",
                                    locationName: "latestRevision"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                State: {
                                    locationName: "state"
                                }
                            },
                            required: [ "Description", "LatestRevision", "CreationTime", "KafkaVersions", "Arn", "Name", "State" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListKafkaVersions: {
            http: {
                method: "GET",
                requestUri: "/v1/kafka-versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KafkaVersions: {
                        locationName: "kafkaVersions",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Version: {
                                    locationName: "version"
                                },
                                Status: {
                                    locationName: "status"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListNodes: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters/{clusterArn}/nodes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    NodeInfoList: {
                        locationName: "nodeInfoList",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AddedToClusterTime: {
                                    locationName: "addedToClusterTime"
                                },
                                BrokerNodeInfo: {
                                    locationName: "brokerNodeInfo",
                                    type: "structure",
                                    members: {
                                        AttachedENIId: {
                                            locationName: "attachedENIId"
                                        },
                                        BrokerId: {
                                            locationName: "brokerId",
                                            type: "double"
                                        },
                                        ClientSubnet: {
                                            locationName: "clientSubnet"
                                        },
                                        ClientVpcIpAddress: {
                                            locationName: "clientVpcIpAddress"
                                        },
                                        CurrentBrokerSoftwareInfo: {
                                            shape: "S1k",
                                            locationName: "currentBrokerSoftwareInfo"
                                        },
                                        Endpoints: {
                                            shape: "S3",
                                            locationName: "endpoints"
                                        }
                                    }
                                },
                                InstanceType: {
                                    locationName: "instanceType"
                                },
                                NodeARN: {
                                    locationName: "nodeARN"
                                },
                                NodeType: {
                                    locationName: "nodeType"
                                },
                                ZookeeperNodeInfo: {
                                    locationName: "zookeeperNodeInfo",
                                    type: "structure",
                                    members: {
                                        AttachedENIId: {
                                            locationName: "attachedENIId"
                                        },
                                        ClientVpcIpAddress: {
                                            locationName: "clientVpcIpAddress"
                                        },
                                        Endpoints: {
                                            shape: "S3",
                                            locationName: "endpoints"
                                        },
                                        ZookeeperId: {
                                            locationName: "zookeeperId",
                                            type: "double"
                                        },
                                        ZookeeperVersion: {
                                            locationName: "zookeeperVersion"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListScramSecrets: {
            http: {
                method: "GET",
                requestUri: "/v1/clusters/{clusterArn}/scram-secrets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ClusterArn" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    SecretArnList: {
                        shape: "S3",
                        locationName: "secretArnList"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v1/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S14",
                        locationName: "tags"
                    }
                }
            }
        },
        RebootBroker: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/reboot-broker",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerIds: {
                        shape: "S3",
                        locationName: "brokerIds"
                    },
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    }
                },
                required: [ "ClusterArn", "BrokerIds" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "S14",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn", "Tags" ]
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        shape: "S3",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateBrokerCount: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/nodes/count",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    TargetNumberOfBrokerNodes: {
                        locationName: "targetNumberOfBrokerNodes",
                        type: "integer"
                    }
                },
                required: [ "ClusterArn", "CurrentVersion", "TargetNumberOfBrokerNodes" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateBrokerType: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/nodes/type",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    TargetInstanceType: {
                        locationName: "targetInstanceType"
                    }
                },
                required: [ "ClusterArn", "CurrentVersion", "TargetInstanceType" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateBrokerStorage: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/nodes/storage",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    TargetBrokerEBSVolumeInfo: {
                        shape: "S1z",
                        locationName: "targetBrokerEBSVolumeInfo"
                    }
                },
                required: [ "ClusterArn", "TargetBrokerEBSVolumeInfo", "CurrentVersion" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/v1/configurations/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    ServerProperties: {
                        locationName: "serverProperties",
                        type: "blob"
                    }
                },
                required: [ "Arn", "ServerProperties" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    LatestRevision: {
                        shape: "S1b",
                        locationName: "latestRevision"
                    }
                }
            }
        },
        UpdateClusterConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    ConfigurationInfo: {
                        shape: "Sm",
                        locationName: "configurationInfo"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    }
                },
                required: [ "ClusterArn", "CurrentVersion", "ConfigurationInfo" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateClusterKafkaVersion: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/version",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    ConfigurationInfo: {
                        shape: "Sm",
                        locationName: "configurationInfo"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    TargetKafkaVersion: {
                        locationName: "targetKafkaVersion"
                    }
                },
                required: [ "ClusterArn", "TargetKafkaVersion", "CurrentVersion" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateMonitoring: {
            http: {
                method: "PUT",
                requestUri: "/v1/clusters/{clusterArn}/monitoring",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    EnhancedMonitoring: {
                        locationName: "enhancedMonitoring"
                    },
                    OpenMonitoring: {
                        shape: "St",
                        locationName: "openMonitoring"
                    },
                    LoggingInfo: {
                        shape: "Sy",
                        locationName: "loggingInfo"
                    }
                },
                required: [ "ClusterArn", "CurrentVersion" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        },
        UpdateSecurity: {
            http: {
                method: "PATCH",
                requestUri: "/v1/clusters/{clusterArn}/security",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClientAuthentication: {
                        shape: "Se",
                        locationName: "clientAuthentication"
                    },
                    ClusterArn: {
                        location: "uri",
                        locationName: "clusterArn"
                    },
                    CurrentVersion: {
                        locationName: "currentVersion"
                    },
                    EncryptionInfo: {
                        shape: "So",
                        locationName: "encryptionInfo"
                    }
                },
                required: [ "ClusterArn", "CurrentVersion" ]
            },
            output: {
                type: "structure",
                members: {
                    ClusterArn: {
                        locationName: "clusterArn"
                    },
                    ClusterOperationArn: {
                        locationName: "clusterOperationArn"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S5: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ErrorCode: {
                        locationName: "errorCode"
                    },
                    ErrorMessage: {
                        locationName: "errorMessage"
                    },
                    SecretArn: {
                        locationName: "secretArn"
                    }
                }
            }
        },
        S8: {
            type: "structure",
            members: {
                BrokerAZDistribution: {
                    locationName: "brokerAZDistribution"
                },
                ClientSubnets: {
                    shape: "S3",
                    locationName: "clientSubnets"
                },
                InstanceType: {
                    locationName: "instanceType"
                },
                SecurityGroups: {
                    shape: "S3",
                    locationName: "securityGroups"
                },
                StorageInfo: {
                    locationName: "storageInfo",
                    type: "structure",
                    members: {
                        EbsStorageInfo: {
                            locationName: "ebsStorageInfo",
                            type: "structure",
                            members: {
                                VolumeSize: {
                                    locationName: "volumeSize",
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            },
            required: [ "ClientSubnets", "InstanceType" ]
        },
        Se: {
            type: "structure",
            members: {
                Sasl: {
                    locationName: "sasl",
                    type: "structure",
                    members: {
                        Scram: {
                            locationName: "scram",
                            type: "structure",
                            members: {
                                Enabled: {
                                    locationName: "enabled",
                                    type: "boolean"
                                }
                            }
                        },
                        Iam: {
                            locationName: "iam",
                            type: "structure",
                            members: {
                                Enabled: {
                                    locationName: "enabled",
                                    type: "boolean"
                                }
                            }
                        }
                    }
                },
                Tls: {
                    locationName: "tls",
                    type: "structure",
                    members: {
                        CertificateAuthorityArnList: {
                            shape: "S3",
                            locationName: "certificateAuthorityArnList"
                        },
                        Enabled: {
                            locationName: "enabled",
                            type: "boolean"
                        }
                    }
                },
                Unauthenticated: {
                    locationName: "unauthenticated",
                    type: "structure",
                    members: {
                        Enabled: {
                            locationName: "enabled",
                            type: "boolean"
                        }
                    }
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                Revision: {
                    locationName: "revision",
                    type: "long"
                }
            },
            required: [ "Revision", "Arn" ]
        },
        So: {
            type: "structure",
            members: {
                EncryptionAtRest: {
                    locationName: "encryptionAtRest",
                    type: "structure",
                    members: {
                        DataVolumeKMSKeyId: {
                            locationName: "dataVolumeKMSKeyId"
                        }
                    },
                    required: [ "DataVolumeKMSKeyId" ]
                },
                EncryptionInTransit: {
                    locationName: "encryptionInTransit",
                    type: "structure",
                    members: {
                        ClientBroker: {
                            locationName: "clientBroker"
                        },
                        InCluster: {
                            locationName: "inCluster",
                            type: "boolean"
                        }
                    }
                }
            }
        },
        St: {
            type: "structure",
            members: {
                Prometheus: {
                    locationName: "prometheus",
                    type: "structure",
                    members: {
                        JmxExporter: {
                            locationName: "jmxExporter",
                            type: "structure",
                            members: {
                                EnabledInBroker: {
                                    locationName: "enabledInBroker",
                                    type: "boolean"
                                }
                            },
                            required: [ "EnabledInBroker" ]
                        },
                        NodeExporter: {
                            locationName: "nodeExporter",
                            type: "structure",
                            members: {
                                EnabledInBroker: {
                                    locationName: "enabledInBroker",
                                    type: "boolean"
                                }
                            },
                            required: [ "EnabledInBroker" ]
                        }
                    }
                }
            },
            required: [ "Prometheus" ]
        },
        Sy: {
            type: "structure",
            members: {
                BrokerLogs: {
                    locationName: "brokerLogs",
                    type: "structure",
                    members: {
                        CloudWatchLogs: {
                            locationName: "cloudWatchLogs",
                            type: "structure",
                            members: {
                                Enabled: {
                                    locationName: "enabled",
                                    type: "boolean"
                                },
                                LogGroup: {
                                    locationName: "logGroup"
                                }
                            },
                            required: [ "Enabled" ]
                        },
                        Firehose: {
                            locationName: "firehose",
                            type: "structure",
                            members: {
                                DeliveryStream: {
                                    locationName: "deliveryStream"
                                },
                                Enabled: {
                                    locationName: "enabled",
                                    type: "boolean"
                                }
                            },
                            required: [ "Enabled" ]
                        },
                        S3: {
                            locationName: "s3",
                            type: "structure",
                            members: {
                                Bucket: {
                                    locationName: "bucket"
                                },
                                Enabled: {
                                    locationName: "enabled",
                                    type: "boolean"
                                },
                                Prefix: {
                                    locationName: "prefix"
                                }
                            },
                            required: [ "Enabled" ]
                        }
                    }
                }
            },
            required: [ "BrokerLogs" ]
        },
        S14: {
            type: "map",
            key: {},
            value: {}
        },
        S1a: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1b: {
            type: "structure",
            members: {
                CreationTime: {
                    shape: "S1a",
                    locationName: "creationTime"
                },
                Description: {
                    locationName: "description"
                },
                Revision: {
                    locationName: "revision",
                    type: "long"
                }
            },
            required: [ "Revision", "CreationTime" ]
        },
        S1j: {
            type: "structure",
            members: {
                ActiveOperationArn: {
                    locationName: "activeOperationArn"
                },
                BrokerNodeGroupInfo: {
                    shape: "S8",
                    locationName: "brokerNodeGroupInfo"
                },
                ClientAuthentication: {
                    shape: "Se",
                    locationName: "clientAuthentication"
                },
                ClusterArn: {
                    locationName: "clusterArn"
                },
                ClusterName: {
                    locationName: "clusterName"
                },
                CreationTime: {
                    shape: "S1a",
                    locationName: "creationTime"
                },
                CurrentBrokerSoftwareInfo: {
                    shape: "S1k",
                    locationName: "currentBrokerSoftwareInfo"
                },
                CurrentVersion: {
                    locationName: "currentVersion"
                },
                EncryptionInfo: {
                    shape: "So",
                    locationName: "encryptionInfo"
                },
                EnhancedMonitoring: {
                    locationName: "enhancedMonitoring"
                },
                OpenMonitoring: {
                    shape: "S1l",
                    locationName: "openMonitoring"
                },
                LoggingInfo: {
                    shape: "Sy",
                    locationName: "loggingInfo"
                },
                NumberOfBrokerNodes: {
                    locationName: "numberOfBrokerNodes",
                    type: "integer"
                },
                State: {
                    locationName: "state"
                },
                StateInfo: {
                    locationName: "stateInfo",
                    type: "structure",
                    members: {
                        Code: {
                            locationName: "code"
                        },
                        Message: {
                            locationName: "message"
                        }
                    }
                },
                Tags: {
                    shape: "S14",
                    locationName: "tags"
                },
                ZookeeperConnectString: {
                    locationName: "zookeeperConnectString"
                },
                ZookeeperConnectStringTls: {
                    locationName: "zookeeperConnectStringTls"
                }
            }
        },
        S1k: {
            type: "structure",
            members: {
                ConfigurationArn: {
                    locationName: "configurationArn"
                },
                ConfigurationRevision: {
                    locationName: "configurationRevision",
                    type: "long"
                },
                KafkaVersion: {
                    locationName: "kafkaVersion"
                }
            }
        },
        S1l: {
            type: "structure",
            members: {
                Prometheus: {
                    locationName: "prometheus",
                    type: "structure",
                    members: {
                        JmxExporter: {
                            locationName: "jmxExporter",
                            type: "structure",
                            members: {
                                EnabledInBroker: {
                                    locationName: "enabledInBroker",
                                    type: "boolean"
                                }
                            },
                            required: [ "EnabledInBroker" ]
                        },
                        NodeExporter: {
                            locationName: "nodeExporter",
                            type: "structure",
                            members: {
                                EnabledInBroker: {
                                    locationName: "enabledInBroker",
                                    type: "boolean"
                                }
                            },
                            required: [ "EnabledInBroker" ]
                        }
                    }
                }
            },
            required: [ "Prometheus" ]
        },
        S1t: {
            type: "structure",
            members: {
                ClientRequestId: {
                    locationName: "clientRequestId"
                },
                ClusterArn: {
                    locationName: "clusterArn"
                },
                CreationTime: {
                    shape: "S1a",
                    locationName: "creationTime"
                },
                EndTime: {
                    shape: "S1a",
                    locationName: "endTime"
                },
                ErrorInfo: {
                    locationName: "errorInfo",
                    type: "structure",
                    members: {
                        ErrorCode: {
                            locationName: "errorCode"
                        },
                        ErrorString: {
                            locationName: "errorString"
                        }
                    }
                },
                OperationArn: {
                    locationName: "operationArn"
                },
                OperationState: {
                    locationName: "operationState"
                },
                OperationSteps: {
                    locationName: "operationSteps",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            StepInfo: {
                                locationName: "stepInfo",
                                type: "structure",
                                members: {
                                    StepStatus: {
                                        locationName: "stepStatus"
                                    }
                                }
                            },
                            StepName: {
                                locationName: "stepName"
                            }
                        }
                    }
                },
                OperationType: {
                    locationName: "operationType"
                },
                SourceClusterInfo: {
                    shape: "S1y",
                    locationName: "sourceClusterInfo"
                },
                TargetClusterInfo: {
                    shape: "S1y",
                    locationName: "targetClusterInfo"
                }
            }
        },
        S1y: {
            type: "structure",
            members: {
                BrokerEBSVolumeInfo: {
                    shape: "S1z",
                    locationName: "brokerEBSVolumeInfo"
                },
                ConfigurationInfo: {
                    shape: "Sm",
                    locationName: "configurationInfo"
                },
                NumberOfBrokerNodes: {
                    locationName: "numberOfBrokerNodes",
                    type: "integer"
                },
                EnhancedMonitoring: {
                    locationName: "enhancedMonitoring"
                },
                OpenMonitoring: {
                    shape: "S1l",
                    locationName: "openMonitoring"
                },
                KafkaVersion: {
                    locationName: "kafkaVersion"
                },
                LoggingInfo: {
                    shape: "Sy",
                    locationName: "loggingInfo"
                },
                InstanceType: {
                    locationName: "instanceType"
                },
                ClientAuthentication: {
                    shape: "Se",
                    locationName: "clientAuthentication"
                },
                EncryptionInfo: {
                    shape: "So",
                    locationName: "encryptionInfo"
                }
            }
        },
        S1z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    KafkaBrokerNodeId: {
                        locationName: "kafkaBrokerNodeId"
                    },
                    VolumeSizeGB: {
                        locationName: "volumeSizeGB",
                        type: "integer"
                    }
                },
                required: [ "VolumeSizeGB", "KafkaBrokerNodeId" ]
            }
        }
    },
    paginators: {
        ListClusters: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ClusterInfoList"
        },
        ListConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Configurations"
        },
        ListKafkaVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "KafkaVersions"
        },
        ListNodes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "NodeInfoList"
        },
        ListClusterOperations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ClusterOperationInfoList"
        },
        ListConfigurationRevisions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Revisions"
        },
        ListScramSecrets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SecretArnList"
        }
    }
};

AWS.apiLoader.services["apigatewaymanagementapi"] = {};

AWS.ApiGatewayManagementApi = AWS.Service.defineService("apigatewaymanagementapi", [ "2018-11-29" ]);

AWS.apiLoader.services["apigatewaymanagementapi"]["2018-11-29"] = {
    metadata: {
        apiVersion: "2018-11-29",
        endpointPrefix: "execute-api",
        signingName: "execute-api",
        serviceFullName: "AmazonApiGatewayManagementApi",
        serviceId: "ApiGatewayManagementApi",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "apigatewaymanagementapi-2018-11-29",
        signatureVersion: "v4"
    },
    operations: {
        DeleteConnection: {
            http: {
                method: "DELETE",
                requestUri: "/@connections/{connectionId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ConnectionId: {
                        location: "uri",
                        locationName: "connectionId"
                    }
                },
                required: [ "ConnectionId" ]
            }
        },
        GetConnection: {
            http: {
                method: "GET",
                requestUri: "/@connections/{connectionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectionId: {
                        location: "uri",
                        locationName: "connectionId"
                    }
                },
                required: [ "ConnectionId" ]
            },
            output: {
                type: "structure",
                members: {
                    ConnectedAt: {
                        shape: "S5",
                        locationName: "connectedAt"
                    },
                    Identity: {
                        locationName: "identity",
                        type: "structure",
                        members: {
                            SourceIp: {
                                locationName: "sourceIp"
                            },
                            UserAgent: {
                                locationName: "userAgent"
                            }
                        },
                        required: [ "SourceIp", "UserAgent" ]
                    },
                    LastActiveAt: {
                        shape: "S5",
                        locationName: "lastActiveAt"
                    }
                }
            }
        },
        PostToConnection: {
            http: {
                requestUri: "/@connections/{connectionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Data: {
                        type: "blob"
                    },
                    ConnectionId: {
                        location: "uri",
                        locationName: "connectionId"
                    }
                },
                required: [ "ConnectionId", "Data" ],
                payload: "Data"
            }
        }
    },
    shapes: {
        S5: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {}
};

AWS.apiLoader.services["apigatewayv2"] = {};

AWS.ApiGatewayV2 = AWS.Service.defineService("apigatewayv2", [ "2018-11-29" ]);

AWS.apiLoader.services["apigatewayv2"]["2018-11-29"] = {
    metadata: {
        apiVersion: "2018-11-29",
        endpointPrefix: "apigateway",
        signingName: "apigateway",
        serviceFullName: "AmazonApiGatewayV2",
        serviceId: "ApiGatewayV2",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "apigatewayv2-2018-11-29",
        signatureVersion: "v4"
    },
    operations: {
        CreateApi: {
            http: {
                requestUri: "/v2/apis",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ProtocolType: {
                        locationName: "protocolType"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Target: {
                        locationName: "target"
                    },
                    Version: {
                        locationName: "version"
                    }
                },
                required: [ "ProtocolType", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiEndpoint: {
                        locationName: "apiEndpoint"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    ImportInfo: {
                        shape: "Sm",
                        locationName: "importInfo"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ProtocolType: {
                        locationName: "protocolType"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Version: {
                        locationName: "version"
                    },
                    Warnings: {
                        shape: "Sm",
                        locationName: "warnings"
                    }
                }
            }
        },
        CreateApiMapping: {
            http: {
                requestUri: "/v2/domainnames/{domainName}/apimappings",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiMappingKey: {
                        locationName: "apiMappingKey"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    },
                    Stage: {
                        locationName: "stage"
                    }
                },
                required: [ "DomainName", "Stage", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiMappingId: {
                        locationName: "apiMappingId"
                    },
                    ApiMappingKey: {
                        locationName: "apiMappingKey"
                    },
                    Stage: {
                        locationName: "stage"
                    }
                }
            }
        },
        CreateAuthorizer: {
            http: {
                requestUri: "/v2/apis/{apiId}/authorizers",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    AuthorizerCredentialsArn: {
                        locationName: "authorizerCredentialsArn"
                    },
                    AuthorizerPayloadFormatVersion: {
                        locationName: "authorizerPayloadFormatVersion"
                    },
                    AuthorizerResultTtlInSeconds: {
                        locationName: "authorizerResultTtlInSeconds",
                        type: "integer"
                    },
                    AuthorizerType: {
                        locationName: "authorizerType"
                    },
                    AuthorizerUri: {
                        locationName: "authorizerUri"
                    },
                    EnableSimpleResponses: {
                        locationName: "enableSimpleResponses",
                        type: "boolean"
                    },
                    IdentitySource: {
                        shape: "Ss",
                        locationName: "identitySource"
                    },
                    IdentityValidationExpression: {
                        locationName: "identityValidationExpression"
                    },
                    JwtConfiguration: {
                        shape: "St",
                        locationName: "jwtConfiguration"
                    },
                    Name: {
                        locationName: "name"
                    }
                },
                required: [ "ApiId", "AuthorizerType", "IdentitySource", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    AuthorizerCredentialsArn: {
                        locationName: "authorizerCredentialsArn"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    AuthorizerPayloadFormatVersion: {
                        locationName: "authorizerPayloadFormatVersion"
                    },
                    AuthorizerResultTtlInSeconds: {
                        locationName: "authorizerResultTtlInSeconds",
                        type: "integer"
                    },
                    AuthorizerType: {
                        locationName: "authorizerType"
                    },
                    AuthorizerUri: {
                        locationName: "authorizerUri"
                    },
                    EnableSimpleResponses: {
                        locationName: "enableSimpleResponses",
                        type: "boolean"
                    },
                    IdentitySource: {
                        shape: "Ss",
                        locationName: "identitySource"
                    },
                    IdentityValidationExpression: {
                        locationName: "identityValidationExpression"
                    },
                    JwtConfiguration: {
                        shape: "St",
                        locationName: "jwtConfiguration"
                    },
                    Name: {
                        locationName: "name"
                    }
                }
            }
        },
        CreateDeployment: {
            http: {
                requestUri: "/v2/apis/{apiId}/deployments",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    Description: {
                        locationName: "description"
                    },
                    StageName: {
                        locationName: "stageName"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    AutoDeployed: {
                        locationName: "autoDeployed",
                        type: "boolean"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    DeploymentStatus: {
                        locationName: "deploymentStatus"
                    },
                    DeploymentStatusMessage: {
                        locationName: "deploymentStatusMessage"
                    },
                    Description: {
                        locationName: "description"
                    }
                }
            }
        },
        CreateDomainName: {
            http: {
                requestUri: "/v2/domainnames",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    DomainName: {
                        locationName: "domainName"
                    },
                    DomainNameConfigurations: {
                        shape: "S10",
                        locationName: "domainNameConfigurations"
                    },
                    MutualTlsAuthentication: {
                        shape: "S15",
                        locationName: "mutualTlsAuthentication"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                },
                required: [ "DomainName" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiMappingSelectionExpression: {
                        locationName: "apiMappingSelectionExpression"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    DomainNameConfigurations: {
                        shape: "S10",
                        locationName: "domainNameConfigurations"
                    },
                    MutualTlsAuthentication: {
                        shape: "S17",
                        locationName: "mutualTlsAuthentication"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateIntegration: {
            http: {
                requestUri: "/v2/apis/{apiId}/integrations",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ConnectionId: {
                        locationName: "connectionId"
                    },
                    ConnectionType: {
                        locationName: "connectionType"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    IntegrationMethod: {
                        locationName: "integrationMethod"
                    },
                    IntegrationSubtype: {
                        locationName: "integrationSubtype"
                    },
                    IntegrationType: {
                        locationName: "integrationType"
                    },
                    IntegrationUri: {
                        locationName: "integrationUri"
                    },
                    PassthroughBehavior: {
                        locationName: "passthroughBehavior"
                    },
                    PayloadFormatVersion: {
                        locationName: "payloadFormatVersion"
                    },
                    RequestParameters: {
                        shape: "S1e",
                        locationName: "requestParameters"
                    },
                    RequestTemplates: {
                        shape: "S1f",
                        locationName: "requestTemplates"
                    },
                    ResponseParameters: {
                        shape: "S1h",
                        locationName: "responseParameters"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    },
                    TimeoutInMillis: {
                        locationName: "timeoutInMillis",
                        type: "integer"
                    },
                    TlsConfig: {
                        shape: "S1j",
                        locationName: "tlsConfig"
                    }
                },
                required: [ "ApiId", "IntegrationType" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ConnectionId: {
                        locationName: "connectionId"
                    },
                    ConnectionType: {
                        locationName: "connectionType"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    IntegrationId: {
                        locationName: "integrationId"
                    },
                    IntegrationMethod: {
                        locationName: "integrationMethod"
                    },
                    IntegrationResponseSelectionExpression: {
                        locationName: "integrationResponseSelectionExpression"
                    },
                    IntegrationSubtype: {
                        locationName: "integrationSubtype"
                    },
                    IntegrationType: {
                        locationName: "integrationType"
                    },
                    IntegrationUri: {
                        locationName: "integrationUri"
                    },
                    PassthroughBehavior: {
                        locationName: "passthroughBehavior"
                    },
                    PayloadFormatVersion: {
                        locationName: "payloadFormatVersion"
                    },
                    RequestParameters: {
                        shape: "S1e",
                        locationName: "requestParameters"
                    },
                    RequestTemplates: {
                        shape: "S1f",
                        locationName: "requestTemplates"
                    },
                    ResponseParameters: {
                        shape: "S1h",
                        locationName: "responseParameters"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    },
                    TimeoutInMillis: {
                        locationName: "timeoutInMillis",
                        type: "integer"
                    },
                    TlsConfig: {
                        shape: "S1l",
                        locationName: "tlsConfig"
                    }
                }
            }
        },
        CreateIntegrationResponse: {
            http: {
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    },
                    IntegrationResponseKey: {
                        locationName: "integrationResponseKey"
                    },
                    ResponseParameters: {
                        shape: "S1e",
                        locationName: "responseParameters"
                    },
                    ResponseTemplates: {
                        shape: "S1f",
                        locationName: "responseTemplates"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    }
                },
                required: [ "ApiId", "IntegrationId", "IntegrationResponseKey" ]
            },
            output: {
                type: "structure",
                members: {
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    IntegrationResponseId: {
                        locationName: "integrationResponseId"
                    },
                    IntegrationResponseKey: {
                        locationName: "integrationResponseKey"
                    },
                    ResponseParameters: {
                        shape: "S1e",
                        locationName: "responseParameters"
                    },
                    ResponseTemplates: {
                        shape: "S1f",
                        locationName: "responseTemplates"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    }
                }
            }
        },
        CreateModel: {
            http: {
                requestUri: "/v2/apis/{apiId}/models",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ContentType: {
                        locationName: "contentType"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Schema: {
                        locationName: "schema"
                    }
                },
                required: [ "ApiId", "Schema", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    ContentType: {
                        locationName: "contentType"
                    },
                    Description: {
                        locationName: "description"
                    },
                    ModelId: {
                        locationName: "modelId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Schema: {
                        locationName: "schema"
                    }
                }
            }
        },
        CreateRoute: {
            http: {
                requestUri: "/v2/apis/{apiId}/routes",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ApiKeyRequired: {
                        locationName: "apiKeyRequired",
                        type: "boolean"
                    },
                    AuthorizationScopes: {
                        shape: "S1s",
                        locationName: "authorizationScopes"
                    },
                    AuthorizationType: {
                        locationName: "authorizationType"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    OperationName: {
                        locationName: "operationName"
                    },
                    RequestModels: {
                        shape: "S1u",
                        locationName: "requestModels"
                    },
                    RequestParameters: {
                        shape: "S1v",
                        locationName: "requestParameters"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteResponseSelectionExpression: {
                        locationName: "routeResponseSelectionExpression"
                    },
                    Target: {
                        locationName: "target"
                    }
                },
                required: [ "ApiId", "RouteKey" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiKeyRequired: {
                        locationName: "apiKeyRequired",
                        type: "boolean"
                    },
                    AuthorizationScopes: {
                        shape: "S1s",
                        locationName: "authorizationScopes"
                    },
                    AuthorizationType: {
                        locationName: "authorizationType"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    OperationName: {
                        locationName: "operationName"
                    },
                    RequestModels: {
                        shape: "S1u",
                        locationName: "requestModels"
                    },
                    RequestParameters: {
                        shape: "S1v",
                        locationName: "requestParameters"
                    },
                    RouteId: {
                        locationName: "routeId"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteResponseSelectionExpression: {
                        locationName: "routeResponseSelectionExpression"
                    },
                    Target: {
                        locationName: "target"
                    }
                }
            }
        },
        CreateRouteResponse: {
            http: {
                requestUri: "/v2/apis/{apiId}/routes/{routeId}/routeresponses",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    ResponseModels: {
                        shape: "S1u",
                        locationName: "responseModels"
                    },
                    ResponseParameters: {
                        shape: "S1v",
                        locationName: "responseParameters"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    },
                    RouteResponseKey: {
                        locationName: "routeResponseKey"
                    }
                },
                required: [ "ApiId", "RouteId", "RouteResponseKey" ]
            },
            output: {
                type: "structure",
                members: {
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    ResponseModels: {
                        shape: "S1u",
                        locationName: "responseModels"
                    },
                    ResponseParameters: {
                        shape: "S1v",
                        locationName: "responseParameters"
                    },
                    RouteResponseId: {
                        locationName: "routeResponseId"
                    },
                    RouteResponseKey: {
                        locationName: "routeResponseKey"
                    }
                }
            }
        },
        CreateStage: {
            http: {
                requestUri: "/v2/apis/{apiId}/stages",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    AccessLogSettings: {
                        shape: "S21",
                        locationName: "accessLogSettings"
                    },
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    AutoDeploy: {
                        locationName: "autoDeploy",
                        type: "boolean"
                    },
                    ClientCertificateId: {
                        locationName: "clientCertificateId"
                    },
                    DefaultRouteSettings: {
                        shape: "S22",
                        locationName: "defaultRouteSettings"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    Description: {
                        locationName: "description"
                    },
                    RouteSettings: {
                        shape: "S26",
                        locationName: "routeSettings"
                    },
                    StageName: {
                        locationName: "stageName"
                    },
                    StageVariables: {
                        shape: "S27",
                        locationName: "stageVariables"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                },
                required: [ "ApiId", "StageName" ]
            },
            output: {
                type: "structure",
                members: {
                    AccessLogSettings: {
                        shape: "S21",
                        locationName: "accessLogSettings"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    AutoDeploy: {
                        locationName: "autoDeploy",
                        type: "boolean"
                    },
                    ClientCertificateId: {
                        locationName: "clientCertificateId"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    DefaultRouteSettings: {
                        shape: "S22",
                        locationName: "defaultRouteSettings"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    Description: {
                        locationName: "description"
                    },
                    LastDeploymentStatusMessage: {
                        locationName: "lastDeploymentStatusMessage"
                    },
                    LastUpdatedDate: {
                        shape: "Sl",
                        locationName: "lastUpdatedDate"
                    },
                    RouteSettings: {
                        shape: "S26",
                        locationName: "routeSettings"
                    },
                    StageName: {
                        locationName: "stageName"
                    },
                    StageVariables: {
                        shape: "S27",
                        locationName: "stageVariables"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateVpcLink: {
            http: {
                requestUri: "/v2/vpclinks",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name"
                    },
                    SecurityGroupIds: {
                        shape: "S2b",
                        locationName: "securityGroupIds"
                    },
                    SubnetIds: {
                        shape: "S2c",
                        locationName: "subnetIds"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                },
                required: [ "SubnetIds", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Name: {
                        locationName: "name"
                    },
                    SecurityGroupIds: {
                        shape: "S2b",
                        locationName: "securityGroupIds"
                    },
                    SubnetIds: {
                        shape: "S2c",
                        locationName: "subnetIds"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    VpcLinkId: {
                        locationName: "vpcLinkId"
                    },
                    VpcLinkStatus: {
                        locationName: "vpcLinkStatus"
                    },
                    VpcLinkStatusMessage: {
                        locationName: "vpcLinkStatusMessage"
                    },
                    VpcLinkVersion: {
                        locationName: "vpcLinkVersion"
                    }
                }
            }
        },
        DeleteAccessLogSettings: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/stages/{stageName}/accesslogsettings",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "stageName"
                    }
                },
                required: [ "StageName", "ApiId" ]
            }
        },
        DeleteApi: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                },
                required: [ "ApiId" ]
            }
        },
        DeleteApiMapping: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domainnames/{domainName}/apimappings/{apiMappingId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiMappingId: {
                        location: "uri",
                        locationName: "apiMappingId"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                },
                required: [ "ApiMappingId", "DomainName" ]
            }
        },
        DeleteAuthorizer: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/authorizers/{authorizerId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    AuthorizerId: {
                        location: "uri",
                        locationName: "authorizerId"
                    }
                },
                required: [ "AuthorizerId", "ApiId" ]
            }
        },
        DeleteCorsConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/cors",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                },
                required: [ "ApiId" ]
            }
        },
        DeleteDeployment: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/deployments/{deploymentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    DeploymentId: {
                        location: "uri",
                        locationName: "deploymentId"
                    }
                },
                required: [ "ApiId", "DeploymentId" ]
            }
        },
        DeleteDomainName: {
            http: {
                method: "DELETE",
                requestUri: "/v2/domainnames/{domainName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                },
                required: [ "DomainName" ]
            }
        },
        DeleteIntegration: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    }
                },
                required: [ "ApiId", "IntegrationId" ]
            }
        },
        DeleteIntegrationResponse: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    },
                    IntegrationResponseId: {
                        location: "uri",
                        locationName: "integrationResponseId"
                    }
                },
                required: [ "ApiId", "IntegrationResponseId", "IntegrationId" ]
            }
        },
        DeleteModel: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/models/{modelId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ModelId: {
                        location: "uri",
                        locationName: "modelId"
                    }
                },
                required: [ "ModelId", "ApiId" ]
            }
        },
        DeleteRoute: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    }
                },
                required: [ "ApiId", "RouteId" ]
            }
        },
        DeleteRouteRequestParameter: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}/requestparameters/{requestParameterKey}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    RequestParameterKey: {
                        location: "uri",
                        locationName: "requestParameterKey"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    }
                },
                required: [ "RequestParameterKey", "ApiId", "RouteId" ]
            }
        },
        DeleteRouteResponse: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    },
                    RouteResponseId: {
                        location: "uri",
                        locationName: "routeResponseId"
                    }
                },
                required: [ "RouteResponseId", "ApiId", "RouteId" ]
            }
        },
        DeleteRouteSettings: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/stages/{stageName}/routesettings/{routeKey}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    RouteKey: {
                        location: "uri",
                        locationName: "routeKey"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "stageName"
                    }
                },
                required: [ "StageName", "RouteKey", "ApiId" ]
            }
        },
        DeleteStage: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/stages/{stageName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "stageName"
                    }
                },
                required: [ "StageName", "ApiId" ]
            }
        },
        DeleteVpcLink: {
            http: {
                method: "DELETE",
                requestUri: "/v2/vpclinks/{vpcLinkId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    VpcLinkId: {
                        location: "uri",
                        locationName: "vpcLinkId"
                    }
                },
                required: [ "VpcLinkId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ExportApi: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/exports/{specification}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ExportVersion: {
                        location: "querystring",
                        locationName: "exportVersion"
                    },
                    IncludeExtensions: {
                        location: "querystring",
                        locationName: "includeExtensions",
                        type: "boolean"
                    },
                    OutputType: {
                        location: "querystring",
                        locationName: "outputType"
                    },
                    Specification: {
                        location: "uri",
                        locationName: "specification"
                    },
                    StageName: {
                        location: "querystring",
                        locationName: "stageName"
                    }
                },
                required: [ "Specification", "OutputType", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    body: {
                        type: "blob"
                    }
                },
                payload: "body"
            }
        },
        ResetAuthorizersCache: {
            http: {
                method: "DELETE",
                requestUri: "/v2/apis/{apiId}/stages/{stageName}/cache/authorizers",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "stageName"
                    }
                },
                required: [ "StageName", "ApiId" ]
            }
        },
        GetApi: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiEndpoint: {
                        locationName: "apiEndpoint"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    ImportInfo: {
                        shape: "Sm",
                        locationName: "importInfo"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ProtocolType: {
                        locationName: "protocolType"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Version: {
                        locationName: "version"
                    },
                    Warnings: {
                        shape: "Sm",
                        locationName: "warnings"
                    }
                }
            }
        },
        GetApiMapping: {
            http: {
                method: "GET",
                requestUri: "/v2/domainnames/{domainName}/apimappings/{apiMappingId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiMappingId: {
                        location: "uri",
                        locationName: "apiMappingId"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                },
                required: [ "ApiMappingId", "DomainName" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiMappingId: {
                        locationName: "apiMappingId"
                    },
                    ApiMappingKey: {
                        locationName: "apiMappingKey"
                    },
                    Stage: {
                        locationName: "stage"
                    }
                }
            }
        },
        GetApiMappings: {
            http: {
                method: "GET",
                requestUri: "/v2/domainnames/{domainName}/apimappings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "DomainName" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiId: {
                                    locationName: "apiId"
                                },
                                ApiMappingId: {
                                    locationName: "apiMappingId"
                                },
                                ApiMappingKey: {
                                    locationName: "apiMappingKey"
                                },
                                Stage: {
                                    locationName: "stage"
                                }
                            },
                            required: [ "Stage", "ApiId" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetApis: {
            http: {
                method: "GET",
                requestUri: "/v2/apis",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiEndpoint: {
                                    locationName: "apiEndpoint"
                                },
                                ApiGatewayManaged: {
                                    locationName: "apiGatewayManaged",
                                    type: "boolean"
                                },
                                ApiId: {
                                    locationName: "apiId"
                                },
                                ApiKeySelectionExpression: {
                                    locationName: "apiKeySelectionExpression"
                                },
                                CorsConfiguration: {
                                    shape: "S3",
                                    locationName: "corsConfiguration"
                                },
                                CreatedDate: {
                                    shape: "Sl",
                                    locationName: "createdDate"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                DisableSchemaValidation: {
                                    locationName: "disableSchemaValidation",
                                    type: "boolean"
                                },
                                DisableExecuteApiEndpoint: {
                                    locationName: "disableExecuteApiEndpoint",
                                    type: "boolean"
                                },
                                ImportInfo: {
                                    shape: "Sm",
                                    locationName: "importInfo"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                ProtocolType: {
                                    locationName: "protocolType"
                                },
                                RouteSelectionExpression: {
                                    locationName: "routeSelectionExpression"
                                },
                                Tags: {
                                    shape: "Sg",
                                    locationName: "tags"
                                },
                                Version: {
                                    locationName: "version"
                                },
                                Warnings: {
                                    shape: "Sm",
                                    locationName: "warnings"
                                }
                            },
                            required: [ "RouteSelectionExpression", "Name", "ProtocolType" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetAuthorizer: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/authorizers/{authorizerId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    AuthorizerId: {
                        location: "uri",
                        locationName: "authorizerId"
                    }
                },
                required: [ "AuthorizerId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    AuthorizerCredentialsArn: {
                        locationName: "authorizerCredentialsArn"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    AuthorizerPayloadFormatVersion: {
                        locationName: "authorizerPayloadFormatVersion"
                    },
                    AuthorizerResultTtlInSeconds: {
                        locationName: "authorizerResultTtlInSeconds",
                        type: "integer"
                    },
                    AuthorizerType: {
                        locationName: "authorizerType"
                    },
                    AuthorizerUri: {
                        locationName: "authorizerUri"
                    },
                    EnableSimpleResponses: {
                        locationName: "enableSimpleResponses",
                        type: "boolean"
                    },
                    IdentitySource: {
                        shape: "Ss",
                        locationName: "identitySource"
                    },
                    IdentityValidationExpression: {
                        locationName: "identityValidationExpression"
                    },
                    JwtConfiguration: {
                        shape: "St",
                        locationName: "jwtConfiguration"
                    },
                    Name: {
                        locationName: "name"
                    }
                }
            }
        },
        GetAuthorizers: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/authorizers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AuthorizerCredentialsArn: {
                                    locationName: "authorizerCredentialsArn"
                                },
                                AuthorizerId: {
                                    locationName: "authorizerId"
                                },
                                AuthorizerPayloadFormatVersion: {
                                    locationName: "authorizerPayloadFormatVersion"
                                },
                                AuthorizerResultTtlInSeconds: {
                                    locationName: "authorizerResultTtlInSeconds",
                                    type: "integer"
                                },
                                AuthorizerType: {
                                    locationName: "authorizerType"
                                },
                                AuthorizerUri: {
                                    locationName: "authorizerUri"
                                },
                                EnableSimpleResponses: {
                                    locationName: "enableSimpleResponses",
                                    type: "boolean"
                                },
                                IdentitySource: {
                                    shape: "Ss",
                                    locationName: "identitySource"
                                },
                                IdentityValidationExpression: {
                                    locationName: "identityValidationExpression"
                                },
                                JwtConfiguration: {
                                    shape: "St",
                                    locationName: "jwtConfiguration"
                                },
                                Name: {
                                    locationName: "name"
                                }
                            },
                            required: [ "Name" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetDeployment: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/deployments/{deploymentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    DeploymentId: {
                        location: "uri",
                        locationName: "deploymentId"
                    }
                },
                required: [ "ApiId", "DeploymentId" ]
            },
            output: {
                type: "structure",
                members: {
                    AutoDeployed: {
                        locationName: "autoDeployed",
                        type: "boolean"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    DeploymentStatus: {
                        locationName: "deploymentStatus"
                    },
                    DeploymentStatusMessage: {
                        locationName: "deploymentStatusMessage"
                    },
                    Description: {
                        locationName: "description"
                    }
                }
            }
        },
        GetDeployments: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AutoDeployed: {
                                    locationName: "autoDeployed",
                                    type: "boolean"
                                },
                                CreatedDate: {
                                    shape: "Sl",
                                    locationName: "createdDate"
                                },
                                DeploymentId: {
                                    locationName: "deploymentId"
                                },
                                DeploymentStatus: {
                                    locationName: "deploymentStatus"
                                },
                                DeploymentStatusMessage: {
                                    locationName: "deploymentStatusMessage"
                                },
                                Description: {
                                    locationName: "description"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetDomainName: {
            http: {
                method: "GET",
                requestUri: "/v2/domainnames/{domainName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                },
                required: [ "DomainName" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiMappingSelectionExpression: {
                        locationName: "apiMappingSelectionExpression"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    DomainNameConfigurations: {
                        shape: "S10",
                        locationName: "domainNameConfigurations"
                    },
                    MutualTlsAuthentication: {
                        shape: "S17",
                        locationName: "mutualTlsAuthentication"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        GetDomainNames: {
            http: {
                method: "GET",
                requestUri: "/v2/domainnames",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiMappingSelectionExpression: {
                                    locationName: "apiMappingSelectionExpression"
                                },
                                DomainName: {
                                    locationName: "domainName"
                                },
                                DomainNameConfigurations: {
                                    shape: "S10",
                                    locationName: "domainNameConfigurations"
                                },
                                MutualTlsAuthentication: {
                                    shape: "S17",
                                    locationName: "mutualTlsAuthentication"
                                },
                                Tags: {
                                    shape: "Sg",
                                    locationName: "tags"
                                }
                            },
                            required: [ "DomainName" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetIntegration: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    }
                },
                required: [ "ApiId", "IntegrationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ConnectionId: {
                        locationName: "connectionId"
                    },
                    ConnectionType: {
                        locationName: "connectionType"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    IntegrationId: {
                        locationName: "integrationId"
                    },
                    IntegrationMethod: {
                        locationName: "integrationMethod"
                    },
                    IntegrationResponseSelectionExpression: {
                        locationName: "integrationResponseSelectionExpression"
                    },
                    IntegrationSubtype: {
                        locationName: "integrationSubtype"
                    },
                    IntegrationType: {
                        locationName: "integrationType"
                    },
                    IntegrationUri: {
                        locationName: "integrationUri"
                    },
                    PassthroughBehavior: {
                        locationName: "passthroughBehavior"
                    },
                    PayloadFormatVersion: {
                        locationName: "payloadFormatVersion"
                    },
                    RequestParameters: {
                        shape: "S1e",
                        locationName: "requestParameters"
                    },
                    RequestTemplates: {
                        shape: "S1f",
                        locationName: "requestTemplates"
                    },
                    ResponseParameters: {
                        shape: "S1h",
                        locationName: "responseParameters"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    },
                    TimeoutInMillis: {
                        locationName: "timeoutInMillis",
                        type: "integer"
                    },
                    TlsConfig: {
                        shape: "S1l",
                        locationName: "tlsConfig"
                    }
                }
            }
        },
        GetIntegrationResponse: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    },
                    IntegrationResponseId: {
                        location: "uri",
                        locationName: "integrationResponseId"
                    }
                },
                required: [ "ApiId", "IntegrationResponseId", "IntegrationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    IntegrationResponseId: {
                        locationName: "integrationResponseId"
                    },
                    IntegrationResponseKey: {
                        locationName: "integrationResponseKey"
                    },
                    ResponseParameters: {
                        shape: "S1e",
                        locationName: "responseParameters"
                    },
                    ResponseTemplates: {
                        shape: "S1f",
                        locationName: "responseTemplates"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    }
                }
            }
        },
        GetIntegrationResponses: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "IntegrationId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ContentHandlingStrategy: {
                                    locationName: "contentHandlingStrategy"
                                },
                                IntegrationResponseId: {
                                    locationName: "integrationResponseId"
                                },
                                IntegrationResponseKey: {
                                    locationName: "integrationResponseKey"
                                },
                                ResponseParameters: {
                                    shape: "S1e",
                                    locationName: "responseParameters"
                                },
                                ResponseTemplates: {
                                    shape: "S1f",
                                    locationName: "responseTemplates"
                                },
                                TemplateSelectionExpression: {
                                    locationName: "templateSelectionExpression"
                                }
                            },
                            required: [ "IntegrationResponseKey" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetIntegrations: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/integrations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiGatewayManaged: {
                                    locationName: "apiGatewayManaged",
                                    type: "boolean"
                                },
                                ConnectionId: {
                                    locationName: "connectionId"
                                },
                                ConnectionType: {
                                    locationName: "connectionType"
                                },
                                ContentHandlingStrategy: {
                                    locationName: "contentHandlingStrategy"
                                },
                                CredentialsArn: {
                                    locationName: "credentialsArn"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                IntegrationId: {
                                    locationName: "integrationId"
                                },
                                IntegrationMethod: {
                                    locationName: "integrationMethod"
                                },
                                IntegrationResponseSelectionExpression: {
                                    locationName: "integrationResponseSelectionExpression"
                                },
                                IntegrationSubtype: {
                                    locationName: "integrationSubtype"
                                },
                                IntegrationType: {
                                    locationName: "integrationType"
                                },
                                IntegrationUri: {
                                    locationName: "integrationUri"
                                },
                                PassthroughBehavior: {
                                    locationName: "passthroughBehavior"
                                },
                                PayloadFormatVersion: {
                                    locationName: "payloadFormatVersion"
                                },
                                RequestParameters: {
                                    shape: "S1e",
                                    locationName: "requestParameters"
                                },
                                RequestTemplates: {
                                    shape: "S1f",
                                    locationName: "requestTemplates"
                                },
                                ResponseParameters: {
                                    shape: "S1h",
                                    locationName: "responseParameters"
                                },
                                TemplateSelectionExpression: {
                                    locationName: "templateSelectionExpression"
                                },
                                TimeoutInMillis: {
                                    locationName: "timeoutInMillis",
                                    type: "integer"
                                },
                                TlsConfig: {
                                    shape: "S1l",
                                    locationName: "tlsConfig"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetModel: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/models/{modelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ModelId: {
                        location: "uri",
                        locationName: "modelId"
                    }
                },
                required: [ "ModelId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    ContentType: {
                        locationName: "contentType"
                    },
                    Description: {
                        locationName: "description"
                    },
                    ModelId: {
                        locationName: "modelId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Schema: {
                        locationName: "schema"
                    }
                }
            }
        },
        GetModelTemplate: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/models/{modelId}/template",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ModelId: {
                        location: "uri",
                        locationName: "modelId"
                    }
                },
                required: [ "ModelId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Value: {
                        locationName: "value"
                    }
                }
            }
        },
        GetModels: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/models",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ContentType: {
                                    locationName: "contentType"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                ModelId: {
                                    locationName: "modelId"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                Schema: {
                                    locationName: "schema"
                                }
                            },
                            required: [ "Name" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetRoute: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    }
                },
                required: [ "ApiId", "RouteId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiKeyRequired: {
                        locationName: "apiKeyRequired",
                        type: "boolean"
                    },
                    AuthorizationScopes: {
                        shape: "S1s",
                        locationName: "authorizationScopes"
                    },
                    AuthorizationType: {
                        locationName: "authorizationType"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    OperationName: {
                        locationName: "operationName"
                    },
                    RequestModels: {
                        shape: "S1u",
                        locationName: "requestModels"
                    },
                    RequestParameters: {
                        shape: "S1v",
                        locationName: "requestParameters"
                    },
                    RouteId: {
                        locationName: "routeId"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteResponseSelectionExpression: {
                        locationName: "routeResponseSelectionExpression"
                    },
                    Target: {
                        locationName: "target"
                    }
                }
            }
        },
        GetRouteResponse: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    },
                    RouteResponseId: {
                        location: "uri",
                        locationName: "routeResponseId"
                    }
                },
                required: [ "RouteResponseId", "ApiId", "RouteId" ]
            },
            output: {
                type: "structure",
                members: {
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    ResponseModels: {
                        shape: "S1u",
                        locationName: "responseModels"
                    },
                    ResponseParameters: {
                        shape: "S1v",
                        locationName: "responseParameters"
                    },
                    RouteResponseId: {
                        locationName: "routeResponseId"
                    },
                    RouteResponseKey: {
                        locationName: "routeResponseKey"
                    }
                }
            }
        },
        GetRouteResponses: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}/routeresponses",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    }
                },
                required: [ "RouteId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModelSelectionExpression: {
                                    locationName: "modelSelectionExpression"
                                },
                                ResponseModels: {
                                    shape: "S1u",
                                    locationName: "responseModels"
                                },
                                ResponseParameters: {
                                    shape: "S1v",
                                    locationName: "responseParameters"
                                },
                                RouteResponseId: {
                                    locationName: "routeResponseId"
                                },
                                RouteResponseKey: {
                                    locationName: "routeResponseKey"
                                }
                            },
                            required: [ "RouteResponseKey" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetRoutes: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/routes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiGatewayManaged: {
                                    locationName: "apiGatewayManaged",
                                    type: "boolean"
                                },
                                ApiKeyRequired: {
                                    locationName: "apiKeyRequired",
                                    type: "boolean"
                                },
                                AuthorizationScopes: {
                                    shape: "S1s",
                                    locationName: "authorizationScopes"
                                },
                                AuthorizationType: {
                                    locationName: "authorizationType"
                                },
                                AuthorizerId: {
                                    locationName: "authorizerId"
                                },
                                ModelSelectionExpression: {
                                    locationName: "modelSelectionExpression"
                                },
                                OperationName: {
                                    locationName: "operationName"
                                },
                                RequestModels: {
                                    shape: "S1u",
                                    locationName: "requestModels"
                                },
                                RequestParameters: {
                                    shape: "S1v",
                                    locationName: "requestParameters"
                                },
                                RouteId: {
                                    locationName: "routeId"
                                },
                                RouteKey: {
                                    locationName: "routeKey"
                                },
                                RouteResponseSelectionExpression: {
                                    locationName: "routeResponseSelectionExpression"
                                },
                                Target: {
                                    locationName: "target"
                                }
                            },
                            required: [ "RouteKey" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetStage: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/stages/{stageName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "stageName"
                    }
                },
                required: [ "StageName", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    AccessLogSettings: {
                        shape: "S21",
                        locationName: "accessLogSettings"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    AutoDeploy: {
                        locationName: "autoDeploy",
                        type: "boolean"
                    },
                    ClientCertificateId: {
                        locationName: "clientCertificateId"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    DefaultRouteSettings: {
                        shape: "S22",
                        locationName: "defaultRouteSettings"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    Description: {
                        locationName: "description"
                    },
                    LastDeploymentStatusMessage: {
                        locationName: "lastDeploymentStatusMessage"
                    },
                    LastUpdatedDate: {
                        shape: "Sl",
                        locationName: "lastUpdatedDate"
                    },
                    RouteSettings: {
                        shape: "S26",
                        locationName: "routeSettings"
                    },
                    StageName: {
                        locationName: "stageName"
                    },
                    StageVariables: {
                        shape: "S27",
                        locationName: "stageVariables"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        GetStages: {
            http: {
                method: "GET",
                requestUri: "/v2/apis/{apiId}/stages",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccessLogSettings: {
                                    shape: "S21",
                                    locationName: "accessLogSettings"
                                },
                                ApiGatewayManaged: {
                                    locationName: "apiGatewayManaged",
                                    type: "boolean"
                                },
                                AutoDeploy: {
                                    locationName: "autoDeploy",
                                    type: "boolean"
                                },
                                ClientCertificateId: {
                                    locationName: "clientCertificateId"
                                },
                                CreatedDate: {
                                    shape: "Sl",
                                    locationName: "createdDate"
                                },
                                DefaultRouteSettings: {
                                    shape: "S22",
                                    locationName: "defaultRouteSettings"
                                },
                                DeploymentId: {
                                    locationName: "deploymentId"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                LastDeploymentStatusMessage: {
                                    locationName: "lastDeploymentStatusMessage"
                                },
                                LastUpdatedDate: {
                                    shape: "Sl",
                                    locationName: "lastUpdatedDate"
                                },
                                RouteSettings: {
                                    shape: "S26",
                                    locationName: "routeSettings"
                                },
                                StageName: {
                                    locationName: "stageName"
                                },
                                StageVariables: {
                                    shape: "S27",
                                    locationName: "stageVariables"
                                },
                                Tags: {
                                    shape: "Sg",
                                    locationName: "tags"
                                }
                            },
                            required: [ "StageName" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetTags: {
            http: {
                method: "GET",
                requestUri: "/v2/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        GetVpcLink: {
            http: {
                method: "GET",
                requestUri: "/v2/vpclinks/{vpcLinkId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    VpcLinkId: {
                        location: "uri",
                        locationName: "vpcLinkId"
                    }
                },
                required: [ "VpcLinkId" ]
            },
            output: {
                type: "structure",
                members: {
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Name: {
                        locationName: "name"
                    },
                    SecurityGroupIds: {
                        shape: "S2b",
                        locationName: "securityGroupIds"
                    },
                    SubnetIds: {
                        shape: "S2c",
                        locationName: "subnetIds"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    VpcLinkId: {
                        locationName: "vpcLinkId"
                    },
                    VpcLinkStatus: {
                        locationName: "vpcLinkStatus"
                    },
                    VpcLinkStatusMessage: {
                        locationName: "vpcLinkStatusMessage"
                    },
                    VpcLinkVersion: {
                        locationName: "vpcLinkVersion"
                    }
                }
            }
        },
        GetVpcLinks: {
            http: {
                method: "GET",
                requestUri: "/v2/vpclinks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedDate: {
                                    shape: "Sl",
                                    locationName: "createdDate"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                SecurityGroupIds: {
                                    shape: "S2b",
                                    locationName: "securityGroupIds"
                                },
                                SubnetIds: {
                                    shape: "S2c",
                                    locationName: "subnetIds"
                                },
                                Tags: {
                                    shape: "Sg",
                                    locationName: "tags"
                                },
                                VpcLinkId: {
                                    locationName: "vpcLinkId"
                                },
                                VpcLinkStatus: {
                                    locationName: "vpcLinkStatus"
                                },
                                VpcLinkStatusMessage: {
                                    locationName: "vpcLinkStatusMessage"
                                },
                                VpcLinkVersion: {
                                    locationName: "vpcLinkVersion"
                                }
                            },
                            required: [ "VpcLinkId", "SecurityGroupIds", "SubnetIds", "Name" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ImportApi: {
            http: {
                method: "PUT",
                requestUri: "/v2/apis",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Basepath: {
                        location: "querystring",
                        locationName: "basepath"
                    },
                    Body: {
                        locationName: "body"
                    },
                    FailOnWarnings: {
                        location: "querystring",
                        locationName: "failOnWarnings",
                        type: "boolean"
                    }
                },
                required: [ "Body" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiEndpoint: {
                        locationName: "apiEndpoint"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    ImportInfo: {
                        shape: "Sm",
                        locationName: "importInfo"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ProtocolType: {
                        locationName: "protocolType"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Version: {
                        locationName: "version"
                    },
                    Warnings: {
                        shape: "Sm",
                        locationName: "warnings"
                    }
                }
            }
        },
        ReimportApi: {
            http: {
                method: "PUT",
                requestUri: "/v2/apis/{apiId}",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    Basepath: {
                        location: "querystring",
                        locationName: "basepath"
                    },
                    Body: {
                        locationName: "body"
                    },
                    FailOnWarnings: {
                        location: "querystring",
                        locationName: "failOnWarnings",
                        type: "boolean"
                    }
                },
                required: [ "ApiId", "Body" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiEndpoint: {
                        locationName: "apiEndpoint"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    ImportInfo: {
                        shape: "Sm",
                        locationName: "importInfo"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ProtocolType: {
                        locationName: "protocolType"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Version: {
                        locationName: "version"
                    },
                    Warnings: {
                        shape: "Sm",
                        locationName: "warnings"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v2/tags/{resource-arn}",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v2/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        shape: "Sm",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "ResourceArn", "TagKeys" ]
            }
        },
        UpdateApi: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    Name: {
                        locationName: "name"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Target: {
                        locationName: "target"
                    },
                    Version: {
                        locationName: "version"
                    }
                },
                required: [ "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiEndpoint: {
                        locationName: "apiEndpoint"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiKeySelectionExpression: {
                        locationName: "apiKeySelectionExpression"
                    },
                    CorsConfiguration: {
                        shape: "S3",
                        locationName: "corsConfiguration"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DisableSchemaValidation: {
                        locationName: "disableSchemaValidation",
                        type: "boolean"
                    },
                    DisableExecuteApiEndpoint: {
                        locationName: "disableExecuteApiEndpoint",
                        type: "boolean"
                    },
                    ImportInfo: {
                        shape: "Sm",
                        locationName: "importInfo"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ProtocolType: {
                        locationName: "protocolType"
                    },
                    RouteSelectionExpression: {
                        locationName: "routeSelectionExpression"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Version: {
                        locationName: "version"
                    },
                    Warnings: {
                        shape: "Sm",
                        locationName: "warnings"
                    }
                }
            }
        },
        UpdateApiMapping: {
            http: {
                method: "PATCH",
                requestUri: "/v2/domainnames/{domainName}/apimappings/{apiMappingId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiMappingId: {
                        location: "uri",
                        locationName: "apiMappingId"
                    },
                    ApiMappingKey: {
                        locationName: "apiMappingKey"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    },
                    Stage: {
                        locationName: "stage"
                    }
                },
                required: [ "ApiMappingId", "ApiId", "DomainName" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiId: {
                        locationName: "apiId"
                    },
                    ApiMappingId: {
                        locationName: "apiMappingId"
                    },
                    ApiMappingKey: {
                        locationName: "apiMappingKey"
                    },
                    Stage: {
                        locationName: "stage"
                    }
                }
            }
        },
        UpdateAuthorizer: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/authorizers/{authorizerId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    AuthorizerCredentialsArn: {
                        locationName: "authorizerCredentialsArn"
                    },
                    AuthorizerId: {
                        location: "uri",
                        locationName: "authorizerId"
                    },
                    AuthorizerPayloadFormatVersion: {
                        locationName: "authorizerPayloadFormatVersion"
                    },
                    AuthorizerResultTtlInSeconds: {
                        locationName: "authorizerResultTtlInSeconds",
                        type: "integer"
                    },
                    AuthorizerType: {
                        locationName: "authorizerType"
                    },
                    AuthorizerUri: {
                        locationName: "authorizerUri"
                    },
                    EnableSimpleResponses: {
                        locationName: "enableSimpleResponses",
                        type: "boolean"
                    },
                    IdentitySource: {
                        shape: "Ss",
                        locationName: "identitySource"
                    },
                    IdentityValidationExpression: {
                        locationName: "identityValidationExpression"
                    },
                    JwtConfiguration: {
                        shape: "St",
                        locationName: "jwtConfiguration"
                    },
                    Name: {
                        locationName: "name"
                    }
                },
                required: [ "AuthorizerId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    AuthorizerCredentialsArn: {
                        locationName: "authorizerCredentialsArn"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    AuthorizerPayloadFormatVersion: {
                        locationName: "authorizerPayloadFormatVersion"
                    },
                    AuthorizerResultTtlInSeconds: {
                        locationName: "authorizerResultTtlInSeconds",
                        type: "integer"
                    },
                    AuthorizerType: {
                        locationName: "authorizerType"
                    },
                    AuthorizerUri: {
                        locationName: "authorizerUri"
                    },
                    EnableSimpleResponses: {
                        locationName: "enableSimpleResponses",
                        type: "boolean"
                    },
                    IdentitySource: {
                        shape: "Ss",
                        locationName: "identitySource"
                    },
                    IdentityValidationExpression: {
                        locationName: "identityValidationExpression"
                    },
                    JwtConfiguration: {
                        shape: "St",
                        locationName: "jwtConfiguration"
                    },
                    Name: {
                        locationName: "name"
                    }
                }
            }
        },
        UpdateDeployment: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/deployments/{deploymentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    DeploymentId: {
                        location: "uri",
                        locationName: "deploymentId"
                    },
                    Description: {
                        locationName: "description"
                    }
                },
                required: [ "ApiId", "DeploymentId" ]
            },
            output: {
                type: "structure",
                members: {
                    AutoDeployed: {
                        locationName: "autoDeployed",
                        type: "boolean"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    DeploymentStatus: {
                        locationName: "deploymentStatus"
                    },
                    DeploymentStatusMessage: {
                        locationName: "deploymentStatusMessage"
                    },
                    Description: {
                        locationName: "description"
                    }
                }
            }
        },
        UpdateDomainName: {
            http: {
                method: "PATCH",
                requestUri: "/v2/domainnames/{domainName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "domainName"
                    },
                    DomainNameConfigurations: {
                        shape: "S10",
                        locationName: "domainNameConfigurations"
                    },
                    MutualTlsAuthentication: {
                        shape: "S15",
                        locationName: "mutualTlsAuthentication"
                    }
                },
                required: [ "DomainName" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiMappingSelectionExpression: {
                        locationName: "apiMappingSelectionExpression"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    DomainNameConfigurations: {
                        shape: "S10",
                        locationName: "domainNameConfigurations"
                    },
                    MutualTlsAuthentication: {
                        shape: "S17",
                        locationName: "mutualTlsAuthentication"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateIntegration: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ConnectionId: {
                        locationName: "connectionId"
                    },
                    ConnectionType: {
                        locationName: "connectionType"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    },
                    IntegrationMethod: {
                        locationName: "integrationMethod"
                    },
                    IntegrationSubtype: {
                        locationName: "integrationSubtype"
                    },
                    IntegrationType: {
                        locationName: "integrationType"
                    },
                    IntegrationUri: {
                        locationName: "integrationUri"
                    },
                    PassthroughBehavior: {
                        locationName: "passthroughBehavior"
                    },
                    PayloadFormatVersion: {
                        locationName: "payloadFormatVersion"
                    },
                    RequestParameters: {
                        shape: "S1e",
                        locationName: "requestParameters"
                    },
                    RequestTemplates: {
                        shape: "S1f",
                        locationName: "requestTemplates"
                    },
                    ResponseParameters: {
                        shape: "S1h",
                        locationName: "responseParameters"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    },
                    TimeoutInMillis: {
                        locationName: "timeoutInMillis",
                        type: "integer"
                    },
                    TlsConfig: {
                        shape: "S1j",
                        locationName: "tlsConfig"
                    }
                },
                required: [ "ApiId", "IntegrationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ConnectionId: {
                        locationName: "connectionId"
                    },
                    ConnectionType: {
                        locationName: "connectionType"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    CredentialsArn: {
                        locationName: "credentialsArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    IntegrationId: {
                        locationName: "integrationId"
                    },
                    IntegrationMethod: {
                        locationName: "integrationMethod"
                    },
                    IntegrationResponseSelectionExpression: {
                        locationName: "integrationResponseSelectionExpression"
                    },
                    IntegrationSubtype: {
                        locationName: "integrationSubtype"
                    },
                    IntegrationType: {
                        locationName: "integrationType"
                    },
                    IntegrationUri: {
                        locationName: "integrationUri"
                    },
                    PassthroughBehavior: {
                        locationName: "passthroughBehavior"
                    },
                    PayloadFormatVersion: {
                        locationName: "payloadFormatVersion"
                    },
                    RequestParameters: {
                        shape: "S1e",
                        locationName: "requestParameters"
                    },
                    RequestTemplates: {
                        shape: "S1f",
                        locationName: "requestTemplates"
                    },
                    ResponseParameters: {
                        shape: "S1h",
                        locationName: "responseParameters"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    },
                    TimeoutInMillis: {
                        locationName: "timeoutInMillis",
                        type: "integer"
                    },
                    TlsConfig: {
                        shape: "S1l",
                        locationName: "tlsConfig"
                    }
                }
            }
        },
        UpdateIntegrationResponse: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    IntegrationId: {
                        location: "uri",
                        locationName: "integrationId"
                    },
                    IntegrationResponseId: {
                        location: "uri",
                        locationName: "integrationResponseId"
                    },
                    IntegrationResponseKey: {
                        locationName: "integrationResponseKey"
                    },
                    ResponseParameters: {
                        shape: "S1e",
                        locationName: "responseParameters"
                    },
                    ResponseTemplates: {
                        shape: "S1f",
                        locationName: "responseTemplates"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    }
                },
                required: [ "ApiId", "IntegrationResponseId", "IntegrationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ContentHandlingStrategy: {
                        locationName: "contentHandlingStrategy"
                    },
                    IntegrationResponseId: {
                        locationName: "integrationResponseId"
                    },
                    IntegrationResponseKey: {
                        locationName: "integrationResponseKey"
                    },
                    ResponseParameters: {
                        shape: "S1e",
                        locationName: "responseParameters"
                    },
                    ResponseTemplates: {
                        shape: "S1f",
                        locationName: "responseTemplates"
                    },
                    TemplateSelectionExpression: {
                        locationName: "templateSelectionExpression"
                    }
                }
            }
        },
        UpdateModel: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/models/{modelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ContentType: {
                        locationName: "contentType"
                    },
                    Description: {
                        locationName: "description"
                    },
                    ModelId: {
                        location: "uri",
                        locationName: "modelId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Schema: {
                        locationName: "schema"
                    }
                },
                required: [ "ModelId", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    ContentType: {
                        locationName: "contentType"
                    },
                    Description: {
                        locationName: "description"
                    },
                    ModelId: {
                        locationName: "modelId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Schema: {
                        locationName: "schema"
                    }
                }
            }
        },
        UpdateRoute: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ApiKeyRequired: {
                        locationName: "apiKeyRequired",
                        type: "boolean"
                    },
                    AuthorizationScopes: {
                        shape: "S1s",
                        locationName: "authorizationScopes"
                    },
                    AuthorizationType: {
                        locationName: "authorizationType"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    OperationName: {
                        locationName: "operationName"
                    },
                    RequestModels: {
                        shape: "S1u",
                        locationName: "requestModels"
                    },
                    RequestParameters: {
                        shape: "S1v",
                        locationName: "requestParameters"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteResponseSelectionExpression: {
                        locationName: "routeResponseSelectionExpression"
                    },
                    Target: {
                        locationName: "target"
                    }
                },
                required: [ "ApiId", "RouteId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    ApiKeyRequired: {
                        locationName: "apiKeyRequired",
                        type: "boolean"
                    },
                    AuthorizationScopes: {
                        shape: "S1s",
                        locationName: "authorizationScopes"
                    },
                    AuthorizationType: {
                        locationName: "authorizationType"
                    },
                    AuthorizerId: {
                        locationName: "authorizerId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    OperationName: {
                        locationName: "operationName"
                    },
                    RequestModels: {
                        shape: "S1u",
                        locationName: "requestModels"
                    },
                    RequestParameters: {
                        shape: "S1v",
                        locationName: "requestParameters"
                    },
                    RouteId: {
                        locationName: "routeId"
                    },
                    RouteKey: {
                        locationName: "routeKey"
                    },
                    RouteResponseSelectionExpression: {
                        locationName: "routeResponseSelectionExpression"
                    },
                    Target: {
                        locationName: "target"
                    }
                }
            }
        },
        UpdateRouteResponse: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    ResponseModels: {
                        shape: "S1u",
                        locationName: "responseModels"
                    },
                    ResponseParameters: {
                        shape: "S1v",
                        locationName: "responseParameters"
                    },
                    RouteId: {
                        location: "uri",
                        locationName: "routeId"
                    },
                    RouteResponseId: {
                        location: "uri",
                        locationName: "routeResponseId"
                    },
                    RouteResponseKey: {
                        locationName: "routeResponseKey"
                    }
                },
                required: [ "RouteResponseId", "ApiId", "RouteId" ]
            },
            output: {
                type: "structure",
                members: {
                    ModelSelectionExpression: {
                        locationName: "modelSelectionExpression"
                    },
                    ResponseModels: {
                        shape: "S1u",
                        locationName: "responseModels"
                    },
                    ResponseParameters: {
                        shape: "S1v",
                        locationName: "responseParameters"
                    },
                    RouteResponseId: {
                        locationName: "routeResponseId"
                    },
                    RouteResponseKey: {
                        locationName: "routeResponseKey"
                    }
                }
            }
        },
        UpdateStage: {
            http: {
                method: "PATCH",
                requestUri: "/v2/apis/{apiId}/stages/{stageName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AccessLogSettings: {
                        shape: "S21",
                        locationName: "accessLogSettings"
                    },
                    ApiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    AutoDeploy: {
                        locationName: "autoDeploy",
                        type: "boolean"
                    },
                    ClientCertificateId: {
                        locationName: "clientCertificateId"
                    },
                    DefaultRouteSettings: {
                        shape: "S22",
                        locationName: "defaultRouteSettings"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    Description: {
                        locationName: "description"
                    },
                    RouteSettings: {
                        shape: "S26",
                        locationName: "routeSettings"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "stageName"
                    },
                    StageVariables: {
                        shape: "S27",
                        locationName: "stageVariables"
                    }
                },
                required: [ "StageName", "ApiId" ]
            },
            output: {
                type: "structure",
                members: {
                    AccessLogSettings: {
                        shape: "S21",
                        locationName: "accessLogSettings"
                    },
                    ApiGatewayManaged: {
                        locationName: "apiGatewayManaged",
                        type: "boolean"
                    },
                    AutoDeploy: {
                        locationName: "autoDeploy",
                        type: "boolean"
                    },
                    ClientCertificateId: {
                        locationName: "clientCertificateId"
                    },
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    DefaultRouteSettings: {
                        shape: "S22",
                        locationName: "defaultRouteSettings"
                    },
                    DeploymentId: {
                        locationName: "deploymentId"
                    },
                    Description: {
                        locationName: "description"
                    },
                    LastDeploymentStatusMessage: {
                        locationName: "lastDeploymentStatusMessage"
                    },
                    LastUpdatedDate: {
                        shape: "Sl",
                        locationName: "lastUpdatedDate"
                    },
                    RouteSettings: {
                        shape: "S26",
                        locationName: "routeSettings"
                    },
                    StageName: {
                        locationName: "stageName"
                    },
                    StageVariables: {
                        shape: "S27",
                        locationName: "stageVariables"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateVpcLink: {
            http: {
                method: "PATCH",
                requestUri: "/v2/vpclinks/{vpcLinkId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name"
                    },
                    VpcLinkId: {
                        location: "uri",
                        locationName: "vpcLinkId"
                    }
                },
                required: [ "VpcLinkId" ]
            },
            output: {
                type: "structure",
                members: {
                    CreatedDate: {
                        shape: "Sl",
                        locationName: "createdDate"
                    },
                    Name: {
                        locationName: "name"
                    },
                    SecurityGroupIds: {
                        shape: "S2b",
                        locationName: "securityGroupIds"
                    },
                    SubnetIds: {
                        shape: "S2c",
                        locationName: "subnetIds"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    VpcLinkId: {
                        locationName: "vpcLinkId"
                    },
                    VpcLinkStatus: {
                        locationName: "vpcLinkStatus"
                    },
                    VpcLinkStatusMessage: {
                        locationName: "vpcLinkStatusMessage"
                    },
                    VpcLinkVersion: {
                        locationName: "vpcLinkVersion"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                AllowCredentials: {
                    locationName: "allowCredentials",
                    type: "boolean"
                },
                AllowHeaders: {
                    shape: "S5",
                    locationName: "allowHeaders"
                },
                AllowMethods: {
                    locationName: "allowMethods",
                    type: "list",
                    member: {}
                },
                AllowOrigins: {
                    locationName: "allowOrigins",
                    type: "list",
                    member: {}
                },
                ExposeHeaders: {
                    shape: "S5",
                    locationName: "exposeHeaders"
                },
                MaxAge: {
                    locationName: "maxAge",
                    type: "integer"
                }
            }
        },
        S5: {
            type: "list",
            member: {}
        },
        Sg: {
            type: "map",
            key: {},
            value: {}
        },
        Sl: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sm: {
            type: "list",
            member: {}
        },
        Ss: {
            type: "list",
            member: {}
        },
        St: {
            type: "structure",
            members: {
                Audience: {
                    shape: "Sm",
                    locationName: "audience"
                },
                Issuer: {
                    locationName: "issuer"
                }
            }
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ApiGatewayDomainName: {
                        locationName: "apiGatewayDomainName"
                    },
                    CertificateArn: {
                        locationName: "certificateArn"
                    },
                    CertificateName: {
                        locationName: "certificateName"
                    },
                    CertificateUploadDate: {
                        shape: "Sl",
                        locationName: "certificateUploadDate"
                    },
                    DomainNameStatus: {
                        locationName: "domainNameStatus"
                    },
                    DomainNameStatusMessage: {
                        locationName: "domainNameStatusMessage"
                    },
                    EndpointType: {
                        locationName: "endpointType"
                    },
                    HostedZoneId: {
                        locationName: "hostedZoneId"
                    },
                    SecurityPolicy: {
                        locationName: "securityPolicy"
                    },
                    OwnershipVerificationCertificateArn: {
                        locationName: "ownershipVerificationCertificateArn"
                    }
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                TruststoreUri: {
                    locationName: "truststoreUri"
                },
                TruststoreVersion: {
                    locationName: "truststoreVersion"
                }
            }
        },
        S17: {
            type: "structure",
            members: {
                TruststoreUri: {
                    locationName: "truststoreUri"
                },
                TruststoreVersion: {
                    locationName: "truststoreVersion"
                },
                TruststoreWarnings: {
                    shape: "Sm",
                    locationName: "truststoreWarnings"
                }
            }
        },
        S1e: {
            type: "map",
            key: {},
            value: {}
        },
        S1f: {
            type: "map",
            key: {},
            value: {}
        },
        S1h: {
            type: "map",
            key: {},
            value: {
                shape: "S1e"
            }
        },
        S1j: {
            type: "structure",
            members: {
                ServerNameToVerify: {
                    locationName: "serverNameToVerify"
                }
            }
        },
        S1l: {
            type: "structure",
            members: {
                ServerNameToVerify: {
                    locationName: "serverNameToVerify"
                }
            }
        },
        S1s: {
            type: "list",
            member: {}
        },
        S1u: {
            type: "map",
            key: {},
            value: {}
        },
        S1v: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Required: {
                        locationName: "required",
                        type: "boolean"
                    }
                }
            }
        },
        S21: {
            type: "structure",
            members: {
                DestinationArn: {
                    locationName: "destinationArn"
                },
                Format: {
                    locationName: "format"
                }
            }
        },
        S22: {
            type: "structure",
            members: {
                DataTraceEnabled: {
                    locationName: "dataTraceEnabled",
                    type: "boolean"
                },
                DetailedMetricsEnabled: {
                    locationName: "detailedMetricsEnabled",
                    type: "boolean"
                },
                LoggingLevel: {
                    locationName: "loggingLevel"
                },
                ThrottlingBurstLimit: {
                    locationName: "throttlingBurstLimit",
                    type: "integer"
                },
                ThrottlingRateLimit: {
                    locationName: "throttlingRateLimit",
                    type: "double"
                }
            }
        },
        S26: {
            type: "map",
            key: {},
            value: {
                shape: "S22"
            }
        },
        S27: {
            type: "map",
            key: {},
            value: {}
        },
        S2b: {
            type: "list",
            member: {}
        },
        S2c: {
            type: "list",
            member: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["docdb"] = {};

AWS.DocDB = AWS.Service.defineService("docdb", [ "2014-10-31" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    93: [ function(require, module, exports) {
        var AWS = require("../core");
        var rdsutil = require("./rdsutil");
        var crossRegionOperations = [ "createDBCluster", "copyDBClusterSnapshot" ];
        AWS.util.update(AWS.DocDB.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                if (crossRegionOperations.indexOf(request.operation) !== -1 && this.config.params && this.config.params.SourceRegion && request.params && !request.params.SourceRegion) {
                    request.params.SourceRegion = this.config.params.SourceRegion;
                }
                rdsutil.setupRequestListeners(this, request, crossRegionOperations);
            }
        });
    }, {
        "../core": 39,
        "./rdsutil": 108
    } ]
}, {}, [ 93 ]);

AWS.apiLoader.services["docdb"]["2014-10-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-10-31",
        endpointPrefix: "rds",
        protocol: "query",
        serviceAbbreviation: "Amazon DocDB",
        serviceFullName: "Amazon DocumentDB with MongoDB compatibility",
        serviceId: "DocDB",
        signatureVersion: "v4",
        signingName: "rds",
        uid: "docdb-2014-10-31",
        xmlNamespace: "http://rds.amazonaws.com/doc/2014-10-31/"
    },
    operations: {
        AddSourceIdentifierToSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SourceIdentifier" ],
                members: {
                    SubscriptionName: {},
                    SourceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "AddSourceIdentifierToSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S4"
                    }
                }
            }
        },
        AddTagsToResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "Tags" ],
                members: {
                    ResourceName: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            }
        },
        ApplyPendingMaintenanceAction: {
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ApplyAction", "OptInType" ],
                members: {
                    ResourceIdentifier: {},
                    ApplyAction: {},
                    OptInType: {}
                }
            },
            output: {
                resultWrapper: "ApplyPendingMaintenanceActionResult",
                type: "structure",
                members: {
                    ResourcePendingMaintenanceActions: {
                        shape: "Sd"
                    }
                }
            }
        },
        CopyDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "SourceDBClusterParameterGroupIdentifier", "TargetDBClusterParameterGroupIdentifier", "TargetDBClusterParameterGroupDescription" ],
                members: {
                    SourceDBClusterParameterGroupIdentifier: {},
                    TargetDBClusterParameterGroupIdentifier: {},
                    TargetDBClusterParameterGroupDescription: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "CopyDBClusterParameterGroupResult",
                type: "structure",
                members: {
                    DBClusterParameterGroup: {
                        shape: "Sj"
                    }
                }
            }
        },
        CopyDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "SourceDBClusterSnapshotIdentifier", "TargetDBClusterSnapshotIdentifier" ],
                members: {
                    SourceDBClusterSnapshotIdentifier: {},
                    TargetDBClusterSnapshotIdentifier: {},
                    KmsKeyId: {},
                    PreSignedUrl: {},
                    CopyTags: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "CopyDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "Engine" ],
                members: {
                    AvailabilityZones: {
                        shape: "So"
                    },
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    DBClusterIdentifier: {},
                    DBClusterParameterGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Ss"
                    },
                    DBSubnetGroupName: {},
                    Engine: {},
                    EngineVersion: {},
                    Port: {
                        type: "integer"
                    },
                    MasterUsername: {},
                    MasterUserPassword: {},
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    Tags: {
                        shape: "S9"
                    },
                    StorageEncrypted: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    PreSignedUrl: {},
                    EnableCloudwatchLogsExports: {
                        shape: "St"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    GlobalClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "CreateDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        CreateDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName", "DBParameterGroupFamily", "Description" ],
                members: {
                    DBClusterParameterGroupName: {},
                    DBParameterGroupFamily: {},
                    Description: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBClusterParameterGroupResult",
                type: "structure",
                members: {
                    DBClusterParameterGroup: {
                        shape: "Sj"
                    }
                }
            }
        },
        CreateDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier", "DBClusterIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {},
                    DBClusterIdentifier: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier", "DBInstanceClass", "Engine", "DBClusterIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    DBInstanceClass: {},
                    Engine: {},
                    AvailabilityZone: {},
                    PreferredMaintenanceWindow: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    DBClusterIdentifier: {},
                    PromotionTier: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1a"
                    }
                }
            }
        },
        CreateDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName", "DBSubnetGroupDescription", "SubnetIds" ],
                members: {
                    DBSubnetGroupName: {},
                    DBSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S1l"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBSubnetGroupResult",
                type: "structure",
                members: {
                    DBSubnetGroup: {
                        shape: "S1c"
                    }
                }
            }
        },
        CreateEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SnsTopicArn" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    EventCategories: {
                        shape: "S6"
                    },
                    SourceIds: {
                        shape: "S5"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "CreateEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {},
                    SourceDBClusterIdentifier: {},
                    Engine: {},
                    EngineVersion: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    DatabaseName: {},
                    StorageEncrypted: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CreateGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S1r"
                    }
                }
            }
        },
        DeleteDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    SkipFinalSnapshot: {
                        type: "boolean"
                    },
                    FinalDBSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        DeleteDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {}
                }
            }
        },
        DeleteDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "Sn"
                    }
                }
            }
        },
        DeleteDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1a"
                    }
                }
            }
        },
        DeleteDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName" ],
                members: {
                    DBSubnetGroupName: {}
                }
            }
        },
        DeleteEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {}
                }
            },
            output: {
                resultWrapper: "DeleteEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S1r"
                    }
                }
            }
        },
        DescribeCertificates: {
            input: {
                type: "structure",
                members: {
                    CertificateIdentifier: {},
                    Filters: {
                        shape: "S28"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeCertificatesResult",
                type: "structure",
                members: {
                    Certificates: {
                        type: "list",
                        member: {
                            locationName: "Certificate",
                            type: "structure",
                            members: {
                                CertificateIdentifier: {},
                                CertificateType: {},
                                Thumbprint: {},
                                ValidFrom: {
                                    type: "timestamp"
                                },
                                ValidTill: {
                                    type: "timestamp"
                                },
                                CertificateArn: {}
                            },
                            wrapper: true
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBClusterParameterGroups: {
            input: {
                type: "structure",
                members: {
                    DBClusterParameterGroupName: {},
                    Filters: {
                        shape: "S28"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterParameterGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterParameterGroups: {
                        type: "list",
                        member: {
                            shape: "Sj",
                            locationName: "DBClusterParameterGroup"
                        }
                    }
                }
            }
        },
        DescribeDBClusterParameters: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {},
                    Source: {},
                    Filters: {
                        shape: "S28"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterParametersResult",
                type: "structure",
                members: {
                    Parameters: {
                        shape: "S2j"
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBClusterSnapshotAttributes: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterSnapshotAttributesResult",
                type: "structure",
                members: {
                    DBClusterSnapshotAttributesResult: {
                        shape: "S2o"
                    }
                }
            }
        },
        DescribeDBClusterSnapshots: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    DBClusterSnapshotIdentifier: {},
                    SnapshotType: {},
                    Filters: {
                        shape: "S28"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    IncludeShared: {
                        type: "boolean"
                    },
                    IncludePublic: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterSnapshotsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterSnapshots: {
                        type: "list",
                        member: {
                            shape: "Sn",
                            locationName: "DBClusterSnapshot"
                        }
                    }
                }
            }
        },
        DescribeDBClusters: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    Filters: {
                        shape: "S28"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClustersResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusters: {
                        type: "list",
                        member: {
                            shape: "Sw",
                            locationName: "DBCluster"
                        }
                    }
                }
            }
        },
        DescribeDBEngineVersions: {
            input: {
                type: "structure",
                members: {
                    Engine: {},
                    EngineVersion: {},
                    DBParameterGroupFamily: {},
                    Filters: {
                        shape: "S28"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    DefaultOnly: {
                        type: "boolean"
                    },
                    ListSupportedCharacterSets: {
                        type: "boolean"
                    },
                    ListSupportedTimezones: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBEngineVersionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBEngineVersions: {
                        type: "list",
                        member: {
                            locationName: "DBEngineVersion",
                            type: "structure",
                            members: {
                                Engine: {},
                                EngineVersion: {},
                                DBParameterGroupFamily: {},
                                DBEngineDescription: {},
                                DBEngineVersionDescription: {},
                                ValidUpgradeTarget: {
                                    type: "list",
                                    member: {
                                        locationName: "UpgradeTarget",
                                        type: "structure",
                                        members: {
                                            Engine: {},
                                            EngineVersion: {},
                                            Description: {},
                                            AutoUpgrade: {
                                                type: "boolean"
                                            },
                                            IsMajorVersionUpgrade: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                ExportableLogTypes: {
                                    shape: "St"
                                },
                                SupportsLogExportsToCloudwatchLogs: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeDBInstances: {
            input: {
                type: "structure",
                members: {
                    DBInstanceIdentifier: {},
                    Filters: {
                        shape: "S28"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBInstancesResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBInstances: {
                        type: "list",
                        member: {
                            shape: "S1a",
                            locationName: "DBInstance"
                        }
                    }
                }
            }
        },
        DescribeDBSubnetGroups: {
            input: {
                type: "structure",
                members: {
                    DBSubnetGroupName: {},
                    Filters: {
                        shape: "S28"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBSubnetGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBSubnetGroups: {
                        type: "list",
                        member: {
                            shape: "S1c",
                            locationName: "DBSubnetGroup"
                        }
                    }
                }
            }
        },
        DescribeEngineDefaultClusterParameters: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupFamily" ],
                members: {
                    DBParameterGroupFamily: {},
                    Filters: {
                        shape: "S28"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEngineDefaultClusterParametersResult",
                type: "structure",
                members: {
                    EngineDefaults: {
                        type: "structure",
                        members: {
                            DBParameterGroupFamily: {},
                            Marker: {},
                            Parameters: {
                                shape: "S2j"
                            }
                        },
                        wrapper: true
                    }
                }
            }
        },
        DescribeEventCategories: {
            input: {
                type: "structure",
                members: {
                    SourceType: {},
                    Filters: {
                        shape: "S28"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeEventCategoriesResult",
                type: "structure",
                members: {
                    EventCategoriesMapList: {
                        type: "list",
                        member: {
                            locationName: "EventCategoriesMap",
                            type: "structure",
                            members: {
                                SourceType: {},
                                EventCategories: {
                                    shape: "S6"
                                }
                            },
                            wrapper: true
                        }
                    }
                }
            }
        },
        DescribeEventSubscriptions: {
            input: {
                type: "structure",
                members: {
                    SubscriptionName: {},
                    Filters: {
                        shape: "S28"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventSubscriptionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    EventSubscriptionsList: {
                        type: "list",
                        member: {
                            shape: "S4",
                            locationName: "EventSubscription"
                        }
                    }
                }
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    SourceIdentifier: {},
                    SourceType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "integer"
                    },
                    EventCategories: {
                        shape: "S6"
                    },
                    Filters: {
                        shape: "S28"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventsResult",
                type: "structure",
                members: {
                    Marker: {},
                    Events: {
                        type: "list",
                        member: {
                            locationName: "Event",
                            type: "structure",
                            members: {
                                SourceIdentifier: {},
                                SourceType: {},
                                Message: {},
                                EventCategories: {
                                    shape: "S6"
                                },
                                Date: {
                                    type: "timestamp"
                                },
                                SourceArn: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeGlobalClusters: {
            input: {
                type: "structure",
                members: {
                    GlobalClusterIdentifier: {},
                    Filters: {
                        shape: "S28"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeGlobalClustersResult",
                type: "structure",
                members: {
                    Marker: {},
                    GlobalClusters: {
                        type: "list",
                        member: {
                            shape: "S1r",
                            locationName: "GlobalClusterMember"
                        }
                    }
                }
            }
        },
        DescribeOrderableDBInstanceOptions: {
            input: {
                type: "structure",
                required: [ "Engine" ],
                members: {
                    Engine: {},
                    EngineVersion: {},
                    DBInstanceClass: {},
                    LicenseModel: {},
                    Vpc: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S28"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeOrderableDBInstanceOptionsResult",
                type: "structure",
                members: {
                    OrderableDBInstanceOptions: {
                        type: "list",
                        member: {
                            locationName: "OrderableDBInstanceOption",
                            type: "structure",
                            members: {
                                Engine: {},
                                EngineVersion: {},
                                DBInstanceClass: {},
                                LicenseModel: {},
                                AvailabilityZones: {
                                    type: "list",
                                    member: {
                                        shape: "S1f",
                                        locationName: "AvailabilityZone"
                                    }
                                },
                                Vpc: {
                                    type: "boolean"
                                }
                            },
                            wrapper: true
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribePendingMaintenanceActions: {
            input: {
                type: "structure",
                members: {
                    ResourceIdentifier: {},
                    Filters: {
                        shape: "S28"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribePendingMaintenanceActionsResult",
                type: "structure",
                members: {
                    PendingMaintenanceActions: {
                        type: "list",
                        member: {
                            shape: "Sd",
                            locationName: "ResourcePendingMaintenanceActions"
                        }
                    },
                    Marker: {}
                }
            }
        },
        FailoverDBCluster: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    TargetDBInstanceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "FailoverDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceName" ],
                members: {
                    ResourceName: {},
                    Filters: {
                        shape: "S28"
                    }
                }
            },
            output: {
                resultWrapper: "ListTagsForResourceResult",
                type: "structure",
                members: {
                    TagList: {
                        shape: "S9"
                    }
                }
            }
        },
        ModifyDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    NewDBClusterIdentifier: {},
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    DBClusterParameterGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Ss"
                    },
                    Port: {
                        type: "integer"
                    },
                    MasterUserPassword: {},
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    CloudwatchLogsExportConfiguration: {
                        type: "structure",
                        members: {
                            EnableLogTypes: {
                                shape: "St"
                            },
                            DisableLogTypes: {
                                shape: "St"
                            }
                        }
                    },
                    EngineVersion: {},
                    DeletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        ModifyDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName", "Parameters" ],
                members: {
                    DBClusterParameterGroupName: {},
                    Parameters: {
                        shape: "S2j"
                    }
                }
            },
            output: {
                shape: "S48",
                resultWrapper: "ModifyDBClusterParameterGroupResult"
            }
        },
        ModifyDBClusterSnapshotAttribute: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier", "AttributeName" ],
                members: {
                    DBClusterSnapshotIdentifier: {},
                    AttributeName: {},
                    ValuesToAdd: {
                        shape: "S2r"
                    },
                    ValuesToRemove: {
                        shape: "S2r"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBClusterSnapshotAttributeResult",
                type: "structure",
                members: {
                    DBClusterSnapshotAttributesResult: {
                        shape: "S2o"
                    }
                }
            }
        },
        ModifyDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    DBInstanceClass: {},
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    PreferredMaintenanceWindow: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    NewDBInstanceIdentifier: {},
                    CACertificateIdentifier: {},
                    PromotionTier: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1a"
                    }
                }
            }
        },
        ModifyDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName", "SubnetIds" ],
                members: {
                    DBSubnetGroupName: {},
                    DBSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBSubnetGroupResult",
                type: "structure",
                members: {
                    DBSubnetGroup: {
                        shape: "S1c"
                    }
                }
            }
        },
        ModifyEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    EventCategories: {
                        shape: "S6"
                    },
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S4"
                    }
                }
            }
        },
        ModifyGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {},
                    NewGlobalClusterIdentifier: {},
                    DeletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S1r"
                    }
                }
            }
        },
        RebootDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    ForceFailover: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RebootDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1a"
                    }
                }
            }
        },
        RemoveFromGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier", "DbClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {},
                    DbClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "RemoveFromGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S1r"
                    }
                }
            }
        },
        RemoveSourceIdentifierFromSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SourceIdentifier" ],
                members: {
                    SubscriptionName: {},
                    SourceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "RemoveSourceIdentifierFromSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S4"
                    }
                }
            }
        },
        RemoveTagsFromResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "TagKeys" ],
                members: {
                    ResourceName: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ResetDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {},
                    ResetAllParameters: {
                        type: "boolean"
                    },
                    Parameters: {
                        shape: "S2j"
                    }
                }
            },
            output: {
                shape: "S48",
                resultWrapper: "ResetDBClusterParameterGroupResult"
            }
        },
        RestoreDBClusterFromSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "SnapshotIdentifier", "Engine" ],
                members: {
                    AvailabilityZones: {
                        shape: "So"
                    },
                    DBClusterIdentifier: {},
                    SnapshotIdentifier: {},
                    Engine: {},
                    EngineVersion: {},
                    Port: {
                        type: "integer"
                    },
                    DBSubnetGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Ss"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    KmsKeyId: {},
                    EnableCloudwatchLogsExports: {
                        shape: "St"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RestoreDBClusterFromSnapshotResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        RestoreDBClusterToPointInTime: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "SourceDBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    SourceDBClusterIdentifier: {},
                    RestoreToTime: {
                        type: "timestamp"
                    },
                    UseLatestRestorableTime: {
                        type: "boolean"
                    },
                    Port: {
                        type: "integer"
                    },
                    DBSubnetGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Ss"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    KmsKeyId: {},
                    EnableCloudwatchLogsExports: {
                        shape: "St"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RestoreDBClusterToPointInTimeResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        StartDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "StartDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        },
        StopDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "StopDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sw"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                CustomerAwsId: {},
                CustSubscriptionId: {},
                SnsTopicArn: {},
                Status: {},
                SubscriptionCreationTime: {},
                SourceType: {},
                SourceIdsList: {
                    shape: "S5"
                },
                EventCategoriesList: {
                    shape: "S6"
                },
                Enabled: {
                    type: "boolean"
                },
                EventSubscriptionArn: {}
            },
            wrapper: true
        },
        S5: {
            type: "list",
            member: {
                locationName: "SourceId"
            }
        },
        S6: {
            type: "list",
            member: {
                locationName: "EventCategory"
            }
        },
        S9: {
            type: "list",
            member: {
                locationName: "Tag",
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                ResourceIdentifier: {},
                PendingMaintenanceActionDetails: {
                    type: "list",
                    member: {
                        locationName: "PendingMaintenanceAction",
                        type: "structure",
                        members: {
                            Action: {},
                            AutoAppliedAfterDate: {
                                type: "timestamp"
                            },
                            ForcedApplyDate: {
                                type: "timestamp"
                            },
                            OptInStatus: {},
                            CurrentApplyDate: {
                                type: "timestamp"
                            },
                            Description: {}
                        }
                    }
                }
            },
            wrapper: true
        },
        Sj: {
            type: "structure",
            members: {
                DBClusterParameterGroupName: {},
                DBParameterGroupFamily: {},
                Description: {},
                DBClusterParameterGroupArn: {}
            },
            wrapper: true
        },
        Sn: {
            type: "structure",
            members: {
                AvailabilityZones: {
                    shape: "So"
                },
                DBClusterSnapshotIdentifier: {},
                DBClusterIdentifier: {},
                SnapshotCreateTime: {
                    type: "timestamp"
                },
                Engine: {},
                Status: {},
                Port: {
                    type: "integer"
                },
                VpcId: {},
                ClusterCreateTime: {
                    type: "timestamp"
                },
                MasterUsername: {},
                EngineVersion: {},
                SnapshotType: {},
                PercentProgress: {
                    type: "integer"
                },
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DBClusterSnapshotArn: {},
                SourceDBClusterSnapshotArn: {}
            },
            wrapper: true
        },
        So: {
            type: "list",
            member: {
                locationName: "AvailabilityZone"
            }
        },
        Ss: {
            type: "list",
            member: {
                locationName: "VpcSecurityGroupId"
            }
        },
        St: {
            type: "list",
            member: {}
        },
        Sw: {
            type: "structure",
            members: {
                AvailabilityZones: {
                    shape: "So"
                },
                BackupRetentionPeriod: {
                    type: "integer"
                },
                DBClusterIdentifier: {},
                DBClusterParameterGroup: {},
                DBSubnetGroup: {},
                Status: {},
                PercentProgress: {},
                EarliestRestorableTime: {
                    type: "timestamp"
                },
                Endpoint: {},
                ReaderEndpoint: {},
                MultiAZ: {
                    type: "boolean"
                },
                Engine: {},
                EngineVersion: {},
                LatestRestorableTime: {
                    type: "timestamp"
                },
                Port: {
                    type: "integer"
                },
                MasterUsername: {},
                PreferredBackupWindow: {},
                PreferredMaintenanceWindow: {},
                ReplicationSourceIdentifier: {},
                ReadReplicaIdentifiers: {
                    type: "list",
                    member: {
                        locationName: "ReadReplicaIdentifier"
                    }
                },
                DBClusterMembers: {
                    type: "list",
                    member: {
                        locationName: "DBClusterMember",
                        type: "structure",
                        members: {
                            DBInstanceIdentifier: {},
                            IsClusterWriter: {
                                type: "boolean"
                            },
                            DBClusterParameterGroupStatus: {},
                            PromotionTier: {
                                type: "integer"
                            }
                        },
                        wrapper: true
                    }
                },
                VpcSecurityGroups: {
                    shape: "S10"
                },
                HostedZoneId: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DbClusterResourceId: {},
                DBClusterArn: {},
                AssociatedRoles: {
                    type: "list",
                    member: {
                        locationName: "DBClusterRole",
                        type: "structure",
                        members: {
                            RoleArn: {},
                            Status: {}
                        }
                    }
                },
                ClusterCreateTime: {
                    type: "timestamp"
                },
                EnabledCloudwatchLogsExports: {
                    shape: "St"
                },
                DeletionProtection: {
                    type: "boolean"
                }
            },
            wrapper: true
        },
        S10: {
            type: "list",
            member: {
                locationName: "VpcSecurityGroupMembership",
                type: "structure",
                members: {
                    VpcSecurityGroupId: {},
                    Status: {}
                }
            }
        },
        S1a: {
            type: "structure",
            members: {
                DBInstanceIdentifier: {},
                DBInstanceClass: {},
                Engine: {},
                DBInstanceStatus: {},
                Endpoint: {
                    type: "structure",
                    members: {
                        Address: {},
                        Port: {
                            type: "integer"
                        },
                        HostedZoneId: {}
                    }
                },
                InstanceCreateTime: {
                    type: "timestamp"
                },
                PreferredBackupWindow: {},
                BackupRetentionPeriod: {
                    type: "integer"
                },
                VpcSecurityGroups: {
                    shape: "S10"
                },
                AvailabilityZone: {},
                DBSubnetGroup: {
                    shape: "S1c"
                },
                PreferredMaintenanceWindow: {},
                PendingModifiedValues: {
                    type: "structure",
                    members: {
                        DBInstanceClass: {},
                        AllocatedStorage: {
                            type: "integer"
                        },
                        MasterUserPassword: {},
                        Port: {
                            type: "integer"
                        },
                        BackupRetentionPeriod: {
                            type: "integer"
                        },
                        MultiAZ: {
                            type: "boolean"
                        },
                        EngineVersion: {},
                        LicenseModel: {},
                        Iops: {
                            type: "integer"
                        },
                        DBInstanceIdentifier: {},
                        StorageType: {},
                        CACertificateIdentifier: {},
                        DBSubnetGroupName: {},
                        PendingCloudwatchLogsExports: {
                            type: "structure",
                            members: {
                                LogTypesToEnable: {
                                    shape: "St"
                                },
                                LogTypesToDisable: {
                                    shape: "St"
                                }
                            }
                        }
                    }
                },
                LatestRestorableTime: {
                    type: "timestamp"
                },
                EngineVersion: {},
                AutoMinorVersionUpgrade: {
                    type: "boolean"
                },
                PubliclyAccessible: {
                    type: "boolean"
                },
                StatusInfos: {
                    type: "list",
                    member: {
                        locationName: "DBInstanceStatusInfo",
                        type: "structure",
                        members: {
                            StatusType: {},
                            Normal: {
                                type: "boolean"
                            },
                            Status: {},
                            Message: {}
                        }
                    }
                },
                DBClusterIdentifier: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DbiResourceId: {},
                CACertificateIdentifier: {},
                PromotionTier: {
                    type: "integer"
                },
                DBInstanceArn: {},
                EnabledCloudwatchLogsExports: {
                    shape: "St"
                }
            },
            wrapper: true
        },
        S1c: {
            type: "structure",
            members: {
                DBSubnetGroupName: {},
                DBSubnetGroupDescription: {},
                VpcId: {},
                SubnetGroupStatus: {},
                Subnets: {
                    type: "list",
                    member: {
                        locationName: "Subnet",
                        type: "structure",
                        members: {
                            SubnetIdentifier: {},
                            SubnetAvailabilityZone: {
                                shape: "S1f"
                            },
                            SubnetStatus: {}
                        }
                    }
                },
                DBSubnetGroupArn: {}
            },
            wrapper: true
        },
        S1f: {
            type: "structure",
            members: {
                Name: {}
            },
            wrapper: true
        },
        S1l: {
            type: "list",
            member: {
                locationName: "SubnetIdentifier"
            }
        },
        S1r: {
            type: "structure",
            members: {
                GlobalClusterIdentifier: {},
                GlobalClusterResourceId: {},
                GlobalClusterArn: {},
                Status: {},
                Engine: {},
                EngineVersion: {},
                DatabaseName: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                DeletionProtection: {
                    type: "boolean"
                },
                GlobalClusterMembers: {
                    type: "list",
                    member: {
                        locationName: "GlobalClusterMember",
                        type: "structure",
                        members: {
                            DBClusterArn: {},
                            Readers: {
                                type: "list",
                                member: {}
                            },
                            IsWriter: {
                                type: "boolean"
                            }
                        },
                        wrapper: true
                    }
                }
            },
            wrapper: true
        },
        S28: {
            type: "list",
            member: {
                locationName: "Filter",
                type: "structure",
                required: [ "Name", "Values" ],
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {
                            locationName: "Value"
                        }
                    }
                }
            }
        },
        S2j: {
            type: "list",
            member: {
                locationName: "Parameter",
                type: "structure",
                members: {
                    ParameterName: {},
                    ParameterValue: {},
                    Description: {},
                    Source: {},
                    ApplyType: {},
                    DataType: {},
                    AllowedValues: {},
                    IsModifiable: {
                        type: "boolean"
                    },
                    MinimumEngineVersion: {},
                    ApplyMethod: {}
                }
            }
        },
        S2o: {
            type: "structure",
            members: {
                DBClusterSnapshotIdentifier: {},
                DBClusterSnapshotAttributes: {
                    type: "list",
                    member: {
                        locationName: "DBClusterSnapshotAttribute",
                        type: "structure",
                        members: {
                            AttributeName: {},
                            AttributeValues: {
                                shape: "S2r"
                            }
                        }
                    }
                }
            },
            wrapper: true
        },
        S2r: {
            type: "list",
            member: {
                locationName: "AttributeValue"
            }
        },
        S48: {
            type: "structure",
            members: {
                DBClusterParameterGroupName: {}
            }
        }
    },
    paginators: {
        DescribeCertificates: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Certificates"
        },
        DescribeDBClusterParameterGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusterParameterGroups"
        },
        DescribeDBClusterParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Parameters"
        },
        DescribeDBClusterSnapshots: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusterSnapshots"
        },
        DescribeDBClusters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusters"
        },
        DescribeDBEngineVersions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBEngineVersions"
        },
        DescribeDBInstances: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBInstances"
        },
        DescribeDBSubnetGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBSubnetGroups"
        },
        DescribeEventSubscriptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "EventSubscriptionsList"
        },
        DescribeEvents: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Events"
        },
        DescribeGlobalClusters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "GlobalClusters"
        },
        DescribeOrderableDBInstanceOptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "OrderableDBInstanceOptions"
        },
        DescribePendingMaintenanceActions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "PendingMaintenanceActions"
        },
        ListTagsForResource: {
            result_key: "TagList"
        }
    },
    waiters: {
        DBInstanceAvailable: {
            delay: 30,
            operation: "DescribeDBInstances",
            maxAttempts: 60,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "deleting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "failed",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "incompatible-restore",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "incompatible-parameters",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            } ]
        },
        DBInstanceDeleted: {
            delay: 30,
            operation: "DescribeDBInstances",
            maxAttempts: 60,
            acceptors: [ {
                expected: "deleted",
                matcher: "pathAll",
                state: "success",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "DBInstanceNotFound",
                matcher: "error",
                state: "success"
            }, {
                expected: "creating",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "modifying",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "rebooting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "resetting-master-credentials",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            } ]
        }
    }
};

AWS.apiLoader.services["backup"] = {};

AWS.Backup = AWS.Service.defineService("backup", [ "2018-11-15" ]);

AWS.apiLoader.services["backup"]["2018-11-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-11-15",
        endpointPrefix: "backup",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Backup",
        serviceId: "Backup",
        signatureVersion: "v4",
        uid: "backup-2018-11-15"
    },
    operations: {
        CreateBackupPlan: {
            http: {
                method: "PUT",
                requestUri: "/backup/plans/"
            },
            input: {
                type: "structure",
                required: [ "BackupPlan" ],
                members: {
                    BackupPlan: {
                        shape: "S2"
                    },
                    BackupPlanTags: {
                        shape: "Sc"
                    },
                    CreatorRequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlanId: {},
                    BackupPlanArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    VersionId: {},
                    AdvancedBackupSettings: {
                        shape: "Sj"
                    }
                }
            },
            idempotent: true
        },
        CreateBackupSelection: {
            http: {
                method: "PUT",
                requestUri: "/backup/plans/{backupPlanId}/selections/"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId", "BackupSelection" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    BackupSelection: {
                        shape: "St"
                    },
                    CreatorRequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SelectionId: {},
                    BackupPlanId: {},
                    CreationDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        CreateBackupVault: {
            http: {
                method: "PUT",
                requestUri: "/backup-vaults/{backupVaultName}"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    BackupVaultTags: {
                        shape: "Sc"
                    },
                    EncryptionKeyArn: {},
                    CreatorRequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultName: {},
                    BackupVaultArn: {},
                    CreationDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        CreateFramework: {
            http: {
                requestUri: "/audit/frameworks"
            },
            input: {
                type: "structure",
                required: [ "FrameworkName", "FrameworkControls" ],
                members: {
                    FrameworkName: {},
                    FrameworkDescription: {},
                    FrameworkControls: {
                        shape: "S18"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    },
                    FrameworkTags: {
                        shape: "S1i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FrameworkName: {},
                    FrameworkArn: {}
                }
            },
            idempotent: true
        },
        CreateReportPlan: {
            http: {
                requestUri: "/audit/report-plans"
            },
            input: {
                type: "structure",
                required: [ "ReportPlanName", "ReportDeliveryChannel", "ReportSetting" ],
                members: {
                    ReportPlanName: {},
                    ReportPlanDescription: {},
                    ReportDeliveryChannel: {
                        shape: "S1n"
                    },
                    ReportSetting: {
                        shape: "S1p"
                    },
                    ReportPlanTags: {
                        shape: "S1i"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportPlanName: {},
                    ReportPlanArn: {}
                }
            },
            idempotent: true
        },
        DeleteBackupPlan: {
            http: {
                method: "DELETE",
                requestUri: "/backup/plans/{backupPlanId}"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlanId: {},
                    BackupPlanArn: {},
                    DeletionDate: {
                        type: "timestamp"
                    },
                    VersionId: {}
                }
            }
        },
        DeleteBackupSelection: {
            http: {
                method: "DELETE",
                requestUri: "/backup/plans/{backupPlanId}/selections/{selectionId}"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId", "SelectionId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    SelectionId: {
                        location: "uri",
                        locationName: "selectionId"
                    }
                }
            }
        },
        DeleteBackupVault: {
            http: {
                method: "DELETE",
                requestUri: "/backup-vaults/{backupVaultName}"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    }
                }
            }
        },
        DeleteBackupVaultAccessPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/backup-vaults/{backupVaultName}/access-policy"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    }
                }
            },
            idempotent: true
        },
        DeleteBackupVaultNotifications: {
            http: {
                method: "DELETE",
                requestUri: "/backup-vaults/{backupVaultName}/notification-configuration"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    }
                }
            },
            idempotent: true
        },
        DeleteFramework: {
            http: {
                method: "DELETE",
                requestUri: "/audit/frameworks/{frameworkName}"
            },
            input: {
                type: "structure",
                required: [ "FrameworkName" ],
                members: {
                    FrameworkName: {
                        location: "uri",
                        locationName: "frameworkName"
                    }
                }
            }
        },
        DeleteRecoveryPoint: {
            http: {
                method: "DELETE",
                requestUri: "/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "RecoveryPointArn" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    RecoveryPointArn: {
                        location: "uri",
                        locationName: "recoveryPointArn"
                    }
                }
            },
            idempotent: true
        },
        DeleteReportPlan: {
            http: {
                method: "DELETE",
                requestUri: "/audit/report-plans/{reportPlanName}"
            },
            input: {
                type: "structure",
                required: [ "ReportPlanName" ],
                members: {
                    ReportPlanName: {
                        location: "uri",
                        locationName: "reportPlanName"
                    }
                }
            },
            idempotent: true
        },
        DescribeBackupJob: {
            http: {
                method: "GET",
                requestUri: "/backup-jobs/{backupJobId}"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "backupJobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountId: {},
                    BackupJobId: {},
                    BackupVaultName: {},
                    BackupVaultArn: {},
                    RecoveryPointArn: {},
                    ResourceArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    CompletionDate: {
                        type: "timestamp"
                    },
                    State: {},
                    StatusMessage: {},
                    PercentDone: {},
                    BackupSizeInBytes: {
                        type: "long"
                    },
                    IamRoleArn: {},
                    CreatedBy: {
                        shape: "S24"
                    },
                    ResourceType: {},
                    BytesTransferred: {
                        type: "long"
                    },
                    ExpectedCompletionDate: {
                        type: "timestamp"
                    },
                    StartBy: {
                        type: "timestamp"
                    },
                    BackupOptions: {
                        shape: "Sm"
                    },
                    BackupType: {}
                }
            },
            idempotent: true
        },
        DescribeBackupVault: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/{backupVaultName}"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultName: {},
                    BackupVaultArn: {},
                    EncryptionKeyArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    CreatorRequestId: {},
                    NumberOfRecoveryPoints: {
                        type: "long"
                    }
                }
            },
            idempotent: true
        },
        DescribeCopyJob: {
            http: {
                method: "GET",
                requestUri: "/copy-jobs/{copyJobId}"
            },
            input: {
                type: "structure",
                required: [ "CopyJobId" ],
                members: {
                    CopyJobId: {
                        location: "uri",
                        locationName: "copyJobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CopyJob: {
                        shape: "S2a"
                    }
                }
            },
            idempotent: true
        },
        DescribeFramework: {
            http: {
                method: "GET",
                requestUri: "/audit/frameworks/{frameworkName}"
            },
            input: {
                type: "structure",
                required: [ "FrameworkName" ],
                members: {
                    FrameworkName: {
                        location: "uri",
                        locationName: "frameworkName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FrameworkName: {},
                    FrameworkArn: {},
                    FrameworkDescription: {},
                    FrameworkControls: {
                        shape: "S18"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    DeploymentStatus: {},
                    FrameworkStatus: {},
                    IdempotencyToken: {}
                }
            }
        },
        DescribeGlobalSettings: {
            http: {
                method: "GET",
                requestUri: "/global-settings"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    GlobalSettings: {
                        shape: "S2g"
                    },
                    LastUpdateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeProtectedResource: {
            http: {
                method: "GET",
                requestUri: "/resources/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    ResourceType: {},
                    LastBackupTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeRecoveryPoint: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "RecoveryPointArn" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    RecoveryPointArn: {
                        location: "uri",
                        locationName: "recoveryPointArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecoveryPointArn: {},
                    BackupVaultName: {},
                    BackupVaultArn: {},
                    SourceBackupVaultArn: {},
                    ResourceArn: {},
                    ResourceType: {},
                    CreatedBy: {
                        shape: "S24"
                    },
                    IamRoleArn: {},
                    Status: {},
                    StatusMessage: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    CompletionDate: {
                        type: "timestamp"
                    },
                    BackupSizeInBytes: {
                        type: "long"
                    },
                    CalculatedLifecycle: {
                        shape: "S2o"
                    },
                    Lifecycle: {
                        shape: "Sa"
                    },
                    EncryptionKeyArn: {},
                    IsEncrypted: {
                        type: "boolean"
                    },
                    StorageClass: {},
                    LastRestoreTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeRegionSettings: {
            http: {
                method: "GET",
                requestUri: "/account-settings"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ResourceTypeOptInPreference: {
                        shape: "S2t"
                    }
                }
            }
        },
        DescribeReportJob: {
            http: {
                method: "GET",
                requestUri: "/audit/report-jobs/{reportJobId}"
            },
            input: {
                type: "structure",
                required: [ "ReportJobId" ],
                members: {
                    ReportJobId: {
                        location: "uri",
                        locationName: "reportJobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportJob: {
                        shape: "S2y"
                    }
                }
            }
        },
        DescribeReportPlan: {
            http: {
                method: "GET",
                requestUri: "/audit/report-plans/{reportPlanName}"
            },
            input: {
                type: "structure",
                required: [ "ReportPlanName" ],
                members: {
                    ReportPlanName: {
                        location: "uri",
                        locationName: "reportPlanName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportPlan: {
                        shape: "S33"
                    }
                }
            }
        },
        DescribeRestoreJob: {
            http: {
                method: "GET",
                requestUri: "/restore-jobs/{restoreJobId}"
            },
            input: {
                type: "structure",
                required: [ "RestoreJobId" ],
                members: {
                    RestoreJobId: {
                        location: "uri",
                        locationName: "restoreJobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountId: {},
                    RestoreJobId: {},
                    RecoveryPointArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    CompletionDate: {
                        type: "timestamp"
                    },
                    Status: {},
                    StatusMessage: {},
                    PercentDone: {},
                    BackupSizeInBytes: {
                        type: "long"
                    },
                    IamRoleArn: {},
                    ExpectedCompletionTimeMinutes: {
                        type: "long"
                    },
                    CreatedResourceArn: {},
                    ResourceType: {}
                }
            },
            idempotent: true
        },
        DisassociateRecoveryPoint: {
            http: {
                requestUri: "/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}/disassociate"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "RecoveryPointArn" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    RecoveryPointArn: {
                        location: "uri",
                        locationName: "recoveryPointArn"
                    }
                }
            }
        },
        ExportBackupPlanTemplate: {
            http: {
                method: "GET",
                requestUri: "/backup/plans/{backupPlanId}/toTemplate/"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlanTemplateJson: {}
                }
            }
        },
        GetBackupPlan: {
            http: {
                method: "GET",
                requestUri: "/backup/plans/{backupPlanId}/"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlan: {
                        shape: "S3d"
                    },
                    BackupPlanId: {},
                    BackupPlanArn: {},
                    VersionId: {},
                    CreatorRequestId: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    DeletionDate: {
                        type: "timestamp"
                    },
                    LastExecutionDate: {
                        type: "timestamp"
                    },
                    AdvancedBackupSettings: {
                        shape: "Sj"
                    }
                }
            },
            idempotent: true
        },
        GetBackupPlanFromJSON: {
            http: {
                requestUri: "/backup/template/json/toPlan"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanTemplateJson" ],
                members: {
                    BackupPlanTemplateJson: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlan: {
                        shape: "S3d"
                    }
                }
            }
        },
        GetBackupPlanFromTemplate: {
            http: {
                method: "GET",
                requestUri: "/backup/template/plans/{templateId}/toPlan"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanTemplateId" ],
                members: {
                    BackupPlanTemplateId: {
                        location: "uri",
                        locationName: "templateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlanDocument: {
                        shape: "S3d"
                    }
                }
            }
        },
        GetBackupSelection: {
            http: {
                method: "GET",
                requestUri: "/backup/plans/{backupPlanId}/selections/{selectionId}"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId", "SelectionId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    SelectionId: {
                        location: "uri",
                        locationName: "selectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupSelection: {
                        shape: "St"
                    },
                    SelectionId: {},
                    BackupPlanId: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    CreatorRequestId: {}
                }
            },
            idempotent: true
        },
        GetBackupVaultAccessPolicy: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/{backupVaultName}/access-policy"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultName: {},
                    BackupVaultArn: {},
                    Policy: {}
                }
            },
            idempotent: true
        },
        GetBackupVaultNotifications: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/{backupVaultName}/notification-configuration"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultName: {},
                    BackupVaultArn: {},
                    SNSTopicArn: {},
                    BackupVaultEvents: {
                        shape: "S3r"
                    }
                }
            },
            idempotent: true
        },
        GetRecoveryPointRestoreMetadata: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}/restore-metadata"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "RecoveryPointArn" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    RecoveryPointArn: {
                        location: "uri",
                        locationName: "recoveryPointArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultArn: {},
                    RecoveryPointArn: {},
                    RestoreMetadata: {
                        shape: "S3v"
                    }
                }
            },
            idempotent: true
        },
        GetSupportedResourceTypes: {
            http: {
                method: "GET",
                requestUri: "/supported-resource-types"
            },
            output: {
                type: "structure",
                members: {
                    ResourceTypes: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListBackupJobs: {
            http: {
                method: "GET",
                requestUri: "/backup-jobs/"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    ByResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    ByState: {
                        location: "querystring",
                        locationName: "state"
                    },
                    ByBackupVaultName: {
                        location: "querystring",
                        locationName: "backupVaultName"
                    },
                    ByCreatedBefore: {
                        location: "querystring",
                        locationName: "createdBefore",
                        type: "timestamp"
                    },
                    ByCreatedAfter: {
                        location: "querystring",
                        locationName: "createdAfter",
                        type: "timestamp"
                    },
                    ByResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    ByAccountId: {
                        location: "querystring",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                BackupJobId: {},
                                BackupVaultName: {},
                                BackupVaultArn: {},
                                RecoveryPointArn: {},
                                ResourceArn: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                CompletionDate: {
                                    type: "timestamp"
                                },
                                State: {},
                                StatusMessage: {},
                                PercentDone: {},
                                BackupSizeInBytes: {
                                    type: "long"
                                },
                                IamRoleArn: {},
                                CreatedBy: {
                                    shape: "S24"
                                },
                                ExpectedCompletionDate: {
                                    type: "timestamp"
                                },
                                StartBy: {
                                    type: "timestamp"
                                },
                                ResourceType: {},
                                BytesTransferred: {
                                    type: "long"
                                },
                                BackupOptions: {
                                    shape: "Sm"
                                },
                                BackupType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListBackupPlanTemplates: {
            http: {
                method: "GET",
                requestUri: "/backup/template/plans"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    BackupPlanTemplatesList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BackupPlanTemplateId: {},
                                BackupPlanTemplateName: {}
                            }
                        }
                    }
                }
            }
        },
        ListBackupPlanVersions: {
            http: {
                method: "GET",
                requestUri: "/backup/plans/{backupPlanId}/versions/"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    BackupPlanVersionsList: {
                        type: "list",
                        member: {
                            shape: "S4c"
                        }
                    }
                }
            },
            idempotent: true
        },
        ListBackupPlans: {
            http: {
                method: "GET",
                requestUri: "/backup/plans/"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    IncludeDeleted: {
                        location: "querystring",
                        locationName: "includeDeleted",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    BackupPlansList: {
                        type: "list",
                        member: {
                            shape: "S4c"
                        }
                    }
                }
            },
            idempotent: true
        },
        ListBackupSelections: {
            http: {
                method: "GET",
                requestUri: "/backup/plans/{backupPlanId}/selections/"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    BackupSelectionsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SelectionId: {},
                                SelectionName: {},
                                BackupPlanId: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                CreatorRequestId: {},
                                IamRoleArn: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ListBackupVaults: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BackupVaultName: {},
                                BackupVaultArn: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                EncryptionKeyArn: {},
                                CreatorRequestId: {},
                                NumberOfRecoveryPoints: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListCopyJobs: {
            http: {
                method: "GET",
                requestUri: "/copy-jobs/"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    ByResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    ByState: {
                        location: "querystring",
                        locationName: "state"
                    },
                    ByCreatedBefore: {
                        location: "querystring",
                        locationName: "createdBefore",
                        type: "timestamp"
                    },
                    ByCreatedAfter: {
                        location: "querystring",
                        locationName: "createdAfter",
                        type: "timestamp"
                    },
                    ByResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    ByDestinationVaultArn: {
                        location: "querystring",
                        locationName: "destinationVaultArn"
                    },
                    ByAccountId: {
                        location: "querystring",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CopyJobs: {
                        type: "list",
                        member: {
                            shape: "S2a"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFrameworks: {
            http: {
                method: "GET",
                requestUri: "/audit/frameworks"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Frameworks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FrameworkName: {},
                                FrameworkArn: {},
                                FrameworkDescription: {},
                                NumberOfControls: {
                                    type: "integer"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                DeploymentStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProtectedResources: {
            http: {
                method: "GET",
                requestUri: "/resources/"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceArn: {},
                                ResourceType: {},
                                LastBackupTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListRecoveryPointsByBackupVault: {
            http: {
                method: "GET",
                requestUri: "/backup-vaults/{backupVaultName}/recovery-points/"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    ByResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    ByResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    ByBackupPlanId: {
                        location: "querystring",
                        locationName: "backupPlanId"
                    },
                    ByCreatedBefore: {
                        location: "querystring",
                        locationName: "createdBefore",
                        type: "timestamp"
                    },
                    ByCreatedAfter: {
                        location: "querystring",
                        locationName: "createdAfter",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RecoveryPoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RecoveryPointArn: {},
                                BackupVaultName: {},
                                BackupVaultArn: {},
                                SourceBackupVaultArn: {},
                                ResourceArn: {},
                                ResourceType: {},
                                CreatedBy: {
                                    shape: "S24"
                                },
                                IamRoleArn: {},
                                Status: {},
                                StatusMessage: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                CompletionDate: {
                                    type: "timestamp"
                                },
                                BackupSizeInBytes: {
                                    type: "long"
                                },
                                CalculatedLifecycle: {
                                    shape: "S2o"
                                },
                                Lifecycle: {
                                    shape: "Sa"
                                },
                                EncryptionKeyArn: {},
                                IsEncrypted: {
                                    type: "boolean"
                                },
                                LastRestoreTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ListRecoveryPointsByResource: {
            http: {
                method: "GET",
                requestUri: "/resources/{resourceArn}/recovery-points/"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RecoveryPoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RecoveryPointArn: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                Status: {},
                                StatusMessage: {},
                                EncryptionKeyArn: {},
                                BackupSizeBytes: {
                                    type: "long"
                                },
                                BackupVaultName: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ListReportJobs: {
            http: {
                method: "GET",
                requestUri: "/audit/report-jobs"
            },
            input: {
                type: "structure",
                members: {
                    ByReportPlanName: {
                        location: "querystring",
                        locationName: "ReportPlanName"
                    },
                    ByCreationBefore: {
                        location: "querystring",
                        locationName: "CreationBefore",
                        type: "timestamp"
                    },
                    ByCreationAfter: {
                        location: "querystring",
                        locationName: "CreationAfter",
                        type: "timestamp"
                    },
                    ByStatus: {
                        location: "querystring",
                        locationName: "Status"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportJobs: {
                        type: "list",
                        member: {
                            shape: "S2y"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListReportPlans: {
            http: {
                method: "GET",
                requestUri: "/audit/report-plans"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportPlans: {
                        type: "list",
                        member: {
                            shape: "S33"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRestoreJobs: {
            http: {
                method: "GET",
                requestUri: "/restore-jobs/"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    ByAccountId: {
                        location: "querystring",
                        locationName: "accountId"
                    },
                    ByCreatedBefore: {
                        location: "querystring",
                        locationName: "createdBefore",
                        type: "timestamp"
                    },
                    ByCreatedAfter: {
                        location: "querystring",
                        locationName: "createdAfter",
                        type: "timestamp"
                    },
                    ByStatus: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RestoreJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                RestoreJobId: {},
                                RecoveryPointArn: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                CompletionDate: {
                                    type: "timestamp"
                                },
                                Status: {},
                                StatusMessage: {},
                                PercentDone: {},
                                BackupSizeInBytes: {
                                    type: "long"
                                },
                                IamRoleArn: {},
                                ExpectedCompletionTimeMinutes: {
                                    type: "long"
                                },
                                CreatedResourceArn: {},
                                ResourceType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListTags: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}/"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            idempotent: true
        },
        PutBackupVaultAccessPolicy: {
            http: {
                method: "PUT",
                requestUri: "/backup-vaults/{backupVaultName}/access-policy"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    Policy: {}
                }
            },
            idempotent: true
        },
        PutBackupVaultNotifications: {
            http: {
                method: "PUT",
                requestUri: "/backup-vaults/{backupVaultName}/notification-configuration"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "SNSTopicArn", "BackupVaultEvents" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    SNSTopicArn: {},
                    BackupVaultEvents: {
                        shape: "S3r"
                    }
                }
            },
            idempotent: true
        },
        StartBackupJob: {
            http: {
                method: "PUT",
                requestUri: "/backup-jobs"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "ResourceArn", "IamRoleArn" ],
                members: {
                    BackupVaultName: {},
                    ResourceArn: {},
                    IamRoleArn: {},
                    IdempotencyToken: {},
                    StartWindowMinutes: {
                        type: "long"
                    },
                    CompleteWindowMinutes: {
                        type: "long"
                    },
                    Lifecycle: {
                        shape: "Sa"
                    },
                    RecoveryPointTags: {
                        shape: "Sc"
                    },
                    BackupOptions: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupJobId: {},
                    RecoveryPointArn: {},
                    CreationDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        StartCopyJob: {
            http: {
                method: "PUT",
                requestUri: "/copy-jobs"
            },
            input: {
                type: "structure",
                required: [ "RecoveryPointArn", "SourceBackupVaultName", "DestinationBackupVaultArn", "IamRoleArn" ],
                members: {
                    RecoveryPointArn: {},
                    SourceBackupVaultName: {},
                    DestinationBackupVaultArn: {},
                    IamRoleArn: {},
                    IdempotencyToken: {},
                    Lifecycle: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CopyJobId: {},
                    CreationDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        StartReportJob: {
            http: {
                requestUri: "/audit/report-jobs/{reportPlanName}"
            },
            input: {
                type: "structure",
                required: [ "ReportPlanName" ],
                members: {
                    ReportPlanName: {
                        location: "uri",
                        locationName: "reportPlanName"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportJobId: {}
                }
            },
            idempotent: true
        },
        StartRestoreJob: {
            http: {
                method: "PUT",
                requestUri: "/restore-jobs"
            },
            input: {
                type: "structure",
                required: [ "RecoveryPointArn", "Metadata", "IamRoleArn" ],
                members: {
                    RecoveryPointArn: {},
                    Metadata: {
                        shape: "S3v"
                    },
                    IamRoleArn: {},
                    IdempotencyToken: {},
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RestoreJobId: {}
                }
            },
            idempotent: true
        },
        StopBackupJob: {
            http: {
                requestUri: "/backup-jobs/{backupJobId}"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "backupJobId"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                requestUri: "/untag/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeyList" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeyList: {
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            idempotent: true
        },
        UpdateBackupPlan: {
            http: {
                requestUri: "/backup/plans/{backupPlanId}"
            },
            input: {
                type: "structure",
                required: [ "BackupPlanId", "BackupPlan" ],
                members: {
                    BackupPlanId: {
                        location: "uri",
                        locationName: "backupPlanId"
                    },
                    BackupPlan: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupPlanId: {},
                    BackupPlanArn: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    VersionId: {},
                    AdvancedBackupSettings: {
                        shape: "Sj"
                    }
                }
            },
            idempotent: true
        },
        UpdateFramework: {
            http: {
                method: "PUT",
                requestUri: "/audit/frameworks/{frameworkName}"
            },
            input: {
                type: "structure",
                required: [ "FrameworkName" ],
                members: {
                    FrameworkName: {
                        location: "uri",
                        locationName: "frameworkName"
                    },
                    FrameworkDescription: {},
                    FrameworkControls: {
                        shape: "S18"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FrameworkName: {},
                    FrameworkArn: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        UpdateGlobalSettings: {
            http: {
                method: "PUT",
                requestUri: "/global-settings"
            },
            input: {
                type: "structure",
                members: {
                    GlobalSettings: {
                        shape: "S2g"
                    }
                }
            }
        },
        UpdateRecoveryPointLifecycle: {
            http: {
                requestUri: "/backup-vaults/{backupVaultName}/recovery-points/{recoveryPointArn}"
            },
            input: {
                type: "structure",
                required: [ "BackupVaultName", "RecoveryPointArn" ],
                members: {
                    BackupVaultName: {
                        location: "uri",
                        locationName: "backupVaultName"
                    },
                    RecoveryPointArn: {
                        location: "uri",
                        locationName: "recoveryPointArn"
                    },
                    Lifecycle: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupVaultArn: {},
                    RecoveryPointArn: {},
                    Lifecycle: {
                        shape: "Sa"
                    },
                    CalculatedLifecycle: {
                        shape: "S2o"
                    }
                }
            },
            idempotent: true
        },
        UpdateRegionSettings: {
            http: {
                method: "PUT",
                requestUri: "/account-settings"
            },
            input: {
                type: "structure",
                members: {
                    ResourceTypeOptInPreference: {
                        shape: "S2t"
                    }
                }
            }
        },
        UpdateReportPlan: {
            http: {
                method: "PUT",
                requestUri: "/audit/report-plans/{reportPlanName}"
            },
            input: {
                type: "structure",
                required: [ "ReportPlanName" ],
                members: {
                    ReportPlanName: {
                        location: "uri",
                        locationName: "reportPlanName"
                    },
                    ReportPlanDescription: {},
                    ReportDeliveryChannel: {
                        shape: "S1n"
                    },
                    ReportSetting: {
                        shape: "S1p"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportPlanName: {},
                    ReportPlanArn: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S2: {
            type: "structure",
            required: [ "BackupPlanName", "Rules" ],
            members: {
                BackupPlanName: {},
                Rules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "RuleName", "TargetBackupVaultName" ],
                        members: {
                            RuleName: {},
                            TargetBackupVaultName: {},
                            ScheduleExpression: {},
                            StartWindowMinutes: {
                                type: "long"
                            },
                            CompletionWindowMinutes: {
                                type: "long"
                            },
                            Lifecycle: {
                                shape: "Sa"
                            },
                            RecoveryPointTags: {
                                shape: "Sc"
                            },
                            CopyActions: {
                                shape: "Sf"
                            },
                            EnableContinuousBackup: {
                                type: "boolean"
                            }
                        }
                    }
                },
                AdvancedBackupSettings: {
                    shape: "Sj"
                }
            }
        },
        Sa: {
            type: "structure",
            members: {
                MoveToColdStorageAfterDays: {
                    type: "long"
                },
                DeleteAfterDays: {
                    type: "long"
                }
            }
        },
        Sc: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DestinationBackupVaultArn" ],
                members: {
                    Lifecycle: {
                        shape: "Sa"
                    },
                    DestinationBackupVaultArn: {}
                }
            }
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceType: {},
                    BackupOptions: {
                        shape: "Sm"
                    }
                }
            }
        },
        Sm: {
            type: "map",
            key: {},
            value: {}
        },
        St: {
            type: "structure",
            required: [ "SelectionName", "IamRoleArn" ],
            members: {
                SelectionName: {},
                IamRoleArn: {},
                Resources: {
                    type: "list",
                    member: {}
                },
                ListOfTags: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ConditionType", "ConditionKey", "ConditionValue" ],
                        members: {
                            ConditionType: {},
                            ConditionKey: {},
                            ConditionValue: {}
                        }
                    }
                }
            }
        },
        S18: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ControlName" ],
                members: {
                    ControlName: {},
                    ControlInputParameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ParameterName: {},
                                ParameterValue: {}
                            }
                        }
                    },
                    ControlScope: {
                        type: "structure",
                        members: {
                            ComplianceResourceIds: {
                                type: "list",
                                member: {}
                            },
                            ComplianceResourceTypes: {
                                type: "list",
                                member: {}
                            },
                            Tags: {
                                shape: "S1i"
                            }
                        }
                    }
                }
            }
        },
        S1i: {
            type: "map",
            key: {},
            value: {}
        },
        S1n: {
            type: "structure",
            required: [ "S3BucketName" ],
            members: {
                S3BucketName: {},
                S3KeyPrefix: {},
                Formats: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1p: {
            type: "structure",
            required: [ "ReportTemplate" ],
            members: {
                ReportTemplate: {}
            }
        },
        S24: {
            type: "structure",
            members: {
                BackupPlanId: {},
                BackupPlanArn: {},
                BackupPlanVersion: {},
                BackupRuleId: {}
            }
        },
        S2a: {
            type: "structure",
            members: {
                AccountId: {},
                CopyJobId: {},
                SourceBackupVaultArn: {},
                SourceRecoveryPointArn: {},
                DestinationBackupVaultArn: {},
                DestinationRecoveryPointArn: {},
                ResourceArn: {},
                CreationDate: {
                    type: "timestamp"
                },
                CompletionDate: {
                    type: "timestamp"
                },
                State: {},
                StatusMessage: {},
                BackupSizeInBytes: {
                    type: "long"
                },
                IamRoleArn: {},
                CreatedBy: {
                    shape: "S24"
                },
                ResourceType: {}
            }
        },
        S2g: {
            type: "map",
            key: {},
            value: {}
        },
        S2o: {
            type: "structure",
            members: {
                MoveToColdStorageAt: {
                    type: "timestamp"
                },
                DeleteAt: {
                    type: "timestamp"
                }
            }
        },
        S2t: {
            type: "map",
            key: {},
            value: {
                type: "boolean"
            }
        },
        S2y: {
            type: "structure",
            members: {
                ReportJobId: {},
                ReportPlanArn: {},
                ReportTemplate: {},
                CreationTime: {
                    type: "timestamp"
                },
                CompletionTime: {
                    type: "timestamp"
                },
                Status: {},
                StatusMessage: {},
                ReportDestination: {
                    type: "structure",
                    members: {
                        S3BucketName: {},
                        S3Keys: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S33: {
            type: "structure",
            members: {
                ReportPlanArn: {},
                ReportPlanName: {},
                ReportPlanDescription: {},
                ReportSetting: {
                    shape: "S1p"
                },
                ReportDeliveryChannel: {
                    shape: "S1n"
                },
                DeploymentStatus: {},
                CreationTime: {
                    type: "timestamp"
                },
                LastAttemptedExecutionTime: {
                    type: "timestamp"
                },
                LastSuccessfulExecutionTime: {
                    type: "timestamp"
                }
            }
        },
        S3d: {
            type: "structure",
            required: [ "BackupPlanName", "Rules" ],
            members: {
                BackupPlanName: {},
                Rules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "RuleName", "TargetBackupVaultName" ],
                        members: {
                            RuleName: {},
                            TargetBackupVaultName: {},
                            ScheduleExpression: {},
                            StartWindowMinutes: {
                                type: "long"
                            },
                            CompletionWindowMinutes: {
                                type: "long"
                            },
                            Lifecycle: {
                                shape: "Sa"
                            },
                            RecoveryPointTags: {
                                shape: "Sc"
                            },
                            RuleId: {},
                            CopyActions: {
                                shape: "Sf"
                            },
                            EnableContinuousBackup: {
                                type: "boolean"
                            }
                        }
                    }
                },
                AdvancedBackupSettings: {
                    shape: "Sj"
                }
            }
        },
        S3r: {
            type: "list",
            member: {}
        },
        S3v: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S4c: {
            type: "structure",
            members: {
                BackupPlanArn: {},
                BackupPlanId: {},
                CreationDate: {
                    type: "timestamp"
                },
                DeletionDate: {
                    type: "timestamp"
                },
                VersionId: {},
                BackupPlanName: {},
                CreatorRequestId: {},
                LastExecutionDate: {
                    type: "timestamp"
                },
                AdvancedBackupSettings: {
                    shape: "Sj"
                }
            }
        }
    },
    paginators: {
        ListBackupJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListBackupPlanTemplates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListBackupPlanVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListBackupPlans: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListBackupSelections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListBackupVaults: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListCopyJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListFrameworks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListProtectedResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRecoveryPointsByBackupVault: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRecoveryPointsByResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListReportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListReportPlans: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRestoreJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTags: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["worklink"] = {};

AWS.WorkLink = AWS.Service.defineService("worklink", [ "2018-09-25" ]);

AWS.apiLoader.services["worklink"]["2018-09-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-09-25",
        endpointPrefix: "worklink",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "WorkLink",
        serviceFullName: "Amazon WorkLink",
        serviceId: "WorkLink",
        signatureVersion: "v4",
        signingName: "worklink",
        uid: "worklink-2018-09-25"
    },
    operations: {
        AssociateDomain: {
            http: {
                requestUri: "/associateDomain"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DomainName", "AcmCertificateArn" ],
                members: {
                    FleetArn: {},
                    DomainName: {},
                    DisplayName: {},
                    AcmCertificateArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateWebsiteAuthorizationProvider: {
            http: {
                requestUri: "/associateWebsiteAuthorizationProvider"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "AuthorizationProviderType" ],
                members: {
                    FleetArn: {},
                    AuthorizationProviderType: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthorizationProviderId: {}
                }
            }
        },
        AssociateWebsiteCertificateAuthority: {
            http: {
                requestUri: "/associateWebsiteCertificateAuthority"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "Certificate" ],
                members: {
                    FleetArn: {},
                    Certificate: {},
                    DisplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebsiteCaId: {}
                }
            }
        },
        CreateFleet: {
            http: {
                requestUri: "/createFleet"
            },
            input: {
                type: "structure",
                required: [ "FleetName" ],
                members: {
                    FleetName: {},
                    DisplayName: {},
                    OptimizeForEndUserLocation: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetArn: {}
                }
            }
        },
        DeleteFleet: {
            http: {
                requestUri: "/deleteFleet"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAuditStreamConfiguration: {
            http: {
                requestUri: "/describeAuditStreamConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuditStreamArn: {}
                }
            }
        },
        DescribeCompanyNetworkConfiguration: {
            http: {
                requestUri: "/describeCompanyNetworkConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcId: {},
                    SubnetIds: {
                        shape: "St"
                    },
                    SecurityGroupIds: {
                        shape: "Sv"
                    }
                }
            }
        },
        DescribeDevice: {
            http: {
                requestUri: "/describeDevice"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DeviceId" ],
                members: {
                    FleetArn: {},
                    DeviceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    Model: {},
                    Manufacturer: {},
                    OperatingSystem: {},
                    OperatingSystemVersion: {},
                    PatchLevel: {},
                    FirstAccessedTime: {
                        type: "timestamp"
                    },
                    LastAccessedTime: {
                        type: "timestamp"
                    },
                    Username: {}
                }
            }
        },
        DescribeDevicePolicyConfiguration: {
            http: {
                requestUri: "/describeDevicePolicyConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceCaCertificate: {}
                }
            }
        },
        DescribeDomain: {
            http: {
                requestUri: "/describeDomain"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DomainName" ],
                members: {
                    FleetArn: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainName: {},
                    DisplayName: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    DomainStatus: {},
                    AcmCertificateArn: {}
                }
            }
        },
        DescribeFleetMetadata: {
            http: {
                requestUri: "/describeFleetMetadata"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    FleetName: {},
                    DisplayName: {},
                    OptimizeForEndUserLocation: {
                        type: "boolean"
                    },
                    CompanyCode: {},
                    FleetStatus: {},
                    Tags: {
                        shape: "Sh"
                    }
                }
            }
        },
        DescribeIdentityProviderConfiguration: {
            http: {
                requestUri: "/describeIdentityProviderConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityProviderType: {},
                    ServiceProviderSamlMetadata: {},
                    IdentityProviderSamlMetadata: {}
                }
            }
        },
        DescribeWebsiteCertificateAuthority: {
            http: {
                requestUri: "/describeWebsiteCertificateAuthority"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "WebsiteCaId" ],
                members: {
                    FleetArn: {},
                    WebsiteCaId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Certificate: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    DisplayName: {}
                }
            }
        },
        DisassociateDomain: {
            http: {
                requestUri: "/disassociateDomain"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DomainName" ],
                members: {
                    FleetArn: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateWebsiteAuthorizationProvider: {
            http: {
                requestUri: "/disassociateWebsiteAuthorizationProvider"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "AuthorizationProviderId" ],
                members: {
                    FleetArn: {},
                    AuthorizationProviderId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateWebsiteCertificateAuthority: {
            http: {
                requestUri: "/disassociateWebsiteCertificateAuthority"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "WebsiteCaId" ],
                members: {
                    FleetArn: {},
                    WebsiteCaId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListDevices: {
            http: {
                requestUri: "/listDevices"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Devices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeviceId: {},
                                DeviceStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDomains: {
            http: {
                requestUri: "/listDomains"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Domains: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DomainName", "CreatedTime", "DomainStatus" ],
                            members: {
                                DomainName: {},
                                DisplayName: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                DomainStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFleets: {
            http: {
                requestUri: "/listFleets"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FleetArn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                FleetName: {},
                                DisplayName: {},
                                CompanyCode: {},
                                FleetStatus: {},
                                Tags: {
                                    shape: "Sh"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sh"
                    }
                }
            }
        },
        ListWebsiteAuthorizationProviders: {
            http: {
                requestUri: "/listWebsiteAuthorizationProviders"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WebsiteAuthorizationProviders: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AuthorizationProviderType" ],
                            members: {
                                AuthorizationProviderId: {},
                                AuthorizationProviderType: {},
                                DomainName: {},
                                CreatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListWebsiteCertificateAuthorities: {
            http: {
                requestUri: "/listWebsiteCertificateAuthorities"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebsiteCertificateAuthorities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WebsiteCaId: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                DisplayName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        RestoreDomainAccess: {
            http: {
                requestUri: "/restoreDomainAccess"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DomainName" ],
                members: {
                    FleetArn: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RevokeDomainAccess: {
            http: {
                requestUri: "/revokeDomainAccess"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DomainName" ],
                members: {
                    FleetArn: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SignOutUser: {
            http: {
                requestUri: "/signOutUser"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "Username" ],
                members: {
                    FleetArn: {},
                    Username: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAuditStreamConfiguration: {
            http: {
                requestUri: "/updateAuditStreamConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    AuditStreamArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCompanyNetworkConfiguration: {
            http: {
                requestUri: "/updateCompanyNetworkConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "VpcId", "SubnetIds", "SecurityGroupIds" ],
                members: {
                    FleetArn: {},
                    VpcId: {},
                    SubnetIds: {
                        shape: "St"
                    },
                    SecurityGroupIds: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDevicePolicyConfiguration: {
            http: {
                requestUri: "/updateDevicePolicyConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    DeviceCaCertificate: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDomainMetadata: {
            http: {
                requestUri: "/updateDomainMetadata"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "DomainName" ],
                members: {
                    FleetArn: {},
                    DomainName: {},
                    DisplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFleetMetadata: {
            http: {
                requestUri: "/UpdateFleetMetadata"
            },
            input: {
                type: "structure",
                required: [ "FleetArn" ],
                members: {
                    FleetArn: {},
                    DisplayName: {},
                    OptimizeForEndUserLocation: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateIdentityProviderConfiguration: {
            http: {
                requestUri: "/updateIdentityProviderConfiguration"
            },
            input: {
                type: "structure",
                required: [ "FleetArn", "IdentityProviderType" ],
                members: {
                    FleetArn: {},
                    IdentityProviderType: {},
                    IdentityProviderSamlMetadata: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sh: {
            type: "map",
            key: {},
            value: {}
        },
        St: {
            type: "list",
            member: {}
        },
        Sv: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListFleets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWebsiteAuthorizationProviders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWebsiteCertificateAuthorities: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["textract"] = {};

AWS.Textract = AWS.Service.defineService("textract", [ "2018-06-27" ]);

AWS.apiLoader.services["textract"]["2018-06-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-06-27",
        endpointPrefix: "textract",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Textract",
        serviceId: "Textract",
        signatureVersion: "v4",
        targetPrefix: "Textract",
        uid: "textract-2018-06-27"
    },
    operations: {
        AnalyzeDocument: {
            input: {
                type: "structure",
                required: [ "Document", "FeatureTypes" ],
                members: {
                    Document: {
                        shape: "S2"
                    },
                    FeatureTypes: {
                        shape: "S8"
                    },
                    HumanLoopConfig: {
                        type: "structure",
                        required: [ "HumanLoopName", "FlowDefinitionArn" ],
                        members: {
                            HumanLoopName: {},
                            FlowDefinitionArn: {},
                            DataAttributes: {
                                type: "structure",
                                members: {
                                    ContentClassifiers: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentMetadata: {
                        shape: "Sh"
                    },
                    Blocks: {
                        shape: "Sj"
                    },
                    HumanLoopActivationOutput: {
                        type: "structure",
                        members: {
                            HumanLoopArn: {},
                            HumanLoopActivationReasons: {
                                type: "list",
                                member: {}
                            },
                            HumanLoopActivationConditionsEvaluationResults: {
                                jsonvalue: true
                            }
                        }
                    },
                    AnalyzeDocumentModelVersion: {}
                }
            }
        },
        AnalyzeExpense: {
            input: {
                type: "structure",
                required: [ "Document" ],
                members: {
                    Document: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentMetadata: {
                        shape: "Sh"
                    },
                    ExpenseDocuments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ExpenseIndex: {
                                    type: "integer"
                                },
                                SummaryFields: {
                                    shape: "S1b"
                                },
                                LineItemGroups: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            LineItemGroupIndex: {
                                                type: "integer"
                                            },
                                            LineItems: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        LineItemExpenseFields: {
                                                            shape: "S1b"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DetectDocumentText: {
            input: {
                type: "structure",
                required: [ "Document" ],
                members: {
                    Document: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentMetadata: {
                        shape: "Sh"
                    },
                    Blocks: {
                        shape: "Sj"
                    },
                    DetectDocumentTextModelVersion: {}
                }
            }
        },
        GetDocumentAnalysis: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentMetadata: {
                        shape: "Sh"
                    },
                    JobStatus: {},
                    NextToken: {},
                    Blocks: {
                        shape: "Sj"
                    },
                    Warnings: {
                        shape: "S1r"
                    },
                    StatusMessage: {},
                    AnalyzeDocumentModelVersion: {}
                }
            }
        },
        GetDocumentTextDetection: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentMetadata: {
                        shape: "Sh"
                    },
                    JobStatus: {},
                    NextToken: {},
                    Blocks: {
                        shape: "Sj"
                    },
                    Warnings: {
                        shape: "S1r"
                    },
                    StatusMessage: {},
                    DetectDocumentTextModelVersion: {}
                }
            }
        },
        StartDocumentAnalysis: {
            input: {
                type: "structure",
                required: [ "DocumentLocation", "FeatureTypes" ],
                members: {
                    DocumentLocation: {
                        shape: "S1z"
                    },
                    FeatureTypes: {
                        shape: "S8"
                    },
                    ClientRequestToken: {},
                    JobTag: {},
                    NotificationChannel: {
                        shape: "S22"
                    },
                    OutputConfig: {
                        shape: "S25"
                    },
                    KMSKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StartDocumentTextDetection: {
            input: {
                type: "structure",
                required: [ "DocumentLocation" ],
                members: {
                    DocumentLocation: {
                        shape: "S1z"
                    },
                    ClientRequestToken: {},
                    JobTag: {},
                    NotificationChannel: {
                        shape: "S22"
                    },
                    OutputConfig: {
                        shape: "S25"
                    },
                    KMSKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            members: {
                Bytes: {
                    type: "blob"
                },
                S3Object: {
                    shape: "S4"
                }
            }
        },
        S4: {
            type: "structure",
            members: {
                Bucket: {},
                Name: {},
                Version: {}
            }
        },
        S8: {
            type: "list",
            member: {}
        },
        Sh: {
            type: "structure",
            members: {
                Pages: {
                    type: "integer"
                }
            }
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    BlockType: {},
                    Confidence: {
                        type: "float"
                    },
                    Text: {},
                    TextType: {},
                    RowIndex: {
                        type: "integer"
                    },
                    ColumnIndex: {
                        type: "integer"
                    },
                    RowSpan: {
                        type: "integer"
                    },
                    ColumnSpan: {
                        type: "integer"
                    },
                    Geometry: {
                        shape: "Sp"
                    },
                    Id: {},
                    Relationships: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                Ids: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    EntityTypes: {
                        type: "list",
                        member: {}
                    },
                    SelectionStatus: {},
                    Page: {
                        type: "integer"
                    }
                }
            }
        },
        Sp: {
            type: "structure",
            members: {
                BoundingBox: {
                    type: "structure",
                    members: {
                        Width: {
                            type: "float"
                        },
                        Height: {
                            type: "float"
                        },
                        Left: {
                            type: "float"
                        },
                        Top: {
                            type: "float"
                        }
                    }
                },
                Polygon: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            X: {
                                type: "float"
                            },
                            Y: {
                                type: "float"
                            }
                        }
                    }
                }
            }
        },
        S1b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {
                        type: "structure",
                        members: {
                            Text: {},
                            Confidence: {
                                type: "float"
                            }
                        }
                    },
                    LabelDetection: {
                        shape: "S1e"
                    },
                    ValueDetection: {
                        shape: "S1e"
                    },
                    PageNumber: {
                        type: "integer"
                    }
                }
            }
        },
        S1e: {
            type: "structure",
            members: {
                Text: {},
                Geometry: {
                    shape: "Sp"
                },
                Confidence: {
                    type: "float"
                }
            }
        },
        S1r: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ErrorCode: {},
                    Pages: {
                        type: "list",
                        member: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S1z: {
            type: "structure",
            members: {
                S3Object: {
                    shape: "S4"
                }
            }
        },
        S22: {
            type: "structure",
            required: [ "SNSTopicArn", "RoleArn" ],
            members: {
                SNSTopicArn: {},
                RoleArn: {}
            }
        },
        S25: {
            type: "structure",
            required: [ "S3Bucket" ],
            members: {
                S3Bucket: {},
                S3Prefix: {}
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["managedblockchain"] = {};

AWS.ManagedBlockchain = AWS.Service.defineService("managedblockchain", [ "2018-09-24" ]);

AWS.apiLoader.services["managedblockchain"]["2018-09-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-09-24",
        endpointPrefix: "managedblockchain",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "ManagedBlockchain",
        serviceFullName: "Amazon Managed Blockchain",
        serviceId: "ManagedBlockchain",
        signatureVersion: "v4",
        signingName: "managedblockchain",
        uid: "managedblockchain-2018-09-24"
    },
    operations: {
        CreateMember: {
            http: {
                requestUri: "/networks/{networkId}/members"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "InvitationId", "NetworkId", "MemberConfiguration" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    InvitationId: {},
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberConfiguration: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MemberId: {}
                }
            }
        },
        CreateNetwork: {
            http: {
                requestUri: "/networks"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "Name", "Framework", "FrameworkVersion", "VotingPolicy", "MemberConfiguration" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Name: {},
                    Description: {},
                    Framework: {},
                    FrameworkVersion: {},
                    FrameworkConfiguration: {
                        type: "structure",
                        members: {
                            Fabric: {
                                type: "structure",
                                required: [ "Edition" ],
                                members: {
                                    Edition: {}
                                }
                            }
                        }
                    },
                    VotingPolicy: {
                        shape: "Ss"
                    },
                    MemberConfiguration: {
                        shape: "S4"
                    },
                    Tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkId: {},
                    MemberId: {}
                }
            }
        },
        CreateNode: {
            http: {
                requestUri: "/networks/{networkId}/nodes"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "NetworkId", "NodeConfiguration" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {},
                    NodeConfiguration: {
                        type: "structure",
                        required: [ "InstanceType" ],
                        members: {
                            InstanceType: {},
                            AvailabilityZone: {},
                            LogPublishingConfiguration: {
                                shape: "S12"
                            },
                            StateDB: {}
                        }
                    },
                    Tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NodeId: {}
                }
            }
        },
        CreateProposal: {
            http: {
                requestUri: "/networks/{networkId}/proposals"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "NetworkId", "MemberId", "Actions" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {},
                    Actions: {
                        shape: "S17"
                    },
                    Description: {},
                    Tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProposalId: {}
                }
            }
        },
        DeleteMember: {
            http: {
                method: "DELETE",
                requestUri: "/networks/{networkId}/members/{memberId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "MemberId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "memberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteNode: {
            http: {
                method: "DELETE",
                requestUri: "/networks/{networkId}/nodes/{nodeId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "NodeId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {
                        location: "querystring",
                        locationName: "memberId"
                    },
                    NodeId: {
                        location: "uri",
                        locationName: "nodeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetMember: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/members/{memberId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "MemberId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "memberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Member: {
                        type: "structure",
                        members: {
                            NetworkId: {},
                            Id: {},
                            Name: {},
                            Description: {},
                            FrameworkAttributes: {
                                type: "structure",
                                members: {
                                    Fabric: {
                                        type: "structure",
                                        members: {
                                            AdminUsername: {},
                                            CaEndpoint: {}
                                        }
                                    }
                                }
                            },
                            LogPublishingConfiguration: {
                                shape: "Sb"
                            },
                            Status: {},
                            CreationDate: {
                                shape: "S1p"
                            },
                            Tags: {
                                shape: "S1q"
                            },
                            Arn: {},
                            KmsKeyArn: {}
                        }
                    }
                }
            }
        },
        GetNetwork: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Network: {
                        type: "structure",
                        members: {
                            Id: {},
                            Name: {},
                            Description: {},
                            Framework: {},
                            FrameworkVersion: {},
                            FrameworkAttributes: {
                                type: "structure",
                                members: {
                                    Fabric: {
                                        type: "structure",
                                        members: {
                                            OrderingServiceEndpoint: {},
                                            Edition: {}
                                        }
                                    },
                                    Ethereum: {
                                        type: "structure",
                                        members: {
                                            ChainId: {}
                                        }
                                    }
                                }
                            },
                            VpcEndpointServiceName: {},
                            VotingPolicy: {
                                shape: "Ss"
                            },
                            Status: {},
                            CreationDate: {
                                shape: "S1p"
                            },
                            Tags: {
                                shape: "S1q"
                            },
                            Arn: {}
                        }
                    }
                }
            }
        },
        GetNode: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/nodes/{nodeId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "NodeId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {
                        location: "querystring",
                        locationName: "memberId"
                    },
                    NodeId: {
                        location: "uri",
                        locationName: "nodeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Node: {
                        type: "structure",
                        members: {
                            NetworkId: {},
                            MemberId: {},
                            Id: {},
                            InstanceType: {},
                            AvailabilityZone: {},
                            FrameworkAttributes: {
                                type: "structure",
                                members: {
                                    Fabric: {
                                        type: "structure",
                                        members: {
                                            PeerEndpoint: {},
                                            PeerEventEndpoint: {}
                                        }
                                    },
                                    Ethereum: {
                                        type: "structure",
                                        members: {
                                            HttpEndpoint: {},
                                            WebSocketEndpoint: {}
                                        }
                                    }
                                }
                            },
                            LogPublishingConfiguration: {
                                shape: "S12"
                            },
                            StateDB: {},
                            Status: {},
                            CreationDate: {
                                shape: "S1p"
                            },
                            Tags: {
                                shape: "S1q"
                            },
                            Arn: {},
                            KmsKeyArn: {}
                        }
                    }
                }
            }
        },
        GetProposal: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/proposals/{proposalId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "ProposalId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    ProposalId: {
                        location: "uri",
                        locationName: "proposalId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Proposal: {
                        type: "structure",
                        members: {
                            ProposalId: {},
                            NetworkId: {},
                            Description: {},
                            Actions: {
                                shape: "S17"
                            },
                            ProposedByMemberId: {},
                            ProposedByMemberName: {},
                            Status: {},
                            CreationDate: {
                                shape: "S1p"
                            },
                            ExpirationDate: {
                                shape: "S1p"
                            },
                            YesVoteCount: {
                                type: "integer"
                            },
                            NoVoteCount: {
                                type: "integer"
                            },
                            OutstandingVoteCount: {
                                type: "integer"
                            },
                            Tags: {
                                shape: "S1q"
                            },
                            Arn: {}
                        }
                    }
                }
            }
        },
        ListInvitations: {
            http: {
                method: "GET",
                requestUri: "/invitations"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Invitations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InvitationId: {},
                                CreationDate: {
                                    shape: "S1p"
                                },
                                ExpirationDate: {
                                    shape: "S1p"
                                },
                                Status: {},
                                NetworkSummary: {
                                    shape: "S2h"
                                },
                                Arn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMembers: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/members"
            },
            input: {
                type: "structure",
                required: [ "NetworkId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    Name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    IsOwned: {
                        location: "querystring",
                        locationName: "isOwned",
                        type: "boolean"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Members: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Description: {},
                                Status: {},
                                CreationDate: {
                                    shape: "S1p"
                                },
                                IsOwned: {
                                    type: "boolean"
                                },
                                Arn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNetworks: {
            http: {
                method: "GET",
                requestUri: "/networks"
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    Framework: {
                        location: "querystring",
                        locationName: "framework"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Networks: {
                        type: "list",
                        member: {
                            shape: "S2h"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNodes: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/nodes"
            },
            input: {
                type: "structure",
                required: [ "NetworkId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {
                        location: "querystring",
                        locationName: "memberId"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Nodes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Status: {},
                                CreationDate: {
                                    shape: "S1p"
                                },
                                AvailabilityZone: {},
                                InstanceType: {},
                                Arn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProposalVotes: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/proposals/{proposalId}/votes"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "ProposalId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    ProposalId: {
                        location: "uri",
                        locationName: "proposalId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProposalVotes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Vote: {},
                                MemberName: {},
                                MemberId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProposals: {
            http: {
                method: "GET",
                requestUri: "/networks/{networkId}/proposals"
            },
            input: {
                type: "structure",
                required: [ "NetworkId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Proposals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProposalId: {},
                                Description: {},
                                ProposedByMemberId: {},
                                ProposedByMemberName: {},
                                Status: {},
                                CreationDate: {
                                    shape: "S1p"
                                },
                                ExpirationDate: {
                                    shape: "S1p"
                                },
                                Arn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1q"
                    }
                }
            }
        },
        RejectInvitation: {
            http: {
                method: "DELETE",
                requestUri: "/invitations/{invitationId}"
            },
            input: {
                type: "structure",
                required: [ "InvitationId" ],
                members: {
                    InvitationId: {
                        location: "uri",
                        locationName: "invitationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMember: {
            http: {
                method: "PATCH",
                requestUri: "/networks/{networkId}/members/{memberId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "MemberId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "memberId"
                    },
                    LogPublishingConfiguration: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNode: {
            http: {
                method: "PATCH",
                requestUri: "/networks/{networkId}/nodes/{nodeId}"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "NodeId" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    MemberId: {},
                    NodeId: {
                        location: "uri",
                        locationName: "nodeId"
                    },
                    LogPublishingConfiguration: {
                        shape: "S12"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        VoteOnProposal: {
            http: {
                requestUri: "/networks/{networkId}/proposals/{proposalId}/votes"
            },
            input: {
                type: "structure",
                required: [ "NetworkId", "ProposalId", "VoterMemberId", "Vote" ],
                members: {
                    NetworkId: {
                        location: "uri",
                        locationName: "networkId"
                    },
                    ProposalId: {
                        location: "uri",
                        locationName: "proposalId"
                    },
                    VoterMemberId: {},
                    Vote: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "Name", "FrameworkConfiguration" ],
            members: {
                Name: {},
                Description: {},
                FrameworkConfiguration: {
                    type: "structure",
                    members: {
                        Fabric: {
                            type: "structure",
                            required: [ "AdminUsername", "AdminPassword" ],
                            members: {
                                AdminUsername: {},
                                AdminPassword: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        }
                    }
                },
                LogPublishingConfiguration: {
                    shape: "Sb"
                },
                Tags: {
                    shape: "Sg"
                },
                KmsKeyArn: {}
            }
        },
        Sb: {
            type: "structure",
            members: {
                Fabric: {
                    type: "structure",
                    members: {
                        CaLogs: {
                            shape: "Sd"
                        }
                    }
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                Cloudwatch: {
                    type: "structure",
                    members: {
                        Enabled: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        Sg: {
            type: "map",
            key: {},
            value: {}
        },
        Ss: {
            type: "structure",
            members: {
                ApprovalThresholdPolicy: {
                    type: "structure",
                    members: {
                        ThresholdPercentage: {
                            type: "integer"
                        },
                        ProposalDurationInHours: {
                            type: "integer"
                        },
                        ThresholdComparator: {}
                    }
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                Fabric: {
                    type: "structure",
                    members: {
                        ChaincodeLogs: {
                            shape: "Sd"
                        },
                        PeerLogs: {
                            shape: "Sd"
                        }
                    }
                }
            }
        },
        S17: {
            type: "structure",
            members: {
                Invitations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Principal" ],
                        members: {
                            Principal: {}
                        }
                    }
                },
                Removals: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "MemberId" ],
                        members: {
                            MemberId: {}
                        }
                    }
                }
            }
        },
        S1p: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1q: {
            type: "map",
            key: {},
            value: {}
        },
        S2h: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Description: {},
                Framework: {},
                FrameworkVersion: {},
                Status: {},
                CreationDate: {
                    shape: "S1p"
                },
                Arn: {}
            }
        }
    },
    paginators: {
        ListInvitations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMembers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNetworks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNodes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListProposalVotes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListProposals: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["mediapackagevod"] = {};

AWS.MediaPackageVod = AWS.Service.defineService("mediapackagevod", [ "2018-11-07" ]);

AWS.apiLoader.services["mediapackagevod"]["2018-11-07"] = {
    metadata: {
        apiVersion: "2018-11-07",
        endpointPrefix: "mediapackage-vod",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "MediaPackage Vod",
        serviceFullName: "AWS Elemental MediaPackage VOD",
        serviceId: "MediaPackage Vod",
        signatureVersion: "v4",
        signingName: "mediapackage-vod",
        uid: "mediapackage-vod-2018-11-07"
    },
    operations: {
        ConfigureLogs: {
            http: {
                method: "PUT",
                requestUri: "/packaging_groups/{id}/configure_logs",
                responseCode: 200
            },
            input: {
                members: {
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "S5"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        CreateAsset: {
            http: {
                requestUri: "/assets",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        locationName: "id"
                    },
                    PackagingGroupId: {
                        locationName: "packagingGroupId"
                    },
                    ResourceId: {
                        locationName: "resourceId"
                    },
                    SourceArn: {
                        locationName: "sourceArn"
                    },
                    SourceRoleArn: {
                        locationName: "sourceRoleArn"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                required: [ "SourceArn", "Id", "PackagingGroupId", "SourceRoleArn" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    EgressEndpoints: {
                        locationName: "egressEndpoints",
                        shape: "S9"
                    },
                    Id: {
                        locationName: "id"
                    },
                    PackagingGroupId: {
                        locationName: "packagingGroupId"
                    },
                    ResourceId: {
                        locationName: "resourceId"
                    },
                    SourceArn: {
                        locationName: "sourceArn"
                    },
                    SourceRoleArn: {
                        locationName: "sourceRoleArn"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        CreatePackagingConfiguration: {
            http: {
                requestUri: "/packaging_configurations",
                responseCode: 200
            },
            input: {
                members: {
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "Sc"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "Sn"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "Sw"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "Sz"
                    },
                    PackagingGroupId: {
                        locationName: "packagingGroupId"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                required: [ "Id", "PackagingGroupId" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "Sc"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "Sn"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "Sw"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "Sz"
                    },
                    PackagingGroupId: {
                        locationName: "packagingGroupId"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        CreatePackagingGroup: {
            http: {
                requestUri: "/packaging_groups",
                responseCode: 200
            },
            input: {
                members: {
                    Authorization: {
                        locationName: "authorization",
                        shape: "S5"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "S5"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        DeleteAsset: {
            http: {
                method: "DELETE",
                requestUri: "/assets/{id}",
                responseCode: 202
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DeletePackagingConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/packaging_configurations/{id}",
                responseCode: 202
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DeletePackagingGroup: {
            http: {
                method: "DELETE",
                requestUri: "/packaging_groups/{id}",
                responseCode: 202
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DescribeAsset: {
            http: {
                method: "GET",
                requestUri: "/assets/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    EgressEndpoints: {
                        locationName: "egressEndpoints",
                        shape: "S9"
                    },
                    Id: {
                        locationName: "id"
                    },
                    PackagingGroupId: {
                        locationName: "packagingGroupId"
                    },
                    ResourceId: {
                        locationName: "resourceId"
                    },
                    SourceArn: {
                        locationName: "sourceArn"
                    },
                    SourceRoleArn: {
                        locationName: "sourceRoleArn"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        DescribePackagingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/packaging_configurations/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "Sc"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "Sn"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "Sw"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "Sz"
                    },
                    PackagingGroupId: {
                        locationName: "packagingGroupId"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        DescribePackagingGroup: {
            http: {
                method: "GET",
                requestUri: "/packaging_groups/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "S5"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        },
        ListAssets: {
            http: {
                method: "GET",
                requestUri: "/assets",
                responseCode: 200
            },
            input: {
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    PackagingGroupId: {
                        location: "querystring",
                        locationName: "packagingGroupId"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    Assets: {
                        locationName: "assets",
                        member: {
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                CreatedAt: {
                                    locationName: "createdAt"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                PackagingGroupId: {
                                    locationName: "packagingGroupId"
                                },
                                ResourceId: {
                                    locationName: "resourceId"
                                },
                                SourceArn: {
                                    locationName: "sourceArn"
                                },
                                SourceRoleArn: {
                                    locationName: "sourceRoleArn"
                                },
                                Tags: {
                                    locationName: "tags",
                                    shape: "S6"
                                }
                            },
                            type: "structure"
                        },
                        type: "list"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            }
        },
        ListPackagingConfigurations: {
            http: {
                method: "GET",
                requestUri: "/packaging_configurations",
                responseCode: 200
            },
            input: {
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    PackagingGroupId: {
                        location: "querystring",
                        locationName: "packagingGroupId"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    PackagingConfigurations: {
                        locationName: "packagingConfigurations",
                        member: {
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                CmafPackage: {
                                    locationName: "cmafPackage",
                                    shape: "Sc"
                                },
                                DashPackage: {
                                    locationName: "dashPackage",
                                    shape: "Sn"
                                },
                                HlsPackage: {
                                    locationName: "hlsPackage",
                                    shape: "Sw"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                MssPackage: {
                                    locationName: "mssPackage",
                                    shape: "Sz"
                                },
                                PackagingGroupId: {
                                    locationName: "packagingGroupId"
                                },
                                Tags: {
                                    locationName: "tags",
                                    shape: "S6"
                                }
                            },
                            type: "structure"
                        },
                        type: "list"
                    }
                },
                type: "structure"
            }
        },
        ListPackagingGroups: {
            http: {
                method: "GET",
                requestUri: "/packaging_groups",
                responseCode: 200
            },
            input: {
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    PackagingGroups: {
                        locationName: "packagingGroups",
                        member: {
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                Authorization: {
                                    locationName: "authorization",
                                    shape: "S5"
                                },
                                DomainName: {
                                    locationName: "domainName"
                                },
                                EgressAccessLogs: {
                                    locationName: "egressAccessLogs",
                                    shape: "S2"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                Tags: {
                                    locationName: "tags",
                                    shape: "S6"
                                }
                            },
                            type: "structure"
                        },
                        type: "list"
                    }
                },
                type: "structure"
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ],
                type: "structure"
            },
            output: {
                members: {
                    Tags: {
                        locationName: "tags",
                        shape: "S1x"
                    }
                },
                type: "structure"
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S1x"
                    }
                },
                required: [ "ResourceArn", "Tags" ],
                type: "structure"
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        shape: "Sf"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ],
                type: "structure"
            }
        },
        UpdatePackagingGroup: {
            http: {
                method: "PUT",
                requestUri: "/packaging_groups/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Authorization: {
                        locationName: "authorization",
                        shape: "S5"
                    },
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "S5"
                    },
                    DomainName: {
                        locationName: "domainName"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S6"
                    }
                },
                type: "structure"
            }
        }
    },
    shapes: {
        S2: {
            members: {
                LogGroupName: {
                    locationName: "logGroupName"
                }
            },
            type: "structure"
        },
        S5: {
            members: {
                CdnIdentifierSecret: {
                    locationName: "cdnIdentifierSecret"
                },
                SecretsRoleArn: {
                    locationName: "secretsRoleArn"
                }
            },
            required: [ "SecretsRoleArn", "CdnIdentifierSecret" ],
            type: "structure"
        },
        S6: {
            key: {},
            type: "map",
            value: {}
        },
        S9: {
            member: {
                members: {
                    PackagingConfigurationId: {
                        locationName: "packagingConfigurationId"
                    },
                    Status: {
                        locationName: "status"
                    },
                    Url: {
                        locationName: "url"
                    }
                },
                type: "structure"
            },
            type: "list"
        },
        Sc: {
            members: {
                Encryption: {
                    locationName: "encryption",
                    members: {
                        ConstantInitializationVector: {
                            locationName: "constantInitializationVector"
                        },
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Se"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                HlsManifests: {
                    locationName: "hlsManifests",
                    shape: "Sg"
                },
                IncludeEncoderConfigurationInSegments: {
                    locationName: "includeEncoderConfigurationInSegments",
                    type: "boolean"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                }
            },
            required: [ "HlsManifests" ],
            type: "structure"
        },
        Se: {
            members: {
                RoleArn: {
                    locationName: "roleArn"
                },
                SystemIds: {
                    locationName: "systemIds",
                    shape: "Sf"
                },
                Url: {
                    locationName: "url"
                }
            },
            required: [ "SystemIds", "Url", "RoleArn" ],
            type: "structure"
        },
        Sf: {
            member: {},
            type: "list"
        },
        Sg: {
            member: {
                members: {
                    AdMarkers: {
                        locationName: "adMarkers"
                    },
                    IncludeIframeOnlyStream: {
                        locationName: "includeIframeOnlyStream",
                        type: "boolean"
                    },
                    ManifestName: {
                        locationName: "manifestName"
                    },
                    ProgramDateTimeIntervalSeconds: {
                        locationName: "programDateTimeIntervalSeconds",
                        type: "integer"
                    },
                    RepeatExtXKey: {
                        locationName: "repeatExtXKey",
                        type: "boolean"
                    },
                    StreamSelection: {
                        locationName: "streamSelection",
                        shape: "Sl"
                    }
                },
                type: "structure"
            },
            type: "list"
        },
        Sl: {
            members: {
                MaxVideoBitsPerSecond: {
                    locationName: "maxVideoBitsPerSecond",
                    type: "integer"
                },
                MinVideoBitsPerSecond: {
                    locationName: "minVideoBitsPerSecond",
                    type: "integer"
                },
                StreamOrder: {
                    locationName: "streamOrder"
                }
            },
            type: "structure"
        },
        Sn: {
            members: {
                DashManifests: {
                    locationName: "dashManifests",
                    member: {
                        members: {
                            ManifestLayout: {
                                locationName: "manifestLayout"
                            },
                            ManifestName: {
                                locationName: "manifestName"
                            },
                            MinBufferTimeSeconds: {
                                locationName: "minBufferTimeSeconds",
                                type: "integer"
                            },
                            Profile: {
                                locationName: "profile"
                            },
                            StreamSelection: {
                                locationName: "streamSelection",
                                shape: "Sl"
                            }
                        },
                        type: "structure"
                    },
                    type: "list"
                },
                Encryption: {
                    locationName: "encryption",
                    members: {
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Se"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                IncludeEncoderConfigurationInSegments: {
                    locationName: "includeEncoderConfigurationInSegments",
                    type: "boolean"
                },
                PeriodTriggers: {
                    locationName: "periodTriggers",
                    member: {},
                    type: "list"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                SegmentTemplateFormat: {
                    locationName: "segmentTemplateFormat"
                }
            },
            required: [ "DashManifests" ],
            type: "structure"
        },
        Sw: {
            members: {
                Encryption: {
                    locationName: "encryption",
                    members: {
                        ConstantInitializationVector: {
                            locationName: "constantInitializationVector"
                        },
                        EncryptionMethod: {
                            locationName: "encryptionMethod"
                        },
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Se"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                HlsManifests: {
                    locationName: "hlsManifests",
                    shape: "Sg"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                UseAudioRenditionGroup: {
                    locationName: "useAudioRenditionGroup",
                    type: "boolean"
                }
            },
            required: [ "HlsManifests" ],
            type: "structure"
        },
        Sz: {
            members: {
                Encryption: {
                    locationName: "encryption",
                    members: {
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Se"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                MssManifests: {
                    locationName: "mssManifests",
                    member: {
                        members: {
                            ManifestName: {
                                locationName: "manifestName"
                            },
                            StreamSelection: {
                                locationName: "streamSelection",
                                shape: "Sl"
                            }
                        },
                        type: "structure"
                    },
                    type: "list"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                }
            },
            required: [ "MssManifests" ],
            type: "structure"
        },
        S1x: {
            key: {},
            type: "map",
            value: {}
        }
    },
    paginators: {
        ListAssets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Assets"
        },
        ListPackagingConfigurations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PackagingConfigurations"
        },
        ListPackagingGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PackagingGroups"
        }
    }
};

AWS.apiLoader.services["groundstation"] = {};

AWS.GroundStation = AWS.Service.defineService("groundstation", [ "2019-05-23" ]);

AWS.apiLoader.services["groundstation"]["2019-05-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-05-23",
        endpointPrefix: "groundstation",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Ground Station",
        serviceId: "GroundStation",
        signatureVersion: "v4",
        signingName: "groundstation",
        uid: "groundstation-2019-05-23"
    },
    operations: {
        CancelContact: {
            http: {
                method: "DELETE",
                requestUri: "/contact/{contactId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contactId" ],
                members: {
                    contactId: {
                        location: "uri",
                        locationName: "contactId"
                    }
                }
            },
            output: {
                shape: "S3"
            },
            idempotent: true
        },
        CreateConfig: {
            http: {
                requestUri: "/config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configData", "name" ],
                members: {
                    configData: {
                        shape: "S5"
                    },
                    name: {},
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                shape: "Sy"
            }
        },
        CreateDataflowEndpointGroup: {
            http: {
                requestUri: "/dataflowEndpointGroup",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endpointDetails" ],
                members: {
                    endpointDetails: {
                        shape: "S11"
                    },
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                shape: "S1b"
            }
        },
        CreateMissionProfile: {
            http: {
                requestUri: "/missionprofile",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dataflowEdges", "minimumViableContactDurationSeconds", "name", "trackingConfigArn" ],
                members: {
                    contactPostPassDurationSeconds: {
                        type: "integer"
                    },
                    contactPrePassDurationSeconds: {
                        type: "integer"
                    },
                    dataflowEdges: {
                        shape: "S1e"
                    },
                    minimumViableContactDurationSeconds: {
                        type: "integer"
                    },
                    name: {},
                    tags: {
                        shape: "Sx"
                    },
                    trackingConfigArn: {}
                }
            },
            output: {
                shape: "S1g"
            }
        },
        DeleteConfig: {
            http: {
                method: "DELETE",
                requestUri: "/config/{configType}/{configId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configId", "configType" ],
                members: {
                    configId: {
                        location: "uri",
                        locationName: "configId"
                    },
                    configType: {
                        location: "uri",
                        locationName: "configType"
                    }
                }
            },
            output: {
                shape: "Sy"
            },
            idempotent: true
        },
        DeleteDataflowEndpointGroup: {
            http: {
                method: "DELETE",
                requestUri: "/dataflowEndpointGroup/{dataflowEndpointGroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dataflowEndpointGroupId" ],
                members: {
                    dataflowEndpointGroupId: {
                        location: "uri",
                        locationName: "dataflowEndpointGroupId"
                    }
                }
            },
            output: {
                shape: "S1b"
            },
            idempotent: true
        },
        DeleteMissionProfile: {
            http: {
                method: "DELETE",
                requestUri: "/missionprofile/{missionProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "missionProfileId" ],
                members: {
                    missionProfileId: {
                        location: "uri",
                        locationName: "missionProfileId"
                    }
                }
            },
            output: {
                shape: "S1g"
            },
            idempotent: true
        },
        DescribeContact: {
            http: {
                method: "GET",
                requestUri: "/contact/{contactId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contactId" ],
                members: {
                    contactId: {
                        location: "uri",
                        locationName: "contactId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contactId: {},
                    contactStatus: {},
                    dataflowList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                destination: {
                                    type: "structure",
                                    members: {
                                        configDetails: {
                                            shape: "S1q"
                                        },
                                        configId: {},
                                        configType: {},
                                        dataflowDestinationRegion: {}
                                    }
                                },
                                errorMessage: {},
                                source: {
                                    type: "structure",
                                    members: {
                                        configDetails: {
                                            shape: "S1q"
                                        },
                                        configId: {},
                                        configType: {},
                                        dataflowSourceRegion: {}
                                    }
                                }
                            }
                        }
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    errorMessage: {},
                    groundStation: {},
                    maximumElevation: {
                        shape: "S1v"
                    },
                    missionProfileArn: {},
                    postPassEndTime: {
                        type: "timestamp"
                    },
                    prePassStartTime: {
                        type: "timestamp"
                    },
                    region: {},
                    satelliteArn: {},
                    startTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "Sx"
                    }
                }
            }
        },
        GetConfig: {
            http: {
                method: "GET",
                requestUri: "/config/{configType}/{configId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configId", "configType" ],
                members: {
                    configId: {
                        location: "uri",
                        locationName: "configId"
                    },
                    configType: {
                        location: "uri",
                        locationName: "configType"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configArn", "configData", "configId", "name" ],
                members: {
                    configArn: {},
                    configData: {
                        shape: "S5"
                    },
                    configId: {},
                    configType: {},
                    name: {},
                    tags: {
                        shape: "Sx"
                    }
                }
            }
        },
        GetDataflowEndpointGroup: {
            http: {
                method: "GET",
                requestUri: "/dataflowEndpointGroup/{dataflowEndpointGroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dataflowEndpointGroupId" ],
                members: {
                    dataflowEndpointGroupId: {
                        location: "uri",
                        locationName: "dataflowEndpointGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataflowEndpointGroupArn: {},
                    dataflowEndpointGroupId: {},
                    endpointsDetails: {
                        shape: "S11"
                    },
                    tags: {
                        shape: "Sx"
                    }
                }
            }
        },
        GetMinuteUsage: {
            http: {
                requestUri: "/minute-usage",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "month", "year" ],
                members: {
                    month: {
                        type: "integer"
                    },
                    year: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    estimatedMinutesRemaining: {
                        type: "integer"
                    },
                    isReservedMinutesCustomer: {
                        type: "boolean"
                    },
                    totalReservedMinuteAllocation: {
                        type: "integer"
                    },
                    totalScheduledMinutes: {
                        type: "integer"
                    },
                    upcomingMinutesScheduled: {
                        type: "integer"
                    }
                }
            }
        },
        GetMissionProfile: {
            http: {
                method: "GET",
                requestUri: "/missionprofile/{missionProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "missionProfileId" ],
                members: {
                    missionProfileId: {
                        location: "uri",
                        locationName: "missionProfileId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contactPostPassDurationSeconds: {
                        type: "integer"
                    },
                    contactPrePassDurationSeconds: {
                        type: "integer"
                    },
                    dataflowEdges: {
                        shape: "S1e"
                    },
                    minimumViableContactDurationSeconds: {
                        type: "integer"
                    },
                    missionProfileArn: {},
                    missionProfileId: {},
                    name: {},
                    region: {},
                    tags: {
                        shape: "Sx"
                    },
                    trackingConfigArn: {}
                }
            }
        },
        GetSatellite: {
            http: {
                method: "GET",
                requestUri: "/satellite/{satelliteId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "satelliteId" ],
                members: {
                    satelliteId: {
                        location: "uri",
                        locationName: "satelliteId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    groundStations: {
                        shape: "S2a"
                    },
                    noradSatelliteID: {
                        type: "integer"
                    },
                    satelliteArn: {},
                    satelliteId: {}
                }
            }
        },
        ListConfigs: {
            http: {
                method: "GET",
                requestUri: "/config",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    configList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                configArn: {},
                                configId: {},
                                configType: {},
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListContacts: {
            http: {
                requestUri: "/contacts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endTime", "startTime", "statusList" ],
                members: {
                    endTime: {
                        type: "timestamp"
                    },
                    groundStation: {},
                    maxResults: {
                        type: "integer"
                    },
                    missionProfileArn: {},
                    nextToken: {},
                    satelliteArn: {},
                    startTime: {
                        type: "timestamp"
                    },
                    statusList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contactList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                contactId: {},
                                contactStatus: {},
                                endTime: {
                                    type: "timestamp"
                                },
                                errorMessage: {},
                                groundStation: {},
                                maximumElevation: {
                                    shape: "S1v"
                                },
                                missionProfileArn: {},
                                postPassEndTime: {
                                    type: "timestamp"
                                },
                                prePassStartTime: {
                                    type: "timestamp"
                                },
                                region: {},
                                satelliteArn: {},
                                startTime: {
                                    type: "timestamp"
                                },
                                tags: {
                                    shape: "Sx"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataflowEndpointGroups: {
            http: {
                method: "GET",
                requestUri: "/dataflowEndpointGroup",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataflowEndpointGroupList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                dataflowEndpointGroupArn: {},
                                dataflowEndpointGroupId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListGroundStations: {
            http: {
                method: "GET",
                requestUri: "/groundstation",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    satelliteId: {
                        location: "querystring",
                        locationName: "satelliteId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    groundStationList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                groundStationId: {},
                                groundStationName: {},
                                region: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListMissionProfiles: {
            http: {
                method: "GET",
                requestUri: "/missionprofile",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    missionProfileList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                missionProfileArn: {},
                                missionProfileId: {},
                                name: {},
                                region: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSatellites: {
            http: {
                method: "GET",
                requestUri: "/satellite",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    satellites: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                groundStations: {
                                    shape: "S2a"
                                },
                                noradSatelliteID: {
                                    type: "integer"
                                },
                                satelliteArn: {},
                                satelliteId: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sx"
                    }
                }
            }
        },
        ReserveContact: {
            http: {
                requestUri: "/contact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endTime", "groundStation", "missionProfileArn", "satelliteArn", "startTime" ],
                members: {
                    endTime: {
                        type: "timestamp"
                    },
                    groundStation: {},
                    missionProfileArn: {},
                    satelliteArn: {},
                    startTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                shape: "S3"
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateConfig: {
            http: {
                method: "PUT",
                requestUri: "/config/{configType}/{configId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "configData", "configId", "configType", "name" ],
                members: {
                    configData: {
                        shape: "S5"
                    },
                    configId: {
                        location: "uri",
                        locationName: "configId"
                    },
                    configType: {
                        location: "uri",
                        locationName: "configType"
                    },
                    name: {}
                }
            },
            output: {
                shape: "Sy"
            },
            idempotent: true
        },
        UpdateMissionProfile: {
            http: {
                method: "PUT",
                requestUri: "/missionprofile/{missionProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "missionProfileId" ],
                members: {
                    contactPostPassDurationSeconds: {
                        type: "integer"
                    },
                    contactPrePassDurationSeconds: {
                        type: "integer"
                    },
                    dataflowEdges: {
                        shape: "S1e"
                    },
                    minimumViableContactDurationSeconds: {
                        type: "integer"
                    },
                    missionProfileId: {
                        location: "uri",
                        locationName: "missionProfileId"
                    },
                    name: {},
                    trackingConfigArn: {}
                }
            },
            output: {
                shape: "S1g"
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                contactId: {}
            }
        },
        S5: {
            type: "structure",
            members: {
                antennaDownlinkConfig: {
                    type: "structure",
                    required: [ "spectrumConfig" ],
                    members: {
                        spectrumConfig: {
                            shape: "S7"
                        }
                    }
                },
                antennaDownlinkDemodDecodeConfig: {
                    type: "structure",
                    required: [ "decodeConfig", "demodulationConfig", "spectrumConfig" ],
                    members: {
                        decodeConfig: {
                            type: "structure",
                            required: [ "unvalidatedJSON" ],
                            members: {
                                unvalidatedJSON: {}
                            }
                        },
                        demodulationConfig: {
                            type: "structure",
                            required: [ "unvalidatedJSON" ],
                            members: {
                                unvalidatedJSON: {}
                            }
                        },
                        spectrumConfig: {
                            shape: "S7"
                        }
                    }
                },
                antennaUplinkConfig: {
                    type: "structure",
                    required: [ "spectrumConfig", "targetEirp" ],
                    members: {
                        spectrumConfig: {
                            type: "structure",
                            required: [ "centerFrequency" ],
                            members: {
                                centerFrequency: {
                                    shape: "Sb"
                                },
                                polarization: {}
                            }
                        },
                        targetEirp: {
                            type: "structure",
                            required: [ "units", "value" ],
                            members: {
                                units: {},
                                value: {
                                    type: "double"
                                }
                            }
                        },
                        transmitDisabled: {
                            type: "boolean"
                        }
                    }
                },
                dataflowEndpointConfig: {
                    type: "structure",
                    required: [ "dataflowEndpointName" ],
                    members: {
                        dataflowEndpointName: {},
                        dataflowEndpointRegion: {}
                    }
                },
                s3RecordingConfig: {
                    type: "structure",
                    required: [ "bucketArn", "roleArn" ],
                    members: {
                        bucketArn: {},
                        prefix: {},
                        roleArn: {}
                    }
                },
                trackingConfig: {
                    type: "structure",
                    required: [ "autotrack" ],
                    members: {
                        autotrack: {}
                    }
                },
                uplinkEchoConfig: {
                    type: "structure",
                    required: [ "antennaUplinkConfigArn", "enabled" ],
                    members: {
                        antennaUplinkConfigArn: {},
                        enabled: {
                            type: "boolean"
                        }
                    }
                }
            },
            union: true
        },
        S7: {
            type: "structure",
            required: [ "bandwidth", "centerFrequency" ],
            members: {
                bandwidth: {
                    type: "structure",
                    required: [ "units", "value" ],
                    members: {
                        units: {},
                        value: {
                            type: "double"
                        }
                    }
                },
                centerFrequency: {
                    shape: "Sb"
                },
                polarization: {}
            }
        },
        Sb: {
            type: "structure",
            required: [ "units", "value" ],
            members: {
                units: {},
                value: {
                    type: "double"
                }
            }
        },
        Sx: {
            type: "map",
            key: {},
            value: {}
        },
        Sy: {
            type: "structure",
            members: {
                configArn: {},
                configId: {},
                configType: {}
            }
        },
        S11: {
            type: "list",
            member: {
                shape: "S12"
            }
        },
        S12: {
            type: "structure",
            members: {
                endpoint: {
                    type: "structure",
                    members: {
                        address: {
                            type: "structure",
                            required: [ "name", "port" ],
                            members: {
                                name: {},
                                port: {
                                    type: "integer"
                                }
                            }
                        },
                        mtu: {
                            type: "integer"
                        },
                        name: {},
                        status: {}
                    }
                },
                securityDetails: {
                    type: "structure",
                    required: [ "roleArn", "securityGroupIds", "subnetIds" ],
                    members: {
                        roleArn: {},
                        securityGroupIds: {
                            type: "list",
                            member: {}
                        },
                        subnetIds: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S1b: {
            type: "structure",
            members: {
                dataflowEndpointGroupId: {}
            }
        },
        S1e: {
            type: "list",
            member: {
                type: "list",
                member: {}
            }
        },
        S1g: {
            type: "structure",
            members: {
                missionProfileId: {}
            }
        },
        S1q: {
            type: "structure",
            members: {
                antennaDemodDecodeDetails: {
                    type: "structure",
                    members: {
                        outputNode: {}
                    }
                },
                endpointDetails: {
                    shape: "S12"
                },
                s3RecordingDetails: {
                    type: "structure",
                    members: {
                        bucketArn: {},
                        keyTemplate: {}
                    }
                }
            },
            union: true
        },
        S1v: {
            type: "structure",
            required: [ "unit", "value" ],
            members: {
                unit: {},
                value: {
                    type: "double"
                }
            }
        },
        S2a: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListConfigs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "configList"
        },
        ListContacts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "contactList"
        },
        ListDataflowEndpointGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "dataflowEndpointGroupList"
        },
        ListGroundStations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "groundStationList"
        },
        ListMissionProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "missionProfileList"
        },
        ListSatellites: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "satellites"
        }
    }
};

AWS.apiLoader.services["iotthingsgraph"] = {};

AWS.IoTThingsGraph = AWS.Service.defineService("iotthingsgraph", [ "2018-09-06" ]);

AWS.apiLoader.services["iotthingsgraph"]["2018-09-06"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-09-06",
        endpointPrefix: "iotthingsgraph",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS IoT Things Graph",
        serviceId: "IoTThingsGraph",
        signatureVersion: "v4",
        signingName: "iotthingsgraph",
        targetPrefix: "IotThingsGraphFrontEndService",
        uid: "iotthingsgraph-2018-09-06"
    },
    operations: {
        AssociateEntityToThing: {
            input: {
                type: "structure",
                required: [ "thingName", "entityId" ],
                members: {
                    thingName: {},
                    entityId: {},
                    namespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateFlowTemplate: {
            input: {
                type: "structure",
                required: [ "definition" ],
                members: {
                    definition: {
                        shape: "S7"
                    },
                    compatibleNamespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summary: {
                        shape: "Sb"
                    }
                }
            }
        },
        CreateSystemInstance: {
            input: {
                type: "structure",
                required: [ "definition", "target" ],
                members: {
                    tags: {
                        shape: "Sf"
                    },
                    definition: {
                        shape: "S7"
                    },
                    target: {},
                    greengrassGroupName: {},
                    s3BucketName: {},
                    metricsConfiguration: {
                        shape: "Sm"
                    },
                    flowActionsRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    summary: {
                        shape: "Sq"
                    }
                }
            }
        },
        CreateSystemTemplate: {
            input: {
                type: "structure",
                required: [ "definition" ],
                members: {
                    definition: {
                        shape: "S7"
                    },
                    compatibleNamespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summary: {
                        shape: "Sw"
                    }
                }
            }
        },
        DeleteFlowTemplate: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteNamespace: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    namespaceArn: {},
                    namespaceName: {}
                }
            }
        },
        DeleteSystemInstance: {
            input: {
                type: "structure",
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSystemTemplate: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeploySystemInstance: {
            input: {
                type: "structure",
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "summary" ],
                members: {
                    summary: {
                        shape: "Sq"
                    },
                    greengrassDeploymentId: {}
                }
            }
        },
        DeprecateFlowTemplate: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeprecateSystemTemplate: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeNamespace: {
            input: {
                type: "structure",
                members: {
                    namespaceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    namespaceArn: {},
                    namespaceName: {},
                    trackingNamespaceName: {},
                    trackingNamespaceVersion: {
                        type: "long"
                    },
                    namespaceVersion: {
                        type: "long"
                    }
                }
            }
        },
        DissociateEntityFromThing: {
            input: {
                type: "structure",
                required: [ "thingName", "entityType" ],
                members: {
                    thingName: {},
                    entityType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetEntities: {
            input: {
                type: "structure",
                required: [ "ids" ],
                members: {
                    ids: {
                        type: "list",
                        member: {}
                    },
                    namespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    descriptions: {
                        shape: "S1l"
                    }
                }
            }
        },
        GetFlowTemplate: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    revisionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    description: {
                        type: "structure",
                        members: {
                            summary: {
                                shape: "Sb"
                            },
                            definition: {
                                shape: "S7"
                            },
                            validatedNamespaceVersion: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        GetFlowTemplateRevisions: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        shape: "S1u"
                    },
                    nextToken: {}
                }
            }
        },
        GetNamespaceDeletionStatus: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    namespaceArn: {},
                    namespaceName: {},
                    status: {},
                    errorCode: {},
                    errorMessage: {}
                }
            }
        },
        GetSystemInstance: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    description: {
                        type: "structure",
                        members: {
                            summary: {
                                shape: "Sq"
                            },
                            definition: {
                                shape: "S7"
                            },
                            s3BucketName: {},
                            metricsConfiguration: {
                                shape: "Sm"
                            },
                            validatedNamespaceVersion: {
                                type: "long"
                            },
                            validatedDependencyRevisions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        id: {},
                                        revisionNumber: {
                                            type: "long"
                                        }
                                    }
                                }
                            },
                            flowActionsRoleArn: {}
                        }
                    }
                }
            }
        },
        GetSystemTemplate: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    revisionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    description: {
                        type: "structure",
                        members: {
                            summary: {
                                shape: "Sw"
                            },
                            definition: {
                                shape: "S7"
                            },
                            validatedNamespaceVersion: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        GetSystemTemplateRevisions: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        shape: "S2a"
                    },
                    nextToken: {}
                }
            }
        },
        GetUploadStatus: {
            input: {
                type: "structure",
                required: [ "uploadId" ],
                members: {
                    uploadId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "uploadId", "uploadStatus", "createdDate" ],
                members: {
                    uploadId: {},
                    uploadStatus: {},
                    namespaceArn: {},
                    namespaceName: {},
                    namespaceVersion: {
                        type: "long"
                    },
                    failureReason: {
                        type: "list",
                        member: {}
                    },
                    createdDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        ListFlowExecutionMessages: {
            input: {
                type: "structure",
                required: [ "flowExecutionId" ],
                members: {
                    flowExecutionId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    messages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                messageId: {},
                                eventType: {},
                                timestamp: {
                                    type: "timestamp"
                                },
                                payload: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    resourceArn: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sf"
                    },
                    nextToken: {}
                }
            }
        },
        SearchEntities: {
            input: {
                type: "structure",
                required: [ "entityTypes" ],
                members: {
                    entityTypes: {
                        type: "list",
                        member: {}
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                value: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    namespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    descriptions: {
                        shape: "S1l"
                    },
                    nextToken: {}
                }
            }
        },
        SearchFlowExecutions: {
            input: {
                type: "structure",
                required: [ "systemInstanceId" ],
                members: {
                    systemInstanceId: {},
                    flowExecutionId: {},
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                flowExecutionId: {},
                                status: {},
                                systemInstanceId: {},
                                flowTemplateId: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        SearchFlowTemplates: {
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "value" ],
                            members: {
                                name: {},
                                value: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        shape: "S1u"
                    },
                    nextToken: {}
                }
            }
        },
        SearchSystemInstances: {
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                value: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        SearchSystemTemplates: {
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "value" ],
                            members: {
                                name: {},
                                value: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        shape: "S2a"
                    },
                    nextToken: {}
                }
            }
        },
        SearchThings: {
            input: {
                type: "structure",
                required: [ "entityId" ],
                members: {
                    entityId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    namespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    things: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                thingArn: {},
                                thingName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UndeploySystemInstance: {
            input: {
                type: "structure",
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    summary: {
                        shape: "Sq"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFlowTemplate: {
            input: {
                type: "structure",
                required: [ "id", "definition" ],
                members: {
                    id: {},
                    definition: {
                        shape: "S7"
                    },
                    compatibleNamespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summary: {
                        shape: "Sb"
                    }
                }
            }
        },
        UpdateSystemTemplate: {
            input: {
                type: "structure",
                required: [ "id", "definition" ],
                members: {
                    id: {},
                    definition: {
                        shape: "S7"
                    },
                    compatibleNamespaceVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summary: {
                        shape: "Sw"
                    }
                }
            }
        },
        UploadEntityDefinitions: {
            input: {
                type: "structure",
                members: {
                    document: {
                        shape: "S7"
                    },
                    syncWithPublicNamespace: {
                        type: "boolean"
                    },
                    deprecateExistingEntities: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "uploadId" ],
                members: {
                    uploadId: {}
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            required: [ "language", "text" ],
            members: {
                language: {},
                text: {}
            }
        },
        Sb: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                revisionNumber: {
                    type: "long"
                },
                createdAt: {
                    type: "timestamp"
                }
            }
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                cloudMetricEnabled: {
                    type: "boolean"
                },
                metricRuleRoleArn: {}
            }
        },
        Sq: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                status: {},
                target: {},
                greengrassGroupName: {},
                createdAt: {
                    type: "timestamp"
                },
                updatedAt: {
                    type: "timestamp"
                },
                greengrassGroupId: {},
                greengrassGroupVersionId: {}
            }
        },
        Sw: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                revisionNumber: {
                    type: "long"
                },
                createdAt: {
                    type: "timestamp"
                }
            }
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    type: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    definition: {
                        shape: "S7"
                    }
                }
            }
        },
        S1u: {
            type: "list",
            member: {
                shape: "Sb"
            }
        },
        S2a: {
            type: "list",
            member: {
                shape: "Sw"
            }
        }
    },
    paginators: {
        GetFlowTemplateRevisions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "summaries"
        },
        GetSystemTemplateRevisions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "summaries"
        },
        ListFlowExecutionMessages: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "messages"
        },
        ListTagsForResource: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "tags"
        },
        SearchEntities: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "descriptions"
        },
        SearchFlowExecutions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "summaries"
        },
        SearchFlowTemplates: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "summaries"
        },
        SearchSystemInstances: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "summaries"
        },
        SearchSystemTemplates: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "summaries"
        },
        SearchThings: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "things"
        }
    }
};

AWS.apiLoader.services["iotevents"] = {};

AWS.IoTEvents = AWS.Service.defineService("iotevents", [ "2018-07-27" ]);

AWS.apiLoader.services["iotevents"]["2018-07-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-07-27",
        endpointPrefix: "iotevents",
        protocol: "rest-json",
        serviceFullName: "AWS IoT Events",
        serviceId: "IoT Events",
        signatureVersion: "v4",
        signingName: "iotevents",
        uid: "iotevents-2018-07-27"
    },
    operations: {
        CreateAlarmModel: {
            http: {
                requestUri: "/alarm-models"
            },
            input: {
                type: "structure",
                required: [ "alarmModelName", "roleArn", "alarmRule" ],
                members: {
                    alarmModelName: {},
                    alarmModelDescription: {},
                    roleArn: {},
                    tags: {
                        shape: "S5"
                    },
                    key: {},
                    severity: {
                        type: "integer"
                    },
                    alarmRule: {
                        shape: "Sb"
                    },
                    alarmNotification: {
                        shape: "Sg"
                    },
                    alarmEventActions: {
                        shape: "S13"
                    },
                    alarmCapabilities: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        type: "timestamp"
                    },
                    alarmModelArn: {},
                    alarmModelVersion: {},
                    lastUpdateTime: {
                        type: "timestamp"
                    },
                    status: {}
                }
            }
        },
        CreateDetectorModel: {
            http: {
                requestUri: "/detector-models"
            },
            input: {
                type: "structure",
                required: [ "detectorModelName", "detectorModelDefinition", "roleArn" ],
                members: {
                    detectorModelName: {},
                    detectorModelDefinition: {
                        shape: "S2f"
                    },
                    detectorModelDescription: {},
                    key: {},
                    roleArn: {},
                    tags: {
                        shape: "S5"
                    },
                    evaluationMethod: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorModelConfiguration: {
                        shape: "S35"
                    }
                }
            }
        },
        CreateInput: {
            http: {
                requestUri: "/inputs",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "inputName", "inputDefinition" ],
                members: {
                    inputName: {},
                    inputDescription: {},
                    inputDefinition: {
                        shape: "S3b"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    inputConfiguration: {
                        shape: "S3f"
                    }
                }
            }
        },
        DeleteAlarmModel: {
            http: {
                method: "DELETE",
                requestUri: "/alarm-models/{alarmModelName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "alarmModelName" ],
                members: {
                    alarmModelName: {
                        location: "uri",
                        locationName: "alarmModelName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDetectorModel: {
            http: {
                method: "DELETE",
                requestUri: "/detector-models/{detectorModelName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "detectorModelName" ],
                members: {
                    detectorModelName: {
                        location: "uri",
                        locationName: "detectorModelName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInput: {
            http: {
                method: "DELETE",
                requestUri: "/inputs/{inputName}"
            },
            input: {
                type: "structure",
                required: [ "inputName" ],
                members: {
                    inputName: {
                        location: "uri",
                        locationName: "inputName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAlarmModel: {
            http: {
                method: "GET",
                requestUri: "/alarm-models/{alarmModelName}"
            },
            input: {
                type: "structure",
                required: [ "alarmModelName" ],
                members: {
                    alarmModelName: {
                        location: "uri",
                        locationName: "alarmModelName"
                    },
                    alarmModelVersion: {
                        location: "querystring",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        type: "timestamp"
                    },
                    alarmModelArn: {},
                    alarmModelVersion: {},
                    lastUpdateTime: {
                        type: "timestamp"
                    },
                    status: {},
                    statusMessage: {},
                    alarmModelName: {},
                    alarmModelDescription: {},
                    roleArn: {},
                    key: {},
                    severity: {
                        type: "integer"
                    },
                    alarmRule: {
                        shape: "Sb"
                    },
                    alarmNotification: {
                        shape: "Sg"
                    },
                    alarmEventActions: {
                        shape: "S13"
                    },
                    alarmCapabilities: {
                        shape: "S23"
                    }
                }
            }
        },
        DescribeDetectorModel: {
            http: {
                method: "GET",
                requestUri: "/detector-models/{detectorModelName}"
            },
            input: {
                type: "structure",
                required: [ "detectorModelName" ],
                members: {
                    detectorModelName: {
                        location: "uri",
                        locationName: "detectorModelName"
                    },
                    detectorModelVersion: {
                        location: "querystring",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorModel: {
                        type: "structure",
                        members: {
                            detectorModelDefinition: {
                                shape: "S2f"
                            },
                            detectorModelConfiguration: {
                                shape: "S35"
                            }
                        }
                    }
                }
            }
        },
        DescribeDetectorModelAnalysis: {
            http: {
                method: "GET",
                requestUri: "/analysis/detector-models/{analysisId}"
            },
            input: {
                type: "structure",
                required: [ "analysisId" ],
                members: {
                    analysisId: {
                        location: "uri",
                        locationName: "analysisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        DescribeInput: {
            http: {
                method: "GET",
                requestUri: "/inputs/{inputName}"
            },
            input: {
                type: "structure",
                required: [ "inputName" ],
                members: {
                    inputName: {
                        location: "uri",
                        locationName: "inputName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    input: {
                        type: "structure",
                        members: {
                            inputConfiguration: {
                                shape: "S3f"
                            },
                            inputDefinition: {
                                shape: "S3b"
                            }
                        }
                    }
                }
            }
        },
        DescribeLoggingOptions: {
            http: {
                method: "GET",
                requestUri: "/logging"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    loggingOptions: {
                        shape: "S43"
                    }
                }
            }
        },
        GetDetectorModelAnalysisResults: {
            http: {
                method: "GET",
                requestUri: "/analysis/detector-models/{analysisId}/results"
            },
            input: {
                type: "structure",
                required: [ "analysisId" ],
                members: {
                    analysisId: {
                        location: "uri",
                        locationName: "analysisId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    analysisResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                type: {},
                                level: {},
                                message: {},
                                locations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            path: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAlarmModelVersions: {
            http: {
                method: "GET",
                requestUri: "/alarm-models/{alarmModelName}/versions"
            },
            input: {
                type: "structure",
                required: [ "alarmModelName" ],
                members: {
                    alarmModelName: {
                        location: "uri",
                        locationName: "alarmModelName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    alarmModelVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                alarmModelName: {},
                                alarmModelArn: {},
                                alarmModelVersion: {},
                                roleArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                statusMessage: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAlarmModels: {
            http: {
                method: "GET",
                requestUri: "/alarm-models"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    alarmModelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                creationTime: {
                                    type: "timestamp"
                                },
                                alarmModelDescription: {},
                                alarmModelName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDetectorModelVersions: {
            http: {
                method: "GET",
                requestUri: "/detector-models/{detectorModelName}/versions"
            },
            input: {
                type: "structure",
                required: [ "detectorModelName" ],
                members: {
                    detectorModelName: {
                        location: "uri",
                        locationName: "detectorModelName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorModelVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                detectorModelName: {},
                                detectorModelVersion: {},
                                detectorModelArn: {},
                                roleArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                evaluationMethod: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDetectorModels: {
            http: {
                method: "GET",
                requestUri: "/detector-models"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorModelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                detectorModelName: {},
                                detectorModelDescription: {},
                                creationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListInputRoutings: {
            http: {
                requestUri: "/input-routings"
            },
            input: {
                type: "structure",
                required: [ "inputIdentifier" ],
                members: {
                    inputIdentifier: {
                        type: "structure",
                        members: {
                            iotEventsInputIdentifier: {
                                type: "structure",
                                required: [ "inputName" ],
                                members: {
                                    inputName: {}
                                }
                            },
                            iotSiteWiseInputIdentifier: {
                                type: "structure",
                                members: {
                                    iotSiteWiseAssetModelPropertyIdentifier: {
                                        type: "structure",
                                        required: [ "assetModelId", "propertyId" ],
                                        members: {
                                            assetModelId: {},
                                            propertyId: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    routedResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListInputs: {
            http: {
                method: "GET",
                requestUri: "/inputs"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    inputSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                inputName: {},
                                inputDescription: {},
                                inputArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S5"
                    }
                }
            }
        },
        PutLoggingOptions: {
            http: {
                method: "PUT",
                requestUri: "/logging"
            },
            input: {
                type: "structure",
                required: [ "loggingOptions" ],
                members: {
                    loggingOptions: {
                        shape: "S43"
                    }
                }
            }
        },
        StartDetectorModelAnalysis: {
            http: {
                requestUri: "/analysis/detector-models/"
            },
            input: {
                type: "structure",
                required: [ "detectorModelDefinition" ],
                members: {
                    detectorModelDefinition: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    analysisId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAlarmModel: {
            http: {
                requestUri: "/alarm-models/{alarmModelName}"
            },
            input: {
                type: "structure",
                required: [ "alarmModelName", "roleArn", "alarmRule" ],
                members: {
                    alarmModelName: {
                        location: "uri",
                        locationName: "alarmModelName"
                    },
                    alarmModelDescription: {},
                    roleArn: {},
                    severity: {
                        type: "integer"
                    },
                    alarmRule: {
                        shape: "Sb"
                    },
                    alarmNotification: {
                        shape: "Sg"
                    },
                    alarmEventActions: {
                        shape: "S13"
                    },
                    alarmCapabilities: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        type: "timestamp"
                    },
                    alarmModelArn: {},
                    alarmModelVersion: {},
                    lastUpdateTime: {
                        type: "timestamp"
                    },
                    status: {}
                }
            }
        },
        UpdateDetectorModel: {
            http: {
                requestUri: "/detector-models/{detectorModelName}"
            },
            input: {
                type: "structure",
                required: [ "detectorModelName", "detectorModelDefinition", "roleArn" ],
                members: {
                    detectorModelName: {
                        location: "uri",
                        locationName: "detectorModelName"
                    },
                    detectorModelDefinition: {
                        shape: "S2f"
                    },
                    detectorModelDescription: {},
                    roleArn: {},
                    evaluationMethod: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorModelConfiguration: {
                        shape: "S35"
                    }
                }
            }
        },
        UpdateInput: {
            http: {
                method: "PUT",
                requestUri: "/inputs/{inputName}"
            },
            input: {
                type: "structure",
                required: [ "inputName", "inputDefinition" ],
                members: {
                    inputName: {
                        location: "uri",
                        locationName: "inputName"
                    },
                    inputDescription: {},
                    inputDefinition: {
                        shape: "S3b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    inputConfiguration: {
                        shape: "S3f"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sb: {
            type: "structure",
            members: {
                simpleRule: {
                    type: "structure",
                    required: [ "inputProperty", "comparisonOperator", "threshold" ],
                    members: {
                        inputProperty: {},
                        comparisonOperator: {},
                        threshold: {}
                    }
                }
            }
        },
        Sg: {
            type: "structure",
            members: {
                notificationActions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "action" ],
                        members: {
                            action: {
                                type: "structure",
                                members: {
                                    lambdaAction: {
                                        shape: "Sk"
                                    }
                                }
                            },
                            smsConfigurations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "recipients" ],
                                    members: {
                                        senderId: {},
                                        additionalMessage: {},
                                        recipients: {
                                            shape: "Ss"
                                        }
                                    }
                                }
                            },
                            emailConfigurations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "from", "recipients" ],
                                    members: {
                                        from: {},
                                        content: {
                                            type: "structure",
                                            members: {
                                                subject: {},
                                                additionalMessage: {}
                                            }
                                        },
                                        recipients: {
                                            type: "structure",
                                            members: {
                                                to: {
                                                    shape: "Ss"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sk: {
            type: "structure",
            required: [ "functionArn" ],
            members: {
                functionArn: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        Sl: {
            type: "structure",
            required: [ "contentExpression", "type" ],
            members: {
                contentExpression: {},
                type: {}
            }
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ssoIdentity: {
                        type: "structure",
                        required: [ "identityStoreId" ],
                        members: {
                            identityStoreId: {},
                            userId: {}
                        }
                    }
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                alarmActions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            sns: {
                                shape: "S16"
                            },
                            iotTopicPublish: {
                                shape: "S17"
                            },
                            lambda: {
                                shape: "Sk"
                            },
                            iotEvents: {
                                shape: "S19"
                            },
                            sqs: {
                                shape: "S1b"
                            },
                            firehose: {
                                shape: "S1e"
                            },
                            dynamoDB: {
                                shape: "S1h"
                            },
                            dynamoDBv2: {
                                shape: "S1n"
                            },
                            iotSiteWise: {
                                shape: "S1o"
                            }
                        }
                    }
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "targetArn" ],
            members: {
                targetArn: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        S17: {
            type: "structure",
            required: [ "mqttTopic" ],
            members: {
                mqttTopic: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        S19: {
            type: "structure",
            required: [ "inputName" ],
            members: {
                inputName: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        S1b: {
            type: "structure",
            required: [ "queueUrl" ],
            members: {
                queueUrl: {},
                useBase64: {
                    type: "boolean"
                },
                payload: {
                    shape: "Sl"
                }
            }
        },
        S1e: {
            type: "structure",
            required: [ "deliveryStreamName" ],
            members: {
                deliveryStreamName: {},
                separator: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        S1h: {
            type: "structure",
            required: [ "hashKeyField", "hashKeyValue", "tableName" ],
            members: {
                hashKeyType: {},
                hashKeyField: {},
                hashKeyValue: {},
                rangeKeyType: {},
                rangeKeyField: {},
                rangeKeyValue: {},
                operation: {},
                payloadField: {},
                tableName: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        S1n: {
            type: "structure",
            required: [ "tableName" ],
            members: {
                tableName: {},
                payload: {
                    shape: "Sl"
                }
            }
        },
        S1o: {
            type: "structure",
            members: {
                entryId: {},
                assetId: {},
                propertyId: {},
                propertyAlias: {},
                propertyValue: {
                    type: "structure",
                    members: {
                        value: {
                            type: "structure",
                            members: {
                                stringValue: {},
                                integerValue: {},
                                doubleValue: {},
                                booleanValue: {}
                            }
                        },
                        timestamp: {
                            type: "structure",
                            required: [ "timeInSeconds" ],
                            members: {
                                timeInSeconds: {},
                                offsetInNanos: {}
                            }
                        },
                        quality: {}
                    }
                }
            }
        },
        S23: {
            type: "structure",
            members: {
                initializationConfiguration: {
                    type: "structure",
                    required: [ "disabledOnInitialization" ],
                    members: {
                        disabledOnInitialization: {
                            type: "boolean"
                        }
                    }
                },
                acknowledgeFlow: {
                    type: "structure",
                    required: [ "enabled" ],
                    members: {
                        enabled: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S2f: {
            type: "structure",
            required: [ "states", "initialStateName" ],
            members: {
                states: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "stateName" ],
                        members: {
                            stateName: {},
                            onInput: {
                                type: "structure",
                                members: {
                                    events: {
                                        shape: "S2k"
                                    },
                                    transitionEvents: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "eventName", "condition", "nextState" ],
                                            members: {
                                                eventName: {},
                                                condition: {},
                                                actions: {
                                                    shape: "S2o"
                                                },
                                                nextState: {}
                                            }
                                        }
                                    }
                                }
                            },
                            onEnter: {
                                type: "structure",
                                members: {
                                    events: {
                                        shape: "S2k"
                                    }
                                }
                            },
                            onExit: {
                                type: "structure",
                                members: {
                                    events: {
                                        shape: "S2k"
                                    }
                                }
                            }
                        }
                    }
                },
                initialStateName: {}
            }
        },
        S2k: {
            type: "list",
            member: {
                type: "structure",
                required: [ "eventName" ],
                members: {
                    eventName: {},
                    condition: {},
                    actions: {
                        shape: "S2o"
                    }
                }
            }
        },
        S2o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    setVariable: {
                        type: "structure",
                        required: [ "variableName", "value" ],
                        members: {
                            variableName: {},
                            value: {}
                        }
                    },
                    sns: {
                        shape: "S16"
                    },
                    iotTopicPublish: {
                        shape: "S17"
                    },
                    setTimer: {
                        type: "structure",
                        required: [ "timerName" ],
                        members: {
                            timerName: {},
                            seconds: {
                                deprecated: true,
                                deprecatedMessage: "seconds is deprecated. You can use durationExpression for SetTimerAction. The value of seconds can be used as a string expression for durationExpression.",
                                type: "integer"
                            },
                            durationExpression: {}
                        }
                    },
                    clearTimer: {
                        type: "structure",
                        required: [ "timerName" ],
                        members: {
                            timerName: {}
                        }
                    },
                    resetTimer: {
                        type: "structure",
                        required: [ "timerName" ],
                        members: {
                            timerName: {}
                        }
                    },
                    lambda: {
                        shape: "Sk"
                    },
                    iotEvents: {
                        shape: "S19"
                    },
                    sqs: {
                        shape: "S1b"
                    },
                    firehose: {
                        shape: "S1e"
                    },
                    dynamoDB: {
                        shape: "S1h"
                    },
                    dynamoDBv2: {
                        shape: "S1n"
                    },
                    iotSiteWise: {
                        shape: "S1o"
                    }
                }
            }
        },
        S35: {
            type: "structure",
            members: {
                detectorModelName: {},
                detectorModelVersion: {},
                detectorModelDescription: {},
                detectorModelArn: {},
                roleArn: {},
                creationTime: {
                    type: "timestamp"
                },
                lastUpdateTime: {
                    type: "timestamp"
                },
                status: {},
                key: {},
                evaluationMethod: {}
            }
        },
        S3b: {
            type: "structure",
            required: [ "attributes" ],
            members: {
                attributes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "jsonPath" ],
                        members: {
                            jsonPath: {}
                        }
                    }
                }
            }
        },
        S3f: {
            type: "structure",
            required: [ "inputName", "inputArn", "creationTime", "lastUpdateTime", "status" ],
            members: {
                inputName: {},
                inputDescription: {},
                inputArn: {},
                creationTime: {
                    type: "timestamp"
                },
                lastUpdateTime: {
                    type: "timestamp"
                },
                status: {}
            }
        },
        S43: {
            type: "structure",
            required: [ "roleArn", "level", "enabled" ],
            members: {
                roleArn: {},
                level: {},
                enabled: {
                    type: "boolean"
                },
                detectorDebugOptions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "detectorModelName" ],
                        members: {
                            detectorModelName: {},
                            keyValue: {}
                        }
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["ioteventsdata"] = {};

AWS.IoTEventsData = AWS.Service.defineService("ioteventsdata", [ "2018-10-23" ]);

AWS.apiLoader.services["ioteventsdata"]["2018-10-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-10-23",
        endpointPrefix: "data.iotevents",
        protocol: "rest-json",
        serviceFullName: "AWS IoT Events Data",
        serviceId: "IoT Events Data",
        signatureVersion: "v4",
        signingName: "ioteventsdata",
        uid: "iotevents-data-2018-10-23"
    },
    operations: {
        BatchAcknowledgeAlarm: {
            http: {
                requestUri: "/alarms/acknowledge",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "acknowledgeActionRequests" ],
                members: {
                    acknowledgeActionRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "requestId", "alarmModelName" ],
                            members: {
                                requestId: {},
                                alarmModelName: {},
                                keyValue: {},
                                note: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchDisableAlarm: {
            http: {
                requestUri: "/alarms/disable",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "disableActionRequests" ],
                members: {
                    disableActionRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "requestId", "alarmModelName" ],
                            members: {
                                requestId: {},
                                alarmModelName: {},
                                keyValue: {},
                                note: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchEnableAlarm: {
            http: {
                requestUri: "/alarms/enable",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "enableActionRequests" ],
                members: {
                    enableActionRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "requestId", "alarmModelName" ],
                            members: {
                                requestId: {},
                                alarmModelName: {},
                                keyValue: {},
                                note: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchPutMessage: {
            http: {
                requestUri: "/inputs/messages",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "messages" ],
                members: {
                    messages: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "messageId", "inputName", "payload" ],
                            members: {
                                messageId: {},
                                inputName: {},
                                payload: {
                                    type: "blob"
                                },
                                timestamp: {
                                    type: "structure",
                                    members: {
                                        timeInMillis: {
                                            type: "long"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BatchPutMessageErrorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                messageId: {},
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchResetAlarm: {
            http: {
                requestUri: "/alarms/reset",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "resetActionRequests" ],
                members: {
                    resetActionRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "requestId", "alarmModelName" ],
                            members: {
                                requestId: {},
                                alarmModelName: {},
                                keyValue: {},
                                note: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchSnoozeAlarm: {
            http: {
                requestUri: "/alarms/snooze",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "snoozeActionRequests" ],
                members: {
                    snoozeActionRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "requestId", "alarmModelName", "snoozeDuration" ],
                            members: {
                                requestId: {},
                                alarmModelName: {},
                                keyValue: {},
                                note: {},
                                snoozeDuration: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errorEntries: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchUpdateDetector: {
            http: {
                requestUri: "/detectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "detectors" ],
                members: {
                    detectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "messageId", "detectorModelName", "state" ],
                            members: {
                                messageId: {},
                                detectorModelName: {},
                                keyValue: {},
                                state: {
                                    type: "structure",
                                    required: [ "stateName", "variables", "timers" ],
                                    members: {
                                        stateName: {},
                                        variables: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "name", "value" ],
                                                members: {
                                                    name: {},
                                                    value: {}
                                                }
                                            }
                                        },
                                        timers: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "name", "seconds" ],
                                                members: {
                                                    name: {},
                                                    seconds: {
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    batchUpdateDetectorErrorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                messageId: {},
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeAlarm: {
            http: {
                method: "GET",
                requestUri: "/alarms/{alarmModelName}/keyValues/"
            },
            input: {
                type: "structure",
                required: [ "alarmModelName" ],
                members: {
                    alarmModelName: {
                        location: "uri",
                        locationName: "alarmModelName"
                    },
                    keyValue: {
                        location: "querystring",
                        locationName: "keyValue"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    alarm: {
                        type: "structure",
                        members: {
                            alarmModelName: {},
                            alarmModelVersion: {},
                            keyValue: {},
                            alarmState: {
                                type: "structure",
                                members: {
                                    stateName: {},
                                    ruleEvaluation: {
                                        type: "structure",
                                        members: {
                                            simpleRuleEvaluation: {
                                                type: "structure",
                                                members: {
                                                    inputPropertyValue: {},
                                                    operator: {},
                                                    thresholdValue: {}
                                                }
                                            }
                                        }
                                    },
                                    customerAction: {
                                        type: "structure",
                                        members: {
                                            actionName: {},
                                            snoozeActionConfiguration: {
                                                type: "structure",
                                                members: {
                                                    snoozeDuration: {
                                                        type: "integer"
                                                    },
                                                    note: {}
                                                }
                                            },
                                            enableActionConfiguration: {
                                                type: "structure",
                                                members: {
                                                    note: {}
                                                }
                                            },
                                            disableActionConfiguration: {
                                                type: "structure",
                                                members: {
                                                    note: {}
                                                }
                                            },
                                            acknowledgeActionConfiguration: {
                                                type: "structure",
                                                members: {
                                                    note: {}
                                                }
                                            },
                                            resetActionConfiguration: {
                                                type: "structure",
                                                members: {
                                                    note: {}
                                                }
                                            }
                                        }
                                    },
                                    systemEvent: {
                                        type: "structure",
                                        members: {
                                            eventType: {},
                                            stateChangeConfiguration: {
                                                type: "structure",
                                                members: {
                                                    triggerType: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            severity: {
                                type: "integer"
                            },
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeDetector: {
            http: {
                method: "GET",
                requestUri: "/detectors/{detectorModelName}/keyValues/"
            },
            input: {
                type: "structure",
                required: [ "detectorModelName" ],
                members: {
                    detectorModelName: {
                        location: "uri",
                        locationName: "detectorModelName"
                    },
                    keyValue: {
                        location: "querystring",
                        locationName: "keyValue"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detector: {
                        type: "structure",
                        members: {
                            detectorModelName: {},
                            keyValue: {},
                            detectorModelVersion: {},
                            state: {
                                type: "structure",
                                required: [ "stateName", "variables", "timers" ],
                                members: {
                                    stateName: {},
                                    variables: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "name", "value" ],
                                            members: {
                                                name: {},
                                                value: {}
                                            }
                                        }
                                    },
                                    timers: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "name", "timestamp" ],
                                            members: {
                                                name: {},
                                                timestamp: {
                                                    type: "timestamp"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        ListAlarms: {
            http: {
                method: "GET",
                requestUri: "/alarms/{alarmModelName}"
            },
            input: {
                type: "structure",
                required: [ "alarmModelName" ],
                members: {
                    alarmModelName: {
                        location: "uri",
                        locationName: "alarmModelName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    alarmSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                alarmModelName: {},
                                alarmModelVersion: {},
                                keyValue: {},
                                stateName: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDetectors: {
            http: {
                method: "GET",
                requestUri: "/detectors/{detectorModelName}"
            },
            input: {
                type: "structure",
                required: [ "detectorModelName" ],
                members: {
                    detectorModelName: {
                        location: "uri",
                        locationName: "detectorModelName"
                    },
                    stateName: {
                        location: "querystring",
                        locationName: "stateName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                detectorModelName: {},
                                keyValue: {},
                                detectorModelVersion: {},
                                state: {
                                    type: "structure",
                                    members: {
                                        stateName: {}
                                    }
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    requestId: {},
                    errorCode: {},
                    errorMessage: {}
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["personalize"] = {};

AWS.Personalize = AWS.Service.defineService("personalize", [ "2018-05-22" ]);

AWS.apiLoader.services["personalize"]["2018-05-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-22",
        endpointPrefix: "personalize",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Personalize",
        serviceId: "Personalize",
        signatureVersion: "v4",
        signingName: "personalize",
        targetPrefix: "AmazonPersonalize",
        uid: "personalize-2018-05-22"
    },
    operations: {
        CreateBatchInferenceJob: {
            input: {
                type: "structure",
                required: [ "jobName", "solutionVersionArn", "jobInput", "jobOutput", "roleArn" ],
                members: {
                    jobName: {},
                    solutionVersionArn: {},
                    filterArn: {},
                    numResults: {
                        type: "integer"
                    },
                    jobInput: {
                        shape: "S5"
                    },
                    jobOutput: {
                        shape: "S9"
                    },
                    roleArn: {},
                    batchInferenceJobConfig: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    batchInferenceJobArn: {}
                }
            }
        },
        CreateCampaign: {
            input: {
                type: "structure",
                required: [ "name", "solutionVersionArn" ],
                members: {
                    name: {},
                    solutionVersionArn: {},
                    minProvisionedTPS: {
                        type: "integer"
                    },
                    campaignConfig: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    campaignArn: {}
                }
            },
            idempotent: true
        },
        CreateDataset: {
            input: {
                type: "structure",
                required: [ "name", "schemaArn", "datasetGroupArn", "datasetType" ],
                members: {
                    name: {},
                    schemaArn: {},
                    datasetGroupArn: {},
                    datasetType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetArn: {}
                }
            },
            idempotent: true
        },
        CreateDatasetExportJob: {
            input: {
                type: "structure",
                required: [ "jobName", "datasetArn", "roleArn", "jobOutput" ],
                members: {
                    jobName: {},
                    datasetArn: {},
                    ingestionMode: {},
                    roleArn: {},
                    jobOutput: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetExportJobArn: {}
                }
            },
            idempotent: true
        },
        CreateDatasetGroup: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    roleArn: {},
                    kmsKeyArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetGroupArn: {}
                }
            }
        },
        CreateDatasetImportJob: {
            input: {
                type: "structure",
                required: [ "jobName", "datasetArn", "dataSource", "roleArn" ],
                members: {
                    jobName: {},
                    datasetArn: {},
                    dataSource: {
                        shape: "Su"
                    },
                    roleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetImportJobArn: {}
                }
            }
        },
        CreateEventTracker: {
            input: {
                type: "structure",
                required: [ "name", "datasetGroupArn" ],
                members: {
                    name: {},
                    datasetGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    eventTrackerArn: {},
                    trackingId: {}
                }
            },
            idempotent: true
        },
        CreateFilter: {
            input: {
                type: "structure",
                required: [ "name", "datasetGroupArn", "filterExpression" ],
                members: {
                    name: {},
                    datasetGroupArn: {},
                    filterExpression: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    filterArn: {}
                }
            }
        },
        CreateSchema: {
            input: {
                type: "structure",
                required: [ "name", "schema" ],
                members: {
                    name: {},
                    schema: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    schemaArn: {}
                }
            },
            idempotent: true
        },
        CreateSolution: {
            input: {
                type: "structure",
                required: [ "name", "datasetGroupArn" ],
                members: {
                    name: {},
                    performHPO: {
                        type: "boolean"
                    },
                    performAutoML: {
                        type: "boolean"
                    },
                    recipeArn: {},
                    datasetGroupArn: {},
                    eventType: {},
                    solutionConfig: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    solutionArn: {}
                }
            }
        },
        CreateSolutionVersion: {
            input: {
                type: "structure",
                required: [ "solutionArn" ],
                members: {
                    solutionArn: {},
                    trainingMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    solutionVersionArn: {}
                }
            }
        },
        DeleteCampaign: {
            input: {
                type: "structure",
                required: [ "campaignArn" ],
                members: {
                    campaignArn: {}
                }
            },
            idempotent: true
        },
        DeleteDataset: {
            input: {
                type: "structure",
                required: [ "datasetArn" ],
                members: {
                    datasetArn: {}
                }
            },
            idempotent: true
        },
        DeleteDatasetGroup: {
            input: {
                type: "structure",
                required: [ "datasetGroupArn" ],
                members: {
                    datasetGroupArn: {}
                }
            },
            idempotent: true
        },
        DeleteEventTracker: {
            input: {
                type: "structure",
                required: [ "eventTrackerArn" ],
                members: {
                    eventTrackerArn: {}
                }
            },
            idempotent: true
        },
        DeleteFilter: {
            input: {
                type: "structure",
                required: [ "filterArn" ],
                members: {
                    filterArn: {}
                }
            }
        },
        DeleteSchema: {
            input: {
                type: "structure",
                required: [ "schemaArn" ],
                members: {
                    schemaArn: {}
                }
            },
            idempotent: true
        },
        DeleteSolution: {
            input: {
                type: "structure",
                required: [ "solutionArn" ],
                members: {
                    solutionArn: {}
                }
            },
            idempotent: true
        },
        DescribeAlgorithm: {
            input: {
                type: "structure",
                required: [ "algorithmArn" ],
                members: {
                    algorithmArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    algorithm: {
                        type: "structure",
                        members: {
                            name: {},
                            algorithmArn: {},
                            algorithmImage: {
                                type: "structure",
                                required: [ "dockerURI" ],
                                members: {
                                    name: {},
                                    dockerURI: {}
                                }
                            },
                            defaultHyperParameters: {
                                shape: "Sc"
                            },
                            defaultHyperParameterRanges: {
                                type: "structure",
                                members: {
                                    integerHyperParameterRanges: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                name: {},
                                                minValue: {
                                                    type: "integer"
                                                },
                                                maxValue: {
                                                    type: "integer"
                                                },
                                                isTunable: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    },
                                    continuousHyperParameterRanges: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                name: {},
                                                minValue: {
                                                    type: "double"
                                                },
                                                maxValue: {
                                                    type: "double"
                                                },
                                                isTunable: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    },
                                    categoricalHyperParameterRanges: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                name: {},
                                                values: {
                                                    shape: "S1t"
                                                },
                                                isTunable: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            defaultResourceConfig: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            trainingInputMode: {},
                            roleArn: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeBatchInferenceJob: {
            input: {
                type: "structure",
                required: [ "batchInferenceJobArn" ],
                members: {
                    batchInferenceJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    batchInferenceJob: {
                        type: "structure",
                        members: {
                            jobName: {},
                            batchInferenceJobArn: {},
                            filterArn: {},
                            failureReason: {},
                            solutionVersionArn: {},
                            numResults: {
                                type: "integer"
                            },
                            jobInput: {
                                shape: "S5"
                            },
                            jobOutput: {
                                shape: "S9"
                            },
                            batchInferenceJobConfig: {
                                shape: "Sb"
                            },
                            roleArn: {},
                            status: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeCampaign: {
            input: {
                type: "structure",
                required: [ "campaignArn" ],
                members: {
                    campaignArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    campaign: {
                        type: "structure",
                        members: {
                            name: {},
                            campaignArn: {},
                            solutionVersionArn: {},
                            minProvisionedTPS: {
                                type: "integer"
                            },
                            campaignConfig: {
                                shape: "Si"
                            },
                            status: {},
                            failureReason: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            latestCampaignUpdate: {
                                type: "structure",
                                members: {
                                    solutionVersionArn: {},
                                    minProvisionedTPS: {
                                        type: "integer"
                                    },
                                    campaignConfig: {
                                        shape: "Si"
                                    },
                                    status: {},
                                    failureReason: {},
                                    creationDateTime: {
                                        type: "timestamp"
                                    },
                                    lastUpdatedDateTime: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeDataset: {
            input: {
                type: "structure",
                required: [ "datasetArn" ],
                members: {
                    datasetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    dataset: {
                        type: "structure",
                        members: {
                            name: {},
                            datasetArn: {},
                            datasetGroupArn: {},
                            datasetType: {},
                            schemaArn: {},
                            status: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeDatasetExportJob: {
            input: {
                type: "structure",
                required: [ "datasetExportJobArn" ],
                members: {
                    datasetExportJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetExportJob: {
                        type: "structure",
                        members: {
                            jobName: {},
                            datasetExportJobArn: {},
                            datasetArn: {},
                            ingestionMode: {},
                            roleArn: {},
                            status: {},
                            jobOutput: {
                                shape: "Sp"
                            },
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            failureReason: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeDatasetGroup: {
            input: {
                type: "structure",
                required: [ "datasetGroupArn" ],
                members: {
                    datasetGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetGroup: {
                        type: "structure",
                        members: {
                            name: {},
                            datasetGroupArn: {},
                            status: {},
                            roleArn: {},
                            kmsKeyArn: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            failureReason: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeDatasetImportJob: {
            input: {
                type: "structure",
                required: [ "datasetImportJobArn" ],
                members: {
                    datasetImportJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetImportJob: {
                        type: "structure",
                        members: {
                            jobName: {},
                            datasetImportJobArn: {},
                            datasetArn: {},
                            dataSource: {
                                shape: "Su"
                            },
                            roleArn: {},
                            status: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            failureReason: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeEventTracker: {
            input: {
                type: "structure",
                required: [ "eventTrackerArn" ],
                members: {
                    eventTrackerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    eventTracker: {
                        type: "structure",
                        members: {
                            name: {},
                            eventTrackerArn: {},
                            accountId: {},
                            trackingId: {},
                            datasetGroupArn: {},
                            status: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeFeatureTransformation: {
            input: {
                type: "structure",
                required: [ "featureTransformationArn" ],
                members: {
                    featureTransformationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    featureTransformation: {
                        type: "structure",
                        members: {
                            name: {},
                            featureTransformationArn: {},
                            defaultParameters: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            status: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeFilter: {
            input: {
                type: "structure",
                required: [ "filterArn" ],
                members: {
                    filterArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    filter: {
                        type: "structure",
                        members: {
                            name: {},
                            filterArn: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            datasetGroupArn: {},
                            failureReason: {},
                            filterExpression: {
                                shape: "S10"
                            },
                            status: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeRecipe: {
            input: {
                type: "structure",
                required: [ "recipeArn" ],
                members: {
                    recipeArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    recipe: {
                        type: "structure",
                        members: {
                            name: {},
                            recipeArn: {},
                            algorithmArn: {},
                            featureTransformationArn: {},
                            status: {},
                            description: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            recipeType: {},
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeSchema: {
            input: {
                type: "structure",
                required: [ "schemaArn" ],
                members: {
                    schemaArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    schema: {
                        type: "structure",
                        members: {
                            name: {},
                            schemaArn: {},
                            schema: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeSolution: {
            input: {
                type: "structure",
                required: [ "solutionArn" ],
                members: {
                    solutionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    solution: {
                        type: "structure",
                        members: {
                            name: {},
                            solutionArn: {},
                            performHPO: {
                                type: "boolean"
                            },
                            performAutoML: {
                                type: "boolean"
                            },
                            recipeArn: {},
                            datasetGroupArn: {},
                            eventType: {},
                            solutionConfig: {
                                shape: "S19"
                            },
                            autoMLResult: {
                                type: "structure",
                                members: {
                                    bestRecipeArn: {}
                                }
                            },
                            status: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            },
                            latestSolutionVersion: {
                                shape: "S41"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeSolutionVersion: {
            input: {
                type: "structure",
                required: [ "solutionVersionArn" ],
                members: {
                    solutionVersionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    solutionVersion: {
                        type: "structure",
                        members: {
                            solutionVersionArn: {},
                            solutionArn: {},
                            performHPO: {
                                type: "boolean"
                            },
                            performAutoML: {
                                type: "boolean"
                            },
                            recipeArn: {},
                            eventType: {},
                            datasetGroupArn: {},
                            solutionConfig: {
                                shape: "S19"
                            },
                            trainingHours: {
                                type: "double"
                            },
                            trainingMode: {},
                            tunedHPOParams: {
                                type: "structure",
                                members: {
                                    algorithmHyperParameters: {
                                        shape: "Sc"
                                    }
                                }
                            },
                            status: {},
                            failureReason: {},
                            creationDateTime: {
                                type: "timestamp"
                            },
                            lastUpdatedDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        GetSolutionMetrics: {
            input: {
                type: "structure",
                required: [ "solutionVersionArn" ],
                members: {
                    solutionVersionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    solutionVersionArn: {},
                    metrics: {
                        type: "map",
                        key: {},
                        value: {
                            type: "double"
                        }
                    }
                }
            }
        },
        ListBatchInferenceJobs: {
            input: {
                type: "structure",
                members: {
                    solutionVersionArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    batchInferenceJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                batchInferenceJobArn: {},
                                jobName: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                failureReason: {},
                                solutionVersionArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListCampaigns: {
            input: {
                type: "structure",
                members: {
                    solutionArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    campaigns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                campaignArn: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                failureReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListDatasetExportJobs: {
            input: {
                type: "structure",
                members: {
                    datasetArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetExportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                datasetExportJobArn: {},
                                jobName: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                failureReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListDatasetGroups: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                datasetGroupArn: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                failureReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListDatasetImportJobs: {
            input: {
                type: "structure",
                members: {
                    datasetArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetImportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                datasetImportJobArn: {},
                                jobName: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                failureReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListDatasets: {
            input: {
                type: "structure",
                members: {
                    datasetGroupArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                datasetArn: {},
                                datasetType: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListEventTrackers: {
            input: {
                type: "structure",
                members: {
                    datasetGroupArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eventTrackers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                eventTrackerArn: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListFilters: {
            input: {
                type: "structure",
                members: {
                    datasetGroupArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                filterArn: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                datasetGroupArn: {},
                                failureReason: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListRecipes: {
            input: {
                type: "structure",
                members: {
                    recipeProvider: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recipes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                recipeArn: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListSchemas: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    schemas: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                schemaArn: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListSolutionVersions: {
            input: {
                type: "structure",
                members: {
                    solutionArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    solutionVersions: {
                        type: "list",
                        member: {
                            shape: "S41"
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        ListSolutions: {
            input: {
                type: "structure",
                members: {
                    datasetGroupArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    solutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                solutionArn: {},
                                status: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        StopSolutionVersionCreation: {
            input: {
                type: "structure",
                required: [ "solutionVersionArn" ],
                members: {
                    solutionVersionArn: {}
                }
            },
            idempotent: true
        },
        UpdateCampaign: {
            input: {
                type: "structure",
                required: [ "campaignArn" ],
                members: {
                    campaignArn: {},
                    solutionVersionArn: {},
                    minProvisionedTPS: {
                        type: "integer"
                    },
                    campaignConfig: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    campaignArn: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "s3DataSource" ],
            members: {
                s3DataSource: {
                    shape: "S6"
                }
            }
        },
        S6: {
            type: "structure",
            required: [ "path" ],
            members: {
                path: {},
                kmsKeyArn: {}
            }
        },
        S9: {
            type: "structure",
            required: [ "s3DataDestination" ],
            members: {
                s3DataDestination: {
                    shape: "S6"
                }
            }
        },
        Sb: {
            type: "structure",
            members: {
                itemExplorationConfig: {
                    shape: "Sc"
                }
            }
        },
        Sc: {
            type: "map",
            key: {},
            value: {}
        },
        Si: {
            type: "structure",
            members: {
                itemExplorationConfig: {
                    shape: "Sc"
                }
            }
        },
        Sp: {
            type: "structure",
            required: [ "s3DataDestination" ],
            members: {
                s3DataDestination: {
                    shape: "S6"
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                dataLocation: {}
            }
        },
        S10: {
            type: "string",
            sensitive: true
        },
        S19: {
            type: "structure",
            members: {
                eventValueThreshold: {},
                hpoConfig: {
                    type: "structure",
                    members: {
                        hpoObjective: {
                            type: "structure",
                            members: {
                                type: {},
                                metricName: {},
                                metricRegex: {}
                            }
                        },
                        hpoResourceConfig: {
                            type: "structure",
                            members: {
                                maxNumberOfTrainingJobs: {},
                                maxParallelTrainingJobs: {}
                            }
                        },
                        algorithmHyperParameterRanges: {
                            type: "structure",
                            members: {
                                integerHyperParameterRanges: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            minValue: {
                                                type: "integer"
                                            },
                                            maxValue: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                continuousHyperParameterRanges: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            minValue: {
                                                type: "double"
                                            },
                                            maxValue: {
                                                type: "double"
                                            }
                                        }
                                    }
                                },
                                categoricalHyperParameterRanges: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            values: {
                                                shape: "S1t"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                algorithmHyperParameters: {
                    shape: "Sc"
                },
                featureTransformationParameters: {
                    type: "map",
                    key: {},
                    value: {}
                },
                autoMLConfig: {
                    type: "structure",
                    members: {
                        metricName: {},
                        recipeList: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                optimizationObjective: {
                    type: "structure",
                    members: {
                        itemAttribute: {},
                        objectiveSensitivity: {}
                    }
                }
            }
        },
        S1t: {
            type: "list",
            member: {}
        },
        S41: {
            type: "structure",
            members: {
                solutionVersionArn: {},
                status: {},
                creationDateTime: {
                    type: "timestamp"
                },
                lastUpdatedDateTime: {
                    type: "timestamp"
                },
                failureReason: {}
            }
        }
    },
    paginators: {
        ListBatchInferenceJobs: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "batchInferenceJobs"
        },
        ListCampaigns: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "campaigns"
        },
        ListDatasetExportJobs: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "datasetExportJobs"
        },
        ListDatasetGroups: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "datasetGroups"
        },
        ListDatasetImportJobs: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "datasetImportJobs"
        },
        ListDatasets: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "datasets"
        },
        ListEventTrackers: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "eventTrackers"
        },
        ListFilters: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "Filters"
        },
        ListRecipes: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "recipes"
        },
        ListSchemas: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "schemas"
        },
        ListSolutionVersions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "solutionVersions"
        },
        ListSolutions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "solutions"
        }
    }
};

AWS.apiLoader.services["personalizeevents"] = {};

AWS.PersonalizeEvents = AWS.Service.defineService("personalizeevents", [ "2018-03-22" ]);

AWS.apiLoader.services["personalizeevents"]["2018-03-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-03-22",
        endpointPrefix: "personalize-events",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Personalize Events",
        serviceId: "Personalize Events",
        signatureVersion: "v4",
        signingName: "personalize",
        uid: "personalize-events-2018-03-22"
    },
    operations: {
        PutEvents: {
            http: {
                requestUri: "/events"
            },
            input: {
                type: "structure",
                required: [ "trackingId", "sessionId", "eventList" ],
                members: {
                    trackingId: {},
                    userId: {},
                    sessionId: {},
                    eventList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "eventType", "sentAt" ],
                            members: {
                                eventId: {},
                                eventType: {},
                                eventValue: {
                                    type: "float"
                                },
                                itemId: {},
                                properties: {
                                    jsonvalue: true
                                },
                                sentAt: {
                                    type: "timestamp"
                                },
                                recommendationId: {},
                                impression: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        PutItems: {
            http: {
                requestUri: "/items"
            },
            input: {
                type: "structure",
                required: [ "datasetArn", "items" ],
                members: {
                    datasetArn: {},
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "itemId" ],
                            members: {
                                itemId: {},
                                properties: {
                                    jsonvalue: true
                                }
                            }
                        }
                    }
                }
            }
        },
        PutUsers: {
            http: {
                requestUri: "/users"
            },
            input: {
                type: "structure",
                required: [ "datasetArn", "users" ],
                members: {
                    datasetArn: {},
                    users: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "userId" ],
                            members: {
                                userId: {},
                                properties: {
                                    jsonvalue: true
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["personalizeruntime"] = {};

AWS.PersonalizeRuntime = AWS.Service.defineService("personalizeruntime", [ "2018-05-22" ]);

AWS.apiLoader.services["personalizeruntime"]["2018-05-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-22",
        endpointPrefix: "personalize-runtime",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Personalize Runtime",
        serviceId: "Personalize Runtime",
        signatureVersion: "v4",
        signingName: "personalize",
        uid: "personalize-runtime-2018-05-22"
    },
    operations: {
        GetPersonalizedRanking: {
            http: {
                requestUri: "/personalize-ranking"
            },
            input: {
                type: "structure",
                required: [ "campaignArn", "inputList", "userId" ],
                members: {
                    campaignArn: {},
                    inputList: {
                        type: "list",
                        member: {}
                    },
                    userId: {},
                    context: {
                        shape: "S6"
                    },
                    filterArn: {},
                    filterValues: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    personalizedRanking: {
                        shape: "Sd"
                    },
                    recommendationId: {}
                }
            },
            idempotent: true
        },
        GetRecommendations: {
            http: {
                requestUri: "/recommendations"
            },
            input: {
                type: "structure",
                required: [ "campaignArn" ],
                members: {
                    campaignArn: {},
                    itemId: {},
                    userId: {},
                    numResults: {
                        type: "integer"
                    },
                    context: {
                        shape: "S6"
                    },
                    filterArn: {},
                    filterValues: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    itemList: {
                        shape: "Sd"
                    },
                    recommendationId: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {
                type: "string",
                sensitive: true
            }
        },
        S9: {
            type: "map",
            key: {},
            value: {
                type: "string",
                sensitive: true
            }
        },
        Sd: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    itemId: {},
                    score: {
                        type: "double"
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["applicationinsights"] = {};

AWS.ApplicationInsights = AWS.Service.defineService("applicationinsights", [ "2018-11-25" ]);

AWS.apiLoader.services["applicationinsights"]["2018-11-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-11-25",
        endpointPrefix: "applicationinsights",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Application Insights",
        serviceFullName: "Amazon CloudWatch Application Insights",
        serviceId: "Application Insights",
        signatureVersion: "v4",
        signingName: "applicationinsights",
        targetPrefix: "EC2WindowsBarleyService",
        uid: "application-insights-2018-11-25"
    },
    operations: {
        CreateApplication: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName" ],
                members: {
                    ResourceGroupName: {},
                    OpsCenterEnabled: {
                        type: "boolean"
                    },
                    CWEMonitorEnabled: {
                        type: "boolean"
                    },
                    OpsItemSNSTopicArn: {},
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInfo: {
                        shape: "Sb"
                    }
                }
            }
        },
        CreateComponent: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName", "ResourceList" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    ResourceList: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateLogPattern: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "PatternSetName", "PatternName", "Pattern", "Rank" ],
                members: {
                    ResourceGroupName: {},
                    PatternSetName: {},
                    PatternName: {},
                    Pattern: {},
                    Rank: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LogPattern: {
                        shape: "Sp"
                    },
                    ResourceGroupName: {}
                }
            }
        },
        DeleteApplication: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName" ],
                members: {
                    ResourceGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteComponent: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLogPattern: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "PatternSetName", "PatternName" ],
                members: {
                    ResourceGroupName: {},
                    PatternSetName: {},
                    PatternName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeApplication: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName" ],
                members: {
                    ResourceGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInfo: {
                        shape: "Sb"
                    }
                }
            }
        },
        DescribeComponent: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationComponent: {
                        shape: "S11"
                    },
                    ResourceList: {
                        shape: "Sg"
                    }
                }
            }
        },
        DescribeComponentConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Monitor: {
                        type: "boolean"
                    },
                    Tier: {},
                    ComponentConfiguration: {}
                }
            }
        },
        DescribeComponentConfigurationRecommendation: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName", "Tier" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    Tier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComponentConfiguration: {}
                }
            }
        },
        DescribeLogPattern: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "PatternSetName", "PatternName" ],
                members: {
                    ResourceGroupName: {},
                    PatternSetName: {},
                    PatternName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceGroupName: {},
                    LogPattern: {
                        shape: "Sp"
                    }
                }
            }
        },
        DescribeObservation: {
            input: {
                type: "structure",
                required: [ "ObservationId" ],
                members: {
                    ObservationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Observation: {
                        shape: "S1k"
                    }
                }
            }
        },
        DescribeProblem: {
            input: {
                type: "structure",
                required: [ "ProblemId" ],
                members: {
                    ProblemId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Problem: {
                        shape: "S2w"
                    }
                }
            }
        },
        DescribeProblemObservations: {
            input: {
                type: "structure",
                required: [ "ProblemId" ],
                members: {
                    ProblemId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RelatedObservations: {
                        type: "structure",
                        members: {
                            ObservationList: {
                                type: "list",
                                member: {
                                    shape: "S1k"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListApplications: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInfoList: {
                        type: "list",
                        member: {
                            shape: "Sb"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListComponents: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName" ],
                members: {
                    ResourceGroupName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationComponentList: {
                        type: "list",
                        member: {
                            shape: "S11"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConfigurationHistory: {
            input: {
                type: "structure",
                members: {
                    ResourceGroupName: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    EventStatus: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MonitoredResourceARN: {},
                                EventStatus: {},
                                EventResourceType: {},
                                EventTime: {
                                    type: "timestamp"
                                },
                                EventDetail: {},
                                EventResourceName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLogPatternSets: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName" ],
                members: {
                    ResourceGroupName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceGroupName: {},
                    LogPatternSets: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListLogPatterns: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName" ],
                members: {
                    ResourceGroupName: {},
                    PatternSetName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceGroupName: {},
                    LogPatterns: {
                        type: "list",
                        member: {
                            shape: "Sp"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProblems: {
            input: {
                type: "structure",
                members: {
                    ResourceGroupName: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProblemList: {
                        type: "list",
                        member: {
                            shape: "S2w"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName" ],
                members: {
                    ResourceGroupName: {},
                    OpsCenterEnabled: {
                        type: "boolean"
                    },
                    CWEMonitorEnabled: {
                        type: "boolean"
                    },
                    OpsItemSNSTopicArn: {},
                    RemoveSNSTopic: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInfo: {
                        shape: "Sb"
                    }
                }
            }
        },
        UpdateComponent: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    NewComponentName: {},
                    ResourceList: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateComponentConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "ComponentName" ],
                members: {
                    ResourceGroupName: {},
                    ComponentName: {},
                    Monitor: {
                        type: "boolean"
                    },
                    Tier: {},
                    ComponentConfiguration: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLogPattern: {
            input: {
                type: "structure",
                required: [ "ResourceGroupName", "PatternSetName", "PatternName" ],
                members: {
                    ResourceGroupName: {},
                    PatternSetName: {},
                    PatternName: {},
                    Pattern: {},
                    Rank: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceGroupName: {},
                    LogPattern: {
                        shape: "Sp"
                    }
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sb: {
            type: "structure",
            members: {
                ResourceGroupName: {},
                LifeCycle: {},
                OpsItemSNSTopicArn: {},
                OpsCenterEnabled: {
                    type: "boolean"
                },
                CWEMonitorEnabled: {
                    type: "boolean"
                },
                Remarks: {}
            }
        },
        Sg: {
            type: "list",
            member: {}
        },
        Sp: {
            type: "structure",
            members: {
                PatternSetName: {},
                PatternName: {},
                Pattern: {},
                Rank: {
                    type: "integer"
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                ComponentName: {},
                ComponentRemarks: {},
                ResourceType: {},
                OsType: {},
                Tier: {},
                Monitor: {
                    type: "boolean"
                },
                DetectedWorkload: {
                    type: "map",
                    key: {},
                    value: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S1k: {
            type: "structure",
            members: {
                Id: {},
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                SourceType: {},
                SourceARN: {},
                LogGroup: {},
                LineTime: {
                    type: "timestamp"
                },
                LogText: {},
                LogFilter: {},
                MetricNamespace: {},
                MetricName: {},
                Unit: {},
                Value: {
                    type: "double"
                },
                CloudWatchEventId: {},
                CloudWatchEventSource: {},
                CloudWatchEventDetailType: {},
                HealthEventArn: {},
                HealthService: {},
                HealthEventTypeCode: {},
                HealthEventTypeCategory: {},
                HealthEventDescription: {},
                CodeDeployDeploymentId: {},
                CodeDeployDeploymentGroup: {},
                CodeDeployState: {},
                CodeDeployApplication: {},
                CodeDeployInstanceGroupId: {},
                Ec2State: {},
                RdsEventCategories: {},
                RdsEventMessage: {},
                S3EventName: {},
                StatesExecutionArn: {},
                StatesArn: {},
                StatesStatus: {},
                StatesInput: {},
                EbsEvent: {},
                EbsResult: {},
                EbsCause: {},
                EbsRequestId: {},
                XRayFaultPercent: {
                    type: "integer"
                },
                XRayThrottlePercent: {
                    type: "integer"
                },
                XRayErrorPercent: {
                    type: "integer"
                },
                XRayRequestCount: {
                    type: "integer"
                },
                XRayRequestAverageLatency: {
                    type: "long"
                },
                XRayNodeName: {},
                XRayNodeType: {}
            }
        },
        S2w: {
            type: "structure",
            members: {
                Id: {},
                Title: {},
                Insights: {},
                Status: {},
                AffectedResource: {},
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                SeverityLevel: {},
                ResourceGroupName: {},
                Feedback: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        }
    },
    paginators: {
        ListApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListComponents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListConfigurationHistory: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLogPatternSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLogPatterns: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListProblems: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["servicequotas"] = {};

AWS.ServiceQuotas = AWS.Service.defineService("servicequotas", [ "2019-06-24" ]);

AWS.apiLoader.services["servicequotas"]["2019-06-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-06-24",
        endpointPrefix: "servicequotas",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Service Quotas",
        serviceId: "Service Quotas",
        signatureVersion: "v4",
        targetPrefix: "ServiceQuotasV20190624",
        uid: "service-quotas-2019-06-24"
    },
    operations: {
        AssociateServiceQuotaTemplate: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteServiceQuotaIncreaseRequestFromTemplate: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "QuotaCode", "AwsRegion" ],
                members: {
                    ServiceCode: {},
                    QuotaCode: {},
                    AwsRegion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateServiceQuotaTemplate: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAWSDefaultServiceQuota: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "QuotaCode" ],
                members: {
                    ServiceCode: {},
                    QuotaCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Quota: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetAssociationForServiceQuotaTemplate: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ServiceQuotaTemplateAssociationStatus: {}
                }
            }
        },
        GetRequestedServiceQuotaChange: {
            input: {
                type: "structure",
                required: [ "RequestId" ],
                members: {
                    RequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestedQuota: {
                        shape: "S13"
                    }
                }
            }
        },
        GetServiceQuota: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "QuotaCode" ],
                members: {
                    ServiceCode: {},
                    QuotaCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Quota: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetServiceQuotaIncreaseRequestFromTemplate: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "QuotaCode", "AwsRegion" ],
                members: {
                    ServiceCode: {},
                    QuotaCode: {},
                    AwsRegion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceQuotaIncreaseRequestInTemplate: {
                        shape: "S1c"
                    }
                }
            }
        },
        ListAWSDefaultServiceQuotas: {
            input: {
                type: "structure",
                required: [ "ServiceCode" ],
                members: {
                    ServiceCode: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Quotas: {
                        shape: "S1h"
                    }
                }
            }
        },
        ListRequestedServiceQuotaChangeHistory: {
            input: {
                type: "structure",
                members: {
                    ServiceCode: {},
                    Status: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RequestedQuotas: {
                        shape: "S1k"
                    }
                }
            }
        },
        ListRequestedServiceQuotaChangeHistoryByQuota: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "QuotaCode" ],
                members: {
                    ServiceCode: {},
                    QuotaCode: {},
                    Status: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RequestedQuotas: {
                        shape: "S1k"
                    }
                }
            }
        },
        ListServiceQuotaIncreaseRequestsInTemplate: {
            input: {
                type: "structure",
                members: {
                    ServiceCode: {},
                    AwsRegion: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceQuotaIncreaseRequestInTemplateList: {
                        type: "list",
                        member: {
                            shape: "S1c"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListServiceQuotas: {
            input: {
                type: "structure",
                required: [ "ServiceCode" ],
                members: {
                    ServiceCode: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Quotas: {
                        shape: "S1h"
                    }
                }
            }
        },
        ListServices: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Services: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ServiceCode: {},
                                ServiceName: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        type: "list",
                        member: {
                            shape: "S20"
                        }
                    }
                }
            }
        },
        PutServiceQuotaIncreaseRequestIntoTemplate: {
            input: {
                type: "structure",
                required: [ "QuotaCode", "ServiceCode", "AwsRegion", "DesiredValue" ],
                members: {
                    QuotaCode: {},
                    ServiceCode: {},
                    AwsRegion: {},
                    DesiredValue: {
                        type: "double"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceQuotaIncreaseRequestInTemplate: {
                        shape: "S1c"
                    }
                }
            }
        },
        RequestServiceQuotaIncrease: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "QuotaCode", "DesiredValue" ],
                members: {
                    ServiceCode: {},
                    QuotaCode: {},
                    DesiredValue: {
                        type: "double"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestedQuota: {
                        shape: "S13"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        type: "list",
                        member: {
                            shape: "S20"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sc: {
            type: "structure",
            members: {
                ServiceCode: {},
                ServiceName: {},
                QuotaArn: {},
                QuotaCode: {},
                QuotaName: {},
                Value: {
                    type: "double"
                },
                Unit: {},
                Adjustable: {
                    type: "boolean"
                },
                GlobalQuota: {
                    type: "boolean"
                },
                UsageMetric: {
                    type: "structure",
                    members: {
                        MetricNamespace: {},
                        MetricName: {},
                        MetricDimensions: {
                            type: "map",
                            key: {},
                            value: {}
                        },
                        MetricStatisticRecommendation: {}
                    }
                },
                Period: {
                    type: "structure",
                    members: {
                        PeriodValue: {
                            type: "integer"
                        },
                        PeriodUnit: {}
                    }
                },
                ErrorReason: {
                    type: "structure",
                    members: {
                        ErrorCode: {},
                        ErrorMessage: {}
                    }
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                Id: {},
                CaseId: {},
                ServiceCode: {},
                ServiceName: {},
                QuotaCode: {},
                QuotaName: {},
                DesiredValue: {
                    type: "double"
                },
                Status: {},
                Created: {
                    type: "timestamp"
                },
                LastUpdated: {
                    type: "timestamp"
                },
                Requester: {},
                QuotaArn: {},
                GlobalQuota: {
                    type: "boolean"
                },
                Unit: {}
            }
        },
        S1c: {
            type: "structure",
            members: {
                ServiceCode: {},
                ServiceName: {},
                QuotaCode: {},
                QuotaName: {},
                DesiredValue: {
                    type: "double"
                },
                AwsRegion: {},
                Unit: {},
                GlobalQuota: {
                    type: "boolean"
                }
            }
        },
        S1h: {
            type: "list",
            member: {
                shape: "Sc"
            }
        },
        S1k: {
            type: "list",
            member: {
                shape: "S13"
            }
        },
        S20: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {},
                Value: {}
            }
        }
    },
    paginators: {
        ListAWSDefaultServiceQuotas: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Quotas"
        },
        ListRequestedServiceQuotaChangeHistory: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "RequestedQuotas"
        },
        ListRequestedServiceQuotaChangeHistoryByQuota: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "RequestedQuotas"
        },
        ListServiceQuotaIncreaseRequestsInTemplate: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ServiceQuotaIncreaseRequestInTemplateList"
        },
        ListServiceQuotas: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Quotas"
        },
        ListServices: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Services"
        }
    }
};

AWS.apiLoader.services["ec2instanceconnect"] = {};

AWS.EC2InstanceConnect = AWS.Service.defineService("ec2instanceconnect", [ "2018-04-02" ]);

AWS.apiLoader.services["ec2instanceconnect"]["2018-04-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-04-02",
        endpointPrefix: "ec2-instance-connect",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "EC2 Instance Connect",
        serviceFullName: "AWS EC2 Instance Connect",
        serviceId: "EC2 Instance Connect",
        signatureVersion: "v4",
        targetPrefix: "AWSEC2InstanceConnectService",
        uid: "ec2-instance-connect-2018-04-02"
    },
    operations: {
        SendSSHPublicKey: {
            input: {
                type: "structure",
                required: [ "InstanceId", "InstanceOSUser", "SSHPublicKey", "AvailabilityZone" ],
                members: {
                    InstanceId: {},
                    InstanceOSUser: {},
                    SSHPublicKey: {},
                    AvailabilityZone: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Success: {
                        type: "boolean"
                    }
                }
            }
        },
        SendSerialConsoleSSHPublicKey: {
            input: {
                type: "structure",
                required: [ "InstanceId", "SSHPublicKey" ],
                members: {
                    InstanceId: {},
                    SerialPort: {
                        type: "integer"
                    },
                    SSHPublicKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Success: {
                        type: "boolean"
                    }
                }
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["eventbridge"] = {};

AWS.EventBridge = AWS.Service.defineService("eventbridge", [ "2015-10-07" ]);

AWS.apiLoader.services["eventbridge"]["2015-10-07"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-10-07",
        endpointPrefix: "events",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon EventBridge",
        serviceId: "EventBridge",
        signatureVersion: "v4",
        targetPrefix: "AWSEvents",
        uid: "eventbridge-2015-10-07"
    },
    operations: {
        ActivateEventSource: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CancelReplay: {
            input: {
                type: "structure",
                required: [ "ReplayName" ],
                members: {
                    ReplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplayArn: {},
                    State: {},
                    StateReason: {}
                }
            }
        },
        CreateApiDestination: {
            input: {
                type: "structure",
                required: [ "Name", "ConnectionArn", "InvocationEndpoint", "HttpMethod" ],
                members: {
                    Name: {},
                    Description: {},
                    ConnectionArn: {},
                    InvocationEndpoint: {},
                    HttpMethod: {},
                    InvocationRateLimitPerSecond: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiDestinationArn: {},
                    ApiDestinationState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateArchive: {
            input: {
                type: "structure",
                required: [ "ArchiveName", "EventSourceArn" ],
                members: {
                    ArchiveName: {},
                    EventSourceArn: {},
                    Description: {},
                    EventPattern: {},
                    RetentionDays: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArchiveArn: {},
                    State: {},
                    StateReason: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateConnection: {
            input: {
                type: "structure",
                required: [ "Name", "AuthorizationType", "AuthParameters" ],
                members: {
                    Name: {},
                    Description: {},
                    AuthorizationType: {},
                    AuthParameters: {
                        type: "structure",
                        members: {
                            BasicAuthParameters: {
                                type: "structure",
                                required: [ "Username", "Password" ],
                                members: {
                                    Username: {},
                                    Password: {}
                                }
                            },
                            OAuthParameters: {
                                type: "structure",
                                required: [ "ClientParameters", "AuthorizationEndpoint", "HttpMethod" ],
                                members: {
                                    ClientParameters: {
                                        type: "structure",
                                        required: [ "ClientID", "ClientSecret" ],
                                        members: {
                                            ClientID: {},
                                            ClientSecret: {}
                                        }
                                    },
                                    AuthorizationEndpoint: {},
                                    HttpMethod: {},
                                    OAuthHttpParameters: {
                                        shape: "S14"
                                    }
                                }
                            },
                            ApiKeyAuthParameters: {
                                type: "structure",
                                required: [ "ApiKeyName", "ApiKeyValue" ],
                                members: {
                                    ApiKeyName: {},
                                    ApiKeyValue: {}
                                }
                            },
                            InvocationHttpParameters: {
                                shape: "S14"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    ConnectionState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateEventBus: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventSourceName: {},
                    Tags: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventBusArn: {}
                }
            }
        },
        CreatePartnerEventSource: {
            input: {
                type: "structure",
                required: [ "Name", "Account" ],
                members: {
                    Name: {},
                    Account: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventSourceArn: {}
                }
            }
        },
        DeactivateEventSource: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeauthorizeConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    ConnectionState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastAuthorizedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteApiDestination: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteArchive: {
            input: {
                type: "structure",
                required: [ "ArchiveName" ],
                members: {
                    ArchiveName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    ConnectionState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastAuthorizedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteEventBus: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeletePartnerEventSource: {
            input: {
                type: "structure",
                required: [ "Name", "Account" ],
                members: {
                    Name: {},
                    Account: {}
                }
            }
        },
        DeleteRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventBusName: {},
                    Force: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeApiDestination: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiDestinationArn: {},
                    Name: {},
                    Description: {},
                    ApiDestinationState: {},
                    ConnectionArn: {},
                    InvocationEndpoint: {},
                    HttpMethod: {},
                    InvocationRateLimitPerSecond: {
                        type: "integer"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeArchive: {
            input: {
                type: "structure",
                required: [ "ArchiveName" ],
                members: {
                    ArchiveName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ArchiveArn: {},
                    ArchiveName: {},
                    EventSourceArn: {},
                    Description: {},
                    EventPattern: {},
                    State: {},
                    StateReason: {},
                    RetentionDays: {
                        type: "integer"
                    },
                    SizeBytes: {
                        type: "long"
                    },
                    EventCount: {
                        type: "long"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    Name: {},
                    Description: {},
                    ConnectionState: {},
                    StateReason: {},
                    AuthorizationType: {},
                    SecretArn: {},
                    AuthParameters: {
                        type: "structure",
                        members: {
                            BasicAuthParameters: {
                                type: "structure",
                                members: {
                                    Username: {}
                                }
                            },
                            OAuthParameters: {
                                type: "structure",
                                members: {
                                    ClientParameters: {
                                        type: "structure",
                                        members: {
                                            ClientID: {}
                                        }
                                    },
                                    AuthorizationEndpoint: {},
                                    HttpMethod: {},
                                    OAuthHttpParameters: {
                                        shape: "S14"
                                    }
                                }
                            },
                            ApiKeyAuthParameters: {
                                type: "structure",
                                members: {
                                    ApiKeyName: {}
                                }
                            },
                            InvocationHttpParameters: {
                                shape: "S14"
                            }
                        }
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastAuthorizedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeEventBus: {
            input: {
                type: "structure",
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    Policy: {}
                }
            }
        },
        DescribeEventSource: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreatedBy: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    ExpirationTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    State: {}
                }
            }
        },
        DescribePartnerEventSource: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {}
                }
            }
        },
        DescribeReplay: {
            input: {
                type: "structure",
                required: [ "ReplayName" ],
                members: {
                    ReplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplayName: {},
                    ReplayArn: {},
                    Description: {},
                    State: {},
                    StateReason: {},
                    EventSourceArn: {},
                    Destination: {
                        shape: "S2w"
                    },
                    EventStartTime: {
                        type: "timestamp"
                    },
                    EventEndTime: {
                        type: "timestamp"
                    },
                    EventLastReplayedTime: {
                        type: "timestamp"
                    },
                    ReplayStartTime: {
                        type: "timestamp"
                    },
                    ReplayEndTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventBusName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    EventPattern: {},
                    ScheduleExpression: {},
                    State: {},
                    Description: {},
                    RoleArn: {},
                    ManagedBy: {},
                    EventBusName: {},
                    CreatedBy: {}
                }
            }
        },
        DisableRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventBusName: {}
                }
            }
        },
        EnableRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventBusName: {}
                }
            }
        },
        ListApiDestinations: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    ConnectionArn: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiDestinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiDestinationArn: {},
                                Name: {},
                                ApiDestinationState: {},
                                ConnectionArn: {},
                                InvocationEndpoint: {},
                                HttpMethod: {},
                                InvocationRateLimitPerSecond: {
                                    type: "integer"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListArchives: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    EventSourceArn: {},
                    State: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Archives: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ArchiveName: {},
                                EventSourceArn: {},
                                State: {},
                                StateReason: {},
                                RetentionDays: {
                                    type: "integer"
                                },
                                SizeBytes: {
                                    type: "long"
                                },
                                EventCount: {
                                    type: "long"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConnections: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    ConnectionState: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connections: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConnectionArn: {},
                                Name: {},
                                ConnectionState: {},
                                StateReason: {},
                                AuthorizationType: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastAuthorizedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventBuses: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventBuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Arn: {},
                                Policy: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventSources: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventSources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedBy: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ExpirationTime: {
                                    type: "timestamp"
                                },
                                Name: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPartnerEventSourceAccounts: {
            input: {
                type: "structure",
                required: [ "EventSourceName" ],
                members: {
                    EventSourceName: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PartnerEventSourceAccounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Account: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ExpirationTime: {
                                    type: "timestamp"
                                },
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPartnerEventSources: {
            input: {
                type: "structure",
                required: [ "NamePrefix" ],
                members: {
                    NamePrefix: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PartnerEventSources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListReplays: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    State: {},
                    EventSourceArn: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Replays: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReplayName: {},
                                EventSourceArn: {},
                                State: {},
                                StateReason: {},
                                EventStartTime: {
                                    type: "timestamp"
                                },
                                EventEndTime: {
                                    type: "timestamp"
                                },
                                EventLastReplayedTime: {
                                    type: "timestamp"
                                },
                                ReplayStartTime: {
                                    type: "timestamp"
                                },
                                ReplayEndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRuleNamesByTarget: {
            input: {
                type: "structure",
                required: [ "TargetArn" ],
                members: {
                    TargetArn: {},
                    EventBusName: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListRules: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    EventBusName: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Arn: {},
                                EventPattern: {},
                                State: {},
                                Description: {},
                                ScheduleExpression: {},
                                RoleArn: {},
                                ManagedBy: {},
                                EventBusName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1m"
                    }
                }
            }
        },
        ListTargetsByRule: {
            input: {
                type: "structure",
                required: [ "Rule" ],
                members: {
                    Rule: {},
                    EventBusName: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Targets: {
                        shape: "S4l"
                    },
                    NextToken: {}
                }
            }
        },
        PutEvents: {
            input: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Time: {
                                    type: "timestamp"
                                },
                                Source: {},
                                Resources: {
                                    shape: "S6j"
                                },
                                DetailType: {},
                                Detail: {},
                                EventBusName: {},
                                TraceHeader: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntryCount: {
                        type: "integer"
                    },
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        PutPartnerEvents: {
            input: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Time: {
                                    type: "timestamp"
                                },
                                Source: {},
                                Resources: {
                                    shape: "S6j"
                                },
                                DetailType: {},
                                Detail: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntryCount: {
                        type: "integer"
                    },
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        PutPermission: {
            input: {
                type: "structure",
                members: {
                    EventBusName: {},
                    Action: {},
                    Principal: {},
                    StatementId: {},
                    Condition: {
                        type: "structure",
                        required: [ "Type", "Key", "Value" ],
                        members: {
                            Type: {},
                            Key: {},
                            Value: {}
                        }
                    },
                    Policy: {}
                }
            }
        },
        PutRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    ScheduleExpression: {},
                    EventPattern: {},
                    State: {},
                    Description: {},
                    RoleArn: {},
                    Tags: {
                        shape: "S1m"
                    },
                    EventBusName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleArn: {}
                }
            }
        },
        PutTargets: {
            input: {
                type: "structure",
                required: [ "Rule", "Targets" ],
                members: {
                    Rule: {},
                    EventBusName: {},
                    Targets: {
                        shape: "S4l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntryCount: {
                        type: "integer"
                    },
                    FailedEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TargetId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        RemovePermission: {
            input: {
                type: "structure",
                members: {
                    StatementId: {},
                    RemoveAllPermissions: {
                        type: "boolean"
                    },
                    EventBusName: {}
                }
            }
        },
        RemoveTargets: {
            input: {
                type: "structure",
                required: [ "Rule", "Ids" ],
                members: {
                    Rule: {},
                    EventBusName: {},
                    Ids: {
                        type: "list",
                        member: {}
                    },
                    Force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntryCount: {
                        type: "integer"
                    },
                    FailedEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TargetId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        StartReplay: {
            input: {
                type: "structure",
                required: [ "ReplayName", "EventSourceArn", "EventStartTime", "EventEndTime", "Destination" ],
                members: {
                    ReplayName: {},
                    Description: {},
                    EventSourceArn: {},
                    EventStartTime: {
                        type: "timestamp"
                    },
                    EventEndTime: {
                        type: "timestamp"
                    },
                    Destination: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplayArn: {},
                    State: {},
                    StateReason: {},
                    ReplayStartTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TestEventPattern: {
            input: {
                type: "structure",
                required: [ "EventPattern", "Event" ],
                members: {
                    EventPattern: {},
                    Event: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Result: {
                        type: "boolean"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApiDestination: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    ConnectionArn: {},
                    InvocationEndpoint: {},
                    HttpMethod: {},
                    InvocationRateLimitPerSecond: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiDestinationArn: {},
                    ApiDestinationState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateArchive: {
            input: {
                type: "structure",
                required: [ "ArchiveName" ],
                members: {
                    ArchiveName: {},
                    Description: {},
                    EventPattern: {},
                    RetentionDays: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArchiveArn: {},
                    State: {},
                    StateReason: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    AuthorizationType: {},
                    AuthParameters: {
                        type: "structure",
                        members: {
                            BasicAuthParameters: {
                                type: "structure",
                                members: {
                                    Username: {},
                                    Password: {}
                                }
                            },
                            OAuthParameters: {
                                type: "structure",
                                members: {
                                    ClientParameters: {
                                        type: "structure",
                                        members: {
                                            ClientID: {},
                                            ClientSecret: {}
                                        }
                                    },
                                    AuthorizationEndpoint: {},
                                    HttpMethod: {},
                                    OAuthHttpParameters: {
                                        shape: "S14"
                                    }
                                }
                            },
                            ApiKeyAuthParameters: {
                                type: "structure",
                                members: {
                                    ApiKeyName: {},
                                    ApiKeyValue: {}
                                }
                            },
                            InvocationHttpParameters: {
                                shape: "S14"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    ConnectionState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastAuthorizedTime: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        S14: {
            type: "structure",
            members: {
                HeaderParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {},
                            IsValueSecret: {
                                type: "boolean"
                            }
                        }
                    }
                },
                QueryStringParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {},
                            IsValueSecret: {
                                type: "boolean"
                            }
                        }
                    }
                },
                BodyParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {},
                            IsValueSecret: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S1m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S2w: {
            type: "structure",
            required: [ "Arn" ],
            members: {
                Arn: {},
                FilterArns: {
                    type: "list",
                    member: {}
                }
            }
        },
        S4l: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Id", "Arn" ],
                members: {
                    Id: {},
                    Arn: {},
                    RoleArn: {},
                    Input: {},
                    InputPath: {},
                    InputTransformer: {
                        type: "structure",
                        required: [ "InputTemplate" ],
                        members: {
                            InputPathsMap: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            InputTemplate: {}
                        }
                    },
                    KinesisParameters: {
                        type: "structure",
                        required: [ "PartitionKeyPath" ],
                        members: {
                            PartitionKeyPath: {}
                        }
                    },
                    RunCommandParameters: {
                        type: "structure",
                        required: [ "RunCommandTargets" ],
                        members: {
                            RunCommandTargets: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Key", "Values" ],
                                    members: {
                                        Key: {},
                                        Values: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    EcsParameters: {
                        type: "structure",
                        required: [ "TaskDefinitionArn" ],
                        members: {
                            TaskDefinitionArn: {},
                            TaskCount: {
                                type: "integer"
                            },
                            LaunchType: {},
                            NetworkConfiguration: {
                                type: "structure",
                                members: {
                                    awsvpcConfiguration: {
                                        type: "structure",
                                        required: [ "Subnets" ],
                                        members: {
                                            Subnets: {
                                                shape: "S57"
                                            },
                                            SecurityGroups: {
                                                shape: "S57"
                                            },
                                            AssignPublicIp: {}
                                        }
                                    }
                                }
                            },
                            PlatformVersion: {},
                            Group: {},
                            CapacityProviderStrategy: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "capacityProvider" ],
                                    members: {
                                        capacityProvider: {},
                                        weight: {
                                            type: "integer"
                                        },
                                        base: {
                                            type: "integer"
                                        }
                                    }
                                }
                            },
                            EnableECSManagedTags: {
                                type: "boolean"
                            },
                            EnableExecuteCommand: {
                                type: "boolean"
                            },
                            PlacementConstraints: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        type: {},
                                        expression: {}
                                    }
                                }
                            },
                            PlacementStrategy: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        type: {},
                                        field: {}
                                    }
                                }
                            },
                            PropagateTags: {},
                            ReferenceId: {},
                            Tags: {
                                shape: "S1m"
                            }
                        }
                    },
                    BatchParameters: {
                        type: "structure",
                        required: [ "JobDefinition", "JobName" ],
                        members: {
                            JobDefinition: {},
                            JobName: {},
                            ArrayProperties: {
                                type: "structure",
                                members: {
                                    Size: {
                                        type: "integer"
                                    }
                                }
                            },
                            RetryStrategy: {
                                type: "structure",
                                members: {
                                    Attempts: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    SqsParameters: {
                        type: "structure",
                        members: {
                            MessageGroupId: {}
                        }
                    },
                    HttpParameters: {
                        type: "structure",
                        members: {
                            PathParameterValues: {
                                type: "list",
                                member: {}
                            },
                            HeaderParameters: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            QueryStringParameters: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    },
                    RedshiftDataParameters: {
                        type: "structure",
                        required: [ "Database", "Sql" ],
                        members: {
                            SecretManagerArn: {},
                            Database: {},
                            DbUser: {},
                            Sql: {},
                            StatementName: {},
                            WithEvent: {
                                type: "boolean"
                            }
                        }
                    },
                    SageMakerPipelineParameters: {
                        type: "structure",
                        members: {
                            PipelineParameterList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Name", "Value" ],
                                    members: {
                                        Name: {},
                                        Value: {}
                                    }
                                }
                            }
                        }
                    },
                    DeadLetterConfig: {
                        type: "structure",
                        members: {
                            Arn: {}
                        }
                    },
                    RetryPolicy: {
                        type: "structure",
                        members: {
                            MaximumRetryAttempts: {
                                type: "integer"
                            },
                            MaximumEventAgeInSeconds: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S57: {
            type: "list",
            member: {}
        },
        S6j: {
            type: "list",
            member: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["lakeformation"] = {};

AWS.LakeFormation = AWS.Service.defineService("lakeformation", [ "2017-03-31" ]);

AWS.apiLoader.services["lakeformation"]["2017-03-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-03-31",
        endpointPrefix: "lakeformation",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Lake Formation",
        serviceId: "LakeFormation",
        signatureVersion: "v4",
        signingName: "lakeformation",
        targetPrefix: "AWSLakeFormation",
        uid: "lakeformation-2017-03-31"
    },
    operations: {
        AddLFTagsToResource: {
            input: {
                type: "structure",
                required: [ "Resource", "LFTags" ],
                members: {
                    CatalogId: {},
                    Resource: {
                        shape: "S3"
                    },
                    LFTags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failures: {
                        shape: "Sp"
                    }
                }
            }
        },
        BatchGrantPermissions: {
            input: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    CatalogId: {},
                    Entries: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failures: {
                        shape: "S12"
                    }
                }
            }
        },
        BatchRevokePermissions: {
            input: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    CatalogId: {},
                    Entries: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failures: {
                        shape: "S12"
                    }
                }
            }
        },
        CreateLFTag: {
            input: {
                type: "structure",
                required: [ "TagKey", "TagValues" ],
                members: {
                    CatalogId: {},
                    TagKey: {},
                    TagValues: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLFTag: {
            input: {
                type: "structure",
                required: [ "TagKey" ],
                members: {
                    CatalogId: {},
                    TagKey: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceInfo: {
                        shape: "S1e"
                    }
                }
            }
        },
        GetDataLakeSettings: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataLakeSettings: {
                        shape: "S1j"
                    }
                }
            }
        },
        GetEffectivePermissionsForPath: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    CatalogId: {},
                    ResourceArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Permissions: {
                        shape: "S1s"
                    },
                    NextToken: {}
                }
            }
        },
        GetLFTag: {
            input: {
                type: "structure",
                required: [ "TagKey" ],
                members: {
                    CatalogId: {},
                    TagKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CatalogId: {},
                    TagKey: {},
                    TagValues: {
                        shape: "Sf"
                    }
                }
            }
        },
        GetResourceLFTags: {
            input: {
                type: "structure",
                required: [ "Resource" ],
                members: {
                    CatalogId: {},
                    Resource: {
                        shape: "S3"
                    },
                    ShowAssignedLFTags: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LFTagOnDatabase: {
                        shape: "Sm"
                    },
                    LFTagsOnTable: {
                        shape: "Sm"
                    },
                    LFTagsOnColumns: {
                        shape: "S22"
                    }
                }
            }
        },
        GrantPermissions: {
            input: {
                type: "structure",
                required: [ "Principal", "Resource", "Permissions" ],
                members: {
                    CatalogId: {},
                    Principal: {
                        shape: "Sx"
                    },
                    Resource: {
                        shape: "S3"
                    },
                    Permissions: {
                        shape: "Sz"
                    },
                    PermissionsWithGrantOption: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListLFTags: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {},
                    ResourceShareType: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LFTags: {
                        shape: "Sm"
                    },
                    NextToken: {}
                }
            }
        },
        ListPermissions: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {},
                    Principal: {
                        shape: "Sx"
                    },
                    ResourceType: {},
                    Resource: {
                        shape: "S3"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PrincipalResourcePermissions: {
                        shape: "S1s"
                    },
                    NextToken: {}
                }
            }
        },
        ListResources: {
            input: {
                type: "structure",
                members: {
                    FilterConditionList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Field: {},
                                ComparisonOperator: {},
                                StringValueList: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceInfoList: {
                        type: "list",
                        member: {
                            shape: "S1e"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutDataLakeSettings: {
            input: {
                type: "structure",
                required: [ "DataLakeSettings" ],
                members: {
                    CatalogId: {},
                    DataLakeSettings: {
                        shape: "S1j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RegisterResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    UseServiceLinkedRole: {
                        type: "boolean"
                    },
                    RoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveLFTagsFromResource: {
            input: {
                type: "structure",
                required: [ "Resource", "LFTags" ],
                members: {
                    CatalogId: {},
                    Resource: {
                        shape: "S3"
                    },
                    LFTags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failures: {
                        shape: "Sp"
                    }
                }
            }
        },
        RevokePermissions: {
            input: {
                type: "structure",
                required: [ "Principal", "Resource", "Permissions" ],
                members: {
                    CatalogId: {},
                    Principal: {
                        shape: "Sx"
                    },
                    Resource: {
                        shape: "S3"
                    },
                    Permissions: {
                        shape: "Sz"
                    },
                    PermissionsWithGrantOption: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchDatabasesByLFTags: {
            input: {
                type: "structure",
                required: [ "Expression" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CatalogId: {},
                    Expression: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DatabaseList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Database: {
                                    shape: "S5"
                                },
                                LFTags: {
                                    shape: "Sm"
                                }
                            }
                        }
                    }
                }
            }
        },
        SearchTablesByLFTags: {
            input: {
                type: "structure",
                required: [ "Expression" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CatalogId: {},
                    Expression: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TableList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Table: {
                                    shape: "S7"
                                },
                                LFTagOnDatabase: {
                                    shape: "Sm"
                                },
                                LFTagsOnTable: {
                                    shape: "Sm"
                                },
                                LFTagsOnColumns: {
                                    shape: "S22"
                                }
                            }
                        }
                    }
                }
            }
        },
        UpdateLFTag: {
            input: {
                type: "structure",
                required: [ "TagKey" ],
                members: {
                    CatalogId: {},
                    TagKey: {},
                    TagValuesToDelete: {
                        shape: "Sf"
                    },
                    TagValuesToAdd: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResource: {
            input: {
                type: "structure",
                required: [ "RoleArn", "ResourceArn" ],
                members: {
                    RoleArn: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                Catalog: {
                    type: "structure",
                    members: {}
                },
                Database: {
                    shape: "S5"
                },
                Table: {
                    shape: "S7"
                },
                TableWithColumns: {
                    type: "structure",
                    required: [ "DatabaseName", "Name" ],
                    members: {
                        CatalogId: {},
                        DatabaseName: {},
                        Name: {},
                        ColumnNames: {
                            shape: "Sa"
                        },
                        ColumnWildcard: {
                            type: "structure",
                            members: {
                                ExcludedColumnNames: {
                                    shape: "Sa"
                                }
                            }
                        }
                    }
                },
                DataLocation: {
                    type: "structure",
                    required: [ "ResourceArn" ],
                    members: {
                        CatalogId: {},
                        ResourceArn: {}
                    }
                },
                LFTag: {
                    type: "structure",
                    required: [ "TagKey", "TagValues" ],
                    members: {
                        CatalogId: {},
                        TagKey: {},
                        TagValues: {
                            shape: "Sf"
                        }
                    }
                },
                LFTagPolicy: {
                    type: "structure",
                    required: [ "ResourceType", "Expression" ],
                    members: {
                        CatalogId: {},
                        ResourceType: {},
                        Expression: {
                            shape: "Sj"
                        }
                    }
                }
            }
        },
        S5: {
            type: "structure",
            required: [ "Name" ],
            members: {
                CatalogId: {},
                Name: {}
            }
        },
        S7: {
            type: "structure",
            required: [ "DatabaseName" ],
            members: {
                CatalogId: {},
                DatabaseName: {},
                Name: {},
                TableWildcard: {
                    type: "structure",
                    members: {}
                }
            }
        },
        Sa: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "list",
            member: {}
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                required: [ "TagKey", "TagValues" ],
                members: {
                    TagKey: {},
                    TagValues: {
                        shape: "Sf"
                    }
                }
            }
        },
        Sm: {
            type: "list",
            member: {
                shape: "Sn"
            }
        },
        Sn: {
            type: "structure",
            required: [ "TagKey", "TagValues" ],
            members: {
                CatalogId: {},
                TagKey: {},
                TagValues: {
                    shape: "Sf"
                }
            }
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    LFTag: {
                        shape: "Sn"
                    },
                    Error: {
                        shape: "Sr"
                    }
                }
            }
        },
        Sr: {
            type: "structure",
            members: {
                ErrorCode: {},
                ErrorMessage: {}
            }
        },
        Su: {
            type: "list",
            member: {
                shape: "Sv"
            }
        },
        Sv: {
            type: "structure",
            required: [ "Id" ],
            members: {
                Id: {},
                Principal: {
                    shape: "Sx"
                },
                Resource: {
                    shape: "S3"
                },
                Permissions: {
                    shape: "Sz"
                },
                PermissionsWithGrantOption: {
                    shape: "Sz"
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                DataLakePrincipalIdentifier: {}
            }
        },
        Sz: {
            type: "list",
            member: {}
        },
        S12: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RequestEntry: {
                        shape: "Sv"
                    },
                    Error: {
                        shape: "Sr"
                    }
                }
            }
        },
        S1e: {
            type: "structure",
            members: {
                ResourceArn: {},
                RoleArn: {},
                LastModified: {
                    type: "timestamp"
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                DataLakeAdmins: {
                    type: "list",
                    member: {
                        shape: "Sx"
                    }
                },
                CreateDatabaseDefaultPermissions: {
                    shape: "S1l"
                },
                CreateTableDefaultPermissions: {
                    shape: "S1l"
                },
                TrustedResourceOwners: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Principal: {
                        shape: "Sx"
                    },
                    Permissions: {
                        shape: "Sz"
                    }
                }
            }
        },
        S1s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Principal: {
                        shape: "Sx"
                    },
                    Resource: {
                        shape: "S3"
                    },
                    Permissions: {
                        shape: "Sz"
                    },
                    PermissionsWithGrantOption: {
                        shape: "Sz"
                    },
                    AdditionalDetails: {
                        type: "structure",
                        members: {
                            ResourceShare: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S22: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    LFTags: {
                        shape: "Sm"
                    }
                }
            }
        }
    },
    paginators: {
        GetEffectivePermissionsForPath: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPermissions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["forecastservice"] = {};

AWS.ForecastService = AWS.Service.defineService("forecastservice", [ "2018-06-26" ]);

AWS.apiLoader.services["forecastservice"]["2018-06-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-06-26",
        endpointPrefix: "forecast",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Forecast Service",
        serviceId: "forecast",
        signatureVersion: "v4",
        signingName: "forecast",
        targetPrefix: "AmazonForecast",
        uid: "forecast-2018-06-26"
    },
    operations: {
        CreateDataset: {
            input: {
                type: "structure",
                required: [ "DatasetName", "Domain", "DatasetType", "Schema" ],
                members: {
                    DatasetName: {},
                    Domain: {},
                    DatasetType: {},
                    DataFrequency: {},
                    Schema: {
                        shape: "S6"
                    },
                    EncryptionConfig: {
                        shape: "Sa"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetArn: {}
                }
            }
        },
        CreateDatasetGroup: {
            input: {
                type: "structure",
                required: [ "DatasetGroupName", "Domain" ],
                members: {
                    DatasetGroupName: {},
                    Domain: {},
                    DatasetArns: {
                        shape: "Sj"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetGroupArn: {}
                }
            }
        },
        CreateDatasetImportJob: {
            input: {
                type: "structure",
                required: [ "DatasetImportJobName", "DatasetArn", "DataSource" ],
                members: {
                    DatasetImportJobName: {},
                    DatasetArn: {},
                    DataSource: {
                        shape: "Sm"
                    },
                    TimestampFormat: {},
                    TimeZone: {},
                    UseGeolocationForTimeZone: {
                        type: "boolean"
                    },
                    GeolocationFormat: {},
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetImportJobArn: {}
                }
            }
        },
        CreateForecast: {
            input: {
                type: "structure",
                required: [ "ForecastName", "PredictorArn" ],
                members: {
                    ForecastName: {},
                    PredictorArn: {},
                    ForecastTypes: {
                        shape: "Sv"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ForecastArn: {}
                }
            }
        },
        CreateForecastExportJob: {
            input: {
                type: "structure",
                required: [ "ForecastExportJobName", "ForecastArn", "Destination" ],
                members: {
                    ForecastExportJobName: {},
                    ForecastArn: {},
                    Destination: {
                        shape: "Sz"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ForecastExportJobArn: {}
                }
            }
        },
        CreatePredictor: {
            input: {
                type: "structure",
                required: [ "PredictorName", "ForecastHorizon", "InputDataConfig", "FeaturizationConfig" ],
                members: {
                    PredictorName: {},
                    AlgorithmArn: {},
                    ForecastHorizon: {
                        type: "integer"
                    },
                    ForecastTypes: {
                        shape: "Sv"
                    },
                    PerformAutoML: {
                        type: "boolean"
                    },
                    AutoMLOverrideStrategy: {},
                    PerformHPO: {
                        type: "boolean"
                    },
                    TrainingParameters: {
                        shape: "S15"
                    },
                    EvaluationParameters: {
                        shape: "S18"
                    },
                    HPOConfig: {
                        shape: "S19"
                    },
                    InputDataConfig: {
                        shape: "S1l"
                    },
                    FeaturizationConfig: {
                        shape: "S1o"
                    },
                    EncryptionConfig: {
                        shape: "Sa"
                    },
                    Tags: {
                        shape: "Sd"
                    },
                    OptimizationMetric: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorArn: {}
                }
            }
        },
        CreatePredictorBacktestExportJob: {
            input: {
                type: "structure",
                required: [ "PredictorBacktestExportJobName", "PredictorArn", "Destination" ],
                members: {
                    PredictorBacktestExportJobName: {},
                    PredictorArn: {},
                    Destination: {
                        shape: "Sz"
                    },
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorBacktestExportJobArn: {}
                }
            }
        },
        DeleteDataset: {
            input: {
                type: "structure",
                required: [ "DatasetArn" ],
                members: {
                    DatasetArn: {}
                }
            },
            idempotent: true
        },
        DeleteDatasetGroup: {
            input: {
                type: "structure",
                required: [ "DatasetGroupArn" ],
                members: {
                    DatasetGroupArn: {}
                }
            },
            idempotent: true
        },
        DeleteDatasetImportJob: {
            input: {
                type: "structure",
                required: [ "DatasetImportJobArn" ],
                members: {
                    DatasetImportJobArn: {}
                }
            },
            idempotent: true
        },
        DeleteForecast: {
            input: {
                type: "structure",
                required: [ "ForecastArn" ],
                members: {
                    ForecastArn: {}
                }
            },
            idempotent: true
        },
        DeleteForecastExportJob: {
            input: {
                type: "structure",
                required: [ "ForecastExportJobArn" ],
                members: {
                    ForecastExportJobArn: {}
                }
            },
            idempotent: true
        },
        DeletePredictor: {
            input: {
                type: "structure",
                required: [ "PredictorArn" ],
                members: {
                    PredictorArn: {}
                }
            },
            idempotent: true
        },
        DeletePredictorBacktestExportJob: {
            input: {
                type: "structure",
                required: [ "PredictorBacktestExportJobArn" ],
                members: {
                    PredictorBacktestExportJobArn: {}
                }
            },
            idempotent: true
        },
        DeleteResourceTree: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            idempotent: true
        },
        DescribeDataset: {
            input: {
                type: "structure",
                required: [ "DatasetArn" ],
                members: {
                    DatasetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetArn: {},
                    DatasetName: {},
                    Domain: {},
                    DatasetType: {},
                    DataFrequency: {},
                    Schema: {
                        shape: "S6"
                    },
                    EncryptionConfig: {
                        shape: "Sa"
                    },
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeDatasetGroup: {
            input: {
                type: "structure",
                required: [ "DatasetGroupArn" ],
                members: {
                    DatasetGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetGroupName: {},
                    DatasetGroupArn: {},
                    DatasetArns: {
                        shape: "Sj"
                    },
                    Domain: {},
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeDatasetImportJob: {
            input: {
                type: "structure",
                required: [ "DatasetImportJobArn" ],
                members: {
                    DatasetImportJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetImportJobName: {},
                    DatasetImportJobArn: {},
                    DatasetArn: {},
                    TimestampFormat: {},
                    TimeZone: {},
                    UseGeolocationForTimeZone: {
                        type: "boolean"
                    },
                    GeolocationFormat: {},
                    DataSource: {
                        shape: "Sm"
                    },
                    EstimatedTimeRemainingInMinutes: {
                        type: "long"
                    },
                    FieldStatistics: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                Count: {
                                    type: "integer"
                                },
                                CountDistinct: {
                                    type: "integer"
                                },
                                CountNull: {
                                    type: "integer"
                                },
                                CountNan: {
                                    type: "integer"
                                },
                                Min: {},
                                Max: {},
                                Avg: {
                                    type: "double"
                                },
                                Stddev: {
                                    type: "double"
                                },
                                CountLong: {
                                    type: "long"
                                },
                                CountDistinctLong: {
                                    type: "long"
                                },
                                CountNullLong: {
                                    type: "long"
                                },
                                CountNanLong: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    DataSize: {
                        type: "double"
                    },
                    Status: {},
                    Message: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeForecast: {
            input: {
                type: "structure",
                required: [ "ForecastArn" ],
                members: {
                    ForecastArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ForecastArn: {},
                    ForecastName: {},
                    ForecastTypes: {
                        shape: "Sv"
                    },
                    PredictorArn: {},
                    DatasetGroupArn: {},
                    EstimatedTimeRemainingInMinutes: {
                        type: "long"
                    },
                    Status: {},
                    Message: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeForecastExportJob: {
            input: {
                type: "structure",
                required: [ "ForecastExportJobArn" ],
                members: {
                    ForecastExportJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ForecastExportJobArn: {},
                    ForecastExportJobName: {},
                    ForecastArn: {},
                    Destination: {
                        shape: "Sz"
                    },
                    Message: {},
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribePredictor: {
            input: {
                type: "structure",
                required: [ "PredictorArn" ],
                members: {
                    PredictorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorArn: {},
                    PredictorName: {},
                    AlgorithmArn: {},
                    ForecastHorizon: {
                        type: "integer"
                    },
                    ForecastTypes: {
                        shape: "Sv"
                    },
                    PerformAutoML: {
                        type: "boolean"
                    },
                    AutoMLOverrideStrategy: {},
                    PerformHPO: {
                        type: "boolean"
                    },
                    TrainingParameters: {
                        shape: "S15"
                    },
                    EvaluationParameters: {
                        shape: "S18"
                    },
                    HPOConfig: {
                        shape: "S19"
                    },
                    InputDataConfig: {
                        shape: "S1l"
                    },
                    FeaturizationConfig: {
                        shape: "S1o"
                    },
                    EncryptionConfig: {
                        shape: "Sa"
                    },
                    PredictorExecutionDetails: {
                        type: "structure",
                        members: {
                            PredictorExecutions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        AlgorithmArn: {},
                                        TestWindows: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    TestWindowStart: {
                                                        type: "timestamp"
                                                    },
                                                    TestWindowEnd: {
                                                        type: "timestamp"
                                                    },
                                                    Status: {},
                                                    Message: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    EstimatedTimeRemainingInMinutes: {
                        type: "long"
                    },
                    DatasetImportJobArns: {
                        shape: "Sj"
                    },
                    AutoMLAlgorithmArns: {
                        shape: "Sj"
                    },
                    Status: {},
                    Message: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    },
                    OptimizationMetric: {}
                }
            },
            idempotent: true
        },
        DescribePredictorBacktestExportJob: {
            input: {
                type: "structure",
                required: [ "PredictorBacktestExportJobArn" ],
                members: {
                    PredictorBacktestExportJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorBacktestExportJobArn: {},
                    PredictorBacktestExportJobName: {},
                    PredictorArn: {},
                    Destination: {
                        shape: "Sz"
                    },
                    Message: {},
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModificationTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        GetAccuracyMetrics: {
            input: {
                type: "structure",
                required: [ "PredictorArn" ],
                members: {
                    PredictorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorEvaluationResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AlgorithmArn: {},
                                TestWindows: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            TestWindowStart: {
                                                type: "timestamp"
                                            },
                                            TestWindowEnd: {
                                                type: "timestamp"
                                            },
                                            ItemCount: {
                                                type: "integer"
                                            },
                                            EvaluationType: {},
                                            Metrics: {
                                                type: "structure",
                                                members: {
                                                    RMSE: {
                                                        deprecated: true,
                                                        deprecatedMessage: "This property is deprecated, please refer to ErrorMetrics for both RMSE and WAPE",
                                                        type: "double"
                                                    },
                                                    WeightedQuantileLosses: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Quantile: {
                                                                    type: "double"
                                                                },
                                                                LossValue: {
                                                                    type: "double"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    ErrorMetrics: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                ForecastType: {},
                                                                WAPE: {
                                                                    type: "double"
                                                                },
                                                                RMSE: {
                                                                    type: "double"
                                                                },
                                                                MASE: {
                                                                    type: "double"
                                                                },
                                                                MAPE: {
                                                                    type: "double"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    AverageWeightedQuantileLoss: {
                                                        type: "double"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    AutoMLOverrideStrategy: {},
                    OptimizationMetric: {}
                }
            },
            idempotent: true
        },
        ListDatasetGroups: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DatasetGroupArn: {},
                                DatasetGroupName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListDatasetImportJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S3i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetImportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DatasetImportJobArn: {},
                                DatasetImportJobName: {},
                                DataSource: {
                                    shape: "Sm"
                                },
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListDatasets: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Datasets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DatasetArn: {},
                                DatasetName: {},
                                DatasetType: {},
                                Domain: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListForecastExportJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S3i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ForecastExportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ForecastExportJobArn: {},
                                ForecastExportJobName: {},
                                Destination: {
                                    shape: "Sz"
                                },
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListForecasts: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S3i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Forecasts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ForecastArn: {},
                                ForecastName: {},
                                PredictorArn: {},
                                DatasetGroupArn: {},
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListPredictorBacktestExportJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S3i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PredictorBacktestExportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PredictorBacktestExportJobArn: {},
                                PredictorBacktestExportJobName: {},
                                Destination: {
                                    shape: "Sz"
                                },
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListPredictors: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S3i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Predictors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PredictorArn: {},
                                PredictorName: {},
                                DatasetGroupArn: {},
                                Status: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        StopResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "Sf"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDatasetGroup: {
            input: {
                type: "structure",
                required: [ "DatasetGroupArn", "DatasetArns" ],
                members: {
                    DatasetGroupArn: {},
                    DatasetArns: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        S6: {
            type: "structure",
            members: {
                Attributes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            AttributeName: {},
                            AttributeType: {}
                        }
                    }
                }
            }
        },
        Sa: {
            type: "structure",
            required: [ "RoleArn", "KMSKeyArn" ],
            members: {
                RoleArn: {},
                KMSKeyArn: {}
            }
        },
        Sd: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "Sf"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        Sf: {
            type: "string",
            sensitive: true
        },
        Sj: {
            type: "list",
            member: {}
        },
        Sm: {
            type: "structure",
            required: [ "S3Config" ],
            members: {
                S3Config: {
                    shape: "Sn"
                }
            }
        },
        Sn: {
            type: "structure",
            required: [ "Path", "RoleArn" ],
            members: {
                Path: {},
                RoleArn: {},
                KMSKeyArn: {}
            }
        },
        Sv: {
            type: "list",
            member: {}
        },
        Sz: {
            type: "structure",
            required: [ "S3Config" ],
            members: {
                S3Config: {
                    shape: "Sn"
                }
            }
        },
        S15: {
            type: "map",
            key: {},
            value: {}
        },
        S18: {
            type: "structure",
            members: {
                NumberOfBacktestWindows: {
                    type: "integer"
                },
                BackTestWindowOffset: {
                    type: "integer"
                }
            }
        },
        S19: {
            type: "structure",
            members: {
                ParameterRanges: {
                    type: "structure",
                    members: {
                        CategoricalParameterRanges: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Name", "Values" ],
                                members: {
                                    Name: {},
                                    Values: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            }
                        },
                        ContinuousParameterRanges: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Name", "MaxValue", "MinValue" ],
                                members: {
                                    Name: {},
                                    MaxValue: {
                                        type: "double"
                                    },
                                    MinValue: {
                                        type: "double"
                                    },
                                    ScalingType: {}
                                }
                            }
                        },
                        IntegerParameterRanges: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Name", "MaxValue", "MinValue" ],
                                members: {
                                    Name: {},
                                    MaxValue: {
                                        type: "integer"
                                    },
                                    MinValue: {
                                        type: "integer"
                                    },
                                    ScalingType: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S1l: {
            type: "structure",
            required: [ "DatasetGroupArn" ],
            members: {
                DatasetGroupArn: {},
                SupplementaryFeatures: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Value" ],
                        members: {
                            Name: {},
                            Value: {}
                        }
                    }
                }
            }
        },
        S1o: {
            type: "structure",
            required: [ "ForecastFrequency" ],
            members: {
                ForecastFrequency: {},
                ForecastDimensions: {
                    type: "list",
                    member: {}
                },
                Featurizations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "AttributeName" ],
                        members: {
                            AttributeName: {},
                            FeaturizationPipeline: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "FeaturizationMethodName" ],
                                    members: {
                                        FeaturizationMethodName: {},
                                        FeaturizationMethodParameters: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S3i: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value", "Condition" ],
                members: {
                    Key: {},
                    Value: {},
                    Condition: {}
                }
            }
        }
    },
    paginators: {
        ListDatasetGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DatasetGroups"
        },
        ListDatasetImportJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DatasetImportJobs"
        },
        ListDatasets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Datasets"
        },
        ListForecastExportJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ForecastExportJobs"
        },
        ListForecasts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Forecasts"
        },
        ListPredictorBacktestExportJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PredictorBacktestExportJobs"
        },
        ListPredictors: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Predictors"
        }
    }
};

AWS.apiLoader.services["forecastqueryservice"] = {};

AWS.ForecastQueryService = AWS.Service.defineService("forecastqueryservice", [ "2018-06-26" ]);

AWS.apiLoader.services["forecastqueryservice"]["2018-06-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-06-26",
        endpointPrefix: "forecastquery",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Forecast Query Service",
        serviceId: "forecastquery",
        signatureVersion: "v4",
        signingName: "forecast",
        targetPrefix: "AmazonForecastRuntime",
        uid: "forecastquery-2018-06-26"
    },
    operations: {
        QueryForecast: {
            input: {
                type: "structure",
                required: [ "ForecastArn", "Filters" ],
                members: {
                    ForecastArn: {},
                    StartDate: {},
                    EndDate: {},
                    Filters: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Forecast: {
                        type: "structure",
                        members: {
                            Predictions: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Timestamp: {},
                                            Value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["qldb"] = {};

AWS.QLDB = AWS.Service.defineService("qldb", [ "2019-01-02" ]);

AWS.apiLoader.services["qldb"]["2019-01-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-01-02",
        endpointPrefix: "qldb",
        jsonVersion: "1.0",
        protocol: "rest-json",
        serviceAbbreviation: "QLDB",
        serviceFullName: "Amazon QLDB",
        serviceId: "QLDB",
        signatureVersion: "v4",
        signingName: "qldb",
        uid: "qldb-2019-01-02"
    },
    operations: {
        CancelJournalKinesisStream: {
            http: {
                method: "DELETE",
                requestUri: "/ledgers/{name}/journal-kinesis-streams/{streamId}"
            },
            input: {
                type: "structure",
                required: [ "LedgerName", "StreamId" ],
                members: {
                    LedgerName: {
                        location: "uri",
                        locationName: "name"
                    },
                    StreamId: {
                        location: "uri",
                        locationName: "streamId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamId: {}
                }
            }
        },
        CreateLedger: {
            http: {
                requestUri: "/ledgers"
            },
            input: {
                type: "structure",
                required: [ "Name", "PermissionsMode" ],
                members: {
                    Name: {},
                    Tags: {
                        shape: "S6"
                    },
                    PermissionsMode: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    KmsKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    State: {},
                    CreationDateTime: {
                        type: "timestamp"
                    },
                    PermissionsMode: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    KmsKeyArn: {}
                }
            }
        },
        DeleteLedger: {
            http: {
                method: "DELETE",
                requestUri: "/ledgers/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            }
        },
        DescribeJournalKinesisStream: {
            http: {
                method: "GET",
                requestUri: "/ledgers/{name}/journal-kinesis-streams/{streamId}"
            },
            input: {
                type: "structure",
                required: [ "LedgerName", "StreamId" ],
                members: {
                    LedgerName: {
                        location: "uri",
                        locationName: "name"
                    },
                    StreamId: {
                        location: "uri",
                        locationName: "streamId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Stream: {
                        shape: "Sj"
                    }
                }
            }
        },
        DescribeJournalS3Export: {
            http: {
                method: "GET",
                requestUri: "/ledgers/{name}/journal-s3-exports/{exportId}"
            },
            input: {
                type: "structure",
                required: [ "Name", "ExportId" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    ExportId: {
                        location: "uri",
                        locationName: "exportId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ExportDescription" ],
                members: {
                    ExportDescription: {
                        shape: "Sr"
                    }
                }
            }
        },
        DescribeLedger: {
            http: {
                method: "GET",
                requestUri: "/ledgers/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    State: {},
                    CreationDateTime: {
                        type: "timestamp"
                    },
                    PermissionsMode: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    EncryptionDescription: {
                        shape: "S10"
                    }
                }
            }
        },
        ExportJournalToS3: {
            http: {
                requestUri: "/ledgers/{name}/journal-s3-exports"
            },
            input: {
                type: "structure",
                required: [ "Name", "InclusiveStartTime", "ExclusiveEndTime", "S3ExportConfiguration", "RoleArn" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    InclusiveStartTime: {
                        type: "timestamp"
                    },
                    ExclusiveEndTime: {
                        type: "timestamp"
                    },
                    S3ExportConfiguration: {
                        shape: "St"
                    },
                    RoleArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ExportId" ],
                members: {
                    ExportId: {}
                }
            }
        },
        GetBlock: {
            http: {
                requestUri: "/ledgers/{name}/block"
            },
            input: {
                type: "structure",
                required: [ "Name", "BlockAddress" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    BlockAddress: {
                        shape: "S15"
                    },
                    DigestTipAddress: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Block" ],
                members: {
                    Block: {
                        shape: "S15"
                    },
                    Proof: {
                        shape: "S15"
                    }
                }
            }
        },
        GetDigest: {
            http: {
                requestUri: "/ledgers/{name}/digest"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Digest", "DigestTipAddress" ],
                members: {
                    Digest: {
                        type: "blob"
                    },
                    DigestTipAddress: {
                        shape: "S15"
                    }
                }
            }
        },
        GetRevision: {
            http: {
                requestUri: "/ledgers/{name}/revision"
            },
            input: {
                type: "structure",
                required: [ "Name", "BlockAddress", "DocumentId" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    BlockAddress: {
                        shape: "S15"
                    },
                    DocumentId: {},
                    DigestTipAddress: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Revision" ],
                members: {
                    Proof: {
                        shape: "S15"
                    },
                    Revision: {
                        shape: "S15"
                    }
                }
            }
        },
        ListJournalKinesisStreamsForLedger: {
            http: {
                method: "GET",
                requestUri: "/ledgers/{name}/journal-kinesis-streams"
            },
            input: {
                type: "structure",
                required: [ "LedgerName" ],
                members: {
                    LedgerName: {
                        location: "uri",
                        locationName: "name"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Streams: {
                        type: "list",
                        member: {
                            shape: "Sj"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListJournalS3Exports: {
            http: {
                method: "GET",
                requestUri: "/journal-s3-exports"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JournalS3Exports: {
                        shape: "S1k"
                    },
                    NextToken: {}
                }
            }
        },
        ListJournalS3ExportsForLedger: {
            http: {
                method: "GET",
                requestUri: "/ledgers/{name}/journal-s3-exports"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JournalS3Exports: {
                        shape: "S1k"
                    },
                    NextToken: {}
                }
            }
        },
        ListLedgers: {
            http: {
                method: "GET",
                requestUri: "/ledgers"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ledgers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                State: {},
                                CreationDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    }
                }
            }
        },
        StreamJournalToKinesis: {
            http: {
                requestUri: "/ledgers/{name}/journal-kinesis-streams"
            },
            input: {
                type: "structure",
                required: [ "LedgerName", "RoleArn", "InclusiveStartTime", "KinesisConfiguration", "StreamName" ],
                members: {
                    LedgerName: {
                        location: "uri",
                        locationName: "name"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S6"
                    },
                    InclusiveStartTime: {
                        type: "timestamp"
                    },
                    ExclusiveEndTime: {
                        type: "timestamp"
                    },
                    KinesisConfiguration: {
                        shape: "Sl"
                    },
                    StreamName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLedger: {
            http: {
                method: "PATCH",
                requestUri: "/ledgers/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    KmsKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    State: {},
                    CreationDateTime: {
                        type: "timestamp"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    EncryptionDescription: {
                        shape: "S10"
                    }
                }
            }
        },
        UpdateLedgerPermissionsMode: {
            http: {
                method: "PATCH",
                requestUri: "/ledgers/{name}/permissions-mode"
            },
            input: {
                type: "structure",
                required: [ "Name", "PermissionsMode" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    PermissionsMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    PermissionsMode: {}
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {}
        },
        Sj: {
            type: "structure",
            required: [ "LedgerName", "RoleArn", "StreamId", "Status", "KinesisConfiguration", "StreamName" ],
            members: {
                LedgerName: {},
                CreationTime: {
                    type: "timestamp"
                },
                InclusiveStartTime: {
                    type: "timestamp"
                },
                ExclusiveEndTime: {
                    type: "timestamp"
                },
                RoleArn: {},
                StreamId: {},
                Arn: {},
                Status: {},
                KinesisConfiguration: {
                    shape: "Sl"
                },
                ErrorCause: {},
                StreamName: {}
            }
        },
        Sl: {
            type: "structure",
            required: [ "StreamArn" ],
            members: {
                StreamArn: {},
                AggregationEnabled: {
                    type: "boolean"
                }
            }
        },
        Sr: {
            type: "structure",
            required: [ "LedgerName", "ExportId", "ExportCreationTime", "Status", "InclusiveStartTime", "ExclusiveEndTime", "S3ExportConfiguration", "RoleArn" ],
            members: {
                LedgerName: {},
                ExportId: {},
                ExportCreationTime: {
                    type: "timestamp"
                },
                Status: {},
                InclusiveStartTime: {
                    type: "timestamp"
                },
                ExclusiveEndTime: {
                    type: "timestamp"
                },
                S3ExportConfiguration: {
                    shape: "St"
                },
                RoleArn: {}
            }
        },
        St: {
            type: "structure",
            required: [ "Bucket", "Prefix", "EncryptionConfiguration" ],
            members: {
                Bucket: {},
                Prefix: {},
                EncryptionConfiguration: {
                    type: "structure",
                    required: [ "ObjectEncryptionType" ],
                    members: {
                        ObjectEncryptionType: {},
                        KmsKeyArn: {}
                    }
                }
            }
        },
        S10: {
            type: "structure",
            required: [ "KmsKeyArn", "EncryptionStatus" ],
            members: {
                KmsKeyArn: {},
                EncryptionStatus: {},
                InaccessibleKmsKeyDateTime: {
                    type: "timestamp"
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                IonText: {
                    type: "string",
                    sensitive: true
                }
            },
            sensitive: true
        },
        S1k: {
            type: "list",
            member: {
                shape: "Sr"
            }
        }
    },
    paginators: {
        ListJournalKinesisStreamsForLedger: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListJournalS3Exports: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListJournalS3ExportsForLedger: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLedgers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["qldbsession"] = {};

AWS.QLDBSession = AWS.Service.defineService("qldbsession", [ "2019-07-11" ]);

AWS.apiLoader.services["qldbsession"]["2019-07-11"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-07-11",
        endpointPrefix: "session.qldb",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "QLDB Session",
        serviceFullName: "Amazon QLDB Session",
        serviceId: "QLDB Session",
        signatureVersion: "v4",
        signingName: "qldb",
        targetPrefix: "QLDBSession",
        uid: "qldb-session-2019-07-11"
    },
    operations: {
        SendCommand: {
            input: {
                type: "structure",
                members: {
                    SessionToken: {},
                    StartSession: {
                        type: "structure",
                        required: [ "LedgerName" ],
                        members: {
                            LedgerName: {}
                        }
                    },
                    StartTransaction: {
                        type: "structure",
                        members: {}
                    },
                    EndSession: {
                        type: "structure",
                        members: {}
                    },
                    CommitTransaction: {
                        type: "structure",
                        required: [ "TransactionId", "CommitDigest" ],
                        members: {
                            TransactionId: {},
                            CommitDigest: {
                                type: "blob"
                            }
                        }
                    },
                    AbortTransaction: {
                        type: "structure",
                        members: {}
                    },
                    ExecuteStatement: {
                        type: "structure",
                        required: [ "TransactionId", "Statement" ],
                        members: {
                            TransactionId: {},
                            Statement: {},
                            Parameters: {
                                type: "list",
                                member: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    FetchPage: {
                        type: "structure",
                        required: [ "TransactionId", "NextPageToken" ],
                        members: {
                            TransactionId: {},
                            NextPageToken: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StartSession: {
                        type: "structure",
                        members: {
                            SessionToken: {},
                            TimingInformation: {
                                shape: "Sl"
                            }
                        }
                    },
                    StartTransaction: {
                        type: "structure",
                        members: {
                            TransactionId: {},
                            TimingInformation: {
                                shape: "Sl"
                            }
                        }
                    },
                    EndSession: {
                        type: "structure",
                        members: {
                            TimingInformation: {
                                shape: "Sl"
                            }
                        }
                    },
                    CommitTransaction: {
                        type: "structure",
                        members: {
                            TransactionId: {},
                            CommitDigest: {
                                type: "blob"
                            },
                            TimingInformation: {
                                shape: "Sl"
                            },
                            ConsumedIOs: {
                                shape: "Sq"
                            }
                        }
                    },
                    AbortTransaction: {
                        type: "structure",
                        members: {
                            TimingInformation: {
                                shape: "Sl"
                            }
                        }
                    },
                    ExecuteStatement: {
                        type: "structure",
                        members: {
                            FirstPage: {
                                shape: "Sv"
                            },
                            TimingInformation: {
                                shape: "Sl"
                            },
                            ConsumedIOs: {
                                shape: "Sq"
                            }
                        }
                    },
                    FetchPage: {
                        type: "structure",
                        members: {
                            Page: {
                                shape: "Sv"
                            },
                            TimingInformation: {
                                shape: "Sl"
                            },
                            ConsumedIOs: {
                                shape: "Sq"
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        Se: {
            type: "structure",
            members: {
                IonBinary: {
                    type: "blob"
                },
                IonText: {}
            }
        },
        Sl: {
            type: "structure",
            members: {
                ProcessingTimeMilliseconds: {
                    type: "long"
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                ReadIOs: {
                    type: "long"
                },
                WriteIOs: {
                    type: "long"
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                Values: {
                    type: "list",
                    member: {
                        shape: "Se"
                    }
                },
                NextPageToken: {}
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["workmailmessageflow"] = {};

AWS.WorkMailMessageFlow = AWS.Service.defineService("workmailmessageflow", [ "2019-05-01" ]);

AWS.apiLoader.services["workmailmessageflow"]["2019-05-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-05-01",
        endpointPrefix: "workmailmessageflow",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon WorkMail Message Flow",
        serviceId: "WorkMailMessageFlow",
        signatureVersion: "v4",
        uid: "workmailmessageflow-2019-05-01"
    },
    operations: {
        GetRawMessageContent: {
            http: {
                method: "GET",
                requestUri: "/messages/{messageId}"
            },
            input: {
                type: "structure",
                required: [ "messageId" ],
                members: {
                    messageId: {
                        location: "uri",
                        locationName: "messageId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "messageContent" ],
                members: {
                    messageContent: {
                        type: "blob",
                        streaming: true
                    }
                },
                payload: "messageContent"
            }
        },
        PutRawMessageContent: {
            http: {
                requestUri: "/messages/{messageId}"
            },
            input: {
                type: "structure",
                required: [ "messageId", "content" ],
                members: {
                    messageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    content: {
                        type: "structure",
                        required: [ "s3Reference" ],
                        members: {
                            s3Reference: {
                                type: "structure",
                                required: [ "bucket", "key" ],
                                members: {
                                    bucket: {},
                                    key: {},
                                    objectVersion: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["codestarnotifications"] = {};

AWS.CodeStarNotifications = AWS.Service.defineService("codestarnotifications", [ "2019-10-15" ]);

AWS.apiLoader.services["codestarnotifications"]["2019-10-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-10-15",
        endpointPrefix: "codestar-notifications",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS CodeStar Notifications",
        serviceId: "codestar notifications",
        signatureVersion: "v4",
        signingName: "codestar-notifications",
        uid: "codestar-notifications-2019-10-15"
    },
    operations: {
        CreateNotificationRule: {
            http: {
                requestUri: "/createNotificationRule"
            },
            input: {
                type: "structure",
                required: [ "Name", "EventTypeIds", "Resource", "Targets", "DetailType" ],
                members: {
                    Name: {
                        shape: "S2"
                    },
                    EventTypeIds: {
                        shape: "S3"
                    },
                    Resource: {},
                    Targets: {
                        shape: "S6"
                    },
                    DetailType: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sc"
                    },
                    Status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            }
        },
        DeleteNotificationRule: {
            http: {
                requestUri: "/deleteNotificationRule"
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            }
        },
        DeleteTarget: {
            http: {
                requestUri: "/deleteTarget"
            },
            input: {
                type: "structure",
                required: [ "TargetAddress" ],
                members: {
                    TargetAddress: {
                        shape: "S9"
                    },
                    ForceUnsubscribeAll: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeNotificationRule: {
            http: {
                requestUri: "/describeNotificationRule"
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    Name: {
                        shape: "S2"
                    },
                    EventTypes: {
                        shape: "Sp"
                    },
                    Resource: {},
                    Targets: {
                        shape: "Su"
                    },
                    DetailType: {},
                    CreatedBy: {},
                    Status: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    LastModifiedTimestamp: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        ListEventTypes: {
            http: {
                requestUri: "/listEventTypes"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Value" ],
                            members: {
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventTypes: {
                        shape: "Sp"
                    },
                    NextToken: {}
                }
            }
        },
        ListNotificationRules: {
            http: {
                requestUri: "/listNotificationRules"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Value" ],
                            members: {
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NotificationRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/listTagsForResource"
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        ListTargets: {
            http: {
                requestUri: "/listTargets"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Value" ],
                            members: {
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Targets: {
                        shape: "Su"
                    },
                    NextToken: {}
                }
            }
        },
        Subscribe: {
            http: {
                requestUri: "/subscribe"
            },
            input: {
                type: "structure",
                required: [ "Arn", "Target" ],
                members: {
                    Arn: {},
                    Target: {
                        shape: "S7"
                    },
                    ClientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tagResource"
            },
            input: {
                type: "structure",
                required: [ "Arn", "Tags" ],
                members: {
                    Arn: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        Unsubscribe: {
            http: {
                requestUri: "/unsubscribe"
            },
            input: {
                type: "structure",
                required: [ "Arn", "TargetAddress" ],
                members: {
                    Arn: {},
                    TargetAddress: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            }
        },
        UntagResource: {
            http: {
                requestUri: "/untagResource"
            },
            input: {
                type: "structure",
                required: [ "Arn", "TagKeys" ],
                members: {
                    Arn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNotificationRule: {
            http: {
                requestUri: "/updateNotificationRule"
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    Name: {
                        shape: "S2"
                    },
                    Status: {},
                    EventTypeIds: {
                        shape: "S3"
                    },
                    Targets: {
                        shape: "S6"
                    },
                    DetailType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "string",
            sensitive: true
        },
        S3: {
            type: "list",
            member: {}
        },
        S6: {
            type: "list",
            member: {
                shape: "S7"
            }
        },
        S7: {
            type: "structure",
            members: {
                TargetType: {},
                TargetAddress: {
                    shape: "S9"
                }
            }
        },
        S9: {
            type: "string",
            sensitive: true
        },
        Sc: {
            type: "map",
            key: {},
            value: {}
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EventTypeId: {},
                    ServiceName: {},
                    EventTypeName: {},
                    ResourceType: {}
                }
            }
        },
        Su: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TargetAddress: {
                        shape: "S9"
                    },
                    TargetType: {},
                    TargetStatus: {}
                }
            }
        }
    },
    paginators: {
        ListEventTypes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "EventTypes"
        },
        ListNotificationRules: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "NotificationRules"
        },
        ListTargets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Targets"
        }
    }
};

AWS.apiLoader.services["savingsplans"] = {};

AWS.SavingsPlans = AWS.Service.defineService("savingsplans", [ "2019-06-28" ]);

AWS.apiLoader.services["savingsplans"]["2019-06-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-06-28",
        endpointPrefix: "savingsplans",
        globalEndpoint: "savingsplans.amazonaws.com",
        jsonVersion: "1.0",
        protocol: "rest-json",
        serviceAbbreviation: "AWSSavingsPlans",
        serviceFullName: "AWS Savings Plans",
        serviceId: "savingsplans",
        signatureVersion: "v4",
        uid: "savingsplans-2019-06-28"
    },
    operations: {
        CreateSavingsPlan: {
            http: {
                requestUri: "/CreateSavingsPlan"
            },
            input: {
                type: "structure",
                required: [ "savingsPlanOfferingId", "commitment" ],
                members: {
                    savingsPlanOfferingId: {},
                    commitment: {},
                    upfrontPaymentAmount: {},
                    purchaseTime: {
                        type: "timestamp"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    savingsPlanId: {}
                }
            }
        },
        DeleteQueuedSavingsPlan: {
            http: {
                requestUri: "/DeleteQueuedSavingsPlan"
            },
            input: {
                type: "structure",
                required: [ "savingsPlanId" ],
                members: {
                    savingsPlanId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeSavingsPlanRates: {
            http: {
                requestUri: "/DescribeSavingsPlanRates"
            },
            input: {
                type: "structure",
                required: [ "savingsPlanId" ],
                members: {
                    savingsPlanId: {},
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    shape: "Sh"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    savingsPlanId: {},
                    searchResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                rate: {},
                                currency: {},
                                unit: {},
                                productType: {},
                                serviceCode: {},
                                usageType: {},
                                operation: {},
                                properties: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            value: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeSavingsPlans: {
            http: {
                requestUri: "/DescribeSavingsPlans"
            },
            input: {
                type: "structure",
                members: {
                    savingsPlanArns: {
                        type: "list",
                        member: {}
                    },
                    savingsPlanIds: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    states: {
                        type: "list",
                        member: {}
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    shape: "Sh"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    savingsPlans: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                offeringId: {},
                                savingsPlanId: {},
                                savingsPlanArn: {},
                                description: {},
                                start: {},
                                end: {},
                                state: {},
                                region: {},
                                ec2InstanceFamily: {},
                                savingsPlanType: {},
                                paymentOption: {},
                                productTypes: {
                                    shape: "S1e"
                                },
                                currency: {},
                                commitment: {},
                                upfrontPaymentAmount: {},
                                recurringPaymentAmount: {},
                                termDurationInSeconds: {
                                    type: "long"
                                },
                                tags: {
                                    shape: "S6"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeSavingsPlansOfferingRates: {
            http: {
                requestUri: "/DescribeSavingsPlansOfferingRates"
            },
            input: {
                type: "structure",
                members: {
                    savingsPlanOfferingIds: {
                        shape: "S1h"
                    },
                    savingsPlanPaymentOptions: {
                        shape: "S1j"
                    },
                    savingsPlanTypes: {
                        shape: "S1k"
                    },
                    products: {
                        shape: "S1e"
                    },
                    serviceCodes: {
                        type: "list",
                        member: {}
                    },
                    usageTypes: {
                        type: "list",
                        member: {}
                    },
                    operations: {
                        type: "list",
                        member: {}
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    shape: "S1r"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    searchResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                savingsPlanOffering: {
                                    type: "structure",
                                    members: {
                                        offeringId: {},
                                        paymentOption: {},
                                        planType: {},
                                        durationSeconds: {
                                            type: "long"
                                        },
                                        currency: {},
                                        planDescription: {}
                                    }
                                },
                                rate: {},
                                unit: {},
                                productType: {},
                                serviceCode: {},
                                usageType: {},
                                operation: {},
                                properties: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            value: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeSavingsPlansOfferings: {
            http: {
                requestUri: "/DescribeSavingsPlansOfferings"
            },
            input: {
                type: "structure",
                members: {
                    offeringIds: {
                        shape: "S1h"
                    },
                    paymentOptions: {
                        shape: "S1j"
                    },
                    productType: {},
                    planTypes: {
                        shape: "S1k"
                    },
                    durations: {
                        type: "list",
                        member: {
                            type: "long"
                        }
                    },
                    currencies: {
                        type: "list",
                        member: {}
                    },
                    descriptions: {
                        type: "list",
                        member: {}
                    },
                    serviceCodes: {
                        type: "list",
                        member: {}
                    },
                    usageTypes: {
                        type: "list",
                        member: {}
                    },
                    operations: {
                        type: "list",
                        member: {}
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    shape: "S1r"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    searchResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                offeringId: {},
                                productTypes: {
                                    shape: "S1e"
                                },
                                planType: {},
                                description: {},
                                paymentOption: {},
                                durationSeconds: {
                                    type: "long"
                                },
                                currency: {},
                                serviceCode: {},
                                usageType: {},
                                operation: {},
                                properties: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            value: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/ListTagsForResource"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S6"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/TagResource"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/UntagResource"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "list",
            member: {}
        },
        S1e: {
            type: "list",
            member: {}
        },
        S1h: {
            type: "list",
            member: {}
        },
        S1j: {
            type: "list",
            member: {}
        },
        S1k: {
            type: "list",
            member: {}
        },
        S1r: {
            type: "list",
            member: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["sso"] = {};

AWS.SSO = AWS.Service.defineService("sso", [ "2019-06-10" ]);

AWS.apiLoader.services["sso"]["2019-06-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-06-10",
        endpointPrefix: "portal.sso",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "SSO",
        serviceFullName: "AWS Single Sign-On",
        serviceId: "SSO",
        signatureVersion: "v4",
        signingName: "awsssoportal",
        uid: "sso-2019-06-10"
    },
    operations: {
        GetRoleCredentials: {
            http: {
                method: "GET",
                requestUri: "/federation/credentials"
            },
            input: {
                type: "structure",
                required: [ "roleName", "accountId", "accessToken" ],
                members: {
                    roleName: {
                        location: "querystring",
                        locationName: "role_name"
                    },
                    accountId: {
                        location: "querystring",
                        locationName: "account_id"
                    },
                    accessToken: {
                        shape: "S4",
                        location: "header",
                        locationName: "x-amz-sso_bearer_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    roleCredentials: {
                        type: "structure",
                        members: {
                            accessKeyId: {},
                            secretAccessKey: {
                                type: "string",
                                sensitive: true
                            },
                            sessionToken: {
                                type: "string",
                                sensitive: true
                            },
                            expiration: {
                                type: "long"
                            }
                        }
                    }
                }
            },
            authtype: "none"
        },
        ListAccountRoles: {
            http: {
                method: "GET",
                requestUri: "/assignment/roles"
            },
            input: {
                type: "structure",
                required: [ "accessToken", "accountId" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max_result",
                        type: "integer"
                    },
                    accessToken: {
                        shape: "S4",
                        location: "header",
                        locationName: "x-amz-sso_bearer_token"
                    },
                    accountId: {
                        location: "querystring",
                        locationName: "account_id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    roleList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                roleName: {},
                                accountId: {}
                            }
                        }
                    }
                }
            },
            authtype: "none"
        },
        ListAccounts: {
            http: {
                method: "GET",
                requestUri: "/assignment/accounts"
            },
            input: {
                type: "structure",
                required: [ "accessToken" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max_result",
                        type: "integer"
                    },
                    accessToken: {
                        shape: "S4",
                        location: "header",
                        locationName: "x-amz-sso_bearer_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    accountList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                accountName: {},
                                emailAddress: {}
                            }
                        }
                    }
                }
            },
            authtype: "none"
        },
        Logout: {
            http: {
                requestUri: "/logout"
            },
            input: {
                type: "structure",
                required: [ "accessToken" ],
                members: {
                    accessToken: {
                        shape: "S4",
                        location: "header",
                        locationName: "x-amz-sso_bearer_token"
                    }
                }
            },
            authtype: "none"
        }
    },
    shapes: {
        S4: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListAccountRoles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "roleList"
        },
        ListAccounts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "accountList"
        }
    }
};

AWS.apiLoader.services["ssooidc"] = {};

AWS.SSOOIDC = AWS.Service.defineService("ssooidc", [ "2019-06-10" ]);

AWS.apiLoader.services["ssooidc"]["2019-06-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-06-10",
        endpointPrefix: "oidc",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "SSO OIDC",
        serviceFullName: "AWS SSO OIDC",
        serviceId: "SSO OIDC",
        signatureVersion: "v4",
        signingName: "awsssooidc",
        uid: "sso-oidc-2019-06-10"
    },
    operations: {
        CreateToken: {
            http: {
                requestUri: "/token"
            },
            input: {
                type: "structure",
                required: [ "clientId", "clientSecret", "grantType", "deviceCode" ],
                members: {
                    clientId: {},
                    clientSecret: {},
                    grantType: {},
                    deviceCode: {},
                    code: {},
                    refreshToken: {},
                    scope: {
                        shape: "S8"
                    },
                    redirectUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    accessToken: {},
                    tokenType: {},
                    expiresIn: {
                        type: "integer"
                    },
                    refreshToken: {},
                    idToken: {}
                }
            },
            authtype: "none"
        },
        RegisterClient: {
            http: {
                requestUri: "/client/register"
            },
            input: {
                type: "structure",
                required: [ "clientName", "clientType" ],
                members: {
                    clientName: {},
                    clientType: {},
                    scopes: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    clientId: {},
                    clientSecret: {},
                    clientIdIssuedAt: {
                        type: "long"
                    },
                    clientSecretExpiresAt: {
                        type: "long"
                    },
                    authorizationEndpoint: {},
                    tokenEndpoint: {}
                }
            },
            authtype: "none"
        },
        StartDeviceAuthorization: {
            http: {
                requestUri: "/device_authorization"
            },
            input: {
                type: "structure",
                required: [ "clientId", "clientSecret", "startUrl" ],
                members: {
                    clientId: {},
                    clientSecret: {},
                    startUrl: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deviceCode: {},
                    userCode: {},
                    verificationUri: {},
                    verificationUriComplete: {},
                    expiresIn: {
                        type: "integer"
                    },
                    interval: {
                        type: "integer"
                    }
                }
            },
            authtype: "none"
        }
    },
    shapes: {
        S8: {
            type: "list",
            member: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["marketplacecatalog"] = {};

AWS.MarketplaceCatalog = AWS.Service.defineService("marketplacecatalog", [ "2018-09-17" ]);

AWS.apiLoader.services["marketplacecatalog"]["2018-09-17"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-09-17",
        endpointPrefix: "catalog.marketplace",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AWS Marketplace Catalog",
        serviceFullName: "AWS Marketplace Catalog Service",
        serviceId: "Marketplace Catalog",
        signatureVersion: "v4",
        signingName: "aws-marketplace",
        uid: "marketplace-catalog-2018-09-17"
    },
    operations: {
        CancelChangeSet: {
            http: {
                method: "PATCH",
                requestUri: "/CancelChangeSet"
            },
            input: {
                type: "structure",
                required: [ "Catalog", "ChangeSetId" ],
                members: {
                    Catalog: {
                        location: "querystring",
                        locationName: "catalog"
                    },
                    ChangeSetId: {
                        location: "querystring",
                        locationName: "changeSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeSetId: {},
                    ChangeSetArn: {}
                }
            }
        },
        DescribeChangeSet: {
            http: {
                method: "GET",
                requestUri: "/DescribeChangeSet"
            },
            input: {
                type: "structure",
                required: [ "Catalog", "ChangeSetId" ],
                members: {
                    Catalog: {
                        location: "querystring",
                        locationName: "catalog"
                    },
                    ChangeSetId: {
                        location: "querystring",
                        locationName: "changeSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeSetId: {},
                    ChangeSetArn: {},
                    ChangeSetName: {},
                    StartTime: {},
                    EndTime: {},
                    Status: {},
                    FailureCode: {},
                    FailureDescription: {},
                    ChangeSet: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ChangeType: {},
                                Entity: {
                                    shape: "Sg"
                                },
                                Details: {},
                                ErrorDetailList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ErrorCode: {},
                                            ErrorMessage: {}
                                        }
                                    }
                                },
                                ChangeName: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeEntity: {
            http: {
                method: "GET",
                requestUri: "/DescribeEntity"
            },
            input: {
                type: "structure",
                required: [ "Catalog", "EntityId" ],
                members: {
                    Catalog: {
                        location: "querystring",
                        locationName: "catalog"
                    },
                    EntityId: {
                        location: "querystring",
                        locationName: "entityId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EntityType: {},
                    EntityIdentifier: {},
                    EntityArn: {},
                    LastModifiedDate: {},
                    Details: {}
                }
            }
        },
        ListChangeSets: {
            http: {
                requestUri: "/ListChangeSets"
            },
            input: {
                type: "structure",
                required: [ "Catalog" ],
                members: {
                    Catalog: {},
                    FilterList: {
                        shape: "Sr"
                    },
                    Sort: {
                        shape: "Sw"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeSetSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ChangeSetId: {},
                                ChangeSetArn: {},
                                ChangeSetName: {},
                                StartTime: {},
                                EndTime: {},
                                Status: {},
                                EntityIdList: {
                                    type: "list",
                                    member: {}
                                },
                                FailureCode: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEntities: {
            http: {
                requestUri: "/ListEntities"
            },
            input: {
                type: "structure",
                required: [ "Catalog", "EntityType" ],
                members: {
                    Catalog: {},
                    EntityType: {},
                    FilterList: {
                        shape: "Sr"
                    },
                    Sort: {
                        shape: "Sw"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EntitySummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                EntityType: {},
                                EntityId: {},
                                EntityArn: {},
                                LastModifiedDate: {},
                                Visibility: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        StartChangeSet: {
            http: {
                requestUri: "/StartChangeSet"
            },
            input: {
                type: "structure",
                required: [ "Catalog", "ChangeSet" ],
                members: {
                    Catalog: {},
                    ChangeSet: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ChangeType", "Entity", "Details" ],
                            members: {
                                ChangeType: {},
                                Entity: {
                                    shape: "Sg"
                                },
                                Details: {},
                                ChangeName: {}
                            }
                        }
                    },
                    ChangeSetName: {},
                    ClientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeSetId: {},
                    ChangeSetArn: {}
                }
            }
        }
    },
    shapes: {
        Sg: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {},
                Identifier: {}
            }
        },
        Sr: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    ValueList: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                SortBy: {},
                SortOrder: {}
            }
        }
    },
    paginators: {
        ListChangeSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListEntities: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["dataexchange"] = {};

AWS.DataExchange = AWS.Service.defineService("dataexchange", [ "2017-07-25" ]);

AWS.apiLoader.services["dataexchange"]["2017-07-25"] = {
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "dataexchange",
        signingName: "dataexchange",
        serviceFullName: "AWS Data Exchange",
        serviceId: "DataExchange",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "dataexchange-2017-07-25",
        signatureVersion: "v4"
    },
    operations: {
        CancelJob: {
            http: {
                method: "DELETE",
                requestUri: "/v1/jobs/{JobId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                },
                required: [ "JobId" ]
            }
        },
        CreateDataSet: {
            http: {
                requestUri: "/v1/data-sets",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    AssetType: {},
                    Description: {},
                    Name: {},
                    Tags: {
                        shape: "S7"
                    }
                },
                required: [ "AssetType", "Description", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssetType: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    Description: {},
                    Id: {},
                    Name: {},
                    Origin: {},
                    OriginDetails: {
                        shape: "Sd"
                    },
                    SourceId: {},
                    Tags: {
                        shape: "S7"
                    },
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        CreateJob: {
            http: {
                requestUri: "/v1/jobs",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Details: {
                        type: "structure",
                        members: {
                            ExportAssetToSignedUrl: {
                                type: "structure",
                                members: {
                                    AssetId: {},
                                    DataSetId: {},
                                    RevisionId: {}
                                },
                                required: [ "DataSetId", "AssetId", "RevisionId" ]
                            },
                            ExportAssetsToS3: {
                                type: "structure",
                                members: {
                                    AssetDestinations: {
                                        shape: "Si"
                                    },
                                    DataSetId: {},
                                    Encryption: {
                                        shape: "Sk"
                                    },
                                    RevisionId: {}
                                },
                                required: [ "AssetDestinations", "DataSetId", "RevisionId" ]
                            },
                            ExportRevisionsToS3: {
                                type: "structure",
                                members: {
                                    DataSetId: {},
                                    Encryption: {
                                        shape: "Sk"
                                    },
                                    RevisionDestinations: {
                                        shape: "Sn"
                                    }
                                },
                                required: [ "RevisionDestinations", "DataSetId" ]
                            },
                            ImportAssetFromSignedUrl: {
                                type: "structure",
                                members: {
                                    AssetName: {},
                                    DataSetId: {},
                                    Md5Hash: {},
                                    RevisionId: {}
                                },
                                required: [ "DataSetId", "Md5Hash", "RevisionId", "AssetName" ]
                            },
                            ImportAssetsFromS3: {
                                type: "structure",
                                members: {
                                    AssetSources: {
                                        shape: "St"
                                    },
                                    DataSetId: {},
                                    RevisionId: {}
                                },
                                required: [ "DataSetId", "AssetSources", "RevisionId" ]
                            }
                        }
                    },
                    Type: {}
                },
                required: [ "Type", "Details" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    Details: {
                        shape: "Sx"
                    },
                    Errors: {
                        shape: "S13"
                    },
                    Id: {},
                    State: {},
                    Type: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        CreateRevision: {
            http: {
                requestUri: "/v1/data-sets/{DataSetId}/revisions",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Comment: {},
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    Tags: {
                        shape: "S7"
                    }
                },
                required: [ "DataSetId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Comment: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    DataSetId: {},
                    Finalized: {
                        type: "boolean"
                    },
                    Id: {},
                    SourceId: {},
                    Tags: {
                        shape: "S7"
                    },
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        DeleteAsset: {
            http: {
                method: "DELETE",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    AssetId: {
                        location: "uri",
                        locationName: "AssetId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                },
                required: [ "RevisionId", "AssetId", "DataSetId" ]
            }
        },
        DeleteDataSet: {
            http: {
                method: "DELETE",
                requestUri: "/v1/data-sets/{DataSetId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                },
                required: [ "DataSetId" ]
            }
        },
        DeleteRevision: {
            http: {
                method: "DELETE",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                },
                required: [ "RevisionId", "DataSetId" ]
            }
        },
        GetAsset: {
            http: {
                method: "GET",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AssetId: {
                        location: "uri",
                        locationName: "AssetId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                },
                required: [ "RevisionId", "AssetId", "DataSetId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssetDetails: {
                        shape: "S1l"
                    },
                    AssetType: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    DataSetId: {},
                    Id: {},
                    Name: {},
                    RevisionId: {},
                    SourceId: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        GetDataSet: {
            http: {
                method: "GET",
                requestUri: "/v1/data-sets/{DataSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                },
                required: [ "DataSetId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssetType: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    Description: {},
                    Id: {},
                    Name: {},
                    Origin: {},
                    OriginDetails: {
                        shape: "Sd"
                    },
                    SourceId: {},
                    Tags: {
                        shape: "S7"
                    },
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        GetJob: {
            http: {
                method: "GET",
                requestUri: "/v1/jobs/{JobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                },
                required: [ "JobId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    Details: {
                        shape: "Sx"
                    },
                    Errors: {
                        shape: "S13"
                    },
                    Id: {},
                    State: {},
                    Type: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        GetRevision: {
            http: {
                method: "GET",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                },
                required: [ "RevisionId", "DataSetId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Comment: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    DataSetId: {},
                    Finalized: {
                        type: "boolean"
                    },
                    Id: {},
                    SourceId: {},
                    Tags: {
                        shape: "S7"
                    },
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        ListDataSetRevisions: {
            http: {
                method: "GET",
                requestUri: "/v1/data-sets/{DataSetId}/revisions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "DataSetId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Revisions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Comment: {},
                                CreatedAt: {
                                    shape: "Sa"
                                },
                                DataSetId: {},
                                Finalized: {
                                    type: "boolean"
                                },
                                Id: {},
                                SourceId: {},
                                UpdatedAt: {
                                    shape: "Sa"
                                }
                            },
                            required: [ "CreatedAt", "DataSetId", "Id", "Arn", "UpdatedAt" ]
                        }
                    }
                }
            }
        },
        ListDataSets: {
            http: {
                method: "GET",
                requestUri: "/v1/data-sets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    Origin: {
                        location: "querystring",
                        locationName: "origin"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                AssetType: {},
                                CreatedAt: {
                                    shape: "Sa"
                                },
                                Description: {},
                                Id: {},
                                Name: {},
                                Origin: {},
                                OriginDetails: {
                                    shape: "Sd"
                                },
                                SourceId: {},
                                UpdatedAt: {
                                    shape: "Sa"
                                }
                            },
                            required: [ "Origin", "AssetType", "Description", "CreatedAt", "Id", "Arn", "UpdatedAt", "Name" ]
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListJobs: {
            http: {
                method: "GET",
                requestUri: "/v1/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DataSetId: {
                        location: "querystring",
                        locationName: "dataSetId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RevisionId: {
                        location: "querystring",
                        locationName: "revisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedAt: {
                                    shape: "Sa"
                                },
                                Details: {
                                    shape: "Sx"
                                },
                                Errors: {
                                    shape: "S13"
                                },
                                Id: {},
                                State: {},
                                Type: {},
                                UpdatedAt: {
                                    shape: "Sa"
                                }
                            },
                            required: [ "Type", "Details", "State", "CreatedAt", "Id", "Arn", "UpdatedAt" ]
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRevisionAssets: {
            http: {
                method: "GET",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                },
                required: [ "RevisionId", "DataSetId" ]
            },
            output: {
                type: "structure",
                members: {
                    Assets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                AssetDetails: {
                                    shape: "S1l"
                                },
                                AssetType: {},
                                CreatedAt: {
                                    shape: "Sa"
                                },
                                DataSetId: {},
                                Id: {},
                                Name: {},
                                RevisionId: {},
                                SourceId: {},
                                UpdatedAt: {
                                    shape: "Sa"
                                }
                            },
                            required: [ "AssetType", "CreatedAt", "DataSetId", "Id", "Arn", "AssetDetails", "UpdatedAt", "RevisionId", "Name" ]
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S7",
                        locationName: "tags"
                    }
                }
            }
        },
        StartJob: {
            http: {
                method: "PATCH",
                requestUri: "/v1/jobs/{JobId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                },
                required: [ "JobId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        shape: "S7",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn", "Tags" ]
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateAsset: {
            http: {
                method: "PATCH",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AssetId: {
                        location: "uri",
                        locationName: "AssetId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    Name: {},
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                },
                required: [ "RevisionId", "AssetId", "DataSetId", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssetDetails: {
                        shape: "S1l"
                    },
                    AssetType: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    DataSetId: {},
                    Id: {},
                    Name: {},
                    RevisionId: {},
                    SourceId: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        UpdateDataSet: {
            http: {
                method: "PATCH",
                requestUri: "/v1/data-sets/{DataSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    Description: {},
                    Name: {}
                },
                required: [ "DataSetId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssetType: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    Description: {},
                    Id: {},
                    Name: {},
                    Origin: {},
                    OriginDetails: {
                        shape: "Sd"
                    },
                    SourceId: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        },
        UpdateRevision: {
            http: {
                method: "PATCH",
                requestUri: "/v1/data-sets/{DataSetId}/revisions/{RevisionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Comment: {},
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    Finalized: {
                        type: "boolean"
                    },
                    RevisionId: {
                        location: "uri",
                        locationName: "RevisionId"
                    }
                },
                required: [ "RevisionId", "DataSetId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Comment: {},
                    CreatedAt: {
                        shape: "Sa"
                    },
                    DataSetId: {},
                    Finalized: {
                        type: "boolean"
                    },
                    Id: {},
                    SourceId: {},
                    UpdatedAt: {
                        shape: "Sa"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "map",
            key: {},
            value: {}
        },
        Sa: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sd: {
            type: "structure",
            members: {
                ProductId: {}
            },
            required: [ "ProductId" ]
        },
        Si: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AssetId: {},
                    Bucket: {},
                    Key: {}
                },
                required: [ "Bucket", "AssetId" ]
            }
        },
        Sk: {
            type: "structure",
            members: {
                KmsKeyArn: {},
                Type: {}
            },
            required: [ "Type" ]
        },
        Sn: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Bucket: {},
                    KeyPattern: {},
                    RevisionId: {}
                },
                required: [ "Bucket", "RevisionId" ]
            }
        },
        St: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Bucket: {},
                    Key: {}
                },
                required: [ "Bucket", "Key" ]
            }
        },
        Sx: {
            type: "structure",
            members: {
                ExportAssetToSignedUrl: {
                    type: "structure",
                    members: {
                        AssetId: {},
                        DataSetId: {},
                        RevisionId: {},
                        SignedUrl: {},
                        SignedUrlExpiresAt: {
                            shape: "Sa"
                        }
                    },
                    required: [ "DataSetId", "AssetId", "RevisionId" ]
                },
                ExportAssetsToS3: {
                    type: "structure",
                    members: {
                        AssetDestinations: {
                            shape: "Si"
                        },
                        DataSetId: {},
                        Encryption: {
                            shape: "Sk"
                        },
                        RevisionId: {}
                    },
                    required: [ "AssetDestinations", "DataSetId", "RevisionId" ]
                },
                ExportRevisionsToS3: {
                    type: "structure",
                    members: {
                        DataSetId: {},
                        Encryption: {
                            shape: "Sk"
                        },
                        RevisionDestinations: {
                            shape: "Sn"
                        }
                    },
                    required: [ "RevisionDestinations", "DataSetId" ]
                },
                ImportAssetFromSignedUrl: {
                    type: "structure",
                    members: {
                        AssetName: {},
                        DataSetId: {},
                        Md5Hash: {},
                        RevisionId: {},
                        SignedUrl: {},
                        SignedUrlExpiresAt: {
                            shape: "Sa"
                        }
                    },
                    required: [ "DataSetId", "AssetName", "RevisionId" ]
                },
                ImportAssetsFromS3: {
                    type: "structure",
                    members: {
                        AssetSources: {
                            shape: "St"
                        },
                        DataSetId: {},
                        RevisionId: {}
                    },
                    required: [ "DataSetId", "AssetSources", "RevisionId" ]
                }
            }
        },
        S13: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Code: {},
                    Details: {
                        type: "structure",
                        members: {
                            ImportAssetFromSignedUrlJobErrorDetails: {
                                type: "structure",
                                members: {
                                    AssetName: {}
                                },
                                required: [ "AssetName" ]
                            },
                            ImportAssetsFromS3JobErrorDetails: {
                                shape: "St"
                            }
                        }
                    },
                    LimitName: {},
                    LimitValue: {
                        type: "double"
                    },
                    Message: {},
                    ResourceId: {},
                    ResourceType: {}
                },
                required: [ "Message", "Code" ]
            }
        },
        S1l: {
            type: "structure",
            members: {
                S3SnapshotAsset: {
                    type: "structure",
                    members: {
                        Size: {
                            type: "double"
                        }
                    },
                    required: [ "Size" ]
                }
            }
        }
    },
    paginators: {
        ListDataSetRevisions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Revisions"
        },
        ListDataSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DataSets"
        },
        ListJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Jobs"
        },
        ListRevisionAssets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Assets"
        }
    }
};

AWS.apiLoader.services["sesv2"] = {};

AWS.SESV2 = AWS.Service.defineService("sesv2", [ "2019-09-27" ]);

AWS.apiLoader.services["sesv2"]["2019-09-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-09-27",
        endpointPrefix: "email",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon SES V2",
        serviceFullName: "Amazon Simple Email Service",
        serviceId: "SESv2",
        signatureVersion: "v4",
        signingName: "ses",
        uid: "sesv2-2019-09-27"
    },
    operations: {
        CreateConfigurationSet: {
            http: {
                requestUri: "/v2/email/configuration-sets"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {},
                    TrackingOptions: {
                        shape: "S3"
                    },
                    DeliveryOptions: {
                        shape: "S5"
                    },
                    ReputationOptions: {
                        shape: "S8"
                    },
                    SendingOptions: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "Sc"
                    },
                    SuppressionOptions: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateConfigurationSetEventDestination: {
            http: {
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName", "EventDestination" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {},
                    EventDestination: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateContact: {
            http: {
                requestUri: "/v2/email/contact-lists/{ContactListName}/contacts"
            },
            input: {
                type: "structure",
                required: [ "ContactListName", "EmailAddress" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    },
                    EmailAddress: {},
                    TopicPreferences: {
                        shape: "S13"
                    },
                    UnsubscribeAll: {
                        type: "boolean"
                    },
                    AttributesData: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateContactList: {
            http: {
                requestUri: "/v2/email/contact-lists"
            },
            input: {
                type: "structure",
                required: [ "ContactListName" ],
                members: {
                    ContactListName: {},
                    Topics: {
                        shape: "S1b"
                    },
                    Description: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateCustomVerificationEmailTemplate: {
            http: {
                requestUri: "/v2/email/custom-verification-email-templates"
            },
            input: {
                type: "structure",
                required: [ "TemplateName", "FromEmailAddress", "TemplateSubject", "TemplateContent", "SuccessRedirectionURL", "FailureRedirectionURL" ],
                members: {
                    TemplateName: {},
                    FromEmailAddress: {},
                    TemplateSubject: {},
                    TemplateContent: {},
                    SuccessRedirectionURL: {},
                    FailureRedirectionURL: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDedicatedIpPool: {
            http: {
                requestUri: "/v2/email/dedicated-ip-pools"
            },
            input: {
                type: "structure",
                required: [ "PoolName" ],
                members: {
                    PoolName: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDeliverabilityTestReport: {
            http: {
                requestUri: "/v2/email/deliverability-dashboard/test"
            },
            input: {
                type: "structure",
                required: [ "FromEmailAddress", "Content" ],
                members: {
                    ReportName: {},
                    FromEmailAddress: {},
                    Content: {
                        shape: "S1r"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ReportId", "DeliverabilityTestStatus" ],
                members: {
                    ReportId: {},
                    DeliverabilityTestStatus: {}
                }
            }
        },
        CreateEmailIdentity: {
            http: {
                requestUri: "/v2/email/identities"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {},
                    Tags: {
                        shape: "Sc"
                    },
                    DkimSigningAttributes: {
                        shape: "S26"
                    },
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityType: {},
                    VerifiedForSendingStatus: {
                        type: "boolean"
                    },
                    DkimAttributes: {
                        shape: "S2b"
                    }
                }
            }
        },
        CreateEmailIdentityPolicy: {
            http: {
                requestUri: "/v2/email/identities/{EmailIdentity}/policies/{PolicyName}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity", "PolicyName", "Policy" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    PolicyName: {
                        location: "uri",
                        locationName: "PolicyName"
                    },
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateEmailTemplate: {
            http: {
                requestUri: "/v2/email/templates"
            },
            input: {
                type: "structure",
                required: [ "TemplateName", "TemplateContent" ],
                members: {
                    TemplateName: {},
                    TemplateContent: {
                        shape: "S2l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateImportJob: {
            http: {
                requestUri: "/v2/email/import-jobs"
            },
            input: {
                type: "structure",
                required: [ "ImportDestination", "ImportDataSource" ],
                members: {
                    ImportDestination: {
                        shape: "S2q"
                    },
                    ImportDataSource: {
                        shape: "S2v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        DeleteConfigurationSet: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSetEventDestination: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteContact: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}"
            },
            input: {
                type: "structure",
                required: [ "ContactListName", "EmailAddress" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    },
                    EmailAddress: {
                        location: "uri",
                        locationName: "EmailAddress"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteContactList: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/contact-lists/{ContactListName}"
            },
            input: {
                type: "structure",
                required: [ "ContactListName" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCustomVerificationEmailTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/custom-verification-email-templates/{TemplateName}"
            },
            input: {
                type: "structure",
                required: [ "TemplateName" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDedicatedIpPool: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/dedicated-ip-pools/{PoolName}"
            },
            input: {
                type: "structure",
                required: [ "PoolName" ],
                members: {
                    PoolName: {
                        location: "uri",
                        locationName: "PoolName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEmailIdentity: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/identities/{EmailIdentity}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEmailIdentityPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/identities/{EmailIdentity}/policies/{PolicyName}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity", "PolicyName" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    PolicyName: {
                        location: "uri",
                        locationName: "PolicyName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEmailTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/templates/{TemplateName}"
            },
            input: {
                type: "structure",
                required: [ "TemplateName" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSuppressedDestination: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/suppression/addresses/{EmailAddress}"
            },
            input: {
                type: "structure",
                required: [ "EmailAddress" ],
                members: {
                    EmailAddress: {
                        location: "uri",
                        locationName: "EmailAddress"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccount: {
            http: {
                method: "GET",
                requestUri: "/v2/email/account"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIpAutoWarmupEnabled: {
                        type: "boolean"
                    },
                    EnforcementStatus: {},
                    ProductionAccessEnabled: {
                        type: "boolean"
                    },
                    SendQuota: {
                        type: "structure",
                        members: {
                            Max24HourSend: {
                                type: "double"
                            },
                            MaxSendRate: {
                                type: "double"
                            },
                            SentLast24Hours: {
                                type: "double"
                            }
                        }
                    },
                    SendingEnabled: {
                        type: "boolean"
                    },
                    SuppressionAttributes: {
                        type: "structure",
                        members: {
                            SuppressedReasons: {
                                shape: "Sh"
                            }
                        }
                    },
                    Details: {
                        type: "structure",
                        members: {
                            MailType: {},
                            WebsiteURL: {
                                shape: "S3u"
                            },
                            ContactLanguage: {},
                            UseCaseDescription: {
                                shape: "S3w"
                            },
                            AdditionalContactEmailAddresses: {
                                shape: "S3x"
                            },
                            ReviewDetails: {
                                type: "structure",
                                members: {
                                    Status: {},
                                    CaseId: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        GetBlacklistReports: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard/blacklist-report"
            },
            input: {
                type: "structure",
                required: [ "BlacklistItemNames" ],
                members: {
                    BlacklistItemNames: {
                        location: "querystring",
                        locationName: "BlacklistItemNames",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "BlacklistReport" ],
                members: {
                    BlacklistReport: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    RblName: {},
                                    ListingTime: {
                                        type: "timestamp"
                                    },
                                    Description: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        GetConfigurationSet: {
            http: {
                method: "GET",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetName: {},
                    TrackingOptions: {
                        shape: "S3"
                    },
                    DeliveryOptions: {
                        shape: "S5"
                    },
                    ReputationOptions: {
                        shape: "S8"
                    },
                    SendingOptions: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "Sc"
                    },
                    SuppressionOptions: {
                        shape: "Sg"
                    }
                }
            }
        },
        GetConfigurationSetEventDestinations: {
            http: {
                method: "GET",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventDestinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "MatchingEventTypes" ],
                            members: {
                                Name: {},
                                Enabled: {
                                    type: "boolean"
                                },
                                MatchingEventTypes: {
                                    shape: "Sn"
                                },
                                KinesisFirehoseDestination: {
                                    shape: "Sp"
                                },
                                CloudWatchDestination: {
                                    shape: "Sr"
                                },
                                SnsDestination: {
                                    shape: "Sx"
                                },
                                PinpointDestination: {
                                    shape: "Sy"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetContact: {
            http: {
                method: "GET",
                requestUri: "/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}"
            },
            input: {
                type: "structure",
                required: [ "ContactListName", "EmailAddress" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    },
                    EmailAddress: {
                        location: "uri",
                        locationName: "EmailAddress"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactListName: {},
                    EmailAddress: {},
                    TopicPreferences: {
                        shape: "S13"
                    },
                    TopicDefaultPreferences: {
                        shape: "S13"
                    },
                    UnsubscribeAll: {
                        type: "boolean"
                    },
                    AttributesData: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    LastUpdatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetContactList: {
            http: {
                method: "GET",
                requestUri: "/v2/email/contact-lists/{ContactListName}"
            },
            input: {
                type: "structure",
                required: [ "ContactListName" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactListName: {},
                    Topics: {
                        shape: "S1b"
                    },
                    Description: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    LastUpdatedTimestamp: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetCustomVerificationEmailTemplate: {
            http: {
                method: "GET",
                requestUri: "/v2/email/custom-verification-email-templates/{TemplateName}"
            },
            input: {
                type: "structure",
                required: [ "TemplateName" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateName: {},
                    FromEmailAddress: {},
                    TemplateSubject: {},
                    TemplateContent: {},
                    SuccessRedirectionURL: {},
                    FailureRedirectionURL: {}
                }
            }
        },
        GetDedicatedIp: {
            http: {
                method: "GET",
                requestUri: "/v2/email/dedicated-ips/{IP}"
            },
            input: {
                type: "structure",
                required: [ "Ip" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIp: {
                        shape: "S4r"
                    }
                }
            }
        },
        GetDedicatedIps: {
            http: {
                method: "GET",
                requestUri: "/v2/email/dedicated-ips"
            },
            input: {
                type: "structure",
                members: {
                    PoolName: {
                        location: "querystring",
                        locationName: "PoolName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIps: {
                        type: "list",
                        member: {
                            shape: "S4r"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetDeliverabilityDashboardOptions: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "DashboardEnabled" ],
                members: {
                    DashboardEnabled: {
                        type: "boolean"
                    },
                    SubscriptionExpiryDate: {
                        type: "timestamp"
                    },
                    AccountStatus: {},
                    ActiveSubscribedDomains: {
                        shape: "S52"
                    },
                    PendingExpirationSubscribedDomains: {
                        shape: "S52"
                    }
                }
            }
        },
        GetDeliverabilityTestReport: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard/test-reports/{ReportId}"
            },
            input: {
                type: "structure",
                required: [ "ReportId" ],
                members: {
                    ReportId: {
                        location: "uri",
                        locationName: "ReportId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DeliverabilityTestReport", "OverallPlacement", "IspPlacements" ],
                members: {
                    DeliverabilityTestReport: {
                        shape: "S5a"
                    },
                    OverallPlacement: {
                        shape: "S5c"
                    },
                    IspPlacements: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IspName: {},
                                PlacementStatistics: {
                                    shape: "S5c"
                                }
                            }
                        }
                    },
                    Message: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetDomainDeliverabilityCampaign: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard/campaigns/{CampaignId}"
            },
            input: {
                type: "structure",
                required: [ "CampaignId" ],
                members: {
                    CampaignId: {
                        location: "uri",
                        locationName: "CampaignId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainDeliverabilityCampaign" ],
                members: {
                    DomainDeliverabilityCampaign: {
                        shape: "S5k"
                    }
                }
            }
        },
        GetDomainStatisticsReport: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard/statistics-report/{Domain}"
            },
            input: {
                type: "structure",
                required: [ "Domain", "StartDate", "EndDate" ],
                members: {
                    Domain: {
                        location: "uri",
                        locationName: "Domain"
                    },
                    StartDate: {
                        location: "querystring",
                        locationName: "StartDate",
                        type: "timestamp"
                    },
                    EndDate: {
                        location: "querystring",
                        locationName: "EndDate",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "OverallVolume", "DailyVolumes" ],
                members: {
                    OverallVolume: {
                        type: "structure",
                        members: {
                            VolumeStatistics: {
                                shape: "S5u"
                            },
                            ReadRatePercent: {
                                type: "double"
                            },
                            DomainIspPlacements: {
                                shape: "S5v"
                            }
                        }
                    },
                    DailyVolumes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StartDate: {
                                    type: "timestamp"
                                },
                                VolumeStatistics: {
                                    shape: "S5u"
                                },
                                DomainIspPlacements: {
                                    shape: "S5v"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetEmailIdentity: {
            http: {
                method: "GET",
                requestUri: "/v2/email/identities/{EmailIdentity}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityType: {},
                    FeedbackForwardingStatus: {
                        type: "boolean"
                    },
                    VerifiedForSendingStatus: {
                        type: "boolean"
                    },
                    DkimAttributes: {
                        shape: "S2b"
                    },
                    MailFromAttributes: {
                        type: "structure",
                        required: [ "MailFromDomain", "MailFromDomainStatus", "BehaviorOnMxFailure" ],
                        members: {
                            MailFromDomain: {},
                            MailFromDomainStatus: {},
                            BehaviorOnMxFailure: {}
                        }
                    },
                    Policies: {
                        shape: "S65"
                    },
                    Tags: {
                        shape: "Sc"
                    },
                    ConfigurationSetName: {}
                }
            }
        },
        GetEmailIdentityPolicies: {
            http: {
                method: "GET",
                requestUri: "/v2/email/identities/{EmailIdentity}/policies"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policies: {
                        shape: "S65"
                    }
                }
            }
        },
        GetEmailTemplate: {
            http: {
                method: "GET",
                requestUri: "/v2/email/templates/{TemplateName}"
            },
            input: {
                type: "structure",
                required: [ "TemplateName" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TemplateName", "TemplateContent" ],
                members: {
                    TemplateName: {},
                    TemplateContent: {
                        shape: "S2l"
                    }
                }
            }
        },
        GetImportJob: {
            http: {
                method: "GET",
                requestUri: "/v2/email/import-jobs/{JobId}"
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    ImportDestination: {
                        shape: "S2q"
                    },
                    ImportDataSource: {
                        shape: "S2v"
                    },
                    FailureInfo: {
                        type: "structure",
                        members: {
                            FailedRecordsS3Url: {},
                            ErrorMessage: {}
                        }
                    },
                    JobStatus: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    CompletedTimestamp: {
                        type: "timestamp"
                    },
                    ProcessedRecordsCount: {
                        type: "integer"
                    },
                    FailedRecordsCount: {
                        type: "integer"
                    }
                }
            }
        },
        GetSuppressedDestination: {
            http: {
                method: "GET",
                requestUri: "/v2/email/suppression/addresses/{EmailAddress}"
            },
            input: {
                type: "structure",
                required: [ "EmailAddress" ],
                members: {
                    EmailAddress: {
                        location: "uri",
                        locationName: "EmailAddress"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SuppressedDestination" ],
                members: {
                    SuppressedDestination: {
                        type: "structure",
                        required: [ "EmailAddress", "Reason", "LastUpdateTime" ],
                        members: {
                            EmailAddress: {},
                            Reason: {},
                            LastUpdateTime: {
                                type: "timestamp"
                            },
                            Attributes: {
                                type: "structure",
                                members: {
                                    MessageId: {},
                                    FeedbackId: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        ListConfigurationSets: {
            http: {
                method: "GET",
                requestUri: "/v2/email/configuration-sets"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSets: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListContactLists: {
            http: {
                method: "GET",
                requestUri: "/v2/email/contact-lists"
            },
            input: {
                type: "structure",
                members: {
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactLists: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ContactListName: {},
                                LastUpdatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListContacts: {
            http: {
                method: "GET",
                requestUri: "/v2/email/contact-lists/{ContactListName}/contacts"
            },
            input: {
                type: "structure",
                required: [ "ContactListName" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    },
                    Filter: {
                        type: "structure",
                        members: {
                            FilteredStatus: {},
                            TopicFilter: {
                                type: "structure",
                                members: {
                                    TopicName: {},
                                    UseDefaultIfPreferenceUnavailable: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Contacts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EmailAddress: {},
                                TopicPreferences: {
                                    shape: "S13"
                                },
                                TopicDefaultPreferences: {
                                    shape: "S13"
                                },
                                UnsubscribeAll: {
                                    type: "boolean"
                                },
                                LastUpdatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomVerificationEmailTemplates: {
            http: {
                method: "GET",
                requestUri: "/v2/email/custom-verification-email-templates"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomVerificationEmailTemplates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TemplateName: {},
                                FromEmailAddress: {},
                                TemplateSubject: {},
                                SuccessRedirectionURL: {},
                                FailureRedirectionURL: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDedicatedIpPools: {
            http: {
                method: "GET",
                requestUri: "/v2/email/dedicated-ip-pools"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIpPools: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListDeliverabilityTestReports: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard/test-reports"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DeliverabilityTestReports" ],
                members: {
                    DeliverabilityTestReports: {
                        type: "list",
                        member: {
                            shape: "S5a"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDomainDeliverabilityCampaigns: {
            http: {
                method: "GET",
                requestUri: "/v2/email/deliverability-dashboard/domains/{SubscribedDomain}/campaigns"
            },
            input: {
                type: "structure",
                required: [ "StartDate", "EndDate", "SubscribedDomain" ],
                members: {
                    StartDate: {
                        location: "querystring",
                        locationName: "StartDate",
                        type: "timestamp"
                    },
                    EndDate: {
                        location: "querystring",
                        locationName: "EndDate",
                        type: "timestamp"
                    },
                    SubscribedDomain: {
                        location: "uri",
                        locationName: "SubscribedDomain"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainDeliverabilityCampaigns" ],
                members: {
                    DomainDeliverabilityCampaigns: {
                        type: "list",
                        member: {
                            shape: "S5k"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEmailIdentities: {
            http: {
                method: "GET",
                requestUri: "/v2/email/identities"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmailIdentities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IdentityType: {},
                                IdentityName: {},
                                SendingEnabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEmailTemplates: {
            http: {
                method: "GET",
                requestUri: "/v2/email/templates"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplatesMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TemplateName: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListImportJobs: {
            http: {
                method: "GET",
                requestUri: "/v2/email/import-jobs"
            },
            input: {
                type: "structure",
                members: {
                    ImportDestinationType: {},
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobId: {},
                                ImportDestination: {
                                    shape: "S2q"
                                },
                                JobStatus: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSuppressedDestinations: {
            http: {
                method: "GET",
                requestUri: "/v2/email/suppression/addresses"
            },
            input: {
                type: "structure",
                members: {
                    Reasons: {
                        shape: "Sh",
                        location: "querystring",
                        locationName: "Reason"
                    },
                    StartDate: {
                        location: "querystring",
                        locationName: "StartDate",
                        type: "timestamp"
                    },
                    EndDate: {
                        location: "querystring",
                        locationName: "EndDate",
                        type: "timestamp"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuppressedDestinationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EmailAddress", "Reason", "LastUpdateTime" ],
                            members: {
                                EmailAddress: {},
                                Reason: {},
                                LastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v2/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        PutAccountDedicatedIpWarmupAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/account/dedicated-ips/warmup"
            },
            input: {
                type: "structure",
                members: {
                    AutoWarmupEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAccountDetails: {
            http: {
                requestUri: "/v2/email/account/details"
            },
            input: {
                type: "structure",
                required: [ "MailType", "WebsiteURL", "UseCaseDescription" ],
                members: {
                    MailType: {},
                    WebsiteURL: {
                        shape: "S3u"
                    },
                    ContactLanguage: {},
                    UseCaseDescription: {
                        shape: "S3w"
                    },
                    AdditionalContactEmailAddresses: {
                        shape: "S3x"
                    },
                    ProductionAccessEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAccountSendingAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/account/sending"
            },
            input: {
                type: "structure",
                members: {
                    SendingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAccountSuppressionAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/account/suppression"
            },
            input: {
                type: "structure",
                members: {
                    SuppressedReasons: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetDeliveryOptions: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/delivery-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    TlsPolicy: {},
                    SendingPoolName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetReputationOptions: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/reputation-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    ReputationMetricsEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetSendingOptions: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/sending"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    SendingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetSuppressionOptions: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/suppression-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    SuppressedReasons: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetTrackingOptions: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/tracking-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    CustomRedirectDomain: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDedicatedIpInPool: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/dedicated-ips/{IP}/pool"
            },
            input: {
                type: "structure",
                required: [ "Ip", "DestinationPoolName" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    },
                    DestinationPoolName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDedicatedIpWarmupAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/dedicated-ips/{IP}/warmup"
            },
            input: {
                type: "structure",
                required: [ "Ip", "WarmupPercentage" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    },
                    WarmupPercentage: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDeliverabilityDashboardOption: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/deliverability-dashboard"
            },
            input: {
                type: "structure",
                required: [ "DashboardEnabled" ],
                members: {
                    DashboardEnabled: {
                        type: "boolean"
                    },
                    SubscribedDomains: {
                        shape: "S52"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityConfigurationSetAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/identities/{EmailIdentity}/configuration-set"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityDkimAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/identities/{EmailIdentity}/dkim"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    SigningEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityDkimSigningAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/identities/{EmailIdentity}/dkim/signing"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity", "SigningAttributesOrigin" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    SigningAttributesOrigin: {},
                    SigningAttributes: {
                        shape: "S26"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DkimStatus: {},
                    DkimTokens: {
                        shape: "S2d"
                    }
                }
            }
        },
        PutEmailIdentityFeedbackAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/identities/{EmailIdentity}/feedback"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    EmailForwardingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityMailFromAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/identities/{EmailIdentity}/mail-from"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    MailFromDomain: {},
                    BehaviorOnMxFailure: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutSuppressedDestination: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/suppression/addresses"
            },
            input: {
                type: "structure",
                required: [ "EmailAddress", "Reason" ],
                members: {
                    EmailAddress: {},
                    Reason: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendBulkEmail: {
            http: {
                requestUri: "/v2/email/outbound-bulk-emails"
            },
            input: {
                type: "structure",
                required: [ "DefaultContent", "BulkEmailEntries" ],
                members: {
                    FromEmailAddress: {},
                    FromEmailAddressIdentityArn: {},
                    ReplyToAddresses: {
                        shape: "S91"
                    },
                    FeedbackForwardingEmailAddress: {},
                    FeedbackForwardingEmailAddressIdentityArn: {},
                    DefaultEmailTags: {
                        shape: "S92"
                    },
                    DefaultContent: {
                        type: "structure",
                        members: {
                            Template: {
                                shape: "S1z"
                            }
                        }
                    },
                    BulkEmailEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Destination" ],
                            members: {
                                Destination: {
                                    shape: "S99"
                                },
                                ReplacementTags: {
                                    shape: "S92"
                                },
                                ReplacementEmailContent: {
                                    type: "structure",
                                    members: {
                                        ReplacementTemplate: {
                                            type: "structure",
                                            members: {
                                                ReplacementTemplateData: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "BulkEmailEntryResults" ],
                members: {
                    BulkEmailEntryResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Status: {},
                                Error: {},
                                MessageId: {}
                            }
                        }
                    }
                }
            }
        },
        SendCustomVerificationEmail: {
            http: {
                requestUri: "/v2/email/outbound-custom-verification-emails"
            },
            input: {
                type: "structure",
                required: [ "EmailAddress", "TemplateName" ],
                members: {
                    EmailAddress: {},
                    TemplateName: {},
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        SendEmail: {
            http: {
                requestUri: "/v2/email/outbound-emails"
            },
            input: {
                type: "structure",
                required: [ "Content" ],
                members: {
                    FromEmailAddress: {},
                    FromEmailAddressIdentityArn: {},
                    Destination: {
                        shape: "S99"
                    },
                    ReplyToAddresses: {
                        shape: "S91"
                    },
                    FeedbackForwardingEmailAddress: {},
                    FeedbackForwardingEmailAddressIdentityArn: {},
                    Content: {
                        shape: "S1r"
                    },
                    EmailTags: {
                        shape: "S92"
                    },
                    ConfigurationSetName: {},
                    ListManagementOptions: {
                        type: "structure",
                        required: [ "ContactListName" ],
                        members: {
                            ContactListName: {},
                            TopicName: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v2/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TestRenderEmailTemplate: {
            http: {
                requestUri: "/v2/email/templates/{TemplateName}/render"
            },
            input: {
                type: "structure",
                required: [ "TemplateName", "TemplateData" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    },
                    TemplateData: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RenderedTemplate" ],
                members: {
                    RenderedTemplate: {}
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v2/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "TagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConfigurationSetEventDestination: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName", "EventDestination" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    },
                    EventDestination: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContact: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/contact-lists/{ContactListName}/contacts/{EmailAddress}"
            },
            input: {
                type: "structure",
                required: [ "ContactListName", "EmailAddress" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    },
                    EmailAddress: {
                        location: "uri",
                        locationName: "EmailAddress"
                    },
                    TopicPreferences: {
                        shape: "S13"
                    },
                    UnsubscribeAll: {
                        type: "boolean"
                    },
                    AttributesData: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContactList: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/contact-lists/{ContactListName}"
            },
            input: {
                type: "structure",
                required: [ "ContactListName" ],
                members: {
                    ContactListName: {
                        location: "uri",
                        locationName: "ContactListName"
                    },
                    Topics: {
                        shape: "S1b"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCustomVerificationEmailTemplate: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/custom-verification-email-templates/{TemplateName}"
            },
            input: {
                type: "structure",
                required: [ "TemplateName", "FromEmailAddress", "TemplateSubject", "TemplateContent", "SuccessRedirectionURL", "FailureRedirectionURL" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    },
                    FromEmailAddress: {},
                    TemplateSubject: {},
                    TemplateContent: {},
                    SuccessRedirectionURL: {},
                    FailureRedirectionURL: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEmailIdentityPolicy: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/identities/{EmailIdentity}/policies/{PolicyName}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity", "PolicyName", "Policy" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    PolicyName: {
                        location: "uri",
                        locationName: "PolicyName"
                    },
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEmailTemplate: {
            http: {
                method: "PUT",
                requestUri: "/v2/email/templates/{TemplateName}"
            },
            input: {
                type: "structure",
                required: [ "TemplateName", "TemplateContent" ],
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "TemplateName"
                    },
                    TemplateContent: {
                        shape: "S2l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "CustomRedirectDomain" ],
            members: {
                CustomRedirectDomain: {}
            }
        },
        S5: {
            type: "structure",
            members: {
                TlsPolicy: {},
                SendingPoolName: {}
            }
        },
        S8: {
            type: "structure",
            members: {
                ReputationMetricsEnabled: {
                    type: "boolean"
                },
                LastFreshStart: {
                    type: "timestamp"
                }
            }
        },
        Sb: {
            type: "structure",
            members: {
                SendingEnabled: {
                    type: "boolean"
                }
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sg: {
            type: "structure",
            members: {
                SuppressedReasons: {
                    shape: "Sh"
                }
            }
        },
        Sh: {
            type: "list",
            member: {}
        },
        Sm: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                MatchingEventTypes: {
                    shape: "Sn"
                },
                KinesisFirehoseDestination: {
                    shape: "Sp"
                },
                CloudWatchDestination: {
                    shape: "Sr"
                },
                SnsDestination: {
                    shape: "Sx"
                },
                PinpointDestination: {
                    shape: "Sy"
                }
            }
        },
        Sn: {
            type: "list",
            member: {}
        },
        Sp: {
            type: "structure",
            required: [ "IamRoleArn", "DeliveryStreamArn" ],
            members: {
                IamRoleArn: {},
                DeliveryStreamArn: {}
            }
        },
        Sr: {
            type: "structure",
            required: [ "DimensionConfigurations" ],
            members: {
                DimensionConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DimensionName", "DimensionValueSource", "DefaultDimensionValue" ],
                        members: {
                            DimensionName: {},
                            DimensionValueSource: {},
                            DefaultDimensionValue: {}
                        }
                    }
                }
            }
        },
        Sx: {
            type: "structure",
            required: [ "TopicArn" ],
            members: {
                TopicArn: {}
            }
        },
        Sy: {
            type: "structure",
            members: {
                ApplicationArn: {}
            }
        },
        S13: {
            type: "list",
            member: {
                type: "structure",
                required: [ "TopicName", "SubscriptionStatus" ],
                members: {
                    TopicName: {},
                    SubscriptionStatus: {}
                }
            }
        },
        S1b: {
            type: "list",
            member: {
                type: "structure",
                required: [ "TopicName", "DisplayName", "DefaultSubscriptionStatus" ],
                members: {
                    TopicName: {},
                    DisplayName: {},
                    Description: {},
                    DefaultSubscriptionStatus: {}
                }
            }
        },
        S1r: {
            type: "structure",
            members: {
                Simple: {
                    type: "structure",
                    required: [ "Subject", "Body" ],
                    members: {
                        Subject: {
                            shape: "S1t"
                        },
                        Body: {
                            type: "structure",
                            members: {
                                Text: {
                                    shape: "S1t"
                                },
                                Html: {
                                    shape: "S1t"
                                }
                            }
                        }
                    }
                },
                Raw: {
                    type: "structure",
                    required: [ "Data" ],
                    members: {
                        Data: {
                            type: "blob"
                        }
                    }
                },
                Template: {
                    shape: "S1z"
                }
            }
        },
        S1t: {
            type: "structure",
            required: [ "Data" ],
            members: {
                Data: {},
                Charset: {}
            }
        },
        S1z: {
            type: "structure",
            members: {
                TemplateName: {},
                TemplateArn: {},
                TemplateData: {}
            }
        },
        S26: {
            type: "structure",
            required: [ "DomainSigningSelector", "DomainSigningPrivateKey" ],
            members: {
                DomainSigningSelector: {},
                DomainSigningPrivateKey: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S2b: {
            type: "structure",
            members: {
                SigningEnabled: {
                    type: "boolean"
                },
                Status: {},
                Tokens: {
                    shape: "S2d"
                },
                SigningAttributesOrigin: {}
            }
        },
        S2d: {
            type: "list",
            member: {}
        },
        S2l: {
            type: "structure",
            members: {
                Subject: {},
                Text: {},
                Html: {}
            }
        },
        S2q: {
            type: "structure",
            members: {
                SuppressionListDestination: {
                    type: "structure",
                    required: [ "SuppressionListImportAction" ],
                    members: {
                        SuppressionListImportAction: {}
                    }
                },
                ContactListDestination: {
                    type: "structure",
                    required: [ "ContactListName", "ContactListImportAction" ],
                    members: {
                        ContactListName: {},
                        ContactListImportAction: {}
                    }
                }
            }
        },
        S2v: {
            type: "structure",
            required: [ "S3Url", "DataFormat" ],
            members: {
                S3Url: {},
                DataFormat: {}
            }
        },
        S3u: {
            type: "string",
            sensitive: true
        },
        S3w: {
            type: "string",
            sensitive: true
        },
        S3x: {
            type: "list",
            member: {
                type: "string",
                sensitive: true
            },
            sensitive: true
        },
        S4r: {
            type: "structure",
            required: [ "Ip", "WarmupStatus", "WarmupPercentage" ],
            members: {
                Ip: {},
                WarmupStatus: {},
                WarmupPercentage: {
                    type: "integer"
                },
                PoolName: {}
            }
        },
        S52: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Domain: {},
                    SubscriptionStartDate: {
                        type: "timestamp"
                    },
                    InboxPlacementTrackingOption: {
                        type: "structure",
                        members: {
                            Global: {
                                type: "boolean"
                            },
                            TrackedIsps: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S5a: {
            type: "structure",
            members: {
                ReportId: {},
                ReportName: {},
                Subject: {},
                FromEmailAddress: {},
                CreateDate: {
                    type: "timestamp"
                },
                DeliverabilityTestStatus: {}
            }
        },
        S5c: {
            type: "structure",
            members: {
                InboxPercentage: {
                    type: "double"
                },
                SpamPercentage: {
                    type: "double"
                },
                MissingPercentage: {
                    type: "double"
                },
                SpfPercentage: {
                    type: "double"
                },
                DkimPercentage: {
                    type: "double"
                }
            }
        },
        S5k: {
            type: "structure",
            members: {
                CampaignId: {},
                ImageUrl: {},
                Subject: {},
                FromAddress: {},
                SendingIps: {
                    type: "list",
                    member: {}
                },
                FirstSeenDateTime: {
                    type: "timestamp"
                },
                LastSeenDateTime: {
                    type: "timestamp"
                },
                InboxCount: {
                    type: "long"
                },
                SpamCount: {
                    type: "long"
                },
                ReadRate: {
                    type: "double"
                },
                DeleteRate: {
                    type: "double"
                },
                ReadDeleteRate: {
                    type: "double"
                },
                ProjectedVolume: {
                    type: "long"
                },
                Esps: {
                    type: "list",
                    member: {}
                }
            }
        },
        S5u: {
            type: "structure",
            members: {
                InboxRawCount: {
                    type: "long"
                },
                SpamRawCount: {
                    type: "long"
                },
                ProjectedInbox: {
                    type: "long"
                },
                ProjectedSpam: {
                    type: "long"
                }
            }
        },
        S5v: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    IspName: {},
                    InboxRawCount: {
                        type: "long"
                    },
                    SpamRawCount: {
                        type: "long"
                    },
                    InboxPercentage: {
                        type: "double"
                    },
                    SpamPercentage: {
                        type: "double"
                    }
                }
            }
        },
        S65: {
            type: "map",
            key: {},
            value: {}
        },
        S91: {
            type: "list",
            member: {}
        },
        S92: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S99: {
            type: "structure",
            members: {
                ToAddresses: {
                    shape: "S91"
                },
                CcAddresses: {
                    shape: "S91"
                },
                BccAddresses: {
                    shape: "S91"
                }
            }
        }
    },
    paginators: {
        GetDedicatedIps: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListConfigurationSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListContactLists: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListContacts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListCustomVerificationEmailTemplates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDedicatedIpPools: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDeliverabilityTestReports: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDomainDeliverabilityCampaigns: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListEmailIdentities: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListEmailTemplates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListImportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListSuppressedDestinations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        }
    }
};

AWS.apiLoader.services["migrationhubconfig"] = {};

AWS.MigrationHubConfig = AWS.Service.defineService("migrationhubconfig", [ "2019-06-30" ]);

AWS.apiLoader.services["migrationhubconfig"]["2019-06-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-06-30",
        endpointPrefix: "migrationhub-config",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Migration Hub Config",
        serviceId: "MigrationHub Config",
        signatureVersion: "v4",
        signingName: "mgh",
        targetPrefix: "AWSMigrationHubMultiAccountService",
        uid: "migrationhub-config-2019-06-30"
    },
    operations: {
        CreateHomeRegionControl: {
            input: {
                type: "structure",
                required: [ "HomeRegion", "Target" ],
                members: {
                    HomeRegion: {},
                    Target: {
                        shape: "S3"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HomeRegionControl: {
                        shape: "S8"
                    }
                }
            }
        },
        DescribeHomeRegionControls: {
            input: {
                type: "structure",
                members: {
                    ControlId: {},
                    HomeRegion: {},
                    Target: {
                        shape: "S3"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HomeRegionControls: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetHomeRegion: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    HomeRegion: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {},
                Id: {}
            }
        },
        S8: {
            type: "structure",
            members: {
                ControlId: {},
                HomeRegion: {},
                Target: {
                    shape: "S3"
                },
                RequestedTime: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {
        DescribeHomeRegionControls: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["connectparticipant"] = {};

AWS.ConnectParticipant = AWS.Service.defineService("connectparticipant", [ "2018-09-07" ]);

AWS.apiLoader.services["connectparticipant"]["2018-09-07"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-09-07",
        endpointPrefix: "participant.connect",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon Connect Participant",
        serviceFullName: "Amazon Connect Participant Service",
        serviceId: "ConnectParticipant",
        signatureVersion: "v4",
        signingName: "execute-api",
        uid: "connectparticipant-2018-09-07"
    },
    operations: {
        CompleteAttachmentUpload: {
            http: {
                requestUri: "/participant/complete-attachment-upload"
            },
            input: {
                type: "structure",
                required: [ "AttachmentIds", "ClientToken", "ConnectionToken" ],
                members: {
                    AttachmentIds: {
                        type: "list",
                        member: {}
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateParticipantConnection: {
            http: {
                requestUri: "/participant/connection"
            },
            input: {
                type: "structure",
                required: [ "Type", "ParticipantToken" ],
                members: {
                    Type: {
                        type: "list",
                        member: {}
                    },
                    ParticipantToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Websocket: {
                        type: "structure",
                        members: {
                            Url: {},
                            ConnectionExpiry: {}
                        }
                    },
                    ConnectionCredentials: {
                        type: "structure",
                        members: {
                            ConnectionToken: {},
                            Expiry: {}
                        }
                    }
                }
            }
        },
        DisconnectParticipant: {
            http: {
                requestUri: "/participant/disconnect"
            },
            input: {
                type: "structure",
                required: [ "ConnectionToken" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAttachment: {
            http: {
                requestUri: "/participant/attachment"
            },
            input: {
                type: "structure",
                required: [ "AttachmentId", "ConnectionToken" ],
                members: {
                    AttachmentId: {},
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Url: {},
                    UrlExpiry: {}
                }
            }
        },
        GetTranscript: {
            http: {
                requestUri: "/participant/transcript"
            },
            input: {
                type: "structure",
                required: [ "ConnectionToken" ],
                members: {
                    ContactId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ScanDirection: {},
                    SortOrder: {},
                    StartPosition: {
                        type: "structure",
                        members: {
                            Id: {},
                            AbsoluteTime: {},
                            MostRecent: {
                                type: "integer"
                            }
                        }
                    },
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InitialContactId: {},
                    Transcript: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AbsoluteTime: {},
                                Content: {},
                                ContentType: {},
                                Id: {},
                                Type: {},
                                ParticipantId: {},
                                DisplayName: {},
                                ParticipantRole: {},
                                Attachments: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ContentType: {},
                                            AttachmentId: {},
                                            AttachmentName: {},
                                            Status: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        SendEvent: {
            http: {
                requestUri: "/participant/event"
            },
            input: {
                type: "structure",
                required: [ "ContentType", "ConnectionToken" ],
                members: {
                    ContentType: {},
                    Content: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    AbsoluteTime: {}
                }
            }
        },
        SendMessage: {
            http: {
                requestUri: "/participant/message"
            },
            input: {
                type: "structure",
                required: [ "ContentType", "Content", "ConnectionToken" ],
                members: {
                    ContentType: {},
                    Content: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    AbsoluteTime: {}
                }
            }
        },
        StartAttachmentUpload: {
            http: {
                requestUri: "/participant/start-attachment-upload"
            },
            input: {
                type: "structure",
                required: [ "ContentType", "AttachmentSizeInBytes", "AttachmentName", "ClientToken", "ConnectionToken" ],
                members: {
                    ContentType: {},
                    AttachmentSizeInBytes: {
                        type: "long"
                    },
                    AttachmentName: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ConnectionToken: {
                        location: "header",
                        locationName: "X-Amz-Bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AttachmentId: {},
                    UploadMetadata: {
                        type: "structure",
                        members: {
                            Url: {},
                            UrlExpiry: {},
                            HeadersToInclude: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {},
    paginators: {
        GetTranscript: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["appconfig"] = {};

AWS.AppConfig = AWS.Service.defineService("appconfig", [ "2019-10-09" ]);

AWS.apiLoader.services["appconfig"]["2019-10-09"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-10-09",
        endpointPrefix: "appconfig",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AppConfig",
        serviceFullName: "Amazon AppConfig",
        serviceId: "AppConfig",
        signatureVersion: "v4",
        signingName: "appconfig",
        uid: "appconfig-2019-10-09"
    },
    operations: {
        CreateApplication: {
            http: {
                requestUri: "/applications",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                shape: "S7"
            }
        },
        CreateConfigurationProfile: {
            http: {
                requestUri: "/applications/{ApplicationId}/configurationprofiles",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "Name", "LocationUri" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    Name: {},
                    Description: {},
                    LocationUri: {},
                    RetrievalRoleArn: {},
                    Validators: {
                        shape: "Sc"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                shape: "Sg"
            }
        },
        CreateDeploymentStrategy: {
            http: {
                requestUri: "/deploymentstrategies",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "DeploymentDurationInMinutes", "GrowthFactor", "ReplicateTo" ],
                members: {
                    Name: {},
                    Description: {},
                    DeploymentDurationInMinutes: {
                        type: "integer"
                    },
                    FinalBakeTimeInMinutes: {
                        type: "integer"
                    },
                    GrowthFactor: {
                        type: "float"
                    },
                    GrowthType: {},
                    ReplicateTo: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                shape: "Sm"
            }
        },
        CreateEnvironment: {
            http: {
                requestUri: "/applications/{ApplicationId}/environments",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "Name" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    Name: {},
                    Description: {},
                    Monitors: {
                        shape: "Sp"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                shape: "Ss"
            }
        },
        CreateHostedConfigurationVersion: {
            http: {
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId", "Content", "ContentType" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    },
                    Description: {
                        location: "header",
                        locationName: "Description"
                    },
                    Content: {
                        shape: "Sv"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    LatestVersionNumber: {
                        location: "header",
                        locationName: "Latest-Version-Number",
                        type: "integer"
                    }
                },
                payload: "Content"
            },
            output: {
                shape: "Sy"
            }
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{ApplicationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    }
                }
            }
        },
        DeleteConfigurationProfile: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    }
                }
            }
        },
        DeleteDeploymentStrategy: {
            http: {
                method: "DELETE",
                requestUri: "/deployementstrategies/{DeploymentStrategyId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "DeploymentStrategyId" ],
                members: {
                    DeploymentStrategyId: {
                        location: "uri",
                        locationName: "DeploymentStrategyId"
                    }
                }
            }
        },
        DeleteEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    }
                }
            }
        },
        DeleteHostedConfigurationVersion: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions/{VersionNumber}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId", "VersionNumber" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    },
                    VersionNumber: {
                        location: "uri",
                        locationName: "VersionNumber",
                        type: "integer"
                    }
                }
            }
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    }
                }
            },
            output: {
                shape: "S7"
            }
        },
        GetConfiguration: {
            http: {
                method: "GET",
                requestUri: "/applications/{Application}/environments/{Environment}/configurations/{Configuration}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Application", "Environment", "Configuration", "ClientId" ],
                members: {
                    Application: {
                        location: "uri",
                        locationName: "Application"
                    },
                    Environment: {
                        location: "uri",
                        locationName: "Environment"
                    },
                    Configuration: {
                        location: "uri",
                        locationName: "Configuration"
                    },
                    ClientId: {
                        location: "querystring",
                        locationName: "client_id"
                    },
                    ClientConfigurationVersion: {
                        location: "querystring",
                        locationName: "client_configuration_version"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Content: {
                        shape: "Sv"
                    },
                    ConfigurationVersion: {
                        location: "header",
                        locationName: "Configuration-Version"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "Content"
            }
        },
        GetConfigurationProfile: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    }
                }
            },
            output: {
                shape: "Sg"
            }
        },
        GetDeployment: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments/{DeploymentNumber}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId", "DeploymentNumber" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    },
                    DeploymentNumber: {
                        location: "uri",
                        locationName: "DeploymentNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S1d"
            }
        },
        GetDeploymentStrategy: {
            http: {
                method: "GET",
                requestUri: "/deploymentstrategies/{DeploymentStrategyId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeploymentStrategyId" ],
                members: {
                    DeploymentStrategyId: {
                        location: "uri",
                        locationName: "DeploymentStrategyId"
                    }
                }
            },
            output: {
                shape: "Sm"
            }
        },
        GetEnvironment: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    }
                }
            },
            output: {
                shape: "Ss"
            }
        },
        GetHostedConfigurationVersion: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions/{VersionNumber}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId", "VersionNumber" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    },
                    VersionNumber: {
                        location: "uri",
                        locationName: "VersionNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "Sy"
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConfigurationProfiles: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/configurationprofiles",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {},
                                Id: {},
                                Name: {},
                                LocationUri: {},
                                ValidatorTypes: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDeploymentStrategies: {
            http: {
                method: "GET",
                requestUri: "/deploymentstrategies",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDeployments: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeploymentNumber: {
                                    type: "integer"
                                },
                                ConfigurationName: {},
                                ConfigurationVersion: {},
                                DeploymentDurationInMinutes: {
                                    type: "integer"
                                },
                                GrowthType: {},
                                GrowthFactor: {
                                    type: "float"
                                },
                                FinalBakeTimeInMinutes: {
                                    type: "integer"
                                },
                                State: {},
                                PercentageComplete: {
                                    type: "float"
                                },
                                StartedAt: {
                                    shape: "S1j"
                                },
                                CompletedAt: {
                                    shape: "S1j"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEnvironments: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            shape: "Ss"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListHostedConfigurationVersions: {
            http: {
                method: "GET",
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max_results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {},
                                ConfigurationProfileId: {},
                                VersionNumber: {
                                    type: "integer"
                                },
                                Description: {},
                                ContentType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S4"
                    }
                }
            }
        },
        StartDeployment: {
            http: {
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId", "DeploymentStrategyId", "ConfigurationProfileId", "ConfigurationVersion" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    },
                    DeploymentStrategyId: {},
                    ConfigurationProfileId: {},
                    ConfigurationVersion: {},
                    Description: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                shape: "S1d"
            }
        },
        StopDeployment: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments/{DeploymentNumber}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId", "DeploymentNumber" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    },
                    DeploymentNumber: {
                        location: "uri",
                        locationName: "DeploymentNumber",
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S1d"
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateApplication: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{ApplicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    Name: {},
                    Description: {}
                }
            },
            output: {
                shape: "S7"
            }
        },
        UpdateConfigurationProfile: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    },
                    Name: {},
                    Description: {},
                    RetrievalRoleArn: {},
                    Validators: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                shape: "Sg"
            }
        },
        UpdateDeploymentStrategy: {
            http: {
                method: "PATCH",
                requestUri: "/deploymentstrategies/{DeploymentStrategyId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeploymentStrategyId" ],
                members: {
                    DeploymentStrategyId: {
                        location: "uri",
                        locationName: "DeploymentStrategyId"
                    },
                    Description: {},
                    DeploymentDurationInMinutes: {
                        type: "integer"
                    },
                    FinalBakeTimeInMinutes: {
                        type: "integer"
                    },
                    GrowthFactor: {
                        type: "float"
                    },
                    GrowthType: {}
                }
            },
            output: {
                shape: "Sm"
            }
        },
        UpdateEnvironment: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{ApplicationId}/environments/{EnvironmentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "EnvironmentId" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    EnvironmentId: {
                        location: "uri",
                        locationName: "EnvironmentId"
                    },
                    Name: {},
                    Description: {},
                    Monitors: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                shape: "Ss"
            }
        },
        ValidateConfiguration: {
            http: {
                requestUri: "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/validators",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ApplicationId", "ConfigurationProfileId", "ConfigurationVersion" ],
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "ApplicationId"
                    },
                    ConfigurationProfileId: {
                        location: "uri",
                        locationName: "ConfigurationProfileId"
                    },
                    ConfigurationVersion: {
                        location: "querystring",
                        locationName: "configuration_version"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "map",
            key: {},
            value: {}
        },
        S7: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Description: {}
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "Content" ],
                members: {
                    Type: {},
                    Content: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        Sg: {
            type: "structure",
            members: {
                ApplicationId: {},
                Id: {},
                Name: {},
                Description: {},
                LocationUri: {},
                RetrievalRoleArn: {},
                Validators: {
                    shape: "Sc"
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Description: {},
                DeploymentDurationInMinutes: {
                    type: "integer"
                },
                GrowthType: {},
                GrowthFactor: {
                    type: "float"
                },
                FinalBakeTimeInMinutes: {
                    type: "integer"
                },
                ReplicateTo: {}
            }
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AlarmArn: {},
                    AlarmRoleArn: {}
                }
            }
        },
        Ss: {
            type: "structure",
            members: {
                ApplicationId: {},
                Id: {},
                Name: {},
                Description: {},
                State: {},
                Monitors: {
                    shape: "Sp"
                }
            }
        },
        Sv: {
            type: "blob",
            sensitive: true
        },
        Sy: {
            type: "structure",
            members: {
                ApplicationId: {
                    location: "header",
                    locationName: "Application-Id"
                },
                ConfigurationProfileId: {
                    location: "header",
                    locationName: "Configuration-Profile-Id"
                },
                VersionNumber: {
                    location: "header",
                    locationName: "Version-Number",
                    type: "integer"
                },
                Description: {
                    location: "header",
                    locationName: "Description"
                },
                Content: {
                    shape: "Sv"
                },
                ContentType: {
                    location: "header",
                    locationName: "Content-Type"
                }
            },
            payload: "Content"
        },
        S1d: {
            type: "structure",
            members: {
                ApplicationId: {},
                EnvironmentId: {},
                DeploymentStrategyId: {},
                ConfigurationProfileId: {},
                DeploymentNumber: {
                    type: "integer"
                },
                ConfigurationName: {},
                ConfigurationLocationUri: {},
                ConfigurationVersion: {},
                Description: {},
                DeploymentDurationInMinutes: {
                    type: "integer"
                },
                GrowthType: {},
                GrowthFactor: {
                    type: "float"
                },
                FinalBakeTimeInMinutes: {
                    type: "integer"
                },
                State: {},
                EventLog: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            EventType: {},
                            TriggeredBy: {},
                            Description: {},
                            OccurredAt: {
                                shape: "S1j"
                            }
                        }
                    }
                },
                PercentageComplete: {
                    type: "float"
                },
                StartedAt: {
                    shape: "S1j"
                },
                CompletedAt: {
                    shape: "S1j"
                }
            }
        },
        S1j: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        ListApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListConfigurationProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDeploymentStrategies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDeployments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListEnvironments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListHostedConfigurationVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["iotsecuretunneling"] = {};

AWS.IoTSecureTunneling = AWS.Service.defineService("iotsecuretunneling", [ "2018-10-05" ]);

AWS.apiLoader.services["iotsecuretunneling"]["2018-10-05"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-10-05",
        endpointPrefix: "api.tunneling.iot",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS IoT Secure Tunneling",
        serviceId: "IoTSecureTunneling",
        signatureVersion: "v4",
        signingName: "IoTSecuredTunneling",
        targetPrefix: "IoTSecuredTunneling",
        uid: "iotsecuretunneling-2018-10-05"
    },
    operations: {
        CloseTunnel: {
            input: {
                type: "structure",
                required: [ "tunnelId" ],
                members: {
                    tunnelId: {},
                    delete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeTunnel: {
            input: {
                type: "structure",
                required: [ "tunnelId" ],
                members: {
                    tunnelId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tunnel: {
                        type: "structure",
                        members: {
                            tunnelId: {},
                            tunnelArn: {},
                            status: {},
                            sourceConnectionState: {
                                shape: "Sa"
                            },
                            destinationConnectionState: {
                                shape: "Sa"
                            },
                            description: {},
                            destinationConfig: {
                                shape: "Se"
                            },
                            timeoutConfig: {
                                shape: "Si"
                            },
                            tags: {
                                shape: "Sk"
                            },
                            createdAt: {
                                type: "timestamp"
                            },
                            lastUpdatedAt: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sk"
                    }
                }
            }
        },
        ListTunnels: {
            input: {
                type: "structure",
                members: {
                    thingName: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tunnelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                tunnelId: {},
                                tunnelArn: {},
                                status: {},
                                description: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        OpenTunnel: {
            input: {
                type: "structure",
                members: {
                    description: {},
                    tags: {
                        shape: "Sk"
                    },
                    destinationConfig: {
                        shape: "Se"
                    },
                    timeoutConfig: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tunnelId: {},
                    tunnelArn: {},
                    sourceAccessToken: {
                        shape: "Sz"
                    },
                    destinationAccessToken: {
                        shape: "Sz"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sa: {
            type: "structure",
            members: {
                status: {},
                lastUpdatedAt: {
                    type: "timestamp"
                }
            }
        },
        Se: {
            type: "structure",
            required: [ "services" ],
            members: {
                thingName: {},
                services: {
                    type: "list",
                    member: {}
                }
            }
        },
        Si: {
            type: "structure",
            members: {
                maxLifetimeTimeoutMinutes: {
                    type: "integer"
                }
            }
        },
        Sk: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sz: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListTunnels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["wafv2"] = {};

AWS.WAFV2 = AWS.Service.defineService("wafv2", [ "2019-07-29" ]);

AWS.apiLoader.services["wafv2"]["2019-07-29"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-07-29",
        endpointPrefix: "wafv2",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "WAFV2",
        serviceFullName: "AWS WAFV2",
        serviceId: "WAFV2",
        signatureVersion: "v4",
        targetPrefix: "AWSWAF_20190729",
        uid: "wafv2-2019-07-29"
    },
    operations: {
        AssociateWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLArn", "ResourceArn" ],
                members: {
                    WebACLArn: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CheckCapacity: {
            input: {
                type: "structure",
                required: [ "Scope", "Rules" ],
                members: {
                    Scope: {},
                    Rules: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Capacity: {
                        type: "long"
                    }
                }
            }
        },
        CreateIPSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "IPAddressVersion", "Addresses" ],
                members: {
                    Name: {},
                    Scope: {},
                    Description: {},
                    IPAddressVersion: {},
                    Addresses: {
                        shape: "S2j"
                    },
                    Tags: {
                        shape: "S2l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Summary: {
                        shape: "S2q"
                    }
                }
            }
        },
        CreateRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "RegularExpressionList" ],
                members: {
                    Name: {},
                    Scope: {},
                    Description: {},
                    RegularExpressionList: {
                        shape: "S2u"
                    },
                    Tags: {
                        shape: "S2l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Summary: {
                        shape: "S2x"
                    }
                }
            }
        },
        CreateRuleGroup: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Capacity", "VisibilityConfig" ],
                members: {
                    Name: {},
                    Scope: {},
                    Capacity: {
                        type: "long"
                    },
                    Description: {},
                    Rules: {
                        shape: "S6"
                    },
                    VisibilityConfig: {
                        shape: "S2b"
                    },
                    Tags: {
                        shape: "S2l"
                    },
                    CustomResponseBodies: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Summary: {
                        shape: "S35"
                    }
                }
            }
        },
        CreateWebACL: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "DefaultAction", "VisibilityConfig" ],
                members: {
                    Name: {},
                    Scope: {},
                    DefaultAction: {
                        shape: "S37"
                    },
                    Description: {},
                    Rules: {
                        shape: "S6"
                    },
                    VisibilityConfig: {
                        shape: "S2b"
                    },
                    Tags: {
                        shape: "S2l"
                    },
                    CustomResponseBodies: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Summary: {
                        shape: "S39"
                    }
                }
            }
        },
        DeleteFirewallManagerRuleGroups: {
            input: {
                type: "structure",
                required: [ "WebACLArn", "WebACLLockToken" ],
                members: {
                    WebACLArn: {},
                    WebACLLockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextWebACLLockToken: {}
                }
            }
        },
        DeleteIPSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    LockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    LockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRuleGroup: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    LockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWebACL: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    LockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeManagedRuleGroup: {
            input: {
                type: "structure",
                required: [ "VendorName", "Name", "Scope" ],
                members: {
                    VendorName: {},
                    Name: {},
                    Scope: {},
                    VersionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VersionName: {},
                    SnsTopicArn: {},
                    Capacity: {
                        type: "long"
                    },
                    Rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Action: {
                                    shape: "S1v"
                                }
                            }
                        }
                    },
                    LabelNamespace: {},
                    AvailableLabels: {
                        shape: "S3s"
                    },
                    ConsumedLabels: {
                        shape: "S3s"
                    }
                }
            }
        },
        DisassociateWebACL: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetIPSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IPSet: {
                        type: "structure",
                        required: [ "Name", "Id", "ARN", "IPAddressVersion", "Addresses" ],
                        members: {
                            Name: {},
                            Id: {},
                            ARN: {},
                            Description: {},
                            IPAddressVersion: {},
                            Addresses: {
                                shape: "S2j"
                            }
                        }
                    },
                    LockToken: {}
                }
            }
        },
        GetLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S41"
                    }
                }
            }
        },
        GetManagedRuleSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManagedRuleSet: {
                        type: "structure",
                        required: [ "Name", "Id", "ARN" ],
                        members: {
                            Name: {},
                            Id: {},
                            ARN: {},
                            Description: {},
                            PublishedVersions: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        AssociatedRuleGroupArn: {},
                                        Capacity: {
                                            type: "long"
                                        },
                                        ForecastedLifetime: {
                                            type: "integer"
                                        },
                                        PublishTimestamp: {
                                            type: "timestamp"
                                        },
                                        LastUpdateTimestamp: {
                                            type: "timestamp"
                                        },
                                        ExpiryTimestamp: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            },
                            RecommendedVersion: {},
                            LabelNamespace: {}
                        }
                    },
                    LockToken: {}
                }
            }
        },
        GetPermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        GetRateBasedStatementManagedKeys: {
            input: {
                type: "structure",
                required: [ "Scope", "WebACLName", "WebACLId", "RuleName" ],
                members: {
                    Scope: {},
                    WebACLName: {},
                    WebACLId: {},
                    RuleGroupRuleName: {},
                    RuleName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManagedKeysIPV4: {
                        shape: "S4q"
                    },
                    ManagedKeysIPV6: {
                        shape: "S4q"
                    }
                }
            }
        },
        GetRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexPatternSet: {
                        type: "structure",
                        members: {
                            Name: {},
                            Id: {},
                            ARN: {},
                            Description: {},
                            RegularExpressionList: {
                                shape: "S2u"
                            }
                        }
                    },
                    LockToken: {}
                }
            }
        },
        GetRuleGroup: {
            input: {
                type: "structure",
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    ARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleGroup: {
                        type: "structure",
                        required: [ "Name", "Id", "Capacity", "ARN", "VisibilityConfig" ],
                        members: {
                            Name: {},
                            Id: {},
                            Capacity: {
                                type: "long"
                            },
                            ARN: {},
                            Description: {},
                            Rules: {
                                shape: "S6"
                            },
                            VisibilityConfig: {
                                shape: "S2b"
                            },
                            LabelNamespace: {},
                            CustomResponseBodies: {
                                shape: "S30"
                            },
                            AvailableLabels: {
                                shape: "S3s"
                            },
                            ConsumedLabels: {
                                shape: "S3s"
                            }
                        }
                    },
                    LockToken: {}
                }
            }
        },
        GetSampledRequests: {
            input: {
                type: "structure",
                required: [ "WebAclArn", "RuleMetricName", "Scope", "TimeWindow", "MaxItems" ],
                members: {
                    WebAclArn: {},
                    RuleMetricName: {},
                    Scope: {},
                    TimeWindow: {
                        shape: "S4y"
                    },
                    MaxItems: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SampledRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Request", "Weight" ],
                            members: {
                                Request: {
                                    type: "structure",
                                    members: {
                                        ClientIP: {},
                                        Country: {},
                                        URI: {},
                                        Method: {},
                                        HTTPVersion: {},
                                        Headers: {
                                            shape: "S59"
                                        }
                                    }
                                },
                                Weight: {
                                    type: "long"
                                },
                                Timestamp: {
                                    type: "timestamp"
                                },
                                Action: {},
                                RuleNameWithinRuleGroup: {},
                                RequestHeadersInserted: {
                                    shape: "S59"
                                },
                                ResponseCodeSent: {
                                    type: "integer"
                                },
                                Labels: {
                                    shape: "S28"
                                }
                            }
                        }
                    },
                    PopulationSize: {
                        type: "long"
                    },
                    TimeWindow: {
                        shape: "S4y"
                    }
                }
            }
        },
        GetWebACL: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACL: {
                        shape: "S5i"
                    },
                    LockToken: {}
                }
            }
        },
        GetWebACLForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACL: {
                        shape: "S5i"
                    }
                }
            }
        },
        ListAvailableManagedRuleGroupVersions: {
            input: {
                type: "structure",
                required: [ "VendorName", "Name", "Scope" ],
                members: {
                    VendorName: {},
                    Name: {},
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Versions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                LastUpdateTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListAvailableManagedRuleGroups: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    ManagedRuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VendorName: {},
                                Name: {},
                                Description: {}
                            }
                        }
                    }
                }
            }
        },
        ListIPSets: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    IPSets: {
                        type: "list",
                        member: {
                            shape: "S2q"
                        }
                    }
                }
            }
        },
        ListLoggingConfigurations: {
            input: {
                type: "structure",
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfigurations: {
                        type: "list",
                        member: {
                            shape: "S41"
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        ListManagedRuleSets: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    ManagedRuleSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Id: {},
                                Description: {},
                                LockToken: {},
                                ARN: {},
                                LabelNamespace: {}
                            }
                        }
                    }
                }
            }
        },
        ListRegexPatternSets: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RegexPatternSets: {
                        type: "list",
                        member: {
                            shape: "S2x"
                        }
                    }
                }
            }
        },
        ListResourcesForWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLArn" ],
                members: {
                    WebACLArn: {},
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArns: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListRuleGroups: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RuleGroups: {
                        type: "list",
                        member: {
                            shape: "S35"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    },
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    TagInfoForResource: {
                        type: "structure",
                        members: {
                            ResourceARN: {},
                            TagList: {
                                shape: "S2l"
                            }
                        }
                    }
                }
            }
        },
        ListWebACLs: {
            input: {
                type: "structure",
                required: [ "Scope" ],
                members: {
                    Scope: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    WebACLs: {
                        type: "list",
                        member: {
                            shape: "S39"
                        }
                    }
                }
            }
        },
        PutLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "LoggingConfiguration" ],
                members: {
                    LoggingConfiguration: {
                        shape: "S41"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S41"
                    }
                }
            }
        },
        PutManagedRuleSetVersions: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    LockToken: {},
                    RecommendedVersion: {},
                    VersionsToPublish: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                AssociatedRuleGroupArn: {},
                                ForecastedLifetime: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextLockToken: {}
                }
            }
        },
        PutPermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Policy" ],
                members: {
                    ResourceArn: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S2l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateIPSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "Addresses", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    Description: {},
                    Addresses: {
                        shape: "S2j"
                    },
                    LockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextLockToken: {}
                }
            }
        },
        UpdateManagedRuleSetVersionExpiryDate: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "LockToken", "VersionToExpire", "ExpiryTimestamp" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    LockToken: {},
                    VersionToExpire: {},
                    ExpiryTimestamp: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExpiringVersion: {},
                    ExpiryTimestamp: {
                        type: "timestamp"
                    },
                    NextLockToken: {}
                }
            }
        },
        UpdateRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "RegularExpressionList", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    Description: {},
                    RegularExpressionList: {
                        shape: "S2u"
                    },
                    LockToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextLockToken: {}
                }
            }
        },
        UpdateRuleGroup: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "VisibilityConfig", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    Description: {},
                    Rules: {
                        shape: "S6"
                    },
                    VisibilityConfig: {
                        shape: "S2b"
                    },
                    LockToken: {},
                    CustomResponseBodies: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextLockToken: {}
                }
            }
        },
        UpdateWebACL: {
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Id", "DefaultAction", "VisibilityConfig", "LockToken" ],
                members: {
                    Name: {},
                    Scope: {},
                    Id: {},
                    DefaultAction: {
                        shape: "S37"
                    },
                    Description: {},
                    Rules: {
                        shape: "S6"
                    },
                    VisibilityConfig: {
                        shape: "S2b"
                    },
                    LockToken: {},
                    CustomResponseBodies: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextLockToken: {}
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Priority", "Statement", "VisibilityConfig" ],
                members: {
                    Name: {},
                    Priority: {
                        type: "integer"
                    },
                    Statement: {
                        shape: "Sa"
                    },
                    Action: {
                        shape: "S1v"
                    },
                    OverrideAction: {
                        shape: "S26"
                    },
                    RuleLabels: {
                        shape: "S28"
                    },
                    VisibilityConfig: {
                        shape: "S2b"
                    }
                }
            }
        },
        Sa: {
            type: "structure",
            members: {
                ByteMatchStatement: {
                    type: "structure",
                    required: [ "SearchString", "FieldToMatch", "TextTransformations", "PositionalConstraint" ],
                    members: {
                        SearchString: {
                            type: "blob"
                        },
                        FieldToMatch: {
                            shape: "Sd"
                        },
                        TextTransformations: {
                            shape: "St"
                        },
                        PositionalConstraint: {}
                    }
                },
                SqliMatchStatement: {
                    type: "structure",
                    required: [ "FieldToMatch", "TextTransformations" ],
                    members: {
                        FieldToMatch: {
                            shape: "Sd"
                        },
                        TextTransformations: {
                            shape: "St"
                        }
                    }
                },
                XssMatchStatement: {
                    type: "structure",
                    required: [ "FieldToMatch", "TextTransformations" ],
                    members: {
                        FieldToMatch: {
                            shape: "Sd"
                        },
                        TextTransformations: {
                            shape: "St"
                        }
                    }
                },
                SizeConstraintStatement: {
                    type: "structure",
                    required: [ "FieldToMatch", "ComparisonOperator", "Size", "TextTransformations" ],
                    members: {
                        FieldToMatch: {
                            shape: "Sd"
                        },
                        ComparisonOperator: {},
                        Size: {
                            type: "long"
                        },
                        TextTransformations: {
                            shape: "St"
                        }
                    }
                },
                GeoMatchStatement: {
                    type: "structure",
                    members: {
                        CountryCodes: {
                            type: "list",
                            member: {}
                        },
                        ForwardedIPConfig: {
                            shape: "S16"
                        }
                    }
                },
                RuleGroupReferenceStatement: {
                    shape: "S19"
                },
                IPSetReferenceStatement: {
                    type: "structure",
                    required: [ "ARN" ],
                    members: {
                        ARN: {},
                        IPSetForwardedIPConfig: {
                            type: "structure",
                            required: [ "HeaderName", "FallbackBehavior", "Position" ],
                            members: {
                                HeaderName: {},
                                FallbackBehavior: {},
                                Position: {}
                            }
                        }
                    }
                },
                RegexPatternSetReferenceStatement: {
                    type: "structure",
                    required: [ "ARN", "FieldToMatch", "TextTransformations" ],
                    members: {
                        ARN: {},
                        FieldToMatch: {
                            shape: "Sd"
                        },
                        TextTransformations: {
                            shape: "St"
                        }
                    }
                },
                RateBasedStatement: {
                    type: "structure",
                    required: [ "Limit", "AggregateKeyType" ],
                    members: {
                        Limit: {
                            type: "long"
                        },
                        AggregateKeyType: {},
                        ScopeDownStatement: {
                            shape: "Sa"
                        },
                        ForwardedIPConfig: {
                            shape: "S16"
                        }
                    }
                },
                AndStatement: {
                    type: "structure",
                    required: [ "Statements" ],
                    members: {
                        Statements: {
                            shape: "S1k"
                        }
                    }
                },
                OrStatement: {
                    type: "structure",
                    required: [ "Statements" ],
                    members: {
                        Statements: {
                            shape: "S1k"
                        }
                    }
                },
                NotStatement: {
                    type: "structure",
                    required: [ "Statement" ],
                    members: {
                        Statement: {
                            shape: "Sa"
                        }
                    }
                },
                ManagedRuleGroupStatement: {
                    shape: "S1n"
                },
                LabelMatchStatement: {
                    type: "structure",
                    required: [ "Scope", "Key" ],
                    members: {
                        Scope: {},
                        Key: {}
                    }
                },
                RegexMatchStatement: {
                    type: "structure",
                    required: [ "RegexString", "FieldToMatch", "TextTransformations" ],
                    members: {
                        RegexString: {},
                        FieldToMatch: {
                            shape: "Sd"
                        },
                        TextTransformations: {
                            shape: "St"
                        }
                    }
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                SingleHeader: {
                    type: "structure",
                    required: [ "Name" ],
                    members: {
                        Name: {}
                    }
                },
                SingleQueryArgument: {
                    type: "structure",
                    required: [ "Name" ],
                    members: {
                        Name: {}
                    }
                },
                AllQueryArguments: {
                    type: "structure",
                    members: {}
                },
                UriPath: {
                    type: "structure",
                    members: {}
                },
                QueryString: {
                    type: "structure",
                    members: {}
                },
                Body: {
                    type: "structure",
                    members: {}
                },
                Method: {
                    type: "structure",
                    members: {}
                },
                JsonBody: {
                    type: "structure",
                    required: [ "MatchPattern", "MatchScope" ],
                    members: {
                        MatchPattern: {
                            type: "structure",
                            members: {
                                All: {
                                    type: "structure",
                                    members: {}
                                },
                                IncludedPaths: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        MatchScope: {},
                        InvalidFallbackBehavior: {}
                    }
                }
            }
        },
        St: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Priority", "Type" ],
                members: {
                    Priority: {
                        type: "integer"
                    },
                    Type: {}
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "HeaderName", "FallbackBehavior" ],
            members: {
                HeaderName: {},
                FallbackBehavior: {}
            }
        },
        S19: {
            type: "structure",
            required: [ "ARN" ],
            members: {
                ARN: {},
                ExcludedRules: {
                    shape: "S1a"
                }
            }
        },
        S1a: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        S1k: {
            type: "list",
            member: {
                shape: "Sa"
            }
        },
        S1n: {
            type: "structure",
            required: [ "VendorName", "Name" ],
            members: {
                VendorName: {},
                Name: {},
                Version: {},
                ExcludedRules: {
                    shape: "S1a"
                },
                ScopeDownStatement: {
                    shape: "Sa"
                }
            }
        },
        S1v: {
            type: "structure",
            members: {
                Block: {
                    shape: "S1w"
                },
                Allow: {
                    shape: "S23"
                },
                Count: {
                    shape: "S25"
                }
            }
        },
        S1w: {
            type: "structure",
            members: {
                CustomResponse: {
                    type: "structure",
                    required: [ "ResponseCode" ],
                    members: {
                        ResponseCode: {
                            type: "integer"
                        },
                        CustomResponseBodyKey: {},
                        ResponseHeaders: {
                            shape: "S1z"
                        }
                    }
                }
            }
        },
        S1z: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S23: {
            type: "structure",
            members: {
                CustomRequestHandling: {
                    shape: "S24"
                }
            }
        },
        S24: {
            type: "structure",
            required: [ "InsertHeaders" ],
            members: {
                InsertHeaders: {
                    shape: "S1z"
                }
            }
        },
        S25: {
            type: "structure",
            members: {
                CustomRequestHandling: {
                    shape: "S24"
                }
            }
        },
        S26: {
            type: "structure",
            members: {
                Count: {
                    shape: "S25"
                },
                None: {
                    type: "structure",
                    members: {}
                }
            }
        },
        S28: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        S2b: {
            type: "structure",
            required: [ "SampledRequestsEnabled", "CloudWatchMetricsEnabled", "MetricName" ],
            members: {
                SampledRequestsEnabled: {
                    type: "boolean"
                },
                CloudWatchMetricsEnabled: {
                    type: "boolean"
                },
                MetricName: {}
            }
        },
        S2j: {
            type: "list",
            member: {}
        },
        S2l: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S2q: {
            type: "structure",
            members: {
                Name: {},
                Id: {},
                Description: {},
                LockToken: {},
                ARN: {}
            }
        },
        S2u: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RegexString: {}
                }
            }
        },
        S2x: {
            type: "structure",
            members: {
                Name: {},
                Id: {},
                Description: {},
                LockToken: {},
                ARN: {}
            }
        },
        S30: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "ContentType", "Content" ],
                members: {
                    ContentType: {},
                    Content: {}
                }
            }
        },
        S35: {
            type: "structure",
            members: {
                Name: {},
                Id: {},
                Description: {},
                LockToken: {},
                ARN: {}
            }
        },
        S37: {
            type: "structure",
            members: {
                Block: {
                    shape: "S1w"
                },
                Allow: {
                    shape: "S23"
                }
            }
        },
        S39: {
            type: "structure",
            members: {
                Name: {},
                Id: {},
                Description: {},
                LockToken: {},
                ARN: {}
            }
        },
        S3s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        S41: {
            type: "structure",
            required: [ "ResourceArn", "LogDestinationConfigs" ],
            members: {
                ResourceArn: {},
                LogDestinationConfigs: {
                    type: "list",
                    member: {}
                },
                RedactedFields: {
                    type: "list",
                    member: {
                        shape: "Sd"
                    }
                },
                ManagedByFirewallManager: {
                    type: "boolean"
                },
                LoggingFilter: {
                    type: "structure",
                    required: [ "Filters", "DefaultBehavior" ],
                    members: {
                        Filters: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Behavior", "Requirement", "Conditions" ],
                                members: {
                                    Behavior: {},
                                    Requirement: {},
                                    Conditions: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                ActionCondition: {
                                                    type: "structure",
                                                    required: [ "Action" ],
                                                    members: {
                                                        Action: {}
                                                    }
                                                },
                                                LabelNameCondition: {
                                                    type: "structure",
                                                    required: [ "LabelName" ],
                                                    members: {
                                                        LabelName: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        DefaultBehavior: {}
                    }
                }
            }
        },
        S4q: {
            type: "structure",
            members: {
                IPAddressVersion: {},
                Addresses: {
                    shape: "S2j"
                }
            }
        },
        S4y: {
            type: "structure",
            required: [ "StartTime", "EndTime" ],
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        S59: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S5i: {
            type: "structure",
            required: [ "Name", "Id", "ARN", "DefaultAction", "VisibilityConfig" ],
            members: {
                Name: {},
                Id: {},
                ARN: {},
                DefaultAction: {
                    shape: "S37"
                },
                Description: {},
                Rules: {
                    shape: "S6"
                },
                VisibilityConfig: {
                    shape: "S2b"
                },
                Capacity: {
                    type: "long"
                },
                PreProcessFirewallManagerRuleGroups: {
                    shape: "S5j"
                },
                PostProcessFirewallManagerRuleGroups: {
                    shape: "S5j"
                },
                ManagedByFirewallManager: {
                    type: "boolean"
                },
                LabelNamespace: {},
                CustomResponseBodies: {
                    shape: "S30"
                }
            }
        },
        S5j: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Priority", "FirewallManagerStatement", "OverrideAction", "VisibilityConfig" ],
                members: {
                    Name: {},
                    Priority: {
                        type: "integer"
                    },
                    FirewallManagerStatement: {
                        type: "structure",
                        members: {
                            ManagedRuleGroupStatement: {
                                shape: "S1n"
                            },
                            RuleGroupReferenceStatement: {
                                shape: "S19"
                            }
                        }
                    },
                    OverrideAction: {
                        shape: "S26"
                    },
                    VisibilityConfig: {
                        shape: "S2b"
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["elasticinference"] = {};

AWS.ElasticInference = AWS.Service.defineService("elasticinference", [ "2017-07-25" ]);

AWS.apiLoader.services["elasticinference"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "api.elastic-inference",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon Elastic Inference",
        serviceFullName: "Amazon Elastic  Inference",
        serviceId: "Elastic Inference",
        signatureVersion: "v4",
        signingName: "elastic-inference",
        uid: "elastic-inference-2017-07-25"
    },
    operations: {
        DescribeAcceleratorOfferings: {
            http: {
                requestUri: "/describe-accelerator-offerings"
            },
            input: {
                type: "structure",
                required: [ "locationType" ],
                members: {
                    locationType: {},
                    acceleratorTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    acceleratorTypeOfferings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                acceleratorType: {},
                                locationType: {},
                                location: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeAcceleratorTypes: {
            http: {
                method: "GET",
                requestUri: "/describe-accelerator-types"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    acceleratorTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                acceleratorTypeName: {},
                                memoryInfo: {
                                    type: "structure",
                                    members: {
                                        sizeInMiB: {
                                            type: "integer"
                                        }
                                    }
                                },
                                throughputInfo: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            key: {},
                                            value: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeAccelerators: {
            http: {
                requestUri: "/describe-accelerators"
            },
            input: {
                type: "structure",
                members: {
                    acceleratorIds: {
                        type: "list",
                        member: {}
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    acceleratorSet: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                acceleratorHealth: {
                                    type: "structure",
                                    members: {
                                        status: {}
                                    }
                                },
                                acceleratorType: {},
                                acceleratorId: {},
                                availabilityZone: {},
                                attachedResource: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S13"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S13"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S13: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        DescribeAccelerators: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "acceleratorSet"
        }
    }
};

AWS.apiLoader.services["imagebuilder"] = {};

AWS.Imagebuilder = AWS.Service.defineService("imagebuilder", [ "2019-12-02" ]);

AWS.apiLoader.services["imagebuilder"]["2019-12-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-02",
        endpointPrefix: "imagebuilder",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "imagebuilder",
        serviceFullName: "EC2 Image Builder",
        serviceId: "imagebuilder",
        signatureVersion: "v4",
        signingName: "imagebuilder",
        uid: "imagebuilder-2019-12-02"
    },
    operations: {
        CancelImageCreation: {
            http: {
                method: "PUT",
                requestUri: "/CancelImageCreation"
            },
            input: {
                type: "structure",
                required: [ "imageBuildVersionArn", "clientToken" ],
                members: {
                    imageBuildVersionArn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    imageBuildVersionArn: {}
                }
            }
        },
        CreateComponent: {
            http: {
                method: "PUT",
                requestUri: "/CreateComponent"
            },
            input: {
                type: "structure",
                required: [ "name", "semanticVersion", "platform", "clientToken" ],
                members: {
                    name: {},
                    semanticVersion: {},
                    description: {},
                    changeDescription: {},
                    platform: {},
                    supportedOsVersions: {
                        shape: "Sa"
                    },
                    data: {},
                    uri: {},
                    kmsKeyId: {},
                    tags: {
                        shape: "Se"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    componentBuildVersionArn: {}
                }
            }
        },
        CreateContainerRecipe: {
            http: {
                method: "PUT",
                requestUri: "/CreateContainerRecipe"
            },
            input: {
                type: "structure",
                required: [ "containerType", "name", "semanticVersion", "components", "parentImage", "targetRepository", "clientToken" ],
                members: {
                    containerType: {},
                    name: {},
                    description: {},
                    semanticVersion: {},
                    components: {
                        shape: "Sl"
                    },
                    instanceConfiguration: {
                        shape: "St"
                    },
                    dockerfileTemplateData: {},
                    dockerfileTemplateUri: {},
                    platformOverride: {},
                    imageOsVersionOverride: {},
                    parentImage: {},
                    tags: {
                        shape: "Se"
                    },
                    workingDirectory: {},
                    targetRepository: {
                        shape: "S14"
                    },
                    kmsKeyId: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    containerRecipeArn: {}
                }
            }
        },
        CreateDistributionConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/CreateDistributionConfiguration"
            },
            input: {
                type: "structure",
                required: [ "name", "distributions", "clientToken" ],
                members: {
                    name: {},
                    description: {},
                    distributions: {
                        shape: "S19"
                    },
                    tags: {
                        shape: "Se"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    distributionConfigurationArn: {}
                }
            }
        },
        CreateImage: {
            http: {
                method: "PUT",
                requestUri: "/CreateImage"
            },
            input: {
                type: "structure",
                required: [ "infrastructureConfigurationArn", "clientToken" ],
                members: {
                    imageRecipeArn: {},
                    containerRecipeArn: {},
                    distributionConfigurationArn: {},
                    infrastructureConfigurationArn: {},
                    imageTestsConfiguration: {
                        shape: "S1t"
                    },
                    enhancedImageMetadataEnabled: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "Se"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    imageBuildVersionArn: {}
                }
            }
        },
        CreateImagePipeline: {
            http: {
                method: "PUT",
                requestUri: "/CreateImagePipeline"
            },
            input: {
                type: "structure",
                required: [ "name", "infrastructureConfigurationArn", "clientToken" ],
                members: {
                    name: {},
                    description: {},
                    imageRecipeArn: {},
                    containerRecipeArn: {},
                    infrastructureConfigurationArn: {},
                    distributionConfigurationArn: {},
                    imageTestsConfiguration: {
                        shape: "S1t"
                    },
                    enhancedImageMetadataEnabled: {
                        type: "boolean"
                    },
                    schedule: {
                        shape: "S1x"
                    },
                    status: {},
                    tags: {
                        shape: "Se"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    imagePipelineArn: {}
                }
            }
        },
        CreateImageRecipe: {
            http: {
                method: "PUT",
                requestUri: "/CreateImageRecipe"
            },
            input: {
                type: "structure",
                required: [ "name", "semanticVersion", "components", "parentImage", "clientToken" ],
                members: {
                    name: {},
                    description: {},
                    semanticVersion: {},
                    components: {
                        shape: "Sl"
                    },
                    parentImage: {},
                    blockDeviceMappings: {
                        shape: "Su"
                    },
                    tags: {
                        shape: "Se"
                    },
                    workingDirectory: {},
                    additionalInstanceConfiguration: {
                        shape: "S24"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    imageRecipeArn: {}
                }
            }
        },
        CreateInfrastructureConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/CreateInfrastructureConfiguration"
            },
            input: {
                type: "structure",
                required: [ "name", "instanceProfileName", "clientToken" ],
                members: {
                    name: {},
                    description: {},
                    instanceTypes: {
                        shape: "S29"
                    },
                    instanceProfileName: {},
                    securityGroupIds: {
                        shape: "S2c"
                    },
                    subnetId: {},
                    logging: {
                        shape: "S2d"
                    },
                    keyPair: {},
                    terminateInstanceOnFailure: {
                        type: "boolean"
                    },
                    snsTopicArn: {},
                    resourceTags: {
                        shape: "S2g"
                    },
                    instanceMetadataOptions: {
                        shape: "S2h"
                    },
                    tags: {
                        shape: "Se"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    infrastructureConfigurationArn: {}
                }
            }
        },
        DeleteComponent: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteComponent"
            },
            input: {
                type: "structure",
                required: [ "componentBuildVersionArn" ],
                members: {
                    componentBuildVersionArn: {
                        location: "querystring",
                        locationName: "componentBuildVersionArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    componentBuildVersionArn: {}
                }
            }
        },
        DeleteContainerRecipe: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteContainerRecipe"
            },
            input: {
                type: "structure",
                required: [ "containerRecipeArn" ],
                members: {
                    containerRecipeArn: {
                        location: "querystring",
                        locationName: "containerRecipeArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    containerRecipeArn: {}
                }
            }
        },
        DeleteDistributionConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteDistributionConfiguration"
            },
            input: {
                type: "structure",
                required: [ "distributionConfigurationArn" ],
                members: {
                    distributionConfigurationArn: {
                        location: "querystring",
                        locationName: "distributionConfigurationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    distributionConfigurationArn: {}
                }
            }
        },
        DeleteImage: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteImage"
            },
            input: {
                type: "structure",
                required: [ "imageBuildVersionArn" ],
                members: {
                    imageBuildVersionArn: {
                        location: "querystring",
                        locationName: "imageBuildVersionArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageBuildVersionArn: {}
                }
            }
        },
        DeleteImagePipeline: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteImagePipeline"
            },
            input: {
                type: "structure",
                required: [ "imagePipelineArn" ],
                members: {
                    imagePipelineArn: {
                        location: "querystring",
                        locationName: "imagePipelineArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imagePipelineArn: {}
                }
            }
        },
        DeleteImageRecipe: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteImageRecipe"
            },
            input: {
                type: "structure",
                required: [ "imageRecipeArn" ],
                members: {
                    imageRecipeArn: {
                        location: "querystring",
                        locationName: "imageRecipeArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageRecipeArn: {}
                }
            }
        },
        DeleteInfrastructureConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/DeleteInfrastructureConfiguration"
            },
            input: {
                type: "structure",
                required: [ "infrastructureConfigurationArn" ],
                members: {
                    infrastructureConfigurationArn: {
                        location: "querystring",
                        locationName: "infrastructureConfigurationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    infrastructureConfigurationArn: {}
                }
            }
        },
        GetComponent: {
            http: {
                method: "GET",
                requestUri: "/GetComponent"
            },
            input: {
                type: "structure",
                required: [ "componentBuildVersionArn" ],
                members: {
                    componentBuildVersionArn: {
                        location: "querystring",
                        locationName: "componentBuildVersionArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    component: {
                        type: "structure",
                        members: {
                            arn: {},
                            name: {},
                            version: {},
                            description: {},
                            changeDescription: {},
                            type: {},
                            platform: {},
                            supportedOsVersions: {
                                shape: "Sa"
                            },
                            state: {
                                shape: "S34"
                            },
                            parameters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "name", "type" ],
                                    members: {
                                        name: {},
                                        type: {},
                                        defaultValue: {
                                            shape: "Sr"
                                        },
                                        description: {}
                                    }
                                }
                            },
                            owner: {},
                            data: {},
                            kmsKeyId: {},
                            encrypted: {
                                type: "boolean"
                            },
                            dateCreated: {},
                            tags: {
                                shape: "Se"
                            }
                        }
                    }
                }
            }
        },
        GetComponentPolicy: {
            http: {
                method: "GET",
                requestUri: "/GetComponentPolicy"
            },
            input: {
                type: "structure",
                required: [ "componentArn" ],
                members: {
                    componentArn: {
                        location: "querystring",
                        locationName: "componentArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    policy: {}
                }
            }
        },
        GetContainerRecipe: {
            http: {
                method: "GET",
                requestUri: "/GetContainerRecipe"
            },
            input: {
                type: "structure",
                required: [ "containerRecipeArn" ],
                members: {
                    containerRecipeArn: {
                        location: "querystring",
                        locationName: "containerRecipeArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    containerRecipe: {
                        shape: "S3h"
                    }
                }
            }
        },
        GetContainerRecipePolicy: {
            http: {
                method: "GET",
                requestUri: "/GetContainerRecipePolicy"
            },
            input: {
                type: "structure",
                required: [ "containerRecipeArn" ],
                members: {
                    containerRecipeArn: {
                        location: "querystring",
                        locationName: "containerRecipeArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    policy: {}
                }
            }
        },
        GetDistributionConfiguration: {
            http: {
                method: "GET",
                requestUri: "/GetDistributionConfiguration"
            },
            input: {
                type: "structure",
                required: [ "distributionConfigurationArn" ],
                members: {
                    distributionConfigurationArn: {
                        location: "querystring",
                        locationName: "distributionConfigurationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    distributionConfiguration: {
                        shape: "S3n"
                    }
                }
            }
        },
        GetImage: {
            http: {
                method: "GET",
                requestUri: "/GetImage"
            },
            input: {
                type: "structure",
                required: [ "imageBuildVersionArn" ],
                members: {
                    imageBuildVersionArn: {
                        location: "querystring",
                        locationName: "imageBuildVersionArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    image: {
                        type: "structure",
                        members: {
                            arn: {},
                            type: {},
                            name: {},
                            version: {},
                            platform: {},
                            enhancedImageMetadataEnabled: {
                                type: "boolean"
                            },
                            osVersion: {},
                            state: {
                                shape: "S3u"
                            },
                            imageRecipe: {
                                shape: "S3w"
                            },
                            containerRecipe: {
                                shape: "S3h"
                            },
                            sourcePipelineName: {},
                            sourcePipelineArn: {},
                            infrastructureConfiguration: {
                                shape: "S3y"
                            },
                            distributionConfiguration: {
                                shape: "S3n"
                            },
                            imageTestsConfiguration: {
                                shape: "S1t"
                            },
                            dateCreated: {},
                            outputResources: {
                                shape: "S3z"
                            },
                            tags: {
                                shape: "Se"
                            }
                        }
                    }
                }
            }
        },
        GetImagePipeline: {
            http: {
                method: "GET",
                requestUri: "/GetImagePipeline"
            },
            input: {
                type: "structure",
                required: [ "imagePipelineArn" ],
                members: {
                    imagePipelineArn: {
                        location: "querystring",
                        locationName: "imagePipelineArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imagePipeline: {
                        shape: "S46"
                    }
                }
            }
        },
        GetImagePolicy: {
            http: {
                method: "GET",
                requestUri: "/GetImagePolicy"
            },
            input: {
                type: "structure",
                required: [ "imageArn" ],
                members: {
                    imageArn: {
                        location: "querystring",
                        locationName: "imageArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    policy: {}
                }
            }
        },
        GetImageRecipe: {
            http: {
                method: "GET",
                requestUri: "/GetImageRecipe"
            },
            input: {
                type: "structure",
                required: [ "imageRecipeArn" ],
                members: {
                    imageRecipeArn: {
                        location: "querystring",
                        locationName: "imageRecipeArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageRecipe: {
                        shape: "S3w"
                    }
                }
            }
        },
        GetImageRecipePolicy: {
            http: {
                method: "GET",
                requestUri: "/GetImageRecipePolicy"
            },
            input: {
                type: "structure",
                required: [ "imageRecipeArn" ],
                members: {
                    imageRecipeArn: {
                        location: "querystring",
                        locationName: "imageRecipeArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    policy: {}
                }
            }
        },
        GetInfrastructureConfiguration: {
            http: {
                method: "GET",
                requestUri: "/GetInfrastructureConfiguration"
            },
            input: {
                type: "structure",
                required: [ "infrastructureConfigurationArn" ],
                members: {
                    infrastructureConfigurationArn: {
                        location: "querystring",
                        locationName: "infrastructureConfigurationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    infrastructureConfiguration: {
                        shape: "S3y"
                    }
                }
            }
        },
        ImportComponent: {
            http: {
                method: "PUT",
                requestUri: "/ImportComponent"
            },
            input: {
                type: "structure",
                required: [ "name", "semanticVersion", "type", "format", "platform", "clientToken" ],
                members: {
                    name: {},
                    semanticVersion: {},
                    description: {},
                    changeDescription: {},
                    type: {},
                    format: {},
                    platform: {},
                    data: {},
                    uri: {},
                    kmsKeyId: {},
                    tags: {
                        shape: "Se"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    componentBuildVersionArn: {}
                }
            }
        },
        ListComponentBuildVersions: {
            http: {
                requestUri: "/ListComponentBuildVersions"
            },
            input: {
                type: "structure",
                required: [ "componentVersionArn" ],
                members: {
                    componentVersionArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    componentSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                version: {},
                                platform: {},
                                supportedOsVersions: {
                                    shape: "Sa"
                                },
                                state: {
                                    shape: "S34"
                                },
                                type: {},
                                owner: {},
                                description: {},
                                changeDescription: {},
                                dateCreated: {},
                                tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListComponents: {
            http: {
                requestUri: "/ListComponents"
            },
            input: {
                type: "structure",
                members: {
                    owner: {},
                    filters: {
                        shape: "S4r"
                    },
                    byName: {
                        type: "boolean"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    componentVersionList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                version: {},
                                description: {},
                                platform: {},
                                supportedOsVersions: {
                                    shape: "Sa"
                                },
                                type: {},
                                owner: {},
                                dateCreated: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListContainerRecipes: {
            http: {
                requestUri: "/ListContainerRecipes"
            },
            input: {
                type: "structure",
                members: {
                    owner: {},
                    filters: {
                        shape: "S4r"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    containerRecipeSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                containerType: {},
                                name: {},
                                platform: {},
                                owner: {},
                                parentImage: {},
                                dateCreated: {},
                                tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDistributionConfigurations: {
            http: {
                requestUri: "/ListDistributionConfigurations"
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        shape: "S4r"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    distributionConfigurationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                description: {},
                                dateCreated: {},
                                dateUpdated: {},
                                tags: {
                                    shape: "Se"
                                },
                                regions: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImageBuildVersions: {
            http: {
                requestUri: "/ListImageBuildVersions"
            },
            input: {
                type: "structure",
                required: [ "imageVersionArn" ],
                members: {
                    imageVersionArn: {},
                    filters: {
                        shape: "S4r"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageSummaryList: {
                        shape: "S5b"
                    },
                    nextToken: {}
                }
            }
        },
        ListImagePackages: {
            http: {
                requestUri: "/ListImagePackages"
            },
            input: {
                type: "structure",
                required: [ "imageBuildVersionArn" ],
                members: {
                    imageBuildVersionArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imagePackageList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                packageName: {},
                                packageVersion: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImagePipelineImages: {
            http: {
                requestUri: "/ListImagePipelineImages"
            },
            input: {
                type: "structure",
                required: [ "imagePipelineArn" ],
                members: {
                    imagePipelineArn: {},
                    filters: {
                        shape: "S4r"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageSummaryList: {
                        shape: "S5b"
                    },
                    nextToken: {}
                }
            }
        },
        ListImagePipelines: {
            http: {
                requestUri: "/ListImagePipelines"
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        shape: "S4r"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imagePipelineList: {
                        type: "list",
                        member: {
                            shape: "S46"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImageRecipes: {
            http: {
                requestUri: "/ListImageRecipes"
            },
            input: {
                type: "structure",
                members: {
                    owner: {},
                    filters: {
                        shape: "S4r"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageRecipeSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                platform: {},
                                owner: {},
                                parentImage: {},
                                dateCreated: {},
                                tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImages: {
            http: {
                requestUri: "/ListImages"
            },
            input: {
                type: "structure",
                members: {
                    owner: {},
                    filters: {
                        shape: "S4r"
                    },
                    byName: {
                        type: "boolean"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    includeDeprecated: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageVersionList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                type: {},
                                version: {},
                                platform: {},
                                osVersion: {},
                                owner: {},
                                dateCreated: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListInfrastructureConfigurations: {
            http: {
                requestUri: "/ListInfrastructureConfigurations"
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        shape: "S4r"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    infrastructureConfigurationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                description: {},
                                dateCreated: {},
                                dateUpdated: {},
                                resourceTags: {
                                    shape: "S2g"
                                },
                                tags: {
                                    shape: "Se"
                                },
                                instanceTypes: {
                                    shape: "S29"
                                },
                                instanceProfileName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Se"
                    }
                }
            }
        },
        PutComponentPolicy: {
            http: {
                method: "PUT",
                requestUri: "/PutComponentPolicy"
            },
            input: {
                type: "structure",
                required: [ "componentArn", "policy" ],
                members: {
                    componentArn: {},
                    policy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    componentArn: {}
                }
            }
        },
        PutContainerRecipePolicy: {
            http: {
                method: "PUT",
                requestUri: "/PutContainerRecipePolicy"
            },
            input: {
                type: "structure",
                required: [ "containerRecipeArn", "policy" ],
                members: {
                    containerRecipeArn: {},
                    policy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    containerRecipeArn: {}
                }
            }
        },
        PutImagePolicy: {
            http: {
                method: "PUT",
                requestUri: "/PutImagePolicy"
            },
            input: {
                type: "structure",
                required: [ "imageArn", "policy" ],
                members: {
                    imageArn: {},
                    policy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageArn: {}
                }
            }
        },
        PutImageRecipePolicy: {
            http: {
                method: "PUT",
                requestUri: "/PutImageRecipePolicy"
            },
            input: {
                type: "structure",
                required: [ "imageRecipeArn", "policy" ],
                members: {
                    imageRecipeArn: {},
                    policy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    imageRecipeArn: {}
                }
            }
        },
        StartImagePipelineExecution: {
            http: {
                method: "PUT",
                requestUri: "/StartImagePipelineExecution"
            },
            input: {
                type: "structure",
                required: [ "imagePipelineArn", "clientToken" ],
                members: {
                    imagePipelineArn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    imageBuildVersionArn: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDistributionConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/UpdateDistributionConfiguration"
            },
            input: {
                type: "structure",
                required: [ "distributionConfigurationArn", "distributions", "clientToken" ],
                members: {
                    distributionConfigurationArn: {},
                    description: {},
                    distributions: {
                        shape: "S19"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    distributionConfigurationArn: {}
                }
            }
        },
        UpdateImagePipeline: {
            http: {
                method: "PUT",
                requestUri: "/UpdateImagePipeline"
            },
            input: {
                type: "structure",
                required: [ "imagePipelineArn", "infrastructureConfigurationArn", "clientToken" ],
                members: {
                    imagePipelineArn: {},
                    description: {},
                    imageRecipeArn: {},
                    containerRecipeArn: {},
                    infrastructureConfigurationArn: {},
                    distributionConfigurationArn: {},
                    imageTestsConfiguration: {
                        shape: "S1t"
                    },
                    enhancedImageMetadataEnabled: {
                        type: "boolean"
                    },
                    schedule: {
                        shape: "S1x"
                    },
                    status: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    imagePipelineArn: {}
                }
            }
        },
        UpdateInfrastructureConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/UpdateInfrastructureConfiguration"
            },
            input: {
                type: "structure",
                required: [ "infrastructureConfigurationArn", "instanceProfileName", "clientToken" ],
                members: {
                    infrastructureConfigurationArn: {},
                    description: {},
                    instanceTypes: {
                        shape: "S29"
                    },
                    instanceProfileName: {},
                    securityGroupIds: {
                        shape: "S2c"
                    },
                    subnetId: {},
                    logging: {
                        shape: "S2d"
                    },
                    keyPair: {},
                    terminateInstanceOnFailure: {
                        type: "boolean"
                    },
                    snsTopicArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    resourceTags: {
                        shape: "S2g"
                    },
                    instanceMetadataOptions: {
                        shape: "S2h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    requestId: {},
                    clientToken: {},
                    infrastructureConfigurationArn: {}
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "list",
            member: {}
        },
        Se: {
            type: "map",
            key: {},
            value: {}
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                required: [ "componentArn" ],
                members: {
                    componentArn: {},
                    parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "value" ],
                            members: {
                                name: {},
                                value: {
                                    shape: "Sr"
                                }
                            }
                        }
                    }
                }
            }
        },
        Sr: {
            type: "list",
            member: {}
        },
        St: {
            type: "structure",
            members: {
                image: {},
                blockDeviceMappings: {
                    shape: "Su"
                }
            }
        },
        Su: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    deviceName: {},
                    ebs: {
                        type: "structure",
                        members: {
                            encrypted: {
                                type: "boolean"
                            },
                            deleteOnTermination: {
                                type: "boolean"
                            },
                            iops: {
                                type: "integer"
                            },
                            kmsKeyId: {},
                            snapshotId: {},
                            volumeSize: {
                                type: "integer"
                            },
                            volumeType: {},
                            throughput: {
                                type: "integer"
                            }
                        }
                    },
                    virtualName: {},
                    noDevice: {}
                }
            }
        },
        S14: {
            type: "structure",
            required: [ "service", "repositoryName" ],
            members: {
                service: {},
                repositoryName: {}
            }
        },
        S19: {
            type: "list",
            member: {
                type: "structure",
                required: [ "region" ],
                members: {
                    region: {},
                    amiDistributionConfiguration: {
                        type: "structure",
                        members: {
                            name: {},
                            description: {},
                            targetAccountIds: {
                                shape: "S1d"
                            },
                            amiTags: {
                                shape: "Se"
                            },
                            kmsKeyId: {},
                            launchPermission: {
                                type: "structure",
                                members: {
                                    userIds: {
                                        shape: "S1d"
                                    },
                                    userGroups: {
                                        shape: "S1g"
                                    }
                                }
                            }
                        }
                    },
                    containerDistributionConfiguration: {
                        type: "structure",
                        required: [ "targetRepository" ],
                        members: {
                            description: {},
                            containerTags: {
                                shape: "S1g"
                            },
                            targetRepository: {
                                shape: "S14"
                            }
                        }
                    },
                    licenseConfigurationArns: {
                        type: "list",
                        member: {}
                    },
                    launchTemplateConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "launchTemplateId" ],
                            members: {
                                launchTemplateId: {},
                                accountId: {},
                                setDefaultVersion: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        S1d: {
            type: "list",
            member: {}
        },
        S1g: {
            type: "list",
            member: {}
        },
        S1t: {
            type: "structure",
            members: {
                imageTestsEnabled: {
                    type: "boolean"
                },
                timeoutMinutes: {
                    type: "integer"
                }
            }
        },
        S1x: {
            type: "structure",
            members: {
                scheduleExpression: {},
                timezone: {},
                pipelineExecutionStartCondition: {}
            }
        },
        S24: {
            type: "structure",
            members: {
                systemsManagerAgent: {
                    type: "structure",
                    members: {
                        uninstallAfterBuild: {
                            type: "boolean"
                        }
                    }
                },
                userDataOverride: {}
            }
        },
        S29: {
            type: "list",
            member: {}
        },
        S2c: {
            type: "list",
            member: {}
        },
        S2d: {
            type: "structure",
            members: {
                s3Logs: {
                    type: "structure",
                    members: {
                        s3BucketName: {},
                        s3KeyPrefix: {}
                    }
                }
            }
        },
        S2g: {
            type: "map",
            key: {},
            value: {}
        },
        S2h: {
            type: "structure",
            members: {
                httpTokens: {},
                httpPutResponseHopLimit: {
                    type: "integer"
                }
            }
        },
        S34: {
            type: "structure",
            members: {
                status: {},
                reason: {}
            }
        },
        S3h: {
            type: "structure",
            members: {
                arn: {},
                containerType: {},
                name: {},
                description: {},
                platform: {},
                owner: {},
                version: {},
                components: {
                    shape: "Sl"
                },
                instanceConfiguration: {
                    shape: "St"
                },
                dockerfileTemplateData: {},
                kmsKeyId: {},
                encrypted: {
                    type: "boolean"
                },
                parentImage: {},
                dateCreated: {},
                tags: {
                    shape: "Se"
                },
                workingDirectory: {},
                targetRepository: {
                    shape: "S14"
                }
            }
        },
        S3n: {
            type: "structure",
            required: [ "timeoutMinutes" ],
            members: {
                arn: {},
                name: {},
                description: {},
                distributions: {
                    shape: "S19"
                },
                timeoutMinutes: {
                    type: "integer"
                },
                dateCreated: {},
                dateUpdated: {},
                tags: {
                    shape: "Se"
                }
            }
        },
        S3u: {
            type: "structure",
            members: {
                status: {},
                reason: {}
            }
        },
        S3w: {
            type: "structure",
            members: {
                arn: {},
                type: {},
                name: {},
                description: {},
                platform: {},
                owner: {},
                version: {},
                components: {
                    shape: "Sl"
                },
                parentImage: {},
                blockDeviceMappings: {
                    shape: "Su"
                },
                dateCreated: {},
                tags: {
                    shape: "Se"
                },
                workingDirectory: {},
                additionalInstanceConfiguration: {
                    shape: "S24"
                }
            }
        },
        S3y: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                description: {},
                instanceTypes: {
                    shape: "S29"
                },
                instanceProfileName: {},
                securityGroupIds: {
                    shape: "S2c"
                },
                subnetId: {},
                logging: {
                    shape: "S2d"
                },
                keyPair: {},
                terminateInstanceOnFailure: {
                    type: "boolean"
                },
                snsTopicArn: {},
                dateCreated: {},
                dateUpdated: {},
                resourceTags: {
                    shape: "S2g"
                },
                instanceMetadataOptions: {
                    shape: "S2h"
                },
                tags: {
                    shape: "Se"
                }
            }
        },
        S3z: {
            type: "structure",
            members: {
                amis: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            region: {},
                            image: {},
                            name: {},
                            description: {},
                            state: {
                                shape: "S3u"
                            },
                            accountId: {}
                        }
                    }
                },
                containers: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            region: {},
                            imageUris: {
                                shape: "S1g"
                            }
                        }
                    }
                }
            }
        },
        S46: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                description: {},
                platform: {},
                enhancedImageMetadataEnabled: {
                    type: "boolean"
                },
                imageRecipeArn: {},
                containerRecipeArn: {},
                infrastructureConfigurationArn: {},
                distributionConfigurationArn: {},
                imageTestsConfiguration: {
                    shape: "S1t"
                },
                schedule: {
                    shape: "S1x"
                },
                status: {},
                dateCreated: {},
                dateUpdated: {},
                dateLastRun: {},
                dateNextRun: {},
                tags: {
                    shape: "Se"
                }
            }
        },
        S4r: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S5b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    type: {},
                    version: {},
                    platform: {},
                    osVersion: {},
                    state: {
                        shape: "S3u"
                    },
                    owner: {},
                    dateCreated: {},
                    outputResources: {
                        shape: "S3z"
                    },
                    tags: {
                        shape: "Se"
                    }
                }
            }
        }
    },
    paginators: {
        ListComponentBuildVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "componentSummaryList"
        },
        ListComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "componentVersionList"
        },
        ListContainerRecipes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "containerRecipeSummaryList"
        },
        ListDistributionConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "distributionConfigurationSummaryList"
        },
        ListImageBuildVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imageSummaryList"
        },
        ListImagePackages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imagePackageList"
        },
        ListImagePipelineImages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imageSummaryList"
        },
        ListImagePipelines: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imagePipelineList"
        },
        ListImageRecipes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imageRecipeSummaryList"
        },
        ListImages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "imageVersionList"
        },
        ListInfrastructureConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "infrastructureConfigurationSummaryList"
        }
    }
};

AWS.apiLoader.services["schemas"] = {};

AWS.Schemas = AWS.Service.defineService("schemas", [ "2019-12-02" ]);

AWS.apiLoader.services["schemas"]["2019-12-02"] = {
    metadata: {
        apiVersion: "2019-12-02",
        endpointPrefix: "schemas",
        signingName: "schemas",
        serviceFullName: "Schemas",
        serviceId: "schemas",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "schemas-2019-12-02",
        signatureVersion: "v4"
    },
    operations: {
        CreateDiscoverer: {
            http: {
                requestUri: "/v1/discoverers",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Description: {},
                    SourceArn: {},
                    CrossAccount: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                },
                required: [ "SourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    DiscovererArn: {},
                    DiscovererId: {},
                    SourceArn: {},
                    State: {},
                    CrossAccount: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateRegistry: {
            http: {
                requestUri: "/v1/registries/name/{registryName}",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Description: {},
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                },
                required: [ "RegistryName" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    RegistryArn: {},
                    RegistryName: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        CreateSchema: {
            http: {
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Content: {},
                    Description: {},
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    },
                    Type: {}
                },
                required: [ "RegistryName", "SchemaName", "Type", "Content" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    LastModified: {
                        shape: "Sf"
                    },
                    SchemaArn: {},
                    SchemaName: {},
                    SchemaVersion: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    },
                    Type: {},
                    VersionCreatedDate: {
                        shape: "Sf"
                    }
                }
            }
        },
        DeleteDiscoverer: {
            http: {
                method: "DELETE",
                requestUri: "/v1/discoverers/id/{discovererId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    DiscovererId: {
                        location: "uri",
                        locationName: "discovererId"
                    }
                },
                required: [ "DiscovererId" ]
            }
        },
        DeleteRegistry: {
            http: {
                method: "DELETE",
                requestUri: "/v1/registries/name/{registryName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    }
                },
                required: [ "RegistryName" ]
            }
        },
        DeleteResourcePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v1/policy",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "querystring",
                        locationName: "registryName"
                    }
                }
            }
        },
        DeleteSchema: {
            http: {
                method: "DELETE",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    }
                },
                required: [ "RegistryName", "SchemaName" ]
            }
        },
        DeleteSchemaVersion: {
            http: {
                method: "DELETE",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/version/{schemaVersion}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    SchemaVersion: {
                        location: "uri",
                        locationName: "schemaVersion"
                    }
                },
                required: [ "SchemaVersion", "RegistryName", "SchemaName" ]
            }
        },
        DescribeCodeBinding: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Language: {
                        location: "uri",
                        locationName: "language"
                    },
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    SchemaVersion: {
                        location: "querystring",
                        locationName: "schemaVersion"
                    }
                },
                required: [ "RegistryName", "SchemaName", "Language" ]
            },
            output: {
                type: "structure",
                members: {
                    CreationDate: {
                        shape: "Sf"
                    },
                    LastModified: {
                        shape: "Sf"
                    },
                    SchemaVersion: {},
                    Status: {}
                }
            }
        },
        DescribeDiscoverer: {
            http: {
                method: "GET",
                requestUri: "/v1/discoverers/id/{discovererId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DiscovererId: {
                        location: "uri",
                        locationName: "discovererId"
                    }
                },
                required: [ "DiscovererId" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    DiscovererArn: {},
                    DiscovererId: {},
                    SourceArn: {},
                    State: {},
                    CrossAccount: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        DescribeRegistry: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    }
                },
                required: [ "RegistryName" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    RegistryArn: {},
                    RegistryName: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        DescribeSchema: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    SchemaVersion: {
                        location: "querystring",
                        locationName: "schemaVersion"
                    }
                },
                required: [ "RegistryName", "SchemaName" ]
            },
            output: {
                type: "structure",
                members: {
                    Content: {},
                    Description: {},
                    LastModified: {
                        shape: "Sf"
                    },
                    SchemaArn: {},
                    SchemaName: {},
                    SchemaVersion: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    },
                    Type: {},
                    VersionCreatedDate: {
                        shape: "Sf"
                    }
                }
            }
        },
        ExportSchema: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/export",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    SchemaVersion: {
                        location: "querystring",
                        locationName: "schemaVersion"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    }
                },
                required: [ "RegistryName", "SchemaName", "Type" ]
            },
            output: {
                type: "structure",
                members: {
                    Content: {},
                    SchemaArn: {},
                    SchemaName: {},
                    SchemaVersion: {},
                    Type: {}
                }
            }
        },
        GetCodeBindingSource: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}/source",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Language: {
                        location: "uri",
                        locationName: "language"
                    },
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    SchemaVersion: {
                        location: "querystring",
                        locationName: "schemaVersion"
                    }
                },
                required: [ "RegistryName", "SchemaName", "Language" ]
            },
            output: {
                type: "structure",
                members: {
                    Body: {
                        type: "blob"
                    }
                },
                payload: "Body"
            }
        },
        GetDiscoveredSchema: {
            http: {
                requestUri: "/v1/discover",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Events: {
                        type: "list",
                        member: {}
                    },
                    Type: {}
                },
                required: [ "Type", "Events" ]
            },
            output: {
                type: "structure",
                members: {
                    Content: {}
                }
            }
        },
        GetResourcePolicy: {
            http: {
                method: "GET",
                requestUri: "/v1/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RegistryName: {
                        location: "querystring",
                        locationName: "registryName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        jsonvalue: true
                    },
                    RevisionId: {}
                }
            }
        },
        ListDiscoverers: {
            http: {
                method: "GET",
                requestUri: "/v1/discoverers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DiscovererIdPrefix: {
                        location: "querystring",
                        locationName: "discovererIdPrefix"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    SourceArnPrefix: {
                        location: "querystring",
                        locationName: "sourceArnPrefix"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Discoverers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DiscovererArn: {},
                                DiscovererId: {},
                                SourceArn: {},
                                State: {},
                                CrossAccount: {
                                    type: "boolean"
                                },
                                Tags: {
                                    shape: "S5",
                                    locationName: "tags"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRegistries: {
            http: {
                method: "GET",
                requestUri: "/v1/registries",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RegistryNamePrefix: {
                        location: "querystring",
                        locationName: "registryNamePrefix"
                    },
                    Scope: {
                        location: "querystring",
                        locationName: "scope"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Registries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RegistryArn: {},
                                RegistryName: {},
                                Tags: {
                                    shape: "S5",
                                    locationName: "tags"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListSchemaVersions: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    }
                },
                required: [ "RegistryName", "SchemaName" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    SchemaVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SchemaArn: {},
                                SchemaName: {},
                                SchemaVersion: {},
                                Type: {}
                            }
                        }
                    }
                }
            }
        },
        ListSchemas: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaNamePrefix: {
                        location: "querystring",
                        locationName: "schemaNamePrefix"
                    }
                },
                required: [ "RegistryName" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Schemas: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LastModified: {
                                    shape: "Sf"
                                },
                                SchemaArn: {},
                                SchemaName: {},
                                Tags: {
                                    shape: "S5",
                                    locationName: "tags"
                                },
                                VersionCount: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        PutCodeBinding: {
            http: {
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Language: {
                        location: "uri",
                        locationName: "language"
                    },
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    SchemaVersion: {
                        location: "querystring",
                        locationName: "schemaVersion"
                    }
                },
                required: [ "RegistryName", "SchemaName", "Language" ]
            },
            output: {
                type: "structure",
                members: {
                    CreationDate: {
                        shape: "Sf"
                    },
                    LastModified: {
                        shape: "Sf"
                    },
                    SchemaVersion: {},
                    Status: {}
                }
            }
        },
        PutResourcePolicy: {
            http: {
                method: "PUT",
                requestUri: "/v1/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Policy: {
                        jsonvalue: true
                    },
                    RegistryName: {
                        location: "querystring",
                        locationName: "registryName"
                    },
                    RevisionId: {}
                },
                required: [ "Policy" ]
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        jsonvalue: true
                    },
                    RevisionId: {}
                }
            }
        },
        SearchSchemas: {
            http: {
                method: "GET",
                requestUri: "/v1/registries/name/{registryName}/schemas/search",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Keywords: {
                        location: "querystring",
                        locationName: "keywords"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    }
                },
                required: [ "RegistryName", "Keywords" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Schemas: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RegistryName: {},
                                SchemaArn: {},
                                SchemaName: {},
                                SchemaVersions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            CreatedDate: {
                                                shape: "Sf"
                                            },
                                            SchemaVersion: {},
                                            Type: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        StartDiscoverer: {
            http: {
                requestUri: "/v1/discoverers/id/{discovererId}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DiscovererId: {
                        location: "uri",
                        locationName: "discovererId"
                    }
                },
                required: [ "DiscovererId" ]
            },
            output: {
                type: "structure",
                members: {
                    DiscovererId: {},
                    State: {}
                }
            }
        },
        StopDiscoverer: {
            http: {
                requestUri: "/v1/discoverers/id/{discovererId}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DiscovererId: {
                        location: "uri",
                        locationName: "discovererId"
                    }
                },
                required: [ "DiscovererId" ]
            },
            output: {
                type: "structure",
                members: {
                    DiscovererId: {},
                    State: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn", "Tags" ]
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateDiscoverer: {
            http: {
                method: "PUT",
                requestUri: "/v1/discoverers/id/{discovererId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Description: {},
                    DiscovererId: {
                        location: "uri",
                        locationName: "discovererId"
                    },
                    CrossAccount: {
                        type: "boolean"
                    }
                },
                required: [ "DiscovererId" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    DiscovererArn: {},
                    DiscovererId: {},
                    SourceArn: {},
                    State: {},
                    CrossAccount: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateRegistry: {
            http: {
                method: "PUT",
                requestUri: "/v1/registries/name/{registryName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Description: {},
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    }
                },
                required: [ "RegistryName" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    RegistryArn: {},
                    RegistryName: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    }
                }
            }
        },
        UpdateSchema: {
            http: {
                method: "PUT",
                requestUri: "/v1/registries/name/{registryName}/schemas/name/{schemaName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClientTokenId: {
                        idempotencyToken: true
                    },
                    Content: {},
                    Description: {},
                    RegistryName: {
                        location: "uri",
                        locationName: "registryName"
                    },
                    SchemaName: {
                        location: "uri",
                        locationName: "schemaName"
                    },
                    Type: {}
                },
                required: [ "RegistryName", "SchemaName" ]
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    LastModified: {
                        shape: "Sf"
                    },
                    SchemaArn: {},
                    SchemaName: {},
                    SchemaVersion: {},
                    Tags: {
                        shape: "S5",
                        locationName: "tags"
                    },
                    Type: {},
                    VersionCreatedDate: {
                        shape: "Sf"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "map",
            key: {},
            value: {}
        },
        Sf: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        ListDiscoverers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Discoverers"
        },
        ListRegistries: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Registries"
        },
        ListSchemaVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "SchemaVersions"
        },
        ListSchemas: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Schemas"
        },
        SearchSchemas: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Schemas"
        }
    },
    waiters: {
        CodeBindingExists: {
            description: "Wait until code binding is generated",
            delay: 2,
            operation: "DescribeCodeBinding",
            maxAttempts: 30,
            acceptors: [ {
                expected: "CREATE_COMPLETE",
                matcher: "path",
                state: "success",
                argument: "Status"
            }, {
                expected: "CREATE_IN_PROGRESS",
                matcher: "path",
                state: "retry",
                argument: "Status"
            }, {
                expected: "CREATE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "Status"
            }, {
                matcher: "error",
                expected: "NotFoundException",
                state: "failure"
            } ]
        }
    }
};

AWS.apiLoader.services["accessanalyzer"] = {};

AWS.AccessAnalyzer = AWS.Service.defineService("accessanalyzer", [ "2019-11-01" ]);

AWS.apiLoader.services["accessanalyzer"]["2019-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-11-01",
        endpointPrefix: "access-analyzer",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Access Analyzer",
        serviceId: "AccessAnalyzer",
        signatureVersion: "v4",
        signingName: "access-analyzer",
        uid: "accessanalyzer-2019-11-01"
    },
    operations: {
        ApplyArchiveRule: {
            http: {
                method: "PUT",
                requestUri: "/archive-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn", "ruleName" ],
                members: {
                    analyzerArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    ruleName: {}
                }
            },
            idempotent: true
        },
        CancelPolicyGeneration: {
            http: {
                method: "PUT",
                requestUri: "/policy/generation/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        CreateAccessPreview: {
            http: {
                method: "PUT",
                requestUri: "/access-preview",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn", "configurations" ],
                members: {
                    analyzerArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    configurations: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            idempotent: true
        },
        CreateAnalyzer: {
            http: {
                method: "PUT",
                requestUri: "/analyzer",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName", "type" ],
                members: {
                    analyzerName: {},
                    archiveRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "filter", "ruleName" ],
                            members: {
                                filter: {
                                    shape: "S1l"
                                },
                                ruleName: {}
                            }
                        }
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S1o"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateArchiveRule: {
            http: {
                method: "PUT",
                requestUri: "/analyzer/{analyzerName}/archive-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName", "filter", "ruleName" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    filter: {
                        shape: "S1l"
                    },
                    ruleName: {}
                }
            },
            idempotent: true
        },
        DeleteAnalyzer: {
            http: {
                method: "DELETE",
                requestUri: "/analyzer/{analyzerName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            idempotent: true
        },
        DeleteArchiveRule: {
            http: {
                method: "DELETE",
                requestUri: "/analyzer/{analyzerName}/archive-rule/{ruleName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName", "ruleName" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    ruleName: {
                        location: "uri",
                        locationName: "ruleName"
                    }
                }
            },
            idempotent: true
        },
        GetAccessPreview: {
            http: {
                method: "GET",
                requestUri: "/access-preview/{accessPreviewId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accessPreviewId", "analyzerArn" ],
                members: {
                    accessPreviewId: {
                        location: "uri",
                        locationName: "accessPreviewId"
                    },
                    analyzerArn: {
                        location: "querystring",
                        locationName: "analyzerArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accessPreview" ],
                members: {
                    accessPreview: {
                        type: "structure",
                        required: [ "analyzerArn", "configurations", "createdAt", "id", "status" ],
                        members: {
                            analyzerArn: {},
                            configurations: {
                                shape: "S9"
                            },
                            createdAt: {
                                shape: "S1x"
                            },
                            id: {},
                            status: {},
                            statusReason: {
                                shape: "S1z"
                            }
                        }
                    }
                }
            }
        },
        GetAnalyzedResource: {
            http: {
                method: "GET",
                requestUri: "/analyzed-resource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn", "resourceArn" ],
                members: {
                    analyzerArn: {
                        location: "querystring",
                        locationName: "analyzerArn"
                    },
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resource: {
                        type: "structure",
                        required: [ "analyzedAt", "createdAt", "isPublic", "resourceArn", "resourceOwnerAccount", "resourceType", "updatedAt" ],
                        members: {
                            actions: {
                                shape: "S25"
                            },
                            analyzedAt: {
                                shape: "S1x"
                            },
                            createdAt: {
                                shape: "S1x"
                            },
                            error: {},
                            isPublic: {
                                type: "boolean"
                            },
                            resourceArn: {},
                            resourceOwnerAccount: {},
                            resourceType: {},
                            sharedVia: {
                                type: "list",
                                member: {}
                            },
                            status: {},
                            updatedAt: {
                                shape: "S1x"
                            }
                        }
                    }
                }
            }
        },
        GetAnalyzer: {
            http: {
                method: "GET",
                requestUri: "/analyzer/{analyzerName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analyzer" ],
                members: {
                    analyzer: {
                        shape: "S2b"
                    }
                }
            }
        },
        GetArchiveRule: {
            http: {
                method: "GET",
                requestUri: "/analyzer/{analyzerName}/archive-rule/{ruleName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName", "ruleName" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    },
                    ruleName: {
                        location: "uri",
                        locationName: "ruleName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "archiveRule" ],
                members: {
                    archiveRule: {
                        shape: "S2h"
                    }
                }
            }
        },
        GetFinding: {
            http: {
                method: "GET",
                requestUri: "/finding/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn", "id" ],
                members: {
                    analyzerArn: {
                        location: "querystring",
                        locationName: "analyzerArn"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    finding: {
                        type: "structure",
                        required: [ "analyzedAt", "condition", "createdAt", "id", "resourceOwnerAccount", "resourceType", "status", "updatedAt" ],
                        members: {
                            action: {
                                shape: "S25"
                            },
                            analyzedAt: {
                                shape: "S1x"
                            },
                            condition: {
                                shape: "S2m"
                            },
                            createdAt: {
                                shape: "S1x"
                            },
                            error: {},
                            id: {},
                            isPublic: {
                                type: "boolean"
                            },
                            principal: {
                                shape: "S2n"
                            },
                            resource: {},
                            resourceOwnerAccount: {},
                            resourceType: {},
                            sources: {
                                shape: "S2o"
                            },
                            status: {},
                            updatedAt: {
                                shape: "S1x"
                            }
                        }
                    }
                }
            }
        },
        GetGeneratedPolicy: {
            http: {
                method: "GET",
                requestUri: "/policy/generation/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    includeResourcePlaceholders: {
                        location: "querystring",
                        locationName: "includeResourcePlaceholders",
                        type: "boolean"
                    },
                    includeServiceLevelTemplate: {
                        location: "querystring",
                        locationName: "includeServiceLevelTemplate",
                        type: "boolean"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "generatedPolicyResult", "jobDetails" ],
                members: {
                    generatedPolicyResult: {
                        type: "structure",
                        required: [ "properties" ],
                        members: {
                            generatedPolicies: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "policy" ],
                                    members: {
                                        policy: {}
                                    }
                                }
                            },
                            properties: {
                                type: "structure",
                                required: [ "principalArn" ],
                                members: {
                                    cloudTrailProperties: {
                                        type: "structure",
                                        required: [ "endTime", "startTime", "trailProperties" ],
                                        members: {
                                            endTime: {
                                                shape: "S1x"
                                            },
                                            startTime: {
                                                shape: "S1x"
                                            },
                                            trailProperties: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    required: [ "cloudTrailArn" ],
                                                    members: {
                                                        allRegions: {
                                                            type: "boolean"
                                                        },
                                                        cloudTrailArn: {},
                                                        regions: {
                                                            shape: "S32"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    isComplete: {
                                        type: "boolean"
                                    },
                                    principalArn: {}
                                }
                            }
                        }
                    },
                    jobDetails: {
                        type: "structure",
                        required: [ "jobId", "startedOn", "status" ],
                        members: {
                            completedOn: {
                                shape: "S1x"
                            },
                            jobError: {
                                type: "structure",
                                required: [ "code", "message" ],
                                members: {
                                    code: {},
                                    message: {}
                                }
                            },
                            jobId: {},
                            startedOn: {
                                shape: "S1x"
                            },
                            status: {}
                        }
                    }
                }
            }
        },
        ListAccessPreviewFindings: {
            http: {
                requestUri: "/access-preview/{accessPreviewId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accessPreviewId", "analyzerArn" ],
                members: {
                    accessPreviewId: {
                        location: "uri",
                        locationName: "accessPreviewId"
                    },
                    analyzerArn: {},
                    filter: {
                        shape: "S1l"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "findings" ],
                members: {
                    findings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "changeType", "createdAt", "id", "resourceOwnerAccount", "resourceType", "status" ],
                            members: {
                                action: {
                                    shape: "S25"
                                },
                                changeType: {},
                                condition: {
                                    shape: "S2m"
                                },
                                createdAt: {
                                    shape: "S1x"
                                },
                                error: {},
                                existingFindingId: {},
                                existingFindingStatus: {},
                                id: {},
                                isPublic: {
                                    type: "boolean"
                                },
                                principal: {
                                    shape: "S2n"
                                },
                                resource: {},
                                resourceOwnerAccount: {},
                                resourceType: {},
                                sources: {
                                    shape: "S2o"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAccessPreviews: {
            http: {
                method: "GET",
                requestUri: "/access-preview",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn" ],
                members: {
                    analyzerArn: {
                        location: "querystring",
                        locationName: "analyzerArn"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accessPreviews" ],
                members: {
                    accessPreviews: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "analyzerArn", "createdAt", "id", "status" ],
                            members: {
                                analyzerArn: {},
                                createdAt: {
                                    shape: "S1x"
                                },
                                id: {},
                                status: {},
                                statusReason: {
                                    shape: "S1z"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAnalyzedResources: {
            http: {
                requestUri: "/analyzed-resource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn" ],
                members: {
                    analyzerArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resourceType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "analyzedResources" ],
                members: {
                    analyzedResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "resourceArn", "resourceOwnerAccount", "resourceType" ],
                            members: {
                                resourceArn: {},
                                resourceOwnerAccount: {},
                                resourceType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAnalyzers: {
            http: {
                method: "GET",
                requestUri: "/analyzer",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "analyzers" ],
                members: {
                    analyzers: {
                        type: "list",
                        member: {
                            shape: "S2b"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListArchiveRules: {
            http: {
                method: "GET",
                requestUri: "/analyzer/{analyzerName}/archive-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "archiveRules" ],
                members: {
                    archiveRules: {
                        type: "list",
                        member: {
                            shape: "S2h"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFindings: {
            http: {
                requestUri: "/finding",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn" ],
                members: {
                    analyzerArn: {},
                    filter: {
                        shape: "S1l"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    sort: {
                        type: "structure",
                        members: {
                            attributeName: {},
                            orderBy: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "findings" ],
                members: {
                    findings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "analyzedAt", "condition", "createdAt", "id", "resourceOwnerAccount", "resourceType", "status", "updatedAt" ],
                            members: {
                                action: {
                                    shape: "S25"
                                },
                                analyzedAt: {
                                    shape: "S1x"
                                },
                                condition: {
                                    shape: "S2m"
                                },
                                createdAt: {
                                    shape: "S1x"
                                },
                                error: {},
                                id: {},
                                isPublic: {
                                    type: "boolean"
                                },
                                principal: {
                                    shape: "S2n"
                                },
                                resource: {},
                                resourceOwnerAccount: {},
                                resourceType: {},
                                sources: {
                                    shape: "S2o"
                                },
                                status: {},
                                updatedAt: {
                                    shape: "S1x"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPolicyGenerations: {
            http: {
                method: "GET",
                requestUri: "/policy/generation",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    principalArn: {
                        location: "querystring",
                        locationName: "principalArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policyGenerations" ],
                members: {
                    nextToken: {},
                    policyGenerations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "jobId", "principalArn", "startedOn", "status" ],
                            members: {
                                completedOn: {
                                    shape: "S1x"
                                },
                                jobId: {},
                                principalArn: {},
                                startedOn: {
                                    shape: "S1x"
                                },
                                status: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1o"
                    }
                }
            }
        },
        StartPolicyGeneration: {
            http: {
                method: "PUT",
                requestUri: "/policy/generation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policyGenerationDetails" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    cloudTrailDetails: {
                        type: "structure",
                        required: [ "accessRole", "startTime", "trails" ],
                        members: {
                            accessRole: {},
                            endTime: {
                                shape: "S1x"
                            },
                            startTime: {
                                shape: "S1x"
                            },
                            trails: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "cloudTrailArn" ],
                                    members: {
                                        allRegions: {
                                            type: "boolean"
                                        },
                                        cloudTrailArn: {},
                                        regions: {
                                            shape: "S32"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    policyGenerationDetails: {
                        type: "structure",
                        required: [ "principalArn" ],
                        members: {
                            principalArn: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {}
                }
            },
            idempotent: true
        },
        StartResourceScan: {
            http: {
                requestUri: "/resource/scan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn", "resourceArn" ],
                members: {
                    analyzerArn: {},
                    resourceArn: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateArchiveRule: {
            http: {
                method: "PUT",
                requestUri: "/analyzer/{analyzerName}/archive-rule/{ruleName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerName", "filter", "ruleName" ],
                members: {
                    analyzerName: {
                        location: "uri",
                        locationName: "analyzerName"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    filter: {
                        shape: "S1l"
                    },
                    ruleName: {
                        location: "uri",
                        locationName: "ruleName"
                    }
                }
            },
            idempotent: true
        },
        UpdateFindings: {
            http: {
                method: "PUT",
                requestUri: "/finding",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analyzerArn", "status" ],
                members: {
                    analyzerArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    ids: {
                        type: "list",
                        member: {}
                    },
                    resourceArn: {},
                    status: {}
                }
            },
            idempotent: true
        },
        ValidatePolicy: {
            http: {
                requestUri: "/policy/validation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policyDocument", "policyType" ],
                members: {
                    locale: {},
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    policyDocument: {},
                    policyType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "findings" ],
                members: {
                    findings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "findingDetails", "findingType", "issueCode", "learnMoreLink", "locations" ],
                            members: {
                                findingDetails: {},
                                findingType: {},
                                issueCode: {},
                                learnMoreLink: {},
                                locations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "path", "span" ],
                                        members: {
                                            path: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        index: {
                                                            type: "integer"
                                                        },
                                                        key: {},
                                                        substring: {
                                                            type: "structure",
                                                            required: [ "length", "start" ],
                                                            members: {
                                                                length: {
                                                                    type: "integer"
                                                                },
                                                                start: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        value: {}
                                                    },
                                                    union: true
                                                }
                                            },
                                            span: {
                                                type: "structure",
                                                required: [ "end", "start" ],
                                                members: {
                                                    end: {
                                                        shape: "S54"
                                                    },
                                                    start: {
                                                        shape: "S54"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    iamRole: {
                        type: "structure",
                        members: {
                            trustPolicy: {}
                        }
                    },
                    kmsKey: {
                        type: "structure",
                        members: {
                            grants: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "granteePrincipal", "issuingAccount", "operations" ],
                                    members: {
                                        constraints: {
                                            type: "structure",
                                            members: {
                                                encryptionContextEquals: {
                                                    shape: "Si"
                                                },
                                                encryptionContextSubset: {
                                                    shape: "Si"
                                                }
                                            }
                                        },
                                        granteePrincipal: {},
                                        issuingAccount: {},
                                        operations: {
                                            type: "list",
                                            member: {}
                                        },
                                        retiringPrincipal: {}
                                    }
                                }
                            },
                            keyPolicies: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    },
                    s3Bucket: {
                        type: "structure",
                        members: {
                            accessPoints: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        accessPointPolicy: {},
                                        networkOrigin: {
                                            type: "structure",
                                            members: {
                                                internetConfiguration: {
                                                    type: "structure",
                                                    members: {}
                                                },
                                                vpcConfiguration: {
                                                    type: "structure",
                                                    required: [ "vpcId" ],
                                                    members: {
                                                        vpcId: {}
                                                    }
                                                }
                                            },
                                            union: true
                                        },
                                        publicAccessBlock: {
                                            shape: "S12"
                                        }
                                    }
                                }
                            },
                            bucketAclGrants: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "grantee", "permission" ],
                                    members: {
                                        grantee: {
                                            type: "structure",
                                            members: {
                                                id: {},
                                                uri: {}
                                            },
                                            union: true
                                        },
                                        permission: {}
                                    }
                                }
                            },
                            bucketPolicy: {},
                            bucketPublicAccessBlock: {
                                shape: "S12"
                            }
                        }
                    },
                    secretsManagerSecret: {
                        type: "structure",
                        members: {
                            kmsKeyId: {},
                            secretPolicy: {}
                        }
                    },
                    sqsQueue: {
                        type: "structure",
                        members: {
                            queuePolicy: {}
                        }
                    }
                },
                union: true
            }
        },
        Si: {
            type: "map",
            key: {},
            value: {}
        },
        S12: {
            type: "structure",
            required: [ "ignorePublicAcls", "restrictPublicBuckets" ],
            members: {
                ignorePublicAcls: {
                    type: "boolean"
                },
                restrictPublicBuckets: {
                    type: "boolean"
                }
            }
        },
        S1l: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    contains: {
                        shape: "S1n"
                    },
                    eq: {
                        shape: "S1n"
                    },
                    exists: {
                        type: "boolean"
                    },
                    neq: {
                        shape: "S1n"
                    }
                }
            }
        },
        S1n: {
            type: "list",
            member: {}
        },
        S1o: {
            type: "map",
            key: {},
            value: {}
        },
        S1x: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1z: {
            type: "structure",
            required: [ "code" ],
            members: {
                code: {}
            }
        },
        S25: {
            type: "list",
            member: {}
        },
        S2b: {
            type: "structure",
            required: [ "arn", "createdAt", "name", "status", "type" ],
            members: {
                arn: {},
                createdAt: {
                    shape: "S1x"
                },
                lastResourceAnalyzed: {},
                lastResourceAnalyzedAt: {
                    shape: "S1x"
                },
                name: {},
                status: {},
                statusReason: {
                    type: "structure",
                    required: [ "code" ],
                    members: {
                        code: {}
                    }
                },
                tags: {
                    shape: "S1o"
                },
                type: {}
            }
        },
        S2h: {
            type: "structure",
            required: [ "createdAt", "filter", "ruleName", "updatedAt" ],
            members: {
                createdAt: {
                    shape: "S1x"
                },
                filter: {
                    shape: "S1l"
                },
                ruleName: {},
                updatedAt: {
                    shape: "S1x"
                }
            }
        },
        S2m: {
            type: "map",
            key: {},
            value: {}
        },
        S2n: {
            type: "map",
            key: {},
            value: {}
        },
        S2o: {
            type: "list",
            member: {
                type: "structure",
                required: [ "type" ],
                members: {
                    detail: {
                        type: "structure",
                        members: {
                            accessPointArn: {}
                        }
                    },
                    type: {}
                }
            }
        },
        S32: {
            type: "list",
            member: {}
        },
        S54: {
            type: "structure",
            required: [ "column", "line", "offset" ],
            members: {
                column: {
                    type: "integer"
                },
                line: {
                    type: "integer"
                },
                offset: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        ListAccessPreviewFindings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findings"
        },
        ListAccessPreviews: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "accessPreviews"
        },
        ListAnalyzedResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "analyzedResources"
        },
        ListAnalyzers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "analyzers"
        },
        ListArchiveRules: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "archiveRules"
        },
        ListFindings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findings"
        },
        ListPolicyGenerations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "policyGenerations"
        },
        ValidatePolicy: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findings"
        }
    }
};

AWS.apiLoader.services["codegurureviewer"] = {};

AWS.CodeGuruReviewer = AWS.Service.defineService("codegurureviewer", [ "2019-09-19" ]);

AWS.apiLoader.services["codegurureviewer"]["2019-09-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-09-19",
        endpointPrefix: "codeguru-reviewer",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "CodeGuruReviewer",
        serviceFullName: "Amazon CodeGuru Reviewer",
        serviceId: "CodeGuru Reviewer",
        signatureVersion: "v4",
        signingName: "codeguru-reviewer",
        uid: "codeguru-reviewer-2019-09-19"
    },
    operations: {
        AssociateRepository: {
            http: {
                requestUri: "/associations"
            },
            input: {
                type: "structure",
                required: [ "Repository" ],
                members: {
                    Repository: {
                        type: "structure",
                        members: {
                            CodeCommit: {
                                type: "structure",
                                required: [ "Name" ],
                                members: {
                                    Name: {}
                                }
                            },
                            Bitbucket: {
                                shape: "S5"
                            },
                            GitHubEnterpriseServer: {
                                shape: "S5"
                            },
                            S3Bucket: {
                                type: "structure",
                                required: [ "Name", "BucketName" ],
                                members: {
                                    Name: {},
                                    BucketName: {}
                                }
                            }
                        }
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    KMSKeyDetails: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RepositoryAssociation: {
                        shape: "Si"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        CreateCodeReview: {
            http: {
                requestUri: "/codereviews"
            },
            input: {
                type: "structure",
                required: [ "Name", "RepositoryAssociationArn", "Type" ],
                members: {
                    Name: {},
                    RepositoryAssociationArn: {},
                    Type: {
                        type: "structure",
                        required: [ "RepositoryAnalysis" ],
                        members: {
                            RepositoryAnalysis: {
                                type: "structure",
                                members: {
                                    RepositoryHead: {
                                        shape: "Sy"
                                    },
                                    SourceCodeType: {
                                        shape: "S10"
                                    }
                                }
                            },
                            AnalysisTypes: {
                                shape: "S1c"
                            }
                        }
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CodeReview: {
                        shape: "S1f"
                    }
                }
            }
        },
        DescribeCodeReview: {
            http: {
                method: "GET",
                requestUri: "/codereviews/{CodeReviewArn}"
            },
            input: {
                type: "structure",
                required: [ "CodeReviewArn" ],
                members: {
                    CodeReviewArn: {
                        location: "uri",
                        locationName: "CodeReviewArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CodeReview: {
                        shape: "S1f"
                    }
                }
            }
        },
        DescribeRecommendationFeedback: {
            http: {
                method: "GET",
                requestUri: "/feedback/{CodeReviewArn}"
            },
            input: {
                type: "structure",
                required: [ "CodeReviewArn", "RecommendationId" ],
                members: {
                    CodeReviewArn: {
                        location: "uri",
                        locationName: "CodeReviewArn"
                    },
                    RecommendationId: {
                        location: "querystring",
                        locationName: "RecommendationId"
                    },
                    UserId: {
                        location: "querystring",
                        locationName: "UserId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecommendationFeedback: {
                        type: "structure",
                        members: {
                            CodeReviewArn: {},
                            RecommendationId: {},
                            Reactions: {
                                shape: "S1t"
                            },
                            UserId: {},
                            CreatedTimeStamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimeStamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeRepositoryAssociation: {
            http: {
                method: "GET",
                requestUri: "/associations/{AssociationArn}"
            },
            input: {
                type: "structure",
                required: [ "AssociationArn" ],
                members: {
                    AssociationArn: {
                        location: "uri",
                        locationName: "AssociationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RepositoryAssociation: {
                        shape: "Si"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        DisassociateRepository: {
            http: {
                method: "DELETE",
                requestUri: "/associations/{AssociationArn}"
            },
            input: {
                type: "structure",
                required: [ "AssociationArn" ],
                members: {
                    AssociationArn: {
                        location: "uri",
                        locationName: "AssociationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RepositoryAssociation: {
                        shape: "Si"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        ListCodeReviews: {
            http: {
                method: "GET",
                requestUri: "/codereviews"
            },
            input: {
                type: "structure",
                required: [ "Type" ],
                members: {
                    ProviderTypes: {
                        shape: "S20",
                        location: "querystring",
                        locationName: "ProviderTypes"
                    },
                    States: {
                        location: "querystring",
                        locationName: "States",
                        type: "list",
                        member: {}
                    },
                    RepositoryNames: {
                        location: "querystring",
                        locationName: "RepositoryNames",
                        type: "list",
                        member: {}
                    },
                    Type: {
                        location: "querystring",
                        locationName: "Type"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CodeReviewSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                CodeReviewArn: {},
                                RepositoryName: {},
                                Owner: {},
                                ProviderType: {},
                                State: {},
                                CreatedTimeStamp: {
                                    type: "timestamp"
                                },
                                LastUpdatedTimeStamp: {
                                    type: "timestamp"
                                },
                                Type: {},
                                PullRequestId: {},
                                MetricsSummary: {
                                    type: "structure",
                                    members: {
                                        MeteredLinesOfCodeCount: {
                                            type: "long"
                                        },
                                        FindingsCount: {
                                            type: "long"
                                        }
                                    }
                                },
                                SourceCodeType: {
                                    shape: "S10"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRecommendationFeedback: {
            http: {
                method: "GET",
                requestUri: "/feedback/{CodeReviewArn}/RecommendationFeedback"
            },
            input: {
                type: "structure",
                required: [ "CodeReviewArn" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    CodeReviewArn: {
                        location: "uri",
                        locationName: "CodeReviewArn"
                    },
                    UserIds: {
                        location: "querystring",
                        locationName: "UserIds",
                        type: "list",
                        member: {}
                    },
                    RecommendationIds: {
                        location: "querystring",
                        locationName: "RecommendationIds",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecommendationFeedbackSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RecommendationId: {},
                                Reactions: {
                                    shape: "S1t"
                                },
                                UserId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRecommendations: {
            http: {
                method: "GET",
                requestUri: "/codereviews/{CodeReviewArn}/Recommendations"
            },
            input: {
                type: "structure",
                required: [ "CodeReviewArn" ],
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    CodeReviewArn: {
                        location: "uri",
                        locationName: "CodeReviewArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecommendationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FilePath: {},
                                RecommendationId: {},
                                StartLine: {
                                    type: "integer"
                                },
                                EndLine: {
                                    type: "integer"
                                },
                                Description: {},
                                RecommendationCategory: {},
                                RuleMetadata: {
                                    type: "structure",
                                    members: {
                                        RuleId: {},
                                        RuleName: {},
                                        ShortDescription: {},
                                        LongDescription: {},
                                        RuleTags: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                },
                                Severity: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRepositoryAssociations: {
            http: {
                method: "GET",
                requestUri: "/associations"
            },
            input: {
                type: "structure",
                members: {
                    ProviderTypes: {
                        shape: "S20",
                        location: "querystring",
                        locationName: "ProviderType"
                    },
                    States: {
                        location: "querystring",
                        locationName: "State",
                        type: "list",
                        member: {}
                    },
                    Names: {
                        location: "querystring",
                        locationName: "Name",
                        type: "list",
                        member: {}
                    },
                    Owners: {
                        location: "querystring",
                        locationName: "Owner",
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RepositoryAssociationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssociationArn: {},
                                ConnectionArn: {},
                                LastUpdatedTimeStamp: {
                                    type: "timestamp"
                                },
                                AssociationId: {},
                                Name: {},
                                Owner: {},
                                ProviderType: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        PutRecommendationFeedback: {
            http: {
                method: "PUT",
                requestUri: "/feedback"
            },
            input: {
                type: "structure",
                required: [ "CodeReviewArn", "RecommendationId", "Reactions" ],
                members: {
                    CodeReviewArn: {},
                    RecommendationId: {},
                    Reactions: {
                        shape: "S1t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "Tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "TagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "Name", "ConnectionArn", "Owner" ],
            members: {
                Name: {},
                ConnectionArn: {},
                Owner: {}
            }
        },
        Sb: {
            type: "map",
            key: {},
            value: {}
        },
        Se: {
            type: "structure",
            members: {
                KMSKeyId: {},
                EncryptionOption: {}
            }
        },
        Si: {
            type: "structure",
            members: {
                AssociationId: {},
                AssociationArn: {},
                ConnectionArn: {},
                Name: {},
                Owner: {},
                ProviderType: {},
                State: {},
                StateReason: {},
                LastUpdatedTimeStamp: {
                    type: "timestamp"
                },
                CreatedTimeStamp: {
                    type: "timestamp"
                },
                KMSKeyDetails: {
                    shape: "Se"
                },
                S3RepositoryDetails: {
                    shape: "Sp"
                }
            }
        },
        Sp: {
            type: "structure",
            members: {
                BucketName: {},
                CodeArtifacts: {
                    type: "structure",
                    required: [ "SourceCodeArtifactsObjectKey" ],
                    members: {
                        SourceCodeArtifactsObjectKey: {},
                        BuildArtifactsObjectKey: {}
                    }
                }
            }
        },
        Sy: {
            type: "structure",
            required: [ "BranchName" ],
            members: {
                BranchName: {}
            }
        },
        S10: {
            type: "structure",
            members: {
                CommitDiff: {
                    type: "structure",
                    members: {
                        SourceCommit: {},
                        DestinationCommit: {},
                        MergeBaseCommit: {}
                    }
                },
                RepositoryHead: {
                    shape: "Sy"
                },
                BranchDiff: {
                    type: "structure",
                    required: [ "SourceBranchName", "DestinationBranchName" ],
                    members: {
                        SourceBranchName: {},
                        DestinationBranchName: {}
                    }
                },
                S3BucketRepository: {
                    type: "structure",
                    required: [ "Name" ],
                    members: {
                        Name: {},
                        Details: {
                            shape: "Sp"
                        }
                    }
                },
                RequestMetadata: {
                    type: "structure",
                    members: {
                        RequestId: {},
                        Requester: {},
                        EventInfo: {
                            type: "structure",
                            members: {
                                Name: {},
                                State: {}
                            }
                        },
                        VendorName: {}
                    }
                }
            }
        },
        S1c: {
            type: "list",
            member: {}
        },
        S1f: {
            type: "structure",
            members: {
                Name: {},
                CodeReviewArn: {},
                RepositoryName: {},
                Owner: {},
                ProviderType: {},
                State: {},
                StateReason: {},
                CreatedTimeStamp: {
                    type: "timestamp"
                },
                LastUpdatedTimeStamp: {
                    type: "timestamp"
                },
                Type: {},
                PullRequestId: {},
                SourceCodeType: {
                    shape: "S10"
                },
                AssociationArn: {},
                Metrics: {
                    type: "structure",
                    members: {
                        MeteredLinesOfCodeCount: {
                            type: "long"
                        },
                        FindingsCount: {
                            type: "long"
                        }
                    }
                },
                AnalysisTypes: {
                    shape: "S1c"
                }
            }
        },
        S1t: {
            type: "list",
            member: {}
        },
        S20: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListCodeReviews: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRecommendationFeedback: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRecommendations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRepositoryAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RepositoryAssociationSummaries"
        }
    },
    waiters: {
        RepositoryAssociationSucceeded: {
            description: "Wait until a repository association is complete.",
            operation: "DescribeRepositoryAssociation",
            delay: 10,
            maxAttempts: 20,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "RepositoryAssociation.State",
                expected: "Associated"
            }, {
                state: "retry",
                matcher: "path",
                argument: "RepositoryAssociation.State",
                expected: "Associating"
            } ]
        },
        CodeReviewCompleted: {
            description: "Wait until a code review is complete.",
            operation: "DescribeCodeReview",
            delay: 10,
            maxAttempts: 60,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "CodeReview.State",
                expected: "Completed"
            }, {
                state: "retry",
                matcher: "path",
                argument: "CodeReview.State",
                expected: "Pending"
            } ]
        }
    }
};

AWS.apiLoader.services["codeguruprofiler"] = {};

AWS.CodeGuruProfiler = AWS.Service.defineService("codeguruprofiler", [ "2019-07-18" ]);

AWS.apiLoader.services["codeguruprofiler"]["2019-07-18"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-07-18",
        endpointPrefix: "codeguru-profiler",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon CodeGuru Profiler",
        serviceId: "CodeGuruProfiler",
        signatureVersion: "v4",
        signingName: "codeguru-profiler",
        uid: "codeguruprofiler-2019-07-18"
    },
    operations: {
        AddNotificationChannels: {
            http: {
                requestUri: "/profilingGroups/{profilingGroupName}/notificationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channels", "profilingGroupName" ],
                members: {
                    channels: {
                        shape: "S2"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    notificationConfiguration: {
                        shape: "Sa"
                    }
                }
            }
        },
        BatchGetFrameMetricData: {
            http: {
                requestUri: "/profilingGroups/{profilingGroupName}/frames/-/metrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    endTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "endTime"
                    },
                    frameMetrics: {
                        type: "list",
                        member: {
                            shape: "Se"
                        }
                    },
                    period: {
                        location: "querystring",
                        locationName: "period"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    startTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "startTime"
                    },
                    targetResolution: {
                        location: "querystring",
                        locationName: "targetResolution"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "endTime", "endTimes", "frameMetricData", "resolution", "startTime", "unprocessedEndTimes" ],
                members: {
                    endTime: {
                        shape: "Sc"
                    },
                    endTimes: {
                        shape: "Sl"
                    },
                    frameMetricData: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "frameMetric", "values" ],
                            members: {
                                frameMetric: {
                                    shape: "Se"
                                },
                                values: {
                                    type: "list",
                                    member: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    },
                    resolution: {},
                    startTime: {
                        shape: "Sc"
                    },
                    unprocessedEndTimes: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "Sl"
                        }
                    }
                }
            }
        },
        ConfigureAgent: {
            http: {
                requestUri: "/profilingGroups/{profilingGroupName}/configureAgent",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    fleetInstanceId: {},
                    metadata: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "configuration" ],
                members: {
                    configuration: {
                        type: "structure",
                        required: [ "periodInSeconds", "shouldProfile" ],
                        members: {
                            agentParameters: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            periodInSeconds: {
                                type: "integer"
                            },
                            shouldProfile: {
                                type: "boolean"
                            }
                        }
                    }
                },
                payload: "configuration"
            }
        },
        CreateProfilingGroup: {
            http: {
                requestUri: "/profilingGroups",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "clientToken", "profilingGroupName" ],
                members: {
                    agentOrchestrationConfig: {
                        shape: "S13"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    computePlatform: {},
                    profilingGroupName: {},
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profilingGroup" ],
                members: {
                    profilingGroup: {
                        shape: "S18"
                    }
                },
                payload: "profilingGroup"
            },
            idempotent: true
        },
        DeleteProfilingGroup: {
            http: {
                method: "DELETE",
                requestUri: "/profilingGroups/{profilingGroupName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeProfilingGroup: {
            http: {
                method: "GET",
                requestUri: "/profilingGroups/{profilingGroupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profilingGroup" ],
                members: {
                    profilingGroup: {
                        shape: "S18"
                    }
                },
                payload: "profilingGroup"
            }
        },
        GetFindingsReportAccountSummary: {
            http: {
                method: "GET",
                requestUri: "/internal/findingsReports",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    dailyReportsOnly: {
                        location: "querystring",
                        locationName: "dailyReportsOnly",
                        type: "boolean"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "reportSummaries" ],
                members: {
                    nextToken: {},
                    reportSummaries: {
                        shape: "S1k"
                    }
                }
            }
        },
        GetNotificationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/profilingGroups/{profilingGroupName}/notificationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "notificationConfiguration" ],
                members: {
                    notificationConfiguration: {
                        shape: "Sa"
                    }
                }
            }
        },
        GetPolicy: {
            http: {
                method: "GET",
                requestUri: "/profilingGroups/{profilingGroupName}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policy", "revisionId" ],
                members: {
                    policy: {},
                    revisionId: {}
                }
            }
        },
        GetProfile: {
            http: {
                method: "GET",
                requestUri: "/profilingGroups/{profilingGroupName}/profile",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profilingGroupName" ],
                members: {
                    accept: {
                        location: "header",
                        locationName: "Accept"
                    },
                    endTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "endTime"
                    },
                    maxDepth: {
                        location: "querystring",
                        locationName: "maxDepth",
                        type: "integer"
                    },
                    period: {
                        location: "querystring",
                        locationName: "period"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    startTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "startTime"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "contentType", "profile" ],
                members: {
                    contentEncoding: {
                        location: "header",
                        locationName: "Content-Encoding"
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    profile: {
                        type: "blob"
                    }
                },
                payload: "profile"
            }
        },
        GetRecommendations: {
            http: {
                method: "GET",
                requestUri: "/internal/profilingGroups/{profilingGroupName}/recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endTime", "profilingGroupName", "startTime" ],
                members: {
                    endTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "endTime"
                    },
                    locale: {
                        location: "querystring",
                        locationName: "locale"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    startTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "startTime"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "anomalies", "profileEndTime", "profileStartTime", "profilingGroupName", "recommendations" ],
                members: {
                    anomalies: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "instances", "metric", "reason" ],
                            members: {
                                instances: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "id", "startTime" ],
                                        members: {
                                            endTime: {
                                                shape: "Sc"
                                            },
                                            id: {},
                                            startTime: {
                                                shape: "Sc"
                                            },
                                            userFeedback: {
                                                type: "structure",
                                                required: [ "type" ],
                                                members: {
                                                    type: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                metric: {
                                    type: "structure",
                                    required: [ "frameName", "threadStates", "type" ],
                                    members: {
                                        frameName: {},
                                        threadStates: {
                                            shape: "S26"
                                        },
                                        type: {}
                                    }
                                },
                                reason: {}
                            }
                        }
                    },
                    profileEndTime: {
                        shape: "Sc"
                    },
                    profileStartTime: {
                        shape: "Sc"
                    },
                    profilingGroupName: {},
                    recommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "allMatchesCount", "allMatchesSum", "endTime", "pattern", "startTime", "topMatches" ],
                            members: {
                                allMatchesCount: {
                                    type: "integer"
                                },
                                allMatchesSum: {
                                    type: "double"
                                },
                                endTime: {
                                    shape: "Sc"
                                },
                                pattern: {
                                    type: "structure",
                                    members: {
                                        countersToAggregate: {
                                            shape: "S26"
                                        },
                                        description: {},
                                        id: {},
                                        name: {},
                                        resolutionSteps: {},
                                        targetFrames: {
                                            type: "list",
                                            member: {
                                                type: "list",
                                                member: {}
                                            }
                                        },
                                        thresholdPercent: {
                                            type: "double"
                                        }
                                    }
                                },
                                startTime: {
                                    shape: "Sc"
                                },
                                topMatches: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            frameAddress: {},
                                            targetFramesIndex: {
                                                type: "integer"
                                            },
                                            thresholdBreachValue: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListFindingsReports: {
            http: {
                method: "GET",
                requestUri: "/internal/profilingGroups/{profilingGroupName}/findingsReports",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endTime", "profilingGroupName", "startTime" ],
                members: {
                    dailyReportsOnly: {
                        location: "querystring",
                        locationName: "dailyReportsOnly",
                        type: "boolean"
                    },
                    endTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "endTime"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    startTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "startTime"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "findingsReportSummaries" ],
                members: {
                    findingsReportSummaries: {
                        shape: "S1k"
                    },
                    nextToken: {}
                }
            }
        },
        ListProfileTimes: {
            http: {
                method: "GET",
                requestUri: "/profilingGroups/{profilingGroupName}/profileTimes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "endTime", "period", "profilingGroupName", "startTime" ],
                members: {
                    endTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "endTime"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    orderBy: {
                        location: "querystring",
                        locationName: "orderBy"
                    },
                    period: {
                        location: "querystring",
                        locationName: "period"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    startTime: {
                        shape: "Sc",
                        location: "querystring",
                        locationName: "startTime"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profileTimes" ],
                members: {
                    nextToken: {},
                    profileTimes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                start: {
                                    shape: "Sc"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListProfilingGroups: {
            http: {
                method: "GET",
                requestUri: "/profilingGroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    includeDescription: {
                        location: "querystring",
                        locationName: "includeDescription",
                        type: "boolean"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profilingGroupNames" ],
                members: {
                    nextToken: {},
                    profilingGroupNames: {
                        type: "list",
                        member: {}
                    },
                    profilingGroups: {
                        type: "list",
                        member: {
                            shape: "S18"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S16"
                    }
                }
            }
        },
        PostAgentProfile: {
            http: {
                requestUri: "/profilingGroups/{profilingGroupName}/agentProfile",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "agentProfile", "contentType", "profilingGroupName" ],
                members: {
                    agentProfile: {
                        type: "blob"
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    profileToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "profileToken"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                },
                payload: "agentProfile"
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutPermission: {
            http: {
                method: "PUT",
                requestUri: "/profilingGroups/{profilingGroupName}/policy/{actionGroup}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "actionGroup", "principals", "profilingGroupName" ],
                members: {
                    actionGroup: {
                        location: "uri",
                        locationName: "actionGroup"
                    },
                    principals: {
                        type: "list",
                        member: {}
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    revisionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policy", "revisionId" ],
                members: {
                    policy: {},
                    revisionId: {}
                }
            },
            idempotent: true
        },
        RemoveNotificationChannel: {
            http: {
                method: "DELETE",
                requestUri: "/profilingGroups/{profilingGroupName}/notificationConfiguration/{channelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelId", "profilingGroupName" ],
                members: {
                    channelId: {
                        location: "uri",
                        locationName: "channelId"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    notificationConfiguration: {
                        shape: "Sa"
                    }
                }
            },
            idempotent: true
        },
        RemovePermission: {
            http: {
                method: "DELETE",
                requestUri: "/profilingGroups/{profilingGroupName}/policy/{actionGroup}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "actionGroup", "profilingGroupName", "revisionId" ],
                members: {
                    actionGroup: {
                        location: "uri",
                        locationName: "actionGroup"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    revisionId: {
                        location: "querystring",
                        locationName: "revisionId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "policy", "revisionId" ],
                members: {
                    policy: {},
                    revisionId: {}
                }
            }
        },
        SubmitFeedback: {
            http: {
                requestUri: "/internal/profilingGroups/{profilingGroupName}/anomalies/{anomalyInstanceId}/feedback",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "anomalyInstanceId", "profilingGroupName", "type" ],
                members: {
                    anomalyInstanceId: {
                        location: "uri",
                        locationName: "anomalyInstanceId"
                    },
                    comment: {},
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateProfilingGroup: {
            http: {
                method: "PUT",
                requestUri: "/profilingGroups/{profilingGroupName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "agentOrchestrationConfig", "profilingGroupName" ],
                members: {
                    agentOrchestrationConfig: {
                        shape: "S13"
                    },
                    profilingGroupName: {
                        location: "uri",
                        locationName: "profilingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "profilingGroup" ],
                members: {
                    profilingGroup: {
                        shape: "S18"
                    }
                },
                payload: "profilingGroup"
            },
            idempotent: true
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {
                type: "structure",
                required: [ "eventPublishers", "uri" ],
                members: {
                    eventPublishers: {
                        type: "list",
                        member: {}
                    },
                    id: {},
                    uri: {}
                }
            }
        },
        Sa: {
            type: "structure",
            members: {
                channels: {
                    shape: "S2"
                }
            }
        },
        Sc: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Se: {
            type: "structure",
            required: [ "frameName", "threadStates", "type" ],
            members: {
                frameName: {},
                threadStates: {
                    type: "list",
                    member: {}
                },
                type: {}
            }
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                required: [ "value" ],
                members: {
                    value: {
                        shape: "Sc"
                    }
                }
            }
        },
        S13: {
            type: "structure",
            required: [ "profilingEnabled" ],
            members: {
                profilingEnabled: {
                    type: "boolean"
                }
            }
        },
        S16: {
            type: "map",
            key: {},
            value: {}
        },
        S18: {
            type: "structure",
            members: {
                agentOrchestrationConfig: {
                    shape: "S13"
                },
                arn: {},
                computePlatform: {},
                createdAt: {
                    shape: "Sc"
                },
                name: {},
                profilingStatus: {
                    type: "structure",
                    members: {
                        latestAgentOrchestratedAt: {
                            shape: "Sc"
                        },
                        latestAgentProfileReportedAt: {
                            shape: "Sc"
                        },
                        latestAggregatedProfile: {
                            type: "structure",
                            members: {
                                period: {},
                                start: {
                                    shape: "Sc"
                                }
                            }
                        }
                    }
                },
                tags: {
                    shape: "S16"
                },
                updatedAt: {
                    shape: "Sc"
                }
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    profileEndTime: {
                        shape: "Sc"
                    },
                    profileStartTime: {
                        shape: "Sc"
                    },
                    profilingGroupName: {},
                    totalNumberOfFindings: {
                        type: "integer"
                    }
                }
            }
        },
        S26: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetFindingsReportAccountSummary: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListFindingsReports: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListProfileTimes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "profileTimes"
        },
        ListProfilingGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["computeoptimizer"] = {};

AWS.ComputeOptimizer = AWS.Service.defineService("computeoptimizer", [ "2019-11-01" ]);

AWS.apiLoader.services["computeoptimizer"]["2019-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-11-01",
        endpointPrefix: "compute-optimizer",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "AWS Compute Optimizer",
        serviceId: "Compute Optimizer",
        signatureVersion: "v4",
        signingName: "compute-optimizer",
        targetPrefix: "ComputeOptimizerService",
        uid: "compute-optimizer-2019-11-01"
    },
    operations: {
        DescribeRecommendationExportJobs: {
            input: {
                type: "structure",
                members: {
                    jobIds: {
                        type: "list",
                        member: {}
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    shape: "S7"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recommendationExportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                jobId: {},
                                destination: {
                                    type: "structure",
                                    members: {
                                        s3: {
                                            shape: "Sf"
                                        }
                                    }
                                },
                                resourceType: {},
                                status: {},
                                creationTimestamp: {
                                    type: "timestamp"
                                },
                                lastUpdatedTimestamp: {
                                    type: "timestamp"
                                },
                                failureReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ExportAutoScalingGroupRecommendations: {
            input: {
                type: "structure",
                required: [ "s3DestinationConfig" ],
                members: {
                    accountIds: {
                        shape: "Sp"
                    },
                    filters: {
                        shape: "Sr"
                    },
                    fieldsToExport: {
                        type: "list",
                        member: {}
                    },
                    s3DestinationConfig: {
                        shape: "Sw"
                    },
                    fileFormat: {},
                    includeMemberAccounts: {
                        type: "boolean"
                    },
                    recommendationPreferences: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    s3Destination: {
                        shape: "Sf"
                    }
                }
            }
        },
        ExportEBSVolumeRecommendations: {
            input: {
                type: "structure",
                required: [ "s3DestinationConfig" ],
                members: {
                    accountIds: {
                        shape: "Sp"
                    },
                    filters: {
                        shape: "S15"
                    },
                    fieldsToExport: {
                        type: "list",
                        member: {}
                    },
                    s3DestinationConfig: {
                        shape: "Sw"
                    },
                    fileFormat: {},
                    includeMemberAccounts: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    s3Destination: {
                        shape: "Sf"
                    }
                }
            }
        },
        ExportEC2InstanceRecommendations: {
            input: {
                type: "structure",
                required: [ "s3DestinationConfig" ],
                members: {
                    accountIds: {
                        shape: "Sp"
                    },
                    filters: {
                        shape: "Sr"
                    },
                    fieldsToExport: {
                        type: "list",
                        member: {}
                    },
                    s3DestinationConfig: {
                        shape: "Sw"
                    },
                    fileFormat: {},
                    includeMemberAccounts: {
                        type: "boolean"
                    },
                    recommendationPreferences: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    s3Destination: {
                        shape: "Sf"
                    }
                }
            }
        },
        ExportLambdaFunctionRecommendations: {
            input: {
                type: "structure",
                required: [ "s3DestinationConfig" ],
                members: {
                    accountIds: {
                        shape: "Sp"
                    },
                    filters: {
                        shape: "S1g"
                    },
                    fieldsToExport: {
                        type: "list",
                        member: {}
                    },
                    s3DestinationConfig: {
                        shape: "Sw"
                    },
                    fileFormat: {},
                    includeMemberAccounts: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    s3Destination: {
                        shape: "Sf"
                    }
                }
            }
        },
        GetAutoScalingGroupRecommendations: {
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "Sp"
                    },
                    autoScalingGroupArns: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "Sr"
                    },
                    recommendationPreferences: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    autoScalingGroupRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                autoScalingGroupArn: {},
                                autoScalingGroupName: {},
                                finding: {},
                                utilizationMetrics: {
                                    shape: "S1u"
                                },
                                lookBackPeriodInDays: {
                                    type: "double"
                                },
                                currentConfiguration: {
                                    shape: "S20"
                                },
                                recommendationOptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            configuration: {
                                                shape: "S20"
                                            },
                                            projectedUtilizationMetrics: {
                                                shape: "S27"
                                            },
                                            performanceRisk: {
                                                type: "double"
                                            },
                                            rank: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                lastRefreshTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    errors: {
                        shape: "S2b"
                    }
                }
            }
        },
        GetEBSVolumeRecommendations: {
            input: {
                type: "structure",
                members: {
                    volumeArns: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S15"
                    },
                    accountIds: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    volumeRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                volumeArn: {},
                                accountId: {},
                                currentConfiguration: {
                                    shape: "S2m"
                                },
                                finding: {},
                                utilizationMetrics: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            statistic: {},
                                            value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                },
                                lookBackPeriodInDays: {
                                    type: "double"
                                },
                                volumeRecommendationOptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            configuration: {
                                                shape: "S2m"
                                            },
                                            performanceRisk: {
                                                type: "double"
                                            },
                                            rank: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                lastRefreshTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    errors: {
                        shape: "S2b"
                    }
                }
            }
        },
        GetEC2InstanceRecommendations: {
            input: {
                type: "structure",
                members: {
                    instanceArns: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "Sr"
                    },
                    accountIds: {
                        shape: "Sp"
                    },
                    recommendationPreferences: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    instanceRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                instanceArn: {},
                                accountId: {},
                                instanceName: {},
                                currentInstanceType: {},
                                finding: {},
                                findingReasonCodes: {
                                    type: "list",
                                    member: {}
                                },
                                utilizationMetrics: {
                                    shape: "S1u"
                                },
                                lookBackPeriodInDays: {
                                    type: "double"
                                },
                                recommendationOptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            instanceType: {},
                                            projectedUtilizationMetrics: {
                                                shape: "S27"
                                            },
                                            platformDifferences: {
                                                type: "list",
                                                member: {}
                                            },
                                            performanceRisk: {
                                                type: "double"
                                            },
                                            rank: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                recommendationSources: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            recommendationSourceArn: {},
                                            recommendationSourceType: {}
                                        }
                                    }
                                },
                                lastRefreshTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    errors: {
                        shape: "S2b"
                    }
                }
            }
        },
        GetEC2RecommendationProjectedMetrics: {
            input: {
                type: "structure",
                required: [ "instanceArn", "stat", "period", "startTime", "endTime" ],
                members: {
                    instanceArn: {},
                    stat: {},
                    period: {
                        type: "integer"
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    recommendationPreferences: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recommendedOptionProjectedMetrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                recommendedInstanceType: {},
                                rank: {
                                    type: "integer"
                                },
                                projectedMetrics: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            timestamps: {
                                                type: "list",
                                                member: {
                                                    type: "timestamp"
                                                }
                                            },
                                            values: {
                                                type: "list",
                                                member: {
                                                    type: "double"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetEnrollmentStatus: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    statusReason: {},
                    memberAccountsEnrolled: {
                        type: "boolean"
                    },
                    lastUpdatedTimestamp: {
                        type: "timestamp"
                    },
                    numberOfMemberAccountsOptedIn: {
                        type: "integer"
                    }
                }
            }
        },
        GetEnrollmentStatusesForOrganization: {
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    shape: "S7"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    accountEnrollmentStatuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                status: {},
                                statusReason: {},
                                lastUpdatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetLambdaFunctionRecommendations: {
            input: {
                type: "structure",
                members: {
                    functionArns: {
                        type: "list",
                        member: {}
                    },
                    accountIds: {
                        shape: "Sp"
                    },
                    filters: {
                        shape: "S1g"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    lambdaFunctionRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                functionArn: {},
                                functionVersion: {},
                                accountId: {},
                                currentMemorySize: {
                                    type: "integer"
                                },
                                numberOfInvocations: {
                                    type: "long"
                                },
                                utilizationMetrics: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            statistic: {},
                                            value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                },
                                lookbackPeriodInDays: {
                                    type: "double"
                                },
                                lastRefreshTimestamp: {
                                    type: "timestamp"
                                },
                                finding: {},
                                findingReasonCodes: {
                                    type: "list",
                                    member: {}
                                },
                                memorySizeRecommendationOptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            rank: {
                                                type: "integer"
                                            },
                                            memorySize: {
                                                type: "integer"
                                            },
                                            projectedUtilizationMetrics: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        name: {},
                                                        statistic: {},
                                                        value: {
                                                            type: "double"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetRecommendationSummaries: {
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "Sp"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    recommendationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                summaries: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            value: {
                                                type: "double"
                                            },
                                            reasonCodeSummaries: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        name: {},
                                                        value: {
                                                            type: "double"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                recommendationResourceType: {},
                                accountId: {}
                            }
                        }
                    }
                }
            }
        },
        UpdateEnrollmentStatus: {
            input: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {},
                    includeMemberAccounts: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    statusReason: {}
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "structure",
            members: {
                bucket: {},
                key: {},
                metadataKey: {}
            }
        },
        Sp: {
            type: "list",
            member: {}
        },
        Sr: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    values: {
                        shape: "S7"
                    }
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                bucket: {},
                keyPrefix: {}
            }
        },
        S10: {
            type: "structure",
            members: {
                cpuVendorArchitectures: {
                    type: "list",
                    member: {}
                }
            }
        },
        S15: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    values: {
                        shape: "S7"
                    }
                }
            }
        },
        S1g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    values: {
                        shape: "S7"
                    }
                }
            }
        },
        S1u: {
            type: "list",
            member: {
                shape: "S1v"
            }
        },
        S1v: {
            type: "structure",
            members: {
                name: {},
                statistic: {},
                value: {
                    type: "double"
                }
            }
        },
        S20: {
            type: "structure",
            members: {
                desiredCapacity: {
                    type: "integer"
                },
                minSize: {
                    type: "integer"
                },
                maxSize: {
                    type: "integer"
                },
                instanceType: {}
            }
        },
        S27: {
            type: "list",
            member: {
                shape: "S1v"
            }
        },
        S2b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    identifier: {},
                    code: {},
                    message: {}
                }
            }
        },
        S2m: {
            type: "structure",
            members: {
                volumeType: {},
                volumeSize: {
                    type: "integer"
                },
                volumeBaselineIOPS: {
                    type: "integer"
                },
                volumeBurstIOPS: {
                    type: "integer"
                },
                volumeBaselineThroughput: {
                    type: "integer"
                },
                volumeBurstThroughput: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["frauddetector"] = {};

AWS.FraudDetector = AWS.Service.defineService("frauddetector", [ "2019-11-15" ]);

AWS.apiLoader.services["frauddetector"]["2019-11-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-11-15",
        endpointPrefix: "frauddetector",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Fraud Detector",
        serviceId: "FraudDetector",
        signatureVersion: "v4",
        targetPrefix: "AWSHawksNestServiceFacade",
        uid: "frauddetector-2019-11-15"
    },
    operations: {
        BatchCreateVariable: {
            input: {
                type: "structure",
                required: [ "variableEntries" ],
                members: {
                    variableEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                dataType: {},
                                dataSource: {},
                                defaultValue: {},
                                description: {},
                                variableType: {}
                            }
                        }
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                code: {
                                    type: "integer"
                                },
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetVariable: {
            input: {
                type: "structure",
                required: [ "names" ],
                members: {
                    names: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    variables: {
                        shape: "Sg"
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                code: {
                                    type: "integer"
                                },
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        CancelBatchPredictionJob: {
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateBatchPredictionJob: {
            input: {
                type: "structure",
                required: [ "jobId", "inputPath", "outputPath", "eventTypeName", "detectorName", "iamRoleArn" ],
                members: {
                    jobId: {},
                    inputPath: {},
                    outputPath: {},
                    eventTypeName: {},
                    detectorName: {},
                    detectorVersion: {},
                    iamRoleArn: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDetectorVersion: {
            input: {
                type: "structure",
                required: [ "detectorId", "rules" ],
                members: {
                    detectorId: {},
                    description: {},
                    externalModelEndpoints: {
                        shape: "Sy"
                    },
                    rules: {
                        shape: "Sz"
                    },
                    modelVersions: {
                        shape: "S11"
                    },
                    ruleExecutionMode: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorId: {},
                    detectorVersionId: {},
                    status: {}
                }
            }
        },
        CreateModel: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType", "eventTypeName" ],
                members: {
                    modelId: {},
                    modelType: {},
                    description: {},
                    eventTypeName: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateModelVersion: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType", "trainingDataSource", "trainingDataSchema" ],
                members: {
                    modelId: {},
                    modelType: {},
                    trainingDataSource: {},
                    trainingDataSchema: {
                        shape: "S1d"
                    },
                    externalEventsDetail: {
                        shape: "S1h"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    modelId: {},
                    modelType: {},
                    modelVersionNumber: {},
                    status: {}
                }
            }
        },
        CreateRule: {
            input: {
                type: "structure",
                required: [ "ruleId", "detectorId", "expression", "language", "outcomes" ],
                members: {
                    ruleId: {},
                    detectorId: {},
                    description: {},
                    expression: {
                        shape: "S1k"
                    },
                    language: {},
                    outcomes: {
                        shape: "S1g"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    rule: {
                        shape: "S10"
                    }
                }
            }
        },
        CreateVariable: {
            input: {
                type: "structure",
                required: [ "name", "dataType", "dataSource", "defaultValue" ],
                members: {
                    name: {},
                    dataType: {},
                    dataSource: {},
                    defaultValue: {},
                    description: {},
                    variableType: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteBatchPredictionJob: {
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDetector: {
            input: {
                type: "structure",
                required: [ "detectorId" ],
                members: {
                    detectorId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDetectorVersion: {
            input: {
                type: "structure",
                required: [ "detectorId", "detectorVersionId" ],
                members: {
                    detectorId: {},
                    detectorVersionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEntityType: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEvent: {
            input: {
                type: "structure",
                required: [ "eventId", "eventTypeName" ],
                members: {
                    eventId: {},
                    eventTypeName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEventType: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteExternalModel: {
            input: {
                type: "structure",
                required: [ "modelEndpoint" ],
                members: {
                    modelEndpoint: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLabel: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteModel: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType" ],
                members: {
                    modelId: {},
                    modelType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteModelVersion: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType", "modelVersionNumber" ],
                members: {
                    modelId: {},
                    modelType: {},
                    modelVersionNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteOutcome: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRule: {
            input: {
                type: "structure",
                required: [ "rule" ],
                members: {
                    rule: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteVariable: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeDetector: {
            input: {
                type: "structure",
                required: [ "detectorId" ],
                members: {
                    detectorId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorId: {},
                    detectorVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                detectorVersionId: {},
                                status: {},
                                description: {},
                                lastUpdatedTime: {}
                            }
                        }
                    },
                    nextToken: {},
                    arn: {}
                }
            }
        },
        DescribeModelVersions: {
            input: {
                type: "structure",
                members: {
                    modelId: {},
                    modelVersionNumber: {},
                    modelType: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    modelVersionDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                modelId: {},
                                modelType: {},
                                modelVersionNumber: {},
                                status: {},
                                trainingDataSource: {},
                                trainingDataSchema: {
                                    shape: "S1d"
                                },
                                externalEventsDetail: {
                                    shape: "S1h"
                                },
                                trainingResult: {
                                    type: "structure",
                                    members: {
                                        dataValidationMetrics: {
                                            type: "structure",
                                            members: {
                                                fileLevelMessages: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            title: {},
                                                            content: {},
                                                            type: {}
                                                        }
                                                    }
                                                },
                                                fieldLevelMessages: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            fieldName: {},
                                                            identifier: {},
                                                            title: {},
                                                            content: {},
                                                            type: {}
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        trainingMetrics: {
                                            type: "structure",
                                            members: {
                                                auc: {
                                                    type: "float"
                                                },
                                                metricDataPoints: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            fpr: {
                                                                type: "float"
                                                            },
                                                            precision: {
                                                                type: "float"
                                                            },
                                                            tpr: {
                                                                type: "float"
                                                            },
                                                            threshold: {
                                                                type: "float"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        variableImportanceMetrics: {
                                            type: "structure",
                                            members: {
                                                logOddsMetrics: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "variableName", "variableType", "variableImportance" ],
                                                        members: {
                                                            variableName: {},
                                                            variableType: {},
                                                            variableImportance: {
                                                                type: "float"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetBatchPredictionJobs: {
            input: {
                type: "structure",
                members: {
                    jobId: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    batchPredictions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                jobId: {},
                                status: {},
                                failureReason: {},
                                startTime: {},
                                completionTime: {},
                                lastHeartbeatTime: {},
                                inputPath: {},
                                outputPath: {},
                                eventTypeName: {},
                                detectorName: {},
                                detectorVersion: {},
                                iamRoleArn: {},
                                arn: {},
                                processedRecordsCount: {
                                    type: "integer"
                                },
                                totalRecordsCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetDetectorVersion: {
            input: {
                type: "structure",
                required: [ "detectorId", "detectorVersionId" ],
                members: {
                    detectorId: {},
                    detectorVersionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorId: {},
                    detectorVersionId: {},
                    description: {},
                    externalModelEndpoints: {
                        shape: "Sy"
                    },
                    modelVersions: {
                        shape: "S11"
                    },
                    rules: {
                        shape: "Sz"
                    },
                    status: {},
                    lastUpdatedTime: {},
                    createdTime: {},
                    ruleExecutionMode: {},
                    arn: {}
                }
            }
        },
        GetDetectors: {
            input: {
                type: "structure",
                members: {
                    detectorId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    detectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                detectorId: {},
                                description: {},
                                eventTypeName: {},
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetEntityTypes: {
            input: {
                type: "structure",
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    entityTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                description: {},
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetEventPrediction: {
            input: {
                type: "structure",
                required: [ "detectorId", "eventId", "eventTypeName", "entities", "eventTimestamp", "eventVariables" ],
                members: {
                    detectorId: {},
                    detectorVersionId: {},
                    eventId: {},
                    eventTypeName: {},
                    entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entityType", "entityId" ],
                            members: {
                                entityType: {},
                                entityId: {}
                            },
                            sensitive: true
                        }
                    },
                    eventTimestamp: {},
                    eventVariables: {
                        type: "map",
                        key: {},
                        value: {
                            type: "string",
                            sensitive: true
                        }
                    },
                    externalModelEndpointDataBlobs: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                byteBuffer: {
                                    type: "blob"
                                },
                                contentType: {}
                            }
                        },
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    modelScores: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                modelVersion: {
                                    shape: "S12"
                                },
                                scores: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "float"
                                    }
                                }
                            }
                        }
                    },
                    ruleResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ruleId: {},
                                outcomes: {
                                    shape: "Sy"
                                }
                            }
                        }
                    },
                    externalModelOutputs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                externalModel: {
                                    type: "structure",
                                    members: {
                                        modelEndpoint: {},
                                        modelSource: {}
                                    }
                                },
                                outputs: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        GetEventTypes: {
            input: {
                type: "structure",
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eventTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                description: {},
                                eventVariables: {
                                    shape: "Sy"
                                },
                                labels: {
                                    shape: "Sy"
                                },
                                entityTypes: {
                                    shape: "S1g"
                                },
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            },
                            sensitive: true
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetExternalModels: {
            input: {
                type: "structure",
                members: {
                    modelEndpoint: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    externalModels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                modelEndpoint: {},
                                modelSource: {},
                                invokeModelEndpointRoleArn: {},
                                inputConfiguration: {
                                    shape: "S4j"
                                },
                                outputConfiguration: {
                                    shape: "S4m"
                                },
                                modelEndpointStatus: {},
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetKMSEncryptionKey: {
            output: {
                type: "structure",
                members: {
                    kmsKey: {
                        type: "structure",
                        members: {
                            kmsEncryptionKeyArn: {}
                        }
                    }
                }
            }
        },
        GetLabels: {
            input: {
                type: "structure",
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    labels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                description: {},
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetModelVersion: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType", "modelVersionNumber" ],
                members: {
                    modelId: {},
                    modelType: {},
                    modelVersionNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    modelId: {},
                    modelType: {},
                    modelVersionNumber: {},
                    trainingDataSource: {},
                    trainingDataSchema: {
                        shape: "S1d"
                    },
                    externalEventsDetail: {
                        shape: "S1h"
                    },
                    status: {},
                    arn: {}
                }
            }
        },
        GetModels: {
            input: {
                type: "structure",
                members: {
                    modelId: {},
                    modelType: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    models: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                modelId: {},
                                modelType: {},
                                description: {},
                                eventTypeName: {},
                                createdTime: {},
                                lastUpdatedTime: {},
                                arn: {}
                            }
                        }
                    }
                }
            }
        },
        GetOutcomes: {
            input: {
                type: "structure",
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    outcomes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                description: {},
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetRules: {
            input: {
                type: "structure",
                required: [ "detectorId" ],
                members: {
                    ruleId: {},
                    detectorId: {},
                    ruleVersion: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ruleDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ruleId: {},
                                description: {},
                                detectorId: {},
                                ruleVersion: {},
                                expression: {
                                    shape: "S1k"
                                },
                                language: {},
                                outcomes: {
                                    shape: "S1g"
                                },
                                lastUpdatedTime: {},
                                createdTime: {},
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetVariables: {
            input: {
                type: "structure",
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    variables: {
                        shape: "Sg"
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceARN" ],
                members: {
                    resourceARN: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S5"
                    },
                    nextToken: {}
                }
            }
        },
        PutDetector: {
            input: {
                type: "structure",
                required: [ "detectorId", "eventTypeName" ],
                members: {
                    detectorId: {},
                    description: {},
                    eventTypeName: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEntityType: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEventType: {
            input: {
                type: "structure",
                required: [ "name", "eventVariables", "entityTypes" ],
                members: {
                    name: {},
                    description: {},
                    eventVariables: {
                        shape: "S1g"
                    },
                    labels: {
                        shape: "Sy"
                    },
                    entityTypes: {
                        shape: "S1g"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutExternalModel: {
            input: {
                type: "structure",
                required: [ "modelEndpoint", "modelSource", "invokeModelEndpointRoleArn", "inputConfiguration", "outputConfiguration", "modelEndpointStatus" ],
                members: {
                    modelEndpoint: {},
                    modelSource: {},
                    invokeModelEndpointRoleArn: {},
                    inputConfiguration: {
                        shape: "S4j"
                    },
                    outputConfiguration: {
                        shape: "S4m"
                    },
                    modelEndpointStatus: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutKMSEncryptionKey: {
            input: {
                type: "structure",
                required: [ "kmsEncryptionKeyArn" ],
                members: {
                    kmsEncryptionKeyArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutLabel: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutOutcome: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceARN", "tags" ],
                members: {
                    resourceARN: {},
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceARN", "tagKeys" ],
                members: {
                    resourceARN: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDetectorVersion: {
            input: {
                type: "structure",
                required: [ "detectorId", "detectorVersionId", "externalModelEndpoints", "rules" ],
                members: {
                    detectorId: {},
                    detectorVersionId: {},
                    externalModelEndpoints: {
                        shape: "Sy"
                    },
                    rules: {
                        shape: "Sz"
                    },
                    description: {},
                    modelVersions: {
                        shape: "S11"
                    },
                    ruleExecutionMode: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDetectorVersionMetadata: {
            input: {
                type: "structure",
                required: [ "detectorId", "detectorVersionId", "description" ],
                members: {
                    detectorId: {},
                    detectorVersionId: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDetectorVersionStatus: {
            input: {
                type: "structure",
                required: [ "detectorId", "detectorVersionId", "status" ],
                members: {
                    detectorId: {},
                    detectorVersionId: {},
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateModel: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType" ],
                members: {
                    modelId: {},
                    modelType: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateModelVersion: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType", "majorVersionNumber" ],
                members: {
                    modelId: {},
                    modelType: {},
                    majorVersionNumber: {},
                    externalEventsDetail: {
                        shape: "S1h"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    modelId: {},
                    modelType: {},
                    modelVersionNumber: {},
                    status: {}
                }
            }
        },
        UpdateModelVersionStatus: {
            input: {
                type: "structure",
                required: [ "modelId", "modelType", "modelVersionNumber", "status" ],
                members: {
                    modelId: {},
                    modelType: {},
                    modelVersionNumber: {},
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRuleMetadata: {
            input: {
                type: "structure",
                required: [ "rule", "description" ],
                members: {
                    rule: {
                        shape: "S10"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRuleVersion: {
            input: {
                type: "structure",
                required: [ "rule", "expression", "language", "outcomes" ],
                members: {
                    rule: {
                        shape: "S10"
                    },
                    description: {},
                    expression: {
                        shape: "S1k"
                    },
                    language: {},
                    outcomes: {
                        shape: "S1g"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    rule: {
                        shape: "S10"
                    }
                }
            }
        },
        UpdateVariable: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    defaultValue: {},
                    description: {},
                    variableType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    dataType: {},
                    dataSource: {},
                    defaultValue: {},
                    description: {},
                    variableType: {},
                    lastUpdatedTime: {},
                    createdTime: {},
                    arn: {}
                }
            }
        },
        Sy: {
            type: "list",
            member: {}
        },
        Sz: {
            type: "list",
            member: {
                shape: "S10"
            }
        },
        S10: {
            type: "structure",
            required: [ "detectorId", "ruleId", "ruleVersion" ],
            members: {
                detectorId: {},
                ruleId: {},
                ruleVersion: {}
            }
        },
        S11: {
            type: "list",
            member: {
                shape: "S12"
            }
        },
        S12: {
            type: "structure",
            required: [ "modelId", "modelType", "modelVersionNumber" ],
            members: {
                modelId: {},
                modelType: {},
                modelVersionNumber: {},
                arn: {}
            }
        },
        S1d: {
            type: "structure",
            required: [ "modelVariables", "labelSchema" ],
            members: {
                modelVariables: {
                    shape: "Sy"
                },
                labelSchema: {
                    type: "structure",
                    required: [ "labelMapper" ],
                    members: {
                        labelMapper: {
                            type: "map",
                            key: {},
                            value: {
                                shape: "S1g"
                            }
                        }
                    }
                }
            }
        },
        S1g: {
            type: "list",
            member: {}
        },
        S1h: {
            type: "structure",
            required: [ "dataLocation", "dataAccessRoleArn" ],
            members: {
                dataLocation: {},
                dataAccessRoleArn: {}
            }
        },
        S1k: {
            type: "string",
            sensitive: true
        },
        S4j: {
            type: "structure",
            required: [ "useEventVariables" ],
            members: {
                eventTypeName: {},
                format: {},
                useEventVariables: {
                    type: "boolean"
                },
                jsonInputTemplate: {},
                csvInputTemplate: {}
            }
        },
        S4m: {
            type: "structure",
            required: [ "format" ],
            members: {
                format: {},
                jsonKeyToVariableMap: {
                    type: "map",
                    key: {},
                    value: {}
                },
                csvIndexToVariableMap: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        }
    },
    paginators: {
        DescribeModelVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetBatchPredictionJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetDetectors: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetEntityTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetEventTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetExternalModels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetLabels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetModels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetOutcomes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetRules: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetVariables: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTagsForResource: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["kendra"] = {};

AWS.Kendra = AWS.Service.defineService("kendra", [ "2019-02-03" ]);

AWS.apiLoader.services["kendra"]["2019-02-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-02-03",
        endpointPrefix: "kendra",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "kendra",
        serviceFullName: "AWSKendraFrontendService",
        serviceId: "kendra",
        signatureVersion: "v4",
        signingName: "kendra",
        targetPrefix: "AWSKendraFrontendService",
        uid: "kendra-2019-02-03"
    },
    operations: {
        BatchDeleteDocument: {
            input: {
                type: "structure",
                required: [ "IndexId", "DocumentIdList" ],
                members: {
                    IndexId: {},
                    DocumentIdList: {
                        type: "list",
                        member: {}
                    },
                    DataSourceSyncJobMetricTarget: {
                        type: "structure",
                        required: [ "DataSourceId" ],
                        members: {
                            DataSourceId: {},
                            DataSourceSyncJobId: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedDocuments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetDocumentStatus: {
            input: {
                type: "structure",
                required: [ "IndexId", "DocumentInfoList" ],
                members: {
                    IndexId: {},
                    DocumentInfoList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DocumentId" ],
                            members: {
                                DocumentId: {},
                                Attributes: {
                                    shape: "Sg"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DocumentId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    },
                    DocumentStatusList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DocumentId: {},
                                DocumentStatus: {},
                                FailureCode: {},
                                FailureReason: {}
                            }
                        }
                    }
                }
            }
        },
        BatchPutDocument: {
            input: {
                type: "structure",
                required: [ "IndexId", "Documents" ],
                members: {
                    IndexId: {},
                    RoleArn: {},
                    Documents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id" ],
                            members: {
                                Id: {},
                                Title: {},
                                Blob: {
                                    type: "blob"
                                },
                                S3Path: {
                                    shape: "S11"
                                },
                                Attributes: {
                                    shape: "Sg"
                                },
                                AccessControlList: {
                                    shape: "S14"
                                },
                                HierarchicalAccessControlList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "PrincipalList" ],
                                        members: {
                                            PrincipalList: {
                                                shape: "S14"
                                            }
                                        }
                                    }
                                },
                                ContentType: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedDocuments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        ClearQuerySuggestions: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {}
                }
            }
        },
        CreateDataSource: {
            input: {
                type: "structure",
                required: [ "Name", "IndexId", "Type" ],
                members: {
                    Name: {},
                    IndexId: {},
                    Type: {},
                    Configuration: {
                        shape: "S1j"
                    },
                    Description: {},
                    Schedule: {},
                    RoleArn: {},
                    Tags: {
                        shape: "S4n"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            }
        },
        CreateFaq: {
            input: {
                type: "structure",
                required: [ "IndexId", "Name", "S3Path", "RoleArn" ],
                members: {
                    IndexId: {},
                    Name: {},
                    Description: {},
                    S3Path: {
                        shape: "S11"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S4n"
                    },
                    FileFormat: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {}
                }
            }
        },
        CreateIndex: {
            input: {
                type: "structure",
                required: [ "Name", "RoleArn" ],
                members: {
                    Name: {},
                    Edition: {},
                    RoleArn: {},
                    ServerSideEncryptionConfiguration: {
                        shape: "S51"
                    },
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S4n"
                    },
                    UserTokenConfigurations: {
                        shape: "S53"
                    },
                    UserContextPolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {}
                }
            }
        },
        CreateQuerySuggestionsBlockList: {
            input: {
                type: "structure",
                required: [ "IndexId", "Name", "SourceS3Path", "RoleArn" ],
                members: {
                    IndexId: {},
                    Name: {},
                    Description: {},
                    SourceS3Path: {
                        shape: "S11"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S4n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {}
                }
            }
        },
        CreateThesaurus: {
            input: {
                type: "structure",
                required: [ "IndexId", "Name", "RoleArn", "SourceS3Path" ],
                members: {
                    IndexId: {},
                    Name: {},
                    Description: {},
                    RoleArn: {},
                    Tags: {
                        shape: "S4n"
                    },
                    SourceS3Path: {
                        shape: "S11"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {}
                }
            }
        },
        DeleteDataSource: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            }
        },
        DeleteFaq: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            }
        },
        DeleteIndex: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            }
        },
        DeletePrincipalMapping: {
            input: {
                type: "structure",
                required: [ "IndexId", "GroupId" ],
                members: {
                    IndexId: {},
                    DataSourceId: {},
                    GroupId: {},
                    OrderingId: {
                        type: "long"
                    }
                }
            }
        },
        DeleteQuerySuggestionsBlockList: {
            input: {
                type: "structure",
                required: [ "IndexId", "Id" ],
                members: {
                    IndexId: {},
                    Id: {}
                }
            }
        },
        DeleteThesaurus: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            }
        },
        DescribeDataSource: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    IndexId: {},
                    Name: {},
                    Type: {},
                    Configuration: {
                        shape: "S1j"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    Description: {},
                    Status: {},
                    Schedule: {},
                    RoleArn: {},
                    ErrorMessage: {}
                }
            }
        },
        DescribeFaq: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    IndexId: {},
                    Name: {},
                    Description: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    S3Path: {
                        shape: "S11"
                    },
                    Status: {},
                    RoleArn: {},
                    ErrorMessage: {},
                    FileFormat: {}
                }
            }
        },
        DescribeIndex: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Id: {},
                    Edition: {},
                    RoleArn: {},
                    ServerSideEncryptionConfiguration: {
                        shape: "S51"
                    },
                    Status: {},
                    Description: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    DocumentMetadataConfigurations: {
                        shape: "S63"
                    },
                    IndexStatistics: {
                        type: "structure",
                        required: [ "FaqStatistics", "TextDocumentStatistics" ],
                        members: {
                            FaqStatistics: {
                                type: "structure",
                                required: [ "IndexedQuestionAnswersCount" ],
                                members: {
                                    IndexedQuestionAnswersCount: {
                                        type: "integer"
                                    }
                                }
                            },
                            TextDocumentStatistics: {
                                type: "structure",
                                required: [ "IndexedTextDocumentsCount", "IndexedTextBytes" ],
                                members: {
                                    IndexedTextDocumentsCount: {
                                        type: "integer"
                                    },
                                    IndexedTextBytes: {
                                        type: "long"
                                    }
                                }
                            }
                        }
                    },
                    ErrorMessage: {},
                    CapacityUnits: {
                        shape: "S6l"
                    },
                    UserTokenConfigurations: {
                        shape: "S53"
                    },
                    UserContextPolicy: {}
                }
            }
        },
        DescribePrincipalMapping: {
            input: {
                type: "structure",
                required: [ "IndexId", "GroupId" ],
                members: {
                    IndexId: {},
                    DataSourceId: {},
                    GroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IndexId: {},
                    DataSourceId: {},
                    GroupId: {},
                    GroupOrderingIdSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Status: {},
                                LastUpdatedAt: {
                                    type: "timestamp"
                                },
                                ReceivedAt: {
                                    type: "timestamp"
                                },
                                OrderingId: {
                                    type: "long"
                                },
                                FailureReason: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeQuerySuggestionsBlockList: {
            input: {
                type: "structure",
                required: [ "IndexId", "Id" ],
                members: {
                    IndexId: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IndexId: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    Status: {},
                    ErrorMessage: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    SourceS3Path: {
                        shape: "S11"
                    },
                    ItemCount: {
                        type: "integer"
                    },
                    FileSizeBytes: {
                        type: "long"
                    },
                    RoleArn: {}
                }
            }
        },
        DescribeQuerySuggestionsConfig: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Mode: {},
                    Status: {},
                    QueryLogLookBackWindowInDays: {
                        type: "integer"
                    },
                    IncludeQueriesWithoutUserInformation: {
                        type: "boolean"
                    },
                    MinimumNumberOfQueryingUsers: {
                        type: "integer"
                    },
                    MinimumQueryCount: {
                        type: "integer"
                    },
                    LastSuggestionsBuildTime: {
                        type: "timestamp"
                    },
                    LastClearTime: {
                        type: "timestamp"
                    },
                    TotalSuggestionsCount: {
                        type: "integer"
                    }
                }
            }
        },
        DescribeThesaurus: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    IndexId: {},
                    Name: {},
                    Description: {},
                    Status: {},
                    ErrorMessage: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    UpdatedAt: {
                        type: "timestamp"
                    },
                    RoleArn: {},
                    SourceS3Path: {
                        shape: "S11"
                    },
                    FileSizeBytes: {
                        type: "long"
                    },
                    TermCount: {
                        type: "long"
                    },
                    SynonymRuleCount: {
                        type: "long"
                    }
                }
            }
        },
        GetQuerySuggestions: {
            input: {
                type: "structure",
                required: [ "IndexId", "QueryText" ],
                members: {
                    IndexId: {},
                    QueryText: {},
                    MaxSuggestionsCount: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QuerySuggestionsId: {},
                    Suggestions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Value: {
                                    type: "structure",
                                    members: {
                                        Text: {
                                            type: "structure",
                                            members: {
                                                Text: {},
                                                Highlights: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            BeginOffset: {
                                                                type: "integer"
                                                            },
                                                            EndOffset: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListDataSourceSyncJobs: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    StartTimeFilter: {
                        type: "structure",
                        members: {
                            StartTime: {
                                type: "timestamp"
                            },
                            EndTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    StatusFilter: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    History: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ExecutionId: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                Status: {},
                                ErrorMessage: {},
                                ErrorCode: {},
                                DataSourceErrorCode: {},
                                Metrics: {
                                    type: "structure",
                                    members: {
                                        DocumentsAdded: {},
                                        DocumentsModified: {},
                                        DocumentsDeleted: {},
                                        DocumentsFailed: {},
                                        DocumentsScanned: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDataSources: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Id: {},
                                Type: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFaqs: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FaqSummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Status: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                FileFormat: {}
                            }
                        }
                    }
                }
            }
        },
        ListGroupsOlderThanOrderingId: {
            input: {
                type: "structure",
                required: [ "IndexId", "OrderingId" ],
                members: {
                    IndexId: {},
                    DataSourceId: {},
                    OrderingId: {
                        type: "long"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupsSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupId: {},
                                OrderingId: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListIndices: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IndexConfigurationSummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreatedAt", "UpdatedAt", "Status" ],
                            members: {
                                Name: {},
                                Id: {},
                                Edition: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListQuerySuggestionsBlockLists: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BlockListSummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Status: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                },
                                ItemCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S4n"
                    }
                }
            }
        },
        ListThesauri: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ThesaurusSummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Status: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        PutPrincipalMapping: {
            input: {
                type: "structure",
                required: [ "IndexId", "GroupId", "GroupMembers" ],
                members: {
                    IndexId: {},
                    DataSourceId: {},
                    GroupId: {},
                    GroupMembers: {
                        type: "structure",
                        members: {
                            MemberGroups: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "GroupId" ],
                                    members: {
                                        GroupId: {},
                                        DataSourceId: {}
                                    }
                                }
                            },
                            MemberUsers: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "UserId" ],
                                    members: {
                                        UserId: {}
                                    }
                                }
                            },
                            S3PathforGroupMembers: {
                                shape: "S11"
                            }
                        }
                    },
                    OrderingId: {
                        type: "long"
                    },
                    RoleArn: {}
                }
            }
        },
        Query: {
            input: {
                type: "structure",
                required: [ "IndexId", "QueryText" ],
                members: {
                    IndexId: {},
                    QueryText: {},
                    AttributeFilter: {
                        shape: "S8z"
                    },
                    Facets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DocumentAttributeKey: {}
                            }
                        }
                    },
                    RequestedDocumentAttributes: {
                        type: "list",
                        member: {}
                    },
                    QueryResultTypeFilter: {},
                    DocumentRelevanceOverrideConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Relevance" ],
                            members: {
                                Name: {},
                                Relevance: {
                                    shape: "S67"
                                }
                            }
                        }
                    },
                    PageNumber: {
                        type: "integer"
                    },
                    PageSize: {
                        type: "integer"
                    },
                    SortingConfiguration: {
                        type: "structure",
                        required: [ "DocumentAttributeKey", "SortOrder" ],
                        members: {
                            DocumentAttributeKey: {},
                            SortOrder: {}
                        }
                    },
                    UserContext: {
                        type: "structure",
                        members: {
                            Token: {},
                            UserId: {},
                            Groups: {
                                type: "list",
                                member: {}
                            },
                            DataSourceGroups: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "GroupId", "DataSourceId" ],
                                    members: {
                                        GroupId: {},
                                        DataSourceId: {}
                                    }
                                }
                            }
                        }
                    },
                    VisitorId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryId: {},
                    ResultItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Type: {},
                                AdditionalAttributes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Key", "ValueType", "Value" ],
                                        members: {
                                            Key: {},
                                            ValueType: {},
                                            Value: {
                                                type: "structure",
                                                members: {
                                                    TextWithHighlightsValue: {
                                                        shape: "S9n"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                DocumentId: {},
                                DocumentTitle: {
                                    shape: "S9n"
                                },
                                DocumentExcerpt: {
                                    shape: "S9n"
                                },
                                DocumentURI: {},
                                DocumentAttributes: {
                                    shape: "Sg"
                                },
                                ScoreAttributes: {
                                    type: "structure",
                                    members: {
                                        ScoreConfidence: {}
                                    }
                                },
                                FeedbackToken: {}
                            }
                        }
                    },
                    FacetResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DocumentAttributeKey: {},
                                DocumentAttributeValueType: {},
                                DocumentAttributeValueCountPairs: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            DocumentAttributeValue: {
                                                shape: "Sj"
                                            },
                                            Count: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    TotalNumberOfResults: {
                        type: "integer"
                    }
                }
            }
        },
        StartDataSourceSyncJob: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExecutionId: {}
                }
            }
        },
        StopDataSourceSyncJob: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    IndexId: {}
                }
            }
        },
        SubmitFeedback: {
            input: {
                type: "structure",
                required: [ "IndexId", "QueryId" ],
                members: {
                    IndexId: {},
                    QueryId: {},
                    ClickFeedbackItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ResultId", "ClickTime" ],
                            members: {
                                ResultId: {},
                                ClickTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    RelevanceFeedbackItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ResultId", "RelevanceValue" ],
                            members: {
                                ResultId: {},
                                RelevanceValue: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S4n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDataSource: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    Name: {},
                    IndexId: {},
                    Configuration: {
                        shape: "S1j"
                    },
                    Description: {},
                    Schedule: {},
                    RoleArn: {}
                }
            }
        },
        UpdateIndex: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    Name: {},
                    RoleArn: {},
                    Description: {},
                    DocumentMetadataConfigurationUpdates: {
                        shape: "S63"
                    },
                    CapacityUnits: {
                        shape: "S6l"
                    },
                    UserTokenConfigurations: {
                        shape: "S53"
                    },
                    UserContextPolicy: {}
                }
            }
        },
        UpdateQuerySuggestionsBlockList: {
            input: {
                type: "structure",
                required: [ "IndexId", "Id" ],
                members: {
                    IndexId: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    SourceS3Path: {
                        shape: "S11"
                    },
                    RoleArn: {}
                }
            }
        },
        UpdateQuerySuggestionsConfig: {
            input: {
                type: "structure",
                required: [ "IndexId" ],
                members: {
                    IndexId: {},
                    Mode: {},
                    QueryLogLookBackWindowInDays: {
                        type: "integer"
                    },
                    IncludeQueriesWithoutUserInformation: {
                        type: "boolean"
                    },
                    MinimumNumberOfQueryingUsers: {
                        type: "integer"
                    },
                    MinimumQueryCount: {
                        type: "integer"
                    }
                }
            }
        },
        UpdateThesaurus: {
            input: {
                type: "structure",
                required: [ "Id", "IndexId" ],
                members: {
                    Id: {},
                    Name: {},
                    IndexId: {},
                    Description: {},
                    RoleArn: {},
                    SourceS3Path: {
                        shape: "S11"
                    }
                }
            }
        }
    },
    shapes: {
        Sg: {
            type: "list",
            member: {
                shape: "Sh"
            }
        },
        Sh: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {},
                Value: {
                    shape: "Sj"
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                StringValue: {},
                StringListValue: {
                    type: "list",
                    member: {}
                },
                LongValue: {
                    type: "long"
                },
                DateValue: {
                    type: "timestamp"
                }
            }
        },
        S11: {
            type: "structure",
            required: [ "Bucket", "Key" ],
            members: {
                Bucket: {},
                Key: {}
            }
        },
        S14: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Type", "Access" ],
                members: {
                    Name: {},
                    Type: {},
                    Access: {},
                    DataSourceId: {}
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                S3Configuration: {
                    type: "structure",
                    required: [ "BucketName" ],
                    members: {
                        BucketName: {},
                        InclusionPrefixes: {
                            shape: "S1l"
                        },
                        InclusionPatterns: {
                            shape: "S1l"
                        },
                        ExclusionPatterns: {
                            shape: "S1l"
                        },
                        DocumentsMetadataConfiguration: {
                            type: "structure",
                            members: {
                                S3Prefix: {}
                            }
                        },
                        AccessControlListConfiguration: {
                            type: "structure",
                            members: {
                                KeyPath: {}
                            }
                        }
                    }
                },
                SharePointConfiguration: {
                    type: "structure",
                    required: [ "SharePointVersion", "Urls", "SecretArn" ],
                    members: {
                        SharePointVersion: {},
                        Urls: {
                            type: "list",
                            member: {}
                        },
                        SecretArn: {},
                        CrawlAttachments: {
                            type: "boolean"
                        },
                        UseChangeLog: {
                            type: "boolean"
                        },
                        InclusionPatterns: {
                            shape: "S1l"
                        },
                        ExclusionPatterns: {
                            shape: "S1l"
                        },
                        VpcConfiguration: {
                            shape: "S1v"
                        },
                        FieldMappings: {
                            shape: "S20"
                        },
                        DocumentTitleFieldName: {},
                        DisableLocalGroups: {
                            type: "boolean"
                        },
                        SslCertificateS3Path: {
                            shape: "S11"
                        }
                    }
                },
                DatabaseConfiguration: {
                    type: "structure",
                    required: [ "DatabaseEngineType", "ConnectionConfiguration", "ColumnConfiguration" ],
                    members: {
                        DatabaseEngineType: {},
                        ConnectionConfiguration: {
                            type: "structure",
                            required: [ "DatabaseHost", "DatabasePort", "DatabaseName", "TableName", "SecretArn" ],
                            members: {
                                DatabaseHost: {},
                                DatabasePort: {
                                    type: "integer"
                                },
                                DatabaseName: {},
                                TableName: {},
                                SecretArn: {}
                            }
                        },
                        VpcConfiguration: {
                            shape: "S1v"
                        },
                        ColumnConfiguration: {
                            type: "structure",
                            required: [ "DocumentIdColumnName", "DocumentDataColumnName", "ChangeDetectingColumns" ],
                            members: {
                                DocumentIdColumnName: {},
                                DocumentDataColumnName: {},
                                DocumentTitleColumnName: {},
                                FieldMappings: {
                                    shape: "S20"
                                },
                                ChangeDetectingColumns: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        AclConfiguration: {
                            type: "structure",
                            required: [ "AllowedGroupsColumnName" ],
                            members: {
                                AllowedGroupsColumnName: {}
                            }
                        },
                        SqlConfiguration: {
                            type: "structure",
                            members: {
                                QueryIdentifiersEnclosingOption: {}
                            }
                        }
                    }
                },
                SalesforceConfiguration: {
                    type: "structure",
                    required: [ "ServerUrl", "SecretArn" ],
                    members: {
                        ServerUrl: {},
                        SecretArn: {},
                        StandardObjectConfigurations: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Name", "DocumentDataFieldName" ],
                                members: {
                                    Name: {},
                                    DocumentDataFieldName: {},
                                    DocumentTitleFieldName: {},
                                    FieldMappings: {
                                        shape: "S20"
                                    }
                                }
                            }
                        },
                        KnowledgeArticleConfiguration: {
                            type: "structure",
                            required: [ "IncludedStates" ],
                            members: {
                                IncludedStates: {
                                    type: "list",
                                    member: {}
                                },
                                StandardKnowledgeArticleTypeConfiguration: {
                                    type: "structure",
                                    required: [ "DocumentDataFieldName" ],
                                    members: {
                                        DocumentDataFieldName: {},
                                        DocumentTitleFieldName: {},
                                        FieldMappings: {
                                            shape: "S20"
                                        }
                                    }
                                },
                                CustomKnowledgeArticleTypeConfigurations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Name", "DocumentDataFieldName" ],
                                        members: {
                                            Name: {},
                                            DocumentDataFieldName: {},
                                            DocumentTitleFieldName: {},
                                            FieldMappings: {
                                                shape: "S20"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        ChatterFeedConfiguration: {
                            type: "structure",
                            required: [ "DocumentDataFieldName" ],
                            members: {
                                DocumentDataFieldName: {},
                                DocumentTitleFieldName: {},
                                FieldMappings: {
                                    shape: "S20"
                                },
                                IncludeFilterTypes: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        CrawlAttachments: {
                            type: "boolean"
                        },
                        StandardObjectAttachmentConfiguration: {
                            type: "structure",
                            members: {
                                DocumentTitleFieldName: {},
                                FieldMappings: {
                                    shape: "S20"
                                }
                            }
                        },
                        IncludeAttachmentFilePatterns: {
                            shape: "S1l"
                        },
                        ExcludeAttachmentFilePatterns: {
                            shape: "S1l"
                        }
                    }
                },
                OneDriveConfiguration: {
                    type: "structure",
                    required: [ "TenantDomain", "SecretArn", "OneDriveUsers" ],
                    members: {
                        TenantDomain: {},
                        SecretArn: {},
                        OneDriveUsers: {
                            type: "structure",
                            members: {
                                OneDriveUserList: {
                                    type: "list",
                                    member: {}
                                },
                                OneDriveUserS3Path: {
                                    shape: "S11"
                                }
                            }
                        },
                        InclusionPatterns: {
                            shape: "S1l"
                        },
                        ExclusionPatterns: {
                            shape: "S1l"
                        },
                        FieldMappings: {
                            shape: "S20"
                        },
                        DisableLocalGroups: {
                            type: "boolean"
                        }
                    }
                },
                ServiceNowConfiguration: {
                    type: "structure",
                    required: [ "HostUrl", "SecretArn", "ServiceNowBuildVersion" ],
                    members: {
                        HostUrl: {},
                        SecretArn: {},
                        ServiceNowBuildVersion: {},
                        KnowledgeArticleConfiguration: {
                            type: "structure",
                            required: [ "DocumentDataFieldName" ],
                            members: {
                                CrawlAttachments: {
                                    type: "boolean"
                                },
                                IncludeAttachmentFilePatterns: {
                                    shape: "S1l"
                                },
                                ExcludeAttachmentFilePatterns: {
                                    shape: "S1l"
                                },
                                DocumentDataFieldName: {},
                                DocumentTitleFieldName: {},
                                FieldMappings: {
                                    shape: "S20"
                                },
                                FilterQuery: {}
                            }
                        },
                        ServiceCatalogConfiguration: {
                            type: "structure",
                            required: [ "DocumentDataFieldName" ],
                            members: {
                                CrawlAttachments: {
                                    type: "boolean"
                                },
                                IncludeAttachmentFilePatterns: {
                                    shape: "S1l"
                                },
                                ExcludeAttachmentFilePatterns: {
                                    shape: "S1l"
                                },
                                DocumentDataFieldName: {},
                                DocumentTitleFieldName: {},
                                FieldMappings: {
                                    shape: "S20"
                                }
                            }
                        },
                        AuthenticationType: {}
                    }
                },
                ConfluenceConfiguration: {
                    type: "structure",
                    required: [ "ServerUrl", "SecretArn", "Version" ],
                    members: {
                        ServerUrl: {},
                        SecretArn: {},
                        Version: {},
                        SpaceConfiguration: {
                            type: "structure",
                            members: {
                                CrawlPersonalSpaces: {
                                    type: "boolean"
                                },
                                CrawlArchivedSpaces: {
                                    type: "boolean"
                                },
                                IncludeSpaces: {
                                    shape: "S3c"
                                },
                                ExcludeSpaces: {
                                    shape: "S3c"
                                },
                                SpaceFieldMappings: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            DataSourceFieldName: {},
                                            DateFieldFormat: {},
                                            IndexFieldName: {}
                                        }
                                    }
                                }
                            }
                        },
                        PageConfiguration: {
                            type: "structure",
                            members: {
                                PageFieldMappings: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            DataSourceFieldName: {},
                                            DateFieldFormat: {},
                                            IndexFieldName: {}
                                        }
                                    }
                                }
                            }
                        },
                        BlogConfiguration: {
                            type: "structure",
                            members: {
                                BlogFieldMappings: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            DataSourceFieldName: {},
                                            DateFieldFormat: {},
                                            IndexFieldName: {}
                                        }
                                    }
                                }
                            }
                        },
                        AttachmentConfiguration: {
                            type: "structure",
                            members: {
                                CrawlAttachments: {
                                    type: "boolean"
                                },
                                AttachmentFieldMappings: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            DataSourceFieldName: {},
                                            DateFieldFormat: {},
                                            IndexFieldName: {}
                                        }
                                    }
                                }
                            }
                        },
                        VpcConfiguration: {
                            shape: "S1v"
                        },
                        InclusionPatterns: {
                            shape: "S1l"
                        },
                        ExclusionPatterns: {
                            shape: "S1l"
                        }
                    }
                },
                GoogleDriveConfiguration: {
                    type: "structure",
                    required: [ "SecretArn" ],
                    members: {
                        SecretArn: {},
                        InclusionPatterns: {
                            shape: "S1l"
                        },
                        ExclusionPatterns: {
                            shape: "S1l"
                        },
                        FieldMappings: {
                            shape: "S20"
                        },
                        ExcludeMimeTypes: {
                            type: "list",
                            member: {}
                        },
                        ExcludeUserAccounts: {
                            type: "list",
                            member: {}
                        },
                        ExcludeSharedDrives: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                WebCrawlerConfiguration: {
                    type: "structure",
                    required: [ "Urls" ],
                    members: {
                        Urls: {
                            type: "structure",
                            members: {
                                SeedUrlConfiguration: {
                                    type: "structure",
                                    required: [ "SeedUrls" ],
                                    members: {
                                        SeedUrls: {
                                            type: "list",
                                            member: {}
                                        },
                                        WebCrawlerMode: {}
                                    }
                                },
                                SiteMapsConfiguration: {
                                    type: "structure",
                                    required: [ "SiteMaps" ],
                                    members: {
                                        SiteMaps: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        },
                        CrawlDepth: {
                            type: "integer"
                        },
                        MaxLinksPerPage: {
                            type: "integer"
                        },
                        MaxContentSizePerPageInMegaBytes: {
                            type: "float"
                        },
                        MaxUrlsPerMinuteCrawlRate: {
                            type: "integer"
                        },
                        UrlInclusionPatterns: {
                            shape: "S1l"
                        },
                        UrlExclusionPatterns: {
                            shape: "S1l"
                        },
                        ProxyConfiguration: {
                            type: "structure",
                            required: [ "Host", "Port" ],
                            members: {
                                Host: {},
                                Port: {
                                    type: "integer"
                                },
                                Credentials: {}
                            }
                        },
                        AuthenticationConfiguration: {
                            type: "structure",
                            members: {
                                BasicAuthentication: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Host", "Port", "Credentials" ],
                                        members: {
                                            Host: {},
                                            Port: {
                                                type: "integer"
                                            },
                                            Credentials: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                WorkDocsConfiguration: {
                    type: "structure",
                    required: [ "OrganizationId" ],
                    members: {
                        OrganizationId: {},
                        CrawlComments: {
                            type: "boolean"
                        },
                        UseChangeLog: {
                            type: "boolean"
                        },
                        InclusionPatterns: {
                            shape: "S1l"
                        },
                        ExclusionPatterns: {
                            shape: "S1l"
                        },
                        FieldMappings: {
                            shape: "S20"
                        }
                    }
                }
            }
        },
        S1l: {
            type: "list",
            member: {}
        },
        S1v: {
            type: "structure",
            required: [ "SubnetIds", "SecurityGroupIds" ],
            members: {
                SubnetIds: {
                    type: "list",
                    member: {}
                },
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        S20: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DataSourceFieldName", "IndexFieldName" ],
                members: {
                    DataSourceFieldName: {},
                    DateFieldFormat: {},
                    IndexFieldName: {}
                }
            }
        },
        S3c: {
            type: "list",
            member: {}
        },
        S4n: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S51: {
            type: "structure",
            members: {
                KmsKeyId: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S53: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    JwtTokenTypeConfiguration: {
                        type: "structure",
                        required: [ "KeyLocation" ],
                        members: {
                            KeyLocation: {},
                            URL: {},
                            SecretManagerArn: {},
                            UserNameAttributeField: {},
                            GroupAttributeField: {},
                            Issuer: {},
                            ClaimRegex: {}
                        }
                    },
                    JsonTokenTypeConfiguration: {
                        type: "structure",
                        required: [ "UserNameAttributeField", "GroupAttributeField" ],
                        members: {
                            UserNameAttributeField: {},
                            GroupAttributeField: {}
                        }
                    }
                }
            }
        },
        S63: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Type" ],
                members: {
                    Name: {},
                    Type: {},
                    Relevance: {
                        shape: "S67"
                    },
                    Search: {
                        type: "structure",
                        members: {
                            Facetable: {
                                type: "boolean"
                            },
                            Searchable: {
                                type: "boolean"
                            },
                            Displayable: {
                                type: "boolean"
                            },
                            Sortable: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S67: {
            type: "structure",
            members: {
                Freshness: {
                    type: "boolean"
                },
                Importance: {
                    type: "integer"
                },
                Duration: {},
                RankOrder: {},
                ValueImportanceMap: {
                    type: "map",
                    key: {},
                    value: {
                        type: "integer"
                    }
                }
            }
        },
        S6l: {
            type: "structure",
            required: [ "StorageCapacityUnits", "QueryCapacityUnits" ],
            members: {
                StorageCapacityUnits: {
                    type: "integer"
                },
                QueryCapacityUnits: {
                    type: "integer"
                }
            }
        },
        S8z: {
            type: "structure",
            members: {
                AndAllFilters: {
                    shape: "S90"
                },
                OrAllFilters: {
                    shape: "S90"
                },
                NotFilter: {
                    shape: "S8z"
                },
                EqualsTo: {
                    shape: "Sh"
                },
                ContainsAll: {
                    shape: "Sh"
                },
                ContainsAny: {
                    shape: "Sh"
                },
                GreaterThan: {
                    shape: "Sh"
                },
                GreaterThanOrEquals: {
                    shape: "Sh"
                },
                LessThan: {
                    shape: "Sh"
                },
                LessThanOrEquals: {
                    shape: "Sh"
                }
            }
        },
        S90: {
            type: "list",
            member: {
                shape: "S8z"
            }
        },
        S9n: {
            type: "structure",
            members: {
                Text: {},
                Highlights: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "BeginOffset", "EndOffset" ],
                        members: {
                            BeginOffset: {
                                type: "integer"
                            },
                            EndOffset: {
                                type: "integer"
                            },
                            TopAnswer: {
                                type: "boolean"
                            },
                            Type: {}
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListDataSourceSyncJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDataSources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListIndices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["networkmanager"] = {};

AWS.NetworkManager = AWS.Service.defineService("networkmanager", [ "2019-07-05" ]);

AWS.apiLoader.services["networkmanager"]["2019-07-05"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-07-05",
        endpointPrefix: "networkmanager",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "NetworkManager",
        serviceFullName: "AWS Network Manager",
        serviceId: "NetworkManager",
        signatureVersion: "v4",
        signingName: "networkmanager",
        uid: "networkmanager-2019-07-05"
    },
    operations: {
        AssociateCustomerGateway: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/customer-gateway-associations"
            },
            input: {
                type: "structure",
                required: [ "CustomerGatewayArn", "GlobalNetworkId", "DeviceId" ],
                members: {
                    CustomerGatewayArn: {},
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {},
                    LinkId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomerGatewayAssociation: {
                        shape: "S4"
                    }
                }
            }
        },
        AssociateLink: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/link-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "DeviceId", "LinkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {},
                    LinkId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LinkAssociation: {
                        shape: "S8"
                    }
                }
            }
        },
        AssociateTransitGatewayConnectPeer: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/transit-gateway-connect-peer-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "TransitGatewayConnectPeerArn", "DeviceId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    TransitGatewayConnectPeerArn: {},
                    DeviceId: {},
                    LinkId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayConnectPeerAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        CreateConnection: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/connections"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "DeviceId", "ConnectedDeviceId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {},
                    ConnectedDeviceId: {},
                    LinkId: {},
                    ConnectedLinkId: {},
                    Description: {},
                    Tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "Sk"
                    }
                }
            }
        },
        CreateDevice: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/devices"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    AWSLocation: {
                        shape: "So"
                    },
                    Description: {},
                    Type: {},
                    Vendor: {},
                    Model: {},
                    SerialNumber: {},
                    Location: {
                        shape: "Sp"
                    },
                    SiteId: {},
                    Tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Device: {
                        shape: "Sr"
                    }
                }
            }
        },
        CreateGlobalNetwork: {
            http: {
                requestUri: "/global-networks"
            },
            input: {
                type: "structure",
                members: {
                    Description: {},
                    Tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalNetwork: {
                        shape: "Sv"
                    }
                }
            }
        },
        CreateLink: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/links"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "Bandwidth", "SiteId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    Description: {},
                    Type: {},
                    Bandwidth: {
                        shape: "Sy"
                    },
                    Provider: {},
                    SiteId: {},
                    Tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Link: {
                        shape: "S11"
                    }
                }
            }
        },
        CreateSite: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/sites"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    Description: {},
                    Location: {
                        shape: "Sp"
                    },
                    Tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Site: {
                        shape: "S15"
                    }
                }
            }
        },
        DeleteConnection: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/connections/{connectionId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "ConnectionId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    ConnectionId: {
                        location: "uri",
                        locationName: "connectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "Sk"
                    }
                }
            }
        },
        DeleteDevice: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/devices/{deviceId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "DeviceId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Device: {
                        shape: "Sr"
                    }
                }
            }
        },
        DeleteGlobalNetwork: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalNetwork: {
                        shape: "Sv"
                    }
                }
            }
        },
        DeleteLink: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/links/{linkId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "LinkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    LinkId: {
                        location: "uri",
                        locationName: "linkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Link: {
                        shape: "S11"
                    }
                }
            }
        },
        DeleteSite: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/sites/{siteId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "SiteId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    SiteId: {
                        location: "uri",
                        locationName: "siteId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Site: {
                        shape: "S15"
                    }
                }
            }
        },
        DeregisterTransitGateway: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/transit-gateway-registrations/{transitGatewayArn}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "TransitGatewayArn" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    TransitGatewayArn: {
                        location: "uri",
                        locationName: "transitGatewayArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRegistration: {
                        shape: "S1j"
                    }
                }
            }
        },
        DescribeGlobalNetworks: {
            http: {
                method: "GET",
                requestUri: "/global-networks"
            },
            input: {
                type: "structure",
                members: {
                    GlobalNetworkIds: {
                        shape: "S1n",
                        location: "querystring",
                        locationName: "globalNetworkIds"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalNetworks: {
                        type: "list",
                        member: {
                            shape: "Sv"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisassociateCustomerGateway: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/customer-gateway-associations/{customerGatewayArn}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "CustomerGatewayArn" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    CustomerGatewayArn: {
                        location: "uri",
                        locationName: "customerGatewayArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomerGatewayAssociation: {
                        shape: "S4"
                    }
                }
            }
        },
        DisassociateLink: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/link-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "DeviceId", "LinkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {
                        location: "querystring",
                        locationName: "deviceId"
                    },
                    LinkId: {
                        location: "querystring",
                        locationName: "linkId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LinkAssociation: {
                        shape: "S8"
                    }
                }
            }
        },
        DisassociateTransitGatewayConnectPeer: {
            http: {
                method: "DELETE",
                requestUri: "/global-networks/{globalNetworkId}/transit-gateway-connect-peer-associations/{transitGatewayConnectPeerArn}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "TransitGatewayConnectPeerArn" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    TransitGatewayConnectPeerArn: {
                        location: "uri",
                        locationName: "transitGatewayConnectPeerArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayConnectPeerAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetConnections: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/connections"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    ConnectionIds: {
                        shape: "S1n",
                        location: "querystring",
                        locationName: "connectionIds"
                    },
                    DeviceId: {
                        location: "querystring",
                        locationName: "deviceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connections: {
                        type: "list",
                        member: {
                            shape: "Sk"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetCustomerGatewayAssociations: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/customer-gateway-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    CustomerGatewayArns: {
                        shape: "S1n",
                        location: "querystring",
                        locationName: "customerGatewayArns"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomerGatewayAssociations: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetDevices: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/devices"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceIds: {
                        shape: "S1n",
                        location: "querystring",
                        locationName: "deviceIds"
                    },
                    SiteId: {
                        location: "querystring",
                        locationName: "siteId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Devices: {
                        type: "list",
                        member: {
                            shape: "Sr"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetLinkAssociations: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/link-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {
                        location: "querystring",
                        locationName: "deviceId"
                    },
                    LinkId: {
                        location: "querystring",
                        locationName: "linkId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LinkAssociations: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetLinks: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/links"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    LinkIds: {
                        shape: "S1n",
                        location: "querystring",
                        locationName: "linkIds"
                    },
                    SiteId: {
                        location: "querystring",
                        locationName: "siteId"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    Provider: {
                        location: "querystring",
                        locationName: "provider"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Links: {
                        type: "list",
                        member: {
                            shape: "S11"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetSites: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/sites"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    SiteIds: {
                        shape: "S1n",
                        location: "querystring",
                        locationName: "siteIds"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Sites: {
                        type: "list",
                        member: {
                            shape: "S15"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetTransitGatewayConnectPeerAssociations: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/transit-gateway-connect-peer-associations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    TransitGatewayConnectPeerArns: {
                        shape: "S1n",
                        location: "querystring",
                        locationName: "transitGatewayConnectPeerArns"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayConnectPeerAssociations: {
                        type: "list",
                        member: {
                            shape: "Sc"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetTransitGatewayRegistrations: {
            http: {
                method: "GET",
                requestUri: "/global-networks/{globalNetworkId}/transit-gateway-registrations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    TransitGatewayArns: {
                        shape: "S1n",
                        location: "querystring",
                        locationName: "transitGatewayArns"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRegistrations: {
                        type: "list",
                        member: {
                            shape: "S1j"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "Sf"
                    }
                }
            }
        },
        RegisterTransitGateway: {
            http: {
                requestUri: "/global-networks/{globalNetworkId}/transit-gateway-registrations"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "TransitGatewayArn" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    TransitGatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRegistration: {
                        shape: "S1j"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConnection: {
            http: {
                method: "PATCH",
                requestUri: "/global-networks/{globalNetworkId}/connections/{connectionId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "ConnectionId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    ConnectionId: {
                        location: "uri",
                        locationName: "connectionId"
                    },
                    LinkId: {},
                    ConnectedLinkId: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "Sk"
                    }
                }
            }
        },
        UpdateDevice: {
            http: {
                method: "PATCH",
                requestUri: "/global-networks/{globalNetworkId}/devices/{deviceId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "DeviceId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    },
                    AWSLocation: {
                        shape: "So"
                    },
                    Description: {},
                    Type: {},
                    Vendor: {},
                    Model: {},
                    SerialNumber: {},
                    Location: {
                        shape: "Sp"
                    },
                    SiteId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Device: {
                        shape: "Sr"
                    }
                }
            }
        },
        UpdateGlobalNetwork: {
            http: {
                method: "PATCH",
                requestUri: "/global-networks/{globalNetworkId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalNetwork: {
                        shape: "Sv"
                    }
                }
            }
        },
        UpdateLink: {
            http: {
                method: "PATCH",
                requestUri: "/global-networks/{globalNetworkId}/links/{linkId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "LinkId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    LinkId: {
                        location: "uri",
                        locationName: "linkId"
                    },
                    Description: {},
                    Type: {},
                    Bandwidth: {
                        shape: "Sy"
                    },
                    Provider: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Link: {
                        shape: "S11"
                    }
                }
            }
        },
        UpdateSite: {
            http: {
                method: "PATCH",
                requestUri: "/global-networks/{globalNetworkId}/sites/{siteId}"
            },
            input: {
                type: "structure",
                required: [ "GlobalNetworkId", "SiteId" ],
                members: {
                    GlobalNetworkId: {
                        location: "uri",
                        locationName: "globalNetworkId"
                    },
                    SiteId: {
                        location: "uri",
                        locationName: "siteId"
                    },
                    Description: {},
                    Location: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Site: {
                        shape: "S15"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                CustomerGatewayArn: {},
                GlobalNetworkId: {},
                DeviceId: {},
                LinkId: {},
                State: {}
            }
        },
        S8: {
            type: "structure",
            members: {
                GlobalNetworkId: {},
                DeviceId: {},
                LinkId: {},
                LinkAssociationState: {}
            }
        },
        Sc: {
            type: "structure",
            members: {
                TransitGatewayConnectPeerArn: {},
                GlobalNetworkId: {},
                DeviceId: {},
                LinkId: {},
                State: {}
            }
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sk: {
            type: "structure",
            members: {
                ConnectionId: {},
                ConnectionArn: {},
                GlobalNetworkId: {},
                DeviceId: {},
                ConnectedDeviceId: {},
                LinkId: {},
                ConnectedLinkId: {},
                Description: {},
                CreatedAt: {
                    type: "timestamp"
                },
                State: {},
                Tags: {
                    shape: "Sf"
                }
            }
        },
        So: {
            type: "structure",
            members: {
                Zone: {},
                SubnetArn: {}
            }
        },
        Sp: {
            type: "structure",
            members: {
                Address: {},
                Latitude: {},
                Longitude: {}
            },
            sensitive: true
        },
        Sr: {
            type: "structure",
            members: {
                DeviceId: {},
                DeviceArn: {},
                GlobalNetworkId: {},
                AWSLocation: {
                    shape: "So"
                },
                Description: {},
                Type: {},
                Vendor: {},
                Model: {},
                SerialNumber: {},
                Location: {
                    shape: "Sp"
                },
                SiteId: {},
                CreatedAt: {
                    type: "timestamp"
                },
                State: {},
                Tags: {
                    shape: "Sf"
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                GlobalNetworkId: {},
                GlobalNetworkArn: {},
                Description: {},
                CreatedAt: {
                    type: "timestamp"
                },
                State: {},
                Tags: {
                    shape: "Sf"
                }
            }
        },
        Sy: {
            type: "structure",
            members: {
                UploadSpeed: {
                    type: "integer"
                },
                DownloadSpeed: {
                    type: "integer"
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                LinkId: {},
                LinkArn: {},
                GlobalNetworkId: {},
                SiteId: {},
                Description: {},
                Type: {},
                Bandwidth: {
                    shape: "Sy"
                },
                Provider: {},
                CreatedAt: {
                    type: "timestamp"
                },
                State: {},
                Tags: {
                    shape: "Sf"
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                SiteId: {},
                SiteArn: {},
                GlobalNetworkId: {},
                Description: {},
                Location: {
                    shape: "Sp"
                },
                CreatedAt: {
                    type: "timestamp"
                },
                State: {},
                Tags: {
                    shape: "Sf"
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                GlobalNetworkId: {},
                TransitGatewayArn: {},
                State: {
                    type: "structure",
                    members: {
                        Code: {},
                        Message: {}
                    }
                }
            }
        },
        S1n: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        DescribeGlobalNetworks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "GlobalNetworks"
        },
        GetConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Connections"
        },
        GetCustomerGatewayAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CustomerGatewayAssociations"
        },
        GetDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Devices"
        },
        GetLinkAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "LinkAssociations"
        },
        GetLinks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Links"
        },
        GetSites: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Sites"
        },
        GetTransitGatewayConnectPeerAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TransitGatewayConnectPeerAssociations"
        },
        GetTransitGatewayRegistrations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TransitGatewayRegistrations"
        }
    }
};

AWS.apiLoader.services["outposts"] = {};

AWS.Outposts = AWS.Service.defineService("outposts", [ "2019-12-03" ]);

AWS.apiLoader.services["outposts"]["2019-12-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-03",
        endpointPrefix: "outposts",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Outposts",
        serviceFullName: "AWS Outposts",
        serviceId: "Outposts",
        signatureVersion: "v4",
        signingName: "outposts",
        uid: "outposts-2019-12-03"
    },
    operations: {
        CreateOrder: {
            http: {
                requestUri: "/orders"
            },
            input: {
                type: "structure",
                required: [ "OutpostIdentifier", "LineItems", "PaymentOption" ],
                members: {
                    OutpostIdentifier: {},
                    LineItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CatalogItemId: {},
                                Quantity: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    PaymentOption: {},
                    PaymentTerm: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Order: {
                        type: "structure",
                        members: {
                            OutpostId: {},
                            OrderId: {},
                            Status: {},
                            LineItems: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        CatalogItemId: {},
                                        LineItemId: {},
                                        Quantity: {
                                            type: "integer"
                                        },
                                        Status: {}
                                    }
                                }
                            },
                            PaymentOption: {},
                            OrderSubmissionDate: {
                                type: "timestamp"
                            },
                            OrderFulfilledDate: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        CreateOutpost: {
            http: {
                requestUri: "/outposts"
            },
            input: {
                type: "structure",
                required: [ "Name", "SiteId" ],
                members: {
                    Name: {},
                    Description: {},
                    SiteId: {},
                    AvailabilityZone: {},
                    AvailabilityZoneId: {},
                    Tags: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Outpost: {
                        shape: "St"
                    }
                }
            }
        },
        DeleteOutpost: {
            http: {
                method: "DELETE",
                requestUri: "/outposts/{OutpostId}"
            },
            input: {
                type: "structure",
                required: [ "OutpostId" ],
                members: {
                    OutpostId: {
                        location: "uri",
                        locationName: "OutpostId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSite: {
            http: {
                method: "DELETE",
                requestUri: "/sites/{SiteId}"
            },
            input: {
                type: "structure",
                required: [ "SiteId" ],
                members: {
                    SiteId: {
                        location: "uri",
                        locationName: "SiteId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetOutpost: {
            http: {
                method: "GET",
                requestUri: "/outposts/{OutpostId}"
            },
            input: {
                type: "structure",
                required: [ "OutpostId" ],
                members: {
                    OutpostId: {
                        location: "uri",
                        locationName: "OutpostId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Outpost: {
                        shape: "St"
                    }
                }
            }
        },
        GetOutpostInstanceTypes: {
            http: {
                method: "GET",
                requestUri: "/outposts/{OutpostId}/instanceTypes"
            },
            input: {
                type: "structure",
                required: [ "OutpostId" ],
                members: {
                    OutpostId: {
                        location: "uri",
                        locationName: "OutpostId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceType: {}
                            }
                        }
                    },
                    NextToken: {},
                    OutpostId: {},
                    OutpostArn: {}
                }
            }
        },
        ListOutposts: {
            http: {
                method: "GET",
                requestUri: "/outposts"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    LifeCycleStatusFilter: {
                        location: "querystring",
                        locationName: "LifeCycleStatusFilter",
                        type: "list",
                        member: {}
                    },
                    AvailabilityZoneFilter: {
                        location: "querystring",
                        locationName: "AvailabilityZoneFilter",
                        type: "list",
                        member: {}
                    },
                    AvailabilityZoneIdFilter: {
                        location: "querystring",
                        locationName: "AvailabilityZoneIdFilter",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Outposts: {
                        type: "list",
                        member: {
                            shape: "St"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSites: {
            http: {
                method: "GET",
                requestUri: "/sites"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Sites: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SiteId: {},
                                AccountId: {},
                                Name: {},
                                Description: {},
                                Tags: {
                                    shape: "Sp"
                                },
                                SiteArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sp"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sp: {
            type: "map",
            key: {},
            value: {}
        },
        St: {
            type: "structure",
            members: {
                OutpostId: {},
                OwnerId: {},
                OutpostArn: {},
                SiteId: {},
                Name: {},
                Description: {},
                LifeCycleStatus: {},
                AvailabilityZone: {},
                AvailabilityZoneId: {},
                Tags: {
                    shape: "Sp"
                },
                SiteArn: {}
            }
        }
    },
    paginators: {
        ListOutposts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSites: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["augmentedairuntime"] = {};

AWS.AugmentedAIRuntime = AWS.Service.defineService("augmentedairuntime", [ "2019-11-07" ]);

AWS.apiLoader.services["augmentedairuntime"]["2019-11-07"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-11-07",
        endpointPrefix: "a2i-runtime.sagemaker",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Augmented AI Runtime",
        serviceId: "SageMaker A2I Runtime",
        signatureVersion: "v4",
        signingName: "sagemaker",
        uid: "sagemaker-a2i-runtime-2019-11-07"
    },
    operations: {
        DeleteHumanLoop: {
            http: {
                method: "DELETE",
                requestUri: "/human-loops/{HumanLoopName}"
            },
            input: {
                type: "structure",
                required: [ "HumanLoopName" ],
                members: {
                    HumanLoopName: {
                        location: "uri",
                        locationName: "HumanLoopName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeHumanLoop: {
            http: {
                method: "GET",
                requestUri: "/human-loops/{HumanLoopName}"
            },
            input: {
                type: "structure",
                required: [ "HumanLoopName" ],
                members: {
                    HumanLoopName: {
                        location: "uri",
                        locationName: "HumanLoopName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreationTime", "HumanLoopStatus", "HumanLoopName", "HumanLoopArn", "FlowDefinitionArn" ],
                members: {
                    CreationTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    FailureCode: {},
                    HumanLoopStatus: {},
                    HumanLoopName: {},
                    HumanLoopArn: {},
                    FlowDefinitionArn: {},
                    HumanLoopOutput: {
                        type: "structure",
                        required: [ "OutputS3Uri" ],
                        members: {
                            OutputS3Uri: {}
                        }
                    }
                }
            }
        },
        ListHumanLoops: {
            http: {
                method: "GET",
                requestUri: "/human-loops"
            },
            input: {
                type: "structure",
                required: [ "FlowDefinitionArn" ],
                members: {
                    CreationTimeAfter: {
                        location: "querystring",
                        locationName: "CreationTimeAfter",
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        location: "querystring",
                        locationName: "CreationTimeBefore",
                        type: "timestamp"
                    },
                    FlowDefinitionArn: {
                        location: "querystring",
                        locationName: "FlowDefinitionArn"
                    },
                    SortOrder: {
                        location: "querystring",
                        locationName: "SortOrder"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HumanLoopSummaries" ],
                members: {
                    HumanLoopSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                HumanLoopName: {},
                                HumanLoopStatus: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                FailureReason: {},
                                FlowDefinitionArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        StartHumanLoop: {
            http: {
                requestUri: "/human-loops"
            },
            input: {
                type: "structure",
                required: [ "HumanLoopName", "FlowDefinitionArn", "HumanLoopInput" ],
                members: {
                    HumanLoopName: {},
                    FlowDefinitionArn: {},
                    HumanLoopInput: {
                        type: "structure",
                        required: [ "InputContent" ],
                        members: {
                            InputContent: {}
                        }
                    },
                    DataAttributes: {
                        type: "structure",
                        required: [ "ContentClassifiers" ],
                        members: {
                            ContentClassifiers: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HumanLoopArn: {}
                }
            }
        },
        StopHumanLoop: {
            http: {
                requestUri: "/human-loops/stop"
            },
            input: {
                type: "structure",
                required: [ "HumanLoopName" ],
                members: {
                    HumanLoopName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {},
    paginators: {
        ListHumanLoops: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "HumanLoopSummaries"
        }
    }
};

AWS.apiLoader.services["ebs"] = {};

AWS.EBS = AWS.Service.defineService("ebs", [ "2019-11-02" ]);

AWS.apiLoader.services["ebs"]["2019-11-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-11-02",
        endpointPrefix: "ebs",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon EBS",
        serviceFullName: "Amazon Elastic Block Store",
        serviceId: "EBS",
        signatureVersion: "v4",
        uid: "ebs-2019-11-02"
    },
    operations: {
        CompleteSnapshot: {
            http: {
                requestUri: "/snapshots/completion/{snapshotId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "SnapshotId", "ChangedBlocksCount" ],
                members: {
                    SnapshotId: {
                        location: "uri",
                        locationName: "snapshotId"
                    },
                    ChangedBlocksCount: {
                        location: "header",
                        locationName: "x-amz-ChangedBlocksCount",
                        type: "integer"
                    },
                    Checksum: {
                        location: "header",
                        locationName: "x-amz-Checksum"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-Checksum-Algorithm"
                    },
                    ChecksumAggregationMethod: {
                        location: "header",
                        locationName: "x-amz-Checksum-Aggregation-Method"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        GetSnapshotBlock: {
            http: {
                method: "GET",
                requestUri: "/snapshots/{snapshotId}/blocks/{blockIndex}"
            },
            input: {
                type: "structure",
                required: [ "SnapshotId", "BlockIndex", "BlockToken" ],
                members: {
                    SnapshotId: {
                        location: "uri",
                        locationName: "snapshotId"
                    },
                    BlockIndex: {
                        location: "uri",
                        locationName: "blockIndex",
                        type: "integer"
                    },
                    BlockToken: {
                        location: "querystring",
                        locationName: "blockToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataLength: {
                        location: "header",
                        locationName: "x-amz-Data-Length",
                        type: "integer"
                    },
                    BlockData: {
                        shape: "Se"
                    },
                    Checksum: {
                        location: "header",
                        locationName: "x-amz-Checksum"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-Checksum-Algorithm"
                    }
                },
                payload: "BlockData"
            }
        },
        ListChangedBlocks: {
            http: {
                method: "GET",
                requestUri: "/snapshots/{secondSnapshotId}/changedblocks"
            },
            input: {
                type: "structure",
                required: [ "SecondSnapshotId" ],
                members: {
                    FirstSnapshotId: {
                        location: "querystring",
                        locationName: "firstSnapshotId"
                    },
                    SecondSnapshotId: {
                        location: "uri",
                        locationName: "secondSnapshotId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "pageToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    StartingBlockIndex: {
                        location: "querystring",
                        locationName: "startingBlockIndex",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangedBlocks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BlockIndex: {
                                    type: "integer"
                                },
                                FirstBlockToken: {},
                                SecondBlockToken: {}
                            },
                            sensitive: true
                        }
                    },
                    ExpiryTime: {
                        type: "timestamp"
                    },
                    VolumeSize: {
                        type: "long"
                    },
                    BlockSize: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            }
        },
        ListSnapshotBlocks: {
            http: {
                method: "GET",
                requestUri: "/snapshots/{snapshotId}/blocks"
            },
            input: {
                type: "structure",
                required: [ "SnapshotId" ],
                members: {
                    SnapshotId: {
                        location: "uri",
                        locationName: "snapshotId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "pageToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    StartingBlockIndex: {
                        location: "querystring",
                        locationName: "startingBlockIndex",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blocks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BlockIndex: {
                                    type: "integer"
                                },
                                BlockToken: {}
                            }
                        },
                        sensitive: true
                    },
                    ExpiryTime: {
                        type: "timestamp"
                    },
                    VolumeSize: {
                        type: "long"
                    },
                    BlockSize: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            }
        },
        PutSnapshotBlock: {
            http: {
                method: "PUT",
                requestUri: "/snapshots/{snapshotId}/blocks/{blockIndex}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "SnapshotId", "BlockIndex", "BlockData", "DataLength", "Checksum", "ChecksumAlgorithm" ],
                members: {
                    SnapshotId: {
                        location: "uri",
                        locationName: "snapshotId"
                    },
                    BlockIndex: {
                        location: "uri",
                        locationName: "blockIndex",
                        type: "integer"
                    },
                    BlockData: {
                        shape: "Se"
                    },
                    DataLength: {
                        location: "header",
                        locationName: "x-amz-Data-Length",
                        type: "integer"
                    },
                    Progress: {
                        location: "header",
                        locationName: "x-amz-Progress",
                        type: "integer"
                    },
                    Checksum: {
                        location: "header",
                        locationName: "x-amz-Checksum"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-Checksum-Algorithm"
                    }
                },
                payload: "BlockData"
            },
            output: {
                type: "structure",
                members: {
                    Checksum: {
                        location: "header",
                        locationName: "x-amz-Checksum"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-Checksum-Algorithm"
                    }
                }
            },
            authtype: "v4-unsigned-body"
        },
        StartSnapshot: {
            http: {
                requestUri: "/snapshots",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "VolumeSize" ],
                members: {
                    VolumeSize: {
                        type: "long"
                    },
                    ParentSnapshotId: {},
                    Tags: {
                        shape: "Sw"
                    },
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Encrypted: {
                        type: "boolean"
                    },
                    KmsKeyArn: {
                        shape: "S13"
                    },
                    Timeout: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Description: {},
                    SnapshotId: {},
                    OwnerId: {},
                    Status: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    VolumeSize: {
                        type: "long"
                    },
                    BlockSize: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sw"
                    },
                    ParentSnapshotId: {},
                    KmsKeyArn: {
                        shape: "S13"
                    }
                }
            }
        }
    },
    shapes: {
        Se: {
            type: "blob",
            sensitive: true,
            streaming: true
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S13: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListChangedBlocks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSnapshotBlocks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["kinesisvideosignalingchannels"] = {};

AWS.KinesisVideoSignalingChannels = AWS.Service.defineService("kinesisvideosignalingchannels", [ "2019-12-04" ]);

AWS.apiLoader.services["kinesisvideosignalingchannels"]["2019-12-04"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-04",
        endpointPrefix: "kinesisvideo",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon Kinesis Video Signaling Channels",
        serviceFullName: "Amazon Kinesis Video Signaling Channels",
        serviceId: "Kinesis Video Signaling",
        signatureVersion: "v4",
        uid: "kinesis-video-signaling-2019-12-04"
    },
    operations: {
        GetIceServerConfig: {
            http: {
                requestUri: "/v1/get-ice-server-config"
            },
            input: {
                type: "structure",
                required: [ "ChannelARN" ],
                members: {
                    ChannelARN: {},
                    ClientId: {},
                    Service: {},
                    Username: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IceServerList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Uris: {
                                    type: "list",
                                    member: {}
                                },
                                Username: {},
                                Password: {},
                                Ttl: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        SendAlexaOfferToMaster: {
            http: {
                requestUri: "/v1/send-alexa-offer-to-master"
            },
            input: {
                type: "structure",
                required: [ "ChannelARN", "SenderClientId", "MessagePayload" ],
                members: {
                    ChannelARN: {},
                    SenderClientId: {},
                    MessagePayload: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Answer: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["detective"] = {};

AWS.Detective = AWS.Service.defineService("detective", [ "2018-10-26" ]);

AWS.apiLoader.services["detective"]["2018-10-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-10-26",
        endpointPrefix: "api.detective",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Detective",
        serviceId: "Detective",
        signatureVersion: "v4",
        signingName: "detective",
        uid: "detective-2018-10-26"
    },
    operations: {
        AcceptInvitation: {
            http: {
                method: "PUT",
                requestUri: "/invitation"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {}
                }
            }
        },
        CreateGraph: {
            http: {
                requestUri: "/graph"
            },
            input: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GraphArn: {}
                }
            }
        },
        CreateMembers: {
            http: {
                requestUri: "/graph/members"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "Accounts" ],
                members: {
                    GraphArn: {},
                    Message: {},
                    DisableEmailNotification: {
                        type: "boolean"
                    },
                    Accounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AccountId", "EmailAddress" ],
                            members: {
                                AccountId: {},
                                EmailAddress: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Members: {
                        shape: "Sg"
                    },
                    UnprocessedAccounts: {
                        shape: "Sn"
                    }
                }
            }
        },
        DeleteGraph: {
            http: {
                requestUri: "/graph/removal"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {}
                }
            }
        },
        DeleteMembers: {
            http: {
                requestUri: "/graph/members/removal"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "AccountIds" ],
                members: {
                    GraphArn: {},
                    AccountIds: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountIds: {
                        shape: "Ss"
                    },
                    UnprocessedAccounts: {
                        shape: "Sn"
                    }
                }
            }
        },
        DisassociateMembership: {
            http: {
                requestUri: "/membership/removal"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {}
                }
            }
        },
        GetMembers: {
            http: {
                requestUri: "/graph/members/get"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "AccountIds" ],
                members: {
                    GraphArn: {},
                    AccountIds: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MemberDetails: {
                        shape: "Sg"
                    },
                    UnprocessedAccounts: {
                        shape: "Sn"
                    }
                }
            }
        },
        ListGraphs: {
            http: {
                requestUri: "/graphs/list"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GraphList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedTime: {
                                    shape: "Sk"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInvitations: {
            http: {
                requestUri: "/invitations/list"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Invitations: {
                        shape: "Sg"
                    },
                    NextToken: {}
                }
            }
        },
        ListMembers: {
            http: {
                requestUri: "/graph/members/list"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MemberDetails: {
                        shape: "Sg"
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S4"
                    }
                }
            }
        },
        RejectInvitation: {
            http: {
                requestUri: "/invitation/removal"
            },
            input: {
                type: "structure",
                required: [ "GraphArn" ],
                members: {
                    GraphArn: {}
                }
            }
        },
        StartMonitoringMember: {
            http: {
                requestUri: "/graph/member/monitoringstate"
            },
            input: {
                type: "structure",
                required: [ "GraphArn", "AccountId" ],
                members: {
                    GraphArn: {},
                    AccountId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "map",
            key: {},
            value: {}
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AccountId: {},
                    EmailAddress: {},
                    GraphArn: {},
                    MasterId: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated. Use AdministratorId instead."
                    },
                    AdministratorId: {},
                    Status: {},
                    DisabledReason: {},
                    InvitedTime: {
                        shape: "Sk"
                    },
                    UpdatedTime: {
                        shape: "Sk"
                    },
                    VolumeUsageInBytes: {
                        type: "long"
                    },
                    VolumeUsageUpdatedTime: {
                        shape: "Sk"
                    },
                    PercentOfGraphUtilization: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated. Use VolumeUsageInBytes instead.",
                        type: "double"
                    },
                    PercentOfGraphUtilizationUpdatedTime: {
                        shape: "Sk",
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated. Use VolumeUsageUpdatedTime instead."
                    }
                }
            }
        },
        Sk: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sn: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AccountId: {},
                    Reason: {}
                }
            }
        },
        Ss: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListGraphs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListInvitations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMembers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["codestarconnections"] = {};

AWS.CodeStarconnections = AWS.Service.defineService("codestarconnections", [ "2019-12-01" ]);

AWS.apiLoader.services["codestarconnections"]["2019-12-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-01",
        endpointPrefix: "codestar-connections",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "AWS CodeStar connections",
        serviceId: "CodeStar connections",
        signatureVersion: "v4",
        signingName: "codestar-connections",
        targetPrefix: "com.amazonaws.codestar.connections.CodeStar_connections_20191201",
        uid: "codestar-connections-2019-12-01"
    },
    operations: {
        CreateConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionName" ],
                members: {
                    ProviderType: {},
                    ConnectionName: {},
                    Tags: {
                        shape: "S4"
                    },
                    HostArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ConnectionArn" ],
                members: {
                    ConnectionArn: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateHost: {
            input: {
                type: "structure",
                required: [ "Name", "ProviderType", "ProviderEndpoint" ],
                members: {
                    Name: {},
                    ProviderType: {},
                    ProviderEndpoint: {},
                    VpcConfiguration: {
                        shape: "Se"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HostArn: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionArn" ],
                members: {
                    ConnectionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteHost: {
            input: {
                type: "structure",
                required: [ "HostArn" ],
                members: {
                    HostArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionArn" ],
                members: {
                    ConnectionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "Ss"
                    }
                }
            }
        },
        GetHost: {
            input: {
                type: "structure",
                required: [ "HostArn" ],
                members: {
                    HostArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Status: {},
                    ProviderType: {},
                    ProviderEndpoint: {},
                    VpcConfiguration: {
                        shape: "Se"
                    }
                }
            }
        },
        ListConnections: {
            input: {
                type: "structure",
                members: {
                    ProviderTypeFilter: {},
                    HostArnFilter: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connections: {
                        type: "list",
                        member: {
                            shape: "Ss"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListHosts: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Hosts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                HostArn: {},
                                ProviderType: {},
                                ProviderEndpoint: {},
                                VpcConfiguration: {
                                    shape: "Se"
                                },
                                Status: {},
                                StatusMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S4"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateHost: {
            input: {
                type: "structure",
                required: [ "HostArn" ],
                members: {
                    HostArn: {},
                    ProviderEndpoint: {},
                    VpcConfiguration: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Se: {
            type: "structure",
            required: [ "VpcId", "SubnetIds", "SecurityGroupIds" ],
            members: {
                VpcId: {},
                SubnetIds: {
                    type: "list",
                    member: {}
                },
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                },
                TlsCertificate: {}
            }
        },
        Ss: {
            type: "structure",
            members: {
                ConnectionName: {},
                ConnectionArn: {},
                ProviderType: {},
                OwnerAccountId: {},
                ConnectionStatus: {},
                HostArn: {}
            }
        }
    },
    paginators: {
        ListConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListHosts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["synthetics"] = {};

AWS.Synthetics = AWS.Service.defineService("synthetics", [ "2017-10-11" ]);

AWS.apiLoader.services["synthetics"]["2017-10-11"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-10-11",
        endpointPrefix: "synthetics",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Synthetics",
        serviceFullName: "Synthetics",
        serviceId: "synthetics",
        signatureVersion: "v4",
        signingName: "synthetics",
        uid: "synthetics-2017-10-11"
    },
    operations: {
        CreateCanary: {
            http: {
                requestUri: "/canary"
            },
            input: {
                type: "structure",
                required: [ "Name", "Code", "ArtifactS3Location", "ExecutionRoleArn", "Schedule", "RuntimeVersion" ],
                members: {
                    Name: {},
                    Code: {
                        shape: "S3"
                    },
                    ArtifactS3Location: {},
                    ExecutionRoleArn: {},
                    Schedule: {
                        shape: "S7"
                    },
                    RunConfig: {
                        shape: "S9"
                    },
                    SuccessRetentionPeriodInDays: {
                        type: "integer"
                    },
                    FailureRetentionPeriodInDays: {
                        type: "integer"
                    },
                    RuntimeVersion: {},
                    VpcConfig: {
                        shape: "Sh"
                    },
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Canary: {
                        shape: "Sq"
                    }
                }
            }
        },
        DeleteCanary: {
            http: {
                method: "DELETE",
                requestUri: "/canary/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeCanaries: {
            http: {
                requestUri: "/canaries"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Canaries: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeCanariesLastRun: {
            http: {
                requestUri: "/canaries/last-run"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CanariesLastRun: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CanaryName: {},
                                LastRun: {
                                    shape: "S1k"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRuntimeVersions: {
            http: {
                requestUri: "/runtime-versions"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RuntimeVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VersionName: {},
                                Description: {},
                                ReleaseDate: {
                                    type: "timestamp"
                                },
                                DeprecationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetCanary: {
            http: {
                method: "GET",
                requestUri: "/canary/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Canary: {
                        shape: "Sq"
                    }
                }
            }
        },
        GetCanaryRuns: {
            http: {
                requestUri: "/canary/{name}/runs"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CanaryRuns: {
                        type: "list",
                        member: {
                            shape: "S1k"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sm"
                    }
                }
            }
        },
        StartCanary: {
            http: {
                requestUri: "/canary/{name}/start"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopCanary: {
            http: {
                requestUri: "/canary/{name}/stop"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCanary: {
            http: {
                method: "PATCH",
                requestUri: "/canary/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    Code: {
                        shape: "S3"
                    },
                    ExecutionRoleArn: {},
                    RuntimeVersion: {},
                    Schedule: {
                        shape: "S7"
                    },
                    RunConfig: {
                        shape: "S9"
                    },
                    SuccessRetentionPeriodInDays: {
                        type: "integer"
                    },
                    FailureRetentionPeriodInDays: {
                        type: "integer"
                    },
                    VpcConfig: {
                        shape: "Sh"
                    },
                    VisualReference: {
                        type: "structure",
                        required: [ "BaseCanaryRunId" ],
                        members: {
                            BaseScreenshots: {
                                shape: "S14"
                            },
                            BaseCanaryRunId: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "Handler" ],
            members: {
                S3Bucket: {},
                S3Key: {},
                S3Version: {},
                ZipFile: {
                    type: "blob"
                },
                Handler: {}
            }
        },
        S7: {
            type: "structure",
            required: [ "Expression" ],
            members: {
                Expression: {},
                DurationInSeconds: {
                    type: "long"
                }
            }
        },
        S9: {
            type: "structure",
            members: {
                TimeoutInSeconds: {
                    type: "integer"
                },
                MemoryInMB: {
                    type: "integer"
                },
                ActiveTracing: {
                    type: "boolean"
                },
                EnvironmentVariables: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        Sh: {
            type: "structure",
            members: {
                SubnetIds: {
                    shape: "Si"
                },
                SecurityGroupIds: {
                    shape: "Sk"
                }
            }
        },
        Si: {
            type: "list",
            member: {}
        },
        Sk: {
            type: "list",
            member: {}
        },
        Sm: {
            type: "map",
            key: {},
            value: {}
        },
        Sq: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Code: {
                    type: "structure",
                    members: {
                        SourceLocationArn: {},
                        Handler: {}
                    }
                },
                ExecutionRoleArn: {},
                Schedule: {
                    type: "structure",
                    members: {
                        Expression: {},
                        DurationInSeconds: {
                            type: "long"
                        }
                    }
                },
                RunConfig: {
                    type: "structure",
                    members: {
                        TimeoutInSeconds: {
                            type: "integer"
                        },
                        MemoryInMB: {
                            type: "integer"
                        },
                        ActiveTracing: {
                            type: "boolean"
                        }
                    }
                },
                SuccessRetentionPeriodInDays: {
                    type: "integer"
                },
                FailureRetentionPeriodInDays: {
                    type: "integer"
                },
                Status: {
                    type: "structure",
                    members: {
                        State: {},
                        StateReason: {},
                        StateReasonCode: {}
                    }
                },
                Timeline: {
                    type: "structure",
                    members: {
                        Created: {
                            type: "timestamp"
                        },
                        LastModified: {
                            type: "timestamp"
                        },
                        LastStarted: {
                            type: "timestamp"
                        },
                        LastStopped: {
                            type: "timestamp"
                        }
                    }
                },
                ArtifactS3Location: {},
                EngineArn: {},
                RuntimeVersion: {},
                VpcConfig: {
                    type: "structure",
                    members: {
                        VpcId: {},
                        SubnetIds: {
                            shape: "Si"
                        },
                        SecurityGroupIds: {
                            shape: "Sk"
                        }
                    }
                },
                VisualReference: {
                    type: "structure",
                    members: {
                        BaseScreenshots: {
                            shape: "S14"
                        },
                        BaseCanaryRunId: {}
                    }
                },
                Tags: {
                    shape: "Sm"
                }
            }
        },
        S14: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ScreenshotName" ],
                members: {
                    ScreenshotName: {},
                    IgnoreCoordinates: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S1k: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Status: {
                    type: "structure",
                    members: {
                        State: {},
                        StateReason: {},
                        StateReasonCode: {}
                    }
                },
                Timeline: {
                    type: "structure",
                    members: {
                        Started: {
                            type: "timestamp"
                        },
                        Completed: {
                            type: "timestamp"
                        }
                    }
                },
                ArtifactS3Location: {}
            }
        }
    },
    paginators: {
        DescribeCanaries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        DescribeCanariesLastRun: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        DescribeRuntimeVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetCanaryRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        }
    }
};

AWS.apiLoader.services["iotsitewise"] = {};

AWS.IoTSiteWise = AWS.Service.defineService("iotsitewise", [ "2019-12-02" ]);

AWS.apiLoader.services["iotsitewise"]["2019-12-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-12-02",
        endpointPrefix: "iotsitewise",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS IoT SiteWise",
        serviceId: "IoTSiteWise",
        signatureVersion: "v4",
        signingName: "iotsitewise",
        uid: "iotsitewise-2019-12-02"
    },
    operations: {
        AssociateAssets: {
            http: {
                requestUri: "/assets/{assetId}/associate"
            },
            input: {
                type: "structure",
                required: [ "assetId", "hierarchyId", "childAssetId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    hierarchyId: {},
                    childAssetId: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        BatchAssociateProjectAssets: {
            http: {
                requestUri: "/projects/{projectId}/assets/associate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "projectId", "assetIds" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    },
                    assetIds: {
                        shape: "S5"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        BatchDisassociateProjectAssets: {
            http: {
                requestUri: "/projects/{projectId}/assets/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "projectId", "assetIds" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    },
                    assetIds: {
                        shape: "S5"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        BatchPutAssetPropertyValue: {
            http: {
                requestUri: "/properties"
            },
            input: {
                type: "structure",
                required: [ "entries" ],
                members: {
                    entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId", "propertyValues" ],
                            members: {
                                entryId: {},
                                assetId: {},
                                propertyId: {},
                                propertyAlias: {},
                                propertyValues: {
                                    type: "list",
                                    member: {
                                        shape: "Sk"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "errorEntries" ],
                members: {
                    errorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entryId", "errors" ],
                            members: {
                                entryId: {},
                                errors: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "errorCode", "errorMessage", "timestamps" ],
                                        members: {
                                            errorCode: {},
                                            errorMessage: {},
                                            timestamps: {
                                                type: "list",
                                                member: {
                                                    shape: "Sq"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        CreateAccessPolicy: {
            http: {
                requestUri: "/access-policies",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "accessPolicyIdentity", "accessPolicyResource", "accessPolicyPermission" ],
                members: {
                    accessPolicyIdentity: {
                        shape: "S13"
                    },
                    accessPolicyResource: {
                        shape: "S1a"
                    },
                    accessPolicyPermission: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accessPolicyId", "accessPolicyArn" ],
                members: {
                    accessPolicyId: {},
                    accessPolicyArn: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        CreateAsset: {
            http: {
                requestUri: "/assets",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetName", "assetModelId" ],
                members: {
                    assetName: {},
                    assetModelId: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetId", "assetArn", "assetStatus" ],
                members: {
                    assetId: {},
                    assetArn: {},
                    assetStatus: {
                        shape: "S1l"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateAssetModel: {
            http: {
                requestUri: "/asset-models",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetModelName" ],
                members: {
                    assetModelName: {},
                    assetModelDescription: {},
                    assetModelProperties: {
                        shape: "S1v"
                    },
                    assetModelHierarchies: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "childAssetModelId" ],
                            members: {
                                name: {},
                                childAssetModelId: {}
                            }
                        }
                    },
                    assetModelCompositeModels: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "type" ],
                            members: {
                                name: {},
                                description: {},
                                type: {},
                                properties: {
                                    shape: "S1v"
                                }
                            }
                        }
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelId", "assetModelArn", "assetModelStatus" ],
                members: {
                    assetModelId: {},
                    assetModelArn: {},
                    assetModelStatus: {
                        shape: "S2q"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateDashboard: {
            http: {
                requestUri: "/dashboards",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "projectId", "dashboardName", "dashboardDefinition" ],
                members: {
                    projectId: {},
                    dashboardName: {},
                    dashboardDescription: {},
                    dashboardDefinition: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dashboardId", "dashboardArn" ],
                members: {
                    dashboardId: {},
                    dashboardArn: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        CreateGateway: {
            http: {
                requestUri: "/20200301/gateways",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "gatewayName", "gatewayPlatform" ],
                members: {
                    gatewayName: {},
                    gatewayPlatform: {
                        shape: "S2w"
                    },
                    tags: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayId", "gatewayArn" ],
                members: {
                    gatewayId: {},
                    gatewayArn: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreatePortal: {
            http: {
                requestUri: "/portals",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "portalName", "portalContactEmail", "roleArn" ],
                members: {
                    portalName: {},
                    portalDescription: {},
                    portalContactEmail: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    portalLogoImageFile: {
                        shape: "S33"
                    },
                    roleArn: {},
                    tags: {
                        shape: "S1e"
                    },
                    portalAuthMode: {},
                    notificationSenderEmail: {},
                    alarms: {
                        shape: "S37"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalId", "portalArn", "portalStartUrl", "portalStatus", "ssoApplicationId" ],
                members: {
                    portalId: {},
                    portalArn: {},
                    portalStartUrl: {},
                    portalStatus: {
                        shape: "S3a"
                    },
                    ssoApplicationId: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        CreateProject: {
            http: {
                requestUri: "/projects",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "portalId", "projectName" ],
                members: {
                    portalId: {},
                    projectName: {},
                    projectDescription: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "projectId", "projectArn" ],
                members: {
                    projectId: {},
                    projectArn: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DeleteAccessPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/access-policies/{accessPolicyId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accessPolicyId" ],
                members: {
                    accessPolicyId: {
                        location: "uri",
                        locationName: "accessPolicyId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DeleteAsset: {
            http: {
                method: "DELETE",
                requestUri: "/assets/{assetId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetStatus" ],
                members: {
                    assetStatus: {
                        shape: "S1l"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteAssetModel: {
            http: {
                method: "DELETE",
                requestUri: "/asset-models/{assetModelId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetModelId" ],
                members: {
                    assetModelId: {
                        location: "uri",
                        locationName: "assetModelId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelStatus" ],
                members: {
                    assetModelStatus: {
                        shape: "S2q"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteDashboard: {
            http: {
                method: "DELETE",
                requestUri: "/dashboards/{dashboardId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "dashboardId" ],
                members: {
                    dashboardId: {
                        location: "uri",
                        locationName: "dashboardId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DeleteGateway: {
            http: {
                method: "DELETE",
                requestUri: "/20200301/gateways/{gatewayId}"
            },
            input: {
                type: "structure",
                required: [ "gatewayId" ],
                members: {
                    gatewayId: {
                        location: "uri",
                        locationName: "gatewayId"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeletePortal: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "portalId" ],
                members: {
                    portalId: {
                        location: "uri",
                        locationName: "portalId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalStatus" ],
                members: {
                    portalStatus: {
                        shape: "S3a"
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{projectId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DescribeAccessPolicy: {
            http: {
                method: "GET",
                requestUri: "/access-policies/{accessPolicyId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accessPolicyId" ],
                members: {
                    accessPolicyId: {
                        location: "uri",
                        locationName: "accessPolicyId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accessPolicyId", "accessPolicyArn", "accessPolicyIdentity", "accessPolicyResource", "accessPolicyPermission", "accessPolicyCreationDate", "accessPolicyLastUpdateDate" ],
                members: {
                    accessPolicyId: {},
                    accessPolicyArn: {},
                    accessPolicyIdentity: {
                        shape: "S13"
                    },
                    accessPolicyResource: {
                        shape: "S1a"
                    },
                    accessPolicyPermission: {},
                    accessPolicyCreationDate: {
                        type: "timestamp"
                    },
                    accessPolicyLastUpdateDate: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DescribeAsset: {
            http: {
                method: "GET",
                requestUri: "/assets/{assetId}"
            },
            input: {
                type: "structure",
                required: [ "assetId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetId", "assetArn", "assetName", "assetModelId", "assetProperties", "assetHierarchies", "assetCreationDate", "assetLastUpdateDate", "assetStatus" ],
                members: {
                    assetId: {},
                    assetArn: {},
                    assetName: {},
                    assetModelId: {},
                    assetProperties: {
                        shape: "S40"
                    },
                    assetHierarchies: {
                        shape: "S46"
                    },
                    assetCompositeModels: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "type", "properties" ],
                            members: {
                                name: {},
                                description: {},
                                type: {},
                                properties: {
                                    shape: "S40"
                                }
                            }
                        }
                    },
                    assetCreationDate: {
                        type: "timestamp"
                    },
                    assetLastUpdateDate: {
                        type: "timestamp"
                    },
                    assetStatus: {
                        shape: "S1l"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeAssetModel: {
            http: {
                method: "GET",
                requestUri: "/asset-models/{assetModelId}"
            },
            input: {
                type: "structure",
                required: [ "assetModelId" ],
                members: {
                    assetModelId: {
                        location: "uri",
                        locationName: "assetModelId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelId", "assetModelArn", "assetModelName", "assetModelDescription", "assetModelProperties", "assetModelHierarchies", "assetModelCreationDate", "assetModelLastUpdateDate", "assetModelStatus" ],
                members: {
                    assetModelId: {},
                    assetModelArn: {},
                    assetModelName: {},
                    assetModelDescription: {},
                    assetModelProperties: {
                        shape: "S4c"
                    },
                    assetModelHierarchies: {
                        shape: "S4e"
                    },
                    assetModelCompositeModels: {
                        shape: "S4g"
                    },
                    assetModelCreationDate: {
                        type: "timestamp"
                    },
                    assetModelLastUpdateDate: {
                        type: "timestamp"
                    },
                    assetModelStatus: {
                        shape: "S2q"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeAssetProperty: {
            http: {
                method: "GET",
                requestUri: "/assets/{assetId}/properties/{propertyId}"
            },
            input: {
                type: "structure",
                required: [ "assetId", "propertyId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "uri",
                        locationName: "propertyId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetId", "assetName", "assetModelId" ],
                members: {
                    assetId: {},
                    assetName: {},
                    assetModelId: {},
                    assetProperty: {
                        shape: "S4k"
                    },
                    compositeModel: {
                        type: "structure",
                        required: [ "name", "type", "assetProperty" ],
                        members: {
                            name: {},
                            type: {},
                            assetProperty: {
                                shape: "S4k"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeDashboard: {
            http: {
                method: "GET",
                requestUri: "/dashboards/{dashboardId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dashboardId" ],
                members: {
                    dashboardId: {
                        location: "uri",
                        locationName: "dashboardId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dashboardId", "dashboardArn", "dashboardName", "projectId", "dashboardDefinition", "dashboardCreationDate", "dashboardLastUpdateDate" ],
                members: {
                    dashboardId: {},
                    dashboardArn: {},
                    dashboardName: {},
                    projectId: {},
                    dashboardDescription: {},
                    dashboardDefinition: {},
                    dashboardCreationDate: {
                        type: "timestamp"
                    },
                    dashboardLastUpdateDate: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DescribeDefaultEncryptionConfiguration: {
            http: {
                method: "GET",
                requestUri: "/configuration/account/encryption"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "encryptionType", "configurationStatus" ],
                members: {
                    encryptionType: {},
                    kmsKeyArn: {},
                    configurationStatus: {
                        shape: "S4r"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeGateway: {
            http: {
                method: "GET",
                requestUri: "/20200301/gateways/{gatewayId}"
            },
            input: {
                type: "structure",
                required: [ "gatewayId" ],
                members: {
                    gatewayId: {
                        location: "uri",
                        locationName: "gatewayId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayId", "gatewayName", "gatewayArn", "gatewayCapabilitySummaries", "creationDate", "lastUpdateDate" ],
                members: {
                    gatewayId: {},
                    gatewayName: {},
                    gatewayArn: {},
                    gatewayPlatform: {
                        shape: "S2w"
                    },
                    gatewayCapabilitySummaries: {
                        shape: "S4w"
                    },
                    creationDate: {
                        type: "timestamp"
                    },
                    lastUpdateDate: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeGatewayCapabilityConfiguration: {
            http: {
                method: "GET",
                requestUri: "/20200301/gateways/{gatewayId}/capability/{capabilityNamespace}"
            },
            input: {
                type: "structure",
                required: [ "gatewayId", "capabilityNamespace" ],
                members: {
                    gatewayId: {
                        location: "uri",
                        locationName: "gatewayId"
                    },
                    capabilityNamespace: {
                        location: "uri",
                        locationName: "capabilityNamespace"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayId", "capabilityNamespace", "capabilityConfiguration", "capabilitySyncStatus" ],
                members: {
                    gatewayId: {},
                    capabilityNamespace: {},
                    capabilityConfiguration: {},
                    capabilitySyncStatus: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribeLoggingOptions: {
            http: {
                method: "GET",
                requestUri: "/logging"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "loggingOptions" ],
                members: {
                    loggingOptions: {
                        shape: "S55"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DescribePortal: {
            http: {
                method: "GET",
                requestUri: "/portals/{portalId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalId" ],
                members: {
                    portalId: {
                        location: "uri",
                        locationName: "portalId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalId", "portalArn", "portalName", "portalClientId", "portalStartUrl", "portalContactEmail", "portalStatus", "portalCreationDate", "portalLastUpdateDate" ],
                members: {
                    portalId: {},
                    portalArn: {},
                    portalName: {},
                    portalDescription: {},
                    portalClientId: {},
                    portalStartUrl: {},
                    portalContactEmail: {},
                    portalStatus: {
                        shape: "S3a"
                    },
                    portalCreationDate: {
                        type: "timestamp"
                    },
                    portalLastUpdateDate: {
                        type: "timestamp"
                    },
                    portalLogoImageLocation: {
                        type: "structure",
                        required: [ "id", "url" ],
                        members: {
                            id: {},
                            url: {}
                        }
                    },
                    roleArn: {},
                    portalAuthMode: {},
                    notificationSenderEmail: {},
                    alarms: {
                        shape: "S37"
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DescribeProject: {
            http: {
                method: "GET",
                requestUri: "/projects/{projectId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "projectId", "projectArn", "projectName", "portalId", "projectCreationDate", "projectLastUpdateDate" ],
                members: {
                    projectId: {},
                    projectArn: {},
                    projectName: {},
                    portalId: {},
                    projectDescription: {},
                    projectCreationDate: {
                        type: "timestamp"
                    },
                    projectLastUpdateDate: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        DescribeStorageConfiguration: {
            http: {
                method: "GET",
                requestUri: "/configuration/account/storage"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "storageType", "configurationStatus" ],
                members: {
                    storageType: {},
                    multiLayerStorage: {
                        shape: "S5g"
                    },
                    configurationStatus: {
                        shape: "S4r"
                    },
                    lastUpdateDate: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DisassociateAssets: {
            http: {
                requestUri: "/assets/{assetId}/disassociate"
            },
            input: {
                type: "structure",
                required: [ "assetId", "hierarchyId", "childAssetId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    hierarchyId: {},
                    childAssetId: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetAssetPropertyAggregates: {
            http: {
                method: "GET",
                requestUri: "/properties/aggregates"
            },
            input: {
                type: "structure",
                required: [ "aggregateTypes", "resolution", "startDate", "endDate" ],
                members: {
                    assetId: {
                        location: "querystring",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "querystring",
                        locationName: "propertyId"
                    },
                    propertyAlias: {
                        location: "querystring",
                        locationName: "propertyAlias"
                    },
                    aggregateTypes: {
                        location: "querystring",
                        locationName: "aggregateTypes",
                        type: "list",
                        member: {}
                    },
                    resolution: {
                        location: "querystring",
                        locationName: "resolution"
                    },
                    qualities: {
                        shape: "S5n",
                        location: "querystring",
                        locationName: "qualities"
                    },
                    startDate: {
                        location: "querystring",
                        locationName: "startDate",
                        type: "timestamp"
                    },
                    endDate: {
                        location: "querystring",
                        locationName: "endDate",
                        type: "timestamp"
                    },
                    timeOrdering: {
                        location: "querystring",
                        locationName: "timeOrdering"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "aggregatedValues" ],
                members: {
                    aggregatedValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "timestamp", "value" ],
                            members: {
                                timestamp: {
                                    type: "timestamp"
                                },
                                quality: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        average: {
                                            type: "double"
                                        },
                                        count: {
                                            type: "double"
                                        },
                                        maximum: {
                                            type: "double"
                                        },
                                        minimum: {
                                            type: "double"
                                        },
                                        sum: {
                                            type: "double"
                                        },
                                        standardDeviation: {
                                            type: "double"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        GetAssetPropertyValue: {
            http: {
                method: "GET",
                requestUri: "/properties/latest"
            },
            input: {
                type: "structure",
                members: {
                    assetId: {
                        location: "querystring",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "querystring",
                        locationName: "propertyId"
                    },
                    propertyAlias: {
                        location: "querystring",
                        locationName: "propertyAlias"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    propertyValue: {
                        shape: "Sk"
                    }
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        GetAssetPropertyValueHistory: {
            http: {
                method: "GET",
                requestUri: "/properties/history"
            },
            input: {
                type: "structure",
                members: {
                    assetId: {
                        location: "querystring",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "querystring",
                        locationName: "propertyId"
                    },
                    propertyAlias: {
                        location: "querystring",
                        locationName: "propertyAlias"
                    },
                    startDate: {
                        location: "querystring",
                        locationName: "startDate",
                        type: "timestamp"
                    },
                    endDate: {
                        location: "querystring",
                        locationName: "endDate",
                        type: "timestamp"
                    },
                    qualities: {
                        shape: "S5n",
                        location: "querystring",
                        locationName: "qualities"
                    },
                    timeOrdering: {
                        location: "querystring",
                        locationName: "timeOrdering"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetPropertyValueHistory" ],
                members: {
                    assetPropertyValueHistory: {
                        type: "list",
                        member: {
                            shape: "Sk"
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        GetInterpolatedAssetPropertyValues: {
            http: {
                method: "GET",
                requestUri: "/properties/interpolated"
            },
            input: {
                type: "structure",
                required: [ "startTimeInSeconds", "endTimeInSeconds", "quality", "intervalInSeconds", "type" ],
                members: {
                    assetId: {
                        location: "querystring",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "querystring",
                        locationName: "propertyId"
                    },
                    propertyAlias: {
                        location: "querystring",
                        locationName: "propertyAlias"
                    },
                    startTimeInSeconds: {
                        location: "querystring",
                        locationName: "startTimeInSeconds",
                        type: "long"
                    },
                    startTimeOffsetInNanos: {
                        location: "querystring",
                        locationName: "startTimeOffsetInNanos",
                        type: "integer"
                    },
                    endTimeInSeconds: {
                        location: "querystring",
                        locationName: "endTimeInSeconds",
                        type: "long"
                    },
                    endTimeOffsetInNanos: {
                        location: "querystring",
                        locationName: "endTimeOffsetInNanos",
                        type: "integer"
                    },
                    quality: {
                        location: "querystring",
                        locationName: "quality"
                    },
                    intervalInSeconds: {
                        location: "querystring",
                        locationName: "intervalInSeconds",
                        type: "long"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    intervalWindowInSeconds: {
                        location: "querystring",
                        locationName: "intervalWindowInSeconds",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "interpolatedAssetPropertyValues" ],
                members: {
                    interpolatedAssetPropertyValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "timestamp", "value" ],
                            members: {
                                timestamp: {
                                    shape: "Sq"
                                },
                                value: {
                                    shape: "Sl"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        ListAccessPolicies: {
            http: {
                method: "GET",
                requestUri: "/access-policies",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    identityType: {
                        location: "querystring",
                        locationName: "identityType"
                    },
                    identityId: {
                        location: "querystring",
                        locationName: "identityId"
                    },
                    resourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    resourceId: {
                        location: "querystring",
                        locationName: "resourceId"
                    },
                    iamArn: {
                        location: "querystring",
                        locationName: "iamArn"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accessPolicySummaries" ],
                members: {
                    accessPolicySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "identity", "resource", "permission" ],
                            members: {
                                id: {},
                                identity: {
                                    shape: "S13"
                                },
                                resource: {
                                    shape: "S1a"
                                },
                                permission: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        ListAssetModels: {
            http: {
                method: "GET",
                requestUri: "/asset-models"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelSummaries" ],
                members: {
                    assetModelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "name", "description", "creationDate", "lastUpdateDate", "status" ],
                            members: {
                                id: {},
                                arn: {},
                                name: {},
                                description: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                },
                                status: {
                                    shape: "S2q"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListAssetRelationships: {
            http: {
                method: "GET",
                requestUri: "/assets/{assetId}/assetRelationships"
            },
            input: {
                type: "structure",
                required: [ "assetId", "traversalType" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    traversalType: {
                        location: "querystring",
                        locationName: "traversalType"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetRelationshipSummaries" ],
                members: {
                    assetRelationshipSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "relationshipType" ],
                            members: {
                                hierarchyInfo: {
                                    type: "structure",
                                    members: {
                                        parentAssetId: {},
                                        childAssetId: {}
                                    }
                                },
                                relationshipType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListAssets: {
            http: {
                method: "GET",
                requestUri: "/assets"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    assetModelId: {
                        location: "querystring",
                        locationName: "assetModelId"
                    },
                    filter: {
                        location: "querystring",
                        locationName: "filter"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetSummaries" ],
                members: {
                    assetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "name", "assetModelId", "creationDate", "lastUpdateDate", "status", "hierarchies" ],
                            members: {
                                id: {},
                                arn: {},
                                name: {},
                                assetModelId: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                },
                                status: {
                                    shape: "S1l"
                                },
                                hierarchies: {
                                    shape: "S46"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListAssociatedAssets: {
            http: {
                method: "GET",
                requestUri: "/assets/{assetId}/hierarchies"
            },
            input: {
                type: "structure",
                required: [ "assetId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    hierarchyId: {
                        location: "querystring",
                        locationName: "hierarchyId"
                    },
                    traversalDirection: {
                        location: "querystring",
                        locationName: "traversalDirection"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetSummaries" ],
                members: {
                    assetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "name", "assetModelId", "creationDate", "lastUpdateDate", "status", "hierarchies" ],
                            members: {
                                id: {},
                                arn: {},
                                name: {},
                                assetModelId: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                },
                                status: {
                                    shape: "S1l"
                                },
                                hierarchies: {
                                    shape: "S46"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListDashboards: {
            http: {
                method: "GET",
                requestUri: "/dashboards",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "querystring",
                        locationName: "projectId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dashboardSummaries" ],
                members: {
                    dashboardSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name" ],
                            members: {
                                id: {},
                                name: {},
                                description: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        ListGateways: {
            http: {
                method: "GET",
                requestUri: "/20200301/gateways"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewaySummaries" ],
                members: {
                    gatewaySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "gatewayId", "gatewayName", "creationDate", "lastUpdateDate" ],
                            members: {
                                gatewayId: {},
                                gatewayName: {},
                                gatewayPlatform: {
                                    shape: "S2w"
                                },
                                gatewayCapabilitySummaries: {
                                    shape: "S4w"
                                },
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListPortals: {
            http: {
                method: "GET",
                requestUri: "/portals",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    portalSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name", "startUrl", "status" ],
                            members: {
                                id: {},
                                name: {},
                                description: {},
                                startUrl: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                },
                                roleArn: {},
                                status: {
                                    shape: "S3a"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        ListProjectAssets: {
            http: {
                method: "GET",
                requestUri: "/projects/{projectId}/assets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetIds" ],
                members: {
                    assetIds: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        ListProjects: {
            http: {
                method: "GET",
                requestUri: "/projects",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalId" ],
                members: {
                    portalId: {
                        location: "querystring",
                        locationName: "portalId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "projectSummaries" ],
                members: {
                    projectSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name" ],
                            members: {
                                id: {},
                                name: {},
                                description: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastUpdateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1e"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        PutDefaultEncryptionConfiguration: {
            http: {
                requestUri: "/configuration/account/encryption"
            },
            input: {
                type: "structure",
                required: [ "encryptionType" ],
                members: {
                    encryptionType: {},
                    kmsKeyId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "encryptionType", "configurationStatus" ],
                members: {
                    encryptionType: {},
                    kmsKeyArn: {},
                    configurationStatus: {
                        shape: "S4r"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        PutLoggingOptions: {
            http: {
                method: "PUT",
                requestUri: "/logging"
            },
            input: {
                type: "structure",
                required: [ "loggingOptions" ],
                members: {
                    loggingOptions: {
                        shape: "S55"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        PutStorageConfiguration: {
            http: {
                requestUri: "/configuration/account/storage"
            },
            input: {
                type: "structure",
                required: [ "storageType" ],
                members: {
                    storageType: {},
                    multiLayerStorage: {
                        shape: "S5g"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "storageType", "configurationStatus" ],
                members: {
                    storageType: {},
                    multiLayerStorage: {
                        shape: "S5g"
                    },
                    configurationStatus: {
                        shape: "S4r"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateAccessPolicy: {
            http: {
                method: "PUT",
                requestUri: "/access-policies/{accessPolicyId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accessPolicyId", "accessPolicyIdentity", "accessPolicyResource", "accessPolicyPermission" ],
                members: {
                    accessPolicyId: {
                        location: "uri",
                        locationName: "accessPolicyId"
                    },
                    accessPolicyIdentity: {
                        shape: "S13"
                    },
                    accessPolicyResource: {
                        shape: "S1a"
                    },
                    accessPolicyPermission: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        UpdateAsset: {
            http: {
                method: "PUT",
                requestUri: "/assets/{assetId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetId", "assetName" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    assetName: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetStatus" ],
                members: {
                    assetStatus: {
                        shape: "S1l"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateAssetModel: {
            http: {
                method: "PUT",
                requestUri: "/asset-models/{assetModelId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "assetModelId", "assetModelName" ],
                members: {
                    assetModelId: {
                        location: "uri",
                        locationName: "assetModelId"
                    },
                    assetModelName: {},
                    assetModelDescription: {},
                    assetModelProperties: {
                        shape: "S4c"
                    },
                    assetModelHierarchies: {
                        shape: "S4e"
                    },
                    assetModelCompositeModels: {
                        shape: "S4g"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assetModelStatus" ],
                members: {
                    assetModelStatus: {
                        shape: "S2q"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateAssetProperty: {
            http: {
                method: "PUT",
                requestUri: "/assets/{assetId}/properties/{propertyId}"
            },
            input: {
                type: "structure",
                required: [ "assetId", "propertyId" ],
                members: {
                    assetId: {
                        location: "uri",
                        locationName: "assetId"
                    },
                    propertyId: {
                        location: "uri",
                        locationName: "propertyId"
                    },
                    propertyAlias: {},
                    propertyNotificationState: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateDashboard: {
            http: {
                method: "PUT",
                requestUri: "/dashboards/{dashboardId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dashboardId", "dashboardName", "dashboardDefinition" ],
                members: {
                    dashboardId: {
                        location: "uri",
                        locationName: "dashboardId"
                    },
                    dashboardName: {},
                    dashboardDescription: {},
                    dashboardDefinition: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        UpdateGateway: {
            http: {
                method: "PUT",
                requestUri: "/20200301/gateways/{gatewayId}"
            },
            input: {
                type: "structure",
                required: [ "gatewayId", "gatewayName" ],
                members: {
                    gatewayId: {
                        location: "uri",
                        locationName: "gatewayId"
                    },
                    gatewayName: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateGatewayCapabilityConfiguration: {
            http: {
                requestUri: "/20200301/gateways/{gatewayId}/capability",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "gatewayId", "capabilityNamespace", "capabilityConfiguration" ],
                members: {
                    gatewayId: {
                        location: "uri",
                        locationName: "gatewayId"
                    },
                    capabilityNamespace: {},
                    capabilityConfiguration: {}
                }
            },
            output: {
                type: "structure",
                required: [ "capabilityNamespace", "capabilitySyncStatus" ],
                members: {
                    capabilityNamespace: {},
                    capabilitySyncStatus: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdatePortal: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "portalId", "portalName", "portalContactEmail", "roleArn" ],
                members: {
                    portalId: {
                        location: "uri",
                        locationName: "portalId"
                    },
                    portalName: {},
                    portalDescription: {},
                    portalContactEmail: {},
                    portalLogoImage: {
                        type: "structure",
                        members: {
                            id: {},
                            file: {
                                shape: "S33"
                            }
                        }
                    },
                    roleArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    notificationSenderEmail: {},
                    alarms: {
                        shape: "S37"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalStatus" ],
                members: {
                    portalStatus: {
                        shape: "S3a"
                    }
                }
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        },
        UpdateProject: {
            http: {
                method: "PUT",
                requestUri: "/projects/{projectId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "projectId", "projectName" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    },
                    projectName: {},
                    projectDescription: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "monitor."
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {}
        },
        S8: {
            type: "structure",
            required: [ "assetId", "code", "message" ],
            members: {
                assetId: {},
                code: {},
                message: {}
            }
        },
        Sk: {
            type: "structure",
            required: [ "value", "timestamp" ],
            members: {
                value: {
                    shape: "Sl"
                },
                timestamp: {
                    shape: "Sq"
                },
                quality: {}
            }
        },
        Sl: {
            type: "structure",
            members: {
                stringValue: {},
                integerValue: {
                    type: "integer"
                },
                doubleValue: {
                    type: "double"
                },
                booleanValue: {
                    type: "boolean"
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "timeInSeconds" ],
            members: {
                timeInSeconds: {
                    type: "long"
                },
                offsetInNanos: {
                    type: "integer"
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                user: {
                    type: "structure",
                    required: [ "id" ],
                    members: {
                        id: {}
                    }
                },
                group: {
                    type: "structure",
                    required: [ "id" ],
                    members: {
                        id: {}
                    }
                },
                iamUser: {
                    type: "structure",
                    required: [ "arn" ],
                    members: {
                        arn: {}
                    }
                },
                iamRole: {
                    type: "structure",
                    required: [ "arn" ],
                    members: {
                        arn: {}
                    }
                }
            }
        },
        S1a: {
            type: "structure",
            members: {
                portal: {
                    type: "structure",
                    required: [ "id" ],
                    members: {
                        id: {}
                    }
                },
                project: {
                    type: "structure",
                    required: [ "id" ],
                    members: {
                        id: {}
                    }
                }
            }
        },
        S1e: {
            type: "map",
            key: {},
            value: {}
        },
        S1l: {
            type: "structure",
            required: [ "state" ],
            members: {
                state: {},
                error: {
                    shape: "S1n"
                }
            }
        },
        S1n: {
            type: "structure",
            required: [ "code", "message" ],
            members: {
                code: {},
                message: {},
                details: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "code", "message" ],
                        members: {
                            code: {},
                            message: {}
                        }
                    }
                }
            }
        },
        S1v: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "dataType", "type" ],
                members: {
                    name: {},
                    dataType: {},
                    dataTypeSpec: {},
                    unit: {},
                    type: {
                        shape: "S1z"
                    }
                }
            }
        },
        S1z: {
            type: "structure",
            members: {
                attribute: {
                    type: "structure",
                    members: {
                        defaultValue: {}
                    }
                },
                measurement: {
                    type: "structure",
                    members: {
                        processingConfig: {
                            type: "structure",
                            required: [ "forwardingConfig" ],
                            members: {
                                forwardingConfig: {
                                    shape: "S24"
                                }
                            }
                        }
                    }
                },
                transform: {
                    type: "structure",
                    required: [ "expression", "variables" ],
                    members: {
                        expression: {},
                        variables: {
                            shape: "S28"
                        },
                        processingConfig: {
                            type: "structure",
                            required: [ "computeLocation" ],
                            members: {
                                computeLocation: {},
                                forwardingConfig: {
                                    shape: "S24"
                                }
                            }
                        }
                    }
                },
                metric: {
                    type: "structure",
                    required: [ "expression", "variables", "window" ],
                    members: {
                        expression: {},
                        variables: {
                            shape: "S28"
                        },
                        window: {
                            type: "structure",
                            members: {
                                tumbling: {
                                    type: "structure",
                                    required: [ "interval" ],
                                    members: {
                                        interval: {},
                                        offset: {}
                                    }
                                }
                            }
                        },
                        processingConfig: {
                            type: "structure",
                            required: [ "computeLocation" ],
                            members: {
                                computeLocation: {}
                            }
                        }
                    }
                }
            }
        },
        S24: {
            type: "structure",
            required: [ "state" ],
            members: {
                state: {}
            }
        },
        S28: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "value" ],
                members: {
                    name: {},
                    value: {
                        type: "structure",
                        required: [ "propertyId" ],
                        members: {
                            propertyId: {},
                            hierarchyId: {}
                        }
                    }
                }
            }
        },
        S2q: {
            type: "structure",
            required: [ "state" ],
            members: {
                state: {},
                error: {
                    shape: "S1n"
                }
            }
        },
        S2w: {
            type: "structure",
            members: {
                greengrass: {
                    type: "structure",
                    required: [ "groupArn" ],
                    members: {
                        groupArn: {}
                    }
                },
                greengrassV2: {
                    type: "structure",
                    required: [ "coreDeviceThingName" ],
                    members: {
                        coreDeviceThingName: {}
                    }
                }
            }
        },
        S33: {
            type: "structure",
            required: [ "data", "type" ],
            members: {
                data: {
                    type: "blob"
                },
                type: {}
            }
        },
        S37: {
            type: "structure",
            required: [ "alarmRoleArn" ],
            members: {
                alarmRoleArn: {},
                notificationLambdaArn: {}
            }
        },
        S3a: {
            type: "structure",
            required: [ "state" ],
            members: {
                state: {},
                error: {
                    type: "structure",
                    members: {
                        code: {},
                        message: {}
                    }
                }
            }
        },
        S40: {
            type: "list",
            member: {
                type: "structure",
                required: [ "id", "name", "dataType" ],
                members: {
                    id: {},
                    name: {},
                    alias: {},
                    notification: {
                        shape: "S43"
                    },
                    dataType: {},
                    dataTypeSpec: {},
                    unit: {}
                }
            }
        },
        S43: {
            type: "structure",
            required: [ "topic", "state" ],
            members: {
                topic: {},
                state: {}
            }
        },
        S46: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name" ],
                members: {
                    id: {},
                    name: {}
                }
            }
        },
        S4c: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "dataType", "type" ],
                members: {
                    id: {},
                    name: {},
                    dataType: {},
                    dataTypeSpec: {},
                    unit: {},
                    type: {
                        shape: "S1z"
                    }
                }
            }
        },
        S4e: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "childAssetModelId" ],
                members: {
                    id: {},
                    name: {},
                    childAssetModelId: {}
                }
            }
        },
        S4g: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    name: {},
                    description: {},
                    type: {},
                    properties: {
                        shape: "S4c"
                    }
                }
            }
        },
        S4k: {
            type: "structure",
            required: [ "id", "name", "dataType" ],
            members: {
                id: {},
                name: {},
                alias: {},
                notification: {
                    shape: "S43"
                },
                dataType: {},
                unit: {},
                type: {
                    shape: "S1z"
                }
            }
        },
        S4r: {
            type: "structure",
            required: [ "state" ],
            members: {
                state: {},
                error: {
                    type: "structure",
                    required: [ "code", "message" ],
                    members: {
                        code: {},
                        message: {}
                    }
                }
            }
        },
        S4w: {
            type: "list",
            member: {
                type: "structure",
                required: [ "capabilityNamespace", "capabilitySyncStatus" ],
                members: {
                    capabilityNamespace: {},
                    capabilitySyncStatus: {}
                }
            }
        },
        S55: {
            type: "structure",
            required: [ "level" ],
            members: {
                level: {}
            }
        },
        S5g: {
            type: "structure",
            required: [ "customerManagedS3Storage" ],
            members: {
                customerManagedS3Storage: {
                    type: "structure",
                    required: [ "s3ResourceArn", "roleArn" ],
                    members: {
                        s3ResourceArn: {},
                        roleArn: {}
                    }
                }
            }
        },
        S5n: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetAssetPropertyAggregates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "aggregatedValues"
        },
        GetAssetPropertyValueHistory: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetPropertyValueHistory"
        },
        GetInterpolatedAssetPropertyValues: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "interpolatedAssetPropertyValues"
        },
        ListAccessPolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "accessPolicySummaries"
        },
        ListAssetModels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetModelSummaries"
        },
        ListAssetRelationships: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetRelationshipSummaries"
        },
        ListAssets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetSummaries"
        },
        ListAssociatedAssets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetSummaries"
        },
        ListDashboards: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "dashboardSummaries"
        },
        ListGateways: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "gatewaySummaries"
        },
        ListPortals: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "portalSummaries"
        },
        ListProjectAssets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assetIds"
        },
        ListProjects: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "projectSummaries"
        }
    },
    waiters: {
        AssetModelNotExists: {
            delay: 3,
            maxAttempts: 20,
            operation: "DescribeAssetModel",
            acceptors: [ {
                state: "success",
                matcher: "error",
                expected: "ResourceNotFoundException"
            } ]
        },
        AssetModelActive: {
            delay: 3,
            maxAttempts: 20,
            operation: "DescribeAssetModel",
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "assetModelStatus.state",
                expected: "ACTIVE"
            }, {
                state: "failure",
                matcher: "path",
                argument: "assetModelStatus.state",
                expected: "FAILED"
            } ]
        },
        AssetNotExists: {
            delay: 3,
            maxAttempts: 20,
            operation: "DescribeAsset",
            acceptors: [ {
                state: "success",
                matcher: "error",
                expected: "ResourceNotFoundException"
            } ]
        },
        AssetActive: {
            delay: 3,
            maxAttempts: 20,
            operation: "DescribeAsset",
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "assetStatus.state",
                expected: "ACTIVE"
            }, {
                state: "failure",
                matcher: "path",
                argument: "assetStatus.state",
                expected: "FAILED"
            } ]
        },
        PortalNotExists: {
            delay: 3,
            maxAttempts: 20,
            operation: "DescribePortal",
            acceptors: [ {
                state: "success",
                matcher: "error",
                expected: "ResourceNotFoundException"
            } ]
        },
        PortalActive: {
            delay: 3,
            maxAttempts: 20,
            operation: "DescribePortal",
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "portalStatus.state",
                expected: "ACTIVE"
            } ]
        }
    }
};

AWS.apiLoader.services["macie2"] = {};

AWS.Macie2 = AWS.Service.defineService("macie2", [ "2020-01-01" ]);

AWS.apiLoader.services["macie2"]["2020-01-01"] = {
    metadata: {
        apiVersion: "2020-01-01",
        endpointPrefix: "macie2",
        signingName: "macie2",
        serviceFullName: "Amazon Macie 2",
        serviceId: "Macie2",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "macie2-2020-01-01",
        signatureVersion: "v4"
    },
    operations: {
        AcceptInvitation: {
            http: {
                requestUri: "/invitations/accept",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    administratorAccountId: {
                        locationName: "administratorAccountId"
                    },
                    invitationId: {
                        locationName: "invitationId"
                    },
                    masterAccount: {
                        locationName: "masterAccount"
                    }
                },
                required: [ "invitationId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchGetCustomDataIdentifiers: {
            http: {
                requestUri: "/custom-data-identifiers/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ids: {
                        shape: "S5",
                        locationName: "ids"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    customDataIdentifiers: {
                        locationName: "customDataIdentifiers",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {
                                    locationName: "arn"
                                },
                                createdAt: {
                                    shape: "S9",
                                    locationName: "createdAt"
                                },
                                deleted: {
                                    locationName: "deleted",
                                    type: "boolean"
                                },
                                description: {
                                    locationName: "description"
                                },
                                id: {
                                    locationName: "id"
                                },
                                name: {
                                    locationName: "name"
                                }
                            }
                        }
                    },
                    notFoundIdentifierIds: {
                        shape: "S5",
                        locationName: "notFoundIdentifierIds"
                    }
                }
            }
        },
        CreateClassificationJob: {
            http: {
                requestUri: "/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    customDataIdentifierIds: {
                        shape: "S5",
                        locationName: "customDataIdentifierIds"
                    },
                    description: {
                        locationName: "description"
                    },
                    initialRun: {
                        locationName: "initialRun",
                        type: "boolean"
                    },
                    jobType: {
                        locationName: "jobType"
                    },
                    managedDataIdentifierIds: {
                        shape: "S5",
                        locationName: "managedDataIdentifierIds"
                    },
                    managedDataIdentifierSelector: {
                        locationName: "managedDataIdentifierSelector"
                    },
                    name: {
                        locationName: "name"
                    },
                    s3JobDefinition: {
                        shape: "Se",
                        locationName: "s3JobDefinition"
                    },
                    samplingPercentage: {
                        locationName: "samplingPercentage",
                        type: "integer"
                    },
                    scheduleFrequency: {
                        shape: "S12",
                        locationName: "scheduleFrequency"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                },
                required: [ "s3JobDefinition", "jobType", "clientToken", "name" ]
            },
            output: {
                type: "structure",
                members: {
                    jobArn: {
                        locationName: "jobArn"
                    },
                    jobId: {
                        locationName: "jobId"
                    }
                }
            }
        },
        CreateCustomDataIdentifier: {
            http: {
                requestUri: "/custom-data-identifiers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    description: {
                        locationName: "description"
                    },
                    ignoreWords: {
                        shape: "S5",
                        locationName: "ignoreWords"
                    },
                    keywords: {
                        shape: "S5",
                        locationName: "keywords"
                    },
                    maximumMatchDistance: {
                        locationName: "maximumMatchDistance",
                        type: "integer"
                    },
                    name: {
                        locationName: "name"
                    },
                    regex: {
                        locationName: "regex"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    customDataIdentifierId: {
                        locationName: "customDataIdentifierId"
                    }
                }
            }
        },
        CreateFindingsFilter: {
            http: {
                requestUri: "/findingsfilters",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    action: {
                        locationName: "action"
                    },
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    description: {
                        locationName: "description"
                    },
                    findingCriteria: {
                        shape: "S1d",
                        locationName: "findingCriteria"
                    },
                    name: {
                        locationName: "name"
                    },
                    position: {
                        locationName: "position",
                        type: "integer"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                },
                required: [ "action", "findingCriteria", "name" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    },
                    id: {
                        locationName: "id"
                    }
                }
            }
        },
        CreateInvitations: {
            http: {
                requestUri: "/invitations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5",
                        locationName: "accountIds"
                    },
                    disableEmailNotification: {
                        locationName: "disableEmailNotification",
                        type: "boolean"
                    },
                    message: {
                        locationName: "message"
                    }
                },
                required: [ "accountIds" ]
            },
            output: {
                type: "structure",
                members: {
                    unprocessedAccounts: {
                        shape: "S1k",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        CreateMember: {
            http: {
                requestUri: "/members",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    account: {
                        locationName: "account",
                        type: "structure",
                        members: {
                            accountId: {
                                locationName: "accountId"
                            },
                            email: {
                                locationName: "email"
                            }
                        },
                        required: [ "email", "accountId" ]
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                },
                required: [ "account" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    }
                }
            }
        },
        CreateSampleFindings: {
            http: {
                requestUri: "/findings/sample",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingTypes: {
                        locationName: "findingTypes",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeclineInvitations: {
            http: {
                requestUri: "/invitations/decline",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5",
                        locationName: "accountIds"
                    }
                },
                required: [ "accountIds" ]
            },
            output: {
                type: "structure",
                members: {
                    unprocessedAccounts: {
                        shape: "S1k",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        DeleteCustomDataIdentifier: {
            http: {
                method: "DELETE",
                requestUri: "/custom-data-identifiers/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFindingsFilter: {
            http: {
                method: "DELETE",
                requestUri: "/findingsfilters/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInvitations: {
            http: {
                requestUri: "/invitations/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5",
                        locationName: "accountIds"
                    }
                },
                required: [ "accountIds" ]
            },
            output: {
                type: "structure",
                members: {
                    unprocessedAccounts: {
                        shape: "S1k",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        DeleteMember: {
            http: {
                method: "DELETE",
                requestUri: "/members/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeBuckets: {
            http: {
                requestUri: "/datasources/s3",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    criteria: {
                        locationName: "criteria",
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                eq: {
                                    shape: "S5",
                                    locationName: "eq"
                                },
                                gt: {
                                    locationName: "gt",
                                    type: "long"
                                },
                                gte: {
                                    locationName: "gte",
                                    type: "long"
                                },
                                lt: {
                                    locationName: "lt",
                                    type: "long"
                                },
                                lte: {
                                    locationName: "lte",
                                    type: "long"
                                },
                                neq: {
                                    shape: "S5",
                                    locationName: "neq"
                                },
                                prefix: {
                                    locationName: "prefix"
                                }
                            }
                        }
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortCriteria: {
                        locationName: "sortCriteria",
                        type: "structure",
                        members: {
                            attributeName: {
                                locationName: "attributeName"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    buckets: {
                        locationName: "buckets",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                allowsUnencryptedObjectUploads: {
                                    locationName: "allowsUnencryptedObjectUploads"
                                },
                                bucketArn: {
                                    locationName: "bucketArn"
                                },
                                bucketCreatedAt: {
                                    shape: "S9",
                                    locationName: "bucketCreatedAt"
                                },
                                bucketName: {
                                    locationName: "bucketName"
                                },
                                classifiableObjectCount: {
                                    locationName: "classifiableObjectCount",
                                    type: "long"
                                },
                                classifiableSizeInBytes: {
                                    locationName: "classifiableSizeInBytes",
                                    type: "long"
                                },
                                jobDetails: {
                                    shape: "S2d",
                                    locationName: "jobDetails"
                                },
                                lastUpdated: {
                                    shape: "S9",
                                    locationName: "lastUpdated"
                                },
                                objectCount: {
                                    locationName: "objectCount",
                                    type: "long"
                                },
                                objectCountByEncryptionType: {
                                    shape: "S2g",
                                    locationName: "objectCountByEncryptionType"
                                },
                                publicAccess: {
                                    shape: "S2h",
                                    locationName: "publicAccess"
                                },
                                region: {
                                    locationName: "region"
                                },
                                replicationDetails: {
                                    locationName: "replicationDetails",
                                    type: "structure",
                                    members: {
                                        replicated: {
                                            locationName: "replicated",
                                            type: "boolean"
                                        },
                                        replicatedExternally: {
                                            locationName: "replicatedExternally",
                                            type: "boolean"
                                        },
                                        replicationAccounts: {
                                            shape: "S5",
                                            locationName: "replicationAccounts"
                                        }
                                    }
                                },
                                serverSideEncryption: {
                                    locationName: "serverSideEncryption",
                                    type: "structure",
                                    members: {
                                        kmsMasterKeyId: {
                                            locationName: "kmsMasterKeyId"
                                        },
                                        type: {
                                            locationName: "type"
                                        }
                                    }
                                },
                                sharedAccess: {
                                    locationName: "sharedAccess"
                                },
                                sizeInBytes: {
                                    locationName: "sizeInBytes",
                                    type: "long"
                                },
                                sizeInBytesCompressed: {
                                    locationName: "sizeInBytesCompressed",
                                    type: "long"
                                },
                                tags: {
                                    locationName: "tags",
                                    type: "list",
                                    member: {
                                        shape: "S2u"
                                    }
                                },
                                unclassifiableObjectCount: {
                                    shape: "S2v",
                                    locationName: "unclassifiableObjectCount"
                                },
                                unclassifiableObjectSizeInBytes: {
                                    shape: "S2v",
                                    locationName: "unclassifiableObjectSizeInBytes"
                                },
                                versioning: {
                                    locationName: "versioning",
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeClassificationJob: {
            http: {
                method: "GET",
                requestUri: "/jobs/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                },
                required: [ "jobId" ]
            },
            output: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    createdAt: {
                        shape: "S9",
                        locationName: "createdAt"
                    },
                    customDataIdentifierIds: {
                        shape: "S5",
                        locationName: "customDataIdentifierIds"
                    },
                    description: {
                        locationName: "description"
                    },
                    initialRun: {
                        locationName: "initialRun",
                        type: "boolean"
                    },
                    jobArn: {
                        locationName: "jobArn"
                    },
                    jobId: {
                        locationName: "jobId"
                    },
                    jobStatus: {
                        locationName: "jobStatus"
                    },
                    jobType: {
                        locationName: "jobType"
                    },
                    lastRunErrorStatus: {
                        shape: "S2z",
                        locationName: "lastRunErrorStatus"
                    },
                    lastRunTime: {
                        shape: "S9",
                        locationName: "lastRunTime"
                    },
                    managedDataIdentifierIds: {
                        shape: "S5",
                        locationName: "managedDataIdentifierIds"
                    },
                    managedDataIdentifierSelector: {
                        locationName: "managedDataIdentifierSelector"
                    },
                    name: {
                        locationName: "name"
                    },
                    s3JobDefinition: {
                        shape: "Se",
                        locationName: "s3JobDefinition"
                    },
                    samplingPercentage: {
                        locationName: "samplingPercentage",
                        type: "integer"
                    },
                    scheduleFrequency: {
                        shape: "S12",
                        locationName: "scheduleFrequency"
                    },
                    statistics: {
                        locationName: "statistics",
                        type: "structure",
                        members: {
                            approximateNumberOfObjectsToProcess: {
                                locationName: "approximateNumberOfObjectsToProcess",
                                type: "double"
                            },
                            numberOfRuns: {
                                locationName: "numberOfRuns",
                                type: "double"
                            }
                        }
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    },
                    userPausedDetails: {
                        shape: "S33",
                        locationName: "userPausedDetails"
                    }
                }
            }
        },
        DescribeOrganizationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/admin/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    autoEnable: {
                        locationName: "autoEnable",
                        type: "boolean"
                    },
                    maxAccountLimitReached: {
                        locationName: "maxAccountLimitReached",
                        type: "boolean"
                    }
                }
            }
        },
        DisableMacie: {
            http: {
                method: "DELETE",
                requestUri: "/macie",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableOrganizationAdminAccount: {
            http: {
                method: "DELETE",
                requestUri: "/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    adminAccountId: {
                        location: "querystring",
                        locationName: "adminAccountId"
                    }
                },
                required: [ "adminAccountId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFromAdministratorAccount: {
            http: {
                requestUri: "/administrator/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFromMasterAccount: {
            http: {
                requestUri: "/master/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateMember: {
            http: {
                requestUri: "/members/disassociate/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableMacie: {
            http: {
                requestUri: "/macie",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    findingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    status: {
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableOrganizationAdminAccount: {
            http: {
                requestUri: "/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    adminAccountId: {
                        locationName: "adminAccountId"
                    },
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    }
                },
                required: [ "adminAccountId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAdministratorAccount: {
            http: {
                method: "GET",
                requestUri: "/administrator",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    administrator: {
                        shape: "S3o",
                        locationName: "administrator"
                    }
                }
            }
        },
        GetBucketStatistics: {
            http: {
                requestUri: "/datasources/s3/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountId: {
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    bucketCount: {
                        locationName: "bucketCount",
                        type: "long"
                    },
                    bucketCountByEffectivePermission: {
                        locationName: "bucketCountByEffectivePermission",
                        type: "structure",
                        members: {
                            publiclyAccessible: {
                                locationName: "publiclyAccessible",
                                type: "long"
                            },
                            publiclyReadable: {
                                locationName: "publiclyReadable",
                                type: "long"
                            },
                            publiclyWritable: {
                                locationName: "publiclyWritable",
                                type: "long"
                            },
                            unknown: {
                                locationName: "unknown",
                                type: "long"
                            }
                        }
                    },
                    bucketCountByEncryptionType: {
                        locationName: "bucketCountByEncryptionType",
                        type: "structure",
                        members: {
                            kmsManaged: {
                                locationName: "kmsManaged",
                                type: "long"
                            },
                            s3Managed: {
                                locationName: "s3Managed",
                                type: "long"
                            },
                            unencrypted: {
                                locationName: "unencrypted",
                                type: "long"
                            },
                            unknown: {
                                locationName: "unknown",
                                type: "long"
                            }
                        }
                    },
                    bucketCountByObjectEncryptionRequirement: {
                        locationName: "bucketCountByObjectEncryptionRequirement",
                        type: "structure",
                        members: {
                            allowsUnencryptedObjectUploads: {
                                locationName: "allowsUnencryptedObjectUploads",
                                type: "long"
                            },
                            deniesUnencryptedObjectUploads: {
                                locationName: "deniesUnencryptedObjectUploads",
                                type: "long"
                            },
                            unknown: {
                                locationName: "unknown",
                                type: "long"
                            }
                        }
                    },
                    bucketCountBySharedAccessType: {
                        locationName: "bucketCountBySharedAccessType",
                        type: "structure",
                        members: {
                            external: {
                                locationName: "external",
                                type: "long"
                            },
                            internal: {
                                locationName: "internal",
                                type: "long"
                            },
                            notShared: {
                                locationName: "notShared",
                                type: "long"
                            },
                            unknown: {
                                locationName: "unknown",
                                type: "long"
                            }
                        }
                    },
                    classifiableObjectCount: {
                        locationName: "classifiableObjectCount",
                        type: "long"
                    },
                    classifiableSizeInBytes: {
                        locationName: "classifiableSizeInBytes",
                        type: "long"
                    },
                    lastUpdated: {
                        shape: "S9",
                        locationName: "lastUpdated"
                    },
                    objectCount: {
                        locationName: "objectCount",
                        type: "long"
                    },
                    sizeInBytes: {
                        locationName: "sizeInBytes",
                        type: "long"
                    },
                    sizeInBytesCompressed: {
                        locationName: "sizeInBytesCompressed",
                        type: "long"
                    },
                    unclassifiableObjectCount: {
                        shape: "S2v",
                        locationName: "unclassifiableObjectCount"
                    },
                    unclassifiableObjectSizeInBytes: {
                        shape: "S2v",
                        locationName: "unclassifiableObjectSizeInBytes"
                    }
                }
            }
        },
        GetClassificationExportConfiguration: {
            http: {
                method: "GET",
                requestUri: "/classification-export-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    configuration: {
                        shape: "S3y",
                        locationName: "configuration"
                    }
                }
            }
        },
        GetCustomDataIdentifier: {
            http: {
                method: "GET",
                requestUri: "/custom-data-identifiers/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    },
                    createdAt: {
                        shape: "S9",
                        locationName: "createdAt"
                    },
                    deleted: {
                        locationName: "deleted",
                        type: "boolean"
                    },
                    description: {
                        locationName: "description"
                    },
                    id: {
                        locationName: "id"
                    },
                    ignoreWords: {
                        shape: "S5",
                        locationName: "ignoreWords"
                    },
                    keywords: {
                        shape: "S5",
                        locationName: "keywords"
                    },
                    maximumMatchDistance: {
                        locationName: "maximumMatchDistance",
                        type: "integer"
                    },
                    name: {
                        locationName: "name"
                    },
                    regex: {
                        locationName: "regex"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                }
            }
        },
        GetFindingStatistics: {
            http: {
                requestUri: "/findings/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingCriteria: {
                        shape: "S1d",
                        locationName: "findingCriteria"
                    },
                    groupBy: {
                        locationName: "groupBy"
                    },
                    size: {
                        locationName: "size",
                        type: "integer"
                    },
                    sortCriteria: {
                        locationName: "sortCriteria",
                        type: "structure",
                        members: {
                            attributeName: {
                                locationName: "attributeName"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    }
                },
                required: [ "groupBy" ]
            },
            output: {
                type: "structure",
                members: {
                    countsByGroup: {
                        locationName: "countsByGroup",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                count: {
                                    locationName: "count",
                                    type: "long"
                                },
                                groupKey: {
                                    locationName: "groupKey"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetFindings: {
            http: {
                requestUri: "/findings/describe",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingIds: {
                        shape: "S5",
                        locationName: "findingIds"
                    },
                    sortCriteria: {
                        shape: "S4a",
                        locationName: "sortCriteria"
                    }
                },
                required: [ "findingIds" ]
            },
            output: {
                type: "structure",
                members: {
                    findings: {
                        locationName: "findings",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                archived: {
                                    locationName: "archived",
                                    type: "boolean"
                                },
                                category: {
                                    locationName: "category"
                                },
                                classificationDetails: {
                                    locationName: "classificationDetails",
                                    type: "structure",
                                    members: {
                                        detailedResultsLocation: {
                                            locationName: "detailedResultsLocation"
                                        },
                                        jobArn: {
                                            locationName: "jobArn"
                                        },
                                        jobId: {
                                            locationName: "jobId"
                                        },
                                        result: {
                                            locationName: "result",
                                            type: "structure",
                                            members: {
                                                additionalOccurrences: {
                                                    locationName: "additionalOccurrences",
                                                    type: "boolean"
                                                },
                                                customDataIdentifiers: {
                                                    locationName: "customDataIdentifiers",
                                                    type: "structure",
                                                    members: {
                                                        detections: {
                                                            locationName: "detections",
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    arn: {
                                                                        locationName: "arn"
                                                                    },
                                                                    count: {
                                                                        locationName: "count",
                                                                        type: "long"
                                                                    },
                                                                    name: {
                                                                        locationName: "name"
                                                                    },
                                                                    occurrences: {
                                                                        shape: "S4k",
                                                                        locationName: "occurrences"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        totalCount: {
                                                            locationName: "totalCount",
                                                            type: "long"
                                                        }
                                                    }
                                                },
                                                mimeType: {
                                                    locationName: "mimeType"
                                                },
                                                sensitiveData: {
                                                    locationName: "sensitiveData",
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            category: {
                                                                locationName: "category"
                                                            },
                                                            detections: {
                                                                locationName: "detections",
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    members: {
                                                                        count: {
                                                                            locationName: "count",
                                                                            type: "long"
                                                                        },
                                                                        occurrences: {
                                                                            shape: "S4k",
                                                                            locationName: "occurrences"
                                                                        },
                                                                        type: {
                                                                            locationName: "type"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            totalCount: {
                                                                locationName: "totalCount",
                                                                type: "long"
                                                            }
                                                        }
                                                    }
                                                },
                                                sizeClassified: {
                                                    locationName: "sizeClassified",
                                                    type: "long"
                                                },
                                                status: {
                                                    locationName: "status",
                                                    type: "structure",
                                                    members: {
                                                        code: {
                                                            locationName: "code"
                                                        },
                                                        reason: {
                                                            locationName: "reason"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                count: {
                                    locationName: "count",
                                    type: "long"
                                },
                                createdAt: {
                                    shape: "S9",
                                    locationName: "createdAt"
                                },
                                description: {
                                    locationName: "description"
                                },
                                id: {
                                    locationName: "id"
                                },
                                partition: {
                                    locationName: "partition"
                                },
                                policyDetails: {
                                    locationName: "policyDetails",
                                    type: "structure",
                                    members: {
                                        action: {
                                            locationName: "action",
                                            type: "structure",
                                            members: {
                                                actionType: {
                                                    locationName: "actionType"
                                                },
                                                apiCallDetails: {
                                                    locationName: "apiCallDetails",
                                                    type: "structure",
                                                    members: {
                                                        api: {
                                                            locationName: "api"
                                                        },
                                                        apiServiceName: {
                                                            locationName: "apiServiceName"
                                                        },
                                                        firstSeen: {
                                                            shape: "S9",
                                                            locationName: "firstSeen"
                                                        },
                                                        lastSeen: {
                                                            shape: "S9",
                                                            locationName: "lastSeen"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        actor: {
                                            locationName: "actor",
                                            type: "structure",
                                            members: {
                                                domainDetails: {
                                                    locationName: "domainDetails",
                                                    type: "structure",
                                                    members: {
                                                        domainName: {
                                                            locationName: "domainName"
                                                        }
                                                    }
                                                },
                                                ipAddressDetails: {
                                                    locationName: "ipAddressDetails",
                                                    type: "structure",
                                                    members: {
                                                        ipAddressV4: {
                                                            locationName: "ipAddressV4"
                                                        },
                                                        ipCity: {
                                                            locationName: "ipCity",
                                                            type: "structure",
                                                            members: {
                                                                name: {
                                                                    locationName: "name"
                                                                }
                                                            }
                                                        },
                                                        ipCountry: {
                                                            locationName: "ipCountry",
                                                            type: "structure",
                                                            members: {
                                                                code: {
                                                                    locationName: "code"
                                                                },
                                                                name: {
                                                                    locationName: "name"
                                                                }
                                                            }
                                                        },
                                                        ipGeoLocation: {
                                                            locationName: "ipGeoLocation",
                                                            type: "structure",
                                                            members: {
                                                                lat: {
                                                                    locationName: "lat",
                                                                    type: "double"
                                                                },
                                                                lon: {
                                                                    locationName: "lon",
                                                                    type: "double"
                                                                }
                                                            }
                                                        },
                                                        ipOwner: {
                                                            locationName: "ipOwner",
                                                            type: "structure",
                                                            members: {
                                                                asn: {
                                                                    locationName: "asn"
                                                                },
                                                                asnOrg: {
                                                                    locationName: "asnOrg"
                                                                },
                                                                isp: {
                                                                    locationName: "isp"
                                                                },
                                                                org: {
                                                                    locationName: "org"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                userIdentity: {
                                                    locationName: "userIdentity",
                                                    type: "structure",
                                                    members: {
                                                        assumedRole: {
                                                            locationName: "assumedRole",
                                                            type: "structure",
                                                            members: {
                                                                accessKeyId: {
                                                                    locationName: "accessKeyId"
                                                                },
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                arn: {
                                                                    locationName: "arn"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                },
                                                                sessionContext: {
                                                                    shape: "S5c",
                                                                    locationName: "sessionContext"
                                                                }
                                                            }
                                                        },
                                                        awsAccount: {
                                                            locationName: "awsAccount",
                                                            type: "structure",
                                                            members: {
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                }
                                                            }
                                                        },
                                                        awsService: {
                                                            locationName: "awsService",
                                                            type: "structure",
                                                            members: {
                                                                invokedBy: {
                                                                    locationName: "invokedBy"
                                                                }
                                                            }
                                                        },
                                                        federatedUser: {
                                                            locationName: "federatedUser",
                                                            type: "structure",
                                                            members: {
                                                                accessKeyId: {
                                                                    locationName: "accessKeyId"
                                                                },
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                arn: {
                                                                    locationName: "arn"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                },
                                                                sessionContext: {
                                                                    shape: "S5c",
                                                                    locationName: "sessionContext"
                                                                }
                                                            }
                                                        },
                                                        iamUser: {
                                                            locationName: "iamUser",
                                                            type: "structure",
                                                            members: {
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                arn: {
                                                                    locationName: "arn"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                },
                                                                userName: {
                                                                    locationName: "userName"
                                                                }
                                                            }
                                                        },
                                                        root: {
                                                            locationName: "root",
                                                            type: "structure",
                                                            members: {
                                                                accountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                arn: {
                                                                    locationName: "arn"
                                                                },
                                                                principalId: {
                                                                    locationName: "principalId"
                                                                }
                                                            }
                                                        },
                                                        type: {
                                                            locationName: "type"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                region: {
                                    locationName: "region"
                                },
                                resourcesAffected: {
                                    locationName: "resourcesAffected",
                                    type: "structure",
                                    members: {
                                        s3Bucket: {
                                            locationName: "s3Bucket",
                                            type: "structure",
                                            members: {
                                                allowsUnencryptedObjectUploads: {
                                                    locationName: "allowsUnencryptedObjectUploads"
                                                },
                                                arn: {
                                                    locationName: "arn"
                                                },
                                                createdAt: {
                                                    shape: "S9",
                                                    locationName: "createdAt"
                                                },
                                                defaultServerSideEncryption: {
                                                    shape: "S5n",
                                                    locationName: "defaultServerSideEncryption"
                                                },
                                                name: {
                                                    locationName: "name"
                                                },
                                                owner: {
                                                    locationName: "owner",
                                                    type: "structure",
                                                    members: {
                                                        displayName: {
                                                            locationName: "displayName"
                                                        },
                                                        id: {
                                                            locationName: "id"
                                                        }
                                                    }
                                                },
                                                publicAccess: {
                                                    shape: "S2h",
                                                    locationName: "publicAccess"
                                                },
                                                tags: {
                                                    shape: "S5q",
                                                    locationName: "tags"
                                                }
                                            }
                                        },
                                        s3Object: {
                                            locationName: "s3Object",
                                            type: "structure",
                                            members: {
                                                bucketArn: {
                                                    locationName: "bucketArn"
                                                },
                                                eTag: {
                                                    locationName: "eTag"
                                                },
                                                extension: {
                                                    locationName: "extension"
                                                },
                                                key: {
                                                    locationName: "key"
                                                },
                                                lastModified: {
                                                    shape: "S9",
                                                    locationName: "lastModified"
                                                },
                                                path: {
                                                    locationName: "path"
                                                },
                                                publicAccess: {
                                                    locationName: "publicAccess",
                                                    type: "boolean"
                                                },
                                                serverSideEncryption: {
                                                    shape: "S5n",
                                                    locationName: "serverSideEncryption"
                                                },
                                                size: {
                                                    locationName: "size",
                                                    type: "long"
                                                },
                                                storageClass: {
                                                    locationName: "storageClass"
                                                },
                                                tags: {
                                                    shape: "S5q",
                                                    locationName: "tags"
                                                },
                                                versionId: {
                                                    locationName: "versionId"
                                                }
                                            }
                                        }
                                    }
                                },
                                sample: {
                                    locationName: "sample",
                                    type: "boolean"
                                },
                                schemaVersion: {
                                    locationName: "schemaVersion"
                                },
                                severity: {
                                    locationName: "severity",
                                    type: "structure",
                                    members: {
                                        description: {
                                            locationName: "description"
                                        },
                                        score: {
                                            locationName: "score",
                                            type: "long"
                                        }
                                    }
                                },
                                title: {
                                    locationName: "title"
                                },
                                type: {
                                    locationName: "type"
                                },
                                updatedAt: {
                                    shape: "S9",
                                    locationName: "updatedAt"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetFindingsFilter: {
            http: {
                method: "GET",
                requestUri: "/findingsfilters/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    action: {
                        locationName: "action"
                    },
                    arn: {
                        locationName: "arn"
                    },
                    description: {
                        locationName: "description"
                    },
                    findingCriteria: {
                        shape: "S1d",
                        locationName: "findingCriteria"
                    },
                    id: {
                        locationName: "id"
                    },
                    name: {
                        locationName: "name"
                    },
                    position: {
                        locationName: "position",
                        type: "integer"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                }
            }
        },
        GetFindingsPublicationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/findings-publication-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    securityHubConfiguration: {
                        shape: "S5z",
                        locationName: "securityHubConfiguration"
                    }
                }
            }
        },
        GetInvitationsCount: {
            http: {
                method: "GET",
                requestUri: "/invitations/count",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    invitationsCount: {
                        locationName: "invitationsCount",
                        type: "long"
                    }
                }
            }
        },
        GetMacieSession: {
            http: {
                method: "GET",
                requestUri: "/macie",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    createdAt: {
                        shape: "S9",
                        locationName: "createdAt"
                    },
                    findingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    serviceRole: {
                        locationName: "serviceRole"
                    },
                    status: {
                        locationName: "status"
                    },
                    updatedAt: {
                        shape: "S9",
                        locationName: "updatedAt"
                    }
                }
            }
        },
        GetMasterAccount: {
            http: {
                method: "GET",
                requestUri: "/master",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    master: {
                        shape: "S3o",
                        locationName: "master"
                    }
                }
            }
        },
        GetMember: {
            http: {
                method: "GET",
                requestUri: "/members/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    accountId: {
                        locationName: "accountId"
                    },
                    administratorAccountId: {
                        locationName: "administratorAccountId"
                    },
                    arn: {
                        locationName: "arn"
                    },
                    email: {
                        locationName: "email"
                    },
                    invitedAt: {
                        shape: "S9",
                        locationName: "invitedAt"
                    },
                    masterAccountId: {
                        locationName: "masterAccountId"
                    },
                    relationshipStatus: {
                        locationName: "relationshipStatus"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    },
                    updatedAt: {
                        shape: "S9",
                        locationName: "updatedAt"
                    }
                }
            }
        },
        GetUsageStatistics: {
            http: {
                requestUri: "/usage/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterBy: {
                        locationName: "filterBy",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                comparator: {
                                    locationName: "comparator"
                                },
                                key: {
                                    locationName: "key"
                                },
                                values: {
                                    shape: "S5",
                                    locationName: "values"
                                }
                            }
                        }
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortBy: {
                        locationName: "sortBy",
                        type: "structure",
                        members: {
                            key: {
                                locationName: "key"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    },
                    timeRange: {
                        locationName: "timeRange"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {
                        locationName: "nextToken"
                    },
                    records: {
                        locationName: "records",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                freeTrialStartDate: {
                                    shape: "S9",
                                    locationName: "freeTrialStartDate"
                                },
                                usage: {
                                    locationName: "usage",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            currency: {
                                                locationName: "currency"
                                            },
                                            estimatedCost: {
                                                locationName: "estimatedCost"
                                            },
                                            serviceLimit: {
                                                locationName: "serviceLimit",
                                                type: "structure",
                                                members: {
                                                    isServiceLimited: {
                                                        locationName: "isServiceLimited",
                                                        type: "boolean"
                                                    },
                                                    unit: {
                                                        locationName: "unit"
                                                    },
                                                    value: {
                                                        locationName: "value",
                                                        type: "long"
                                                    }
                                                }
                                            },
                                            type: {
                                                locationName: "type"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    timeRange: {
                        locationName: "timeRange"
                    }
                }
            }
        },
        GetUsageTotals: {
            http: {
                method: "GET",
                requestUri: "/usage",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    timeRange: {
                        location: "querystring",
                        locationName: "timeRange"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    timeRange: {
                        locationName: "timeRange"
                    },
                    usageTotals: {
                        locationName: "usageTotals",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                currency: {
                                    locationName: "currency"
                                },
                                estimatedCost: {
                                    locationName: "estimatedCost"
                                },
                                type: {
                                    locationName: "type"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListClassificationJobs: {
            http: {
                requestUri: "/jobs/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterCriteria: {
                        locationName: "filterCriteria",
                        type: "structure",
                        members: {
                            excludes: {
                                shape: "S6v",
                                locationName: "excludes"
                            },
                            includes: {
                                shape: "S6v",
                                locationName: "includes"
                            }
                        }
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortCriteria: {
                        locationName: "sortCriteria",
                        type: "structure",
                        members: {
                            attributeName: {
                                locationName: "attributeName"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                bucketDefinitions: {
                                    shape: "Sf",
                                    locationName: "bucketDefinitions"
                                },
                                createdAt: {
                                    shape: "S9",
                                    locationName: "createdAt"
                                },
                                jobId: {
                                    locationName: "jobId"
                                },
                                jobStatus: {
                                    locationName: "jobStatus"
                                },
                                jobType: {
                                    locationName: "jobType"
                                },
                                lastRunErrorStatus: {
                                    shape: "S2z",
                                    locationName: "lastRunErrorStatus"
                                },
                                name: {
                                    locationName: "name"
                                },
                                userPausedDetails: {
                                    shape: "S33",
                                    locationName: "userPausedDetails"
                                },
                                bucketCriteria: {
                                    shape: "Ss",
                                    locationName: "bucketCriteria"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListCustomDataIdentifiers: {
            http: {
                requestUri: "/custom-data-identifiers/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {
                                    locationName: "arn"
                                },
                                createdAt: {
                                    shape: "S9",
                                    locationName: "createdAt"
                                },
                                description: {
                                    locationName: "description"
                                },
                                id: {
                                    locationName: "id"
                                },
                                name: {
                                    locationName: "name"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListFindings: {
            http: {
                requestUri: "/findings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingCriteria: {
                        shape: "S1d",
                        locationName: "findingCriteria"
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortCriteria: {
                        shape: "S4a",
                        locationName: "sortCriteria"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    findingIds: {
                        shape: "S5",
                        locationName: "findingIds"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListFindingsFilters: {
            http: {
                method: "GET",
                requestUri: "/findingsfilters",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    findingsFilterListItems: {
                        locationName: "findingsFilterListItems",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                action: {
                                    locationName: "action"
                                },
                                arn: {
                                    locationName: "arn"
                                },
                                id: {
                                    locationName: "id"
                                },
                                name: {
                                    locationName: "name"
                                },
                                tags: {
                                    shape: "S17",
                                    locationName: "tags"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListInvitations: {
            http: {
                method: "GET",
                requestUri: "/invitations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    invitations: {
                        locationName: "invitations",
                        type: "list",
                        member: {
                            shape: "S3o"
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListManagedDataIdentifiers: {
            http: {
                requestUri: "/managed-data-identifiers/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        locationName: "items",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                category: {
                                    locationName: "category"
                                },
                                id: {
                                    locationName: "id"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListMembers: {
            http: {
                method: "GET",
                requestUri: "/members",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    onlyAssociated: {
                        location: "querystring",
                        locationName: "onlyAssociated"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    members: {
                        locationName: "members",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                administratorAccountId: {
                                    locationName: "administratorAccountId"
                                },
                                arn: {
                                    locationName: "arn"
                                },
                                email: {
                                    locationName: "email"
                                },
                                invitedAt: {
                                    shape: "S9",
                                    locationName: "invitedAt"
                                },
                                masterAccountId: {
                                    locationName: "masterAccountId"
                                },
                                relationshipStatus: {
                                    locationName: "relationshipStatus"
                                },
                                tags: {
                                    shape: "S17",
                                    locationName: "tags"
                                },
                                updatedAt: {
                                    shape: "S9",
                                    locationName: "updatedAt"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListOrganizationAdminAccounts: {
            http: {
                method: "GET",
                requestUri: "/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    adminAccounts: {
                        locationName: "adminAccounts",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {
                                    locationName: "accountId"
                                },
                                status: {
                                    locationName: "status"
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                },
                required: [ "resourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                }
            }
        },
        PutClassificationExportConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/classification-export-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    configuration: {
                        shape: "S3y",
                        locationName: "configuration"
                    }
                },
                required: [ "configuration" ]
            },
            output: {
                type: "structure",
                members: {
                    configuration: {
                        shape: "S3y",
                        locationName: "configuration"
                    }
                }
            }
        },
        PutFindingsPublicationConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/findings-publication-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    },
                    securityHubConfiguration: {
                        shape: "S5z",
                        locationName: "securityHubConfiguration"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchResources: {
            http: {
                requestUri: "/datasources/search-resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    bucketCriteria: {
                        locationName: "bucketCriteria",
                        type: "structure",
                        members: {
                            excludes: {
                                shape: "S82",
                                locationName: "excludes"
                            },
                            includes: {
                                shape: "S82",
                                locationName: "includes"
                            }
                        }
                    },
                    maxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        locationName: "nextToken"
                    },
                    sortCriteria: {
                        locationName: "sortCriteria",
                        type: "structure",
                        members: {
                            attributeName: {
                                locationName: "attributeName"
                            },
                            orderBy: {
                                locationName: "orderBy"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    matchingResources: {
                        locationName: "matchingResources",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                matchingBucket: {
                                    locationName: "matchingBucket",
                                    type: "structure",
                                    members: {
                                        accountId: {
                                            locationName: "accountId"
                                        },
                                        bucketName: {
                                            locationName: "bucketName"
                                        },
                                        classifiableObjectCount: {
                                            locationName: "classifiableObjectCount",
                                            type: "long"
                                        },
                                        classifiableSizeInBytes: {
                                            locationName: "classifiableSizeInBytes",
                                            type: "long"
                                        },
                                        jobDetails: {
                                            shape: "S2d",
                                            locationName: "jobDetails"
                                        },
                                        objectCount: {
                                            locationName: "objectCount",
                                            type: "long"
                                        },
                                        objectCountByEncryptionType: {
                                            shape: "S2g",
                                            locationName: "objectCountByEncryptionType"
                                        },
                                        sizeInBytes: {
                                            locationName: "sizeInBytes",
                                            type: "long"
                                        },
                                        sizeInBytesCompressed: {
                                            locationName: "sizeInBytesCompressed",
                                            type: "long"
                                        },
                                        unclassifiableObjectCount: {
                                            shape: "S2v",
                                            locationName: "unclassifiableObjectCount"
                                        },
                                        unclassifiableObjectSizeInBytes: {
                                            shape: "S2v",
                                            locationName: "unclassifiableObjectSizeInBytes"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S17",
                        locationName: "tags"
                    }
                },
                required: [ "resourceArn", "tags" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TestCustomDataIdentifier: {
            http: {
                requestUri: "/custom-data-identifiers/test",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ignoreWords: {
                        shape: "S5",
                        locationName: "ignoreWords"
                    },
                    keywords: {
                        shape: "S5",
                        locationName: "keywords"
                    },
                    maximumMatchDistance: {
                        locationName: "maximumMatchDistance",
                        type: "integer"
                    },
                    regex: {
                        locationName: "regex"
                    },
                    sampleText: {
                        locationName: "sampleText"
                    }
                },
                required: [ "regex", "sampleText" ]
            },
            output: {
                type: "structure",
                members: {
                    matchCount: {
                        locationName: "matchCount",
                        type: "integer"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        shape: "S5",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "tagKeys", "resourceArn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateClassificationJob: {
            http: {
                method: "PATCH",
                requestUri: "/jobs/{jobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    jobStatus: {
                        locationName: "jobStatus"
                    }
                },
                required: [ "jobId", "jobStatus" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFindingsFilter: {
            http: {
                method: "PATCH",
                requestUri: "/findingsfilters/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    action: {
                        locationName: "action"
                    },
                    description: {
                        locationName: "description"
                    },
                    findingCriteria: {
                        shape: "S1d",
                        locationName: "findingCriteria"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {
                        locationName: "name"
                    },
                    position: {
                        locationName: "position",
                        type: "integer"
                    },
                    clientToken: {
                        locationName: "clientToken",
                        idempotencyToken: true
                    }
                },
                required: [ "id" ]
            },
            output: {
                type: "structure",
                members: {
                    arn: {
                        locationName: "arn"
                    },
                    id: {
                        locationName: "id"
                    }
                }
            }
        },
        UpdateMacieSession: {
            http: {
                method: "PATCH",
                requestUri: "/macie",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    findingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    status: {
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMemberSession: {
            http: {
                method: "PATCH",
                requestUri: "/macie/members/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    status: {
                        locationName: "status"
                    }
                },
                required: [ "id", "status" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateOrganizationConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/admin/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    autoEnable: {
                        locationName: "autoEnable",
                        type: "boolean"
                    }
                },
                required: [ "autoEnable" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {}
        },
        S9: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Se: {
            type: "structure",
            members: {
                bucketDefinitions: {
                    shape: "Sf",
                    locationName: "bucketDefinitions"
                },
                scoping: {
                    locationName: "scoping",
                    type: "structure",
                    members: {
                        excludes: {
                            shape: "Si",
                            locationName: "excludes"
                        },
                        includes: {
                            shape: "Si",
                            locationName: "includes"
                        }
                    }
                },
                bucketCriteria: {
                    shape: "Ss",
                    locationName: "bucketCriteria"
                }
            }
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    accountId: {
                        locationName: "accountId"
                    },
                    buckets: {
                        shape: "S5",
                        locationName: "buckets"
                    }
                },
                required: [ "accountId", "buckets" ]
            }
        },
        Si: {
            type: "structure",
            members: {
                and: {
                    locationName: "and",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            simpleScopeTerm: {
                                locationName: "simpleScopeTerm",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    key: {
                                        locationName: "key"
                                    },
                                    values: {
                                        shape: "S5",
                                        locationName: "values"
                                    }
                                }
                            },
                            tagScopeTerm: {
                                locationName: "tagScopeTerm",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    key: {
                                        locationName: "key"
                                    },
                                    tagValues: {
                                        locationName: "tagValues",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                key: {
                                                    locationName: "key"
                                                },
                                                value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    },
                                    target: {
                                        locationName: "target"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Ss: {
            type: "structure",
            members: {
                excludes: {
                    shape: "St",
                    locationName: "excludes"
                },
                includes: {
                    shape: "St",
                    locationName: "includes"
                }
            }
        },
        St: {
            type: "structure",
            members: {
                and: {
                    locationName: "and",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            simpleCriterion: {
                                locationName: "simpleCriterion",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    key: {
                                        locationName: "key"
                                    },
                                    values: {
                                        shape: "S5",
                                        locationName: "values"
                                    }
                                }
                            },
                            tagCriterion: {
                                locationName: "tagCriterion",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    tagValues: {
                                        locationName: "tagValues",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                key: {
                                                    locationName: "key"
                                                },
                                                value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                dailySchedule: {
                    locationName: "dailySchedule",
                    type: "structure",
                    members: {}
                },
                monthlySchedule: {
                    locationName: "monthlySchedule",
                    type: "structure",
                    members: {
                        dayOfMonth: {
                            locationName: "dayOfMonth",
                            type: "integer"
                        }
                    }
                },
                weeklySchedule: {
                    locationName: "weeklySchedule",
                    type: "structure",
                    members: {
                        dayOfWeek: {
                            locationName: "dayOfWeek"
                        }
                    }
                }
            }
        },
        S17: {
            type: "map",
            key: {},
            value: {}
        },
        S1d: {
            type: "structure",
            members: {
                criterion: {
                    locationName: "criterion",
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            eq: {
                                shape: "S5",
                                locationName: "eq"
                            },
                            eqExactMatch: {
                                shape: "S5",
                                locationName: "eqExactMatch"
                            },
                            gt: {
                                locationName: "gt",
                                type: "long"
                            },
                            gte: {
                                locationName: "gte",
                                type: "long"
                            },
                            lt: {
                                locationName: "lt",
                                type: "long"
                            },
                            lte: {
                                locationName: "lte",
                                type: "long"
                            },
                            neq: {
                                shape: "S5",
                                locationName: "neq"
                            }
                        }
                    }
                }
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    accountId: {
                        locationName: "accountId"
                    },
                    errorCode: {
                        locationName: "errorCode"
                    },
                    errorMessage: {
                        locationName: "errorMessage"
                    }
                }
            }
        },
        S2d: {
            type: "structure",
            members: {
                isDefinedInJob: {
                    locationName: "isDefinedInJob"
                },
                isMonitoredByJob: {
                    locationName: "isMonitoredByJob"
                },
                lastJobId: {
                    locationName: "lastJobId"
                },
                lastJobRunTime: {
                    shape: "S9",
                    locationName: "lastJobRunTime"
                }
            }
        },
        S2g: {
            type: "structure",
            members: {
                customerManaged: {
                    locationName: "customerManaged",
                    type: "long"
                },
                kmsManaged: {
                    locationName: "kmsManaged",
                    type: "long"
                },
                s3Managed: {
                    locationName: "s3Managed",
                    type: "long"
                },
                unencrypted: {
                    locationName: "unencrypted",
                    type: "long"
                },
                unknown: {
                    locationName: "unknown",
                    type: "long"
                }
            }
        },
        S2h: {
            type: "structure",
            members: {
                effectivePermission: {
                    locationName: "effectivePermission"
                },
                permissionConfiguration: {
                    locationName: "permissionConfiguration",
                    type: "structure",
                    members: {
                        accountLevelPermissions: {
                            locationName: "accountLevelPermissions",
                            type: "structure",
                            members: {
                                blockPublicAccess: {
                                    shape: "S2l",
                                    locationName: "blockPublicAccess"
                                }
                            }
                        },
                        bucketLevelPermissions: {
                            locationName: "bucketLevelPermissions",
                            type: "structure",
                            members: {
                                accessControlList: {
                                    locationName: "accessControlList",
                                    type: "structure",
                                    members: {
                                        allowsPublicReadAccess: {
                                            locationName: "allowsPublicReadAccess",
                                            type: "boolean"
                                        },
                                        allowsPublicWriteAccess: {
                                            locationName: "allowsPublicWriteAccess",
                                            type: "boolean"
                                        }
                                    }
                                },
                                blockPublicAccess: {
                                    shape: "S2l",
                                    locationName: "blockPublicAccess"
                                },
                                bucketPolicy: {
                                    locationName: "bucketPolicy",
                                    type: "structure",
                                    members: {
                                        allowsPublicReadAccess: {
                                            locationName: "allowsPublicReadAccess",
                                            type: "boolean"
                                        },
                                        allowsPublicWriteAccess: {
                                            locationName: "allowsPublicWriteAccess",
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S2l: {
            type: "structure",
            members: {
                blockPublicAcls: {
                    locationName: "blockPublicAcls",
                    type: "boolean"
                },
                blockPublicPolicy: {
                    locationName: "blockPublicPolicy",
                    type: "boolean"
                },
                ignorePublicAcls: {
                    locationName: "ignorePublicAcls",
                    type: "boolean"
                },
                restrictPublicBuckets: {
                    locationName: "restrictPublicBuckets",
                    type: "boolean"
                }
            }
        },
        S2u: {
            type: "structure",
            members: {
                key: {
                    locationName: "key"
                },
                value: {
                    locationName: "value"
                }
            }
        },
        S2v: {
            type: "structure",
            members: {
                fileType: {
                    locationName: "fileType",
                    type: "long"
                },
                storageClass: {
                    locationName: "storageClass",
                    type: "long"
                },
                total: {
                    locationName: "total",
                    type: "long"
                }
            }
        },
        S2z: {
            type: "structure",
            members: {
                code: {
                    locationName: "code"
                }
            }
        },
        S33: {
            type: "structure",
            members: {
                jobExpiresAt: {
                    shape: "S9",
                    locationName: "jobExpiresAt"
                },
                jobImminentExpirationHealthEventArn: {
                    locationName: "jobImminentExpirationHealthEventArn"
                },
                jobPausedAt: {
                    shape: "S9",
                    locationName: "jobPausedAt"
                }
            }
        },
        S3o: {
            type: "structure",
            members: {
                accountId: {
                    locationName: "accountId"
                },
                invitationId: {
                    locationName: "invitationId"
                },
                invitedAt: {
                    shape: "S9",
                    locationName: "invitedAt"
                },
                relationshipStatus: {
                    locationName: "relationshipStatus"
                }
            }
        },
        S3y: {
            type: "structure",
            members: {
                s3Destination: {
                    locationName: "s3Destination",
                    type: "structure",
                    members: {
                        bucketName: {
                            locationName: "bucketName"
                        },
                        keyPrefix: {
                            locationName: "keyPrefix"
                        },
                        kmsKeyArn: {
                            locationName: "kmsKeyArn"
                        }
                    },
                    required: [ "bucketName", "kmsKeyArn" ]
                }
            }
        },
        S4a: {
            type: "structure",
            members: {
                attributeName: {
                    locationName: "attributeName"
                },
                orderBy: {
                    locationName: "orderBy"
                }
            }
        },
        S4k: {
            type: "structure",
            members: {
                cells: {
                    locationName: "cells",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            cellReference: {
                                locationName: "cellReference"
                            },
                            column: {
                                locationName: "column",
                                type: "long"
                            },
                            columnName: {
                                locationName: "columnName"
                            },
                            row: {
                                locationName: "row",
                                type: "long"
                            }
                        }
                    }
                },
                lineRanges: {
                    shape: "S4n",
                    locationName: "lineRanges"
                },
                offsetRanges: {
                    shape: "S4n",
                    locationName: "offsetRanges"
                },
                pages: {
                    locationName: "pages",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            lineRange: {
                                shape: "S4o",
                                locationName: "lineRange"
                            },
                            offsetRange: {
                                shape: "S4o",
                                locationName: "offsetRange"
                            },
                            pageNumber: {
                                locationName: "pageNumber",
                                type: "long"
                            }
                        }
                    }
                },
                records: {
                    locationName: "records",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            jsonPath: {
                                locationName: "jsonPath"
                            },
                            recordIndex: {
                                locationName: "recordIndex",
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S4n: {
            type: "list",
            member: {
                shape: "S4o"
            }
        },
        S4o: {
            type: "structure",
            members: {
                end: {
                    locationName: "end",
                    type: "long"
                },
                start: {
                    locationName: "start",
                    type: "long"
                },
                startColumn: {
                    locationName: "startColumn",
                    type: "long"
                }
            }
        },
        S5c: {
            type: "structure",
            members: {
                attributes: {
                    locationName: "attributes",
                    type: "structure",
                    members: {
                        creationDate: {
                            shape: "S9",
                            locationName: "creationDate"
                        },
                        mfaAuthenticated: {
                            locationName: "mfaAuthenticated",
                            type: "boolean"
                        }
                    }
                },
                sessionIssuer: {
                    locationName: "sessionIssuer",
                    type: "structure",
                    members: {
                        accountId: {
                            locationName: "accountId"
                        },
                        arn: {
                            locationName: "arn"
                        },
                        principalId: {
                            locationName: "principalId"
                        },
                        type: {
                            locationName: "type"
                        },
                        userName: {
                            locationName: "userName"
                        }
                    }
                }
            }
        },
        S5n: {
            type: "structure",
            members: {
                encryptionType: {
                    locationName: "encryptionType"
                },
                kmsMasterKeyId: {
                    locationName: "kmsMasterKeyId"
                }
            }
        },
        S5q: {
            type: "list",
            member: {
                shape: "S2u"
            }
        },
        S5z: {
            type: "structure",
            members: {
                publishClassificationFindings: {
                    locationName: "publishClassificationFindings",
                    type: "boolean"
                },
                publishPolicyFindings: {
                    locationName: "publishPolicyFindings",
                    type: "boolean"
                }
            },
            required: [ "publishPolicyFindings", "publishClassificationFindings" ]
        },
        S6v: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    comparator: {
                        locationName: "comparator"
                    },
                    key: {
                        locationName: "key"
                    },
                    values: {
                        shape: "S5",
                        locationName: "values"
                    }
                }
            }
        },
        S82: {
            type: "structure",
            members: {
                and: {
                    locationName: "and",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            simpleCriterion: {
                                locationName: "simpleCriterion",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    key: {
                                        locationName: "key"
                                    },
                                    values: {
                                        shape: "S5",
                                        locationName: "values"
                                    }
                                }
                            },
                            tagCriterion: {
                                locationName: "tagCriterion",
                                type: "structure",
                                members: {
                                    comparator: {
                                        locationName: "comparator"
                                    },
                                    tagValues: {
                                        locationName: "tagValues",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                key: {
                                                    locationName: "key"
                                                },
                                                value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    paginators: {
        DescribeBuckets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "buckets"
        },
        GetUsageStatistics: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "records"
        },
        ListClassificationJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListCustomDataIdentifiers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListFindings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findingIds"
        },
        ListFindingsFilters: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findingsFilterListItems"
        },
        ListInvitations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "invitations"
        },
        ListMembers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "members"
        },
        ListOrganizationAdminAccounts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "adminAccounts"
        },
        SearchResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "matchingResources"
        }
    }
};

AWS.apiLoader.services["codeartifact"] = {};

AWS.CodeArtifact = AWS.Service.defineService("codeartifact", [ "2018-09-22" ]);

AWS.apiLoader.services["codeartifact"]["2018-09-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-09-22",
        endpointPrefix: "codeartifact",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "CodeArtifact",
        serviceId: "codeartifact",
        signatureVersion: "v4",
        signingName: "codeartifact",
        uid: "codeartifact-2018-09-22"
    },
    operations: {
        AssociateExternalConnection: {
            http: {
                requestUri: "/v1/repository/external-connection"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "externalConnection" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    externalConnection: {
                        location: "querystring",
                        locationName: "external-connection"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        CopyPackageVersions: {
            http: {
                requestUri: "/v1/package/versions/copy"
            },
            input: {
                type: "structure",
                required: [ "domain", "sourceRepository", "destinationRepository", "format", "package" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    sourceRepository: {
                        location: "querystring",
                        locationName: "source-repository"
                    },
                    destinationRepository: {
                        location: "querystring",
                        locationName: "destination-repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    versions: {
                        shape: "Sj"
                    },
                    versionRevisions: {
                        shape: "Sl"
                    },
                    allowOverwrite: {
                        type: "boolean"
                    },
                    includeFromUpstream: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulVersions: {
                        shape: "Sp"
                    },
                    failedVersions: {
                        shape: "St"
                    }
                }
            }
        },
        CreateDomain: {
            http: {
                requestUri: "/v1/domain"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    encryptionKey: {},
                    tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domain: {
                        shape: "S13"
                    }
                }
            }
        },
        CreateRepository: {
            http: {
                requestUri: "/v1/repository"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    description: {},
                    upstreams: {
                        shape: "S19"
                    },
                    tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        DeleteDomain: {
            http: {
                method: "DELETE",
                requestUri: "/v1/domain"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domain: {
                        shape: "S13"
                    }
                }
            }
        },
        DeleteDomainPermissionsPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v1/domain/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    policyRevision: {
                        location: "querystring",
                        locationName: "policy-revision"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        DeletePackageVersions: {
            http: {
                requestUri: "/v1/package/versions/delete"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "versions" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    versions: {
                        shape: "Sj"
                    },
                    expectedStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulVersions: {
                        shape: "Sp"
                    },
                    failedVersions: {
                        shape: "St"
                    }
                }
            }
        },
        DeleteRepository: {
            http: {
                method: "DELETE",
                requestUri: "/v1/repository"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        DeleteRepositoryPermissionsPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v1/repository/permissions/policies"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    policyRevision: {
                        location: "querystring",
                        locationName: "policy-revision"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        DescribeDomain: {
            http: {
                method: "GET",
                requestUri: "/v1/domain"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domain: {
                        shape: "S13"
                    }
                }
            }
        },
        DescribePackageVersion: {
            http: {
                method: "GET",
                requestUri: "/v1/package/version"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "packageVersion" ],
                members: {
                    packageVersion: {
                        type: "structure",
                        members: {
                            format: {},
                            namespace: {},
                            packageName: {},
                            displayName: {},
                            version: {},
                            summary: {},
                            homePage: {},
                            sourceCodeRepository: {},
                            publishedTime: {
                                type: "timestamp"
                            },
                            licenses: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        name: {},
                                        url: {}
                                    }
                                }
                            },
                            revision: {},
                            status: {}
                        }
                    }
                }
            }
        },
        DescribeRepository: {
            http: {
                method: "GET",
                requestUri: "/v1/repository"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        DisassociateExternalConnection: {
            http: {
                method: "DELETE",
                requestUri: "/v1/repository/external-connection"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "externalConnection" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    externalConnection: {
                        location: "querystring",
                        locationName: "external-connection"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        },
        DisposePackageVersions: {
            http: {
                requestUri: "/v1/package/versions/dispose"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "versions" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    versions: {
                        shape: "Sj"
                    },
                    versionRevisions: {
                        shape: "Sl"
                    },
                    expectedStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulVersions: {
                        shape: "Sp"
                    },
                    failedVersions: {
                        shape: "St"
                    }
                }
            }
        },
        GetAuthorizationToken: {
            http: {
                requestUri: "/v1/authorization-token"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    durationSeconds: {
                        location: "querystring",
                        locationName: "duration",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    authorizationToken: {},
                    expiration: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetDomainPermissionsPolicy: {
            http: {
                method: "GET",
                requestUri: "/v1/domain/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        GetPackageVersionAsset: {
            http: {
                method: "GET",
                requestUri: "/v1/package/version/asset"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion", "asset" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    },
                    asset: {
                        location: "querystring",
                        locationName: "asset"
                    },
                    packageVersionRevision: {
                        location: "querystring",
                        locationName: "revision"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    asset: {
                        type: "blob",
                        streaming: true
                    },
                    assetName: {
                        location: "header",
                        locationName: "X-AssetName"
                    },
                    packageVersion: {
                        location: "header",
                        locationName: "X-PackageVersion"
                    },
                    packageVersionRevision: {
                        location: "header",
                        locationName: "X-PackageVersionRevision"
                    }
                },
                payload: "asset"
            }
        },
        GetPackageVersionReadme: {
            http: {
                method: "GET",
                requestUri: "/v1/package/version/readme"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    format: {},
                    namespace: {},
                    package: {},
                    version: {},
                    versionRevision: {},
                    readme: {}
                }
            }
        },
        GetRepositoryEndpoint: {
            http: {
                method: "GET",
                requestUri: "/v1/repository/endpoint"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositoryEndpoint: {}
                }
            }
        },
        GetRepositoryPermissionsPolicy: {
            http: {
                method: "GET",
                requestUri: "/v1/repository/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        ListDomains: {
            http: {
                requestUri: "/v1/domains"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    domains: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                owner: {},
                                arn: {},
                                status: {},
                                createdTime: {
                                    type: "timestamp"
                                },
                                encryptionKey: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPackageVersionAssets: {
            http: {
                requestUri: "/v1/package/version/assets"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    format: {},
                    namespace: {},
                    package: {},
                    version: {},
                    versionRevision: {},
                    nextToken: {},
                    assets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name" ],
                            members: {
                                name: {},
                                size: {
                                    type: "long"
                                },
                                hashes: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPackageVersionDependencies: {
            http: {
                requestUri: "/v1/package/version/dependencies"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "packageVersion" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    packageVersion: {
                        location: "querystring",
                        locationName: "version"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    format: {},
                    namespace: {},
                    package: {},
                    version: {},
                    versionRevision: {},
                    nextToken: {},
                    dependencies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                namespace: {},
                                package: {},
                                dependencyType: {},
                                versionRequirement: {}
                            }
                        }
                    }
                }
            }
        },
        ListPackageVersions: {
            http: {
                requestUri: "/v1/package/versions"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    sortBy: {
                        location: "querystring",
                        locationName: "sortBy"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    defaultDisplayVersion: {},
                    format: {},
                    namespace: {},
                    package: {},
                    versions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "version", "status" ],
                            members: {
                                version: {},
                                revision: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPackages: {
            http: {
                requestUri: "/v1/packages"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    packagePrefix: {
                        location: "querystring",
                        locationName: "package-prefix"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    packages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                format: {},
                                namespace: {},
                                package: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRepositories: {
            http: {
                requestUri: "/v1/repositories"
            },
            input: {
                type: "structure",
                members: {
                    repositoryPrefix: {
                        location: "querystring",
                        locationName: "repository-prefix"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositories: {
                        shape: "S3f"
                    },
                    nextToken: {}
                }
            }
        },
        ListRepositoriesInDomain: {
            http: {
                requestUri: "/v1/domain/repositories"
            },
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    administratorAccount: {
                        location: "querystring",
                        locationName: "administrator-account"
                    },
                    repositoryPrefix: {
                        location: "querystring",
                        locationName: "repository-prefix"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositories: {
                        shape: "S3f"
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/v1/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sy"
                    }
                }
            }
        },
        PutDomainPermissionsPolicy: {
            http: {
                method: "PUT",
                requestUri: "/v1/domain/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain", "policyDocument" ],
                members: {
                    domain: {},
                    domainOwner: {},
                    policyRevision: {},
                    policyDocument: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        PutRepositoryPermissionsPolicy: {
            http: {
                method: "PUT",
                requestUri: "/v1/repository/permissions/policy"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "policyDocument" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    policyRevision: {},
                    policyDocument: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1h"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/tag"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/v1/untag"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePackageVersionsStatus: {
            http: {
                requestUri: "/v1/package/versions/update_status"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository", "format", "package", "versions", "targetStatus" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    package: {
                        location: "querystring",
                        locationName: "package"
                    },
                    versions: {
                        shape: "Sj"
                    },
                    versionRevisions: {
                        shape: "Sl"
                    },
                    expectedStatus: {},
                    targetStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulVersions: {
                        shape: "Sp"
                    },
                    failedVersions: {
                        shape: "St"
                    }
                }
            }
        },
        UpdateRepository: {
            http: {
                method: "PUT",
                requestUri: "/v1/repository"
            },
            input: {
                type: "structure",
                required: [ "domain", "repository" ],
                members: {
                    domain: {
                        location: "querystring",
                        locationName: "domain"
                    },
                    domainOwner: {
                        location: "querystring",
                        locationName: "domain-owner"
                    },
                    repository: {
                        location: "querystring",
                        locationName: "repository"
                    },
                    description: {},
                    upstreams: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S7"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            members: {
                name: {},
                administratorAccount: {},
                domainName: {},
                domainOwner: {},
                arn: {},
                description: {},
                upstreams: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            repositoryName: {}
                        }
                    }
                },
                externalConnections: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            externalConnectionName: {},
                            packageFormat: {},
                            status: {}
                        }
                    }
                }
            }
        },
        Sj: {
            type: "list",
            member: {}
        },
        Sl: {
            type: "map",
            key: {},
            value: {}
        },
        Sp: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    revision: {},
                    status: {}
                }
            }
        },
        St: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    errorCode: {},
                    errorMessage: {}
                }
            }
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                name: {},
                owner: {},
                arn: {},
                status: {},
                createdTime: {
                    type: "timestamp"
                },
                encryptionKey: {},
                repositoryCount: {
                    type: "integer"
                },
                assetSizeBytes: {
                    type: "long"
                },
                s3BucketArn: {}
            }
        },
        S19: {
            type: "list",
            member: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {}
                }
            }
        },
        S1h: {
            type: "structure",
            members: {
                resourceArn: {},
                revision: {},
                document: {}
            }
        },
        S3f: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    administratorAccount: {},
                    domainName: {},
                    domainOwner: {},
                    arn: {},
                    description: {}
                }
            }
        }
    },
    paginators: {
        ListDomains: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "domains"
        },
        ListPackageVersionAssets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assets"
        },
        ListPackageVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "versions"
        },
        ListPackages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "packages"
        },
        ListRepositories: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "repositories"
        },
        ListRepositoriesInDomain: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "repositories"
        }
    }
};

AWS.apiLoader.services["honeycode"] = {};

AWS.Honeycode = AWS.Service.defineService("honeycode", [ "2020-03-01" ]);

AWS.apiLoader.services["honeycode"]["2020-03-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-03-01",
        endpointPrefix: "honeycode",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Honeycode",
        serviceFullName: "Amazon Honeycode",
        serviceId: "Honeycode",
        signatureVersion: "v4",
        signingName: "honeycode",
        uid: "honeycode-2020-03-01"
    },
    operations: {
        BatchCreateTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/batchcreate"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "rowsToCreate" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowsToCreate: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "batchItemId", "cellsToCreate" ],
                            members: {
                                batchItemId: {},
                                cellsToCreate: {
                                    shape: "S6"
                                }
                            }
                        }
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workbookCursor", "createdRows" ],
                members: {
                    workbookCursor: {
                        type: "long"
                    },
                    createdRows: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    failedBatchItems: {
                        shape: "Se"
                    }
                }
            }
        },
        BatchDeleteTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/batchdelete"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "rowIds" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowIds: {
                        shape: "Si"
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workbookCursor" ],
                members: {
                    workbookCursor: {
                        type: "long"
                    },
                    failedBatchItems: {
                        shape: "Se"
                    }
                }
            }
        },
        BatchUpdateTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/batchupdate"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "rowsToUpdate" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowsToUpdate: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "rowId", "cellsToUpdate" ],
                            members: {
                                rowId: {},
                                cellsToUpdate: {
                                    shape: "S6"
                                }
                            }
                        }
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workbookCursor" ],
                members: {
                    workbookCursor: {
                        type: "long"
                    },
                    failedBatchItems: {
                        shape: "Se"
                    }
                }
            }
        },
        BatchUpsertTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/batchupsert"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "rowsToUpsert" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowsToUpsert: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "batchItemId", "filter", "cellsToUpdate" ],
                            members: {
                                batchItemId: {},
                                filter: {
                                    shape: "Sr"
                                },
                                cellsToUpdate: {
                                    shape: "S6"
                                }
                            }
                        }
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "rows", "workbookCursor" ],
                members: {
                    rows: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "rowIds", "upsertAction" ],
                            members: {
                                rowIds: {
                                    shape: "Si"
                                },
                                upsertAction: {}
                            }
                        }
                    },
                    workbookCursor: {
                        type: "long"
                    },
                    failedBatchItems: {
                        shape: "Se"
                    }
                }
            }
        },
        DescribeTableDataImportJob: {
            http: {
                method: "GET",
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/import/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "jobId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobStatus", "message", "jobMetadata" ],
                members: {
                    jobStatus: {},
                    message: {},
                    jobMetadata: {
                        type: "structure",
                        required: [ "submitter", "submitTime", "importOptions", "dataSource" ],
                        members: {
                            submitter: {
                                type: "structure",
                                members: {
                                    email: {
                                        type: "string",
                                        sensitive: true
                                    },
                                    userArn: {}
                                }
                            },
                            submitTime: {
                                type: "timestamp"
                            },
                            importOptions: {
                                shape: "S17"
                            },
                            dataSource: {
                                shape: "S1h"
                            }
                        }
                    }
                }
            }
        },
        GetScreenData: {
            http: {
                requestUri: "/screendata"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "appId", "screenId" ],
                members: {
                    workbookId: {},
                    appId: {},
                    screenId: {},
                    variables: {
                        shape: "S1l"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "results", "workbookCursor" ],
                members: {
                    results: {
                        type: "map",
                        key: {
                            shape: "S1t"
                        },
                        value: {
                            type: "structure",
                            required: [ "headers", "rows" ],
                            members: {
                                headers: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name", "format" ],
                                        members: {
                                            name: {
                                                shape: "S1t"
                                            },
                                            format: {}
                                        }
                                    }
                                },
                                rows: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "dataItems" ],
                                        members: {
                                            rowId: {},
                                            dataItems: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        overrideFormat: {},
                                                        rawValue: {},
                                                        formattedValue: {}
                                                    },
                                                    sensitive: true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    workbookCursor: {
                        type: "long"
                    },
                    nextToken: {}
                }
            }
        },
        InvokeScreenAutomation: {
            http: {
                requestUri: "/workbooks/{workbookId}/apps/{appId}/screens/{screenId}/automations/{automationId}"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "appId", "screenId", "screenAutomationId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    screenId: {
                        location: "uri",
                        locationName: "screenId"
                    },
                    screenAutomationId: {
                        location: "uri",
                        locationName: "automationId"
                    },
                    variables: {
                        shape: "S1l"
                    },
                    rowId: {},
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workbookCursor" ],
                members: {
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        ListTableColumns: {
            http: {
                method: "GET",
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/columns"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tableColumns" ],
                members: {
                    tableColumns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                tableColumnId: {},
                                tableColumnName: {},
                                format: {}
                            }
                        }
                    },
                    nextToken: {},
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        ListTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/list"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    rowIds: {
                        shape: "Si"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "columnIds", "rows", "workbookCursor" ],
                members: {
                    columnIds: {
                        shape: "S2c"
                    },
                    rows: {
                        shape: "S2d"
                    },
                    rowIdsNotFound: {
                        shape: "Si"
                    },
                    nextToken: {},
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        ListTables: {
            http: {
                method: "GET",
                requestUri: "/workbooks/{workbookId}/tables"
            },
            input: {
                type: "structure",
                required: [ "workbookId" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tables" ],
                members: {
                    tables: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                tableId: {},
                                tableName: {}
                            }
                        }
                    },
                    nextToken: {},
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        QueryTableRows: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/rows/query"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "tableId", "filterFormula" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    tableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    filterFormula: {
                        shape: "Sr"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "columnIds", "rows", "workbookCursor" ],
                members: {
                    columnIds: {
                        shape: "S2c"
                    },
                    rows: {
                        shape: "S2d"
                    },
                    nextToken: {},
                    workbookCursor: {
                        type: "long"
                    }
                }
            }
        },
        StartTableDataImportJob: {
            http: {
                requestUri: "/workbooks/{workbookId}/tables/{tableId}/import"
            },
            input: {
                type: "structure",
                required: [ "workbookId", "dataSource", "dataFormat", "destinationTableId", "importOptions", "clientRequestToken" ],
                members: {
                    workbookId: {
                        location: "uri",
                        locationName: "workbookId"
                    },
                    dataSource: {
                        shape: "S1h"
                    },
                    dataFormat: {},
                    destinationTableId: {
                        location: "uri",
                        locationName: "tableId"
                    },
                    importOptions: {
                        shape: "S17"
                    },
                    clientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "jobId", "jobStatus" ],
                members: {
                    jobId: {},
                    jobStatus: {}
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    fact: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                required: [ "id", "errorMessage" ],
                members: {
                    id: {},
                    errorMessage: {}
                }
            }
        },
        Si: {
            type: "list",
            member: {}
        },
        Sr: {
            type: "structure",
            required: [ "formula" ],
            members: {
                formula: {
                    shape: "Ss"
                },
                contextRowId: {}
            }
        },
        Ss: {
            type: "string",
            sensitive: true
        },
        S17: {
            type: "structure",
            members: {
                destinationOptions: {
                    type: "structure",
                    members: {
                        columnMap: {
                            type: "map",
                            key: {},
                            value: {
                                type: "structure",
                                members: {
                                    columnIndex: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                delimitedTextOptions: {
                    type: "structure",
                    required: [ "delimiter" ],
                    members: {
                        delimiter: {},
                        hasHeaderRow: {
                            type: "boolean"
                        },
                        ignoreEmptyRows: {
                            type: "boolean"
                        },
                        dataCharacterEncoding: {}
                    }
                }
            }
        },
        S1h: {
            type: "structure",
            required: [ "dataSourceConfig" ],
            members: {
                dataSourceConfig: {
                    type: "structure",
                    members: {
                        dataSourceUrl: {}
                    }
                }
            }
        },
        S1l: {
            type: "map",
            key: {
                type: "string",
                sensitive: true
            },
            value: {
                type: "structure",
                required: [ "rawValue" ],
                members: {
                    rawValue: {}
                },
                sensitive: true
            },
            sensitive: true
        },
        S1t: {
            type: "string",
            sensitive: true
        },
        S2c: {
            type: "list",
            member: {}
        },
        S2d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "rowId", "cells" ],
                members: {
                    rowId: {},
                    cells: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                formula: {
                                    shape: "Ss"
                                },
                                format: {},
                                rawValue: {},
                                formattedValue: {}
                            },
                            sensitive: true
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListTableColumns: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "tableColumns"
        },
        ListTableRows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "rows"
        },
        ListTables: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tables"
        },
        QueryTableRows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "rows"
        }
    }
};

AWS.apiLoader.services["ivs"] = {};

AWS.IVS = AWS.Service.defineService("ivs", [ "2020-07-14" ]);

AWS.apiLoader.services["ivs"]["2020-07-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-14",
        endpointPrefix: "ivs",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon IVS",
        serviceFullName: "Amazon Interactive Video Service",
        serviceId: "ivs",
        signatureVersion: "v4",
        signingName: "ivs",
        uid: "ivs-2020-07-14"
    },
    operations: {
        BatchGetChannel: {
            http: {
                requestUri: "/BatchGetChannel"
            },
            input: {
                type: "structure",
                required: [ "arns" ],
                members: {
                    arns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    channels: {
                        type: "list",
                        member: {
                            shape: "S6"
                        }
                    },
                    errors: {
                        shape: "Sh"
                    }
                }
            }
        },
        BatchGetStreamKey: {
            http: {
                requestUri: "/BatchGetStreamKey"
            },
            input: {
                type: "structure",
                required: [ "arns" ],
                members: {
                    arns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamKeys: {
                        type: "list",
                        member: {
                            shape: "Sr"
                        }
                    },
                    errors: {
                        shape: "Sh"
                    }
                }
            }
        },
        CreateChannel: {
            http: {
                requestUri: "/CreateChannel"
            },
            input: {
                type: "structure",
                members: {
                    name: {},
                    latencyMode: {},
                    type: {},
                    authorized: {
                        type: "boolean"
                    },
                    recordingConfigurationArn: {},
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    channel: {
                        shape: "S6"
                    },
                    streamKey: {
                        shape: "Sr"
                    }
                }
            }
        },
        CreateRecordingConfiguration: {
            http: {
                requestUri: "/CreateRecordingConfiguration"
            },
            input: {
                type: "structure",
                required: [ "destinationConfiguration" ],
                members: {
                    name: {},
                    destinationConfiguration: {
                        shape: "Sy"
                    },
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recordingConfiguration: {
                        shape: "S12"
                    }
                }
            }
        },
        CreateStreamKey: {
            http: {
                requestUri: "/CreateStreamKey"
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {},
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamKey: {
                        shape: "Sr"
                    }
                }
            }
        },
        DeleteChannel: {
            http: {
                requestUri: "/DeleteChannel",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        DeletePlaybackKeyPair: {
            http: {
                requestUri: "/DeletePlaybackKeyPair"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRecordingConfiguration: {
            http: {
                requestUri: "/DeleteRecordingConfiguration"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        DeleteStreamKey: {
            http: {
                requestUri: "/DeleteStreamKey",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        GetChannel: {
            http: {
                requestUri: "/GetChannel"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    channel: {
                        shape: "S6"
                    }
                }
            }
        },
        GetPlaybackKeyPair: {
            http: {
                requestUri: "/GetPlaybackKeyPair"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    keyPair: {
                        shape: "S1h"
                    }
                }
            }
        },
        GetRecordingConfiguration: {
            http: {
                requestUri: "/GetRecordingConfiguration"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    recordingConfiguration: {
                        shape: "S12"
                    }
                }
            }
        },
        GetStream: {
            http: {
                requestUri: "/GetStream"
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    stream: {
                        type: "structure",
                        members: {
                            channelArn: {},
                            playbackUrl: {},
                            startTime: {
                                shape: "S1p"
                            },
                            state: {},
                            health: {},
                            viewerCount: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        GetStreamKey: {
            http: {
                requestUri: "/GetStreamKey"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    streamKey: {
                        shape: "Sr"
                    }
                }
            }
        },
        ImportPlaybackKeyPair: {
            http: {
                requestUri: "/ImportPlaybackKeyPair"
            },
            input: {
                type: "structure",
                required: [ "publicKeyMaterial" ],
                members: {
                    publicKeyMaterial: {},
                    name: {},
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    keyPair: {
                        shape: "S1h"
                    }
                }
            }
        },
        ListChannels: {
            http: {
                requestUri: "/ListChannels"
            },
            input: {
                type: "structure",
                members: {
                    filterByName: {},
                    filterByRecordingConfigurationArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "channels" ],
                members: {
                    channels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                latencyMode: {},
                                authorized: {
                                    type: "boolean"
                                },
                                recordingConfigurationArn: {},
                                tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPlaybackKeyPairs: {
            http: {
                requestUri: "/ListPlaybackKeyPairs"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "keyPairs" ],
                members: {
                    keyPairs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRecordingConfigurations: {
            http: {
                requestUri: "/ListRecordingConfigurations"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "recordingConfigurations" ],
                members: {
                    recordingConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "destinationConfiguration", "state" ],
                            members: {
                                arn: {},
                                name: {},
                                destinationConfiguration: {
                                    shape: "Sy"
                                },
                                state: {},
                                tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListStreamKeys: {
            http: {
                requestUri: "/ListStreamKeys"
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "streamKeys" ],
                members: {
                    streamKeys: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                channelArn: {},
                                tags: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListStreams: {
            http: {
                requestUri: "/ListStreams"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "streams" ],
                members: {
                    streams: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                channelArn: {},
                                state: {},
                                health: {},
                                viewerCount: {
                                    type: "long"
                                },
                                startTime: {
                                    shape: "S1p"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "Se"
                    },
                    nextToken: {}
                }
            }
        },
        PutMetadata: {
            http: {
                requestUri: "/PutMetadata"
            },
            input: {
                type: "structure",
                required: [ "channelArn", "metadata" ],
                members: {
                    channelArn: {},
                    metadata: {}
                }
            }
        },
        StopStream: {
            http: {
                requestUri: "/StopStream"
            },
            input: {
                type: "structure",
                required: [ "channelArn" ],
                members: {
                    channelArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateChannel: {
            http: {
                requestUri: "/UpdateChannel"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    name: {},
                    latencyMode: {},
                    type: {},
                    authorized: {
                        type: "boolean"
                    },
                    recordingConfigurationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    channel: {
                        shape: "S6"
                    }
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                latencyMode: {},
                type: {},
                recordingConfigurationArn: {},
                ingestEndpoint: {},
                playbackUrl: {},
                authorized: {
                    type: "boolean"
                },
                tags: {
                    shape: "Se"
                }
            }
        },
        Se: {
            type: "map",
            key: {},
            value: {}
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    code: {},
                    message: {}
                }
            }
        },
        Sr: {
            type: "structure",
            members: {
                arn: {},
                value: {},
                channelArn: {},
                tags: {
                    shape: "Se"
                }
            }
        },
        Sy: {
            type: "structure",
            members: {
                s3: {
                    type: "structure",
                    required: [ "bucketName" ],
                    members: {
                        bucketName: {}
                    }
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "arn", "destinationConfiguration", "state" ],
            members: {
                arn: {},
                name: {},
                destinationConfiguration: {
                    shape: "Sy"
                },
                state: {},
                tags: {
                    shape: "Se"
                }
            }
        },
        S1h: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                fingerprint: {},
                tags: {
                    shape: "Se"
                }
            }
        },
        S1p: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        ListChannels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "channels"
        },
        ListPlaybackKeyPairs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "keyPairs"
        },
        ListRecordingConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "recordingConfigurations"
        },
        ListStreamKeys: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "streamKeys"
        },
        ListStreams: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "streams"
        },
        ListTagsForResource: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["braket"] = {};

AWS.Braket = AWS.Service.defineService("braket", [ "2019-09-01" ]);

AWS.apiLoader.services["braket"]["2019-09-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-09-01",
        endpointPrefix: "braket",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Braket",
        serviceId: "Braket",
        signatureVersion: "v4",
        signingName: "braket",
        uid: "braket-2019-09-01"
    },
    operations: {
        CancelQuantumTask: {
            http: {
                method: "PUT",
                requestUri: "/quantum-task/{quantumTaskArn}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "clientToken", "quantumTaskArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    quantumTaskArn: {
                        location: "uri",
                        locationName: "quantumTaskArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "cancellationStatus", "quantumTaskArn" ],
                members: {
                    cancellationStatus: {},
                    quantumTaskArn: {}
                }
            },
            idempotent: true
        },
        CreateQuantumTask: {
            http: {
                requestUri: "/quantum-task",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "action", "clientToken", "deviceArn", "outputS3Bucket", "outputS3KeyPrefix", "shots" ],
                members: {
                    action: {
                        jsonvalue: true
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    deviceArn: {},
                    deviceParameters: {
                        jsonvalue: true
                    },
                    outputS3Bucket: {},
                    outputS3KeyPrefix: {},
                    shots: {
                        type: "long"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "quantumTaskArn" ],
                members: {
                    quantumTaskArn: {}
                }
            }
        },
        GetDevice: {
            http: {
                method: "GET",
                requestUri: "/device/{deviceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "deviceArn" ],
                members: {
                    deviceArn: {
                        location: "uri",
                        locationName: "deviceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "deviceArn", "deviceCapabilities", "deviceName", "deviceStatus", "deviceType", "providerName" ],
                members: {
                    deviceArn: {},
                    deviceCapabilities: {
                        jsonvalue: true
                    },
                    deviceName: {},
                    deviceStatus: {},
                    deviceType: {},
                    providerName: {}
                }
            }
        },
        GetQuantumTask: {
            http: {
                method: "GET",
                requestUri: "/quantum-task/{quantumTaskArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "quantumTaskArn" ],
                members: {
                    quantumTaskArn: {
                        location: "uri",
                        locationName: "quantumTaskArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdAt", "deviceArn", "deviceParameters", "outputS3Bucket", "outputS3Directory", "quantumTaskArn", "shots", "status" ],
                members: {
                    createdAt: {
                        shape: "Sm"
                    },
                    deviceArn: {},
                    deviceParameters: {
                        jsonvalue: true
                    },
                    endedAt: {
                        shape: "Sm"
                    },
                    failureReason: {},
                    outputS3Bucket: {},
                    outputS3Directory: {},
                    quantumTaskArn: {},
                    shots: {
                        type: "long"
                    },
                    status: {},
                    tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        SearchDevices: {
            http: {
                requestUri: "/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "filters" ],
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values" ],
                            members: {
                                name: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "devices" ],
                members: {
                    devices: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "deviceArn", "deviceName", "deviceStatus", "deviceType", "providerName" ],
                            members: {
                                deviceArn: {},
                                deviceName: {},
                                deviceStatus: {},
                                deviceType: {},
                                providerName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        SearchQuantumTasks: {
            http: {
                requestUri: "/quantum-tasks",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "filters" ],
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "operator", "values" ],
                            members: {
                                name: {},
                                operator: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "quantumTasks" ],
                members: {
                    nextToken: {},
                    quantumTasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "createdAt", "deviceArn", "outputS3Bucket", "outputS3Directory", "quantumTaskArn", "shots", "status" ],
                            members: {
                                createdAt: {
                                    shape: "Sm"
                                },
                                deviceArn: {},
                                endedAt: {
                                    shape: "Sm"
                                },
                                outputS3Bucket: {},
                                outputS3Directory: {},
                                quantumTaskArn: {},
                                shots: {
                                    type: "long"
                                },
                                status: {},
                                tags: {
                                    shape: "Sd"
                                }
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        Sd: {
            type: "map",
            key: {},
            value: {}
        },
        Sm: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        SearchDevices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "devices"
        },
        SearchQuantumTasks: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "quantumTasks"
        }
    }
};

AWS.apiLoader.services["identitystore"] = {};

AWS.IdentityStore = AWS.Service.defineService("identitystore", [ "2020-06-15" ]);

AWS.apiLoader.services["identitystore"]["2020-06-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-06-15",
        endpointPrefix: "identitystore",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "IdentityStore",
        serviceFullName: "AWS SSO Identity Store",
        serviceId: "identitystore",
        signatureVersion: "v4",
        signingName: "identitystore",
        targetPrefix: "AWSIdentityStore",
        uid: "identitystore-2020-06-15"
    },
    operations: {
        DescribeGroup: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "GroupId" ],
                members: {
                    IdentityStoreId: {},
                    GroupId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "GroupId", "DisplayName" ],
                members: {
                    GroupId: {},
                    DisplayName: {}
                }
            }
        },
        DescribeUser: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId", "UserId" ],
                members: {
                    IdentityStoreId: {},
                    UserId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "UserName", "UserId" ],
                members: {
                    UserName: {
                        shape: "S8"
                    },
                    UserId: {}
                }
            }
        },
        ListGroups: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId" ],
                members: {
                    IdentityStoreId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Groups" ],
                members: {
                    Groups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "GroupId", "DisplayName" ],
                            members: {
                                GroupId: {},
                                DisplayName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListUsers: {
            input: {
                type: "structure",
                required: [ "IdentityStoreId" ],
                members: {
                    IdentityStoreId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Users" ],
                members: {
                    Users: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "UserName", "UserId" ],
                            members: {
                                UserName: {
                                    shape: "S8"
                                },
                                UserId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {
        S8: {
            type: "string",
            sensitive: true
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AttributePath", "AttributeValue" ],
                members: {
                    AttributePath: {},
                    AttributeValue: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        }
    },
    paginators: {
        ListGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["appflow"] = {};

AWS.Appflow = AWS.Service.defineService("appflow", [ "2020-08-23" ]);

AWS.apiLoader.services["appflow"]["2020-08-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-23",
        endpointPrefix: "appflow",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Appflow",
        serviceId: "Appflow",
        signatureVersion: "v4",
        signingName: "appflow",
        uid: "appflow-2020-08-23"
    },
    operations: {
        CreateConnectorProfile: {
            http: {
                requestUri: "/create-connector-profile"
            },
            input: {
                type: "structure",
                required: [ "connectorProfileName", "connectorType", "connectionMode", "connectorProfileConfig" ],
                members: {
                    connectorProfileName: {},
                    kmsArn: {},
                    connectorType: {},
                    connectionMode: {},
                    connectorProfileConfig: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorProfileArn: {}
                }
            }
        },
        CreateFlow: {
            http: {
                requestUri: "/create-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName", "triggerConfig", "sourceFlowConfig", "destinationFlowConfigList", "tasks" ],
                members: {
                    flowName: {},
                    description: {},
                    kmsArn: {},
                    triggerConfig: {
                        shape: "S2g"
                    },
                    sourceFlowConfig: {
                        shape: "S2p"
                    },
                    destinationFlowConfigList: {
                        shape: "S3a"
                    },
                    tasks: {
                        shape: "S42"
                    },
                    tags: {
                        shape: "S4r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    flowArn: {},
                    flowStatus: {}
                }
            }
        },
        DeleteConnectorProfile: {
            http: {
                requestUri: "/delete-connector-profile"
            },
            input: {
                type: "structure",
                required: [ "connectorProfileName" ],
                members: {
                    connectorProfileName: {},
                    forceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFlow: {
            http: {
                requestUri: "/delete-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {},
                    forceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeConnectorEntity: {
            http: {
                requestUri: "/describe-connector-entity"
            },
            input: {
                type: "structure",
                required: [ "connectorEntityName" ],
                members: {
                    connectorEntityName: {},
                    connectorType: {},
                    connectorProfileName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "connectorEntityFields" ],
                members: {
                    connectorEntityFields: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "identifier" ],
                            members: {
                                identifier: {},
                                label: {},
                                supportedFieldTypeDetails: {
                                    type: "structure",
                                    required: [ "v1" ],
                                    members: {
                                        v1: {
                                            type: "structure",
                                            required: [ "fieldType", "filterOperators" ],
                                            members: {
                                                fieldType: {},
                                                filterOperators: {
                                                    type: "list",
                                                    member: {}
                                                },
                                                supportedValues: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                description: {},
                                sourceProperties: {
                                    type: "structure",
                                    members: {
                                        isRetrievable: {
                                            type: "boolean"
                                        },
                                        isQueryable: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                destinationProperties: {
                                    type: "structure",
                                    members: {
                                        isCreatable: {
                                            type: "boolean"
                                        },
                                        isNullable: {
                                            type: "boolean"
                                        },
                                        isUpsertable: {
                                            type: "boolean"
                                        },
                                        isUpdatable: {
                                            type: "boolean"
                                        },
                                        supportedWriteOperations: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeConnectorProfiles: {
            http: {
                requestUri: "/describe-connector-profiles"
            },
            input: {
                type: "structure",
                members: {
                    connectorProfileNames: {
                        type: "list",
                        member: {}
                    },
                    connectorType: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorProfileDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                connectorProfileArn: {},
                                connectorProfileName: {},
                                connectorType: {},
                                connectionMode: {},
                                credentialsArn: {},
                                connectorProfileProperties: {
                                    shape: "S7"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                privateConnectionProvisioningState: {
                                    type: "structure",
                                    members: {
                                        status: {},
                                        failureMessage: {},
                                        failureCause: {}
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeConnectors: {
            http: {
                requestUri: "/describe-connectors"
            },
            input: {
                type: "structure",
                members: {
                    connectorTypes: {
                        shape: "S5v"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorConfigurations: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                canUseAsSource: {
                                    type: "boolean"
                                },
                                canUseAsDestination: {
                                    type: "boolean"
                                },
                                supportedDestinationConnectors: {
                                    shape: "S5v"
                                },
                                supportedSchedulingFrequencies: {
                                    type: "list",
                                    member: {}
                                },
                                isPrivateLinkEnabled: {
                                    type: "boolean"
                                },
                                isPrivateLinkEndpointUrlRequired: {
                                    type: "boolean"
                                },
                                supportedTriggerTypes: {
                                    type: "list",
                                    member: {}
                                },
                                connectorMetadata: {
                                    type: "structure",
                                    members: {
                                        Amplitude: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Datadog: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Dynatrace: {
                                            type: "structure",
                                            members: {}
                                        },
                                        GoogleAnalytics: {
                                            type: "structure",
                                            members: {
                                                oAuthScopes: {
                                                    shape: "S18"
                                                }
                                            }
                                        },
                                        InforNexus: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Marketo: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Redshift: {
                                            type: "structure",
                                            members: {}
                                        },
                                        S3: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Salesforce: {
                                            type: "structure",
                                            members: {
                                                oAuthScopes: {
                                                    shape: "S18"
                                                }
                                            }
                                        },
                                        ServiceNow: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Singular: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Slack: {
                                            type: "structure",
                                            members: {
                                                oAuthScopes: {
                                                    shape: "S18"
                                                }
                                            }
                                        },
                                        Snowflake: {
                                            type: "structure",
                                            members: {
                                                supportedRegions: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        },
                                        Trendmicro: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Veeva: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Zendesk: {
                                            type: "structure",
                                            members: {
                                                oAuthScopes: {
                                                    shape: "S18"
                                                }
                                            }
                                        },
                                        EventBridge: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Upsolver: {
                                            type: "structure",
                                            members: {}
                                        },
                                        CustomerProfiles: {
                                            type: "structure",
                                            members: {}
                                        },
                                        Honeycode: {
                                            type: "structure",
                                            members: {
                                                oAuthScopes: {
                                                    shape: "S18"
                                                }
                                            }
                                        },
                                        SAPOData: {
                                            type: "structure",
                                            members: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeFlow: {
            http: {
                requestUri: "/describe-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flowArn: {},
                    description: {},
                    flowName: {},
                    kmsArn: {},
                    flowStatus: {},
                    flowStatusMessage: {},
                    sourceFlowConfig: {
                        shape: "S2p"
                    },
                    destinationFlowConfigList: {
                        shape: "S3a"
                    },
                    lastRunExecutionDetails: {
                        shape: "S6s"
                    },
                    triggerConfig: {
                        shape: "S2g"
                    },
                    tasks: {
                        shape: "S42"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    createdBy: {},
                    lastUpdatedBy: {},
                    tags: {
                        shape: "S4r"
                    }
                }
            }
        },
        DescribeFlowExecutionRecords: {
            http: {
                requestUri: "/describe-flow-execution-records"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flowExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                executionId: {},
                                executionStatus: {},
                                executionResult: {
                                    type: "structure",
                                    members: {
                                        errorInfo: {
                                            type: "structure",
                                            members: {
                                                putFailuresCount: {
                                                    type: "long"
                                                },
                                                executionMessage: {}
                                            }
                                        },
                                        bytesProcessed: {
                                            type: "long"
                                        },
                                        bytesWritten: {
                                            type: "long"
                                        },
                                        recordsProcessed: {
                                            type: "long"
                                        }
                                    }
                                },
                                startedAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                dataPullStartTime: {
                                    type: "timestamp"
                                },
                                dataPullEndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListConnectorEntities: {
            http: {
                requestUri: "/list-connector-entities"
            },
            input: {
                type: "structure",
                members: {
                    connectorProfileName: {},
                    connectorType: {},
                    entitiesPath: {}
                }
            },
            output: {
                type: "structure",
                required: [ "connectorEntityMap" ],
                members: {
                    connectorEntityMap: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "name" ],
                                members: {
                                    name: {},
                                    label: {},
                                    hasNestedEntities: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListFlows: {
            http: {
                requestUri: "/list-flows"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flows: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                flowArn: {},
                                description: {},
                                flowName: {},
                                flowStatus: {},
                                sourceConnectorType: {},
                                destinationConnectorType: {},
                                triggerType: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                createdBy: {},
                                lastUpdatedBy: {},
                                tags: {
                                    shape: "S4r"
                                },
                                lastRunExecutionDetails: {
                                    shape: "S6s"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S4r"
                    }
                }
            }
        },
        StartFlow: {
            http: {
                requestUri: "/start-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flowArn: {},
                    flowStatus: {},
                    executionId: {}
                }
            }
        },
        StopFlow: {
            http: {
                requestUri: "/stop-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName" ],
                members: {
                    flowName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    flowArn: {},
                    flowStatus: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S4r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConnectorProfile: {
            http: {
                requestUri: "/update-connector-profile"
            },
            input: {
                type: "structure",
                required: [ "connectorProfileName", "connectionMode", "connectorProfileConfig" ],
                members: {
                    connectorProfileName: {},
                    connectionMode: {},
                    connectorProfileConfig: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorProfileArn: {}
                }
            }
        },
        UpdateFlow: {
            http: {
                requestUri: "/update-flow"
            },
            input: {
                type: "structure",
                required: [ "flowName", "triggerConfig", "sourceFlowConfig", "destinationFlowConfigList", "tasks" ],
                members: {
                    flowName: {},
                    description: {},
                    triggerConfig: {
                        shape: "S2g"
                    },
                    sourceFlowConfig: {
                        shape: "S2p"
                    },
                    destinationFlowConfigList: {
                        shape: "S3a"
                    },
                    tasks: {
                        shape: "S42"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    flowStatus: {}
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            required: [ "connectorProfileProperties", "connectorProfileCredentials" ],
            members: {
                connectorProfileProperties: {
                    shape: "S7"
                },
                connectorProfileCredentials: {
                    type: "structure",
                    members: {
                        Amplitude: {
                            type: "structure",
                            required: [ "apiKey", "secretKey" ],
                            members: {
                                apiKey: {},
                                secretKey: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        },
                        Datadog: {
                            type: "structure",
                            required: [ "apiKey", "applicationKey" ],
                            members: {
                                apiKey: {},
                                applicationKey: {}
                            }
                        },
                        Dynatrace: {
                            type: "structure",
                            required: [ "apiToken" ],
                            members: {
                                apiToken: {}
                            }
                        },
                        GoogleAnalytics: {
                            type: "structure",
                            required: [ "clientId", "clientSecret" ],
                            members: {
                                clientId: {},
                                clientSecret: {
                                    shape: "S1k"
                                },
                                accessToken: {
                                    shape: "S1l"
                                },
                                refreshToken: {},
                                oAuthRequest: {
                                    shape: "S1n"
                                }
                            }
                        },
                        Honeycode: {
                            type: "structure",
                            members: {
                                accessToken: {
                                    shape: "S1l"
                                },
                                refreshToken: {},
                                oAuthRequest: {
                                    shape: "S1n"
                                }
                            }
                        },
                        InforNexus: {
                            type: "structure",
                            required: [ "accessKeyId", "userId", "secretAccessKey", "datakey" ],
                            members: {
                                accessKeyId: {
                                    type: "string",
                                    sensitive: true
                                },
                                userId: {},
                                secretAccessKey: {},
                                datakey: {}
                            }
                        },
                        Marketo: {
                            type: "structure",
                            required: [ "clientId", "clientSecret" ],
                            members: {
                                clientId: {},
                                clientSecret: {
                                    shape: "S1k"
                                },
                                accessToken: {
                                    shape: "S1l"
                                },
                                oAuthRequest: {
                                    shape: "S1n"
                                }
                            }
                        },
                        Redshift: {
                            type: "structure",
                            required: [ "username", "password" ],
                            members: {
                                username: {},
                                password: {
                                    shape: "S1x"
                                }
                            }
                        },
                        Salesforce: {
                            type: "structure",
                            members: {
                                accessToken: {
                                    shape: "S1l"
                                },
                                refreshToken: {},
                                oAuthRequest: {
                                    shape: "S1n"
                                },
                                clientCredentialsArn: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        },
                        ServiceNow: {
                            type: "structure",
                            required: [ "username", "password" ],
                            members: {
                                username: {},
                                password: {
                                    shape: "S1x"
                                }
                            }
                        },
                        Singular: {
                            type: "structure",
                            required: [ "apiKey" ],
                            members: {
                                apiKey: {}
                            }
                        },
                        Slack: {
                            type: "structure",
                            required: [ "clientId", "clientSecret" ],
                            members: {
                                clientId: {},
                                clientSecret: {
                                    shape: "S1k"
                                },
                                accessToken: {
                                    shape: "S1l"
                                },
                                oAuthRequest: {
                                    shape: "S1n"
                                }
                            }
                        },
                        Snowflake: {
                            type: "structure",
                            required: [ "username", "password" ],
                            members: {
                                username: {},
                                password: {
                                    shape: "S1x"
                                }
                            }
                        },
                        Trendmicro: {
                            type: "structure",
                            required: [ "apiSecretKey" ],
                            members: {
                                apiSecretKey: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        },
                        Veeva: {
                            type: "structure",
                            required: [ "username", "password" ],
                            members: {
                                username: {},
                                password: {
                                    shape: "S1x"
                                }
                            }
                        },
                        Zendesk: {
                            type: "structure",
                            required: [ "clientId", "clientSecret" ],
                            members: {
                                clientId: {},
                                clientSecret: {
                                    shape: "S1k"
                                },
                                accessToken: {
                                    shape: "S1l"
                                },
                                oAuthRequest: {
                                    shape: "S1n"
                                }
                            }
                        },
                        SAPOData: {
                            type: "structure",
                            members: {
                                basicAuthCredentials: {
                                    type: "structure",
                                    required: [ "username", "password" ],
                                    members: {
                                        username: {},
                                        password: {
                                            shape: "S1x"
                                        }
                                    }
                                },
                                oAuthCredentials: {
                                    type: "structure",
                                    required: [ "clientId", "clientSecret" ],
                                    members: {
                                        clientId: {},
                                        clientSecret: {
                                            shape: "S1k"
                                        },
                                        accessToken: {
                                            shape: "S1l"
                                        },
                                        refreshToken: {},
                                        oAuthRequest: {
                                            shape: "S1n"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S7: {
            type: "structure",
            members: {
                Amplitude: {
                    type: "structure",
                    members: {}
                },
                Datadog: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Dynatrace: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                GoogleAnalytics: {
                    type: "structure",
                    members: {}
                },
                Honeycode: {
                    type: "structure",
                    members: {}
                },
                InforNexus: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Marketo: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Redshift: {
                    type: "structure",
                    required: [ "databaseUrl", "bucketName", "roleArn" ],
                    members: {
                        databaseUrl: {},
                        bucketName: {},
                        bucketPrefix: {},
                        roleArn: {}
                    }
                },
                Salesforce: {
                    type: "structure",
                    members: {
                        instanceUrl: {},
                        isSandboxEnvironment: {
                            type: "boolean"
                        }
                    }
                },
                ServiceNow: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Singular: {
                    type: "structure",
                    members: {}
                },
                Slack: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Snowflake: {
                    type: "structure",
                    required: [ "warehouse", "stage", "bucketName" ],
                    members: {
                        warehouse: {},
                        stage: {},
                        bucketName: {},
                        bucketPrefix: {},
                        privateLinkServiceName: {},
                        accountName: {},
                        region: {}
                    }
                },
                Trendmicro: {
                    type: "structure",
                    members: {}
                },
                Veeva: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                Zendesk: {
                    type: "structure",
                    required: [ "instanceUrl" ],
                    members: {
                        instanceUrl: {}
                    }
                },
                SAPOData: {
                    type: "structure",
                    required: [ "applicationHostUrl", "applicationServicePath", "portNumber", "clientNumber" ],
                    members: {
                        applicationHostUrl: {},
                        applicationServicePath: {},
                        portNumber: {
                            type: "integer"
                        },
                        clientNumber: {},
                        logonLanguage: {},
                        privateLinkServiceName: {},
                        oAuthProperties: {
                            type: "structure",
                            required: [ "tokenUrl", "authCodeUrl", "oAuthScopes" ],
                            members: {
                                tokenUrl: {},
                                authCodeUrl: {},
                                oAuthScopes: {
                                    shape: "S18"
                                }
                            }
                        }
                    }
                }
            }
        },
        S18: {
            type: "list",
            member: {}
        },
        S1k: {
            type: "string",
            sensitive: true
        },
        S1l: {
            type: "string",
            sensitive: true
        },
        S1n: {
            type: "structure",
            members: {
                authCode: {},
                redirectUri: {}
            }
        },
        S1x: {
            type: "string",
            sensitive: true
        },
        S2g: {
            type: "structure",
            required: [ "triggerType" ],
            members: {
                triggerType: {},
                triggerProperties: {
                    type: "structure",
                    members: {
                        Scheduled: {
                            type: "structure",
                            required: [ "scheduleExpression" ],
                            members: {
                                scheduleExpression: {},
                                dataPullMode: {},
                                scheduleStartTime: {
                                    type: "timestamp"
                                },
                                scheduleEndTime: {
                                    type: "timestamp"
                                },
                                timezone: {},
                                scheduleOffset: {
                                    type: "long"
                                },
                                firstExecutionFrom: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        S2p: {
            type: "structure",
            required: [ "connectorType", "sourceConnectorProperties" ],
            members: {
                connectorType: {},
                connectorProfileName: {},
                sourceConnectorProperties: {
                    type: "structure",
                    members: {
                        Amplitude: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Datadog: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Dynatrace: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        GoogleAnalytics: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        InforNexus: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Marketo: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        S3: {
                            type: "structure",
                            required: [ "bucketName" ],
                            members: {
                                bucketName: {},
                                bucketPrefix: {}
                            }
                        },
                        Salesforce: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {},
                                enableDynamicFieldUpdate: {
                                    type: "boolean"
                                },
                                includeDeletedRecords: {
                                    type: "boolean"
                                }
                            }
                        },
                        ServiceNow: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Singular: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Slack: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Trendmicro: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        Veeva: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {},
                                documentType: {},
                                includeSourceFiles: {
                                    type: "boolean"
                                },
                                includeRenditions: {
                                    type: "boolean"
                                },
                                includeAllVersions: {
                                    type: "boolean"
                                }
                            }
                        },
                        Zendesk: {
                            type: "structure",
                            required: [ "object" ],
                            members: {
                                object: {}
                            }
                        },
                        SAPOData: {
                            type: "structure",
                            members: {
                                objectPath: {}
                            }
                        }
                    }
                },
                incrementalPullConfig: {
                    type: "structure",
                    members: {
                        datetimeTypeFieldName: {}
                    }
                }
            }
        },
        S3a: {
            type: "list",
            member: {
                type: "structure",
                required: [ "connectorType", "destinationConnectorProperties" ],
                members: {
                    connectorType: {},
                    connectorProfileName: {},
                    destinationConnectorProperties: {
                        type: "structure",
                        members: {
                            Redshift: {
                                type: "structure",
                                required: [ "object", "intermediateBucketName" ],
                                members: {
                                    object: {},
                                    intermediateBucketName: {},
                                    bucketPrefix: {},
                                    errorHandlingConfig: {
                                        shape: "S3e"
                                    }
                                }
                            },
                            S3: {
                                type: "structure",
                                required: [ "bucketName" ],
                                members: {
                                    bucketName: {},
                                    bucketPrefix: {},
                                    s3OutputFormatConfig: {
                                        type: "structure",
                                        members: {
                                            fileType: {},
                                            prefixConfig: {
                                                shape: "S3i"
                                            },
                                            aggregationConfig: {
                                                shape: "S3l"
                                            }
                                        }
                                    }
                                }
                            },
                            Salesforce: {
                                type: "structure",
                                required: [ "object" ],
                                members: {
                                    object: {},
                                    idFieldNames: {
                                        shape: "S3o"
                                    },
                                    errorHandlingConfig: {
                                        shape: "S3e"
                                    },
                                    writeOperationType: {}
                                }
                            },
                            Snowflake: {
                                type: "structure",
                                required: [ "object", "intermediateBucketName" ],
                                members: {
                                    object: {},
                                    intermediateBucketName: {},
                                    bucketPrefix: {},
                                    errorHandlingConfig: {
                                        shape: "S3e"
                                    }
                                }
                            },
                            EventBridge: {
                                type: "structure",
                                required: [ "object" ],
                                members: {
                                    object: {},
                                    errorHandlingConfig: {
                                        shape: "S3e"
                                    }
                                }
                            },
                            LookoutMetrics: {
                                type: "structure",
                                members: {}
                            },
                            Upsolver: {
                                type: "structure",
                                required: [ "bucketName", "s3OutputFormatConfig" ],
                                members: {
                                    bucketName: {},
                                    bucketPrefix: {},
                                    s3OutputFormatConfig: {
                                        type: "structure",
                                        required: [ "prefixConfig" ],
                                        members: {
                                            fileType: {},
                                            prefixConfig: {
                                                shape: "S3i"
                                            },
                                            aggregationConfig: {
                                                shape: "S3l"
                                            }
                                        }
                                    }
                                }
                            },
                            Honeycode: {
                                type: "structure",
                                required: [ "object" ],
                                members: {
                                    object: {},
                                    errorHandlingConfig: {
                                        shape: "S3e"
                                    }
                                }
                            },
                            CustomerProfiles: {
                                type: "structure",
                                required: [ "domainName" ],
                                members: {
                                    domainName: {},
                                    objectTypeName: {}
                                }
                            },
                            Zendesk: {
                                type: "structure",
                                required: [ "object" ],
                                members: {
                                    object: {},
                                    idFieldNames: {
                                        shape: "S3o"
                                    },
                                    errorHandlingConfig: {
                                        shape: "S3e"
                                    },
                                    writeOperationType: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S3e: {
            type: "structure",
            members: {
                failOnFirstDestinationError: {
                    type: "boolean"
                },
                bucketPrefix: {},
                bucketName: {}
            }
        },
        S3i: {
            type: "structure",
            members: {
                prefixType: {},
                prefixFormat: {}
            }
        },
        S3l: {
            type: "structure",
            members: {
                aggregationType: {}
            }
        },
        S3o: {
            type: "list",
            member: {}
        },
        S42: {
            type: "list",
            member: {
                type: "structure",
                required: [ "sourceFields", "taskType" ],
                members: {
                    sourceFields: {
                        type: "list",
                        member: {}
                    },
                    connectorOperator: {
                        type: "structure",
                        members: {
                            Amplitude: {},
                            Datadog: {},
                            Dynatrace: {},
                            GoogleAnalytics: {},
                            InforNexus: {},
                            Marketo: {},
                            S3: {},
                            Salesforce: {},
                            ServiceNow: {},
                            Singular: {},
                            Slack: {},
                            Trendmicro: {},
                            Veeva: {},
                            Zendesk: {},
                            SAPOData: {}
                        }
                    },
                    destinationField: {},
                    taskType: {},
                    taskProperties: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S4r: {
            type: "map",
            key: {},
            value: {}
        },
        S5v: {
            type: "list",
            member: {}
        },
        S6s: {
            type: "structure",
            members: {
                mostRecentExecutionMessage: {},
                mostRecentExecutionTime: {
                    type: "timestamp"
                },
                mostRecentExecutionStatus: {}
            }
        }
    },
    paginators: {
        DescribeConnectorProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        DescribeConnectors: {
            input_token: "nextToken",
            output_token: "nextToken"
        },
        DescribeFlowExecutionRecords: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListFlows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

