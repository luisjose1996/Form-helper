AWS.apiLoader.services["stepfunctions"] = {};

AWS.StepFunctions = AWS.Service.defineService("stepfunctions", [ "2016-11-23" ]);

AWS.apiLoader.services["stepfunctions"]["2016-11-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-11-23",
        endpointPrefix: "states",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "AWS SFN",
        serviceFullName: "AWS Step Functions",
        serviceId: "SFN",
        signatureVersion: "v4",
        targetPrefix: "AWSStepFunctions",
        uid: "states-2016-11-23"
    },
    operations: {
        CreateActivity: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "activityArn", "creationDate" ],
                members: {
                    activityArn: {},
                    creationDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        CreateStateMachine: {
            input: {
                type: "structure",
                required: [ "name", "definition", "roleArn" ],
                members: {
                    name: {},
                    definition: {
                        shape: "Sb"
                    },
                    roleArn: {},
                    type: {},
                    loggingConfiguration: {
                        shape: "Sd"
                    },
                    tags: {
                        shape: "S3"
                    },
                    tracingConfiguration: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "stateMachineArn", "creationDate" ],
                members: {
                    stateMachineArn: {},
                    creationDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DeleteActivity: {
            input: {
                type: "structure",
                required: [ "activityArn" ],
                members: {
                    activityArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteStateMachine: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeActivity: {
            input: {
                type: "structure",
                required: [ "activityArn" ],
                members: {
                    activityArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "activityArn", "name", "creationDate" ],
                members: {
                    activityArn: {},
                    name: {},
                    creationDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeExecution: {
            input: {
                type: "structure",
                required: [ "executionArn" ],
                members: {
                    executionArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "executionArn", "stateMachineArn", "status", "startDate" ],
                members: {
                    executionArn: {},
                    stateMachineArn: {},
                    name: {},
                    status: {},
                    startDate: {
                        type: "timestamp"
                    },
                    stopDate: {
                        type: "timestamp"
                    },
                    input: {
                        shape: "Sv"
                    },
                    inputDetails: {
                        shape: "Sw"
                    },
                    output: {
                        shape: "Sv"
                    },
                    outputDetails: {
                        shape: "Sw"
                    },
                    traceHeader: {}
                }
            }
        },
        DescribeStateMachine: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "stateMachineArn", "name", "definition", "roleArn", "type", "creationDate" ],
                members: {
                    stateMachineArn: {},
                    name: {},
                    status: {},
                    definition: {
                        shape: "Sb"
                    },
                    roleArn: {},
                    type: {},
                    creationDate: {
                        type: "timestamp"
                    },
                    loggingConfiguration: {
                        shape: "Sd"
                    },
                    tracingConfiguration: {
                        shape: "Sj"
                    }
                }
            }
        },
        DescribeStateMachineForExecution: {
            input: {
                type: "structure",
                required: [ "executionArn" ],
                members: {
                    executionArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "stateMachineArn", "name", "definition", "roleArn", "updateDate" ],
                members: {
                    stateMachineArn: {},
                    name: {},
                    definition: {
                        shape: "Sb"
                    },
                    roleArn: {},
                    updateDate: {
                        type: "timestamp"
                    },
                    loggingConfiguration: {
                        shape: "Sd"
                    },
                    tracingConfiguration: {
                        shape: "Sj"
                    }
                }
            }
        },
        GetActivityTask: {
            input: {
                type: "structure",
                required: [ "activityArn" ],
                members: {
                    activityArn: {},
                    workerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    taskToken: {},
                    input: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        GetExecutionHistory: {
            input: {
                type: "structure",
                required: [ "executionArn" ],
                members: {
                    executionArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    },
                    nextToken: {},
                    includeExecutionData: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "events" ],
                members: {
                    events: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "timestamp", "type", "id" ],
                            members: {
                                timestamp: {
                                    type: "timestamp"
                                },
                                type: {},
                                id: {
                                    type: "long"
                                },
                                previousEventId: {
                                    type: "long"
                                },
                                activityFailedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                activityScheduleFailedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                activityScheduledEventDetails: {
                                    type: "structure",
                                    required: [ "resource" ],
                                    members: {
                                        resource: {},
                                        input: {
                                            shape: "Sv"
                                        },
                                        inputDetails: {
                                            shape: "S1n"
                                        },
                                        timeoutInSeconds: {
                                            type: "long"
                                        },
                                        heartbeatInSeconds: {
                                            type: "long"
                                        }
                                    }
                                },
                                activityStartedEventDetails: {
                                    type: "structure",
                                    members: {
                                        workerName: {}
                                    }
                                },
                                activitySucceededEventDetails: {
                                    type: "structure",
                                    members: {
                                        output: {
                                            shape: "Sv"
                                        },
                                        outputDetails: {
                                            shape: "S1n"
                                        }
                                    }
                                },
                                activityTimedOutEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                taskFailedEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                taskScheduledEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource", "region", "parameters" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        region: {},
                                        parameters: {
                                            type: "string",
                                            sensitive: true
                                        },
                                        timeoutInSeconds: {
                                            type: "long"
                                        },
                                        heartbeatInSeconds: {
                                            type: "long"
                                        }
                                    }
                                },
                                taskStartFailedEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                taskStartedEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {}
                                    }
                                },
                                taskSubmitFailedEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                taskSubmittedEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        output: {
                                            shape: "Sv"
                                        },
                                        outputDetails: {
                                            shape: "S1n"
                                        }
                                    }
                                },
                                taskSucceededEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        output: {
                                            shape: "Sv"
                                        },
                                        outputDetails: {
                                            shape: "S1n"
                                        }
                                    }
                                },
                                taskTimedOutEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                executionFailedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                executionStartedEventDetails: {
                                    type: "structure",
                                    members: {
                                        input: {
                                            shape: "Sv"
                                        },
                                        inputDetails: {
                                            shape: "S1n"
                                        },
                                        roleArn: {}
                                    }
                                },
                                executionSucceededEventDetails: {
                                    type: "structure",
                                    members: {
                                        output: {
                                            shape: "Sv"
                                        },
                                        outputDetails: {
                                            shape: "S1n"
                                        }
                                    }
                                },
                                executionAbortedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                executionTimedOutEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                mapStateStartedEventDetails: {
                                    type: "structure",
                                    members: {
                                        length: {
                                            type: "integer"
                                        }
                                    }
                                },
                                mapIterationStartedEventDetails: {
                                    shape: "S2a"
                                },
                                mapIterationSucceededEventDetails: {
                                    shape: "S2a"
                                },
                                mapIterationFailedEventDetails: {
                                    shape: "S2a"
                                },
                                mapIterationAbortedEventDetails: {
                                    shape: "S2a"
                                },
                                lambdaFunctionFailedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                lambdaFunctionScheduleFailedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                lambdaFunctionScheduledEventDetails: {
                                    type: "structure",
                                    required: [ "resource" ],
                                    members: {
                                        resource: {},
                                        input: {
                                            shape: "Sv"
                                        },
                                        inputDetails: {
                                            shape: "S1n"
                                        },
                                        timeoutInSeconds: {
                                            type: "long"
                                        }
                                    }
                                },
                                lambdaFunctionStartFailedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                lambdaFunctionSucceededEventDetails: {
                                    type: "structure",
                                    members: {
                                        output: {
                                            shape: "Sv"
                                        },
                                        outputDetails: {
                                            shape: "S1n"
                                        }
                                    }
                                },
                                lambdaFunctionTimedOutEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1j"
                                        },
                                        cause: {
                                            shape: "S1k"
                                        }
                                    }
                                },
                                stateEnteredEventDetails: {
                                    type: "structure",
                                    required: [ "name" ],
                                    members: {
                                        name: {},
                                        input: {
                                            shape: "Sv"
                                        },
                                        inputDetails: {
                                            shape: "S1n"
                                        }
                                    }
                                },
                                stateExitedEventDetails: {
                                    type: "structure",
                                    required: [ "name" ],
                                    members: {
                                        name: {},
                                        output: {
                                            shape: "Sv"
                                        },
                                        outputDetails: {
                                            shape: "S1n"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListActivities: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "activities" ],
                members: {
                    activities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "activityArn", "name", "creationDate" ],
                            members: {
                                activityArn: {},
                                name: {},
                                creationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListExecutions: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {},
                    statusFilter: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "executions" ],
                members: {
                    executions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "executionArn", "stateMachineArn", "name", "status", "startDate" ],
                            members: {
                                executionArn: {},
                                stateMachineArn: {},
                                name: {},
                                status: {},
                                startDate: {
                                    type: "timestamp"
                                },
                                stopDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListStateMachines: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "stateMachines" ],
                members: {
                    stateMachines: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "stateMachineArn", "name", "type", "creationDate" ],
                            members: {
                                stateMachineArn: {},
                                name: {},
                                type: {},
                                creationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S3"
                    }
                }
            }
        },
        SendTaskFailure: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {},
                    error: {
                        shape: "S1j"
                    },
                    cause: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendTaskHeartbeat: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendTaskSuccess: {
            input: {
                type: "structure",
                required: [ "taskToken", "output" ],
                members: {
                    taskToken: {},
                    output: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartExecution: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {},
                    name: {},
                    input: {
                        shape: "Sv"
                    },
                    traceHeader: {}
                }
            },
            output: {
                type: "structure",
                required: [ "executionArn", "startDate" ],
                members: {
                    executionArn: {},
                    startDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        StartSyncExecution: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {},
                    name: {},
                    input: {
                        shape: "Sv"
                    },
                    traceHeader: {}
                }
            },
            output: {
                type: "structure",
                required: [ "executionArn", "startDate", "stopDate", "status" ],
                members: {
                    executionArn: {},
                    stateMachineArn: {},
                    name: {},
                    startDate: {
                        type: "timestamp"
                    },
                    stopDate: {
                        type: "timestamp"
                    },
                    status: {},
                    error: {
                        shape: "S1j"
                    },
                    cause: {
                        shape: "S1k"
                    },
                    input: {
                        shape: "Sv"
                    },
                    inputDetails: {
                        shape: "Sw"
                    },
                    output: {
                        shape: "Sv"
                    },
                    outputDetails: {
                        shape: "Sw"
                    },
                    traceHeader: {},
                    billingDetails: {
                        type: "structure",
                        members: {
                            billedMemoryUsedInMB: {
                                type: "long"
                            },
                            billedDurationInMilliseconds: {
                                type: "long"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "sync-"
            }
        },
        StopExecution: {
            input: {
                type: "structure",
                required: [ "executionArn" ],
                members: {
                    executionArn: {},
                    error: {
                        shape: "S1j"
                    },
                    cause: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "stopDate" ],
                members: {
                    stopDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateStateMachine: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {},
                    definition: {
                        shape: "Sb"
                    },
                    roleArn: {},
                    loggingConfiguration: {
                        shape: "Sd"
                    },
                    tracingConfiguration: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "updateDate" ],
                members: {
                    updateDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sb: {
            type: "string",
            sensitive: true
        },
        Sd: {
            type: "structure",
            members: {
                level: {},
                includeExecutionData: {
                    type: "boolean"
                },
                destinations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            cloudWatchLogsLogGroup: {
                                type: "structure",
                                members: {
                                    logGroupArn: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                enabled: {
                    type: "boolean"
                }
            }
        },
        Sv: {
            type: "string",
            sensitive: true
        },
        Sw: {
            type: "structure",
            members: {
                included: {
                    type: "boolean"
                }
            }
        },
        S1j: {
            type: "string",
            sensitive: true
        },
        S1k: {
            type: "string",
            sensitive: true
        },
        S1n: {
            type: "structure",
            members: {
                truncated: {
                    type: "boolean"
                }
            }
        },
        S2a: {
            type: "structure",
            members: {
                name: {},
                index: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        GetExecutionHistory: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "events"
        },
        ListActivities: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "activities"
        },
        ListExecutions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "executions"
        },
        ListStateMachines: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "stateMachines"
        }
    }
};

AWS.apiLoader.services["support"] = {};

AWS.Support = AWS.Service.defineService("support", [ "2013-04-15" ]);

AWS.apiLoader.services["support"]["2013-04-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2013-04-15",
        endpointPrefix: "support",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Support",
        serviceId: "Support",
        signatureVersion: "v4",
        targetPrefix: "AWSSupport_20130415",
        uid: "support-2013-04-15"
    },
    operations: {
        AddAttachmentsToSet: {
            input: {
                type: "structure",
                required: [ "attachments" ],
                members: {
                    attachmentSetId: {},
                    attachments: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attachmentSetId: {},
                    expiryTime: {}
                }
            }
        },
        AddCommunicationToCase: {
            input: {
                type: "structure",
                required: [ "communicationBody" ],
                members: {
                    caseId: {},
                    communicationBody: {},
                    ccEmailAddresses: {
                        shape: "Sc"
                    },
                    attachmentSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    result: {
                        type: "boolean"
                    }
                }
            }
        },
        CreateCase: {
            input: {
                type: "structure",
                required: [ "subject", "communicationBody" ],
                members: {
                    subject: {},
                    serviceCode: {},
                    severityCode: {},
                    categoryCode: {},
                    communicationBody: {},
                    ccEmailAddresses: {
                        shape: "Sc"
                    },
                    language: {},
                    issueType: {},
                    attachmentSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    caseId: {}
                }
            }
        },
        DescribeAttachment: {
            input: {
                type: "structure",
                required: [ "attachmentId" ],
                members: {
                    attachmentId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    attachment: {
                        shape: "S4"
                    }
                }
            }
        },
        DescribeCases: {
            input: {
                type: "structure",
                members: {
                    caseIdList: {
                        type: "list",
                        member: {}
                    },
                    displayId: {},
                    afterTime: {},
                    beforeTime: {},
                    includeResolvedCases: {
                        type: "boolean"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    language: {},
                    includeCommunications: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cases: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                caseId: {},
                                displayId: {},
                                subject: {},
                                status: {},
                                serviceCode: {},
                                categoryCode: {},
                                severityCode: {},
                                submittedBy: {},
                                timeCreated: {},
                                recentCommunications: {
                                    type: "structure",
                                    members: {
                                        communications: {
                                            shape: "S17"
                                        },
                                        nextToken: {}
                                    }
                                },
                                ccEmailAddresses: {
                                    shape: "Sc"
                                },
                                language: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeCommunications: {
            input: {
                type: "structure",
                required: [ "caseId" ],
                members: {
                    caseId: {},
                    beforeTime: {},
                    afterTime: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    communications: {
                        shape: "S17"
                    },
                    nextToken: {}
                }
            }
        },
        DescribeServices: {
            input: {
                type: "structure",
                members: {
                    serviceCodeList: {
                        type: "list",
                        member: {}
                    },
                    language: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    services: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                code: {},
                                name: {},
                                categories: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            code: {},
                                            name: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeSeverityLevels: {
            input: {
                type: "structure",
                members: {
                    language: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    severityLevels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                code: {},
                                name: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeTrustedAdvisorCheckRefreshStatuses: {
            input: {
                type: "structure",
                required: [ "checkIds" ],
                members: {
                    checkIds: {
                        shape: "S1t"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "statuses" ],
                members: {
                    statuses: {
                        type: "list",
                        member: {
                            shape: "S1x"
                        }
                    }
                }
            }
        },
        DescribeTrustedAdvisorCheckResult: {
            input: {
                type: "structure",
                required: [ "checkId" ],
                members: {
                    checkId: {},
                    language: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    result: {
                        type: "structure",
                        required: [ "checkId", "timestamp", "status", "resourcesSummary", "categorySpecificSummary", "flaggedResources" ],
                        members: {
                            checkId: {},
                            timestamp: {},
                            status: {},
                            resourcesSummary: {
                                shape: "S22"
                            },
                            categorySpecificSummary: {
                                shape: "S23"
                            },
                            flaggedResources: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "status", "resourceId", "metadata" ],
                                    members: {
                                        status: {},
                                        region: {},
                                        resourceId: {},
                                        isSuppressed: {
                                            type: "boolean"
                                        },
                                        metadata: {
                                            shape: "S1t"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeTrustedAdvisorCheckSummaries: {
            input: {
                type: "structure",
                required: [ "checkIds" ],
                members: {
                    checkIds: {
                        shape: "S1t"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "summaries" ],
                members: {
                    summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "checkId", "timestamp", "status", "resourcesSummary", "categorySpecificSummary" ],
                            members: {
                                checkId: {},
                                timestamp: {},
                                status: {},
                                hasFlaggedResources: {
                                    type: "boolean"
                                },
                                resourcesSummary: {
                                    shape: "S22"
                                },
                                categorySpecificSummary: {
                                    shape: "S23"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeTrustedAdvisorChecks: {
            input: {
                type: "structure",
                required: [ "language" ],
                members: {
                    language: {}
                }
            },
            output: {
                type: "structure",
                required: [ "checks" ],
                members: {
                    checks: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name", "description", "category", "metadata" ],
                            members: {
                                id: {},
                                name: {},
                                description: {},
                                category: {},
                                metadata: {
                                    shape: "S1t"
                                }
                            }
                        }
                    }
                }
            }
        },
        RefreshTrustedAdvisorCheck: {
            input: {
                type: "structure",
                required: [ "checkId" ],
                members: {
                    checkId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {
                        shape: "S1x"
                    }
                }
            }
        },
        ResolveCase: {
            input: {
                type: "structure",
                members: {
                    caseId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    initialCaseStatus: {},
                    finalCaseStatus: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                fileName: {},
                data: {
                    type: "blob"
                }
            }
        },
        Sc: {
            type: "list",
            member: {}
        },
        S17: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    caseId: {},
                    body: {},
                    submittedBy: {},
                    timeCreated: {},
                    attachmentSet: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                attachmentId: {},
                                fileName: {}
                            }
                        }
                    }
                }
            }
        },
        S1t: {
            type: "list",
            member: {}
        },
        S1x: {
            type: "structure",
            required: [ "checkId", "status", "millisUntilNextRefreshable" ],
            members: {
                checkId: {},
                status: {},
                millisUntilNextRefreshable: {
                    type: "long"
                }
            }
        },
        S22: {
            type: "structure",
            required: [ "resourcesProcessed", "resourcesFlagged", "resourcesIgnored", "resourcesSuppressed" ],
            members: {
                resourcesProcessed: {
                    type: "long"
                },
                resourcesFlagged: {
                    type: "long"
                },
                resourcesIgnored: {
                    type: "long"
                },
                resourcesSuppressed: {
                    type: "long"
                }
            }
        },
        S23: {
            type: "structure",
            members: {
                costOptimizing: {
                    type: "structure",
                    required: [ "estimatedMonthlySavings", "estimatedPercentMonthlySavings" ],
                    members: {
                        estimatedMonthlySavings: {
                            type: "double"
                        },
                        estimatedPercentMonthlySavings: {
                            type: "double"
                        }
                    }
                }
            }
        }
    },
    paginators: {
        DescribeCases: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "cases"
        },
        DescribeCommunications: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "communications"
        },
        DescribeServices: {
            result_key: "services"
        },
        DescribeTrustedAdvisorCheckRefreshStatuses: {
            result_key: "statuses"
        },
        DescribeTrustedAdvisorCheckSummaries: {
            result_key: "summaries"
        }
    }
};

AWS.apiLoader.services["swf"] = {};

AWS.SWF = AWS.Service.defineService("swf", [ "2012-01-25" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    113: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.util.hideProperties(AWS, [ "SimpleWorkflow" ]);
        AWS.SimpleWorkflow = AWS.SWF;
    }, {
        "../core": 39
    } ]
}, {}, [ 113 ]);

AWS.apiLoader.services["swf"]["2012-01-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2012-01-25",
        endpointPrefix: "swf",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "Amazon SWF",
        serviceFullName: "Amazon Simple Workflow Service",
        serviceId: "SWF",
        signatureVersion: "v4",
        targetPrefix: "SimpleWorkflowService",
        uid: "swf-2012-01-25"
    },
    operations: {
        CountClosedWorkflowExecutions: {
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {},
                    startTimeFilter: {
                        shape: "S3"
                    },
                    closeTimeFilter: {
                        shape: "S3"
                    },
                    executionFilter: {
                        shape: "S5"
                    },
                    typeFilter: {
                        shape: "S7"
                    },
                    tagFilter: {
                        shape: "Sa"
                    },
                    closeStatusFilter: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                shape: "Se"
            }
        },
        CountOpenWorkflowExecutions: {
            input: {
                type: "structure",
                required: [ "domain", "startTimeFilter" ],
                members: {
                    domain: {},
                    startTimeFilter: {
                        shape: "S3"
                    },
                    typeFilter: {
                        shape: "S7"
                    },
                    tagFilter: {
                        shape: "Sa"
                    },
                    executionFilter: {
                        shape: "S5"
                    }
                }
            },
            output: {
                shape: "Se"
            }
        },
        CountPendingActivityTasks: {
            input: {
                type: "structure",
                required: [ "domain", "taskList" ],
                members: {
                    domain: {},
                    taskList: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                shape: "Sk"
            }
        },
        CountPendingDecisionTasks: {
            input: {
                type: "structure",
                required: [ "domain", "taskList" ],
                members: {
                    domain: {},
                    taskList: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                shape: "Sk"
            }
        },
        DeprecateActivityType: {
            input: {
                type: "structure",
                required: [ "domain", "activityType" ],
                members: {
                    domain: {},
                    activityType: {
                        shape: "Sn"
                    }
                }
            }
        },
        DeprecateDomain: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            }
        },
        DeprecateWorkflowType: {
            input: {
                type: "structure",
                required: [ "domain", "workflowType" ],
                members: {
                    domain: {},
                    workflowType: {
                        shape: "Sr"
                    }
                }
            }
        },
        DescribeActivityType: {
            input: {
                type: "structure",
                required: [ "domain", "activityType" ],
                members: {
                    domain: {},
                    activityType: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "typeInfo", "configuration" ],
                members: {
                    typeInfo: {
                        shape: "Su"
                    },
                    configuration: {
                        type: "structure",
                        members: {
                            defaultTaskStartToCloseTimeout: {},
                            defaultTaskHeartbeatTimeout: {},
                            defaultTaskList: {
                                shape: "Sj"
                            },
                            defaultTaskPriority: {},
                            defaultTaskScheduleToStartTimeout: {},
                            defaultTaskScheduleToCloseTimeout: {}
                        }
                    }
                }
            }
        },
        DescribeDomain: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainInfo", "configuration" ],
                members: {
                    domainInfo: {
                        shape: "S12"
                    },
                    configuration: {
                        type: "structure",
                        required: [ "workflowExecutionRetentionPeriodInDays" ],
                        members: {
                            workflowExecutionRetentionPeriodInDays: {}
                        }
                    }
                }
            }
        },
        DescribeWorkflowExecution: {
            input: {
                type: "structure",
                required: [ "domain", "execution" ],
                members: {
                    domain: {},
                    execution: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "executionInfo", "executionConfiguration", "openCounts" ],
                members: {
                    executionInfo: {
                        shape: "S1a"
                    },
                    executionConfiguration: {
                        type: "structure",
                        required: [ "taskStartToCloseTimeout", "executionStartToCloseTimeout", "taskList", "childPolicy" ],
                        members: {
                            taskStartToCloseTimeout: {},
                            executionStartToCloseTimeout: {},
                            taskList: {
                                shape: "Sj"
                            },
                            taskPriority: {},
                            childPolicy: {},
                            lambdaRole: {}
                        }
                    },
                    openCounts: {
                        type: "structure",
                        required: [ "openActivityTasks", "openDecisionTasks", "openTimers", "openChildWorkflowExecutions" ],
                        members: {
                            openActivityTasks: {
                                type: "integer"
                            },
                            openDecisionTasks: {
                                type: "integer"
                            },
                            openTimers: {
                                type: "integer"
                            },
                            openChildWorkflowExecutions: {
                                type: "integer"
                            },
                            openLambdaFunctions: {
                                type: "integer"
                            }
                        }
                    },
                    latestActivityTaskTimestamp: {
                        type: "timestamp"
                    },
                    latestExecutionContext: {}
                }
            }
        },
        DescribeWorkflowType: {
            input: {
                type: "structure",
                required: [ "domain", "workflowType" ],
                members: {
                    domain: {},
                    workflowType: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "typeInfo", "configuration" ],
                members: {
                    typeInfo: {
                        shape: "S1m"
                    },
                    configuration: {
                        type: "structure",
                        members: {
                            defaultTaskStartToCloseTimeout: {},
                            defaultExecutionStartToCloseTimeout: {},
                            defaultTaskList: {
                                shape: "Sj"
                            },
                            defaultTaskPriority: {},
                            defaultChildPolicy: {},
                            defaultLambdaRole: {}
                        }
                    }
                }
            }
        },
        GetWorkflowExecutionHistory: {
            input: {
                type: "structure",
                required: [ "domain", "execution" ],
                members: {
                    domain: {},
                    execution: {
                        shape: "S17"
                    },
                    nextPageToken: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "events" ],
                members: {
                    events: {
                        shape: "S1t"
                    },
                    nextPageToken: {}
                }
            }
        },
        ListActivityTypes: {
            input: {
                type: "structure",
                required: [ "domain", "registrationStatus" ],
                members: {
                    domain: {},
                    name: {},
                    registrationStatus: {},
                    nextPageToken: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "typeInfos" ],
                members: {
                    typeInfos: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        ListClosedWorkflowExecutions: {
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {},
                    startTimeFilter: {
                        shape: "S3"
                    },
                    closeTimeFilter: {
                        shape: "S3"
                    },
                    executionFilter: {
                        shape: "S5"
                    },
                    closeStatusFilter: {
                        shape: "Sc"
                    },
                    typeFilter: {
                        shape: "S7"
                    },
                    tagFilter: {
                        shape: "Sa"
                    },
                    nextPageToken: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S4g"
            }
        },
        ListDomains: {
            input: {
                type: "structure",
                required: [ "registrationStatus" ],
                members: {
                    nextPageToken: {},
                    registrationStatus: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainInfos" ],
                members: {
                    domainInfos: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        ListOpenWorkflowExecutions: {
            input: {
                type: "structure",
                required: [ "domain", "startTimeFilter" ],
                members: {
                    domain: {},
                    startTimeFilter: {
                        shape: "S3"
                    },
                    typeFilter: {
                        shape: "S7"
                    },
                    tagFilter: {
                        shape: "Sa"
                    },
                    nextPageToken: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    },
                    executionFilter: {
                        shape: "S5"
                    }
                }
            },
            output: {
                shape: "S4g"
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S4o"
                    }
                }
            }
        },
        ListWorkflowTypes: {
            input: {
                type: "structure",
                required: [ "domain", "registrationStatus" ],
                members: {
                    domain: {},
                    name: {},
                    registrationStatus: {},
                    nextPageToken: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "typeInfos" ],
                members: {
                    typeInfos: {
                        type: "list",
                        member: {
                            shape: "S1m"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        PollForActivityTask: {
            input: {
                type: "structure",
                required: [ "domain", "taskList" ],
                members: {
                    domain: {},
                    taskList: {
                        shape: "Sj"
                    },
                    identity: {}
                }
            },
            output: {
                type: "structure",
                required: [ "taskToken", "activityId", "startedEventId", "workflowExecution", "activityType" ],
                members: {
                    taskToken: {},
                    activityId: {},
                    startedEventId: {
                        type: "long"
                    },
                    workflowExecution: {
                        shape: "S17"
                    },
                    activityType: {
                        shape: "Sn"
                    },
                    input: {}
                }
            }
        },
        PollForDecisionTask: {
            input: {
                type: "structure",
                required: [ "domain", "taskList" ],
                members: {
                    domain: {},
                    taskList: {
                        shape: "Sj"
                    },
                    identity: {},
                    nextPageToken: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "taskToken", "startedEventId", "workflowExecution", "workflowType", "events" ],
                members: {
                    taskToken: {},
                    startedEventId: {
                        type: "long"
                    },
                    workflowExecution: {
                        shape: "S17"
                    },
                    workflowType: {
                        shape: "Sr"
                    },
                    events: {
                        shape: "S1t"
                    },
                    nextPageToken: {},
                    previousStartedEventId: {
                        type: "long"
                    }
                }
            }
        },
        RecordActivityTaskHeartbeat: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {},
                    details: {}
                }
            },
            output: {
                type: "structure",
                required: [ "cancelRequested" ],
                members: {
                    cancelRequested: {
                        type: "boolean"
                    }
                }
            }
        },
        RegisterActivityType: {
            input: {
                type: "structure",
                required: [ "domain", "name", "version" ],
                members: {
                    domain: {},
                    name: {},
                    version: {},
                    description: {},
                    defaultTaskStartToCloseTimeout: {},
                    defaultTaskHeartbeatTimeout: {},
                    defaultTaskList: {
                        shape: "Sj"
                    },
                    defaultTaskPriority: {},
                    defaultTaskScheduleToStartTimeout: {},
                    defaultTaskScheduleToCloseTimeout: {}
                }
            }
        },
        RegisterDomain: {
            input: {
                type: "structure",
                required: [ "name", "workflowExecutionRetentionPeriodInDays" ],
                members: {
                    name: {},
                    description: {},
                    workflowExecutionRetentionPeriodInDays: {},
                    tags: {
                        shape: "S4o"
                    }
                }
            }
        },
        RegisterWorkflowType: {
            input: {
                type: "structure",
                required: [ "domain", "name", "version" ],
                members: {
                    domain: {},
                    name: {},
                    version: {},
                    description: {},
                    defaultTaskStartToCloseTimeout: {},
                    defaultExecutionStartToCloseTimeout: {},
                    defaultTaskList: {
                        shape: "Sj"
                    },
                    defaultTaskPriority: {},
                    defaultChildPolicy: {},
                    defaultLambdaRole: {}
                }
            }
        },
        RequestCancelWorkflowExecution: {
            input: {
                type: "structure",
                required: [ "domain", "workflowId" ],
                members: {
                    domain: {},
                    workflowId: {},
                    runId: {}
                }
            }
        },
        RespondActivityTaskCanceled: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {},
                    details: {}
                }
            }
        },
        RespondActivityTaskCompleted: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {},
                    result: {}
                }
            }
        },
        RespondActivityTaskFailed: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {},
                    reason: {},
                    details: {}
                }
            }
        },
        RespondDecisionTaskCompleted: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {},
                    decisions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "decisionType" ],
                            members: {
                                decisionType: {},
                                scheduleActivityTaskDecisionAttributes: {
                                    type: "structure",
                                    required: [ "activityType", "activityId" ],
                                    members: {
                                        activityType: {
                                            shape: "Sn"
                                        },
                                        activityId: {},
                                        control: {},
                                        input: {},
                                        scheduleToCloseTimeout: {},
                                        taskList: {
                                            shape: "Sj"
                                        },
                                        taskPriority: {},
                                        scheduleToStartTimeout: {},
                                        startToCloseTimeout: {},
                                        heartbeatTimeout: {}
                                    }
                                },
                                requestCancelActivityTaskDecisionAttributes: {
                                    type: "structure",
                                    required: [ "activityId" ],
                                    members: {
                                        activityId: {}
                                    }
                                },
                                completeWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    members: {
                                        result: {}
                                    }
                                },
                                failWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    members: {
                                        reason: {},
                                        details: {}
                                    }
                                },
                                cancelWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    members: {
                                        details: {}
                                    }
                                },
                                continueAsNewWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    members: {
                                        input: {},
                                        executionStartToCloseTimeout: {},
                                        taskList: {
                                            shape: "Sj"
                                        },
                                        taskPriority: {},
                                        taskStartToCloseTimeout: {},
                                        childPolicy: {},
                                        tagList: {
                                            shape: "S1c"
                                        },
                                        workflowTypeVersion: {},
                                        lambdaRole: {}
                                    }
                                },
                                recordMarkerDecisionAttributes: {
                                    type: "structure",
                                    required: [ "markerName" ],
                                    members: {
                                        markerName: {},
                                        details: {}
                                    }
                                },
                                startTimerDecisionAttributes: {
                                    type: "structure",
                                    required: [ "timerId", "startToFireTimeout" ],
                                    members: {
                                        timerId: {},
                                        control: {},
                                        startToFireTimeout: {}
                                    }
                                },
                                cancelTimerDecisionAttributes: {
                                    type: "structure",
                                    required: [ "timerId" ],
                                    members: {
                                        timerId: {}
                                    }
                                },
                                signalExternalWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    required: [ "workflowId", "signalName" ],
                                    members: {
                                        workflowId: {},
                                        runId: {},
                                        signalName: {},
                                        input: {},
                                        control: {}
                                    }
                                },
                                requestCancelExternalWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    required: [ "workflowId" ],
                                    members: {
                                        workflowId: {},
                                        runId: {},
                                        control: {}
                                    }
                                },
                                startChildWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    required: [ "workflowType", "workflowId" ],
                                    members: {
                                        workflowType: {
                                            shape: "Sr"
                                        },
                                        workflowId: {},
                                        control: {},
                                        input: {},
                                        executionStartToCloseTimeout: {},
                                        taskList: {
                                            shape: "Sj"
                                        },
                                        taskPriority: {},
                                        taskStartToCloseTimeout: {},
                                        childPolicy: {},
                                        tagList: {
                                            shape: "S1c"
                                        },
                                        lambdaRole: {}
                                    }
                                },
                                scheduleLambdaFunctionDecisionAttributes: {
                                    type: "structure",
                                    required: [ "id", "name" ],
                                    members: {
                                        id: {},
                                        name: {},
                                        control: {},
                                        input: {},
                                        startToCloseTimeout: {}
                                    }
                                }
                            }
                        }
                    },
                    executionContext: {}
                }
            }
        },
        SignalWorkflowExecution: {
            input: {
                type: "structure",
                required: [ "domain", "workflowId", "signalName" ],
                members: {
                    domain: {},
                    workflowId: {},
                    runId: {},
                    signalName: {},
                    input: {}
                }
            }
        },
        StartWorkflowExecution: {
            input: {
                type: "structure",
                required: [ "domain", "workflowId", "workflowType" ],
                members: {
                    domain: {},
                    workflowId: {},
                    workflowType: {
                        shape: "Sr"
                    },
                    taskList: {
                        shape: "Sj"
                    },
                    taskPriority: {},
                    input: {},
                    executionStartToCloseTimeout: {},
                    tagList: {
                        shape: "S1c"
                    },
                    taskStartToCloseTimeout: {},
                    childPolicy: {},
                    lambdaRole: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    runId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S4o"
                    }
                }
            }
        },
        TerminateWorkflowExecution: {
            input: {
                type: "structure",
                required: [ "domain", "workflowId" ],
                members: {
                    domain: {},
                    workflowId: {},
                    runId: {},
                    reason: {},
                    details: {},
                    childPolicy: {}
                }
            }
        },
        UndeprecateActivityType: {
            input: {
                type: "structure",
                required: [ "domain", "activityType" ],
                members: {
                    domain: {},
                    activityType: {
                        shape: "Sn"
                    }
                }
            }
        },
        UndeprecateDomain: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            }
        },
        UndeprecateWorkflowType: {
            input: {
                type: "structure",
                required: [ "domain", "workflowType" ],
                members: {
                    domain: {},
                    workflowType: {
                        shape: "Sr"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "oldestDate" ],
            members: {
                oldestDate: {
                    type: "timestamp"
                },
                latestDate: {
                    type: "timestamp"
                }
            }
        },
        S5: {
            type: "structure",
            required: [ "workflowId" ],
            members: {
                workflowId: {}
            }
        },
        S7: {
            type: "structure",
            required: [ "name" ],
            members: {
                name: {},
                version: {}
            }
        },
        Sa: {
            type: "structure",
            required: [ "tag" ],
            members: {
                tag: {}
            }
        },
        Sc: {
            type: "structure",
            required: [ "status" ],
            members: {
                status: {}
            }
        },
        Se: {
            type: "structure",
            required: [ "count" ],
            members: {
                count: {
                    type: "integer"
                },
                truncated: {
                    type: "boolean"
                }
            }
        },
        Sj: {
            type: "structure",
            required: [ "name" ],
            members: {
                name: {}
            }
        },
        Sk: {
            type: "structure",
            required: [ "count" ],
            members: {
                count: {
                    type: "integer"
                },
                truncated: {
                    type: "boolean"
                }
            }
        },
        Sn: {
            type: "structure",
            required: [ "name", "version" ],
            members: {
                name: {},
                version: {}
            }
        },
        Sr: {
            type: "structure",
            required: [ "name", "version" ],
            members: {
                name: {},
                version: {}
            }
        },
        Su: {
            type: "structure",
            required: [ "activityType", "status", "creationDate" ],
            members: {
                activityType: {
                    shape: "Sn"
                },
                status: {},
                description: {},
                creationDate: {
                    type: "timestamp"
                },
                deprecationDate: {
                    type: "timestamp"
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "name", "status" ],
            members: {
                name: {},
                status: {},
                description: {},
                arn: {}
            }
        },
        S17: {
            type: "structure",
            required: [ "workflowId", "runId" ],
            members: {
                workflowId: {},
                runId: {}
            }
        },
        S1a: {
            type: "structure",
            required: [ "execution", "workflowType", "startTimestamp", "executionStatus" ],
            members: {
                execution: {
                    shape: "S17"
                },
                workflowType: {
                    shape: "Sr"
                },
                startTimestamp: {
                    type: "timestamp"
                },
                closeTimestamp: {
                    type: "timestamp"
                },
                executionStatus: {},
                closeStatus: {},
                parent: {
                    shape: "S17"
                },
                tagList: {
                    shape: "S1c"
                },
                cancelRequested: {
                    type: "boolean"
                }
            }
        },
        S1c: {
            type: "list",
            member: {}
        },
        S1m: {
            type: "structure",
            required: [ "workflowType", "status", "creationDate" ],
            members: {
                workflowType: {
                    shape: "Sr"
                },
                status: {},
                description: {},
                creationDate: {
                    type: "timestamp"
                },
                deprecationDate: {
                    type: "timestamp"
                }
            }
        },
        S1t: {
            type: "list",
            member: {
                type: "structure",
                required: [ "eventTimestamp", "eventType", "eventId" ],
                members: {
                    eventTimestamp: {
                        type: "timestamp"
                    },
                    eventType: {},
                    eventId: {
                        type: "long"
                    },
                    workflowExecutionStartedEventAttributes: {
                        type: "structure",
                        required: [ "childPolicy", "taskList", "workflowType" ],
                        members: {
                            input: {},
                            executionStartToCloseTimeout: {},
                            taskStartToCloseTimeout: {},
                            childPolicy: {},
                            taskList: {
                                shape: "Sj"
                            },
                            taskPriority: {},
                            workflowType: {
                                shape: "Sr"
                            },
                            tagList: {
                                shape: "S1c"
                            },
                            continuedExecutionRunId: {},
                            parentWorkflowExecution: {
                                shape: "S17"
                            },
                            parentInitiatedEventId: {
                                type: "long"
                            },
                            lambdaRole: {}
                        }
                    },
                    workflowExecutionCompletedEventAttributes: {
                        type: "structure",
                        required: [ "decisionTaskCompletedEventId" ],
                        members: {
                            result: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    completeWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    workflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "decisionTaskCompletedEventId" ],
                        members: {
                            reason: {},
                            details: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    failWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    workflowExecutionTimedOutEventAttributes: {
                        type: "structure",
                        required: [ "timeoutType", "childPolicy" ],
                        members: {
                            timeoutType: {},
                            childPolicy: {}
                        }
                    },
                    workflowExecutionCanceledEventAttributes: {
                        type: "structure",
                        required: [ "decisionTaskCompletedEventId" ],
                        members: {
                            details: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    cancelWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    workflowExecutionContinuedAsNewEventAttributes: {
                        type: "structure",
                        required: [ "decisionTaskCompletedEventId", "newExecutionRunId", "taskList", "childPolicy", "workflowType" ],
                        members: {
                            input: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            newExecutionRunId: {},
                            executionStartToCloseTimeout: {},
                            taskList: {
                                shape: "Sj"
                            },
                            taskPriority: {},
                            taskStartToCloseTimeout: {},
                            childPolicy: {},
                            tagList: {
                                shape: "S1c"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            lambdaRole: {}
                        }
                    },
                    continueAsNewWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    workflowExecutionTerminatedEventAttributes: {
                        type: "structure",
                        required: [ "childPolicy" ],
                        members: {
                            reason: {},
                            details: {},
                            childPolicy: {},
                            cause: {}
                        }
                    },
                    workflowExecutionCancelRequestedEventAttributes: {
                        type: "structure",
                        members: {
                            externalWorkflowExecution: {
                                shape: "S17"
                            },
                            externalInitiatedEventId: {
                                type: "long"
                            },
                            cause: {}
                        }
                    },
                    decisionTaskScheduledEventAttributes: {
                        type: "structure",
                        required: [ "taskList" ],
                        members: {
                            taskList: {
                                shape: "Sj"
                            },
                            taskPriority: {},
                            startToCloseTimeout: {}
                        }
                    },
                    decisionTaskStartedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId" ],
                        members: {
                            identity: {},
                            scheduledEventId: {
                                type: "long"
                            }
                        }
                    },
                    decisionTaskCompletedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            executionContext: {},
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    decisionTaskTimedOutEventAttributes: {
                        type: "structure",
                        required: [ "timeoutType", "scheduledEventId", "startedEventId" ],
                        members: {
                            timeoutType: {},
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    activityTaskScheduledEventAttributes: {
                        type: "structure",
                        required: [ "activityType", "activityId", "taskList", "decisionTaskCompletedEventId" ],
                        members: {
                            activityType: {
                                shape: "Sn"
                            },
                            activityId: {},
                            input: {},
                            control: {},
                            scheduleToStartTimeout: {},
                            scheduleToCloseTimeout: {},
                            startToCloseTimeout: {},
                            taskList: {
                                shape: "Sj"
                            },
                            taskPriority: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            heartbeatTimeout: {}
                        }
                    },
                    activityTaskStartedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId" ],
                        members: {
                            identity: {},
                            scheduledEventId: {
                                type: "long"
                            }
                        }
                    },
                    activityTaskCompletedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            result: {},
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    activityTaskFailedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            reason: {},
                            details: {},
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    activityTaskTimedOutEventAttributes: {
                        type: "structure",
                        required: [ "timeoutType", "scheduledEventId", "startedEventId" ],
                        members: {
                            timeoutType: {},
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            },
                            details: {}
                        }
                    },
                    activityTaskCanceledEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            details: {},
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            },
                            latestCancelRequestedEventId: {
                                type: "long"
                            }
                        }
                    },
                    activityTaskCancelRequestedEventAttributes: {
                        type: "structure",
                        required: [ "decisionTaskCompletedEventId", "activityId" ],
                        members: {
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            activityId: {}
                        }
                    },
                    workflowExecutionSignaledEventAttributes: {
                        type: "structure",
                        required: [ "signalName" ],
                        members: {
                            signalName: {},
                            input: {},
                            externalWorkflowExecution: {
                                shape: "S17"
                            },
                            externalInitiatedEventId: {
                                type: "long"
                            }
                        }
                    },
                    markerRecordedEventAttributes: {
                        type: "structure",
                        required: [ "markerName", "decisionTaskCompletedEventId" ],
                        members: {
                            markerName: {},
                            details: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    recordMarkerFailedEventAttributes: {
                        type: "structure",
                        required: [ "markerName", "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            markerName: {},
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    timerStartedEventAttributes: {
                        type: "structure",
                        required: [ "timerId", "startToFireTimeout", "decisionTaskCompletedEventId" ],
                        members: {
                            timerId: {},
                            control: {},
                            startToFireTimeout: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    timerFiredEventAttributes: {
                        type: "structure",
                        required: [ "timerId", "startedEventId" ],
                        members: {
                            timerId: {},
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    timerCanceledEventAttributes: {
                        type: "structure",
                        required: [ "timerId", "startedEventId", "decisionTaskCompletedEventId" ],
                        members: {
                            timerId: {},
                            startedEventId: {
                                type: "long"
                            },
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    startChildWorkflowExecutionInitiatedEventAttributes: {
                        type: "structure",
                        required: [ "workflowId", "workflowType", "taskList", "decisionTaskCompletedEventId", "childPolicy" ],
                        members: {
                            workflowId: {},
                            workflowType: {
                                shape: "Sr"
                            },
                            control: {},
                            input: {},
                            executionStartToCloseTimeout: {},
                            taskList: {
                                shape: "Sj"
                            },
                            taskPriority: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            childPolicy: {},
                            taskStartToCloseTimeout: {},
                            tagList: {
                                shape: "S1c"
                            },
                            lambdaRole: {}
                        }
                    },
                    childWorkflowExecutionStartedEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "workflowType", "initiatedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            initiatedEventId: {
                                type: "long"
                            }
                        }
                    },
                    childWorkflowExecutionCompletedEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "workflowType", "initiatedEventId", "startedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            result: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    childWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "workflowType", "initiatedEventId", "startedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            reason: {},
                            details: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    childWorkflowExecutionTimedOutEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "workflowType", "timeoutType", "initiatedEventId", "startedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            timeoutType: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    childWorkflowExecutionCanceledEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "workflowType", "initiatedEventId", "startedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            details: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    childWorkflowExecutionTerminatedEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "workflowType", "initiatedEventId", "startedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            initiatedEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    signalExternalWorkflowExecutionInitiatedEventAttributes: {
                        type: "structure",
                        required: [ "workflowId", "signalName", "decisionTaskCompletedEventId" ],
                        members: {
                            workflowId: {},
                            runId: {},
                            signalName: {},
                            input: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            control: {}
                        }
                    },
                    externalWorkflowExecutionSignaledEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "initiatedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            initiatedEventId: {
                                type: "long"
                            }
                        }
                    },
                    signalExternalWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "workflowId", "cause", "initiatedEventId", "decisionTaskCompletedEventId" ],
                        members: {
                            workflowId: {},
                            runId: {},
                            cause: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            control: {}
                        }
                    },
                    externalWorkflowExecutionCancelRequestedEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "initiatedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            initiatedEventId: {
                                type: "long"
                            }
                        }
                    },
                    requestCancelExternalWorkflowExecutionInitiatedEventAttributes: {
                        type: "structure",
                        required: [ "workflowId", "decisionTaskCompletedEventId" ],
                        members: {
                            workflowId: {},
                            runId: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            control: {}
                        }
                    },
                    requestCancelExternalWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "workflowId", "cause", "initiatedEventId", "decisionTaskCompletedEventId" ],
                        members: {
                            workflowId: {},
                            runId: {},
                            cause: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            control: {}
                        }
                    },
                    scheduleActivityTaskFailedEventAttributes: {
                        type: "structure",
                        required: [ "activityType", "activityId", "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            activityType: {
                                shape: "Sn"
                            },
                            activityId: {},
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    requestCancelActivityTaskFailedEventAttributes: {
                        type: "structure",
                        required: [ "activityId", "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            activityId: {},
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    startTimerFailedEventAttributes: {
                        type: "structure",
                        required: [ "timerId", "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            timerId: {},
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    cancelTimerFailedEventAttributes: {
                        type: "structure",
                        required: [ "timerId", "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            timerId: {},
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    startChildWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "workflowType", "cause", "workflowId", "initiatedEventId", "decisionTaskCompletedEventId" ],
                        members: {
                            workflowType: {
                                shape: "Sr"
                            },
                            cause: {},
                            workflowId: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            control: {}
                        }
                    },
                    lambdaFunctionScheduledEventAttributes: {
                        type: "structure",
                        required: [ "id", "name", "decisionTaskCompletedEventId" ],
                        members: {
                            id: {},
                            name: {},
                            control: {},
                            input: {},
                            startToCloseTimeout: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    lambdaFunctionStartedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId" ],
                        members: {
                            scheduledEventId: {
                                type: "long"
                            }
                        }
                    },
                    lambdaFunctionCompletedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            },
                            result: {}
                        }
                    },
                    lambdaFunctionFailedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            },
                            reason: {},
                            details: {}
                        }
                    },
                    lambdaFunctionTimedOutEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            },
                            timeoutType: {}
                        }
                    },
                    scheduleLambdaFunctionFailedEventAttributes: {
                        type: "structure",
                        required: [ "id", "name", "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            id: {},
                            name: {},
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    startLambdaFunctionFailedEventAttributes: {
                        type: "structure",
                        members: {
                            scheduledEventId: {
                                type: "long"
                            },
                            cause: {},
                            message: {}
                        }
                    }
                }
            }
        },
        S4g: {
            type: "structure",
            required: [ "executionInfos" ],
            members: {
                executionInfos: {
                    type: "list",
                    member: {
                        shape: "S1a"
                    }
                },
                nextPageToken: {}
            }
        },
        S4o: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        }
    },
    paginators: {
        GetWorkflowExecutionHistory: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "events"
        },
        ListActivityTypes: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "typeInfos"
        },
        ListClosedWorkflowExecutions: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "executionInfos"
        },
        ListDomains: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "domainInfos"
        },
        ListOpenWorkflowExecutions: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "executionInfos"
        },
        ListWorkflowTypes: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "typeInfos"
        },
        PollForDecisionTask: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "events"
        }
    }
};

AWS.apiLoader.services["xray"] = {};

AWS.XRay = AWS.Service.defineService("xray", [ "2016-04-12" ]);

AWS.apiLoader.services["xray"]["2016-04-12"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-04-12",
        endpointPrefix: "xray",
        protocol: "rest-json",
        serviceFullName: "AWS X-Ray",
        serviceId: "XRay",
        signatureVersion: "v4",
        uid: "xray-2016-04-12"
    },
    operations: {
        BatchGetTraces: {
            http: {
                requestUri: "/Traces"
            },
            input: {
                type: "structure",
                required: [ "TraceIds" ],
                members: {
                    TraceIds: {
                        shape: "S2"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Traces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Duration: {
                                    type: "double"
                                },
                                LimitExceeded: {
                                    type: "boolean"
                                },
                                Segments: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Id: {},
                                            Document: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    UnprocessedTraceIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        CreateGroup: {
            http: {
                requestUri: "/CreateGroup"
            },
            input: {
                type: "structure",
                required: [ "GroupName" ],
                members: {
                    GroupName: {},
                    FilterExpression: {},
                    InsightsConfiguration: {
                        shape: "Si"
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "So"
                    }
                }
            }
        },
        CreateSamplingRule: {
            http: {
                requestUri: "/CreateSamplingRule"
            },
            input: {
                type: "structure",
                required: [ "SamplingRule" ],
                members: {
                    SamplingRule: {
                        shape: "Sq"
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SamplingRuleRecord: {
                        shape: "S16"
                    }
                }
            }
        },
        DeleteGroup: {
            http: {
                requestUri: "/DeleteGroup"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {},
                    GroupARN: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSamplingRule: {
            http: {
                requestUri: "/DeleteSamplingRule"
            },
            input: {
                type: "structure",
                members: {
                    RuleName: {},
                    RuleARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SamplingRuleRecord: {
                        shape: "S16"
                    }
                }
            }
        },
        GetEncryptionConfig: {
            http: {
                requestUri: "/EncryptionConfig"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    EncryptionConfig: {
                        shape: "S1f"
                    }
                }
            }
        },
        GetGroup: {
            http: {
                requestUri: "/GetGroup"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {},
                    GroupARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "So"
                    }
                }
            }
        },
        GetGroups: {
            http: {
                requestUri: "/Groups"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupName: {},
                                GroupARN: {},
                                FilterExpression: {},
                                InsightsConfiguration: {
                                    shape: "Si"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetInsight: {
            http: {
                requestUri: "/Insight"
            },
            input: {
                type: "structure",
                required: [ "InsightId" ],
                members: {
                    InsightId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Insight: {
                        type: "structure",
                        members: {
                            InsightId: {},
                            GroupARN: {},
                            GroupName: {},
                            RootCauseServiceId: {
                                shape: "S1t"
                            },
                            Categories: {
                                shape: "S1v"
                            },
                            State: {},
                            StartTime: {
                                type: "timestamp"
                            },
                            EndTime: {
                                type: "timestamp"
                            },
                            Summary: {},
                            ClientRequestImpactStatistics: {
                                shape: "S1z"
                            },
                            RootCauseServiceRequestImpactStatistics: {
                                shape: "S1z"
                            },
                            TopAnomalousServices: {
                                shape: "S21"
                            }
                        }
                    }
                }
            }
        },
        GetInsightEvents: {
            http: {
                requestUri: "/InsightEvents"
            },
            input: {
                type: "structure",
                required: [ "InsightId" ],
                members: {
                    InsightId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InsightEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Summary: {},
                                EventTime: {
                                    type: "timestamp"
                                },
                                ClientRequestImpactStatistics: {
                                    shape: "S1z"
                                },
                                RootCauseServiceRequestImpactStatistics: {
                                    shape: "S1z"
                                },
                                TopAnomalousServices: {
                                    shape: "S21"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetInsightImpactGraph: {
            http: {
                requestUri: "/InsightImpactGraph"
            },
            input: {
                type: "structure",
                required: [ "InsightId", "StartTime", "EndTime" ],
                members: {
                    InsightId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InsightId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    ServiceGraphStartTime: {
                        type: "timestamp"
                    },
                    ServiceGraphEndTime: {
                        type: "timestamp"
                    },
                    Services: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReferenceId: {
                                    type: "integer"
                                },
                                Type: {},
                                Name: {},
                                Names: {
                                    shape: "S1u"
                                },
                                AccountId: {},
                                Edges: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ReferenceId: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetInsightSummaries: {
            http: {
                requestUri: "/InsightSummaries"
            },
            input: {
                type: "structure",
                required: [ "StartTime", "EndTime" ],
                members: {
                    States: {
                        type: "list",
                        member: {}
                    },
                    GroupARN: {},
                    GroupName: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InsightSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InsightId: {},
                                GroupARN: {},
                                GroupName: {},
                                RootCauseServiceId: {
                                    shape: "S1t"
                                },
                                Categories: {
                                    shape: "S1v"
                                },
                                State: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                Summary: {},
                                ClientRequestImpactStatistics: {
                                    shape: "S1z"
                                },
                                RootCauseServiceRequestImpactStatistics: {
                                    shape: "S1z"
                                },
                                TopAnomalousServices: {
                                    shape: "S21"
                                },
                                LastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetSamplingRules: {
            http: {
                requestUri: "/GetSamplingRules"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SamplingRuleRecords: {
                        type: "list",
                        member: {
                            shape: "S16"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetSamplingStatisticSummaries: {
            http: {
                requestUri: "/SamplingStatisticSummaries"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SamplingStatisticSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RuleName: {},
                                Timestamp: {
                                    type: "timestamp"
                                },
                                RequestCount: {
                                    type: "integer"
                                },
                                BorrowCount: {
                                    type: "integer"
                                },
                                SampledCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetSamplingTargets: {
            http: {
                requestUri: "/SamplingTargets"
            },
            input: {
                type: "structure",
                required: [ "SamplingStatisticsDocuments" ],
                members: {
                    SamplingStatisticsDocuments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RuleName", "ClientID", "Timestamp", "RequestCount", "SampledCount" ],
                            members: {
                                RuleName: {},
                                ClientID: {},
                                Timestamp: {
                                    type: "timestamp"
                                },
                                RequestCount: {
                                    type: "integer"
                                },
                                SampledCount: {
                                    type: "integer"
                                },
                                BorrowCount: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SamplingTargetDocuments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RuleName: {},
                                FixedRate: {
                                    type: "double"
                                },
                                ReservoirQuota: {
                                    type: "integer"
                                },
                                ReservoirQuotaTTL: {
                                    type: "timestamp"
                                },
                                Interval: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    LastRuleModification: {
                        type: "timestamp"
                    },
                    UnprocessedStatistics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RuleName: {},
                                ErrorCode: {},
                                Message: {}
                            }
                        }
                    }
                }
            }
        },
        GetServiceGraph: {
            http: {
                requestUri: "/ServiceGraph"
            },
            input: {
                type: "structure",
                required: [ "StartTime", "EndTime" ],
                members: {
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    GroupName: {},
                    GroupARN: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Services: {
                        shape: "S3a"
                    },
                    ContainsOldGroupVersions: {
                        type: "boolean"
                    },
                    NextToken: {}
                }
            }
        },
        GetTimeSeriesServiceStatistics: {
            http: {
                requestUri: "/TimeSeriesServiceStatistics"
            },
            input: {
                type: "structure",
                required: [ "StartTime", "EndTime" ],
                members: {
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    GroupName: {},
                    GroupARN: {},
                    EntitySelectorExpression: {},
                    Period: {
                        type: "integer"
                    },
                    ForecastStatistics: {
                        type: "boolean"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TimeSeriesServiceStatistics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "timestamp"
                                },
                                EdgeSummaryStatistics: {
                                    shape: "S3e"
                                },
                                ServiceSummaryStatistics: {
                                    shape: "S3m"
                                },
                                ServiceForecastStatistics: {
                                    type: "structure",
                                    members: {
                                        FaultCountHigh: {
                                            type: "long"
                                        },
                                        FaultCountLow: {
                                            type: "long"
                                        }
                                    }
                                },
                                ResponseTimeHistogram: {
                                    shape: "S3h"
                                }
                            }
                        }
                    },
                    ContainsOldGroupVersions: {
                        type: "boolean"
                    },
                    NextToken: {}
                }
            }
        },
        GetTraceGraph: {
            http: {
                requestUri: "/TraceGraph"
            },
            input: {
                type: "structure",
                required: [ "TraceIds" ],
                members: {
                    TraceIds: {
                        shape: "S2"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Services: {
                        shape: "S3a"
                    },
                    NextToken: {}
                }
            }
        },
        GetTraceSummaries: {
            http: {
                requestUri: "/TraceSummaries"
            },
            input: {
                type: "structure",
                required: [ "StartTime", "EndTime" ],
                members: {
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    TimeRangeType: {},
                    Sampling: {
                        type: "boolean"
                    },
                    SamplingStrategy: {
                        type: "structure",
                        members: {
                            Name: {},
                            Value: {
                                type: "double"
                            }
                        }
                    },
                    FilterExpression: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TraceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Duration: {
                                    type: "double"
                                },
                                ResponseTime: {
                                    type: "double"
                                },
                                HasFault: {
                                    type: "boolean"
                                },
                                HasError: {
                                    type: "boolean"
                                },
                                HasThrottle: {
                                    type: "boolean"
                                },
                                IsPartial: {
                                    type: "boolean"
                                },
                                Http: {
                                    type: "structure",
                                    members: {
                                        HttpURL: {},
                                        HttpStatus: {
                                            type: "integer"
                                        },
                                        HttpMethod: {},
                                        UserAgent: {},
                                        ClientIp: {}
                                    }
                                },
                                Annotations: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                AnnotationValue: {
                                                    type: "structure",
                                                    members: {
                                                        NumberValue: {
                                                            type: "double"
                                                        },
                                                        BooleanValue: {
                                                            type: "boolean"
                                                        },
                                                        StringValue: {}
                                                    }
                                                },
                                                ServiceIds: {
                                                    shape: "S49"
                                                }
                                            }
                                        }
                                    }
                                },
                                Users: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            UserName: {},
                                            ServiceIds: {
                                                shape: "S49"
                                            }
                                        }
                                    }
                                },
                                ServiceIds: {
                                    shape: "S49"
                                },
                                ResourceARNs: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ARN: {}
                                        }
                                    }
                                },
                                InstanceIds: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Id: {}
                                        }
                                    }
                                },
                                AvailabilityZones: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {}
                                        }
                                    }
                                },
                                EntryPoint: {
                                    shape: "S1t"
                                },
                                FaultRootCauses: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Services: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Names: {
                                                            shape: "S1u"
                                                        },
                                                        Type: {},
                                                        AccountId: {},
                                                        EntityPath: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Name: {},
                                                                    Exceptions: {
                                                                        shape: "S4o"
                                                                    },
                                                                    Remote: {
                                                                        type: "boolean"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        Inferred: {
                                                            type: "boolean"
                                                        }
                                                    }
                                                }
                                            },
                                            ClientImpacting: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                ErrorRootCauses: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Services: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Names: {
                                                            shape: "S1u"
                                                        },
                                                        Type: {},
                                                        AccountId: {},
                                                        EntityPath: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Name: {},
                                                                    Exceptions: {
                                                                        shape: "S4o"
                                                                    },
                                                                    Remote: {
                                                                        type: "boolean"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        Inferred: {
                                                            type: "boolean"
                                                        }
                                                    }
                                                }
                                            },
                                            ClientImpacting: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                ResponseTimeRootCauses: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Services: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Names: {
                                                            shape: "S1u"
                                                        },
                                                        Type: {},
                                                        AccountId: {},
                                                        EntityPath: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Name: {},
                                                                    Coverage: {
                                                                        type: "double"
                                                                    },
                                                                    Remote: {
                                                                        type: "boolean"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        Inferred: {
                                                            type: "boolean"
                                                        }
                                                    }
                                                }
                                            },
                                            ClientImpacting: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                Revision: {
                                    type: "integer"
                                },
                                MatchedEventTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    ApproximateTime: {
                        type: "timestamp"
                    },
                    TracesProcessedCount: {
                        type: "long"
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/ListTagsForResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sj"
                    },
                    NextToken: {}
                }
            }
        },
        PutEncryptionConfig: {
            http: {
                requestUri: "/PutEncryptionConfig"
            },
            input: {
                type: "structure",
                required: [ "Type" ],
                members: {
                    KeyId: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EncryptionConfig: {
                        shape: "S1f"
                    }
                }
            }
        },
        PutTelemetryRecords: {
            http: {
                requestUri: "/TelemetryRecords"
            },
            input: {
                type: "structure",
                required: [ "TelemetryRecords" ],
                members: {
                    TelemetryRecords: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Timestamp" ],
                            members: {
                                Timestamp: {
                                    type: "timestamp"
                                },
                                SegmentsReceivedCount: {
                                    type: "integer"
                                },
                                SegmentsSentCount: {
                                    type: "integer"
                                },
                                SegmentsSpilloverCount: {
                                    type: "integer"
                                },
                                SegmentsRejectedCount: {
                                    type: "integer"
                                },
                                BackendConnectionErrors: {
                                    type: "structure",
                                    members: {
                                        TimeoutCount: {
                                            type: "integer"
                                        },
                                        ConnectionRefusedCount: {
                                            type: "integer"
                                        },
                                        HTTPCode4XXCount: {
                                            type: "integer"
                                        },
                                        HTTPCode5XXCount: {
                                            type: "integer"
                                        },
                                        UnknownHostCount: {
                                            type: "integer"
                                        },
                                        OtherCount: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    EC2InstanceId: {},
                    Hostname: {},
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutTraceSegments: {
            http: {
                requestUri: "/TraceSegments"
            },
            input: {
                type: "structure",
                required: [ "TraceSegmentDocuments" ],
                members: {
                    TraceSegmentDocuments: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedTraceSegments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                ErrorCode: {},
                                Message: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/TagResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/UntagResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateGroup: {
            http: {
                requestUri: "/UpdateGroup"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {},
                    GroupARN: {},
                    FilterExpression: {},
                    InsightsConfiguration: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "So"
                    }
                }
            }
        },
        UpdateSamplingRule: {
            http: {
                requestUri: "/UpdateSamplingRule"
            },
            input: {
                type: "structure",
                required: [ "SamplingRuleUpdate" ],
                members: {
                    SamplingRuleUpdate: {
                        type: "structure",
                        members: {
                            RuleName: {},
                            RuleARN: {},
                            ResourceARN: {},
                            Priority: {
                                type: "integer"
                            },
                            FixedRate: {
                                type: "double"
                            },
                            ReservoirSize: {
                                type: "integer"
                            },
                            Host: {},
                            ServiceName: {},
                            ServiceType: {},
                            HTTPMethod: {},
                            URLPath: {},
                            Attributes: {
                                shape: "S12"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SamplingRuleRecord: {
                        shape: "S16"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {}
        },
        Si: {
            type: "structure",
            members: {
                InsightsEnabled: {
                    type: "boolean"
                },
                NotificationsEnabled: {
                    type: "boolean"
                }
            }
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        So: {
            type: "structure",
            members: {
                GroupName: {},
                GroupARN: {},
                FilterExpression: {},
                InsightsConfiguration: {
                    shape: "Si"
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "ResourceARN", "Priority", "FixedRate", "ReservoirSize", "ServiceName", "ServiceType", "Host", "HTTPMethod", "URLPath", "Version" ],
            members: {
                RuleName: {},
                RuleARN: {},
                ResourceARN: {},
                Priority: {
                    type: "integer"
                },
                FixedRate: {
                    type: "double"
                },
                ReservoirSize: {
                    type: "integer"
                },
                ServiceName: {},
                ServiceType: {},
                Host: {},
                HTTPMethod: {},
                URLPath: {},
                Version: {
                    type: "integer"
                },
                Attributes: {
                    shape: "S12"
                }
            }
        },
        S12: {
            type: "map",
            key: {},
            value: {}
        },
        S16: {
            type: "structure",
            members: {
                SamplingRule: {
                    shape: "Sq"
                },
                CreatedAt: {
                    type: "timestamp"
                },
                ModifiedAt: {
                    type: "timestamp"
                }
            }
        },
        S1f: {
            type: "structure",
            members: {
                KeyId: {},
                Status: {},
                Type: {}
            }
        },
        S1t: {
            type: "structure",
            members: {
                Name: {},
                Names: {
                    shape: "S1u"
                },
                AccountId: {},
                Type: {}
            }
        },
        S1u: {
            type: "list",
            member: {}
        },
        S1v: {
            type: "list",
            member: {}
        },
        S1z: {
            type: "structure",
            members: {
                FaultCount: {
                    type: "long"
                },
                OkCount: {
                    type: "long"
                },
                TotalCount: {
                    type: "long"
                }
            }
        },
        S21: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ServiceId: {
                        shape: "S1t"
                    }
                }
            }
        },
        S3a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ReferenceId: {
                        type: "integer"
                    },
                    Name: {},
                    Names: {
                        shape: "S1u"
                    },
                    Root: {
                        type: "boolean"
                    },
                    AccountId: {},
                    Type: {},
                    State: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Edges: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReferenceId: {
                                    type: "integer"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                SummaryStatistics: {
                                    shape: "S3e"
                                },
                                ResponseTimeHistogram: {
                                    shape: "S3h"
                                },
                                Aliases: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Names: {
                                                type: "list",
                                                member: {}
                                            },
                                            Type: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    SummaryStatistics: {
                        shape: "S3m"
                    },
                    DurationHistogram: {
                        shape: "S3h"
                    },
                    ResponseTimeHistogram: {
                        shape: "S3h"
                    }
                }
            }
        },
        S3e: {
            type: "structure",
            members: {
                OkCount: {
                    type: "long"
                },
                ErrorStatistics: {
                    shape: "S3f"
                },
                FaultStatistics: {
                    shape: "S3g"
                },
                TotalCount: {
                    type: "long"
                },
                TotalResponseTime: {
                    type: "double"
                }
            }
        },
        S3f: {
            type: "structure",
            members: {
                ThrottleCount: {
                    type: "long"
                },
                OtherCount: {
                    type: "long"
                },
                TotalCount: {
                    type: "long"
                }
            }
        },
        S3g: {
            type: "structure",
            members: {
                OtherCount: {
                    type: "long"
                },
                TotalCount: {
                    type: "long"
                }
            }
        },
        S3h: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Value: {
                        type: "double"
                    },
                    Count: {
                        type: "integer"
                    }
                }
            }
        },
        S3m: {
            type: "structure",
            members: {
                OkCount: {
                    type: "long"
                },
                ErrorStatistics: {
                    shape: "S3f"
                },
                FaultStatistics: {
                    shape: "S3g"
                },
                TotalCount: {
                    type: "long"
                },
                TotalResponseTime: {
                    type: "double"
                }
            }
        },
        S49: {
            type: "list",
            member: {
                shape: "S1t"
            }
        },
        S4o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Message: {}
                }
            }
        }
    },
    paginators: {
        BatchGetTraces: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Traces"
        },
        GetGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Groups"
        },
        GetInsightEvents: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetInsightSummaries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetSamplingRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "SamplingRuleRecords"
        },
        GetSamplingStatisticSummaries: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "SamplingStatisticSummaries"
        },
        GetServiceGraph: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Services"
        },
        GetTimeSeriesServiceStatistics: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "TimeSeriesServiceStatistics"
        },
        GetTraceGraph: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Services"
        },
        GetTraceSummaries: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "TraceSummaries"
        }
    }
};

AWS.apiLoader.services["waf"] = {};

AWS.WAF = AWS.Service.defineService("waf", [ "2015-08-24" ]);

AWS.apiLoader.services["waf"]["2015-08-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-08-24",
        endpointPrefix: "waf",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "WAF",
        serviceFullName: "AWS WAF",
        serviceId: "WAF",
        signatureVersion: "v4",
        targetPrefix: "AWSWAF_20150824",
        uid: "waf-2015-08-24"
    },
    operations: {
        CreateByteMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByteMatchSet: {
                        shape: "S5"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GeoMatchSet: {
                        shape: "Sh"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateIPSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IPSet: {
                        shape: "So"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRateBasedRule: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "RateKey", "RateLimit", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    RateKey: {},
                    RateLimit: {
                        type: "long"
                    },
                    ChangeToken: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S12"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexMatchSet: {
                        shape: "S19"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexPatternSet: {
                        shape: "S1e"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRule: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    ChangeToken: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S1j"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRuleGroup: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    ChangeToken: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleGroup: {
                        shape: "S1m"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SizeConstraintSet: {
                        shape: "S1p"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SqlInjectionMatchSet: {
                        shape: "S1w"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateWebACL: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "DefaultAction", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    DefaultAction: {
                        shape: "S20"
                    },
                    ChangeToken: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACL: {
                        shape: "S23"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateWebACLMigrationStack: {
            input: {
                type: "structure",
                required: [ "WebACLId", "S3BucketName", "IgnoreUnsupportedType" ],
                members: {
                    WebACLId: {},
                    S3BucketName: {},
                    IgnoreUnsupportedType: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "S3ObjectUrl" ],
                members: {
                    S3ObjectUrl: {}
                }
            }
        },
        CreateXssMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    XssMatchSet: {
                        shape: "S2k"
                    },
                    ChangeToken: {}
                }
            }
        },
        DeleteByteMatchSet: {
            input: {
                type: "structure",
                required: [ "ByteMatchSetId", "ChangeToken" ],
                members: {
                    ByteMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "GeoMatchSetId", "ChangeToken" ],
                members: {
                    GeoMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteIPSet: {
            input: {
                type: "structure",
                required: [ "IPSetId", "ChangeToken" ],
                members: {
                    IPSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRateBasedRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken" ],
                members: {
                    RuleId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "RegexMatchSetId", "ChangeToken" ],
                members: {
                    RegexMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "RegexPatternSetId", "ChangeToken" ],
                members: {
                    RegexPatternSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken" ],
                members: {
                    RuleId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupId", "ChangeToken" ],
                members: {
                    RuleGroupId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "SizeConstraintSetId", "ChangeToken" ],
                members: {
                    SizeConstraintSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "SqlInjectionMatchSetId", "ChangeToken" ],
                members: {
                    SqlInjectionMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId", "ChangeToken" ],
                members: {
                    WebACLId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteXssMatchSet: {
            input: {
                type: "structure",
                required: [ "XssMatchSetId", "ChangeToken" ],
                members: {
                    XssMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        GetByteMatchSet: {
            input: {
                type: "structure",
                required: [ "ByteMatchSetId" ],
                members: {
                    ByteMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByteMatchSet: {
                        shape: "S5"
                    }
                }
            }
        },
        GetChangeToken: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        GetChangeTokenStatus: {
            input: {
                type: "structure",
                required: [ "ChangeToken" ],
                members: {
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeTokenStatus: {}
                }
            }
        },
        GetGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "GeoMatchSetId" ],
                members: {
                    GeoMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GeoMatchSet: {
                        shape: "Sh"
                    }
                }
            }
        },
        GetIPSet: {
            input: {
                type: "structure",
                required: [ "IPSetId" ],
                members: {
                    IPSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IPSet: {
                        shape: "So"
                    }
                }
            }
        },
        GetLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S3s"
                    }
                }
            }
        },
        GetPermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        GetRateBasedRule: {
            input: {
                type: "structure",
                required: [ "RuleId" ],
                members: {
                    RuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S12"
                    }
                }
            }
        },
        GetRateBasedRuleManagedKeys: {
            input: {
                type: "structure",
                required: [ "RuleId" ],
                members: {
                    RuleId: {},
                    NextMarker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManagedKeys: {
                        type: "list",
                        member: {}
                    },
                    NextMarker: {}
                }
            }
        },
        GetRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "RegexMatchSetId" ],
                members: {
                    RegexMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexMatchSet: {
                        shape: "S19"
                    }
                }
            }
        },
        GetRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "RegexPatternSetId" ],
                members: {
                    RegexPatternSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexPatternSet: {
                        shape: "S1e"
                    }
                }
            }
        },
        GetRule: {
            input: {
                type: "structure",
                required: [ "RuleId" ],
                members: {
                    RuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S1j"
                    }
                }
            }
        },
        GetRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupId" ],
                members: {
                    RuleGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleGroup: {
                        shape: "S1m"
                    }
                }
            }
        },
        GetSampledRequests: {
            input: {
                type: "structure",
                required: [ "WebAclId", "RuleId", "TimeWindow", "MaxItems" ],
                members: {
                    WebAclId: {},
                    RuleId: {},
                    TimeWindow: {
                        shape: "S4e"
                    },
                    MaxItems: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SampledRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Request", "Weight" ],
                            members: {
                                Request: {
                                    type: "structure",
                                    members: {
                                        ClientIP: {},
                                        Country: {},
                                        URI: {},
                                        Method: {},
                                        HTTPVersion: {},
                                        Headers: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Name: {},
                                                    Value: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                Weight: {
                                    type: "long"
                                },
                                Timestamp: {
                                    type: "timestamp"
                                },
                                Action: {},
                                RuleWithinRuleGroup: {}
                            }
                        }
                    },
                    PopulationSize: {
                        type: "long"
                    },
                    TimeWindow: {
                        shape: "S4e"
                    }
                }
            }
        },
        GetSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "SizeConstraintSetId" ],
                members: {
                    SizeConstraintSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SizeConstraintSet: {
                        shape: "S1p"
                    }
                }
            }
        },
        GetSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "SqlInjectionMatchSetId" ],
                members: {
                    SqlInjectionMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SqlInjectionMatchSet: {
                        shape: "S1w"
                    }
                }
            }
        },
        GetWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId" ],
                members: {
                    WebACLId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACL: {
                        shape: "S23"
                    }
                }
            }
        },
        GetXssMatchSet: {
            input: {
                type: "structure",
                required: [ "XssMatchSetId" ],
                members: {
                    XssMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    XssMatchSet: {
                        shape: "S2k"
                    }
                }
            }
        },
        ListActivatedRulesInRuleGroup: {
            input: {
                type: "structure",
                members: {
                    RuleGroupId: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    ActivatedRules: {
                        shape: "S24"
                    }
                }
            }
        },
        ListByteMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    ByteMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ByteMatchSetId", "Name" ],
                            members: {
                                ByteMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListGeoMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    GeoMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "GeoMatchSetId", "Name" ],
                            members: {
                                GeoMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListIPSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    IPSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "IPSetId", "Name" ],
                            members: {
                                IPSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListLoggingConfigurations: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfigurations: {
                        type: "list",
                        member: {
                            shape: "S3s"
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        ListRateBasedRules: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Rules: {
                        shape: "S5p"
                    }
                }
            }
        },
        ListRegexMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RegexMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RegexMatchSetId", "Name" ],
                            members: {
                                RegexMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListRegexPatternSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RegexPatternSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RegexPatternSetId", "Name" ],
                            members: {
                                RegexPatternSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListRuleGroups: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RuleGroupId", "Name" ],
                            members: {
                                RuleGroupId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListRules: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Rules: {
                        shape: "S5p"
                    }
                }
            }
        },
        ListSizeConstraintSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    SizeConstraintSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SizeConstraintSetId", "Name" ],
                            members: {
                                SizeConstraintSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListSqlInjectionMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    SqlInjectionMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SqlInjectionMatchSetId", "Name" ],
                            members: {
                                SqlInjectionMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListSubscribedRuleGroups: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RuleGroupId", "Name", "MetricName" ],
                            members: {
                                RuleGroupId: {},
                                Name: {},
                                MetricName: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    },
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    TagInfoForResource: {
                        type: "structure",
                        members: {
                            ResourceARN: {},
                            TagList: {
                                shape: "Sx"
                            }
                        }
                    }
                }
            }
        },
        ListWebACLs: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    WebACLs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "WebACLId", "Name" ],
                            members: {
                                WebACLId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListXssMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    XssMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "XssMatchSetId", "Name" ],
                            members: {
                                XssMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        PutLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "LoggingConfiguration" ],
                members: {
                    LoggingConfiguration: {
                        shape: "S3s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S3s"
                    }
                }
            }
        },
        PutPermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Policy" ],
                members: {
                    ResourceArn: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateByteMatchSet: {
            input: {
                type: "structure",
                required: [ "ByteMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    ByteMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "ByteMatchTuple" ],
                            members: {
                                Action: {},
                                ByteMatchTuple: {
                                    shape: "S8"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "GeoMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    GeoMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "GeoMatchConstraint" ],
                            members: {
                                Action: {},
                                GeoMatchConstraint: {
                                    shape: "Sj"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateIPSet: {
            input: {
                type: "structure",
                required: [ "IPSetId", "ChangeToken", "Updates" ],
                members: {
                    IPSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "IPSetDescriptor" ],
                            members: {
                                Action: {},
                                IPSetDescriptor: {
                                    shape: "Sq"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRateBasedRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken", "Updates", "RateLimit" ],
                members: {
                    RuleId: {},
                    ChangeToken: {},
                    Updates: {
                        shape: "S7f"
                    },
                    RateLimit: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "RegexMatchSetId", "Updates", "ChangeToken" ],
                members: {
                    RegexMatchSetId: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "RegexMatchTuple" ],
                            members: {
                                Action: {},
                                RegexMatchTuple: {
                                    shape: "S1b"
                                }
                            }
                        }
                    },
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "RegexPatternSetId", "Updates", "ChangeToken" ],
                members: {
                    RegexPatternSetId: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "RegexPatternString" ],
                            members: {
                                Action: {},
                                RegexPatternString: {}
                            }
                        }
                    },
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken", "Updates" ],
                members: {
                    RuleId: {},
                    ChangeToken: {},
                    Updates: {
                        shape: "S7f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupId", "Updates", "ChangeToken" ],
                members: {
                    RuleGroupId: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "ActivatedRule" ],
                            members: {
                                Action: {},
                                ActivatedRule: {
                                    shape: "S25"
                                }
                            }
                        }
                    },
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "SizeConstraintSetId", "ChangeToken", "Updates" ],
                members: {
                    SizeConstraintSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "SizeConstraint" ],
                            members: {
                                Action: {},
                                SizeConstraint: {
                                    shape: "S1r"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "SqlInjectionMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    SqlInjectionMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "SqlInjectionMatchTuple" ],
                            members: {
                                Action: {},
                                SqlInjectionMatchTuple: {
                                    shape: "S1y"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId", "ChangeToken" ],
                members: {
                    WebACLId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "ActivatedRule" ],
                            members: {
                                Action: {},
                                ActivatedRule: {
                                    shape: "S25"
                                }
                            }
                        }
                    },
                    DefaultAction: {
                        shape: "S20"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateXssMatchSet: {
            input: {
                type: "structure",
                required: [ "XssMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    XssMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "XssMatchTuple" ],
                            members: {
                                Action: {},
                                XssMatchTuple: {
                                    shape: "S2m"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "ByteMatchSetId", "ByteMatchTuples" ],
            members: {
                ByteMatchSetId: {},
                Name: {},
                ByteMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S8"
                    }
                }
            }
        },
        S8: {
            type: "structure",
            required: [ "FieldToMatch", "TargetString", "TextTransformation", "PositionalConstraint" ],
            members: {
                FieldToMatch: {
                    shape: "S9"
                },
                TargetString: {
                    type: "blob"
                },
                TextTransformation: {},
                PositionalConstraint: {}
            }
        },
        S9: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {},
                Data: {}
            }
        },
        Sh: {
            type: "structure",
            required: [ "GeoMatchSetId", "GeoMatchConstraints" ],
            members: {
                GeoMatchSetId: {},
                Name: {},
                GeoMatchConstraints: {
                    type: "list",
                    member: {
                        shape: "Sj"
                    }
                }
            }
        },
        Sj: {
            type: "structure",
            required: [ "Type", "Value" ],
            members: {
                Type: {},
                Value: {}
            }
        },
        So: {
            type: "structure",
            required: [ "IPSetId", "IPSetDescriptors" ],
            members: {
                IPSetId: {},
                Name: {},
                IPSetDescriptors: {
                    type: "list",
                    member: {
                        shape: "Sq"
                    }
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "Type", "Value" ],
            members: {
                Type: {},
                Value: {}
            }
        },
        Sx: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "RuleId", "MatchPredicates", "RateKey", "RateLimit" ],
            members: {
                RuleId: {},
                Name: {},
                MetricName: {},
                MatchPredicates: {
                    shape: "S13"
                },
                RateKey: {},
                RateLimit: {
                    type: "long"
                }
            }
        },
        S13: {
            type: "list",
            member: {
                shape: "S14"
            }
        },
        S14: {
            type: "structure",
            required: [ "Negated", "Type", "DataId" ],
            members: {
                Negated: {
                    type: "boolean"
                },
                Type: {},
                DataId: {}
            }
        },
        S19: {
            type: "structure",
            members: {
                RegexMatchSetId: {},
                Name: {},
                RegexMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S1b"
                    }
                }
            }
        },
        S1b: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation", "RegexPatternSetId" ],
            members: {
                FieldToMatch: {
                    shape: "S9"
                },
                TextTransformation: {},
                RegexPatternSetId: {}
            }
        },
        S1e: {
            type: "structure",
            required: [ "RegexPatternSetId", "RegexPatternStrings" ],
            members: {
                RegexPatternSetId: {},
                Name: {},
                RegexPatternStrings: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1j: {
            type: "structure",
            required: [ "RuleId", "Predicates" ],
            members: {
                RuleId: {},
                Name: {},
                MetricName: {},
                Predicates: {
                    shape: "S13"
                }
            }
        },
        S1m: {
            type: "structure",
            required: [ "RuleGroupId" ],
            members: {
                RuleGroupId: {},
                Name: {},
                MetricName: {}
            }
        },
        S1p: {
            type: "structure",
            required: [ "SizeConstraintSetId", "SizeConstraints" ],
            members: {
                SizeConstraintSetId: {},
                Name: {},
                SizeConstraints: {
                    type: "list",
                    member: {
                        shape: "S1r"
                    }
                }
            }
        },
        S1r: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation", "ComparisonOperator", "Size" ],
            members: {
                FieldToMatch: {
                    shape: "S9"
                },
                TextTransformation: {},
                ComparisonOperator: {},
                Size: {
                    type: "long"
                }
            }
        },
        S1w: {
            type: "structure",
            required: [ "SqlInjectionMatchSetId", "SqlInjectionMatchTuples" ],
            members: {
                SqlInjectionMatchSetId: {},
                Name: {},
                SqlInjectionMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S1y"
                    }
                }
            }
        },
        S1y: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation" ],
            members: {
                FieldToMatch: {
                    shape: "S9"
                },
                TextTransformation: {}
            }
        },
        S20: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {}
            }
        },
        S23: {
            type: "structure",
            required: [ "WebACLId", "DefaultAction", "Rules" ],
            members: {
                WebACLId: {},
                Name: {},
                MetricName: {},
                DefaultAction: {
                    shape: "S20"
                },
                Rules: {
                    shape: "S24"
                },
                WebACLArn: {}
            }
        },
        S24: {
            type: "list",
            member: {
                shape: "S25"
            }
        },
        S25: {
            type: "structure",
            required: [ "Priority", "RuleId" ],
            members: {
                Priority: {
                    type: "integer"
                },
                RuleId: {},
                Action: {
                    shape: "S20"
                },
                OverrideAction: {
                    type: "structure",
                    required: [ "Type" ],
                    members: {
                        Type: {}
                    }
                },
                Type: {},
                ExcludedRules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "RuleId" ],
                        members: {
                            RuleId: {}
                        }
                    }
                }
            }
        },
        S2k: {
            type: "structure",
            required: [ "XssMatchSetId", "XssMatchTuples" ],
            members: {
                XssMatchSetId: {},
                Name: {},
                XssMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S2m"
                    }
                }
            }
        },
        S2m: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation" ],
            members: {
                FieldToMatch: {
                    shape: "S9"
                },
                TextTransformation: {}
            }
        },
        S3s: {
            type: "structure",
            required: [ "ResourceArn", "LogDestinationConfigs" ],
            members: {
                ResourceArn: {},
                LogDestinationConfigs: {
                    type: "list",
                    member: {}
                },
                RedactedFields: {
                    type: "list",
                    member: {
                        shape: "S9"
                    }
                }
            }
        },
        S4e: {
            type: "structure",
            required: [ "StartTime", "EndTime" ],
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        S5p: {
            type: "list",
            member: {
                type: "structure",
                required: [ "RuleId", "Name" ],
                members: {
                    RuleId: {},
                    Name: {}
                }
            }
        },
        S7f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Action", "Predicate" ],
                members: {
                    Action: {},
                    Predicate: {
                        shape: "S14"
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["wafregional"] = {};

AWS.WAFRegional = AWS.Service.defineService("wafregional", [ "2016-11-28" ]);

AWS.apiLoader.services["wafregional"]["2016-11-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-11-28",
        endpointPrefix: "waf-regional",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "WAF Regional",
        serviceFullName: "AWS WAF Regional",
        serviceId: "WAF Regional",
        signatureVersion: "v4",
        targetPrefix: "AWSWAF_Regional_20161128",
        uid: "waf-regional-2016-11-28"
    },
    operations: {
        AssociateWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId", "ResourceArn" ],
                members: {
                    WebACLId: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateByteMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByteMatchSet: {
                        shape: "S9"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GeoMatchSet: {
                        shape: "Sk"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateIPSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IPSet: {
                        shape: "Sr"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRateBasedRule: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "RateKey", "RateLimit", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    RateKey: {},
                    RateLimit: {
                        type: "long"
                    },
                    ChangeToken: {},
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S15"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexMatchSet: {
                        shape: "S1c"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexPatternSet: {
                        shape: "S1h"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRule: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    ChangeToken: {},
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S1m"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRuleGroup: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    ChangeToken: {},
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleGroup: {
                        shape: "S1p"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SizeConstraintSet: {
                        shape: "S1s"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SqlInjectionMatchSet: {
                        shape: "S1z"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateWebACL: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "DefaultAction", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    DefaultAction: {
                        shape: "S23"
                    },
                    ChangeToken: {},
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACL: {
                        shape: "S26"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateWebACLMigrationStack: {
            input: {
                type: "structure",
                required: [ "WebACLId", "S3BucketName", "IgnoreUnsupportedType" ],
                members: {
                    WebACLId: {},
                    S3BucketName: {},
                    IgnoreUnsupportedType: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "S3ObjectUrl" ],
                members: {
                    S3ObjectUrl: {}
                }
            }
        },
        CreateXssMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    XssMatchSet: {
                        shape: "S2m"
                    },
                    ChangeToken: {}
                }
            }
        },
        DeleteByteMatchSet: {
            input: {
                type: "structure",
                required: [ "ByteMatchSetId", "ChangeToken" ],
                members: {
                    ByteMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "GeoMatchSetId", "ChangeToken" ],
                members: {
                    GeoMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteIPSet: {
            input: {
                type: "structure",
                required: [ "IPSetId", "ChangeToken" ],
                members: {
                    IPSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRateBasedRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken" ],
                members: {
                    RuleId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "RegexMatchSetId", "ChangeToken" ],
                members: {
                    RegexMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "RegexPatternSetId", "ChangeToken" ],
                members: {
                    RegexPatternSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken" ],
                members: {
                    RuleId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupId", "ChangeToken" ],
                members: {
                    RuleGroupId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "SizeConstraintSetId", "ChangeToken" ],
                members: {
                    SizeConstraintSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "SqlInjectionMatchSetId", "ChangeToken" ],
                members: {
                    SqlInjectionMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId", "ChangeToken" ],
                members: {
                    WebACLId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteXssMatchSet: {
            input: {
                type: "structure",
                required: [ "XssMatchSetId", "ChangeToken" ],
                members: {
                    XssMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DisassociateWebACL: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetByteMatchSet: {
            input: {
                type: "structure",
                required: [ "ByteMatchSetId" ],
                members: {
                    ByteMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByteMatchSet: {
                        shape: "S9"
                    }
                }
            }
        },
        GetChangeToken: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        GetChangeTokenStatus: {
            input: {
                type: "structure",
                required: [ "ChangeToken" ],
                members: {
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeTokenStatus: {}
                }
            }
        },
        GetGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "GeoMatchSetId" ],
                members: {
                    GeoMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GeoMatchSet: {
                        shape: "Sk"
                    }
                }
            }
        },
        GetIPSet: {
            input: {
                type: "structure",
                required: [ "IPSetId" ],
                members: {
                    IPSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IPSet: {
                        shape: "Sr"
                    }
                }
            }
        },
        GetLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S3w"
                    }
                }
            }
        },
        GetPermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        GetRateBasedRule: {
            input: {
                type: "structure",
                required: [ "RuleId" ],
                members: {
                    RuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S15"
                    }
                }
            }
        },
        GetRateBasedRuleManagedKeys: {
            input: {
                type: "structure",
                required: [ "RuleId" ],
                members: {
                    RuleId: {},
                    NextMarker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManagedKeys: {
                        type: "list",
                        member: {}
                    },
                    NextMarker: {}
                }
            }
        },
        GetRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "RegexMatchSetId" ],
                members: {
                    RegexMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexMatchSet: {
                        shape: "S1c"
                    }
                }
            }
        },
        GetRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "RegexPatternSetId" ],
                members: {
                    RegexPatternSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexPatternSet: {
                        shape: "S1h"
                    }
                }
            }
        },
        GetRule: {
            input: {
                type: "structure",
                required: [ "RuleId" ],
                members: {
                    RuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S1m"
                    }
                }
            }
        },
        GetRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupId" ],
                members: {
                    RuleGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleGroup: {
                        shape: "S1p"
                    }
                }
            }
        },
        GetSampledRequests: {
            input: {
                type: "structure",
                required: [ "WebAclId", "RuleId", "TimeWindow", "MaxItems" ],
                members: {
                    WebAclId: {},
                    RuleId: {},
                    TimeWindow: {
                        shape: "S4i"
                    },
                    MaxItems: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SampledRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Request", "Weight" ],
                            members: {
                                Request: {
                                    type: "structure",
                                    members: {
                                        ClientIP: {},
                                        Country: {},
                                        URI: {},
                                        Method: {},
                                        HTTPVersion: {},
                                        Headers: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Name: {},
                                                    Value: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                Weight: {
                                    type: "long"
                                },
                                Timestamp: {
                                    type: "timestamp"
                                },
                                Action: {},
                                RuleWithinRuleGroup: {}
                            }
                        }
                    },
                    PopulationSize: {
                        type: "long"
                    },
                    TimeWindow: {
                        shape: "S4i"
                    }
                }
            }
        },
        GetSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "SizeConstraintSetId" ],
                members: {
                    SizeConstraintSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SizeConstraintSet: {
                        shape: "S1s"
                    }
                }
            }
        },
        GetSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "SqlInjectionMatchSetId" ],
                members: {
                    SqlInjectionMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SqlInjectionMatchSet: {
                        shape: "S1z"
                    }
                }
            }
        },
        GetWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId" ],
                members: {
                    WebACLId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACL: {
                        shape: "S26"
                    }
                }
            }
        },
        GetWebACLForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACLSummary: {
                        shape: "S59"
                    }
                }
            }
        },
        GetXssMatchSet: {
            input: {
                type: "structure",
                required: [ "XssMatchSetId" ],
                members: {
                    XssMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    XssMatchSet: {
                        shape: "S2m"
                    }
                }
            }
        },
        ListActivatedRulesInRuleGroup: {
            input: {
                type: "structure",
                members: {
                    RuleGroupId: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    ActivatedRules: {
                        shape: "S27"
                    }
                }
            }
        },
        ListByteMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    ByteMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ByteMatchSetId", "Name" ],
                            members: {
                                ByteMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListGeoMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    GeoMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "GeoMatchSetId", "Name" ],
                            members: {
                                GeoMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListIPSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    IPSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "IPSetId", "Name" ],
                            members: {
                                IPSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListLoggingConfigurations: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfigurations: {
                        type: "list",
                        member: {
                            shape: "S3w"
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        ListRateBasedRules: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Rules: {
                        shape: "S5w"
                    }
                }
            }
        },
        ListRegexMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RegexMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RegexMatchSetId", "Name" ],
                            members: {
                                RegexMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListRegexPatternSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RegexPatternSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RegexPatternSetId", "Name" ],
                            members: {
                                RegexPatternSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListResourcesForWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId" ],
                members: {
                    WebACLId: {},
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArns: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListRuleGroups: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RuleGroupId", "Name" ],
                            members: {
                                RuleGroupId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListRules: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Rules: {
                        shape: "S5w"
                    }
                }
            }
        },
        ListSizeConstraintSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    SizeConstraintSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SizeConstraintSetId", "Name" ],
                            members: {
                                SizeConstraintSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListSqlInjectionMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    SqlInjectionMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SqlInjectionMatchSetId", "Name" ],
                            members: {
                                SqlInjectionMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListSubscribedRuleGroups: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RuleGroupId", "Name", "MetricName" ],
                            members: {
                                RuleGroupId: {},
                                Name: {},
                                MetricName: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    },
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    TagInfoForResource: {
                        type: "structure",
                        members: {
                            ResourceARN: {},
                            TagList: {
                                shape: "S10"
                            }
                        }
                    }
                }
            }
        },
        ListWebACLs: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    WebACLs: {
                        type: "list",
                        member: {
                            shape: "S59"
                        }
                    }
                }
            }
        },
        ListXssMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    XssMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "XssMatchSetId", "Name" ],
                            members: {
                                XssMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        PutLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "LoggingConfiguration" ],
                members: {
                    LoggingConfiguration: {
                        shape: "S3w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S3w"
                    }
                }
            }
        },
        PutPermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Policy" ],
                members: {
                    ResourceArn: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateByteMatchSet: {
            input: {
                type: "structure",
                required: [ "ByteMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    ByteMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "ByteMatchTuple" ],
                            members: {
                                Action: {},
                                ByteMatchTuple: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "GeoMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    GeoMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "GeoMatchConstraint" ],
                            members: {
                                Action: {},
                                GeoMatchConstraint: {
                                    shape: "Sm"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateIPSet: {
            input: {
                type: "structure",
                required: [ "IPSetId", "ChangeToken", "Updates" ],
                members: {
                    IPSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "IPSetDescriptor" ],
                            members: {
                                Action: {},
                                IPSetDescriptor: {
                                    shape: "St"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRateBasedRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken", "Updates", "RateLimit" ],
                members: {
                    RuleId: {},
                    ChangeToken: {},
                    Updates: {
                        shape: "S7p"
                    },
                    RateLimit: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "RegexMatchSetId", "Updates", "ChangeToken" ],
                members: {
                    RegexMatchSetId: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "RegexMatchTuple" ],
                            members: {
                                Action: {},
                                RegexMatchTuple: {
                                    shape: "S1e"
                                }
                            }
                        }
                    },
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "RegexPatternSetId", "Updates", "ChangeToken" ],
                members: {
                    RegexPatternSetId: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "RegexPatternString" ],
                            members: {
                                Action: {},
                                RegexPatternString: {}
                            }
                        }
                    },
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken", "Updates" ],
                members: {
                    RuleId: {},
                    ChangeToken: {},
                    Updates: {
                        shape: "S7p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupId", "Updates", "ChangeToken" ],
                members: {
                    RuleGroupId: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "ActivatedRule" ],
                            members: {
                                Action: {},
                                ActivatedRule: {
                                    shape: "S28"
                                }
                            }
                        }
                    },
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "SizeConstraintSetId", "ChangeToken", "Updates" ],
                members: {
                    SizeConstraintSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "SizeConstraint" ],
                            members: {
                                Action: {},
                                SizeConstraint: {
                                    shape: "S1u"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "SqlInjectionMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    SqlInjectionMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "SqlInjectionMatchTuple" ],
                            members: {
                                Action: {},
                                SqlInjectionMatchTuple: {
                                    shape: "S21"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId", "ChangeToken" ],
                members: {
                    WebACLId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "ActivatedRule" ],
                            members: {
                                Action: {},
                                ActivatedRule: {
                                    shape: "S28"
                                }
                            }
                        }
                    },
                    DefaultAction: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateXssMatchSet: {
            input: {
                type: "structure",
                required: [ "XssMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    XssMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "XssMatchTuple" ],
                            members: {
                                Action: {},
                                XssMatchTuple: {
                                    shape: "S2o"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "structure",
            required: [ "ByteMatchSetId", "ByteMatchTuples" ],
            members: {
                ByteMatchSetId: {},
                Name: {},
                ByteMatchTuples: {
                    type: "list",
                    member: {
                        shape: "Sb"
                    }
                }
            }
        },
        Sb: {
            type: "structure",
            required: [ "FieldToMatch", "TargetString", "TextTransformation", "PositionalConstraint" ],
            members: {
                FieldToMatch: {
                    shape: "Sc"
                },
                TargetString: {
                    type: "blob"
                },
                TextTransformation: {},
                PositionalConstraint: {}
            }
        },
        Sc: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {},
                Data: {}
            }
        },
        Sk: {
            type: "structure",
            required: [ "GeoMatchSetId", "GeoMatchConstraints" ],
            members: {
                GeoMatchSetId: {},
                Name: {},
                GeoMatchConstraints: {
                    type: "list",
                    member: {
                        shape: "Sm"
                    }
                }
            }
        },
        Sm: {
            type: "structure",
            required: [ "Type", "Value" ],
            members: {
                Type: {},
                Value: {}
            }
        },
        Sr: {
            type: "structure",
            required: [ "IPSetId", "IPSetDescriptors" ],
            members: {
                IPSetId: {},
                Name: {},
                IPSetDescriptors: {
                    type: "list",
                    member: {
                        shape: "St"
                    }
                }
            }
        },
        St: {
            type: "structure",
            required: [ "Type", "Value" ],
            members: {
                Type: {},
                Value: {}
            }
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S15: {
            type: "structure",
            required: [ "RuleId", "MatchPredicates", "RateKey", "RateLimit" ],
            members: {
                RuleId: {},
                Name: {},
                MetricName: {},
                MatchPredicates: {
                    shape: "S16"
                },
                RateKey: {},
                RateLimit: {
                    type: "long"
                }
            }
        },
        S16: {
            type: "list",
            member: {
                shape: "S17"
            }
        },
        S17: {
            type: "structure",
            required: [ "Negated", "Type", "DataId" ],
            members: {
                Negated: {
                    type: "boolean"
                },
                Type: {},
                DataId: {}
            }
        },
        S1c: {
            type: "structure",
            members: {
                RegexMatchSetId: {},
                Name: {},
                RegexMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S1e"
                    }
                }
            }
        },
        S1e: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation", "RegexPatternSetId" ],
            members: {
                FieldToMatch: {
                    shape: "Sc"
                },
                TextTransformation: {},
                RegexPatternSetId: {}
            }
        },
        S1h: {
            type: "structure",
            required: [ "RegexPatternSetId", "RegexPatternStrings" ],
            members: {
                RegexPatternSetId: {},
                Name: {},
                RegexPatternStrings: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1m: {
            type: "structure",
            required: [ "RuleId", "Predicates" ],
            members: {
                RuleId: {},
                Name: {},
                MetricName: {},
                Predicates: {
                    shape: "S16"
                }
            }
        },
        S1p: {
            type: "structure",
            required: [ "RuleGroupId" ],
            members: {
                RuleGroupId: {},
                Name: {},
                MetricName: {}
            }
        },
        S1s: {
            type: "structure",
            required: [ "SizeConstraintSetId", "SizeConstraints" ],
            members: {
                SizeConstraintSetId: {},
                Name: {},
                SizeConstraints: {
                    type: "list",
                    member: {
                        shape: "S1u"
                    }
                }
            }
        },
        S1u: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation", "ComparisonOperator", "Size" ],
            members: {
                FieldToMatch: {
                    shape: "Sc"
                },
                TextTransformation: {},
                ComparisonOperator: {},
                Size: {
                    type: "long"
                }
            }
        },
        S1z: {
            type: "structure",
            required: [ "SqlInjectionMatchSetId", "SqlInjectionMatchTuples" ],
            members: {
                SqlInjectionMatchSetId: {},
                Name: {},
                SqlInjectionMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S21"
                    }
                }
            }
        },
        S21: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation" ],
            members: {
                FieldToMatch: {
                    shape: "Sc"
                },
                TextTransformation: {}
            }
        },
        S23: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {}
            }
        },
        S26: {
            type: "structure",
            required: [ "WebACLId", "DefaultAction", "Rules" ],
            members: {
                WebACLId: {},
                Name: {},
                MetricName: {},
                DefaultAction: {
                    shape: "S23"
                },
                Rules: {
                    shape: "S27"
                },
                WebACLArn: {}
            }
        },
        S27: {
            type: "list",
            member: {
                shape: "S28"
            }
        },
        S28: {
            type: "structure",
            required: [ "Priority", "RuleId" ],
            members: {
                Priority: {
                    type: "integer"
                },
                RuleId: {},
                Action: {
                    shape: "S23"
                },
                OverrideAction: {
                    type: "structure",
                    required: [ "Type" ],
                    members: {
                        Type: {}
                    }
                },
                Type: {},
                ExcludedRules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "RuleId" ],
                        members: {
                            RuleId: {}
                        }
                    }
                }
            }
        },
        S2m: {
            type: "structure",
            required: [ "XssMatchSetId", "XssMatchTuples" ],
            members: {
                XssMatchSetId: {},
                Name: {},
                XssMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S2o"
                    }
                }
            }
        },
        S2o: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation" ],
            members: {
                FieldToMatch: {
                    shape: "Sc"
                },
                TextTransformation: {}
            }
        },
        S3w: {
            type: "structure",
            required: [ "ResourceArn", "LogDestinationConfigs" ],
            members: {
                ResourceArn: {},
                LogDestinationConfigs: {
                    type: "list",
                    member: {}
                },
                RedactedFields: {
                    type: "list",
                    member: {
                        shape: "Sc"
                    }
                }
            }
        },
        S4i: {
            type: "structure",
            required: [ "StartTime", "EndTime" ],
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        S59: {
            type: "structure",
            required: [ "WebACLId", "Name" ],
            members: {
                WebACLId: {},
                Name: {}
            }
        },
        S5w: {
            type: "list",
            member: {
                type: "structure",
                required: [ "RuleId", "Name" ],
                members: {
                    RuleId: {},
                    Name: {}
                }
            }
        },
        S7p: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Action", "Predicate" ],
                members: {
                    Action: {},
                    Predicate: {
                        shape: "S17"
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["workdocs"] = {};

AWS.WorkDocs = AWS.Service.defineService("workdocs", [ "2016-05-01" ]);

AWS.apiLoader.services["workdocs"]["2016-05-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-05-01",
        endpointPrefix: "workdocs",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon WorkDocs",
        serviceId: "WorkDocs",
        signatureVersion: "v4",
        uid: "workdocs-2016-05-01"
    },
    operations: {
        AbortDocumentVersionUpload: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/documents/{DocumentId}/versions/{VersionId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "DocumentId", "VersionId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    VersionId: {
                        location: "uri",
                        locationName: "VersionId"
                    }
                }
            }
        },
        ActivateUser: {
            http: {
                requestUri: "/api/v1/users/{UserId}/activation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "UserId" ],
                members: {
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S8"
                    }
                }
            }
        },
        AddResourcePermissions: {
            http: {
                requestUri: "/api/v1/resources/{ResourceId}/permissions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ResourceId", "Principals" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    Principals: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "Type", "Role" ],
                            members: {
                                Id: {},
                                Type: {},
                                Role: {}
                            }
                        }
                    },
                    NotificationOptions: {
                        type: "structure",
                        members: {
                            SendEmail: {
                                type: "boolean"
                            },
                            EmailMessage: {
                                shape: "St"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ShareResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PrincipalId: {},
                                InviteePrincipalId: {},
                                Role: {},
                                Status: {},
                                ShareId: {},
                                StatusMessage: {
                                    shape: "St"
                                }
                            }
                        }
                    }
                }
            }
        },
        CreateComment: {
            http: {
                requestUri: "/api/v1/documents/{DocumentId}/versions/{VersionId}/comment",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "DocumentId", "VersionId", "Text" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    VersionId: {
                        location: "uri",
                        locationName: "VersionId"
                    },
                    ParentId: {},
                    ThreadId: {},
                    Text: {
                        shape: "S10"
                    },
                    Visibility: {},
                    NotifyCollaborators: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Comment: {
                        shape: "S13"
                    }
                }
            }
        },
        CreateCustomMetadata: {
            http: {
                method: "PUT",
                requestUri: "/api/v1/resources/{ResourceId}/customMetadata",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceId", "CustomMetadata" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionid"
                    },
                    CustomMetadata: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateFolder: {
            http: {
                requestUri: "/api/v1/folders",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ParentFolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    Name: {},
                    ParentFolderId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        shape: "S1d"
                    }
                }
            }
        },
        CreateLabels: {
            http: {
                method: "PUT",
                requestUri: "/api/v1/resources/{ResourceId}/labels",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceId", "Labels" ],
                members: {
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    Labels: {
                        shape: "S1g"
                    },
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateNotificationSubscription: {
            http: {
                requestUri: "/api/v1/organizations/{OrganizationId}/subscriptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "OrganizationId", "Endpoint", "Protocol", "SubscriptionType" ],
                members: {
                    OrganizationId: {
                        location: "uri",
                        locationName: "OrganizationId"
                    },
                    Endpoint: {},
                    Protocol: {},
                    SubscriptionType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Subscription: {
                        shape: "S1p"
                    }
                }
            }
        },
        CreateUser: {
            http: {
                requestUri: "/api/v1/users",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Username", "GivenName", "Surname", "Password" ],
                members: {
                    OrganizationId: {},
                    Username: {},
                    EmailAddress: {},
                    GivenName: {},
                    Surname: {},
                    Password: {
                        type: "string",
                        sensitive: true
                    },
                    TimeZoneId: {},
                    StorageRule: {
                        shape: "Sj"
                    },
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S8"
                    }
                }
            }
        },
        DeactivateUser: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/users/{UserId}/activation",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "UserId" ],
                members: {
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    }
                }
            }
        },
        DeleteComment: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/documents/{DocumentId}/versions/{VersionId}/comment/{CommentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "DocumentId", "VersionId", "CommentId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    VersionId: {
                        location: "uri",
                        locationName: "VersionId"
                    },
                    CommentId: {
                        location: "uri",
                        locationName: "CommentId"
                    }
                }
            }
        },
        DeleteCustomMetadata: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/resources/{ResourceId}/customMetadata",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    Keys: {
                        location: "querystring",
                        locationName: "keys",
                        type: "list",
                        member: {}
                    },
                    DeleteAll: {
                        location: "querystring",
                        locationName: "deleteAll",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDocument: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/documents/{DocumentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "DocumentId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    }
                }
            }
        },
        DeleteFolder: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/folders/{FolderId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    }
                }
            }
        },
        DeleteFolderContents: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/folders/{FolderId}/contents",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    }
                }
            }
        },
        DeleteLabels: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/resources/{ResourceId}/labels",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    Labels: {
                        shape: "S1g",
                        location: "querystring",
                        locationName: "labels"
                    },
                    DeleteAll: {
                        location: "querystring",
                        locationName: "deleteAll",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteNotificationSubscription: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/organizations/{OrganizationId}/subscriptions/{SubscriptionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SubscriptionId", "OrganizationId" ],
                members: {
                    SubscriptionId: {
                        location: "uri",
                        locationName: "SubscriptionId"
                    },
                    OrganizationId: {
                        location: "uri",
                        locationName: "OrganizationId"
                    }
                }
            }
        },
        DeleteUser: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/users/{UserId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "UserId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    }
                }
            }
        },
        DescribeActivities: {
            http: {
                method: "GET",
                requestUri: "/api/v1/activities",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    StartTime: {
                        location: "querystring",
                        locationName: "startTime",
                        type: "timestamp"
                    },
                    EndTime: {
                        location: "querystring",
                        locationName: "endTime",
                        type: "timestamp"
                    },
                    OrganizationId: {
                        location: "querystring",
                        locationName: "organizationId"
                    },
                    ActivityTypes: {
                        location: "querystring",
                        locationName: "activityTypes"
                    },
                    ResourceId: {
                        location: "querystring",
                        locationName: "resourceId"
                    },
                    UserId: {
                        location: "querystring",
                        locationName: "userId"
                    },
                    IncludeIndirectActivities: {
                        location: "querystring",
                        locationName: "includeIndirectActivities",
                        type: "boolean"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserActivities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                TimeStamp: {
                                    type: "timestamp"
                                },
                                IsIndirectActivity: {
                                    type: "boolean"
                                },
                                OrganizationId: {},
                                Initiator: {
                                    shape: "S2d"
                                },
                                Participants: {
                                    type: "structure",
                                    members: {
                                        Users: {
                                            type: "list",
                                            member: {
                                                shape: "S2d"
                                            }
                                        },
                                        Groups: {
                                            shape: "S2g"
                                        }
                                    }
                                },
                                ResourceMetadata: {
                                    shape: "S2j"
                                },
                                OriginalParent: {
                                    shape: "S2j"
                                },
                                CommentMetadata: {
                                    type: "structure",
                                    members: {
                                        CommentId: {},
                                        Contributor: {
                                            shape: "S8"
                                        },
                                        CreatedTimestamp: {
                                            type: "timestamp"
                                        },
                                        CommentStatus: {},
                                        RecipientId: {}
                                    }
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeComments: {
            http: {
                method: "GET",
                requestUri: "/api/v1/documents/{DocumentId}/versions/{VersionId}/comments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId", "VersionId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    VersionId: {
                        location: "uri",
                        locationName: "VersionId"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Comments: {
                        type: "list",
                        member: {
                            shape: "S13"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeDocumentVersions: {
            http: {
                method: "GET",
                requestUri: "/api/v1/documents/{DocumentId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Include: {
                        location: "querystring",
                        locationName: "include"
                    },
                    Fields: {
                        location: "querystring",
                        locationName: "fields"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentVersions: {
                        type: "list",
                        member: {
                            shape: "S2u"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeFolderContents: {
            http: {
                method: "GET",
                requestUri: "/api/v1/folders/{FolderId}/contents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    Sort: {
                        location: "querystring",
                        locationName: "sort"
                    },
                    Order: {
                        location: "querystring",
                        locationName: "order"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    Include: {
                        location: "querystring",
                        locationName: "include"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Folders: {
                        shape: "S37"
                    },
                    Documents: {
                        shape: "S38"
                    },
                    Marker: {}
                }
            }
        },
        DescribeGroups: {
            http: {
                method: "GET",
                requestUri: "/api/v1/groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SearchQuery" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    SearchQuery: {
                        shape: "S3b",
                        location: "querystring",
                        locationName: "searchQuery"
                    },
                    OrganizationId: {
                        location: "querystring",
                        locationName: "organizationId"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        shape: "S2g"
                    },
                    Marker: {}
                }
            }
        },
        DescribeNotificationSubscriptions: {
            http: {
                method: "GET",
                requestUri: "/api/v1/organizations/{OrganizationId}/subscriptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {
                        location: "uri",
                        locationName: "OrganizationId"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Subscriptions: {
                        type: "list",
                        member: {
                            shape: "S1p"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeResourcePermissions: {
            http: {
                method: "GET",
                requestUri: "/api/v1/resources/{ResourceId}/permissions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    PrincipalId: {
                        location: "querystring",
                        locationName: "principalId"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Principals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Type: {},
                                Roles: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Role: {},
                                            Type: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeRootFolders: {
            http: {
                method: "GET",
                requestUri: "/api/v1/me/root",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AuthenticationToken" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Folders: {
                        shape: "S37"
                    },
                    Marker: {}
                }
            }
        },
        DescribeUsers: {
            http: {
                method: "GET",
                requestUri: "/api/v1/users",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    OrganizationId: {
                        location: "querystring",
                        locationName: "organizationId"
                    },
                    UserIds: {
                        location: "querystring",
                        locationName: "userIds"
                    },
                    Query: {
                        shape: "S3b",
                        location: "querystring",
                        locationName: "query"
                    },
                    Include: {
                        location: "querystring",
                        locationName: "include"
                    },
                    Order: {
                        location: "querystring",
                        locationName: "order"
                    },
                    Sort: {
                        location: "querystring",
                        locationName: "sort"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Fields: {
                        location: "querystring",
                        locationName: "fields"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    },
                    TotalNumberOfUsers: {
                        deprecated: true,
                        type: "long"
                    },
                    Marker: {}
                }
            }
        },
        GetCurrentUser: {
            http: {
                method: "GET",
                requestUri: "/api/v1/me",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AuthenticationToken" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S8"
                    }
                }
            }
        },
        GetDocument: {
            http: {
                method: "GET",
                requestUri: "/api/v1/documents/{DocumentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    IncludeCustomMetadata: {
                        location: "querystring",
                        locationName: "includeCustomMetadata",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        shape: "S39"
                    },
                    CustomMetadata: {
                        shape: "S16"
                    }
                }
            }
        },
        GetDocumentPath: {
            http: {
                method: "GET",
                requestUri: "/api/v1/documents/{DocumentId}/path",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Fields: {
                        location: "querystring",
                        locationName: "fields"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Path: {
                        shape: "S42"
                    }
                }
            }
        },
        GetDocumentVersion: {
            http: {
                method: "GET",
                requestUri: "/api/v1/documents/{DocumentId}/versions/{VersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId", "VersionId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    VersionId: {
                        location: "uri",
                        locationName: "VersionId"
                    },
                    Fields: {
                        location: "querystring",
                        locationName: "fields"
                    },
                    IncludeCustomMetadata: {
                        location: "querystring",
                        locationName: "includeCustomMetadata",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        shape: "S2u"
                    },
                    CustomMetadata: {
                        shape: "S16"
                    }
                }
            }
        },
        GetFolder: {
            http: {
                method: "GET",
                requestUri: "/api/v1/folders/{FolderId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    IncludeCustomMetadata: {
                        location: "querystring",
                        locationName: "includeCustomMetadata",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        shape: "S1d"
                    },
                    CustomMetadata: {
                        shape: "S16"
                    }
                }
            }
        },
        GetFolderPath: {
            http: {
                method: "GET",
                requestUri: "/api/v1/folders/{FolderId}/path",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Fields: {
                        location: "querystring",
                        locationName: "fields"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Path: {
                        shape: "S42"
                    }
                }
            }
        },
        GetResources: {
            http: {
                method: "GET",
                requestUri: "/api/v1/resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    UserId: {
                        location: "querystring",
                        locationName: "userId"
                    },
                    CollectionType: {
                        location: "querystring",
                        locationName: "collectionType"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Folders: {
                        shape: "S37"
                    },
                    Documents: {
                        shape: "S38"
                    },
                    Marker: {}
                }
            }
        },
        InitiateDocumentVersionUpload: {
            http: {
                requestUri: "/api/v1/documents",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ParentFolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    Id: {},
                    Name: {},
                    ContentCreatedTimestamp: {
                        type: "timestamp"
                    },
                    ContentModifiedTimestamp: {
                        type: "timestamp"
                    },
                    ContentType: {},
                    DocumentSizeInBytes: {
                        type: "long"
                    },
                    ParentFolderId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        shape: "S39"
                    },
                    UploadMetadata: {
                        type: "structure",
                        members: {
                            UploadUrl: {
                                shape: "S2z"
                            },
                            SignedHeaders: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            }
        },
        RemoveAllResourcePermissions: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/resources/{ResourceId}/permissions",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    }
                }
            }
        },
        RemoveResourcePermission: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/resources/{ResourceId}/permissions/{PrincipalId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceId", "PrincipalId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    PrincipalId: {
                        location: "uri",
                        locationName: "PrincipalId"
                    },
                    PrincipalType: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            }
        },
        UpdateDocument: {
            http: {
                method: "PATCH",
                requestUri: "/api/v1/documents/{DocumentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    Name: {},
                    ParentFolderId: {},
                    ResourceState: {}
                }
            }
        },
        UpdateDocumentVersion: {
            http: {
                method: "PATCH",
                requestUri: "/api/v1/documents/{DocumentId}/versions/{VersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId", "VersionId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    VersionId: {
                        location: "uri",
                        locationName: "VersionId"
                    },
                    VersionStatus: {}
                }
            }
        },
        UpdateFolder: {
            http: {
                method: "PATCH",
                requestUri: "/api/v1/folders/{FolderId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    Name: {},
                    ParentFolderId: {},
                    ResourceState: {}
                }
            }
        },
        UpdateUser: {
            http: {
                method: "PATCH",
                requestUri: "/api/v1/users/{UserId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "UserId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    GivenName: {},
                    Surname: {},
                    Type: {},
                    StorageRule: {
                        shape: "Sj"
                    },
                    TimeZoneId: {},
                    Locale: {},
                    GrantPoweruserPrivileges: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S8"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "string",
            sensitive: true
        },
        S8: {
            type: "structure",
            members: {
                Id: {},
                Username: {},
                EmailAddress: {},
                GivenName: {},
                Surname: {},
                OrganizationId: {},
                RootFolderId: {},
                RecycleBinFolderId: {},
                Status: {},
                Type: {},
                CreatedTimestamp: {
                    type: "timestamp"
                },
                ModifiedTimestamp: {
                    type: "timestamp"
                },
                TimeZoneId: {},
                Locale: {},
                Storage: {
                    type: "structure",
                    members: {
                        StorageUtilizedInBytes: {
                            type: "long"
                        },
                        StorageRule: {
                            shape: "Sj"
                        }
                    }
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                StorageAllocatedInBytes: {
                    type: "long"
                },
                StorageType: {}
            }
        },
        St: {
            type: "string",
            sensitive: true
        },
        S10: {
            type: "string",
            sensitive: true
        },
        S13: {
            type: "structure",
            required: [ "CommentId" ],
            members: {
                CommentId: {},
                ParentId: {},
                ThreadId: {},
                Text: {
                    shape: "S10"
                },
                Contributor: {
                    shape: "S8"
                },
                CreatedTimestamp: {
                    type: "timestamp"
                },
                Status: {},
                Visibility: {},
                RecipientId: {}
            }
        },
        S16: {
            type: "map",
            key: {},
            value: {}
        },
        S1d: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                CreatorId: {},
                ParentFolderId: {},
                CreatedTimestamp: {
                    type: "timestamp"
                },
                ModifiedTimestamp: {
                    type: "timestamp"
                },
                ResourceState: {},
                Signature: {},
                Labels: {
                    shape: "S1g"
                },
                Size: {
                    type: "long"
                },
                LatestVersionSize: {
                    type: "long"
                }
            }
        },
        S1g: {
            type: "list",
            member: {}
        },
        S1p: {
            type: "structure",
            members: {
                SubscriptionId: {},
                EndPoint: {},
                Protocol: {}
            }
        },
        S2d: {
            type: "structure",
            members: {
                Id: {},
                Username: {},
                GivenName: {},
                Surname: {},
                EmailAddress: {}
            }
        },
        S2g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {}
                }
            }
        },
        S2j: {
            type: "structure",
            members: {
                Type: {},
                Name: {},
                OriginalName: {},
                Id: {},
                VersionId: {},
                Owner: {
                    shape: "S2d"
                },
                ParentId: {}
            }
        },
        S2u: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                ContentType: {},
                Size: {
                    type: "long"
                },
                Signature: {},
                Status: {},
                CreatedTimestamp: {
                    type: "timestamp"
                },
                ModifiedTimestamp: {
                    type: "timestamp"
                },
                ContentCreatedTimestamp: {
                    type: "timestamp"
                },
                ContentModifiedTimestamp: {
                    type: "timestamp"
                },
                CreatorId: {},
                Thumbnail: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S2z"
                    }
                },
                Source: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S2z"
                    }
                }
            }
        },
        S2z: {
            type: "string",
            sensitive: true
        },
        S37: {
            type: "list",
            member: {
                shape: "S1d"
            }
        },
        S38: {
            type: "list",
            member: {
                shape: "S39"
            }
        },
        S39: {
            type: "structure",
            members: {
                Id: {},
                CreatorId: {},
                ParentFolderId: {},
                CreatedTimestamp: {
                    type: "timestamp"
                },
                ModifiedTimestamp: {
                    type: "timestamp"
                },
                LatestVersionMetadata: {
                    shape: "S2u"
                },
                ResourceState: {},
                Labels: {
                    shape: "S1g"
                }
            }
        },
        S3b: {
            type: "string",
            sensitive: true
        },
        S42: {
            type: "structure",
            members: {
                Components: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Id: {},
                            Name: {}
                        }
                    }
                }
            }
        }
    },
    paginators: {
        DescribeDocumentVersions: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "DocumentVersions"
        },
        DescribeFolderContents: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: [ "Folders", "Documents" ]
        },
        DescribeUsers: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "Users"
        }
    }
};

AWS.apiLoader.services["workspaces"] = {};

AWS.WorkSpaces = AWS.Service.defineService("workspaces", [ "2015-04-08" ]);

AWS.apiLoader.services["workspaces"]["2015-04-08"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-04-08",
        endpointPrefix: "workspaces",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon WorkSpaces",
        serviceId: "WorkSpaces",
        signatureVersion: "v4",
        targetPrefix: "WorkspacesService",
        uid: "workspaces-2015-04-08"
    },
    operations: {
        AssociateConnectionAlias: {
            input: {
                type: "structure",
                required: [ "AliasId", "ResourceId" ],
                members: {
                    AliasId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionIdentifier: {}
                }
            }
        },
        AssociateIpGroups: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "GroupIds" ],
                members: {
                    DirectoryId: {},
                    GroupIds: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AuthorizeIpRules: {
            input: {
                type: "structure",
                required: [ "GroupId", "UserRules" ],
                members: {
                    GroupId: {},
                    UserRules: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CopyWorkspaceImage: {
            input: {
                type: "structure",
                required: [ "Name", "SourceImageId", "SourceRegion" ],
                members: {
                    Name: {},
                    Description: {},
                    SourceImageId: {},
                    SourceRegion: {},
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {}
                }
            }
        },
        CreateConnectionAlias: {
            input: {
                type: "structure",
                required: [ "ConnectionString" ],
                members: {
                    ConnectionString: {},
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AliasId: {}
                }
            }
        },
        CreateIpGroup: {
            input: {
                type: "structure",
                required: [ "GroupName" ],
                members: {
                    GroupName: {},
                    GroupDesc: {},
                    UserRules: {
                        shape: "Sc"
                    },
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupId: {}
                }
            }
        },
        CreateTags: {
            input: {
                type: "structure",
                required: [ "ResourceId", "Tags" ],
                members: {
                    ResourceId: {},
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateWorkspaceBundle: {
            input: {
                type: "structure",
                required: [ "BundleName", "BundleDescription", "ImageId", "ComputeType", "UserStorage" ],
                members: {
                    BundleName: {},
                    BundleDescription: {},
                    ImageId: {},
                    ComputeType: {
                        shape: "S13"
                    },
                    UserStorage: {
                        shape: "S15"
                    },
                    RootStorage: {
                        shape: "S16"
                    },
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkspaceBundle: {
                        shape: "S18"
                    }
                }
            }
        },
        CreateWorkspaces: {
            input: {
                type: "structure",
                required: [ "Workspaces" ],
                members: {
                    Workspaces: {
                        type: "list",
                        member: {
                            shape: "S1f"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkspaceRequest: {
                                    shape: "S1f"
                                },
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    },
                    PendingRequests: {
                        shape: "S1s"
                    }
                }
            }
        },
        DeleteConnectionAlias: {
            input: {
                type: "structure",
                required: [ "AliasId" ],
                members: {
                    AliasId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteIpGroup: {
            input: {
                type: "structure",
                required: [ "GroupId" ],
                members: {
                    GroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTags: {
            input: {
                type: "structure",
                required: [ "ResourceId", "TagKeys" ],
                members: {
                    ResourceId: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorkspaceBundle: {
            input: {
                type: "structure",
                members: {
                    BundleId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorkspaceImage: {
            input: {
                type: "structure",
                required: [ "ImageId" ],
                members: {
                    ImageId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterWorkspaceDirectory: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAccount: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    DedicatedTenancySupport: {},
                    DedicatedTenancyManagementCidrRange: {}
                }
            }
        },
        DescribeAccountModifications: {
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountModifications: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModificationState: {},
                                DedicatedTenancySupport: {},
                                DedicatedTenancyManagementCidrRange: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeClientProperties: {
            input: {
                type: "structure",
                required: [ "ResourceIds" ],
                members: {
                    ResourceIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientPropertiesList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceId: {},
                                ClientProperties: {
                                    shape: "S2w"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeConnectionAliasPermissions: {
            input: {
                type: "structure",
                required: [ "AliasId" ],
                members: {
                    AliasId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AliasId: {},
                    ConnectionAliasPermissions: {
                        type: "list",
                        member: {
                            shape: "S32"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeConnectionAliases: {
            input: {
                type: "structure",
                members: {
                    AliasIds: {
                        type: "list",
                        member: {}
                    },
                    ResourceId: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionAliases: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConnectionString: {},
                                AliasId: {},
                                State: {},
                                OwnerAccountId: {},
                                Associations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            AssociationStatus: {},
                                            AssociatedAccountId: {},
                                            ResourceId: {},
                                            ConnectionIdentifier: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeIpGroups: {
            input: {
                type: "structure",
                members: {
                    GroupIds: {
                        shape: "S8"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Result: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                groupId: {},
                                groupName: {},
                                groupDesc: {},
                                userRules: {
                                    shape: "Sc"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeTags: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "Sm"
                    }
                }
            }
        },
        DescribeWorkspaceBundles: {
            input: {
                type: "structure",
                members: {
                    BundleIds: {
                        type: "list",
                        member: {}
                    },
                    Owner: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Bundles: {
                        type: "list",
                        member: {
                            shape: "S18"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeWorkspaceDirectories: {
            input: {
                type: "structure",
                members: {
                    DirectoryIds: {
                        type: "list",
                        member: {}
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Directories: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DirectoryId: {},
                                Alias: {},
                                DirectoryName: {},
                                RegistrationCode: {},
                                SubnetIds: {
                                    shape: "S3v"
                                },
                                DnsIpAddresses: {
                                    type: "list",
                                    member: {}
                                },
                                CustomerUserName: {},
                                IamRoleId: {},
                                DirectoryType: {},
                                WorkspaceSecurityGroupId: {},
                                State: {},
                                WorkspaceCreationProperties: {
                                    type: "structure",
                                    members: {
                                        EnableWorkDocs: {
                                            type: "boolean"
                                        },
                                        EnableInternetAccess: {
                                            type: "boolean"
                                        },
                                        DefaultOu: {},
                                        CustomSecurityGroupId: {},
                                        UserEnabledAsLocalAdministrator: {
                                            type: "boolean"
                                        },
                                        EnableMaintenanceMode: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                ipGroupIds: {
                                    shape: "S8"
                                },
                                WorkspaceAccessProperties: {
                                    shape: "S43"
                                },
                                Tenancy: {},
                                SelfservicePermissions: {
                                    shape: "S46"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeWorkspaceImagePermissions: {
            input: {
                type: "structure",
                required: [ "ImageId" ],
                members: {
                    ImageId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {},
                    ImagePermissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SharedAccountId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeWorkspaceImages: {
            input: {
                type: "structure",
                members: {
                    ImageIds: {
                        type: "list",
                        member: {}
                    },
                    ImageType: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Images: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ImageId: {},
                                Name: {},
                                Description: {},
                                OperatingSystem: {
                                    type: "structure",
                                    members: {
                                        Type: {}
                                    }
                                },
                                State: {},
                                RequiredTenancy: {},
                                ErrorCode: {},
                                ErrorMessage: {},
                                Created: {
                                    type: "timestamp"
                                },
                                OwnerAccountId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeWorkspaceSnapshots: {
            input: {
                type: "structure",
                required: [ "WorkspaceId" ],
                members: {
                    WorkspaceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RebuildSnapshots: {
                        shape: "S4o"
                    },
                    RestoreSnapshots: {
                        shape: "S4o"
                    }
                }
            }
        },
        DescribeWorkspaces: {
            input: {
                type: "structure",
                members: {
                    WorkspaceIds: {
                        shape: "S4r"
                    },
                    DirectoryId: {},
                    UserName: {},
                    BundleId: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Workspaces: {
                        shape: "S1s"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeWorkspacesConnectionStatus: {
            input: {
                type: "structure",
                members: {
                    WorkspaceIds: {
                        shape: "S4r"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkspacesConnectionStatus: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkspaceId: {},
                                ConnectionState: {},
                                ConnectionStateCheckTimestamp: {
                                    type: "timestamp"
                                },
                                LastKnownUserConnectionTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisassociateConnectionAlias: {
            input: {
                type: "structure",
                required: [ "AliasId" ],
                members: {
                    AliasId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateIpGroups: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "GroupIds" ],
                members: {
                    DirectoryId: {},
                    GroupIds: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ImportWorkspaceImage: {
            input: {
                type: "structure",
                required: [ "Ec2ImageId", "IngestionProcess", "ImageName", "ImageDescription" ],
                members: {
                    Ec2ImageId: {},
                    IngestionProcess: {},
                    ImageName: {},
                    ImageDescription: {},
                    Tags: {
                        shape: "Sm"
                    },
                    Applications: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {}
                }
            }
        },
        ListAvailableManagementCidrRanges: {
            input: {
                type: "structure",
                required: [ "ManagementCidrRangeConstraint" ],
                members: {
                    ManagementCidrRangeConstraint: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManagementCidrRanges: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        MigrateWorkspace: {
            input: {
                type: "structure",
                required: [ "SourceWorkspaceId", "BundleId" ],
                members: {
                    SourceWorkspaceId: {},
                    BundleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SourceWorkspaceId: {},
                    TargetWorkspaceId: {}
                }
            }
        },
        ModifyAccount: {
            input: {
                type: "structure",
                members: {
                    DedicatedTenancySupport: {},
                    DedicatedTenancyManagementCidrRange: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifyClientProperties: {
            input: {
                type: "structure",
                required: [ "ResourceId", "ClientProperties" ],
                members: {
                    ResourceId: {},
                    ClientProperties: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifySelfservicePermissions: {
            input: {
                type: "structure",
                required: [ "ResourceId", "SelfservicePermissions" ],
                members: {
                    ResourceId: {},
                    SelfservicePermissions: {
                        shape: "S46"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifyWorkspaceAccessProperties: {
            input: {
                type: "structure",
                required: [ "ResourceId", "WorkspaceAccessProperties" ],
                members: {
                    ResourceId: {},
                    WorkspaceAccessProperties: {
                        shape: "S43"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifyWorkspaceCreationProperties: {
            input: {
                type: "structure",
                required: [ "ResourceId", "WorkspaceCreationProperties" ],
                members: {
                    ResourceId: {},
                    WorkspaceCreationProperties: {
                        type: "structure",
                        members: {
                            EnableWorkDocs: {
                                type: "boolean"
                            },
                            EnableInternetAccess: {
                                type: "boolean"
                            },
                            DefaultOu: {},
                            CustomSecurityGroupId: {},
                            UserEnabledAsLocalAdministrator: {
                                type: "boolean"
                            },
                            EnableMaintenanceMode: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifyWorkspaceProperties: {
            input: {
                type: "structure",
                required: [ "WorkspaceId", "WorkspaceProperties" ],
                members: {
                    WorkspaceId: {},
                    WorkspaceProperties: {
                        shape: "S1j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifyWorkspaceState: {
            input: {
                type: "structure",
                required: [ "WorkspaceId", "WorkspaceState" ],
                members: {
                    WorkspaceId: {},
                    WorkspaceState: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RebootWorkspaces: {
            input: {
                type: "structure",
                required: [ "RebootWorkspaceRequests" ],
                members: {
                    RebootWorkspaceRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "WorkspaceId" ],
                            members: {
                                WorkspaceId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedRequests: {
                        type: "list",
                        member: {
                            shape: "S61"
                        }
                    }
                }
            }
        },
        RebuildWorkspaces: {
            input: {
                type: "structure",
                required: [ "RebuildWorkspaceRequests" ],
                members: {
                    RebuildWorkspaceRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "WorkspaceId" ],
                            members: {
                                WorkspaceId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedRequests: {
                        type: "list",
                        member: {
                            shape: "S61"
                        }
                    }
                }
            }
        },
        RegisterWorkspaceDirectory: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "EnableWorkDocs" ],
                members: {
                    DirectoryId: {},
                    SubnetIds: {
                        shape: "S3v"
                    },
                    EnableWorkDocs: {
                        type: "boolean"
                    },
                    EnableSelfService: {
                        type: "boolean"
                    },
                    Tenancy: {},
                    Tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RestoreWorkspace: {
            input: {
                type: "structure",
                required: [ "WorkspaceId" ],
                members: {
                    WorkspaceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RevokeIpRules: {
            input: {
                type: "structure",
                required: [ "GroupId", "UserRules" ],
                members: {
                    GroupId: {},
                    UserRules: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartWorkspaces: {
            input: {
                type: "structure",
                required: [ "StartWorkspaceRequests" ],
                members: {
                    StartWorkspaceRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkspaceId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedRequests: {
                        type: "list",
                        member: {
                            shape: "S61"
                        }
                    }
                }
            }
        },
        StopWorkspaces: {
            input: {
                type: "structure",
                required: [ "StopWorkspaceRequests" ],
                members: {
                    StopWorkspaceRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkspaceId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedRequests: {
                        type: "list",
                        member: {
                            shape: "S61"
                        }
                    }
                }
            }
        },
        TerminateWorkspaces: {
            input: {
                type: "structure",
                required: [ "TerminateWorkspaceRequests" ],
                members: {
                    TerminateWorkspaceRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "WorkspaceId" ],
                            members: {
                                WorkspaceId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedRequests: {
                        type: "list",
                        member: {
                            shape: "S61"
                        }
                    }
                }
            }
        },
        UpdateConnectionAliasPermission: {
            input: {
                type: "structure",
                required: [ "AliasId", "ConnectionAliasPermission" ],
                members: {
                    AliasId: {},
                    ConnectionAliasPermission: {
                        shape: "S32"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRulesOfIpGroup: {
            input: {
                type: "structure",
                required: [ "GroupId", "UserRules" ],
                members: {
                    GroupId: {},
                    UserRules: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWorkspaceBundle: {
            input: {
                type: "structure",
                members: {
                    BundleId: {},
                    ImageId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWorkspaceImagePermission: {
            input: {
                type: "structure",
                required: [ "ImageId", "AllowCopyImage", "SharedAccountId" ],
                members: {
                    ImageId: {},
                    AllowCopyImage: {
                        type: "boolean"
                    },
                    SharedAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S8: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ipRule: {},
                    ruleDesc: {}
                }
            }
        },
        Sm: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                Name: {}
            }
        },
        S15: {
            type: "structure",
            members: {
                Capacity: {}
            }
        },
        S16: {
            type: "structure",
            members: {
                Capacity: {}
            }
        },
        S18: {
            type: "structure",
            members: {
                BundleId: {},
                Name: {},
                Owner: {},
                Description: {},
                ImageId: {},
                RootStorage: {
                    shape: "S16"
                },
                UserStorage: {
                    shape: "S15"
                },
                ComputeType: {
                    shape: "S13"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                },
                CreationTime: {
                    type: "timestamp"
                }
            }
        },
        S1f: {
            type: "structure",
            required: [ "DirectoryId", "UserName", "BundleId" ],
            members: {
                DirectoryId: {},
                UserName: {},
                BundleId: {},
                VolumeEncryptionKey: {},
                UserVolumeEncryptionEnabled: {
                    type: "boolean"
                },
                RootVolumeEncryptionEnabled: {
                    type: "boolean"
                },
                WorkspaceProperties: {
                    shape: "S1j"
                },
                Tags: {
                    shape: "Sm"
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                RunningMode: {},
                RunningModeAutoStopTimeoutInMinutes: {
                    type: "integer"
                },
                RootVolumeSizeGib: {
                    type: "integer"
                },
                UserVolumeSizeGib: {
                    type: "integer"
                },
                ComputeTypeName: {}
            }
        },
        S1s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    WorkspaceId: {},
                    DirectoryId: {},
                    UserName: {},
                    IpAddress: {},
                    State: {},
                    BundleId: {},
                    SubnetId: {},
                    ErrorMessage: {},
                    ErrorCode: {},
                    ComputerName: {},
                    VolumeEncryptionKey: {},
                    UserVolumeEncryptionEnabled: {
                        type: "boolean"
                    },
                    RootVolumeEncryptionEnabled: {
                        type: "boolean"
                    },
                    WorkspaceProperties: {
                        shape: "S1j"
                    },
                    ModificationStates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Resource: {},
                                State: {}
                            }
                        }
                    }
                }
            }
        },
        S2w: {
            type: "structure",
            members: {
                ReconnectEnabled: {}
            }
        },
        S32: {
            type: "structure",
            required: [ "SharedAccountId", "AllowAssociation" ],
            members: {
                SharedAccountId: {},
                AllowAssociation: {
                    type: "boolean"
                }
            }
        },
        S3v: {
            type: "list",
            member: {}
        },
        S43: {
            type: "structure",
            members: {
                DeviceTypeWindows: {},
                DeviceTypeOsx: {},
                DeviceTypeWeb: {},
                DeviceTypeIos: {},
                DeviceTypeAndroid: {},
                DeviceTypeChromeOs: {},
                DeviceTypeZeroClient: {}
            }
        },
        S46: {
            type: "structure",
            members: {
                RestartWorkspace: {},
                IncreaseVolumeSize: {},
                ChangeComputeType: {},
                SwitchRunningMode: {},
                RebuildWorkspace: {}
            }
        },
        S4o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SnapshotTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S4r: {
            type: "list",
            member: {}
        },
        S61: {
            type: "structure",
            members: {
                WorkspaceId: {},
                ErrorCode: {},
                ErrorMessage: {}
            }
        }
    },
    paginators: {
        DescribeWorkspaceBundles: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Bundles"
        },
        DescribeWorkspaceDirectories: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Directories"
        },
        DescribeWorkspaces: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "Workspaces"
        }
    }
};

AWS.apiLoader.services["codestar"] = {};

AWS.CodeStar = AWS.Service.defineService("codestar", [ "2017-04-19" ]);

AWS.apiLoader.services["codestar"]["2017-04-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-04-19",
        endpointPrefix: "codestar",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "CodeStar",
        serviceFullName: "AWS CodeStar",
        serviceId: "CodeStar",
        signatureVersion: "v4",
        targetPrefix: "CodeStar_20170419",
        uid: "codestar-2017-04-19"
    },
    operations: {
        AssociateTeamMember: {
            input: {
                type: "structure",
                required: [ "projectId", "userArn", "projectRole" ],
                members: {
                    projectId: {},
                    clientRequestToken: {},
                    userArn: {},
                    projectRole: {},
                    remoteAccessAllowed: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    clientRequestToken: {}
                }
            }
        },
        CreateProject: {
            input: {
                type: "structure",
                required: [ "name", "id" ],
                members: {
                    name: {
                        shape: "S9"
                    },
                    id: {},
                    description: {
                        shape: "Sa"
                    },
                    clientRequestToken: {},
                    sourceCode: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "source", "destination" ],
                            members: {
                                source: {
                                    type: "structure",
                                    required: [ "s3" ],
                                    members: {
                                        s3: {
                                            shape: "Se"
                                        }
                                    }
                                },
                                destination: {
                                    type: "structure",
                                    members: {
                                        codeCommit: {
                                            type: "structure",
                                            required: [ "name" ],
                                            members: {
                                                name: {}
                                            }
                                        },
                                        gitHub: {
                                            type: "structure",
                                            required: [ "name", "type", "owner", "privateRepository", "issuesEnabled", "token" ],
                                            members: {
                                                name: {},
                                                description: {},
                                                type: {},
                                                owner: {},
                                                privateRepository: {
                                                    type: "boolean"
                                                },
                                                issuesEnabled: {
                                                    type: "boolean"
                                                },
                                                token: {
                                                    type: "string",
                                                    sensitive: true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    toolchain: {
                        type: "structure",
                        required: [ "source" ],
                        members: {
                            source: {
                                type: "structure",
                                required: [ "s3" ],
                                members: {
                                    s3: {
                                        shape: "Se"
                                    }
                                }
                            },
                            roleArn: {},
                            stackParameters: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        }
                    },
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "arn" ],
                members: {
                    id: {},
                    arn: {},
                    clientRequestToken: {},
                    projectTemplateId: {}
                }
            }
        },
        CreateUserProfile: {
            input: {
                type: "structure",
                required: [ "userArn", "displayName", "emailAddress" ],
                members: {
                    userArn: {},
                    displayName: {
                        shape: "S14"
                    },
                    emailAddress: {
                        shape: "S15"
                    },
                    sshPublicKey: {}
                }
            },
            output: {
                type: "structure",
                required: [ "userArn" ],
                members: {
                    userArn: {},
                    displayName: {
                        shape: "S14"
                    },
                    emailAddress: {
                        shape: "S15"
                    },
                    sshPublicKey: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteProject: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    clientRequestToken: {},
                    deleteStack: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    stackId: {},
                    projectArn: {}
                }
            }
        },
        DeleteUserProfile: {
            input: {
                type: "structure",
                required: [ "userArn" ],
                members: {
                    userArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "userArn" ],
                members: {
                    userArn: {}
                }
            }
        },
        DescribeProject: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {
                        shape: "S9"
                    },
                    id: {},
                    arn: {},
                    description: {
                        shape: "Sa"
                    },
                    clientRequestToken: {},
                    createdTimeStamp: {
                        type: "timestamp"
                    },
                    stackId: {},
                    projectTemplateId: {},
                    status: {
                        type: "structure",
                        required: [ "state" ],
                        members: {
                            state: {},
                            reason: {}
                        }
                    }
                }
            }
        },
        DescribeUserProfile: {
            input: {
                type: "structure",
                required: [ "userArn" ],
                members: {
                    userArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "userArn", "createdTimestamp", "lastModifiedTimestamp" ],
                members: {
                    userArn: {},
                    displayName: {
                        shape: "S14"
                    },
                    emailAddress: {
                        shape: "S15"
                    },
                    sshPublicKey: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DisassociateTeamMember: {
            input: {
                type: "structure",
                required: [ "projectId", "userArn" ],
                members: {
                    projectId: {},
                    userArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListProjects: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "projects" ],
                members: {
                    projects: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                projectId: {},
                                projectArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListResources: {
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id" ],
                            members: {
                                id: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForProject: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sx"
                    },
                    nextToken: {}
                }
            }
        },
        ListTeamMembers: {
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "teamMembers" ],
                members: {
                    teamMembers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "userArn", "projectRole" ],
                            members: {
                                userArn: {},
                                projectRole: {},
                                remoteAccessAllowed: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListUserProfiles: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "userProfiles" ],
                members: {
                    userProfiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                userArn: {},
                                displayName: {
                                    shape: "S14"
                                },
                                emailAddress: {
                                    shape: "S15"
                                },
                                sshPublicKey: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        TagProject: {
            input: {
                type: "structure",
                required: [ "id", "tags" ],
                members: {
                    id: {},
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sx"
                    }
                }
            }
        },
        UntagProject: {
            input: {
                type: "structure",
                required: [ "id", "tags" ],
                members: {
                    id: {},
                    tags: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateProject: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    name: {
                        shape: "S9"
                    },
                    description: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTeamMember: {
            input: {
                type: "structure",
                required: [ "projectId", "userArn" ],
                members: {
                    projectId: {},
                    userArn: {},
                    projectRole: {},
                    remoteAccessAllowed: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userArn: {},
                    projectRole: {},
                    remoteAccessAllowed: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateUserProfile: {
            input: {
                type: "structure",
                required: [ "userArn" ],
                members: {
                    userArn: {},
                    displayName: {
                        shape: "S14"
                    },
                    emailAddress: {
                        shape: "S15"
                    },
                    sshPublicKey: {}
                }
            },
            output: {
                type: "structure",
                required: [ "userArn" ],
                members: {
                    userArn: {},
                    displayName: {
                        shape: "S14"
                    },
                    emailAddress: {
                        shape: "S15"
                    },
                    sshPublicKey: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "string",
            sensitive: true
        },
        Sa: {
            type: "string",
            sensitive: true
        },
        Se: {
            type: "structure",
            members: {
                bucketName: {},
                bucketKey: {}
            }
        },
        Sx: {
            type: "map",
            key: {},
            value: {}
        },
        S14: {
            type: "string",
            sensitive: true
        },
        S15: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {}
};

AWS.apiLoader.services["lexmodelbuildingservice"] = {};

AWS.LexModelBuildingService = AWS.Service.defineService("lexmodelbuildingservice", [ "2017-04-19" ]);

AWS.apiLoader.services["lexmodelbuildingservice"]["2017-04-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-04-19",
        endpointPrefix: "models.lex",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Lex Model Building Service",
        serviceId: "Lex Model Building Service",
        signatureVersion: "v4",
        signingName: "lex",
        uid: "lex-models-2017-04-19"
    },
    operations: {
        CreateBotVersion: {
            http: {
                requestUri: "/bots/{name}/versions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    checksum: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    intents: {
                        shape: "S6"
                    },
                    clarificationPrompt: {
                        shape: "Sa"
                    },
                    abortStatement: {
                        shape: "Si"
                    },
                    status: {},
                    failureReason: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    voiceId: {},
                    checksum: {},
                    version: {},
                    locale: {},
                    childDirected: {
                        type: "boolean"
                    },
                    enableModelImprovements: {
                        type: "boolean"
                    },
                    detectSentiment: {
                        type: "boolean"
                    }
                }
            }
        },
        CreateIntentVersion: {
            http: {
                requestUri: "/intents/{name}/versions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    checksum: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    slots: {
                        shape: "Sq"
                    },
                    sampleUtterances: {
                        shape: "S13"
                    },
                    confirmationPrompt: {
                        shape: "Sa"
                    },
                    rejectionStatement: {
                        shape: "Si"
                    },
                    followUpPrompt: {
                        shape: "S14"
                    },
                    conclusionStatement: {
                        shape: "Si"
                    },
                    dialogCodeHook: {
                        shape: "S15"
                    },
                    fulfillmentActivity: {
                        shape: "S18"
                    },
                    parentIntentSignature: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {},
                    checksum: {},
                    kendraConfiguration: {
                        shape: "S1b"
                    },
                    inputContexts: {
                        shape: "S1f"
                    },
                    outputContexts: {
                        shape: "S1i"
                    }
                }
            }
        },
        CreateSlotTypeVersion: {
            http: {
                requestUri: "/slottypes/{name}/versions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    checksum: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    enumerationValues: {
                        shape: "S1q"
                    },
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {},
                    checksum: {},
                    valueSelectionStrategy: {},
                    parentSlotTypeSignature: {},
                    slotTypeConfigurations: {
                        shape: "S1v"
                    }
                }
            }
        },
        DeleteBot: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            }
        },
        DeleteBotAlias: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botName}/aliases/{name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name", "botName" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    }
                }
            }
        },
        DeleteBotChannelAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botName}/aliases/{aliasName}/channels/{name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name", "botName", "botAlias" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    botAlias: {
                        location: "uri",
                        locationName: "aliasName"
                    }
                }
            }
        },
        DeleteBotVersion: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{name}/versions/{version}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name", "version" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    version: {
                        location: "uri",
                        locationName: "version"
                    }
                }
            }
        },
        DeleteIntent: {
            http: {
                method: "DELETE",
                requestUri: "/intents/{name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            }
        },
        DeleteIntentVersion: {
            http: {
                method: "DELETE",
                requestUri: "/intents/{name}/versions/{version}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name", "version" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    version: {
                        location: "uri",
                        locationName: "version"
                    }
                }
            }
        },
        DeleteSlotType: {
            http: {
                method: "DELETE",
                requestUri: "/slottypes/{name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            }
        },
        DeleteSlotTypeVersion: {
            http: {
                method: "DELETE",
                requestUri: "/slottypes/{name}/version/{version}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name", "version" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    version: {
                        location: "uri",
                        locationName: "version"
                    }
                }
            }
        },
        DeleteUtterances: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botName}/utterances/{userId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "botName", "userId" ],
                members: {
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            }
        },
        GetBot: {
            http: {
                method: "GET",
                requestUri: "/bots/{name}/versions/{versionoralias}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "versionOrAlias" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    versionOrAlias: {
                        location: "uri",
                        locationName: "versionoralias"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    intents: {
                        shape: "S6"
                    },
                    enableModelImprovements: {
                        type: "boolean"
                    },
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    clarificationPrompt: {
                        shape: "Sa"
                    },
                    abortStatement: {
                        shape: "Si"
                    },
                    status: {},
                    failureReason: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    voiceId: {},
                    checksum: {},
                    version: {},
                    locale: {},
                    childDirected: {
                        type: "boolean"
                    },
                    detectSentiment: {
                        type: "boolean"
                    }
                }
            }
        },
        GetBotAlias: {
            http: {
                method: "GET",
                requestUri: "/bots/{botName}/aliases/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "botName" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    botVersion: {},
                    botName: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    checksum: {},
                    conversationLogs: {
                        shape: "S2h"
                    }
                }
            }
        },
        GetBotAliases: {
            http: {
                method: "GET",
                requestUri: "/bots/{botName}/aliases/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botName" ],
                members: {
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nameContains: {
                        location: "querystring",
                        locationName: "nameContains"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BotAliases: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                description: {},
                                botVersion: {},
                                botName: {},
                                lastUpdatedDate: {
                                    type: "timestamp"
                                },
                                createdDate: {
                                    type: "timestamp"
                                },
                                checksum: {},
                                conversationLogs: {
                                    shape: "S2h"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetBotChannelAssociation: {
            http: {
                method: "GET",
                requestUri: "/bots/{botName}/aliases/{aliasName}/channels/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "botName", "botAlias" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    botAlias: {
                        location: "uri",
                        locationName: "aliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    botAlias: {},
                    botName: {},
                    createdDate: {
                        type: "timestamp"
                    },
                    type: {},
                    botConfiguration: {
                        shape: "S2z"
                    },
                    status: {},
                    failureReason: {}
                }
            }
        },
        GetBotChannelAssociations: {
            http: {
                method: "GET",
                requestUri: "/bots/{botName}/aliases/{aliasName}/channels/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botName", "botAlias" ],
                members: {
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    botAlias: {
                        location: "uri",
                        locationName: "aliasName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nameContains: {
                        location: "querystring",
                        locationName: "nameContains"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botChannelAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                description: {},
                                botAlias: {},
                                botName: {},
                                createdDate: {
                                    type: "timestamp"
                                },
                                type: {},
                                botConfiguration: {
                                    shape: "S2z"
                                },
                                status: {},
                                failureReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetBotVersions: {
            http: {
                method: "GET",
                requestUri: "/bots/{name}/versions/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    bots: {
                        shape: "S38"
                    },
                    nextToken: {}
                }
            }
        },
        GetBots: {
            http: {
                method: "GET",
                requestUri: "/bots/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nameContains: {
                        location: "querystring",
                        locationName: "nameContains"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    bots: {
                        shape: "S38"
                    },
                    nextToken: {}
                }
            }
        },
        GetBuiltinIntent: {
            http: {
                method: "GET",
                requestUri: "/builtins/intents/{signature}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "signature" ],
                members: {
                    signature: {
                        location: "uri",
                        locationName: "signature"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    signature: {},
                    supportedLocales: {
                        shape: "S3e"
                    },
                    slots: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {}
                            }
                        }
                    }
                }
            }
        },
        GetBuiltinIntents: {
            http: {
                method: "GET",
                requestUri: "/builtins/intents/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    locale: {
                        location: "querystring",
                        locationName: "locale"
                    },
                    signatureContains: {
                        location: "querystring",
                        locationName: "signatureContains"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    intents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                signature: {},
                                supportedLocales: {
                                    shape: "S3e"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetBuiltinSlotTypes: {
            http: {
                method: "GET",
                requestUri: "/builtins/slottypes/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    locale: {
                        location: "querystring",
                        locationName: "locale"
                    },
                    signatureContains: {
                        location: "querystring",
                        locationName: "signatureContains"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                signature: {},
                                supportedLocales: {
                                    shape: "S3e"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetExport: {
            http: {
                method: "GET",
                requestUri: "/exports/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "version", "resourceType", "exportType" ],
                members: {
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    version: {
                        location: "querystring",
                        locationName: "version"
                    },
                    resourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    exportType: {
                        location: "querystring",
                        locationName: "exportType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    version: {},
                    resourceType: {},
                    exportType: {},
                    exportStatus: {},
                    failureReason: {},
                    url: {}
                }
            }
        },
        GetImport: {
            http: {
                method: "GET",
                requestUri: "/imports/{importId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "importId" ],
                members: {
                    importId: {
                        location: "uri",
                        locationName: "importId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    resourceType: {},
                    mergeStrategy: {},
                    importId: {},
                    importStatus: {},
                    failureReason: {
                        type: "list",
                        member: {}
                    },
                    createdDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetIntent: {
            http: {
                method: "GET",
                requestUri: "/intents/{name}/versions/{version}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "version" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    version: {
                        location: "uri",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    slots: {
                        shape: "Sq"
                    },
                    sampleUtterances: {
                        shape: "S13"
                    },
                    confirmationPrompt: {
                        shape: "Sa"
                    },
                    rejectionStatement: {
                        shape: "Si"
                    },
                    followUpPrompt: {
                        shape: "S14"
                    },
                    conclusionStatement: {
                        shape: "Si"
                    },
                    dialogCodeHook: {
                        shape: "S15"
                    },
                    fulfillmentActivity: {
                        shape: "S18"
                    },
                    parentIntentSignature: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {},
                    checksum: {},
                    kendraConfiguration: {
                        shape: "S1b"
                    },
                    inputContexts: {
                        shape: "S1f"
                    },
                    outputContexts: {
                        shape: "S1i"
                    }
                }
            }
        },
        GetIntentVersions: {
            http: {
                method: "GET",
                requestUri: "/intents/{name}/versions/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    intents: {
                        shape: "S45"
                    },
                    nextToken: {}
                }
            }
        },
        GetIntents: {
            http: {
                method: "GET",
                requestUri: "/intents/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nameContains: {
                        location: "querystring",
                        locationName: "nameContains"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    intents: {
                        shape: "S45"
                    },
                    nextToken: {}
                }
            }
        },
        GetSlotType: {
            http: {
                method: "GET",
                requestUri: "/slottypes/{name}/versions/{version}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "version" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    version: {
                        location: "uri",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    enumerationValues: {
                        shape: "S1q"
                    },
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {},
                    checksum: {},
                    valueSelectionStrategy: {},
                    parentSlotTypeSignature: {},
                    slotTypeConfigurations: {
                        shape: "S1v"
                    }
                }
            }
        },
        GetSlotTypeVersions: {
            http: {
                method: "GET",
                requestUri: "/slottypes/{name}/versions/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotTypes: {
                        shape: "S4d"
                    },
                    nextToken: {}
                }
            }
        },
        GetSlotTypes: {
            http: {
                method: "GET",
                requestUri: "/slottypes/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nameContains: {
                        location: "querystring",
                        locationName: "nameContains"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotTypes: {
                        shape: "S4d"
                    },
                    nextToken: {}
                }
            }
        },
        GetUtterancesView: {
            http: {
                method: "GET",
                requestUri: "/bots/{botname}/utterances?view=aggregation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botName", "botVersions", "statusType" ],
                members: {
                    botName: {
                        location: "uri",
                        locationName: "botname"
                    },
                    botVersions: {
                        location: "querystring",
                        locationName: "bot_versions",
                        type: "list",
                        member: {}
                    },
                    statusType: {
                        location: "querystring",
                        locationName: "status_type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botName: {},
                    utterances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                botVersion: {},
                                utterances: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            utteranceString: {},
                                            count: {
                                                type: "integer"
                                            },
                                            distinctUsers: {
                                                type: "integer"
                                            },
                                            firstUtteredDate: {
                                                type: "timestamp"
                                            },
                                            lastUtteredDate: {
                                                type: "timestamp"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S4u"
                    }
                }
            }
        },
        PutBot: {
            http: {
                method: "PUT",
                requestUri: "/bots/{name}/versions/$LATEST",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "locale", "childDirected" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {},
                    intents: {
                        shape: "S6"
                    },
                    enableModelImprovements: {
                        type: "boolean"
                    },
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    clarificationPrompt: {
                        shape: "Sa"
                    },
                    abortStatement: {
                        shape: "Si"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    voiceId: {},
                    checksum: {},
                    processBehavior: {},
                    locale: {},
                    childDirected: {
                        type: "boolean"
                    },
                    detectSentiment: {
                        type: "boolean"
                    },
                    createVersion: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "S4u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    intents: {
                        shape: "S6"
                    },
                    enableModelImprovements: {
                        type: "boolean"
                    },
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    clarificationPrompt: {
                        shape: "Sa"
                    },
                    abortStatement: {
                        shape: "Si"
                    },
                    status: {},
                    failureReason: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    voiceId: {},
                    checksum: {},
                    version: {},
                    locale: {},
                    childDirected: {
                        type: "boolean"
                    },
                    createVersion: {
                        type: "boolean"
                    },
                    detectSentiment: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "S4u"
                    }
                }
            }
        },
        PutBotAlias: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botName}/aliases/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "botVersion", "botName" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {},
                    botVersion: {},
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    checksum: {},
                    conversationLogs: {
                        type: "structure",
                        required: [ "logSettings", "iamRoleArn" ],
                        members: {
                            logSettings: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "logType", "destination", "resourceArn" ],
                                    members: {
                                        logType: {},
                                        destination: {},
                                        kmsKeyArn: {},
                                        resourceArn: {}
                                    }
                                }
                            },
                            iamRoleArn: {}
                        }
                    },
                    tags: {
                        shape: "S4u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    botVersion: {},
                    botName: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    checksum: {},
                    conversationLogs: {
                        shape: "S2h"
                    },
                    tags: {
                        shape: "S4u"
                    }
                }
            }
        },
        PutIntent: {
            http: {
                method: "PUT",
                requestUri: "/intents/{name}/versions/$LATEST",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {},
                    slots: {
                        shape: "Sq"
                    },
                    sampleUtterances: {
                        shape: "S13"
                    },
                    confirmationPrompt: {
                        shape: "Sa"
                    },
                    rejectionStatement: {
                        shape: "Si"
                    },
                    followUpPrompt: {
                        shape: "S14"
                    },
                    conclusionStatement: {
                        shape: "Si"
                    },
                    dialogCodeHook: {
                        shape: "S15"
                    },
                    fulfillmentActivity: {
                        shape: "S18"
                    },
                    parentIntentSignature: {},
                    checksum: {},
                    createVersion: {
                        type: "boolean"
                    },
                    kendraConfiguration: {
                        shape: "S1b"
                    },
                    inputContexts: {
                        shape: "S1f"
                    },
                    outputContexts: {
                        shape: "S1i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    slots: {
                        shape: "Sq"
                    },
                    sampleUtterances: {
                        shape: "S13"
                    },
                    confirmationPrompt: {
                        shape: "Sa"
                    },
                    rejectionStatement: {
                        shape: "Si"
                    },
                    followUpPrompt: {
                        shape: "S14"
                    },
                    conclusionStatement: {
                        shape: "Si"
                    },
                    dialogCodeHook: {
                        shape: "S15"
                    },
                    fulfillmentActivity: {
                        shape: "S18"
                    },
                    parentIntentSignature: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {},
                    checksum: {},
                    createVersion: {
                        type: "boolean"
                    },
                    kendraConfiguration: {
                        shape: "S1b"
                    },
                    inputContexts: {
                        shape: "S1f"
                    },
                    outputContexts: {
                        shape: "S1i"
                    }
                }
            }
        },
        PutSlotType: {
            http: {
                method: "PUT",
                requestUri: "/slottypes/{name}/versions/$LATEST",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {},
                    enumerationValues: {
                        shape: "S1q"
                    },
                    checksum: {},
                    valueSelectionStrategy: {},
                    createVersion: {
                        type: "boolean"
                    },
                    parentSlotTypeSignature: {},
                    slotTypeConfigurations: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    enumerationValues: {
                        shape: "S1q"
                    },
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {},
                    checksum: {},
                    valueSelectionStrategy: {},
                    createVersion: {
                        type: "boolean"
                    },
                    parentSlotTypeSignature: {},
                    slotTypeConfigurations: {
                        shape: "S1v"
                    }
                }
            }
        },
        StartImport: {
            http: {
                requestUri: "/imports/",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "payload", "resourceType", "mergeStrategy" ],
                members: {
                    payload: {
                        type: "blob"
                    },
                    resourceType: {},
                    mergeStrategy: {},
                    tags: {
                        shape: "S4u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    resourceType: {},
                    mergeStrategy: {},
                    importId: {},
                    importStatus: {},
                    tags: {
                        shape: "S4u"
                    },
                    createdDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S4u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S6: {
            type: "list",
            member: {
                type: "structure",
                required: [ "intentName", "intentVersion" ],
                members: {
                    intentName: {},
                    intentVersion: {}
                }
            }
        },
        Sa: {
            type: "structure",
            required: [ "messages", "maxAttempts" ],
            members: {
                messages: {
                    shape: "Sb"
                },
                maxAttempts: {
                    type: "integer"
                },
                responseCard: {}
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "contentType", "content" ],
                members: {
                    contentType: {},
                    content: {},
                    groupNumber: {
                        type: "integer"
                    }
                }
            }
        },
        Si: {
            type: "structure",
            required: [ "messages" ],
            members: {
                messages: {
                    shape: "Sb"
                },
                responseCard: {}
            }
        },
        Sq: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "slotConstraint" ],
                members: {
                    name: {},
                    description: {},
                    slotConstraint: {},
                    slotType: {},
                    slotTypeVersion: {},
                    valueElicitationPrompt: {
                        shape: "Sa"
                    },
                    priority: {
                        type: "integer"
                    },
                    sampleUtterances: {
                        type: "list",
                        member: {}
                    },
                    responseCard: {},
                    obfuscationSetting: {},
                    defaultValueSpec: {
                        type: "structure",
                        required: [ "defaultValueList" ],
                        members: {
                            defaultValueList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "defaultValue" ],
                                    members: {
                                        defaultValue: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S13: {
            type: "list",
            member: {}
        },
        S14: {
            type: "structure",
            required: [ "prompt", "rejectionStatement" ],
            members: {
                prompt: {
                    shape: "Sa"
                },
                rejectionStatement: {
                    shape: "Si"
                }
            }
        },
        S15: {
            type: "structure",
            required: [ "uri", "messageVersion" ],
            members: {
                uri: {},
                messageVersion: {}
            }
        },
        S18: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                codeHook: {
                    shape: "S15"
                }
            }
        },
        S1b: {
            type: "structure",
            required: [ "kendraIndex", "role" ],
            members: {
                kendraIndex: {},
                queryFilterString: {},
                role: {}
            }
        },
        S1f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            }
        },
        S1i: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "timeToLiveInSeconds", "turnsToLive" ],
                members: {
                    name: {},
                    timeToLiveInSeconds: {
                        type: "integer"
                    },
                    turnsToLive: {
                        type: "integer"
                    }
                }
            }
        },
        S1q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "value" ],
                members: {
                    value: {},
                    synonyms: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S1v: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    regexConfiguration: {
                        type: "structure",
                        required: [ "pattern" ],
                        members: {
                            pattern: {}
                        }
                    }
                }
            }
        },
        S2h: {
            type: "structure",
            members: {
                logSettings: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            logType: {},
                            destination: {},
                            kmsKeyArn: {},
                            resourceArn: {},
                            resourcePrefix: {}
                        }
                    }
                },
                iamRoleArn: {}
            }
        },
        S2z: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S38: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    status: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {}
                }
            }
        },
        S3e: {
            type: "list",
            member: {}
        },
        S45: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {}
                }
            }
        },
        S4d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {}
                }
            }
        },
        S4u: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        }
    },
    paginators: {
        GetBotAliases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetBotChannelAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetBotVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetBots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetBuiltinIntents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetBuiltinSlotTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetIntentVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetIntents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetSlotTypeVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetSlotTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["marketplaceentitlementservice"] = {};

AWS.MarketplaceEntitlementService = AWS.Service.defineService("marketplaceentitlementservice", [ "2017-01-11" ]);

AWS.apiLoader.services["marketplaceentitlementservice"]["2017-01-11"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-01-11",
        endpointPrefix: "entitlement.marketplace",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Marketplace Entitlement Service",
        serviceId: "Marketplace Entitlement Service",
        signatureVersion: "v4",
        signingName: "aws-marketplace",
        targetPrefix: "AWSMPEntitlementService",
        uid: "entitlement.marketplace-2017-01-11"
    },
    operations: {
        GetEntitlements: {
            input: {
                type: "structure",
                required: [ "ProductCode" ],
                members: {
                    ProductCode: {},
                    Filter: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Entitlements: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProductCode: {},
                                Dimension: {},
                                CustomerIdentifier: {},
                                Value: {
                                    type: "structure",
                                    members: {
                                        IntegerValue: {
                                            type: "integer"
                                        },
                                        DoubleValue: {
                                            type: "double"
                                        },
                                        BooleanValue: {
                                            type: "boolean"
                                        },
                                        StringValue: {}
                                    }
                                },
                                ExpirationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["athena"] = {};

AWS.Athena = AWS.Service.defineService("athena", [ "2017-05-18" ]);

AWS.apiLoader.services["athena"]["2017-05-18"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-05-18",
        endpointPrefix: "athena",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Athena",
        serviceId: "Athena",
        signatureVersion: "v4",
        targetPrefix: "AmazonAthena",
        uid: "athena-2017-05-18"
    },
    operations: {
        BatchGetNamedQuery: {
            input: {
                type: "structure",
                required: [ "NamedQueryIds" ],
                members: {
                    NamedQueryIds: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NamedQueries: {
                        type: "list",
                        member: {
                            shape: "S6"
                        }
                    },
                    UnprocessedNamedQueryIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                NamedQueryId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetQueryExecution: {
            input: {
                type: "structure",
                required: [ "QueryExecutionIds" ],
                members: {
                    QueryExecutionIds: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryExecutions: {
                        type: "list",
                        member: {
                            shape: "Sl"
                        }
                    },
                    UnprocessedQueryExecutionIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                QueryExecutionId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        CreateDataCatalog: {
            input: {
                type: "structure",
                required: [ "Name", "Type" ],
                members: {
                    Name: {},
                    Type: {},
                    Description: {},
                    Parameters: {
                        shape: "S13"
                    },
                    Tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateNamedQuery: {
            input: {
                type: "structure",
                required: [ "Name", "Database", "QueryString" ],
                members: {
                    Name: {},
                    Description: {},
                    Database: {},
                    QueryString: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NamedQueryId: {}
                }
            },
            idempotent: true
        },
        CreatePreparedStatement: {
            input: {
                type: "structure",
                required: [ "StatementName", "WorkGroup", "QueryStatement" ],
                members: {
                    StatementName: {},
                    WorkGroup: {},
                    QueryStatement: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateWorkGroup: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Configuration: {
                        shape: "S1i"
                    },
                    Description: {},
                    Tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDataCatalog: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteNamedQuery: {
            input: {
                type: "structure",
                required: [ "NamedQueryId" ],
                members: {
                    NamedQueryId: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeletePreparedStatement: {
            input: {
                type: "structure",
                required: [ "StatementName", "WorkGroup" ],
                members: {
                    StatementName: {},
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorkGroup: {
            input: {
                type: "structure",
                required: [ "WorkGroup" ],
                members: {
                    WorkGroup: {},
                    RecursiveDeleteOption: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetDataCatalog: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataCatalog: {
                        type: "structure",
                        required: [ "Name", "Type" ],
                        members: {
                            Name: {},
                            Description: {},
                            Type: {},
                            Parameters: {
                                shape: "S13"
                            }
                        }
                    }
                }
            }
        },
        GetDatabase: {
            input: {
                type: "structure",
                required: [ "CatalogName", "DatabaseName" ],
                members: {
                    CatalogName: {},
                    DatabaseName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Database: {
                        shape: "S20"
                    }
                }
            }
        },
        GetNamedQuery: {
            input: {
                type: "structure",
                required: [ "NamedQueryId" ],
                members: {
                    NamedQueryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NamedQuery: {
                        shape: "S6"
                    }
                }
            }
        },
        GetPreparedStatement: {
            input: {
                type: "structure",
                required: [ "StatementName", "WorkGroup" ],
                members: {
                    StatementName: {},
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PreparedStatement: {
                        type: "structure",
                        members: {
                            StatementName: {},
                            QueryStatement: {},
                            WorkGroupName: {},
                            Description: {},
                            LastModifiedTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetQueryExecution: {
            input: {
                type: "structure",
                required: [ "QueryExecutionId" ],
                members: {
                    QueryExecutionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryExecution: {
                        shape: "Sl"
                    }
                }
            }
        },
        GetQueryResults: {
            input: {
                type: "structure",
                required: [ "QueryExecutionId" ],
                members: {
                    QueryExecutionId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpdateCount: {
                        type: "long"
                    },
                    ResultSet: {
                        type: "structure",
                        members: {
                            Rows: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Data: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    VarCharValue: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            ResultSetMetadata: {
                                type: "structure",
                                members: {
                                    ColumnInfo: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "Name", "Type" ],
                                            members: {
                                                CatalogName: {},
                                                SchemaName: {},
                                                TableName: {},
                                                Name: {},
                                                Label: {},
                                                Type: {},
                                                Precision: {
                                                    type: "integer"
                                                },
                                                Scale: {
                                                    type: "integer"
                                                },
                                                Nullable: {},
                                                CaseSensitive: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetTableMetadata: {
            input: {
                type: "structure",
                required: [ "CatalogName", "DatabaseName", "TableName" ],
                members: {
                    CatalogName: {},
                    DatabaseName: {},
                    TableName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TableMetadata: {
                        shape: "S2q"
                    }
                }
            }
        },
        GetWorkGroup: {
            input: {
                type: "structure",
                required: [ "WorkGroup" ],
                members: {
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkGroup: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            State: {},
                            Configuration: {
                                shape: "S1i"
                            },
                            Description: {},
                            CreationTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        ListDataCatalogs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataCatalogsSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CatalogName: {},
                                Type: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDatabases: {
            input: {
                type: "structure",
                required: [ "CatalogName" ],
                members: {
                    CatalogName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatabaseList: {
                        type: "list",
                        member: {
                            shape: "S20"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEngineVersions: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EngineVersions: {
                        type: "list",
                        member: {
                            shape: "Sy"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNamedQueries: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NamedQueryIds: {
                        shape: "S2"
                    },
                    NextToken: {}
                }
            }
        },
        ListPreparedStatements: {
            input: {
                type: "structure",
                required: [ "WorkGroup" ],
                members: {
                    WorkGroup: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PreparedStatements: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StatementName: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListQueryExecutions: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryExecutionIds: {
                        shape: "Sh"
                    },
                    NextToken: {}
                }
            }
        },
        ListTableMetadata: {
            input: {
                type: "structure",
                required: [ "CatalogName", "DatabaseName" ],
                members: {
                    CatalogName: {},
                    DatabaseName: {},
                    Expression: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TableMetadataList: {
                        type: "list",
                        member: {
                            shape: "S2q"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S16"
                    },
                    NextToken: {}
                }
            }
        },
        ListWorkGroups: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                State: {},
                                Description: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                EngineVersion: {
                                    shape: "Sy"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        StartQueryExecution: {
            input: {
                type: "structure",
                required: [ "QueryString" ],
                members: {
                    QueryString: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    QueryExecutionContext: {
                        shape: "Sr"
                    },
                    ResultConfiguration: {
                        shape: "Sn"
                    },
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryExecutionId: {}
                }
            },
            idempotent: true
        },
        StopQueryExecution: {
            input: {
                type: "structure",
                required: [ "QueryExecutionId" ],
                members: {
                    QueryExecutionId: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDataCatalog: {
            input: {
                type: "structure",
                required: [ "Name", "Type" ],
                members: {
                    Name: {},
                    Type: {},
                    Description: {},
                    Parameters: {
                        shape: "S13"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePreparedStatement: {
            input: {
                type: "structure",
                required: [ "StatementName", "WorkGroup", "QueryStatement" ],
                members: {
                    StatementName: {},
                    WorkGroup: {},
                    QueryStatement: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWorkGroup: {
            input: {
                type: "structure",
                required: [ "WorkGroup" ],
                members: {
                    WorkGroup: {},
                    Description: {},
                    ConfigurationUpdates: {
                        type: "structure",
                        members: {
                            EnforceWorkGroupConfiguration: {
                                type: "boolean"
                            },
                            ResultConfigurationUpdates: {
                                type: "structure",
                                members: {
                                    OutputLocation: {},
                                    RemoveOutputLocation: {
                                        type: "boolean"
                                    },
                                    EncryptionConfiguration: {
                                        shape: "Sp"
                                    },
                                    RemoveEncryptionConfiguration: {
                                        type: "boolean"
                                    }
                                }
                            },
                            PublishCloudWatchMetricsEnabled: {
                                type: "boolean"
                            },
                            BytesScannedCutoffPerQuery: {
                                type: "long"
                            },
                            RemoveBytesScannedCutoffPerQuery: {
                                type: "boolean"
                            },
                            RequesterPaysEnabled: {
                                type: "boolean"
                            },
                            EngineVersion: {
                                shape: "Sy"
                            }
                        }
                    },
                    State: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {}
        },
        S6: {
            type: "structure",
            required: [ "Name", "Database", "QueryString" ],
            members: {
                Name: {},
                Description: {},
                Database: {},
                QueryString: {},
                NamedQueryId: {},
                WorkGroup: {}
            }
        },
        Sh: {
            type: "list",
            member: {}
        },
        Sl: {
            type: "structure",
            members: {
                QueryExecutionId: {},
                Query: {},
                StatementType: {},
                ResultConfiguration: {
                    shape: "Sn"
                },
                QueryExecutionContext: {
                    shape: "Sr"
                },
                Status: {
                    type: "structure",
                    members: {
                        State: {},
                        StateChangeReason: {},
                        SubmissionDateTime: {
                            type: "timestamp"
                        },
                        CompletionDateTime: {
                            type: "timestamp"
                        }
                    }
                },
                Statistics: {
                    type: "structure",
                    members: {
                        EngineExecutionTimeInMillis: {
                            type: "long"
                        },
                        DataScannedInBytes: {
                            type: "long"
                        },
                        DataManifestLocation: {},
                        TotalExecutionTimeInMillis: {
                            type: "long"
                        },
                        QueryQueueTimeInMillis: {
                            type: "long"
                        },
                        QueryPlanningTimeInMillis: {
                            type: "long"
                        },
                        ServiceProcessingTimeInMillis: {
                            type: "long"
                        }
                    }
                },
                WorkGroup: {},
                EngineVersion: {
                    shape: "Sy"
                }
            }
        },
        Sn: {
            type: "structure",
            members: {
                OutputLocation: {},
                EncryptionConfiguration: {
                    shape: "Sp"
                }
            }
        },
        Sp: {
            type: "structure",
            required: [ "EncryptionOption" ],
            members: {
                EncryptionOption: {},
                KmsKey: {}
            }
        },
        Sr: {
            type: "structure",
            members: {
                Database: {},
                Catalog: {}
            }
        },
        Sy: {
            type: "structure",
            members: {
                SelectedEngineVersion: {},
                EffectiveEngineVersion: {}
            }
        },
        S13: {
            type: "map",
            key: {},
            value: {}
        },
        S16: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S1i: {
            type: "structure",
            members: {
                ResultConfiguration: {
                    shape: "Sn"
                },
                EnforceWorkGroupConfiguration: {
                    type: "boolean"
                },
                PublishCloudWatchMetricsEnabled: {
                    type: "boolean"
                },
                BytesScannedCutoffPerQuery: {
                    type: "long"
                },
                RequesterPaysEnabled: {
                    type: "boolean"
                },
                EngineVersion: {
                    shape: "Sy"
                }
            }
        },
        S20: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Description: {},
                Parameters: {
                    shape: "S13"
                }
            }
        },
        S2q: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                CreateTime: {
                    type: "timestamp"
                },
                LastAccessTime: {
                    type: "timestamp"
                },
                TableType: {},
                Columns: {
                    shape: "S2t"
                },
                PartitionKeys: {
                    shape: "S2t"
                },
                Parameters: {
                    shape: "S13"
                }
            }
        },
        S2t: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Type: {},
                    Comment: {}
                }
            }
        }
    },
    paginators: {
        GetQueryResults: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListDataCatalogs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DataCatalogsSummary"
        },
        ListDatabases: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DatabaseList"
        },
        ListNamedQueries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListPreparedStatements: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListQueryExecutions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTableMetadata: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TableMetadataList"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Tags"
        },
        ListWorkGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        }
    }
};

AWS.apiLoader.services["greengrass"] = {};

AWS.Greengrass = AWS.Service.defineService("greengrass", [ "2017-06-07" ]);

AWS.apiLoader.services["greengrass"]["2017-06-07"] = {
    metadata: {
        apiVersion: "2017-06-07",
        endpointPrefix: "greengrass",
        signingName: "greengrass",
        serviceFullName: "AWS Greengrass",
        serviceId: "Greengrass",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "greengrass-2017-06-07",
        signatureVersion: "v4"
    },
    operations: {
        AssociateRoleToGroup: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/groups/{GroupId}/role",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    RoleArn: {}
                },
                required: [ "GroupId", "RoleArn" ]
            },
            output: {
                type: "structure",
                members: {
                    AssociatedAt: {}
                }
            }
        },
        AssociateServiceRoleToAccount: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/servicerole",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RoleArn: {}
                },
                required: [ "RoleArn" ]
            },
            output: {
                type: "structure",
                members: {
                    AssociatedAt: {}
                }
            }
        },
        CreateConnectorDefinition: {
            http: {
                requestUri: "/greengrass/definition/connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "S7"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateConnectorDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/connectors/{ConnectorDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    ConnectorDefinitionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionId"
                    },
                    Connectors: {
                        shape: "S8"
                    }
                },
                required: [ "ConnectorDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateCoreDefinition: {
            http: {
                requestUri: "/greengrass/definition/cores",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "Sg"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateCoreDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/cores/{CoreDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    CoreDefinitionId: {
                        location: "uri",
                        locationName: "CoreDefinitionId"
                    },
                    Cores: {
                        shape: "Sh"
                    }
                },
                required: [ "CoreDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateDeployment: {
            http: {
                requestUri: "/greengrass/groups/{GroupId}/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    DeploymentId: {},
                    DeploymentType: {},
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    GroupVersionId: {}
                },
                required: [ "GroupId", "DeploymentType" ]
            },
            output: {
                type: "structure",
                members: {
                    DeploymentArn: {},
                    DeploymentId: {}
                }
            }
        },
        CreateDeviceDefinition: {
            http: {
                requestUri: "/greengrass/definition/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "Sr"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateDeviceDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/devices/{DeviceDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    DeviceDefinitionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionId"
                    },
                    Devices: {
                        shape: "Ss"
                    }
                },
                required: [ "DeviceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateFunctionDefinition: {
            http: {
                requestUri: "/greengrass/definition/functions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "Sy"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateFunctionDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/functions/{FunctionDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    DefaultConfig: {
                        shape: "Sz"
                    },
                    FunctionDefinitionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionId"
                    },
                    Functions: {
                        shape: "S14"
                    }
                },
                required: [ "FunctionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateGroup: {
            http: {
                requestUri: "/greengrass/groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "S1h"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateGroupCertificateAuthority: {
            http: {
                requestUri: "/greengrass/groups/{GroupId}/certificateauthorities",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    GroupCertificateAuthorityArn: {}
                }
            }
        },
        CreateGroupVersion: {
            http: {
                requestUri: "/greengrass/groups/{GroupId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    ConnectorDefinitionVersionArn: {},
                    CoreDefinitionVersionArn: {},
                    DeviceDefinitionVersionArn: {},
                    FunctionDefinitionVersionArn: {},
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    LoggerDefinitionVersionArn: {},
                    ResourceDefinitionVersionArn: {},
                    SubscriptionDefinitionVersionArn: {}
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateLoggerDefinition: {
            http: {
                requestUri: "/greengrass/definition/loggers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "S1o"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateLoggerDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/loggers/{LoggerDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    LoggerDefinitionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionId"
                    },
                    Loggers: {
                        shape: "S1p"
                    }
                },
                required: [ "LoggerDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateResourceDefinition: {
            http: {
                requestUri: "/greengrass/definition/resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "S1y"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateResourceDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/resources/{ResourceDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    ResourceDefinitionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionId"
                    },
                    Resources: {
                        shape: "S1z"
                    }
                },
                required: [ "ResourceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateSoftwareUpdateJob: {
            http: {
                requestUri: "/greengrass/updates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    S3UrlSignerRole: {},
                    SoftwareToUpdate: {},
                    UpdateAgentLogLevel: {},
                    UpdateTargets: {
                        type: "list",
                        member: {}
                    },
                    UpdateTargetsArchitecture: {},
                    UpdateTargetsOperatingSystem: {}
                },
                required: [ "S3UrlSignerRole", "UpdateTargetsArchitecture", "SoftwareToUpdate", "UpdateTargets", "UpdateTargetsOperatingSystem" ]
            },
            output: {
                type: "structure",
                members: {
                    IotJobArn: {},
                    IotJobId: {},
                    PlatformSoftwareVersion: {}
                }
            }
        },
        CreateSubscriptionDefinition: {
            http: {
                requestUri: "/greengrass/definition/subscriptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "S2m"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateSubscriptionDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    SubscriptionDefinitionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionId"
                    },
                    Subscriptions: {
                        shape: "S2n"
                    }
                },
                required: [ "SubscriptionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        DeleteConnectorDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/connectors/{ConnectorDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectorDefinitionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionId"
                    }
                },
                required: [ "ConnectorDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCoreDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/cores/{CoreDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CoreDefinitionId: {
                        location: "uri",
                        locationName: "CoreDefinitionId"
                    }
                },
                required: [ "CoreDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDeviceDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/devices/{DeviceDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceDefinitionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionId"
                    }
                },
                required: [ "DeviceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFunctionDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/functions/{FunctionDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FunctionDefinitionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionId"
                    }
                },
                required: [ "FunctionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteGroup: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/groups/{GroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLoggerDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/loggers/{LoggerDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    LoggerDefinitionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionId"
                    }
                },
                required: [ "LoggerDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteResourceDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/resources/{ResourceDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceDefinitionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionId"
                    }
                },
                required: [ "ResourceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSubscriptionDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    SubscriptionDefinitionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionId"
                    }
                },
                required: [ "SubscriptionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateRoleFromGroup: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/groups/{GroupId}/role",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    DisassociatedAt: {}
                }
            }
        },
        DisassociateServiceRoleFromAccount: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/servicerole",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    DisassociatedAt: {}
                }
            }
        },
        GetAssociatedRole: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/role",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    AssociatedAt: {},
                    RoleArn: {}
                }
            }
        },
        GetBulkDeploymentStatus: {
            http: {
                method: "GET",
                requestUri: "/greengrass/bulk/deployments/{BulkDeploymentId}/status",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BulkDeploymentId: {
                        location: "uri",
                        locationName: "BulkDeploymentId"
                    }
                },
                required: [ "BulkDeploymentId" ]
            },
            output: {
                type: "structure",
                members: {
                    BulkDeploymentMetrics: {
                        type: "structure",
                        members: {
                            InvalidInputRecords: {
                                type: "integer"
                            },
                            RecordsProcessed: {
                                type: "integer"
                            },
                            RetryAttempts: {
                                type: "integer"
                            }
                        }
                    },
                    BulkDeploymentStatus: {},
                    CreatedAt: {},
                    ErrorDetails: {
                        shape: "S3i"
                    },
                    ErrorMessage: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetConnectivityInfo: {
            http: {
                method: "GET",
                requestUri: "/greengrass/things/{ThingName}/connectivityInfo",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ThingName: {
                        location: "uri",
                        locationName: "ThingName"
                    }
                },
                required: [ "ThingName" ]
            },
            output: {
                type: "structure",
                members: {
                    ConnectivityInfo: {
                        shape: "S3m"
                    },
                    Message: {
                        locationName: "message"
                    }
                }
            }
        },
        GetConnectorDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/connectors/{ConnectorDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectorDefinitionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionId"
                    }
                },
                required: [ "ConnectorDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetConnectorDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/connectors/{ConnectorDefinitionId}/versions/{ConnectorDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectorDefinitionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionId"
                    },
                    ConnectorDefinitionVersionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionVersionId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "ConnectorDefinitionId", "ConnectorDefinitionVersionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "S7"
                    },
                    Id: {},
                    NextToken: {},
                    Version: {}
                }
            }
        },
        GetCoreDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/cores/{CoreDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CoreDefinitionId: {
                        location: "uri",
                        locationName: "CoreDefinitionId"
                    }
                },
                required: [ "CoreDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetCoreDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CoreDefinitionId: {
                        location: "uri",
                        locationName: "CoreDefinitionId"
                    },
                    CoreDefinitionVersionId: {
                        location: "uri",
                        locationName: "CoreDefinitionVersionId"
                    }
                },
                required: [ "CoreDefinitionId", "CoreDefinitionVersionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "Sg"
                    },
                    Id: {},
                    NextToken: {},
                    Version: {}
                }
            }
        },
        GetDeploymentStatus: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeploymentId: {
                        location: "uri",
                        locationName: "DeploymentId"
                    },
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId", "DeploymentId" ]
            },
            output: {
                type: "structure",
                members: {
                    DeploymentStatus: {},
                    DeploymentType: {},
                    ErrorDetails: {
                        shape: "S3i"
                    },
                    ErrorMessage: {},
                    UpdatedAt: {}
                }
            }
        },
        GetDeviceDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/devices/{DeviceDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceDefinitionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionId"
                    }
                },
                required: [ "DeviceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetDeviceDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceDefinitionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionId"
                    },
                    DeviceDefinitionVersionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionVersionId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "DeviceDefinitionVersionId", "DeviceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "Sr"
                    },
                    Id: {},
                    NextToken: {},
                    Version: {}
                }
            }
        },
        GetFunctionDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/functions/{FunctionDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FunctionDefinitionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionId"
                    }
                },
                required: [ "FunctionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetFunctionDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FunctionDefinitionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionId"
                    },
                    FunctionDefinitionVersionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionVersionId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "FunctionDefinitionId", "FunctionDefinitionVersionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "Sy"
                    },
                    Id: {},
                    NextToken: {},
                    Version: {}
                }
            }
        },
        GetGroup: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetGroupCertificateAuthority: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CertificateAuthorityId: {
                        location: "uri",
                        locationName: "CertificateAuthorityId"
                    },
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "CertificateAuthorityId", "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    GroupCertificateAuthorityArn: {},
                    GroupCertificateAuthorityId: {},
                    PemEncodedCertificate: {}
                }
            }
        },
        GetGroupCertificateConfiguration: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    CertificateAuthorityExpiryInMilliseconds: {},
                    CertificateExpiryInMilliseconds: {},
                    GroupId: {}
                }
            }
        },
        GetGroupVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/versions/{GroupVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    GroupVersionId: {
                        location: "uri",
                        locationName: "GroupVersionId"
                    }
                },
                required: [ "GroupVersionId", "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "S1h"
                    },
                    Id: {},
                    Version: {}
                }
            }
        },
        GetLoggerDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/loggers/{LoggerDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    LoggerDefinitionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionId"
                    }
                },
                required: [ "LoggerDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetLoggerDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    LoggerDefinitionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionId"
                    },
                    LoggerDefinitionVersionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionVersionId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "LoggerDefinitionVersionId", "LoggerDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "S1o"
                    },
                    Id: {},
                    Version: {}
                }
            }
        },
        GetResourceDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/resources/{ResourceDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceDefinitionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionId"
                    }
                },
                required: [ "ResourceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetResourceDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/resources/{ResourceDefinitionId}/versions/{ResourceDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceDefinitionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionId"
                    },
                    ResourceDefinitionVersionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionVersionId"
                    }
                },
                required: [ "ResourceDefinitionVersionId", "ResourceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "S1y"
                    },
                    Id: {},
                    Version: {}
                }
            }
        },
        GetServiceRoleForAccount: {
            http: {
                method: "GET",
                requestUri: "/greengrass/servicerole",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AssociatedAt: {},
                    RoleArn: {}
                }
            }
        },
        GetSubscriptionDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    SubscriptionDefinitionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionId"
                    }
                },
                required: [ "SubscriptionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetSubscriptionDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    SubscriptionDefinitionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionId"
                    },
                    SubscriptionDefinitionVersionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionVersionId"
                    }
                },
                required: [ "SubscriptionDefinitionId", "SubscriptionDefinitionVersionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "S2m"
                    },
                    Id: {},
                    NextToken: {},
                    Version: {}
                }
            }
        },
        GetThingRuntimeConfiguration: {
            http: {
                method: "GET",
                requestUri: "/greengrass/things/{ThingName}/runtimeconfig",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ThingName: {
                        location: "uri",
                        locationName: "ThingName"
                    }
                },
                required: [ "ThingName" ]
            },
            output: {
                type: "structure",
                members: {
                    RuntimeConfiguration: {
                        type: "structure",
                        members: {
                            TelemetryConfiguration: {
                                type: "structure",
                                members: {
                                    ConfigurationSyncStatus: {},
                                    Telemetry: {}
                                },
                                required: [ "Telemetry" ]
                            }
                        }
                    }
                }
            }
        },
        ListBulkDeploymentDetailedReports: {
            http: {
                method: "GET",
                requestUri: "/greengrass/bulk/deployments/{BulkDeploymentId}/detailed-reports",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BulkDeploymentId: {
                        location: "uri",
                        locationName: "BulkDeploymentId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "BulkDeploymentId" ]
            },
            output: {
                type: "structure",
                members: {
                    Deployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {},
                                DeploymentArn: {},
                                DeploymentId: {},
                                DeploymentStatus: {},
                                DeploymentType: {},
                                ErrorDetails: {
                                    shape: "S3i"
                                },
                                ErrorMessage: {},
                                GroupArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListBulkDeployments: {
            http: {
                method: "GET",
                requestUri: "/greengrass/bulk/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BulkDeployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BulkDeploymentArn: {},
                                BulkDeploymentId: {},
                                CreatedAt: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConnectorDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/connectors/{ConnectorDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectorDefinitionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "ConnectorDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListConnectorDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListCoreDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/cores/{CoreDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CoreDefinitionId: {
                        location: "uri",
                        locationName: "CoreDefinitionId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "CoreDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListCoreDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/cores",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListDeployments: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    Deployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {},
                                DeploymentArn: {},
                                DeploymentId: {},
                                DeploymentType: {},
                                GroupArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDeviceDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/devices/{DeviceDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceDefinitionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "DeviceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListDeviceDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListFunctionDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/functions/{FunctionDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FunctionDefinitionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "FunctionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListFunctionDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/functions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListGroupCertificateAuthorities: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/certificateauthorities",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    GroupCertificateAuthorities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupCertificateAuthorityArn: {},
                                GroupCertificateAuthorityId: {}
                            }
                        }
                    }
                }
            }
        },
        ListGroupVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListGroups: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreationTimestamp: {},
                                Id: {},
                                LastUpdatedTimestamp: {},
                                LatestVersion: {},
                                LatestVersionArn: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLoggerDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/loggers/{LoggerDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    LoggerDefinitionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "LoggerDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListLoggerDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/loggers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListResourceDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/resources/{ResourceDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    ResourceDefinitionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionId"
                    }
                },
                required: [ "ResourceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListResourceDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListSubscriptionDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    SubscriptionDefinitionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionId"
                    }
                },
                required: [ "SubscriptionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListSubscriptionDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/subscriptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        ResetDeployments: {
            http: {
                requestUri: "/greengrass/groups/{GroupId}/deployments/$reset",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    Force: {
                        type: "boolean"
                    },
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    DeploymentArn: {},
                    DeploymentId: {}
                }
            }
        },
        StartBulkDeployment: {
            http: {
                requestUri: "/greengrass/bulk/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    ExecutionRoleArn: {},
                    InputFileUri: {},
                    tags: {
                        shape: "Sb"
                    }
                },
                required: [ "ExecutionRoleArn", "InputFileUri" ]
            },
            output: {
                type: "structure",
                members: {
                    BulkDeploymentArn: {},
                    BulkDeploymentId: {}
                }
            }
        },
        StopBulkDeployment: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/bulk/deployments/{BulkDeploymentId}/$stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BulkDeploymentId: {
                        location: "uri",
                        locationName: "BulkDeploymentId"
                    }
                },
                required: [ "BulkDeploymentId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    tags: {
                        shape: "Sb"
                    }
                },
                required: [ "ResourceArn" ]
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        shape: "S29",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateConnectivityInfo: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/things/{ThingName}/connectivityInfo",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectivityInfo: {
                        shape: "S3m"
                    },
                    ThingName: {
                        location: "uri",
                        locationName: "ThingName"
                    }
                },
                required: [ "ThingName" ]
            },
            output: {
                type: "structure",
                members: {
                    Message: {
                        locationName: "message"
                    },
                    Version: {}
                }
            }
        },
        UpdateConnectorDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/connectors/{ConnectorDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectorDefinitionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionId"
                    },
                    Name: {}
                },
                required: [ "ConnectorDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCoreDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/cores/{CoreDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CoreDefinitionId: {
                        location: "uri",
                        locationName: "CoreDefinitionId"
                    },
                    Name: {}
                },
                required: [ "CoreDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDeviceDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/devices/{DeviceDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceDefinitionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionId"
                    },
                    Name: {}
                },
                required: [ "DeviceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFunctionDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/functions/{FunctionDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FunctionDefinitionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionId"
                    },
                    Name: {}
                },
                required: [ "FunctionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateGroup: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/groups/{GroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    Name: {}
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateGroupCertificateConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CertificateExpiryInMilliseconds: {},
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    CertificateAuthorityExpiryInMilliseconds: {},
                    CertificateExpiryInMilliseconds: {},
                    GroupId: {}
                }
            }
        },
        UpdateLoggerDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/loggers/{LoggerDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    LoggerDefinitionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionId"
                    },
                    Name: {}
                },
                required: [ "LoggerDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResourceDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/resources/{ResourceDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {},
                    ResourceDefinitionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionId"
                    }
                },
                required: [ "ResourceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSubscriptionDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {},
                    SubscriptionDefinitionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionId"
                    }
                },
                required: [ "SubscriptionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateThingRuntimeConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/things/{ThingName}/runtimeconfig",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    TelemetryConfiguration: {
                        type: "structure",
                        members: {
                            Telemetry: {}
                        },
                        required: [ "Telemetry" ]
                    },
                    ThingName: {
                        location: "uri",
                        locationName: "ThingName"
                    }
                },
                required: [ "ThingName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            members: {
                Connectors: {
                    shape: "S8"
                }
            }
        },
        S8: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ConnectorArn: {},
                    Id: {},
                    Parameters: {
                        shape: "Sa"
                    }
                },
                required: [ "ConnectorArn", "Id" ]
            }
        },
        Sa: {
            type: "map",
            key: {},
            value: {}
        },
        Sb: {
            type: "map",
            key: {},
            value: {}
        },
        Sg: {
            type: "structure",
            members: {
                Cores: {
                    shape: "Sh"
                }
            }
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    CertificateArn: {},
                    Id: {},
                    SyncShadow: {
                        type: "boolean"
                    },
                    ThingArn: {}
                },
                required: [ "ThingArn", "Id", "CertificateArn" ]
            }
        },
        Sr: {
            type: "structure",
            members: {
                Devices: {
                    shape: "Ss"
                }
            }
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    CertificateArn: {},
                    Id: {},
                    SyncShadow: {
                        type: "boolean"
                    },
                    ThingArn: {}
                },
                required: [ "ThingArn", "Id", "CertificateArn" ]
            }
        },
        Sy: {
            type: "structure",
            members: {
                DefaultConfig: {
                    shape: "Sz"
                },
                Functions: {
                    shape: "S14"
                }
            }
        },
        Sz: {
            type: "structure",
            members: {
                Execution: {
                    type: "structure",
                    members: {
                        IsolationMode: {},
                        RunAs: {
                            shape: "S12"
                        }
                    }
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                Gid: {
                    type: "integer"
                },
                Uid: {
                    type: "integer"
                }
            }
        },
        S14: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FunctionArn: {},
                    FunctionConfiguration: {
                        type: "structure",
                        members: {
                            EncodingType: {},
                            Environment: {
                                type: "structure",
                                members: {
                                    AccessSysfs: {
                                        type: "boolean"
                                    },
                                    Execution: {
                                        type: "structure",
                                        members: {
                                            IsolationMode: {},
                                            RunAs: {
                                                shape: "S12"
                                            }
                                        }
                                    },
                                    ResourceAccessPolicies: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Permission: {},
                                                ResourceId: {}
                                            },
                                            required: [ "ResourceId" ]
                                        }
                                    },
                                    Variables: {
                                        shape: "Sa"
                                    }
                                }
                            },
                            ExecArgs: {},
                            Executable: {},
                            MemorySize: {
                                type: "integer"
                            },
                            Pinned: {
                                type: "boolean"
                            },
                            Timeout: {
                                type: "integer"
                            }
                        }
                    },
                    Id: {}
                },
                required: [ "Id" ]
            }
        },
        S1h: {
            type: "structure",
            members: {
                ConnectorDefinitionVersionArn: {},
                CoreDefinitionVersionArn: {},
                DeviceDefinitionVersionArn: {},
                FunctionDefinitionVersionArn: {},
                LoggerDefinitionVersionArn: {},
                ResourceDefinitionVersionArn: {},
                SubscriptionDefinitionVersionArn: {}
            }
        },
        S1o: {
            type: "structure",
            members: {
                Loggers: {
                    shape: "S1p"
                }
            }
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Component: {},
                    Id: {},
                    Level: {},
                    Space: {
                        type: "integer"
                    },
                    Type: {}
                },
                required: [ "Type", "Level", "Id", "Component" ]
            }
        },
        S1y: {
            type: "structure",
            members: {
                Resources: {
                    shape: "S1z"
                }
            }
        },
        S1z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    ResourceDataContainer: {
                        type: "structure",
                        members: {
                            LocalDeviceResourceData: {
                                type: "structure",
                                members: {
                                    GroupOwnerSetting: {
                                        shape: "S23"
                                    },
                                    SourcePath: {}
                                }
                            },
                            LocalVolumeResourceData: {
                                type: "structure",
                                members: {
                                    DestinationPath: {},
                                    GroupOwnerSetting: {
                                        shape: "S23"
                                    },
                                    SourcePath: {}
                                }
                            },
                            S3MachineLearningModelResourceData: {
                                type: "structure",
                                members: {
                                    DestinationPath: {},
                                    OwnerSetting: {
                                        shape: "S26"
                                    },
                                    S3Uri: {}
                                }
                            },
                            SageMakerMachineLearningModelResourceData: {
                                type: "structure",
                                members: {
                                    DestinationPath: {},
                                    OwnerSetting: {
                                        shape: "S26"
                                    },
                                    SageMakerJobArn: {}
                                }
                            },
                            SecretsManagerSecretResourceData: {
                                type: "structure",
                                members: {
                                    ARN: {},
                                    AdditionalStagingLabelsToDownload: {
                                        shape: "S29"
                                    }
                                }
                            }
                        }
                    }
                },
                required: [ "ResourceDataContainer", "Id", "Name" ]
            }
        },
        S23: {
            type: "structure",
            members: {
                AutoAddGroupOwner: {
                    type: "boolean"
                },
                GroupOwner: {}
            }
        },
        S26: {
            type: "structure",
            members: {
                GroupOwner: {},
                GroupPermission: {}
            },
            required: [ "GroupOwner", "GroupPermission" ]
        },
        S29: {
            type: "list",
            member: {}
        },
        S2m: {
            type: "structure",
            members: {
                Subscriptions: {
                    shape: "S2n"
                }
            }
        },
        S2n: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Source: {},
                    Subject: {},
                    Target: {}
                },
                required: [ "Target", "Id", "Subject", "Source" ]
            }
        },
        S3i: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DetailedErrorCode: {},
                    DetailedErrorMessage: {}
                }
            }
        },
        S3m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    HostAddress: {},
                    Id: {},
                    Metadata: {},
                    PortNumber: {
                        type: "integer"
                    }
                }
            }
        },
        S58: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        S5c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    Tags: {
                        shape: "Sb",
                        locationName: "tags"
                    }
                }
            }
        }
    }
};

AWS.apiLoader.services["dax"] = {};

AWS.DAX = AWS.Service.defineService("dax", [ "2017-04-19" ]);

AWS.apiLoader.services["dax"]["2017-04-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-04-19",
        endpointPrefix: "dax",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Amazon DAX",
        serviceFullName: "Amazon DynamoDB Accelerator (DAX)",
        serviceId: "DAX",
        signatureVersion: "v4",
        targetPrefix: "AmazonDAXV3",
        uid: "dax-2017-04-19"
    },
    operations: {
        CreateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName", "NodeType", "ReplicationFactor", "IamRoleArn" ],
                members: {
                    ClusterName: {},
                    NodeType: {},
                    Description: {},
                    ReplicationFactor: {
                        type: "integer"
                    },
                    AvailabilityZones: {
                        shape: "S4"
                    },
                    SubnetGroupName: {},
                    SecurityGroupIds: {
                        shape: "S5"
                    },
                    PreferredMaintenanceWindow: {},
                    NotificationTopicArn: {},
                    IamRoleArn: {},
                    ParameterGroupName: {},
                    Tags: {
                        shape: "S6"
                    },
                    SSESpecification: {
                        type: "structure",
                        required: [ "Enabled" ],
                        members: {
                            Enabled: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sb"
                    }
                }
            }
        },
        CreateParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ParameterGroup: {
                        shape: "Sq"
                    }
                }
            }
        },
        CreateSubnetGroup: {
            input: {
                type: "structure",
                required: [ "SubnetGroupName", "SubnetIds" ],
                members: {
                    SubnetGroupName: {},
                    Description: {},
                    SubnetIds: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SubnetGroup: {
                        shape: "Su"
                    }
                }
            }
        },
        DecreaseReplicationFactor: {
            input: {
                type: "structure",
                required: [ "ClusterName", "NewReplicationFactor" ],
                members: {
                    ClusterName: {},
                    NewReplicationFactor: {
                        type: "integer"
                    },
                    AvailabilityZones: {
                        shape: "S4"
                    },
                    NodeIdsToRemove: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sb"
                    }
                }
            }
        },
        DeleteCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName" ],
                members: {
                    ClusterName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sb"
                    }
                }
            }
        },
        DeleteParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DeletionMessage: {}
                }
            }
        },
        DeleteSubnetGroup: {
            input: {
                type: "structure",
                required: [ "SubnetGroupName" ],
                members: {
                    SubnetGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DeletionMessage: {}
                }
            }
        },
        DescribeClusters: {
            input: {
                type: "structure",
                members: {
                    ClusterNames: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Clusters: {
                        type: "list",
                        member: {
                            shape: "Sb"
                        }
                    }
                }
            }
        },
        DescribeDefaultParameters: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Parameters: {
                        shape: "S1b"
                    }
                }
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    SourceName: {},
                    SourceType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "integer"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceName: {},
                                SourceType: {},
                                Message: {},
                                Date: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeParameterGroups: {
            input: {
                type: "structure",
                members: {
                    ParameterGroupNames: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ParameterGroups: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    }
                }
            }
        },
        DescribeParameters: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {},
                    Source: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Parameters: {
                        shape: "S1b"
                    }
                }
            }
        },
        DescribeSubnetGroups: {
            input: {
                type: "structure",
                members: {
                    SubnetGroupNames: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    SubnetGroups: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    }
                }
            }
        },
        IncreaseReplicationFactor: {
            input: {
                type: "structure",
                required: [ "ClusterName", "NewReplicationFactor" ],
                members: {
                    ClusterName: {},
                    NewReplicationFactor: {
                        type: "integer"
                    },
                    AvailabilityZones: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sb"
                    }
                }
            }
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "ResourceName" ],
                members: {
                    ResourceName: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    },
                    NextToken: {}
                }
            }
        },
        RebootNode: {
            input: {
                type: "structure",
                required: [ "ClusterName", "NodeId" ],
                members: {
                    ClusterName: {},
                    NodeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sb"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "Tags" ],
                members: {
                    ResourceName: {},
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "TagKeys" ],
                members: {
                    ResourceName: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    }
                }
            }
        },
        UpdateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName" ],
                members: {
                    ClusterName: {},
                    Description: {},
                    PreferredMaintenanceWindow: {},
                    NotificationTopicArn: {},
                    NotificationTopicStatus: {},
                    ParameterGroupName: {},
                    SecurityGroupIds: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sb"
                    }
                }
            }
        },
        UpdateParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName", "ParameterNameValues" ],
                members: {
                    ParameterGroupName: {},
                    ParameterNameValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ParameterName: {},
                                ParameterValue: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ParameterGroup: {
                        shape: "Sq"
                    }
                }
            }
        },
        UpdateSubnetGroup: {
            input: {
                type: "structure",
                required: [ "SubnetGroupName" ],
                members: {
                    SubnetGroupName: {},
                    Description: {},
                    SubnetIds: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SubnetGroup: {
                        shape: "Su"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {}
        },
        S5: {
            type: "list",
            member: {}
        },
        S6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sb: {
            type: "structure",
            members: {
                ClusterName: {},
                Description: {},
                ClusterArn: {},
                TotalNodes: {
                    type: "integer"
                },
                ActiveNodes: {
                    type: "integer"
                },
                NodeType: {},
                Status: {},
                ClusterDiscoveryEndpoint: {
                    shape: "Sd"
                },
                NodeIdsToRemove: {
                    shape: "Se"
                },
                Nodes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            NodeId: {},
                            Endpoint: {
                                shape: "Sd"
                            },
                            NodeCreateTime: {
                                type: "timestamp"
                            },
                            AvailabilityZone: {},
                            NodeStatus: {},
                            ParameterGroupStatus: {}
                        }
                    }
                },
                PreferredMaintenanceWindow: {},
                NotificationConfiguration: {
                    type: "structure",
                    members: {
                        TopicArn: {},
                        TopicStatus: {}
                    }
                },
                SubnetGroup: {},
                SecurityGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            SecurityGroupIdentifier: {},
                            Status: {}
                        }
                    }
                },
                IamRoleArn: {},
                ParameterGroup: {
                    type: "structure",
                    members: {
                        ParameterGroupName: {},
                        ParameterApplyStatus: {},
                        NodeIdsToReboot: {
                            shape: "Se"
                        }
                    }
                },
                SSEDescription: {
                    type: "structure",
                    members: {
                        Status: {}
                    }
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                Address: {},
                Port: {
                    type: "integer"
                }
            }
        },
        Se: {
            type: "list",
            member: {}
        },
        Sq: {
            type: "structure",
            members: {
                ParameterGroupName: {},
                Description: {}
            }
        },
        Ss: {
            type: "list",
            member: {}
        },
        Su: {
            type: "structure",
            members: {
                SubnetGroupName: {},
                Description: {},
                VpcId: {},
                Subnets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            SubnetIdentifier: {},
                            SubnetAvailabilityZone: {}
                        }
                    }
                }
            }
        },
        S1b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ParameterName: {},
                    ParameterType: {},
                    ParameterValue: {},
                    NodeTypeSpecificValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                NodeType: {},
                                Value: {}
                            }
                        }
                    },
                    Description: {},
                    Source: {},
                    DataType: {},
                    AllowedValues: {},
                    IsModifiable: {},
                    ChangeType: {}
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["migrationhub"] = {};

AWS.MigrationHub = AWS.Service.defineService("migrationhub", [ "2017-05-31" ]);

AWS.apiLoader.services["migrationhub"]["2017-05-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-05-31",
        endpointPrefix: "mgh",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Migration Hub",
        serviceId: "Migration Hub",
        signatureVersion: "v4",
        targetPrefix: "AWSMigrationHub",
        uid: "AWSMigrationHub-2017-05-31"
    },
    operations: {
        AssociateCreatedArtifact: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName", "CreatedArtifact" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    CreatedArtifact: {
                        shape: "S4"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateDiscoveredResource: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName", "DiscoveredResource" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    DiscoveredResource: {
                        shape: "Sa"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateProgressUpdateStream: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStreamName" ],
                members: {
                    ProgressUpdateStreamName: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteProgressUpdateStream: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStreamName" ],
                members: {
                    ProgressUpdateStreamName: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeApplicationState: {
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationStatus: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeMigrationTask: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MigrationTask: {
                        type: "structure",
                        members: {
                            ProgressUpdateStream: {},
                            MigrationTaskName: {},
                            Task: {
                                shape: "Sq"
                            },
                            UpdateDateTime: {
                                type: "timestamp"
                            },
                            ResourceAttributeList: {
                                type: "list",
                                member: {
                                    shape: "Sv"
                                }
                            }
                        }
                    }
                }
            }
        },
        DisassociateCreatedArtifact: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName", "CreatedArtifactName" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    CreatedArtifactName: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateDiscoveredResource: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName", "ConfigurationId" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    ConfigurationId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ImportMigrationTask: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListApplicationStates: {
            input: {
                type: "structure",
                members: {
                    ApplicationIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationStateList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {},
                                ApplicationStatus: {},
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCreatedArtifacts: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    CreatedArtifactList: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            }
        },
        ListDiscoveredResources: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DiscoveredResourceList: {
                        type: "list",
                        member: {
                            shape: "Sa"
                        }
                    }
                }
            }
        },
        ListMigrationTasks: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MigrationTaskSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProgressUpdateStream: {},
                                MigrationTaskName: {},
                                Status: {},
                                ProgressPercent: {
                                    type: "integer"
                                },
                                StatusDetail: {},
                                UpdateDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListProgressUpdateStreams: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressUpdateStreamSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProgressUpdateStreamName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        NotifyApplicationState: {
            input: {
                type: "structure",
                required: [ "ApplicationId", "Status" ],
                members: {
                    ApplicationId: {},
                    Status: {},
                    UpdateDateTime: {
                        type: "timestamp"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        NotifyMigrationTaskState: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName", "Task", "UpdateDateTime", "NextUpdateSeconds" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    Task: {
                        shape: "Sq"
                    },
                    UpdateDateTime: {
                        type: "timestamp"
                    },
                    NextUpdateSeconds: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutResourceAttributes: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName", "ResourceAttributeList" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    ResourceAttributeList: {
                        type: "list",
                        member: {
                            shape: "Sv"
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Description: {}
            }
        },
        Sa: {
            type: "structure",
            required: [ "ConfigurationId" ],
            members: {
                ConfigurationId: {},
                Description: {}
            }
        },
        Sq: {
            type: "structure",
            required: [ "Status" ],
            members: {
                Status: {},
                StatusDetail: {},
                ProgressPercent: {
                    type: "integer"
                }
            }
        },
        Sv: {
            type: "structure",
            required: [ "Type", "Value" ],
            members: {
                Type: {},
                Value: {}
            }
        }
    },
    paginators: {
        ListApplicationStates: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ApplicationStateList"
        },
        ListCreatedArtifacts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CreatedArtifactList"
        },
        ListDiscoveredResources: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DiscoveredResourceList"
        },
        ListMigrationTasks: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "MigrationTaskSummaryList"
        },
        ListProgressUpdateStreams: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ProgressUpdateStreamSummaryList"
        }
    }
};

AWS.apiLoader.services["cloudhsmv2"] = {};

AWS.CloudHSMV2 = AWS.Service.defineService("cloudhsmv2", [ "2017-04-28" ]);

AWS.apiLoader.services["cloudhsmv2"]["2017-04-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-04-28",
        endpointPrefix: "cloudhsmv2",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "CloudHSM V2",
        serviceFullName: "AWS CloudHSM V2",
        serviceId: "CloudHSM V2",
        signatureVersion: "v4",
        signingName: "cloudhsm",
        targetPrefix: "BaldrApiService",
        uid: "cloudhsmv2-2017-04-28"
    },
    operations: {
        CopyBackupToRegion: {
            input: {
                type: "structure",
                required: [ "DestinationRegion", "BackupId" ],
                members: {
                    DestinationRegion: {},
                    BackupId: {},
                    TagList: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DestinationBackup: {
                        type: "structure",
                        members: {
                            CreateTimestamp: {
                                type: "timestamp"
                            },
                            SourceRegion: {},
                            SourceBackup: {},
                            SourceCluster: {}
                        }
                    }
                }
            }
        },
        CreateCluster: {
            input: {
                type: "structure",
                required: [ "HsmType", "SubnetIds" ],
                members: {
                    BackupRetentionPolicy: {
                        shape: "Sd"
                    },
                    HsmType: {},
                    SourceBackupId: {},
                    SubnetIds: {
                        type: "list",
                        member: {}
                    },
                    TagList: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sk"
                    }
                }
            }
        },
        CreateHsm: {
            input: {
                type: "structure",
                required: [ "ClusterId", "AvailabilityZone" ],
                members: {
                    ClusterId: {},
                    AvailabilityZone: {},
                    IpAddress: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Hsm: {
                        shape: "Sn"
                    }
                }
            }
        },
        DeleteBackup: {
            input: {
                type: "structure",
                required: [ "BackupId" ],
                members: {
                    BackupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Backup: {
                        shape: "S16"
                    }
                }
            }
        },
        DeleteCluster: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sk"
                    }
                }
            }
        },
        DeleteHsm: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {},
                    HsmId: {},
                    EniId: {},
                    EniIp: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HsmId: {}
                }
            }
        },
        DescribeBackups: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S1g"
                    },
                    SortAscending: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Backups: {
                        type: "list",
                        member: {
                            shape: "S16"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeClusters: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S1g"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Clusters: {
                        type: "list",
                        member: {
                            shape: "Sk"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        InitializeCluster: {
            input: {
                type: "structure",
                required: [ "ClusterId", "SignedCert", "TrustAnchor" ],
                members: {
                    ClusterId: {},
                    SignedCert: {},
                    TrustAnchor: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    State: {},
                    StateMessage: {}
                }
            }
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TagList" ],
                members: {
                    TagList: {
                        shape: "S4"
                    },
                    NextToken: {}
                }
            }
        },
        ModifyBackupAttributes: {
            input: {
                type: "structure",
                required: [ "BackupId", "NeverExpires" ],
                members: {
                    BackupId: {},
                    NeverExpires: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Backup: {
                        shape: "S16"
                    }
                }
            }
        },
        ModifyCluster: {
            input: {
                type: "structure",
                required: [ "BackupRetentionPolicy", "ClusterId" ],
                members: {
                    BackupRetentionPolicy: {
                        shape: "Sd"
                    },
                    ClusterId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sk"
                    }
                }
            }
        },
        RestoreBackup: {
            input: {
                type: "structure",
                required: [ "BackupId" ],
                members: {
                    BackupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Backup: {
                        shape: "S16"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceId", "TagList" ],
                members: {
                    ResourceId: {},
                    TagList: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceId", "TagKeyList" ],
                members: {
                    ResourceId: {},
                    TagKeyList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                Type: {},
                Value: {}
            }
        },
        Sk: {
            type: "structure",
            members: {
                BackupPolicy: {},
                BackupRetentionPolicy: {
                    shape: "Sd"
                },
                ClusterId: {},
                CreateTimestamp: {
                    type: "timestamp"
                },
                Hsms: {
                    type: "list",
                    member: {
                        shape: "Sn"
                    }
                },
                HsmType: {},
                PreCoPassword: {},
                SecurityGroup: {},
                SourceBackupId: {},
                State: {},
                StateMessage: {},
                SubnetMapping: {
                    type: "map",
                    key: {},
                    value: {}
                },
                VpcId: {},
                Certificates: {
                    type: "structure",
                    members: {
                        ClusterCsr: {},
                        HsmCertificate: {},
                        AwsHardwareCertificate: {},
                        ManufacturerHardwareCertificate: {},
                        ClusterCertificate: {}
                    }
                },
                TagList: {
                    shape: "S4"
                }
            }
        },
        Sn: {
            type: "structure",
            required: [ "HsmId" ],
            members: {
                AvailabilityZone: {},
                ClusterId: {},
                SubnetId: {},
                EniId: {},
                EniIp: {},
                HsmId: {},
                State: {},
                StateMessage: {}
            }
        },
        S16: {
            type: "structure",
            required: [ "BackupId" ],
            members: {
                BackupId: {},
                BackupState: {},
                ClusterId: {},
                CreateTimestamp: {
                    type: "timestamp"
                },
                CopyTimestamp: {
                    type: "timestamp"
                },
                NeverExpires: {
                    type: "boolean"
                },
                SourceRegion: {},
                SourceBackup: {},
                SourceCluster: {},
                DeleteTimestamp: {
                    type: "timestamp"
                },
                TagList: {
                    shape: "S4"
                }
            }
        },
        S1g: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        }
    },
    paginators: {
        DescribeBackups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeClusters: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTags: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["glue"] = {};

AWS.Glue = AWS.Service.defineService("glue", [ "2017-03-31" ]);

AWS.apiLoader.services["glue"]["2017-03-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-03-31",
        endpointPrefix: "glue",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Glue",
        serviceId: "Glue",
        signatureVersion: "v4",
        targetPrefix: "AWSGlue",
        uid: "glue-2017-03-31"
    },
    operations: {
        BatchCreatePartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionInputList" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionInputList: {
                        type: "list",
                        member: {
                            shape: "S5"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        shape: "S11"
                    }
                }
            }
        },
        BatchDeleteConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionNameList" ],
                members: {
                    CatalogId: {},
                    ConnectionNameList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Succeeded: {
                        shape: "Sm"
                    },
                    Errors: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "S13"
                        }
                    }
                }
            }
        },
        BatchDeletePartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionsToDelete" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionsToDelete: {
                        type: "list",
                        member: {
                            shape: "S1b"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        shape: "S11"
                    }
                }
            }
        },
        BatchDeleteTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TablesToDelete" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TablesToDelete: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TableName: {},
                                ErrorDetail: {
                                    shape: "S13"
                                }
                            }
                        }
                    }
                }
            }
        },
        BatchDeleteTableVersion: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "VersionIds" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    VersionIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TableName: {},
                                VersionId: {},
                                ErrorDetail: {
                                    shape: "S13"
                                }
                            }
                        }
                    }
                }
            }
        },
        BatchGetCrawlers: {
            input: {
                type: "structure",
                required: [ "CrawlerNames" ],
                members: {
                    CrawlerNames: {
                        shape: "S1p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Crawlers: {
                        shape: "S1r"
                    },
                    CrawlersNotFound: {
                        shape: "S1p"
                    }
                }
            }
        },
        BatchGetDevEndpoints: {
            input: {
                type: "structure",
                required: [ "DevEndpointNames" ],
                members: {
                    DevEndpointNames: {
                        shape: "S2z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DevEndpoints: {
                        shape: "S32"
                    },
                    DevEndpointsNotFound: {
                        shape: "S2z"
                    }
                }
            }
        },
        BatchGetJobs: {
            input: {
                type: "structure",
                required: [ "JobNames" ],
                members: {
                    JobNames: {
                        shape: "S3e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        shape: "S3g"
                    },
                    JobsNotFound: {
                        shape: "S3e"
                    }
                }
            }
        },
        BatchGetPartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionsToGet" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionsToGet: {
                        shape: "S3x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Partitions: {
                        shape: "S3z"
                    },
                    UnprocessedKeys: {
                        shape: "S3x"
                    }
                }
            }
        },
        BatchGetTriggers: {
            input: {
                type: "structure",
                required: [ "TriggerNames" ],
                members: {
                    TriggerNames: {
                        shape: "S42"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Triggers: {
                        shape: "S44"
                    },
                    TriggersNotFound: {
                        shape: "S42"
                    }
                }
            }
        },
        BatchGetWorkflows: {
            input: {
                type: "structure",
                required: [ "Names" ],
                members: {
                    Names: {
                        shape: "S4j"
                    },
                    IncludeGraph: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Workflows: {
                        type: "list",
                        member: {
                            shape: "S4m"
                        }
                    },
                    MissingWorkflows: {
                        shape: "S4j"
                    }
                }
            }
        },
        BatchStopJobRun: {
            input: {
                type: "structure",
                required: [ "JobName", "JobRunIds" ],
                members: {
                    JobName: {},
                    JobRunIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuccessfulSubmissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobName: {},
                                JobRunId: {}
                            }
                        }
                    },
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobName: {},
                                JobRunId: {},
                                ErrorDetail: {
                                    shape: "S13"
                                }
                            }
                        }
                    }
                }
            }
        },
        BatchUpdatePartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "Entries" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "PartitionValueList", "PartitionInput" ],
                            members: {
                                PartitionValueList: {
                                    shape: "S5j"
                                },
                                PartitionInput: {
                                    shape: "S5"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PartitionValueList: {
                                    shape: "S5j"
                                },
                                ErrorDetail: {
                                    shape: "S13"
                                }
                            }
                        }
                    }
                }
            }
        },
        CancelMLTaskRun: {
            input: {
                type: "structure",
                required: [ "TransformId", "TaskRunId" ],
                members: {
                    TransformId: {},
                    TaskRunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransformId: {},
                    TaskRunId: {},
                    Status: {}
                }
            }
        },
        CheckSchemaVersionValidity: {
            input: {
                type: "structure",
                required: [ "DataFormat", "SchemaDefinition" ],
                members: {
                    DataFormat: {},
                    SchemaDefinition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Valid: {
                        type: "boolean"
                    },
                    Error: {}
                }
            }
        },
        CreateClassifier: {
            input: {
                type: "structure",
                members: {
                    GrokClassifier: {
                        type: "structure",
                        required: [ "Classification", "Name", "GrokPattern" ],
                        members: {
                            Classification: {},
                            Name: {},
                            GrokPattern: {},
                            CustomPatterns: {}
                        }
                    },
                    XMLClassifier: {
                        type: "structure",
                        required: [ "Classification", "Name" ],
                        members: {
                            Classification: {},
                            Name: {},
                            RowTag: {}
                        }
                    },
                    JsonClassifier: {
                        type: "structure",
                        required: [ "Name", "JsonPath" ],
                        members: {
                            Name: {},
                            JsonPath: {}
                        }
                    },
                    CsvClassifier: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            Delimiter: {},
                            QuoteSymbol: {},
                            ContainsHeader: {},
                            Header: {
                                shape: "S6a"
                            },
                            DisableValueTrimming: {
                                type: "boolean"
                            },
                            AllowSingleColumn: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionInput" ],
                members: {
                    CatalogId: {},
                    ConnectionInput: {
                        shape: "S6d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateCrawler: {
            input: {
                type: "structure",
                required: [ "Name", "Role", "Targets" ],
                members: {
                    Name: {},
                    Role: {},
                    DatabaseName: {},
                    Description: {},
                    Targets: {
                        shape: "S1u"
                    },
                    Schedule: {},
                    Classifiers: {
                        shape: "S2c"
                    },
                    TablePrefix: {},
                    SchemaChangePolicy: {
                        shape: "S2f"
                    },
                    RecrawlPolicy: {
                        shape: "S2d"
                    },
                    LineageConfiguration: {
                        shape: "S2i"
                    },
                    Configuration: {},
                    CrawlerSecurityConfiguration: {},
                    Tags: {
                        shape: "S6m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDatabase: {
            input: {
                type: "structure",
                required: [ "DatabaseInput" ],
                members: {
                    CatalogId: {},
                    DatabaseInput: {
                        shape: "S6r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDevEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName", "RoleArn" ],
                members: {
                    EndpointName: {},
                    RoleArn: {},
                    SecurityGroupIds: {
                        shape: "S35"
                    },
                    SubnetId: {},
                    PublicKey: {},
                    PublicKeys: {
                        shape: "S3b"
                    },
                    NumberOfNodes: {
                        type: "integer"
                    },
                    WorkerType: {},
                    GlueVersion: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    ExtraPythonLibsS3Path: {},
                    ExtraJarsS3Path: {},
                    SecurityConfiguration: {},
                    Tags: {
                        shape: "S6m"
                    },
                    Arguments: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointName: {},
                    Status: {},
                    SecurityGroupIds: {
                        shape: "S35"
                    },
                    SubnetId: {},
                    RoleArn: {},
                    YarnEndpointAddress: {},
                    ZeppelinRemoteSparkInterpreterPort: {
                        type: "integer"
                    },
                    NumberOfNodes: {
                        type: "integer"
                    },
                    WorkerType: {},
                    GlueVersion: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    AvailabilityZone: {},
                    VpcId: {},
                    ExtraPythonLibsS3Path: {},
                    ExtraJarsS3Path: {},
                    FailureReason: {},
                    SecurityConfiguration: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    Arguments: {
                        shape: "S3c"
                    }
                }
            }
        },
        CreateJob: {
            input: {
                type: "structure",
                required: [ "Name", "Role", "Command" ],
                members: {
                    Name: {},
                    Description: {},
                    LogUri: {},
                    Role: {},
                    ExecutionProperty: {
                        shape: "S3k"
                    },
                    Command: {
                        shape: "S3m"
                    },
                    DefaultArguments: {
                        shape: "S3p"
                    },
                    NonOverridableArguments: {
                        shape: "S3p"
                    },
                    Connections: {
                        shape: "S3q"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    AllocatedCapacity: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated, use MaxCapacity instead.",
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    MaxCapacity: {
                        type: "double"
                    },
                    SecurityConfiguration: {},
                    Tags: {
                        shape: "S6m"
                    },
                    NotificationProperty: {
                        shape: "S3u"
                    },
                    GlueVersion: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    WorkerType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        CreateMLTransform: {
            input: {
                type: "structure",
                required: [ "Name", "InputRecordTables", "Parameters", "Role" ],
                members: {
                    Name: {},
                    Description: {},
                    InputRecordTables: {
                        shape: "S76"
                    },
                    Parameters: {
                        shape: "S78"
                    },
                    Role: {},
                    GlueVersion: {},
                    MaxCapacity: {
                        type: "double"
                    },
                    WorkerType: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "S6m"
                    },
                    TransformEncryption: {
                        shape: "S7d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransformId: {}
                }
            }
        },
        CreatePartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionInput" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionInput: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreatePartitionIndex: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionIndex" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionIndex: {
                        shape: "S7k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateRegistry: {
            input: {
                type: "structure",
                required: [ "RegistryName" ],
                members: {
                    RegistryName: {},
                    Description: {},
                    Tags: {
                        shape: "S6m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RegistryArn: {},
                    RegistryName: {},
                    Description: {},
                    Tags: {
                        shape: "S6m"
                    }
                }
            }
        },
        CreateSchema: {
            input: {
                type: "structure",
                required: [ "SchemaName", "DataFormat" ],
                members: {
                    RegistryId: {
                        shape: "S7q"
                    },
                    SchemaName: {},
                    DataFormat: {},
                    Compatibility: {},
                    Description: {},
                    Tags: {
                        shape: "S6m"
                    },
                    SchemaDefinition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegistryName: {},
                    RegistryArn: {},
                    SchemaName: {},
                    SchemaArn: {},
                    Description: {},
                    DataFormat: {},
                    Compatibility: {},
                    SchemaCheckpoint: {
                        type: "long"
                    },
                    LatestSchemaVersion: {
                        type: "long"
                    },
                    NextSchemaVersion: {
                        type: "long"
                    },
                    SchemaStatus: {},
                    Tags: {
                        shape: "S6m"
                    },
                    SchemaVersionId: {},
                    SchemaVersionStatus: {}
                }
            }
        },
        CreateScript: {
            input: {
                type: "structure",
                members: {
                    DagNodes: {
                        shape: "S7x"
                    },
                    DagEdges: {
                        shape: "S85"
                    },
                    Language: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PythonScript: {},
                    ScalaCode: {}
                }
            }
        },
        CreateSecurityConfiguration: {
            input: {
                type: "structure",
                required: [ "Name", "EncryptionConfiguration" ],
                members: {
                    Name: {},
                    EncryptionConfiguration: {
                        shape: "S8c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableInput" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableInput: {
                        shape: "S8n"
                    },
                    PartitionIndexes: {
                        type: "list",
                        member: {
                            shape: "S7k"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateTrigger: {
            input: {
                type: "structure",
                required: [ "Name", "Type", "Actions" ],
                members: {
                    Name: {},
                    WorkflowName: {},
                    Type: {},
                    Schedule: {},
                    Predicate: {
                        shape: "S4b"
                    },
                    Actions: {
                        shape: "S49"
                    },
                    Description: {},
                    StartOnCreation: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S6m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        CreateUserDefinedFunction: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "FunctionInput" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    FunctionInput: {
                        shape: "S8y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateWorkflow: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    DefaultRunProperties: {
                        shape: "S4n"
                    },
                    Tags: {
                        shape: "S6m"
                    },
                    MaxConcurrentRuns: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        DeleteClassifier: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteColumnStatisticsForPartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionValues", "ColumnName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionValues: {
                        shape: "S6"
                    },
                    ColumnName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteColumnStatisticsForTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "ColumnName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    ColumnName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionName" ],
                members: {
                    CatalogId: {},
                    ConnectionName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCrawler: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDatabase: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CatalogId: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDevEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName" ],
                members: {
                    EndpointName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteJob: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobName: {}
                }
            }
        },
        DeleteMLTransform: {
            input: {
                type: "structure",
                required: [ "TransformId" ],
                members: {
                    TransformId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransformId: {}
                }
            }
        },
        DeletePartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionValues" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionValues: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePartitionIndex: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "IndexName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    IndexName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRegistry: {
            input: {
                type: "structure",
                required: [ "RegistryId" ],
                members: {
                    RegistryId: {
                        shape: "S7q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RegistryName: {},
                    RegistryArn: {},
                    Status: {}
                }
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                members: {
                    PolicyHashCondition: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSchema: {
            input: {
                type: "structure",
                required: [ "SchemaId" ],
                members: {
                    SchemaId: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArn: {},
                    SchemaName: {},
                    Status: {}
                }
            }
        },
        DeleteSchemaVersions: {
            input: {
                type: "structure",
                required: [ "SchemaId", "Versions" ],
                members: {
                    SchemaId: {
                        shape: "Sv"
                    },
                    Versions: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaVersionErrors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VersionNumber: {
                                    type: "long"
                                },
                                ErrorDetails: {
                                    type: "structure",
                                    members: {
                                        ErrorCode: {},
                                        ErrorMessage: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DeleteSecurityConfiguration: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "Name" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTableVersion: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "VersionId" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    VersionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTrigger: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        DeleteUserDefinedFunction: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "FunctionName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    FunctionName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorkflow: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        GetCatalogImportStatus: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImportStatus: {
                        type: "structure",
                        members: {
                            ImportCompleted: {
                                type: "boolean"
                            },
                            ImportTime: {
                                type: "timestamp"
                            },
                            ImportedBy: {}
                        }
                    }
                }
            }
        },
        GetClassifier: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Classifier: {
                        shape: "Sao"
                    }
                }
            }
        },
        GetClassifiers: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Classifiers: {
                        type: "list",
                        member: {
                            shape: "Sao"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetColumnStatisticsForPartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionValues", "ColumnNames" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionValues: {
                        shape: "S6"
                    },
                    ColumnNames: {
                        shape: "Saz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ColumnStatisticsList: {
                        shape: "Sb1"
                    },
                    Errors: {
                        shape: "Sbj"
                    }
                }
            }
        },
        GetColumnStatisticsForTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "ColumnNames" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    ColumnNames: {
                        shape: "Saz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ColumnStatisticsList: {
                        shape: "Sb1"
                    },
                    Errors: {
                        shape: "Sbj"
                    }
                }
            }
        },
        GetConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CatalogId: {},
                    Name: {},
                    HidePassword: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "Sbp"
                    }
                }
            }
        },
        GetConnections: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {},
                    Filter: {
                        type: "structure",
                        members: {
                            MatchCriteria: {
                                shape: "S6f"
                            },
                            ConnectionType: {}
                        }
                    },
                    HidePassword: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionList: {
                        type: "list",
                        member: {
                            shape: "Sbp"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetCrawler: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Crawler: {
                        shape: "S1s"
                    }
                }
            }
        },
        GetCrawlerMetrics: {
            input: {
                type: "structure",
                members: {
                    CrawlerNameList: {
                        shape: "S1p"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CrawlerMetricsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CrawlerName: {},
                                TimeLeftSeconds: {
                                    type: "double"
                                },
                                StillEstimating: {
                                    type: "boolean"
                                },
                                LastRuntimeSeconds: {
                                    type: "double"
                                },
                                MedianRuntimeSeconds: {
                                    type: "double"
                                },
                                TablesCreated: {
                                    type: "integer"
                                },
                                TablesUpdated: {
                                    type: "integer"
                                },
                                TablesDeleted: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetCrawlers: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Crawlers: {
                        shape: "S1r"
                    },
                    NextToken: {}
                }
            }
        },
        GetDataCatalogEncryptionSettings: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataCatalogEncryptionSettings: {
                        shape: "Sc4"
                    }
                }
            }
        },
        GetDatabase: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CatalogId: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Database: {
                        shape: "Sca"
                    }
                }
            }
        },
        GetDatabases: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceShareType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DatabaseList" ],
                members: {
                    DatabaseList: {
                        type: "list",
                        member: {
                            shape: "Sca"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetDataflowGraph: {
            input: {
                type: "structure",
                members: {
                    PythonScript: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DagNodes: {
                        shape: "S7x"
                    },
                    DagEdges: {
                        shape: "S85"
                    }
                }
            }
        },
        GetDevEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName" ],
                members: {
                    EndpointName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DevEndpoint: {
                        shape: "S33"
                    }
                }
            }
        },
        GetDevEndpoints: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DevEndpoints: {
                        shape: "S32"
                    },
                    NextToken: {}
                }
            }
        },
        GetJob: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "S3h"
                    }
                }
            }
        },
        GetJobBookmark: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {},
                    RunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobBookmarkEntry: {
                        shape: "Scs"
                    }
                }
            }
        },
        GetJobRun: {
            input: {
                type: "structure",
                required: [ "JobName", "RunId" ],
                members: {
                    JobName: {},
                    RunId: {},
                    PredecessorsIncluded: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobRun: {
                        shape: "S4z"
                    }
                }
            }
        },
        GetJobRuns: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobRuns: {
                        shape: "S4y"
                    },
                    NextToken: {}
                }
            }
        },
        GetJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        shape: "S3g"
                    },
                    NextToken: {}
                }
            }
        },
        GetMLTaskRun: {
            input: {
                type: "structure",
                required: [ "TransformId", "TaskRunId" ],
                members: {
                    TransformId: {},
                    TaskRunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransformId: {},
                    TaskRunId: {},
                    Status: {},
                    LogGroupName: {},
                    Properties: {
                        shape: "Sd2"
                    },
                    ErrorString: {},
                    StartedOn: {
                        type: "timestamp"
                    },
                    LastModifiedOn: {
                        type: "timestamp"
                    },
                    CompletedOn: {
                        type: "timestamp"
                    },
                    ExecutionTime: {
                        type: "integer"
                    }
                }
            }
        },
        GetMLTaskRuns: {
            input: {
                type: "structure",
                required: [ "TransformId" ],
                members: {
                    TransformId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filter: {
                        type: "structure",
                        members: {
                            TaskRunType: {},
                            Status: {},
                            StartedBefore: {
                                type: "timestamp"
                            },
                            StartedAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    Sort: {
                        type: "structure",
                        required: [ "Column", "SortDirection" ],
                        members: {
                            Column: {},
                            SortDirection: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskRuns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TransformId: {},
                                TaskRunId: {},
                                Status: {},
                                LogGroupName: {},
                                Properties: {
                                    shape: "Sd2"
                                },
                                ErrorString: {},
                                StartedOn: {
                                    type: "timestamp"
                                },
                                LastModifiedOn: {
                                    type: "timestamp"
                                },
                                CompletedOn: {
                                    type: "timestamp"
                                },
                                ExecutionTime: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetMLTransform: {
            input: {
                type: "structure",
                required: [ "TransformId" ],
                members: {
                    TransformId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransformId: {},
                    Name: {},
                    Description: {},
                    Status: {},
                    CreatedOn: {
                        type: "timestamp"
                    },
                    LastModifiedOn: {
                        type: "timestamp"
                    },
                    InputRecordTables: {
                        shape: "S76"
                    },
                    Parameters: {
                        shape: "S78"
                    },
                    EvaluationMetrics: {
                        shape: "Sdl"
                    },
                    LabelCount: {
                        type: "integer"
                    },
                    Schema: {
                        shape: "Sds"
                    },
                    Role: {},
                    GlueVersion: {},
                    MaxCapacity: {
                        type: "double"
                    },
                    WorkerType: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    TransformEncryption: {
                        shape: "S7d"
                    }
                }
            }
        },
        GetMLTransforms: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filter: {
                        shape: "Sdv"
                    },
                    Sort: {
                        shape: "Sdw"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Transforms" ],
                members: {
                    Transforms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TransformId: {},
                                Name: {},
                                Description: {},
                                Status: {},
                                CreatedOn: {
                                    type: "timestamp"
                                },
                                LastModifiedOn: {
                                    type: "timestamp"
                                },
                                InputRecordTables: {
                                    shape: "S76"
                                },
                                Parameters: {
                                    shape: "S78"
                                },
                                EvaluationMetrics: {
                                    shape: "Sdl"
                                },
                                LabelCount: {
                                    type: "integer"
                                },
                                Schema: {
                                    shape: "Sds"
                                },
                                Role: {},
                                GlueVersion: {},
                                MaxCapacity: {
                                    type: "double"
                                },
                                WorkerType: {},
                                NumberOfWorkers: {
                                    type: "integer"
                                },
                                Timeout: {
                                    type: "integer"
                                },
                                MaxRetries: {
                                    type: "integer"
                                },
                                TransformEncryption: {
                                    shape: "S7d"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetMapping: {
            input: {
                type: "structure",
                required: [ "Source" ],
                members: {
                    Source: {
                        shape: "Se2"
                    },
                    Sinks: {
                        shape: "Se3"
                    },
                    Location: {
                        shape: "Se4"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Mapping" ],
                members: {
                    Mapping: {
                        shape: "Se6"
                    }
                }
            }
        },
        GetPartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionValues" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionValues: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Partition: {
                        shape: "S40"
                    }
                }
            }
        },
        GetPartitionIndexes: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PartitionIndexDescriptorList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "IndexName", "Keys", "IndexStatus" ],
                            members: {
                                IndexName: {},
                                Keys: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Name", "Type" ],
                                        members: {
                                            Name: {},
                                            Type: {}
                                        }
                                    }
                                },
                                IndexStatus: {},
                                BackfillErrors: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Code: {},
                                            Partitions: {
                                                type: "list",
                                                member: {
                                                    shape: "S1b"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetPartitions: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    Expression: {},
                    NextToken: {},
                    Segment: {
                        type: "structure",
                        required: [ "SegmentNumber", "TotalSegments" ],
                        members: {
                            SegmentNumber: {
                                type: "integer"
                            },
                            TotalSegments: {
                                type: "integer"
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    ExcludeColumnSchema: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Partitions: {
                        shape: "S3z"
                    },
                    NextToken: {}
                }
            }
        },
        GetPlan: {
            input: {
                type: "structure",
                required: [ "Mapping", "Source" ],
                members: {
                    Mapping: {
                        shape: "Se6"
                    },
                    Source: {
                        shape: "Se2"
                    },
                    Sinks: {
                        shape: "Se3"
                    },
                    Location: {
                        shape: "Se4"
                    },
                    Language: {},
                    AdditionalPlanOptionsMap: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PythonScript: {},
                    ScalaCode: {}
                }
            }
        },
        GetRegistry: {
            input: {
                type: "structure",
                required: [ "RegistryId" ],
                members: {
                    RegistryId: {
                        shape: "S7q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RegistryName: {},
                    RegistryArn: {},
                    Description: {},
                    Status: {},
                    CreatedTime: {},
                    UpdatedTime: {}
                }
            }
        },
        GetResourcePolicies: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GetResourcePoliciesResponseList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PolicyInJson: {},
                                PolicyHash: {},
                                CreateTime: {
                                    type: "timestamp"
                                },
                                UpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetResourcePolicy: {
            input: {
                type: "structure",
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyInJson: {},
                    PolicyHash: {},
                    CreateTime: {
                        type: "timestamp"
                    },
                    UpdateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetSchema: {
            input: {
                type: "structure",
                required: [ "SchemaId" ],
                members: {
                    SchemaId: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RegistryName: {},
                    RegistryArn: {},
                    SchemaName: {},
                    SchemaArn: {},
                    Description: {},
                    DataFormat: {},
                    Compatibility: {},
                    SchemaCheckpoint: {
                        type: "long"
                    },
                    LatestSchemaVersion: {
                        type: "long"
                    },
                    NextSchemaVersion: {
                        type: "long"
                    },
                    SchemaStatus: {},
                    CreatedTime: {},
                    UpdatedTime: {}
                }
            }
        },
        GetSchemaByDefinition: {
            input: {
                type: "structure",
                required: [ "SchemaId", "SchemaDefinition" ],
                members: {
                    SchemaId: {
                        shape: "Sv"
                    },
                    SchemaDefinition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaVersionId: {},
                    SchemaArn: {},
                    DataFormat: {},
                    Status: {},
                    CreatedTime: {}
                }
            }
        },
        GetSchemaVersion: {
            input: {
                type: "structure",
                members: {
                    SchemaId: {
                        shape: "Sv"
                    },
                    SchemaVersionId: {},
                    SchemaVersionNumber: {
                        shape: "Sfd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaVersionId: {},
                    SchemaDefinition: {},
                    DataFormat: {},
                    SchemaArn: {},
                    VersionNumber: {
                        type: "long"
                    },
                    Status: {},
                    CreatedTime: {}
                }
            }
        },
        GetSchemaVersionsDiff: {
            input: {
                type: "structure",
                required: [ "SchemaId", "FirstSchemaVersionNumber", "SecondSchemaVersionNumber", "SchemaDiffType" ],
                members: {
                    SchemaId: {
                        shape: "Sv"
                    },
                    FirstSchemaVersionNumber: {
                        shape: "Sfd"
                    },
                    SecondSchemaVersionNumber: {
                        shape: "Sfd"
                    },
                    SchemaDiffType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Diff: {}
                }
            }
        },
        GetSecurityConfiguration: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityConfiguration: {
                        shape: "Sfm"
                    }
                }
            }
        },
        GetSecurityConfigurations: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityConfigurations: {
                        type: "list",
                        member: {
                            shape: "Sfm"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "Name" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Table: {
                        shape: "Sfs"
                    }
                }
            }
        },
        GetTableVersion: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    VersionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TableVersion: {
                        shape: "Sfv"
                    }
                }
            }
        },
        GetTableVersions: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TableVersions: {
                        type: "list",
                        member: {
                            shape: "Sfv"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetTables: {
            input: {
                type: "structure",
                required: [ "DatabaseName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    Expression: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TableList: {
                        shape: "Sg2"
                    },
                    NextToken: {}
                }
            }
        },
        GetTags: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6m"
                    }
                }
            }
        },
        GetTrigger: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Trigger: {
                        shape: "S45"
                    }
                }
            }
        },
        GetTriggers: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    DependentJobName: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Triggers: {
                        shape: "S44"
                    },
                    NextToken: {}
                }
            }
        },
        GetUserDefinedFunction: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "FunctionName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    FunctionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserDefinedFunction: {
                        shape: "Sgb"
                    }
                }
            }
        },
        GetUserDefinedFunctions: {
            input: {
                type: "structure",
                required: [ "Pattern" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    Pattern: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserDefinedFunctions: {
                        type: "list",
                        member: {
                            shape: "Sgb"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetWorkflow: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    IncludeGraph: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Workflow: {
                        shape: "S4m"
                    }
                }
            }
        },
        GetWorkflowRun: {
            input: {
                type: "structure",
                required: [ "Name", "RunId" ],
                members: {
                    Name: {},
                    RunId: {},
                    IncludeGraph: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Run: {
                        shape: "S4o"
                    }
                }
            }
        },
        GetWorkflowRunProperties: {
            input: {
                type: "structure",
                required: [ "Name", "RunId" ],
                members: {
                    Name: {},
                    RunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RunProperties: {
                        shape: "S4n"
                    }
                }
            }
        },
        GetWorkflowRuns: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    IncludeGraph: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Runs: {
                        type: "list",
                        member: {
                            shape: "S4o"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ImportCatalogToGlue: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListCrawlers: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Tags: {
                        shape: "S6m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CrawlerNames: {
                        shape: "S1p"
                    },
                    NextToken: {}
                }
            }
        },
        ListDevEndpoints: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "S6m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DevEndpointNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "S6m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobNames: {
                        shape: "S3e"
                    },
                    NextToken: {}
                }
            }
        },
        ListMLTransforms: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filter: {
                        shape: "Sdv"
                    },
                    Sort: {
                        shape: "Sdw"
                    },
                    Tags: {
                        shape: "S6m"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TransformIds" ],
                members: {
                    TransformIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListRegistries: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Registries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RegistryName: {},
                                RegistryArn: {},
                                Description: {},
                                Status: {},
                                CreatedTime: {},
                                UpdatedTime: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSchemaVersions: {
            input: {
                type: "structure",
                required: [ "SchemaId" ],
                members: {
                    SchemaId: {
                        shape: "Sv"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Schemas: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SchemaArn: {},
                                SchemaVersionId: {},
                                VersionNumber: {
                                    type: "long"
                                },
                                Status: {},
                                CreatedTime: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSchemas: {
            input: {
                type: "structure",
                members: {
                    RegistryId: {
                        shape: "S7q"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Schemas: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RegistryName: {},
                                SchemaName: {},
                                SchemaArn: {},
                                Description: {},
                                SchemaStatus: {},
                                CreatedTime: {},
                                UpdatedTime: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTriggers: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    DependentJobName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "S6m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TriggerNames: {
                        shape: "S42"
                    },
                    NextToken: {}
                }
            }
        },
        ListWorkflows: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Workflows: {
                        shape: "S4j"
                    },
                    NextToken: {}
                }
            }
        },
        PutDataCatalogEncryptionSettings: {
            input: {
                type: "structure",
                required: [ "DataCatalogEncryptionSettings" ],
                members: {
                    CatalogId: {},
                    DataCatalogEncryptionSettings: {
                        shape: "Sc4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "PolicyInJson" ],
                members: {
                    PolicyInJson: {},
                    ResourceArn: {},
                    PolicyHashCondition: {},
                    PolicyExistsCondition: {},
                    EnableHybrid: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyHash: {}
                }
            }
        },
        PutSchemaVersionMetadata: {
            input: {
                type: "structure",
                required: [ "MetadataKeyValue" ],
                members: {
                    SchemaId: {
                        shape: "Sv"
                    },
                    SchemaVersionNumber: {
                        shape: "Sfd"
                    },
                    SchemaVersionId: {},
                    MetadataKeyValue: {
                        shape: "Shp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArn: {},
                    SchemaName: {},
                    RegistryName: {},
                    LatestVersion: {
                        type: "boolean"
                    },
                    VersionNumber: {
                        type: "long"
                    },
                    SchemaVersionId: {},
                    MetadataKey: {},
                    MetadataValue: {}
                }
            }
        },
        PutWorkflowRunProperties: {
            input: {
                type: "structure",
                required: [ "Name", "RunId", "RunProperties" ],
                members: {
                    Name: {},
                    RunId: {},
                    RunProperties: {
                        shape: "S4n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        QuerySchemaVersionMetadata: {
            input: {
                type: "structure",
                members: {
                    SchemaId: {
                        shape: "Sv"
                    },
                    SchemaVersionNumber: {
                        shape: "Sfd"
                    },
                    SchemaVersionId: {},
                    MetadataList: {
                        type: "list",
                        member: {
                            shape: "Shp"
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MetadataInfoMap: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                MetadataValue: {},
                                CreatedTime: {},
                                OtherMetadataValueList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            MetadataValue: {},
                                            CreatedTime: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    SchemaVersionId: {},
                    NextToken: {}
                }
            }
        },
        RegisterSchemaVersion: {
            input: {
                type: "structure",
                required: [ "SchemaId", "SchemaDefinition" ],
                members: {
                    SchemaId: {
                        shape: "Sv"
                    },
                    SchemaDefinition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaVersionId: {},
                    VersionNumber: {
                        type: "long"
                    },
                    Status: {}
                }
            }
        },
        RemoveSchemaVersionMetadata: {
            input: {
                type: "structure",
                required: [ "MetadataKeyValue" ],
                members: {
                    SchemaId: {
                        shape: "Sv"
                    },
                    SchemaVersionNumber: {
                        shape: "Sfd"
                    },
                    SchemaVersionId: {},
                    MetadataKeyValue: {
                        shape: "Shp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArn: {},
                    SchemaName: {},
                    RegistryName: {},
                    LatestVersion: {
                        type: "boolean"
                    },
                    VersionNumber: {
                        type: "long"
                    },
                    SchemaVersionId: {},
                    MetadataKey: {},
                    MetadataValue: {}
                }
            }
        },
        ResetJobBookmark: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {},
                    RunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobBookmarkEntry: {
                        shape: "Scs"
                    }
                }
            }
        },
        ResumeWorkflowRun: {
            input: {
                type: "structure",
                required: [ "Name", "RunId", "NodeIds" ],
                members: {
                    Name: {},
                    RunId: {},
                    NodeIds: {
                        shape: "Sia"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RunId: {},
                    NodeIds: {
                        shape: "Sia"
                    }
                }
            }
        },
        SearchTables: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {},
                    NextToken: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {},
                                Value: {},
                                Comparator: {}
                            }
                        }
                    },
                    SearchText: {},
                    SortCriteria: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FieldName: {},
                                Sort: {}
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceShareType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TableList: {
                        shape: "Sg2"
                    }
                }
            }
        },
        StartCrawler: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartCrawlerSchedule: {
            input: {
                type: "structure",
                required: [ "CrawlerName" ],
                members: {
                    CrawlerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartExportLabelsTaskRun: {
            input: {
                type: "structure",
                required: [ "TransformId", "OutputS3Path" ],
                members: {
                    TransformId: {},
                    OutputS3Path: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskRunId: {}
                }
            }
        },
        StartImportLabelsTaskRun: {
            input: {
                type: "structure",
                required: [ "TransformId", "InputS3Path" ],
                members: {
                    TransformId: {},
                    InputS3Path: {},
                    ReplaceAllLabels: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskRunId: {}
                }
            }
        },
        StartJobRun: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {},
                    JobRunId: {},
                    Arguments: {
                        shape: "S3p"
                    },
                    AllocatedCapacity: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated, use MaxCapacity instead.",
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    MaxCapacity: {
                        type: "double"
                    },
                    SecurityConfiguration: {},
                    NotificationProperty: {
                        shape: "S3u"
                    },
                    WorkerType: {},
                    NumberOfWorkers: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobRunId: {}
                }
            }
        },
        StartMLEvaluationTaskRun: {
            input: {
                type: "structure",
                required: [ "TransformId" ],
                members: {
                    TransformId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskRunId: {}
                }
            }
        },
        StartMLLabelingSetGenerationTaskRun: {
            input: {
                type: "structure",
                required: [ "TransformId", "OutputS3Path" ],
                members: {
                    TransformId: {},
                    OutputS3Path: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskRunId: {}
                }
            }
        },
        StartTrigger: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        StartWorkflowRun: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RunId: {}
                }
            }
        },
        StopCrawler: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopCrawlerSchedule: {
            input: {
                type: "structure",
                required: [ "CrawlerName" ],
                members: {
                    CrawlerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopTrigger: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        StopWorkflowRun: {
            input: {
                type: "structure",
                required: [ "Name", "RunId" ],
                members: {
                    Name: {},
                    RunId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagsToAdd" ],
                members: {
                    ResourceArn: {},
                    TagsToAdd: {
                        shape: "S6m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagsToRemove" ],
                members: {
                    ResourceArn: {},
                    TagsToRemove: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateClassifier: {
            input: {
                type: "structure",
                members: {
                    GrokClassifier: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            Classification: {},
                            GrokPattern: {},
                            CustomPatterns: {}
                        }
                    },
                    XMLClassifier: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            Classification: {},
                            RowTag: {}
                        }
                    },
                    JsonClassifier: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            JsonPath: {}
                        }
                    },
                    CsvClassifier: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            Delimiter: {},
                            QuoteSymbol: {},
                            ContainsHeader: {},
                            Header: {
                                shape: "S6a"
                            },
                            DisableValueTrimming: {
                                type: "boolean"
                            },
                            AllowSingleColumn: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateColumnStatisticsForPartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionValues", "ColumnStatisticsList" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionValues: {
                        shape: "S6"
                    },
                    ColumnStatisticsList: {
                        shape: "Sjm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        shape: "Sjo"
                    }
                }
            }
        },
        UpdateColumnStatisticsForTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "ColumnStatisticsList" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    ColumnStatisticsList: {
                        shape: "Sjm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        shape: "Sjo"
                    }
                }
            }
        },
        UpdateConnection: {
            input: {
                type: "structure",
                required: [ "Name", "ConnectionInput" ],
                members: {
                    CatalogId: {},
                    Name: {},
                    ConnectionInput: {
                        shape: "S6d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCrawler: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Role: {},
                    DatabaseName: {},
                    Description: {},
                    Targets: {
                        shape: "S1u"
                    },
                    Schedule: {},
                    Classifiers: {
                        shape: "S2c"
                    },
                    TablePrefix: {},
                    SchemaChangePolicy: {
                        shape: "S2f"
                    },
                    RecrawlPolicy: {
                        shape: "S2d"
                    },
                    LineageConfiguration: {
                        shape: "S2i"
                    },
                    Configuration: {},
                    CrawlerSecurityConfiguration: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCrawlerSchedule: {
            input: {
                type: "structure",
                required: [ "CrawlerName" ],
                members: {
                    CrawlerName: {},
                    Schedule: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDatabase: {
            input: {
                type: "structure",
                required: [ "Name", "DatabaseInput" ],
                members: {
                    CatalogId: {},
                    Name: {},
                    DatabaseInput: {
                        shape: "S6r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDevEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName" ],
                members: {
                    EndpointName: {},
                    PublicKey: {},
                    AddPublicKeys: {
                        shape: "S3b"
                    },
                    DeletePublicKeys: {
                        shape: "S3b"
                    },
                    CustomLibraries: {
                        type: "structure",
                        members: {
                            ExtraPythonLibsS3Path: {},
                            ExtraJarsS3Path: {}
                        }
                    },
                    UpdateEtlLibraries: {
                        type: "boolean"
                    },
                    DeleteArguments: {
                        shape: "S35"
                    },
                    AddArguments: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateJob: {
            input: {
                type: "structure",
                required: [ "JobName", "JobUpdate" ],
                members: {
                    JobName: {},
                    JobUpdate: {
                        type: "structure",
                        members: {
                            Description: {},
                            LogUri: {},
                            Role: {},
                            ExecutionProperty: {
                                shape: "S3k"
                            },
                            Command: {
                                shape: "S3m"
                            },
                            DefaultArguments: {
                                shape: "S3p"
                            },
                            NonOverridableArguments: {
                                shape: "S3p"
                            },
                            Connections: {
                                shape: "S3q"
                            },
                            MaxRetries: {
                                type: "integer"
                            },
                            AllocatedCapacity: {
                                deprecated: true,
                                deprecatedMessage: "This property is deprecated, use MaxCapacity instead.",
                                type: "integer"
                            },
                            Timeout: {
                                type: "integer"
                            },
                            MaxCapacity: {
                                type: "double"
                            },
                            WorkerType: {},
                            NumberOfWorkers: {
                                type: "integer"
                            },
                            SecurityConfiguration: {},
                            NotificationProperty: {
                                shape: "S3u"
                            },
                            GlueVersion: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobName: {}
                }
            }
        },
        UpdateMLTransform: {
            input: {
                type: "structure",
                required: [ "TransformId" ],
                members: {
                    TransformId: {},
                    Name: {},
                    Description: {},
                    Parameters: {
                        shape: "S78"
                    },
                    Role: {},
                    GlueVersion: {},
                    MaxCapacity: {
                        type: "double"
                    },
                    WorkerType: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransformId: {}
                }
            }
        },
        UpdatePartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionValueList", "PartitionInput" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionValueList: {
                        shape: "S5j"
                    },
                    PartitionInput: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRegistry: {
            input: {
                type: "structure",
                required: [ "RegistryId", "Description" ],
                members: {
                    RegistryId: {
                        shape: "S7q"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegistryName: {},
                    RegistryArn: {}
                }
            }
        },
        UpdateSchema: {
            input: {
                type: "structure",
                required: [ "SchemaId" ],
                members: {
                    SchemaId: {
                        shape: "Sv"
                    },
                    SchemaVersionNumber: {
                        shape: "Sfd"
                    },
                    Compatibility: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArn: {},
                    SchemaName: {},
                    RegistryName: {}
                }
            }
        },
        UpdateTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableInput" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableInput: {
                        shape: "S8n"
                    },
                    SkipArchive: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTrigger: {
            input: {
                type: "structure",
                required: [ "Name", "TriggerUpdate" ],
                members: {
                    Name: {},
                    TriggerUpdate: {
                        type: "structure",
                        members: {
                            Name: {},
                            Description: {},
                            Schedule: {},
                            Actions: {
                                shape: "S49"
                            },
                            Predicate: {
                                shape: "S4b"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Trigger: {
                        shape: "S45"
                    }
                }
            }
        },
        UpdateUserDefinedFunction: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "FunctionName", "FunctionInput" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    FunctionName: {},
                    FunctionInput: {
                        shape: "S8y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWorkflow: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    DefaultRunProperties: {
                        shape: "S4n"
                    },
                    MaxConcurrentRuns: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                Values: {
                    shape: "S6"
                },
                LastAccessTime: {
                    type: "timestamp"
                },
                StorageDescriptor: {
                    shape: "S9"
                },
                Parameters: {
                    shape: "Se"
                },
                LastAnalyzedTime: {
                    type: "timestamp"
                }
            }
        },
        S6: {
            type: "list",
            member: {}
        },
        S9: {
            type: "structure",
            members: {
                Columns: {
                    shape: "Sa"
                },
                Location: {},
                InputFormat: {},
                OutputFormat: {},
                Compressed: {
                    type: "boolean"
                },
                NumberOfBuckets: {
                    type: "integer"
                },
                SerdeInfo: {
                    type: "structure",
                    members: {
                        Name: {},
                        SerializationLibrary: {},
                        Parameters: {
                            shape: "Se"
                        }
                    }
                },
                BucketColumns: {
                    shape: "Sm"
                },
                SortColumns: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Column", "SortOrder" ],
                        members: {
                            Column: {},
                            SortOrder: {
                                type: "integer"
                            }
                        }
                    }
                },
                Parameters: {
                    shape: "Se"
                },
                SkewedInfo: {
                    type: "structure",
                    members: {
                        SkewedColumnNames: {
                            shape: "Sm"
                        },
                        SkewedColumnValues: {
                            type: "list",
                            member: {}
                        },
                        SkewedColumnValueLocationMaps: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    }
                },
                StoredAsSubDirectories: {
                    type: "boolean"
                },
                SchemaReference: {
                    type: "structure",
                    members: {
                        SchemaId: {
                            shape: "Sv"
                        },
                        SchemaVersionId: {},
                        SchemaVersionNumber: {
                            type: "long"
                        }
                    }
                }
            }
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Type: {},
                    Comment: {},
                    Parameters: {
                        shape: "Se"
                    }
                }
            }
        },
        Se: {
            type: "map",
            key: {},
            value: {}
        },
        Sm: {
            type: "list",
            member: {}
        },
        Sv: {
            type: "structure",
            members: {
                SchemaArn: {},
                SchemaName: {},
                RegistryName: {}
            }
        },
        S11: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PartitionValues: {
                        shape: "S6"
                    },
                    ErrorDetail: {
                        shape: "S13"
                    }
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                ErrorCode: {},
                ErrorMessage: {}
            }
        },
        S1b: {
            type: "structure",
            required: [ "Values" ],
            members: {
                Values: {
                    shape: "S6"
                }
            }
        },
        S1p: {
            type: "list",
            member: {}
        },
        S1r: {
            type: "list",
            member: {
                shape: "S1s"
            }
        },
        S1s: {
            type: "structure",
            members: {
                Name: {},
                Role: {},
                Targets: {
                    shape: "S1u"
                },
                DatabaseName: {},
                Description: {},
                Classifiers: {
                    shape: "S2c"
                },
                RecrawlPolicy: {
                    shape: "S2d"
                },
                SchemaChangePolicy: {
                    shape: "S2f"
                },
                LineageConfiguration: {
                    shape: "S2i"
                },
                State: {},
                TablePrefix: {},
                Schedule: {
                    type: "structure",
                    members: {
                        ScheduleExpression: {},
                        State: {}
                    }
                },
                CrawlElapsedTime: {
                    type: "long"
                },
                CreationTime: {
                    type: "timestamp"
                },
                LastUpdated: {
                    type: "timestamp"
                },
                LastCrawl: {
                    type: "structure",
                    members: {
                        Status: {},
                        ErrorMessage: {},
                        LogGroup: {},
                        LogStream: {},
                        MessagePrefix: {},
                        StartTime: {
                            type: "timestamp"
                        }
                    }
                },
                Version: {
                    type: "long"
                },
                Configuration: {},
                CrawlerSecurityConfiguration: {}
            }
        },
        S1u: {
            type: "structure",
            members: {
                S3Targets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Path: {},
                            Exclusions: {
                                shape: "S1y"
                            },
                            ConnectionName: {}
                        }
                    }
                },
                JdbcTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ConnectionName: {},
                            Path: {},
                            Exclusions: {
                                shape: "S1y"
                            }
                        }
                    }
                },
                MongoDBTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ConnectionName: {},
                            Path: {},
                            ScanAll: {
                                type: "boolean"
                            }
                        }
                    }
                },
                DynamoDBTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Path: {},
                            scanAll: {
                                type: "boolean"
                            },
                            scanRate: {
                                type: "double"
                            }
                        }
                    }
                },
                CatalogTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DatabaseName", "Tables" ],
                        members: {
                            DatabaseName: {},
                            Tables: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S1y: {
            type: "list",
            member: {}
        },
        S2c: {
            type: "list",
            member: {}
        },
        S2d: {
            type: "structure",
            members: {
                RecrawlBehavior: {}
            }
        },
        S2f: {
            type: "structure",
            members: {
                UpdateBehavior: {},
                DeleteBehavior: {}
            }
        },
        S2i: {
            type: "structure",
            members: {
                CrawlerLineageSettings: {}
            }
        },
        S2z: {
            type: "list",
            member: {}
        },
        S32: {
            type: "list",
            member: {
                shape: "S33"
            }
        },
        S33: {
            type: "structure",
            members: {
                EndpointName: {},
                RoleArn: {},
                SecurityGroupIds: {
                    shape: "S35"
                },
                SubnetId: {},
                YarnEndpointAddress: {},
                PrivateAddress: {},
                ZeppelinRemoteSparkInterpreterPort: {
                    type: "integer"
                },
                PublicAddress: {},
                Status: {},
                WorkerType: {},
                GlueVersion: {},
                NumberOfWorkers: {
                    type: "integer"
                },
                NumberOfNodes: {
                    type: "integer"
                },
                AvailabilityZone: {},
                VpcId: {},
                ExtraPythonLibsS3Path: {},
                ExtraJarsS3Path: {},
                FailureReason: {},
                LastUpdateStatus: {},
                CreatedTimestamp: {
                    type: "timestamp"
                },
                LastModifiedTimestamp: {
                    type: "timestamp"
                },
                PublicKey: {},
                PublicKeys: {
                    shape: "S3b"
                },
                SecurityConfiguration: {},
                Arguments: {
                    shape: "S3c"
                }
            }
        },
        S35: {
            type: "list",
            member: {}
        },
        S3b: {
            type: "list",
            member: {}
        },
        S3c: {
            type: "map",
            key: {},
            value: {}
        },
        S3e: {
            type: "list",
            member: {}
        },
        S3g: {
            type: "list",
            member: {
                shape: "S3h"
            }
        },
        S3h: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                LogUri: {},
                Role: {},
                CreatedOn: {
                    type: "timestamp"
                },
                LastModifiedOn: {
                    type: "timestamp"
                },
                ExecutionProperty: {
                    shape: "S3k"
                },
                Command: {
                    shape: "S3m"
                },
                DefaultArguments: {
                    shape: "S3p"
                },
                NonOverridableArguments: {
                    shape: "S3p"
                },
                Connections: {
                    shape: "S3q"
                },
                MaxRetries: {
                    type: "integer"
                },
                AllocatedCapacity: {
                    deprecated: true,
                    deprecatedMessage: "This property is deprecated, use MaxCapacity instead.",
                    type: "integer"
                },
                Timeout: {
                    type: "integer"
                },
                MaxCapacity: {
                    type: "double"
                },
                WorkerType: {},
                NumberOfWorkers: {
                    type: "integer"
                },
                SecurityConfiguration: {},
                NotificationProperty: {
                    shape: "S3u"
                },
                GlueVersion: {}
            }
        },
        S3k: {
            type: "structure",
            members: {
                MaxConcurrentRuns: {
                    type: "integer"
                }
            }
        },
        S3m: {
            type: "structure",
            members: {
                Name: {},
                ScriptLocation: {},
                PythonVersion: {}
            }
        },
        S3p: {
            type: "map",
            key: {},
            value: {}
        },
        S3q: {
            type: "structure",
            members: {
                Connections: {
                    type: "list",
                    member: {}
                }
            }
        },
        S3u: {
            type: "structure",
            members: {
                NotifyDelayAfter: {
                    type: "integer"
                }
            }
        },
        S3x: {
            type: "list",
            member: {
                shape: "S1b"
            }
        },
        S3z: {
            type: "list",
            member: {
                shape: "S40"
            }
        },
        S40: {
            type: "structure",
            members: {
                Values: {
                    shape: "S6"
                },
                DatabaseName: {},
                TableName: {},
                CreationTime: {
                    type: "timestamp"
                },
                LastAccessTime: {
                    type: "timestamp"
                },
                StorageDescriptor: {
                    shape: "S9"
                },
                Parameters: {
                    shape: "Se"
                },
                LastAnalyzedTime: {
                    type: "timestamp"
                },
                CatalogId: {}
            }
        },
        S42: {
            type: "list",
            member: {}
        },
        S44: {
            type: "list",
            member: {
                shape: "S45"
            }
        },
        S45: {
            type: "structure",
            members: {
                Name: {},
                WorkflowName: {},
                Id: {},
                Type: {},
                State: {},
                Description: {},
                Schedule: {},
                Actions: {
                    shape: "S49"
                },
                Predicate: {
                    shape: "S4b"
                }
            }
        },
        S49: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    JobName: {},
                    Arguments: {
                        shape: "S3p"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    SecurityConfiguration: {},
                    NotificationProperty: {
                        shape: "S3u"
                    },
                    CrawlerName: {}
                }
            }
        },
        S4b: {
            type: "structure",
            members: {
                Logical: {},
                Conditions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            LogicalOperator: {},
                            JobName: {},
                            State: {},
                            CrawlerName: {},
                            CrawlState: {}
                        }
                    }
                }
            }
        },
        S4j: {
            type: "list",
            member: {}
        },
        S4m: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                DefaultRunProperties: {
                    shape: "S4n"
                },
                CreatedOn: {
                    type: "timestamp"
                },
                LastModifiedOn: {
                    type: "timestamp"
                },
                LastRun: {
                    shape: "S4o"
                },
                Graph: {
                    shape: "S4s"
                },
                MaxConcurrentRuns: {
                    type: "integer"
                }
            }
        },
        S4n: {
            type: "map",
            key: {},
            value: {}
        },
        S4o: {
            type: "structure",
            members: {
                Name: {},
                WorkflowRunId: {},
                PreviousRunId: {},
                WorkflowRunProperties: {
                    shape: "S4n"
                },
                StartedOn: {
                    type: "timestamp"
                },
                CompletedOn: {
                    type: "timestamp"
                },
                Status: {},
                ErrorMessage: {},
                Statistics: {
                    type: "structure",
                    members: {
                        TotalActions: {
                            type: "integer"
                        },
                        TimeoutActions: {
                            type: "integer"
                        },
                        FailedActions: {
                            type: "integer"
                        },
                        StoppedActions: {
                            type: "integer"
                        },
                        SucceededActions: {
                            type: "integer"
                        },
                        RunningActions: {
                            type: "integer"
                        }
                    }
                },
                Graph: {
                    shape: "S4s"
                }
            }
        },
        S4s: {
            type: "structure",
            members: {
                Nodes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Type: {},
                            Name: {},
                            UniqueId: {},
                            TriggerDetails: {
                                type: "structure",
                                members: {
                                    Trigger: {
                                        shape: "S45"
                                    }
                                }
                            },
                            JobDetails: {
                                type: "structure",
                                members: {
                                    JobRuns: {
                                        shape: "S4y"
                                    }
                                }
                            },
                            CrawlerDetails: {
                                type: "structure",
                                members: {
                                    Crawls: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                State: {},
                                                StartedOn: {
                                                    type: "timestamp"
                                                },
                                                CompletedOn: {
                                                    type: "timestamp"
                                                },
                                                ErrorMessage: {},
                                                LogGroup: {},
                                                LogStream: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                Edges: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            SourceId: {},
                            DestinationId: {}
                        }
                    }
                }
            }
        },
        S4y: {
            type: "list",
            member: {
                shape: "S4z"
            }
        },
        S4z: {
            type: "structure",
            members: {
                Id: {},
                Attempt: {
                    type: "integer"
                },
                PreviousRunId: {},
                TriggerName: {},
                JobName: {},
                StartedOn: {
                    type: "timestamp"
                },
                LastModifiedOn: {
                    type: "timestamp"
                },
                CompletedOn: {
                    type: "timestamp"
                },
                JobRunState: {},
                Arguments: {
                    shape: "S3p"
                },
                ErrorMessage: {},
                PredecessorRuns: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            JobName: {},
                            RunId: {}
                        }
                    }
                },
                AllocatedCapacity: {
                    deprecated: true,
                    deprecatedMessage: "This property is deprecated, use MaxCapacity instead.",
                    type: "integer"
                },
                ExecutionTime: {
                    type: "integer"
                },
                Timeout: {
                    type: "integer"
                },
                MaxCapacity: {
                    type: "double"
                },
                WorkerType: {},
                NumberOfWorkers: {
                    type: "integer"
                },
                SecurityConfiguration: {},
                LogGroupName: {},
                NotificationProperty: {
                    shape: "S3u"
                },
                GlueVersion: {}
            }
        },
        S5j: {
            type: "list",
            member: {}
        },
        S6a: {
            type: "list",
            member: {}
        },
        S6d: {
            type: "structure",
            required: [ "Name", "ConnectionType", "ConnectionProperties" ],
            members: {
                Name: {},
                Description: {},
                ConnectionType: {},
                MatchCriteria: {
                    shape: "S6f"
                },
                ConnectionProperties: {
                    shape: "S6g"
                },
                PhysicalConnectionRequirements: {
                    shape: "S6i"
                }
            }
        },
        S6f: {
            type: "list",
            member: {}
        },
        S6g: {
            type: "map",
            key: {},
            value: {}
        },
        S6i: {
            type: "structure",
            members: {
                SubnetId: {},
                SecurityGroupIdList: {
                    type: "list",
                    member: {}
                },
                AvailabilityZone: {}
            }
        },
        S6m: {
            type: "map",
            key: {},
            value: {}
        },
        S6r: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Description: {},
                LocationUri: {},
                Parameters: {
                    shape: "Se"
                },
                CreateTableDefaultPermissions: {
                    shape: "S6t"
                },
                TargetDatabase: {
                    shape: "S6z"
                }
            }
        },
        S6t: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Principal: {
                        type: "structure",
                        members: {
                            DataLakePrincipalIdentifier: {}
                        }
                    },
                    Permissions: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S6z: {
            type: "structure",
            members: {
                CatalogId: {},
                DatabaseName: {}
            }
        },
        S76: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    DatabaseName: {},
                    TableName: {},
                    CatalogId: {},
                    ConnectionName: {}
                }
            }
        },
        S78: {
            type: "structure",
            required: [ "TransformType" ],
            members: {
                TransformType: {},
                FindMatchesParameters: {
                    type: "structure",
                    members: {
                        PrimaryKeyColumnName: {},
                        PrecisionRecallTradeoff: {
                            type: "double"
                        },
                        AccuracyCostTradeoff: {
                            type: "double"
                        },
                        EnforceProvidedLabels: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S7d: {
            type: "structure",
            members: {
                MlUserDataEncryption: {
                    type: "structure",
                    required: [ "MlUserDataEncryptionMode" ],
                    members: {
                        MlUserDataEncryptionMode: {},
                        KmsKeyId: {}
                    }
                },
                TaskRunSecurityConfigurationName: {}
            }
        },
        S7k: {
            type: "structure",
            required: [ "Keys", "IndexName" ],
            members: {
                Keys: {
                    type: "list",
                    member: {}
                },
                IndexName: {}
            }
        },
        S7q: {
            type: "structure",
            members: {
                RegistryName: {},
                RegistryArn: {}
            }
        },
        S7x: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Id", "NodeType", "Args" ],
                members: {
                    Id: {},
                    NodeType: {},
                    Args: {
                        shape: "S81"
                    },
                    LineNumber: {
                        type: "integer"
                    }
                }
            }
        },
        S81: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {},
                    Param: {
                        type: "boolean"
                    }
                }
            }
        },
        S85: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Source", "Target" ],
                members: {
                    Source: {},
                    Target: {},
                    TargetParameter: {}
                }
            }
        },
        S8c: {
            type: "structure",
            members: {
                S3Encryption: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            S3EncryptionMode: {},
                            KmsKeyArn: {}
                        }
                    }
                },
                CloudWatchEncryption: {
                    type: "structure",
                    members: {
                        CloudWatchEncryptionMode: {},
                        KmsKeyArn: {}
                    }
                },
                JobBookmarksEncryption: {
                    type: "structure",
                    members: {
                        JobBookmarksEncryptionMode: {},
                        KmsKeyArn: {}
                    }
                }
            }
        },
        S8n: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Description: {},
                Owner: {},
                LastAccessTime: {
                    type: "timestamp"
                },
                LastAnalyzedTime: {
                    type: "timestamp"
                },
                Retention: {
                    type: "integer"
                },
                StorageDescriptor: {
                    shape: "S9"
                },
                PartitionKeys: {
                    shape: "Sa"
                },
                ViewOriginalText: {},
                ViewExpandedText: {},
                TableType: {},
                Parameters: {
                    shape: "Se"
                },
                TargetTable: {
                    shape: "S8r"
                }
            }
        },
        S8r: {
            type: "structure",
            members: {
                CatalogId: {},
                DatabaseName: {},
                Name: {}
            }
        },
        S8y: {
            type: "structure",
            members: {
                FunctionName: {},
                ClassName: {},
                OwnerName: {},
                OwnerType: {},
                ResourceUris: {
                    shape: "S90"
                }
            }
        },
        S90: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceType: {},
                    Uri: {}
                }
            }
        },
        Sao: {
            type: "structure",
            members: {
                GrokClassifier: {
                    type: "structure",
                    required: [ "Name", "Classification", "GrokPattern" ],
                    members: {
                        Name: {},
                        Classification: {},
                        CreationTime: {
                            type: "timestamp"
                        },
                        LastUpdated: {
                            type: "timestamp"
                        },
                        Version: {
                            type: "long"
                        },
                        GrokPattern: {},
                        CustomPatterns: {}
                    }
                },
                XMLClassifier: {
                    type: "structure",
                    required: [ "Name", "Classification" ],
                    members: {
                        Name: {},
                        Classification: {},
                        CreationTime: {
                            type: "timestamp"
                        },
                        LastUpdated: {
                            type: "timestamp"
                        },
                        Version: {
                            type: "long"
                        },
                        RowTag: {}
                    }
                },
                JsonClassifier: {
                    type: "structure",
                    required: [ "Name", "JsonPath" ],
                    members: {
                        Name: {},
                        CreationTime: {
                            type: "timestamp"
                        },
                        LastUpdated: {
                            type: "timestamp"
                        },
                        Version: {
                            type: "long"
                        },
                        JsonPath: {}
                    }
                },
                CsvClassifier: {
                    type: "structure",
                    required: [ "Name" ],
                    members: {
                        Name: {},
                        CreationTime: {
                            type: "timestamp"
                        },
                        LastUpdated: {
                            type: "timestamp"
                        },
                        Version: {
                            type: "long"
                        },
                        Delimiter: {},
                        QuoteSymbol: {},
                        ContainsHeader: {},
                        Header: {
                            shape: "S6a"
                        },
                        DisableValueTrimming: {
                            type: "boolean"
                        },
                        AllowSingleColumn: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        Saz: {
            type: "list",
            member: {}
        },
        Sb1: {
            type: "list",
            member: {
                shape: "Sb2"
            }
        },
        Sb2: {
            type: "structure",
            required: [ "ColumnName", "ColumnType", "AnalyzedTime", "StatisticsData" ],
            members: {
                ColumnName: {},
                ColumnType: {},
                AnalyzedTime: {
                    type: "timestamp"
                },
                StatisticsData: {
                    type: "structure",
                    required: [ "Type" ],
                    members: {
                        Type: {},
                        BooleanColumnStatisticsData: {
                            type: "structure",
                            required: [ "NumberOfTrues", "NumberOfFalses", "NumberOfNulls" ],
                            members: {
                                NumberOfTrues: {
                                    type: "long"
                                },
                                NumberOfFalses: {
                                    type: "long"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                }
                            }
                        },
                        DateColumnStatisticsData: {
                            type: "structure",
                            required: [ "NumberOfNulls", "NumberOfDistinctValues" ],
                            members: {
                                MinimumValue: {
                                    type: "timestamp"
                                },
                                MaximumValue: {
                                    type: "timestamp"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                },
                                NumberOfDistinctValues: {
                                    type: "long"
                                }
                            }
                        },
                        DecimalColumnStatisticsData: {
                            type: "structure",
                            required: [ "NumberOfNulls", "NumberOfDistinctValues" ],
                            members: {
                                MinimumValue: {
                                    shape: "Sba"
                                },
                                MaximumValue: {
                                    shape: "Sba"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                },
                                NumberOfDistinctValues: {
                                    type: "long"
                                }
                            }
                        },
                        DoubleColumnStatisticsData: {
                            type: "structure",
                            required: [ "NumberOfNulls", "NumberOfDistinctValues" ],
                            members: {
                                MinimumValue: {
                                    type: "double"
                                },
                                MaximumValue: {
                                    type: "double"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                },
                                NumberOfDistinctValues: {
                                    type: "long"
                                }
                            }
                        },
                        LongColumnStatisticsData: {
                            type: "structure",
                            required: [ "NumberOfNulls", "NumberOfDistinctValues" ],
                            members: {
                                MinimumValue: {
                                    type: "long"
                                },
                                MaximumValue: {
                                    type: "long"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                },
                                NumberOfDistinctValues: {
                                    type: "long"
                                }
                            }
                        },
                        StringColumnStatisticsData: {
                            type: "structure",
                            required: [ "MaximumLength", "AverageLength", "NumberOfNulls", "NumberOfDistinctValues" ],
                            members: {
                                MaximumLength: {
                                    type: "long"
                                },
                                AverageLength: {
                                    type: "double"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                },
                                NumberOfDistinctValues: {
                                    type: "long"
                                }
                            }
                        },
                        BinaryColumnStatisticsData: {
                            type: "structure",
                            required: [ "MaximumLength", "AverageLength", "NumberOfNulls" ],
                            members: {
                                MaximumLength: {
                                    type: "long"
                                },
                                AverageLength: {
                                    type: "double"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        Sba: {
            type: "structure",
            required: [ "UnscaledValue", "Scale" ],
            members: {
                UnscaledValue: {
                    type: "blob"
                },
                Scale: {
                    type: "integer"
                }
            }
        },
        Sbj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ColumnName: {},
                    Error: {
                        shape: "S13"
                    }
                }
            }
        },
        Sbp: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                ConnectionType: {},
                MatchCriteria: {
                    shape: "S6f"
                },
                ConnectionProperties: {
                    shape: "S6g"
                },
                PhysicalConnectionRequirements: {
                    shape: "S6i"
                },
                CreationTime: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                },
                LastUpdatedBy: {}
            }
        },
        Sc4: {
            type: "structure",
            members: {
                EncryptionAtRest: {
                    type: "structure",
                    required: [ "CatalogEncryptionMode" ],
                    members: {
                        CatalogEncryptionMode: {},
                        SseAwsKmsKeyId: {}
                    }
                },
                ConnectionPasswordEncryption: {
                    type: "structure",
                    required: [ "ReturnConnectionPasswordEncrypted" ],
                    members: {
                        ReturnConnectionPasswordEncrypted: {
                            type: "boolean"
                        },
                        AwsKmsKeyId: {}
                    }
                }
            }
        },
        Sca: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Description: {},
                LocationUri: {},
                Parameters: {
                    shape: "Se"
                },
                CreateTime: {
                    type: "timestamp"
                },
                CreateTableDefaultPermissions: {
                    shape: "S6t"
                },
                TargetDatabase: {
                    shape: "S6z"
                },
                CatalogId: {}
            }
        },
        Scs: {
            type: "structure",
            members: {
                JobName: {},
                Version: {
                    type: "integer"
                },
                Run: {
                    type: "integer"
                },
                Attempt: {
                    type: "integer"
                },
                PreviousRunId: {},
                RunId: {},
                JobBookmark: {}
            }
        },
        Sd2: {
            type: "structure",
            members: {
                TaskType: {},
                ImportLabelsTaskRunProperties: {
                    type: "structure",
                    members: {
                        InputS3Path: {},
                        Replace: {
                            type: "boolean"
                        }
                    }
                },
                ExportLabelsTaskRunProperties: {
                    type: "structure",
                    members: {
                        OutputS3Path: {}
                    }
                },
                LabelingSetGenerationTaskRunProperties: {
                    type: "structure",
                    members: {
                        OutputS3Path: {}
                    }
                },
                FindMatchesTaskRunProperties: {
                    type: "structure",
                    members: {
                        JobId: {},
                        JobName: {},
                        JobRunId: {}
                    }
                }
            }
        },
        Sdl: {
            type: "structure",
            required: [ "TransformType" ],
            members: {
                TransformType: {},
                FindMatchesMetrics: {
                    type: "structure",
                    members: {
                        AreaUnderPRCurve: {
                            type: "double"
                        },
                        Precision: {
                            type: "double"
                        },
                        Recall: {
                            type: "double"
                        },
                        F1: {
                            type: "double"
                        },
                        ConfusionMatrix: {
                            type: "structure",
                            members: {
                                NumTruePositives: {
                                    type: "long"
                                },
                                NumFalsePositives: {
                                    type: "long"
                                },
                                NumTrueNegatives: {
                                    type: "long"
                                },
                                NumFalseNegatives: {
                                    type: "long"
                                }
                            }
                        },
                        ColumnImportances: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    ColumnName: {},
                                    Importance: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sds: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    DataType: {}
                }
            }
        },
        Sdv: {
            type: "structure",
            members: {
                Name: {},
                TransformType: {},
                Status: {},
                GlueVersion: {},
                CreatedBefore: {
                    type: "timestamp"
                },
                CreatedAfter: {
                    type: "timestamp"
                },
                LastModifiedBefore: {
                    type: "timestamp"
                },
                LastModifiedAfter: {
                    type: "timestamp"
                },
                Schema: {
                    shape: "Sds"
                }
            }
        },
        Sdw: {
            type: "structure",
            required: [ "Column", "SortDirection" ],
            members: {
                Column: {},
                SortDirection: {}
            }
        },
        Se2: {
            type: "structure",
            required: [ "DatabaseName", "TableName" ],
            members: {
                DatabaseName: {},
                TableName: {}
            }
        },
        Se3: {
            type: "list",
            member: {
                shape: "Se2"
            }
        },
        Se4: {
            type: "structure",
            members: {
                Jdbc: {
                    shape: "S81"
                },
                S3: {
                    shape: "S81"
                },
                DynamoDB: {
                    shape: "S81"
                }
            }
        },
        Se6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SourceTable: {},
                    SourcePath: {},
                    SourceType: {},
                    TargetTable: {},
                    TargetPath: {},
                    TargetType: {}
                }
            }
        },
        Sfd: {
            type: "structure",
            members: {
                LatestVersion: {
                    type: "boolean"
                },
                VersionNumber: {
                    type: "long"
                }
            }
        },
        Sfm: {
            type: "structure",
            members: {
                Name: {},
                CreatedTimeStamp: {
                    type: "timestamp"
                },
                EncryptionConfiguration: {
                    shape: "S8c"
                }
            }
        },
        Sfs: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                DatabaseName: {},
                Description: {},
                Owner: {},
                CreateTime: {
                    type: "timestamp"
                },
                UpdateTime: {
                    type: "timestamp"
                },
                LastAccessTime: {
                    type: "timestamp"
                },
                LastAnalyzedTime: {
                    type: "timestamp"
                },
                Retention: {
                    type: "integer"
                },
                StorageDescriptor: {
                    shape: "S9"
                },
                PartitionKeys: {
                    shape: "Sa"
                },
                ViewOriginalText: {},
                ViewExpandedText: {},
                TableType: {},
                Parameters: {
                    shape: "Se"
                },
                CreatedBy: {},
                IsRegisteredWithLakeFormation: {
                    type: "boolean"
                },
                TargetTable: {
                    shape: "S8r"
                },
                CatalogId: {}
            }
        },
        Sfv: {
            type: "structure",
            members: {
                Table: {
                    shape: "Sfs"
                },
                VersionId: {}
            }
        },
        Sg2: {
            type: "list",
            member: {
                shape: "Sfs"
            }
        },
        Sgb: {
            type: "structure",
            members: {
                FunctionName: {},
                DatabaseName: {},
                ClassName: {},
                OwnerName: {},
                OwnerType: {},
                CreateTime: {
                    type: "timestamp"
                },
                ResourceUris: {
                    shape: "S90"
                },
                CatalogId: {}
            }
        },
        Shp: {
            type: "structure",
            members: {
                MetadataKey: {},
                MetadataValue: {}
            }
        },
        Sia: {
            type: "list",
            member: {}
        },
        Sjm: {
            type: "list",
            member: {
                shape: "Sb2"
            }
        },
        Sjo: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ColumnStatistics: {
                        shape: "Sb2"
                    },
                    Error: {
                        shape: "S13"
                    }
                }
            }
        }
    },
    paginators: {
        GetClassifiers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetConnections: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetCrawlerMetrics: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetCrawlers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetDatabases: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetDevEndpoints: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetJobRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetMLTaskRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetMLTransforms: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetPartitionIndexes: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "PartitionIndexDescriptorList"
        },
        GetPartitions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetResourcePolicies: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "GetResourcePoliciesResponseList"
        },
        GetSecurityConfigurations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SecurityConfigurations"
        },
        GetTableVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetTables: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetTriggers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetUserDefinedFunctions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetWorkflowRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListCrawlers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListDevEndpoints: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListMLTransforms: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListRegistries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Registries"
        },
        ListSchemaVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Schemas"
        },
        ListSchemas: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Schemas"
        },
        ListTriggers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListWorkflows: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        SearchTables: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        }
    }
};

AWS.apiLoader.services["mobile"] = {};

AWS.Mobile = AWS.Service.defineService("mobile", [ "2017-07-01" ]);

AWS.apiLoader.services["mobile"]["2017-07-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-01",
        endpointPrefix: "mobile",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Mobile",
        serviceId: "Mobile",
        signatureVersion: "v4",
        signingName: "AWSMobileHubService",
        uid: "mobile-2017-07-01"
    },
    operations: {
        CreateProject: {
            http: {
                requestUri: "/projects"
            },
            input: {
                type: "structure",
                members: {
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    region: {
                        location: "querystring",
                        locationName: "region"
                    },
                    contents: {
                        type: "blob"
                    },
                    snapshotId: {
                        location: "querystring",
                        locationName: "snapshotId"
                    }
                },
                payload: "contents"
            },
            output: {
                type: "structure",
                members: {
                    details: {
                        shape: "S7"
                    }
                }
            }
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{projectId}"
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deletedResources: {
                        shape: "Sc"
                    },
                    orphanedResources: {
                        shape: "Sc"
                    }
                }
            }
        },
        DescribeBundle: {
            http: {
                method: "GET",
                requestUri: "/bundles/{bundleId}"
            },
            input: {
                type: "structure",
                required: [ "bundleId" ],
                members: {
                    bundleId: {
                        location: "uri",
                        locationName: "bundleId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    details: {
                        shape: "Sq"
                    }
                }
            }
        },
        DescribeProject: {
            http: {
                method: "GET",
                requestUri: "/project"
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "querystring",
                        locationName: "projectId"
                    },
                    syncFromResources: {
                        location: "querystring",
                        locationName: "syncFromResources",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    details: {
                        shape: "S7"
                    }
                }
            }
        },
        ExportBundle: {
            http: {
                requestUri: "/bundles/{bundleId}"
            },
            input: {
                type: "structure",
                required: [ "bundleId" ],
                members: {
                    bundleId: {
                        location: "uri",
                        locationName: "bundleId"
                    },
                    projectId: {
                        location: "querystring",
                        locationName: "projectId"
                    },
                    platform: {
                        location: "querystring",
                        locationName: "platform"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    downloadUrl: {}
                }
            }
        },
        ExportProject: {
            http: {
                requestUri: "/exports/{projectId}"
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    downloadUrl: {},
                    shareUrl: {},
                    snapshotId: {}
                }
            }
        },
        ListBundles: {
            http: {
                method: "GET",
                requestUri: "/bundles"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    bundleList: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListProjects: {
            http: {
                method: "GET",
                requestUri: "/projects"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    projects: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                projectId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        UpdateProject: {
            http: {
                requestUri: "/update"
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    contents: {
                        type: "blob"
                    },
                    projectId: {
                        location: "querystring",
                        locationName: "projectId"
                    }
                },
                payload: "contents"
            },
            output: {
                type: "structure",
                members: {
                    details: {
                        shape: "S7"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            members: {
                name: {},
                projectId: {},
                region: {},
                state: {},
                createdDate: {
                    type: "timestamp"
                },
                lastUpdatedDate: {
                    type: "timestamp"
                },
                consoleUrl: {},
                resources: {
                    shape: "Sc"
                }
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    type: {},
                    name: {},
                    arn: {},
                    feature: {},
                    attributes: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                bundleId: {},
                title: {},
                version: {},
                description: {},
                iconUrl: {},
                availablePlatforms: {
                    type: "list",
                    member: {}
                }
            }
        }
    },
    paginators: {
        ListBundles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListProjects: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["pricing"] = {};

AWS.Pricing = AWS.Service.defineService("pricing", [ "2017-10-15" ]);

AWS.apiLoader.services["pricing"]["2017-10-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-10-15",
        endpointPrefix: "api.pricing",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "AWS Pricing",
        serviceFullName: "AWS Price List Service",
        serviceId: "Pricing",
        signatureVersion: "v4",
        signingName: "pricing",
        targetPrefix: "AWSPriceListService",
        uid: "pricing-2017-10-15"
    },
    operations: {
        DescribeServices: {
            input: {
                type: "structure",
                members: {
                    ServiceCode: {},
                    FormatVersion: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Services: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ServiceCode: {},
                                AttributeNames: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    FormatVersion: {},
                    NextToken: {}
                }
            }
        },
        GetAttributeValues: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "AttributeName" ],
                members: {
                    ServiceCode: {},
                    AttributeName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AttributeValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Value: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetProducts: {
            input: {
                type: "structure",
                members: {
                    ServiceCode: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Type", "Field", "Value" ],
                            members: {
                                Type: {},
                                Field: {},
                                Value: {}
                            }
                        }
                    },
                    FormatVersion: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FormatVersion: {},
                    PriceList: {
                        type: "list",
                        member: {
                            jsonvalue: true
                        }
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {
        DescribeServices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetAttributeValues: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetProducts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["costexplorer"] = {};

AWS.CostExplorer = AWS.Service.defineService("costexplorer", [ "2017-10-25" ]);

AWS.apiLoader.services["costexplorer"]["2017-10-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-10-25",
        endpointPrefix: "ce",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "AWS Cost Explorer",
        serviceFullName: "AWS Cost Explorer Service",
        serviceId: "Cost Explorer",
        signatureVersion: "v4",
        signingName: "ce",
        targetPrefix: "AWSInsightsIndexService",
        uid: "ce-2017-10-25"
    },
    operations: {
        CreateAnomalyMonitor: {
            input: {
                type: "structure",
                required: [ "AnomalyMonitor" ],
                members: {
                    AnomalyMonitor: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MonitorArn" ],
                members: {
                    MonitorArn: {}
                }
            }
        },
        CreateAnomalySubscription: {
            input: {
                type: "structure",
                required: [ "AnomalySubscription" ],
                members: {
                    AnomalySubscription: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SubscriptionArn" ],
                members: {
                    SubscriptionArn: {}
                }
            }
        },
        CreateCostCategoryDefinition: {
            input: {
                type: "structure",
                required: [ "Name", "RuleVersion", "Rules" ],
                members: {
                    Name: {},
                    RuleVersion: {},
                    Rules: {
                        shape: "Sz"
                    },
                    DefaultValue: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CostCategoryArn: {},
                    EffectiveStart: {}
                }
            }
        },
        DeleteAnomalyMonitor: {
            input: {
                type: "structure",
                required: [ "MonitorArn" ],
                members: {
                    MonitorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAnomalySubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionArn" ],
                members: {
                    SubscriptionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCostCategoryDefinition: {
            input: {
                type: "structure",
                required: [ "CostCategoryArn" ],
                members: {
                    CostCategoryArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CostCategoryArn: {},
                    EffectiveEnd: {}
                }
            }
        },
        DescribeCostCategoryDefinition: {
            input: {
                type: "structure",
                required: [ "CostCategoryArn" ],
                members: {
                    CostCategoryArn: {},
                    EffectiveOn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CostCategory: {
                        type: "structure",
                        required: [ "CostCategoryArn", "EffectiveStart", "Name", "RuleVersion", "Rules" ],
                        members: {
                            CostCategoryArn: {},
                            EffectiveStart: {},
                            EffectiveEnd: {},
                            Name: {},
                            RuleVersion: {},
                            Rules: {
                                shape: "Sz"
                            },
                            ProcessingStatus: {
                                shape: "S1g"
                            },
                            DefaultValue: {}
                        }
                    }
                }
            }
        },
        GetAnomalies: {
            input: {
                type: "structure",
                required: [ "DateInterval" ],
                members: {
                    MonitorArn: {},
                    DateInterval: {
                        type: "structure",
                        required: [ "StartDate" ],
                        members: {
                            StartDate: {},
                            EndDate: {}
                        }
                    },
                    Feedback: {},
                    TotalImpact: {
                        type: "structure",
                        required: [ "NumericOperator", "StartValue" ],
                        members: {
                            NumericOperator: {},
                            StartValue: {
                                type: "double"
                            },
                            EndValue: {
                                type: "double"
                            }
                        }
                    },
                    NextPageToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Anomalies" ],
                members: {
                    Anomalies: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AnomalyId", "AnomalyScore", "Impact", "MonitorArn" ],
                            members: {
                                AnomalyId: {},
                                AnomalyStartDate: {},
                                AnomalyEndDate: {},
                                DimensionValue: {},
                                RootCauses: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Service: {},
                                            Region: {},
                                            LinkedAccount: {},
                                            UsageType: {}
                                        }
                                    }
                                },
                                AnomalyScore: {
                                    type: "structure",
                                    required: [ "MaxScore", "CurrentScore" ],
                                    members: {
                                        MaxScore: {
                                            type: "double"
                                        },
                                        CurrentScore: {
                                            type: "double"
                                        }
                                    }
                                },
                                Impact: {
                                    type: "structure",
                                    required: [ "MaxImpact" ],
                                    members: {
                                        MaxImpact: {
                                            type: "double"
                                        },
                                        TotalImpact: {
                                            type: "double"
                                        }
                                    }
                                },
                                MonitorArn: {},
                                Feedback: {}
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        GetAnomalyMonitors: {
            input: {
                type: "structure",
                members: {
                    MonitorArnList: {
                        shape: "Sb"
                    },
                    NextPageToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AnomalyMonitors" ],
                members: {
                    AnomalyMonitors: {
                        type: "list",
                        member: {
                            shape: "S2"
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        GetAnomalySubscriptions: {
            input: {
                type: "structure",
                members: {
                    SubscriptionArnList: {
                        shape: "Sb"
                    },
                    MonitorArn: {},
                    NextPageToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AnomalySubscriptions" ],
                members: {
                    AnomalySubscriptions: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        GetCostAndUsage: {
            input: {
                type: "structure",
                required: [ "TimePeriod", "Granularity", "Metrics" ],
                members: {
                    TimePeriod: {
                        shape: "S26"
                    },
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    Metrics: {
                        shape: "S28"
                    },
                    GroupBy: {
                        shape: "S2a"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextPageToken: {},
                    GroupDefinitions: {
                        shape: "S2a"
                    },
                    ResultsByTime: {
                        shape: "S2f"
                    },
                    DimensionValueAttributes: {
                        shape: "S2q"
                    }
                }
            }
        },
        GetCostAndUsageWithResources: {
            input: {
                type: "structure",
                required: [ "TimePeriod", "Granularity", "Filter" ],
                members: {
                    TimePeriod: {
                        shape: "S26"
                    },
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    Metrics: {
                        shape: "S28"
                    },
                    GroupBy: {
                        shape: "S2a"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextPageToken: {},
                    GroupDefinitions: {
                        shape: "S2a"
                    },
                    ResultsByTime: {
                        shape: "S2f"
                    },
                    DimensionValueAttributes: {
                        shape: "S2q"
                    }
                }
            }
        },
        GetCostCategories: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    SearchString: {},
                    TimePeriod: {
                        shape: "S26"
                    },
                    CostCategoryName: {},
                    Filter: {
                        shape: "S7"
                    },
                    SortBy: {
                        shape: "S2z"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ReturnSize", "TotalSize" ],
                members: {
                    NextPageToken: {},
                    CostCategoryNames: {
                        type: "list",
                        member: {}
                    },
                    CostCategoryValues: {
                        shape: "S36"
                    },
                    ReturnSize: {
                        type: "integer"
                    },
                    TotalSize: {
                        type: "integer"
                    }
                }
            }
        },
        GetCostForecast: {
            input: {
                type: "structure",
                required: [ "TimePeriod", "Metric", "Granularity" ],
                members: {
                    TimePeriod: {
                        shape: "S26"
                    },
                    Metric: {},
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    PredictionIntervalLevel: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Total: {
                        shape: "S2i"
                    },
                    ForecastResultsByTime: {
                        shape: "S3b"
                    }
                }
            }
        },
        GetDimensionValues: {
            input: {
                type: "structure",
                required: [ "TimePeriod", "Dimension" ],
                members: {
                    SearchString: {},
                    TimePeriod: {
                        shape: "S26"
                    },
                    Dimension: {},
                    Context: {},
                    Filter: {
                        shape: "S7"
                    },
                    SortBy: {
                        shape: "S2z"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DimensionValues", "ReturnSize", "TotalSize" ],
                members: {
                    DimensionValues: {
                        shape: "S2q"
                    },
                    ReturnSize: {
                        type: "integer"
                    },
                    TotalSize: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            }
        },
        GetReservationCoverage: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    TimePeriod: {
                        shape: "S26"
                    },
                    GroupBy: {
                        shape: "S2a"
                    },
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    Metrics: {
                        shape: "S28"
                    },
                    NextPageToken: {},
                    SortBy: {
                        shape: "S30"
                    },
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CoveragesByTime" ],
                members: {
                    CoveragesByTime: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TimePeriod: {
                                    shape: "S26"
                                },
                                Groups: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Attributes: {
                                                shape: "S2s"
                                            },
                                            Coverage: {
                                                shape: "S3m"
                                            }
                                        }
                                    }
                                },
                                Total: {
                                    shape: "S3m"
                                }
                            }
                        }
                    },
                    Total: {
                        shape: "S3m"
                    },
                    NextPageToken: {}
                }
            }
        },
        GetReservationPurchaseRecommendation: {
            input: {
                type: "structure",
                required: [ "Service" ],
                members: {
                    AccountId: {},
                    Service: {},
                    Filter: {
                        shape: "S7"
                    },
                    AccountScope: {},
                    LookbackPeriodInDays: {},
                    TermInYears: {},
                    PaymentOption: {},
                    ServiceSpecification: {
                        shape: "S44"
                    },
                    PageSize: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        type: "structure",
                        members: {
                            RecommendationId: {},
                            GenerationTimestamp: {}
                        }
                    },
                    Recommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountScope: {},
                                LookbackPeriodInDays: {},
                                TermInYears: {},
                                PaymentOption: {},
                                ServiceSpecification: {
                                    shape: "S44"
                                },
                                RecommendationDetails: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            AccountId: {},
                                            InstanceDetails: {
                                                type: "structure",
                                                members: {
                                                    EC2InstanceDetails: {
                                                        type: "structure",
                                                        members: {
                                                            Family: {},
                                                            InstanceType: {},
                                                            Region: {},
                                                            AvailabilityZone: {},
                                                            Platform: {},
                                                            Tenancy: {},
                                                            CurrentGeneration: {
                                                                type: "boolean"
                                                            },
                                                            SizeFlexEligible: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    RDSInstanceDetails: {
                                                        type: "structure",
                                                        members: {
                                                            Family: {},
                                                            InstanceType: {},
                                                            Region: {},
                                                            DatabaseEngine: {},
                                                            DatabaseEdition: {},
                                                            DeploymentOption: {},
                                                            LicenseModel: {},
                                                            CurrentGeneration: {
                                                                type: "boolean"
                                                            },
                                                            SizeFlexEligible: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    RedshiftInstanceDetails: {
                                                        type: "structure",
                                                        members: {
                                                            Family: {},
                                                            NodeType: {},
                                                            Region: {},
                                                            CurrentGeneration: {
                                                                type: "boolean"
                                                            },
                                                            SizeFlexEligible: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    ElastiCacheInstanceDetails: {
                                                        type: "structure",
                                                        members: {
                                                            Family: {},
                                                            NodeType: {},
                                                            Region: {},
                                                            ProductDescription: {},
                                                            CurrentGeneration: {
                                                                type: "boolean"
                                                            },
                                                            SizeFlexEligible: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    ESInstanceDetails: {
                                                        type: "structure",
                                                        members: {
                                                            InstanceClass: {},
                                                            InstanceSize: {},
                                                            Region: {},
                                                            CurrentGeneration: {
                                                                type: "boolean"
                                                            },
                                                            SizeFlexEligible: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            RecommendedNumberOfInstancesToPurchase: {},
                                            RecommendedNormalizedUnitsToPurchase: {},
                                            MinimumNumberOfInstancesUsedPerHour: {},
                                            MinimumNormalizedUnitsUsedPerHour: {},
                                            MaximumNumberOfInstancesUsedPerHour: {},
                                            MaximumNormalizedUnitsUsedPerHour: {},
                                            AverageNumberOfInstancesUsedPerHour: {},
                                            AverageNormalizedUnitsUsedPerHour: {},
                                            AverageUtilization: {},
                                            EstimatedBreakEvenInMonths: {},
                                            CurrencyCode: {},
                                            EstimatedMonthlySavingsAmount: {},
                                            EstimatedMonthlySavingsPercentage: {},
                                            EstimatedMonthlyOnDemandCost: {},
                                            EstimatedReservationCostForLookbackPeriod: {},
                                            UpfrontCost: {},
                                            RecurringStandardMonthlyCost: {}
                                        }
                                    }
                                },
                                RecommendationSummary: {
                                    type: "structure",
                                    members: {
                                        TotalEstimatedMonthlySavingsAmount: {},
                                        TotalEstimatedMonthlySavingsPercentage: {},
                                        CurrencyCode: {}
                                    }
                                }
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        GetReservationUtilization: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    TimePeriod: {
                        shape: "S26"
                    },
                    GroupBy: {
                        shape: "S2a"
                    },
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    SortBy: {
                        shape: "S30"
                    },
                    NextPageToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UtilizationsByTime" ],
                members: {
                    UtilizationsByTime: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TimePeriod: {
                                    shape: "S26"
                                },
                                Groups: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Key: {},
                                            Value: {},
                                            Attributes: {
                                                shape: "S2s"
                                            },
                                            Utilization: {
                                                shape: "S4t"
                                            }
                                        }
                                    }
                                },
                                Total: {
                                    shape: "S4t"
                                }
                            }
                        }
                    },
                    Total: {
                        shape: "S4t"
                    },
                    NextPageToken: {}
                }
            }
        },
        GetRightsizingRecommendation: {
            input: {
                type: "structure",
                required: [ "Service" ],
                members: {
                    Filter: {
                        shape: "S7"
                    },
                    Configuration: {
                        shape: "S5c"
                    },
                    Service: {},
                    PageSize: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        type: "structure",
                        members: {
                            RecommendationId: {},
                            GenerationTimestamp: {},
                            LookbackPeriodInDays: {},
                            AdditionalMetadata: {}
                        }
                    },
                    Summary: {
                        type: "structure",
                        members: {
                            TotalRecommendationCount: {},
                            EstimatedTotalMonthlySavingsAmount: {},
                            SavingsCurrencyCode: {},
                            SavingsPercentage: {}
                        }
                    },
                    RightsizingRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                CurrentInstance: {
                                    type: "structure",
                                    members: {
                                        ResourceId: {},
                                        InstanceName: {},
                                        Tags: {
                                            type: "list",
                                            member: {
                                                shape: "Sf"
                                            }
                                        },
                                        ResourceDetails: {
                                            shape: "S5l"
                                        },
                                        ResourceUtilization: {
                                            shape: "S5n"
                                        },
                                        ReservationCoveredHoursInLookbackPeriod: {},
                                        SavingsPlansCoveredHoursInLookbackPeriod: {},
                                        OnDemandHoursInLookbackPeriod: {},
                                        TotalRunningHoursInLookbackPeriod: {},
                                        MonthlyCost: {},
                                        CurrencyCode: {}
                                    }
                                },
                                RightsizingType: {},
                                ModifyRecommendationDetail: {
                                    type: "structure",
                                    members: {
                                        TargetInstances: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    EstimatedMonthlyCost: {},
                                                    EstimatedMonthlySavings: {},
                                                    CurrencyCode: {},
                                                    DefaultTargetInstance: {
                                                        type: "boolean"
                                                    },
                                                    ResourceDetails: {
                                                        shape: "S5l"
                                                    },
                                                    ExpectedResourceUtilization: {
                                                        shape: "S5n"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                TerminateRecommendationDetail: {
                                    type: "structure",
                                    members: {
                                        EstimatedMonthlySavings: {},
                                        CurrencyCode: {}
                                    }
                                }
                            }
                        }
                    },
                    NextPageToken: {},
                    Configuration: {
                        shape: "S5c"
                    }
                }
            }
        },
        GetSavingsPlansCoverage: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    TimePeriod: {
                        shape: "S26"
                    },
                    GroupBy: {
                        shape: "S2a"
                    },
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    Metrics: {
                        shape: "S28"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortBy: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SavingsPlansCoverages" ],
                members: {
                    SavingsPlansCoverages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Attributes: {
                                    shape: "S2s"
                                },
                                Coverage: {
                                    type: "structure",
                                    members: {
                                        SpendCoveredBySavingsPlans: {},
                                        OnDemandCost: {},
                                        TotalCost: {},
                                        CoveragePercentage: {}
                                    }
                                },
                                TimePeriod: {
                                    shape: "S26"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetSavingsPlansPurchaseRecommendation: {
            input: {
                type: "structure",
                required: [ "SavingsPlansType", "TermInYears", "PaymentOption", "LookbackPeriodInDays" ],
                members: {
                    SavingsPlansType: {},
                    TermInYears: {},
                    PaymentOption: {},
                    AccountScope: {},
                    NextPageToken: {},
                    PageSize: {
                        type: "integer"
                    },
                    LookbackPeriodInDays: {},
                    Filter: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        type: "structure",
                        members: {
                            RecommendationId: {},
                            GenerationTimestamp: {},
                            AdditionalMetadata: {}
                        }
                    },
                    SavingsPlansPurchaseRecommendation: {
                        type: "structure",
                        members: {
                            AccountScope: {},
                            SavingsPlansType: {},
                            TermInYears: {},
                            PaymentOption: {},
                            LookbackPeriodInDays: {},
                            SavingsPlansPurchaseRecommendationDetails: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        SavingsPlansDetails: {
                                            type: "structure",
                                            members: {
                                                Region: {},
                                                InstanceFamily: {},
                                                OfferingId: {}
                                            }
                                        },
                                        AccountId: {},
                                        UpfrontCost: {},
                                        EstimatedROI: {},
                                        CurrencyCode: {},
                                        EstimatedSPCost: {},
                                        EstimatedOnDemandCost: {},
                                        EstimatedOnDemandCostWithCurrentCommitment: {},
                                        EstimatedSavingsAmount: {},
                                        EstimatedSavingsPercentage: {},
                                        HourlyCommitmentToPurchase: {},
                                        EstimatedAverageUtilization: {},
                                        EstimatedMonthlySavingsAmount: {},
                                        CurrentMinimumHourlyOnDemandSpend: {},
                                        CurrentMaximumHourlyOnDemandSpend: {},
                                        CurrentAverageHourlyOnDemandSpend: {}
                                    }
                                }
                            },
                            SavingsPlansPurchaseRecommendationSummary: {
                                type: "structure",
                                members: {
                                    EstimatedROI: {},
                                    CurrencyCode: {},
                                    EstimatedTotalCost: {},
                                    CurrentOnDemandSpend: {},
                                    EstimatedSavingsAmount: {},
                                    TotalRecommendationCount: {},
                                    DailyCommitmentToPurchase: {},
                                    HourlyCommitmentToPurchase: {},
                                    EstimatedSavingsPercentage: {},
                                    EstimatedMonthlySavingsAmount: {},
                                    EstimatedOnDemandCostWithCurrentCommitment: {}
                                }
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        GetSavingsPlansUtilization: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    TimePeriod: {
                        shape: "S26"
                    },
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    SortBy: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Total" ],
                members: {
                    SavingsPlansUtilizationsByTime: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TimePeriod", "Utilization" ],
                            members: {
                                TimePeriod: {
                                    shape: "S26"
                                },
                                Utilization: {
                                    shape: "S6d"
                                },
                                Savings: {
                                    shape: "S6e"
                                },
                                AmortizedCommitment: {
                                    shape: "S6f"
                                }
                            }
                        }
                    },
                    Total: {
                        shape: "S6g"
                    }
                }
            }
        },
        GetSavingsPlansUtilizationDetails: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    TimePeriod: {
                        shape: "S26"
                    },
                    Filter: {
                        shape: "S7"
                    },
                    DataType: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortBy: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SavingsPlansUtilizationDetails", "TimePeriod" ],
                members: {
                    SavingsPlansUtilizationDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SavingsPlanArn: {},
                                Attributes: {
                                    shape: "S2s"
                                },
                                Utilization: {
                                    shape: "S6d"
                                },
                                Savings: {
                                    shape: "S6e"
                                },
                                AmortizedCommitment: {
                                    shape: "S6f"
                                }
                            }
                        }
                    },
                    Total: {
                        shape: "S6g"
                    },
                    TimePeriod: {
                        shape: "S26"
                    },
                    NextToken: {}
                }
            }
        },
        GetTags: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    SearchString: {},
                    TimePeriod: {
                        shape: "S26"
                    },
                    TagKey: {},
                    Filter: {
                        shape: "S7"
                    },
                    SortBy: {
                        shape: "S2z"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Tags", "ReturnSize", "TotalSize" ],
                members: {
                    NextPageToken: {},
                    Tags: {
                        type: "list",
                        member: {}
                    },
                    ReturnSize: {
                        type: "integer"
                    },
                    TotalSize: {
                        type: "integer"
                    }
                }
            }
        },
        GetUsageForecast: {
            input: {
                type: "structure",
                required: [ "TimePeriod", "Metric", "Granularity" ],
                members: {
                    TimePeriod: {
                        shape: "S26"
                    },
                    Metric: {},
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    PredictionIntervalLevel: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Total: {
                        shape: "S2i"
                    },
                    ForecastResultsByTime: {
                        shape: "S3b"
                    }
                }
            }
        },
        ListCostCategoryDefinitions: {
            input: {
                type: "structure",
                members: {
                    EffectiveOn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CostCategoryReferences: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CostCategoryArn: {},
                                Name: {},
                                EffectiveStart: {},
                                EffectiveEnd: {},
                                NumberOfRules: {
                                    type: "integer"
                                },
                                ProcessingStatus: {
                                    shape: "S1g"
                                },
                                Values: {
                                    shape: "S36"
                                },
                                DefaultValue: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ProvideAnomalyFeedback: {
            input: {
                type: "structure",
                required: [ "AnomalyId", "Feedback" ],
                members: {
                    AnomalyId: {},
                    Feedback: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AnomalyId" ],
                members: {
                    AnomalyId: {}
                }
            }
        },
        UpdateAnomalyMonitor: {
            input: {
                type: "structure",
                required: [ "MonitorArn" ],
                members: {
                    MonitorArn: {},
                    MonitorName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "MonitorArn" ],
                members: {
                    MonitorArn: {}
                }
            }
        },
        UpdateAnomalySubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionArn" ],
                members: {
                    SubscriptionArn: {},
                    Threshold: {
                        type: "double"
                    },
                    Frequency: {},
                    MonitorArnList: {
                        shape: "Sn"
                    },
                    Subscribers: {
                        shape: "Sp"
                    },
                    SubscriptionName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SubscriptionArn" ],
                members: {
                    SubscriptionArn: {}
                }
            }
        },
        UpdateCostCategoryDefinition: {
            input: {
                type: "structure",
                required: [ "CostCategoryArn", "RuleVersion", "Rules" ],
                members: {
                    CostCategoryArn: {},
                    RuleVersion: {},
                    Rules: {
                        shape: "Sz"
                    },
                    DefaultValue: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CostCategoryArn: {},
                    EffectiveStart: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            required: [ "MonitorName", "MonitorType" ],
            members: {
                MonitorArn: {},
                MonitorName: {},
                CreationDate: {},
                LastUpdatedDate: {},
                LastEvaluatedDate: {},
                MonitorType: {},
                MonitorDimension: {},
                MonitorSpecification: {
                    shape: "S7"
                },
                DimensionalValueCount: {
                    type: "integer"
                }
            }
        },
        S7: {
            type: "structure",
            members: {
                Or: {
                    shape: "S8"
                },
                And: {
                    shape: "S8"
                },
                Not: {
                    shape: "S7"
                },
                Dimensions: {
                    type: "structure",
                    members: {
                        Key: {},
                        Values: {
                            shape: "Sb"
                        },
                        MatchOptions: {
                            shape: "Sd"
                        }
                    }
                },
                Tags: {
                    shape: "Sf"
                },
                CostCategories: {
                    type: "structure",
                    members: {
                        Key: {},
                        Values: {
                            shape: "Sb"
                        },
                        MatchOptions: {
                            shape: "Sd"
                        }
                    }
                }
            }
        },
        S8: {
            type: "list",
            member: {
                shape: "S7"
            }
        },
        Sb: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "structure",
            members: {
                Key: {},
                Values: {
                    shape: "Sb"
                },
                MatchOptions: {
                    shape: "Sd"
                }
            }
        },
        Sm: {
            type: "structure",
            required: [ "MonitorArnList", "Subscribers", "Threshold", "Frequency", "SubscriptionName" ],
            members: {
                SubscriptionArn: {},
                AccountId: {},
                MonitorArnList: {
                    shape: "Sn"
                },
                Subscribers: {
                    shape: "Sp"
                },
                Threshold: {
                    type: "double"
                },
                Frequency: {},
                SubscriptionName: {}
            }
        },
        Sn: {
            type: "list",
            member: {}
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Address: {},
                    Type: {},
                    Status: {}
                }
            }
        },
        Sz: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Value: {},
                    Rule: {
                        shape: "S7"
                    },
                    InheritedValue: {
                        type: "structure",
                        members: {
                            DimensionName: {},
                            DimensionKey: {}
                        }
                    },
                    Type: {}
                }
            }
        },
        S1g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Component: {},
                    Status: {}
                }
            }
        },
        S26: {
            type: "structure",
            required: [ "Start", "End" ],
            members: {
                Start: {},
                End: {}
            }
        },
        S28: {
            type: "list",
            member: {}
        },
        S2a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Key: {}
                }
            }
        },
        S2f: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TimePeriod: {
                        shape: "S26"
                    },
                    Total: {
                        shape: "S2h"
                    },
                    Groups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Keys: {
                                    type: "list",
                                    member: {}
                                },
                                Metrics: {
                                    shape: "S2h"
                                }
                            }
                        }
                    },
                    Estimated: {
                        type: "boolean"
                    }
                }
            }
        },
        S2h: {
            type: "map",
            key: {},
            value: {
                shape: "S2i"
            }
        },
        S2i: {
            type: "structure",
            members: {
                Amount: {},
                Unit: {}
            }
        },
        S2q: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Value: {},
                    Attributes: {
                        shape: "S2s"
                    }
                }
            }
        },
        S2s: {
            type: "map",
            key: {},
            value: {}
        },
        S2z: {
            type: "list",
            member: {
                shape: "S30"
            }
        },
        S30: {
            type: "structure",
            required: [ "Key" ],
            members: {
                Key: {},
                SortOrder: {}
            }
        },
        S36: {
            type: "list",
            member: {}
        },
        S3b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TimePeriod: {
                        shape: "S26"
                    },
                    MeanValue: {},
                    PredictionIntervalLowerBound: {},
                    PredictionIntervalUpperBound: {}
                }
            }
        },
        S3m: {
            type: "structure",
            members: {
                CoverageHours: {
                    type: "structure",
                    members: {
                        OnDemandHours: {},
                        ReservedHours: {},
                        TotalRunningHours: {},
                        CoverageHoursPercentage: {}
                    }
                },
                CoverageNormalizedUnits: {
                    type: "structure",
                    members: {
                        OnDemandNormalizedUnits: {},
                        ReservedNormalizedUnits: {},
                        TotalRunningNormalizedUnits: {},
                        CoverageNormalizedUnitsPercentage: {}
                    }
                },
                CoverageCost: {
                    type: "structure",
                    members: {
                        OnDemandCost: {}
                    }
                }
            }
        },
        S44: {
            type: "structure",
            members: {
                EC2Specification: {
                    type: "structure",
                    members: {
                        OfferingClass: {}
                    }
                }
            }
        },
        S4t: {
            type: "structure",
            members: {
                UtilizationPercentage: {},
                UtilizationPercentageInUnits: {},
                PurchasedHours: {},
                PurchasedUnits: {},
                TotalActualHours: {},
                TotalActualUnits: {},
                UnusedHours: {},
                UnusedUnits: {},
                OnDemandCostOfRIHoursUsed: {},
                NetRISavings: {},
                TotalPotentialRISavings: {},
                AmortizedUpfrontFee: {},
                AmortizedRecurringFee: {},
                TotalAmortizedFee: {},
                RICostForUnusedHours: {},
                RealizedSavings: {},
                UnrealizedSavings: {}
            }
        },
        S5c: {
            type: "structure",
            required: [ "RecommendationTarget", "BenefitsConsidered" ],
            members: {
                RecommendationTarget: {},
                BenefitsConsidered: {
                    type: "boolean"
                }
            }
        },
        S5l: {
            type: "structure",
            members: {
                EC2ResourceDetails: {
                    type: "structure",
                    members: {
                        HourlyOnDemandRate: {},
                        InstanceType: {},
                        Platform: {},
                        Region: {},
                        Sku: {},
                        Memory: {},
                        NetworkPerformance: {},
                        Storage: {},
                        Vcpu: {}
                    }
                }
            }
        },
        S5n: {
            type: "structure",
            members: {
                EC2ResourceUtilization: {
                    type: "structure",
                    members: {
                        MaxCpuUtilizationPercentage: {},
                        MaxMemoryUtilizationPercentage: {},
                        MaxStorageUtilizationPercentage: {},
                        EBSResourceUtilization: {
                            type: "structure",
                            members: {
                                EbsReadOpsPerSecond: {},
                                EbsWriteOpsPerSecond: {},
                                EbsReadBytesPerSecond: {},
                                EbsWriteBytesPerSecond: {}
                            }
                        }
                    }
                }
            }
        },
        S6d: {
            type: "structure",
            members: {
                TotalCommitment: {},
                UsedCommitment: {},
                UnusedCommitment: {},
                UtilizationPercentage: {}
            }
        },
        S6e: {
            type: "structure",
            members: {
                NetSavings: {},
                OnDemandCostEquivalent: {}
            }
        },
        S6f: {
            type: "structure",
            members: {
                AmortizedRecurringCommitment: {},
                AmortizedUpfrontCommitment: {},
                TotalAmortizedCommitment: {}
            }
        },
        S6g: {
            type: "structure",
            required: [ "Utilization" ],
            members: {
                Utilization: {
                    shape: "S6d"
                },
                Savings: {
                    shape: "S6e"
                },
                AmortizedCommitment: {
                    shape: "S6f"
                }
            }
        }
    },
    paginators: {
        GetSavingsPlansCoverage: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetSavingsPlansUtilizationDetails: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListCostCategoryDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["mediaconvert"] = {};

AWS.MediaConvert = AWS.Service.defineService("mediaconvert", [ "2017-08-29" ]);

AWS.apiLoader.services["mediaconvert"]["2017-08-29"] = {
    metadata: {
        apiVersion: "2017-08-29",
        endpointPrefix: "mediaconvert",
        signingName: "mediaconvert",
        serviceFullName: "AWS Elemental MediaConvert",
        serviceId: "MediaConvert",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "mediaconvert-2017-08-29",
        signatureVersion: "v4",
        serviceAbbreviation: "MediaConvert"
    },
    operations: {
        AssociateCertificate: {
            http: {
                requestUri: "/2017-08-29/certificates",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelJob: {
            http: {
                method: "DELETE",
                requestUri: "/2017-08-29/jobs/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Id: {
                        locationName: "id",
                        location: "uri"
                    }
                },
                required: [ "Id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateJob: {
            http: {
                requestUri: "/2017-08-29/jobs",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    AccelerationSettings: {
                        shape: "S7",
                        locationName: "accelerationSettings"
                    },
                    BillingTagsSource: {
                        locationName: "billingTagsSource"
                    },
                    ClientRequestToken: {
                        locationName: "clientRequestToken",
                        idempotencyToken: true
                    },
                    HopDestinations: {
                        shape: "Sa",
                        locationName: "hopDestinations"
                    },
                    JobTemplate: {
                        locationName: "jobTemplate"
                    },
                    Priority: {
                        locationName: "priority",
                        type: "integer"
                    },
                    Queue: {
                        locationName: "queue"
                    },
                    Role: {
                        locationName: "role"
                    },
                    Settings: {
                        shape: "Se",
                        locationName: "settings"
                    },
                    SimulateReservedQueue: {
                        locationName: "simulateReservedQueue"
                    },
                    StatusUpdateInterval: {
                        locationName: "statusUpdateInterval"
                    },
                    Tags: {
                        shape: "Sgu",
                        locationName: "tags"
                    },
                    UserMetadata: {
                        shape: "Sgu",
                        locationName: "userMetadata"
                    }
                },
                required: [ "Role", "Settings" ]
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "Sgw",
                        locationName: "job"
                    }
                }
            }
        },
        CreateJobTemplate: {
            http: {
                requestUri: "/2017-08-29/jobTemplates",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    AccelerationSettings: {
                        shape: "S7",
                        locationName: "accelerationSettings"
                    },
                    Category: {
                        locationName: "category"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HopDestinations: {
                        shape: "Sa",
                        locationName: "hopDestinations"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Priority: {
                        locationName: "priority",
                        type: "integer"
                    },
                    Queue: {
                        locationName: "queue"
                    },
                    Settings: {
                        shape: "Shc",
                        locationName: "settings"
                    },
                    StatusUpdateInterval: {
                        locationName: "statusUpdateInterval"
                    },
                    Tags: {
                        shape: "Sgu",
                        locationName: "tags"
                    }
                },
                required: [ "Settings", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    JobTemplate: {
                        shape: "Shg",
                        locationName: "jobTemplate"
                    }
                }
            }
        },
        CreatePreset: {
            http: {
                requestUri: "/2017-08-29/presets",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Category: {
                        locationName: "category"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Settings: {
                        shape: "Shj",
                        locationName: "settings"
                    },
                    Tags: {
                        shape: "Sgu",
                        locationName: "tags"
                    }
                },
                required: [ "Settings", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Preset: {
                        shape: "Shn",
                        locationName: "preset"
                    }
                }
            }
        },
        CreateQueue: {
            http: {
                requestUri: "/2017-08-29/queues",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Description: {
                        locationName: "description"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PricingPlan: {
                        locationName: "pricingPlan"
                    },
                    ReservationPlanSettings: {
                        shape: "Shq",
                        locationName: "reservationPlanSettings"
                    },
                    Status: {
                        locationName: "status"
                    },
                    Tags: {
                        shape: "Sgu",
                        locationName: "tags"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Queue: {
                        shape: "Shv",
                        locationName: "queue"
                    }
                }
            }
        },
        DeleteJobTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/2017-08-29/jobTemplates/{name}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name",
                        location: "uri"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePreset: {
            http: {
                method: "DELETE",
                requestUri: "/2017-08-29/presets/{name}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name",
                        location: "uri"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteQueue: {
            http: {
                method: "DELETE",
                requestUri: "/2017-08-29/queues/{name}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name",
                        location: "uri"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeEndpoints: {
            http: {
                requestUri: "/2017-08-29/endpoints",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    Mode: {
                        locationName: "mode"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Endpoints: {
                        locationName: "endpoints",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Url: {
                                    locationName: "url"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DisassociateCertificate: {
            http: {
                method: "DELETE",
                requestUri: "/2017-08-29/certificates/{arn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn",
                        location: "uri"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetJob: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/jobs/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Id: {
                        locationName: "id",
                        location: "uri"
                    }
                },
                required: [ "Id" ]
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "Sgw",
                        locationName: "job"
                    }
                }
            }
        },
        GetJobTemplate: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/jobTemplates/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name",
                        location: "uri"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    JobTemplate: {
                        shape: "Shg",
                        locationName: "jobTemplate"
                    }
                }
            }
        },
        GetPreset: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/presets/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name",
                        location: "uri"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Preset: {
                        shape: "Shn",
                        locationName: "preset"
                    }
                }
            }
        },
        GetQueue: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/queues/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name",
                        location: "uri"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Queue: {
                        shape: "Shv",
                        locationName: "queue"
                    }
                }
            }
        },
        ListJobTemplates: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/jobTemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Category: {
                        locationName: "category",
                        location: "querystring"
                    },
                    ListBy: {
                        locationName: "listBy",
                        location: "querystring"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        location: "querystring",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken",
                        location: "querystring"
                    },
                    Order: {
                        locationName: "order",
                        location: "querystring"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobTemplates: {
                        locationName: "jobTemplates",
                        type: "list",
                        member: {
                            shape: "Shg"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListJobs: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        locationName: "maxResults",
                        location: "querystring",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken",
                        location: "querystring"
                    },
                    Order: {
                        locationName: "order",
                        location: "querystring"
                    },
                    Queue: {
                        locationName: "queue",
                        location: "querystring"
                    },
                    Status: {
                        locationName: "status",
                        location: "querystring"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        locationName: "jobs",
                        type: "list",
                        member: {
                            shape: "Sgw"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListPresets: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/presets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Category: {
                        locationName: "category",
                        location: "querystring"
                    },
                    ListBy: {
                        locationName: "listBy",
                        location: "querystring"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        location: "querystring",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken",
                        location: "querystring"
                    },
                    Order: {
                        locationName: "order",
                        location: "querystring"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Presets: {
                        locationName: "presets",
                        type: "list",
                        member: {
                            shape: "Shn"
                        }
                    }
                }
            }
        },
        ListQueues: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/queues",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ListBy: {
                        locationName: "listBy",
                        location: "querystring"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        location: "querystring",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken",
                        location: "querystring"
                    },
                    Order: {
                        locationName: "order",
                        location: "querystring"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Queues: {
                        locationName: "queues",
                        type: "list",
                        member: {
                            shape: "Shv"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn",
                        location: "uri"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {
                    ResourceTags: {
                        locationName: "resourceTags",
                        type: "structure",
                        members: {
                            Arn: {
                                locationName: "arn"
                            },
                            Tags: {
                                shape: "Sgu",
                                locationName: "tags"
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/2017-08-29/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Tags: {
                        shape: "Sgu",
                        locationName: "tags"
                    }
                },
                required: [ "Arn", "Tags" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "PUT",
                requestUri: "/2017-08-29/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn",
                        location: "uri"
                    },
                    TagKeys: {
                        shape: "Sh1",
                        locationName: "tagKeys"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateJobTemplate: {
            http: {
                method: "PUT",
                requestUri: "/2017-08-29/jobTemplates/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AccelerationSettings: {
                        shape: "S7",
                        locationName: "accelerationSettings"
                    },
                    Category: {
                        locationName: "category"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HopDestinations: {
                        shape: "Sa",
                        locationName: "hopDestinations"
                    },
                    Name: {
                        locationName: "name",
                        location: "uri"
                    },
                    Priority: {
                        locationName: "priority",
                        type: "integer"
                    },
                    Queue: {
                        locationName: "queue"
                    },
                    Settings: {
                        shape: "Shc",
                        locationName: "settings"
                    },
                    StatusUpdateInterval: {
                        locationName: "statusUpdateInterval"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    JobTemplate: {
                        shape: "Shg",
                        locationName: "jobTemplate"
                    }
                }
            }
        },
        UpdatePreset: {
            http: {
                method: "PUT",
                requestUri: "/2017-08-29/presets/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Category: {
                        locationName: "category"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Name: {
                        locationName: "name",
                        location: "uri"
                    },
                    Settings: {
                        shape: "Shj",
                        locationName: "settings"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Preset: {
                        shape: "Shn",
                        locationName: "preset"
                    }
                }
            }
        },
        UpdateQueue: {
            http: {
                method: "PUT",
                requestUri: "/2017-08-29/queues/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Description: {
                        locationName: "description"
                    },
                    Name: {
                        locationName: "name",
                        location: "uri"
                    },
                    ReservationPlanSettings: {
                        shape: "Shq",
                        locationName: "reservationPlanSettings"
                    },
                    Status: {
                        locationName: "status"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Queue: {
                        shape: "Shv",
                        locationName: "queue"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            members: {
                Mode: {
                    locationName: "mode"
                }
            },
            required: [ "Mode" ]
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Priority: {
                        locationName: "priority",
                        type: "integer"
                    },
                    Queue: {
                        locationName: "queue"
                    },
                    WaitMinutes: {
                        locationName: "waitMinutes",
                        type: "integer"
                    }
                }
            }
        },
        Se: {
            type: "structure",
            members: {
                AdAvailOffset: {
                    locationName: "adAvailOffset",
                    type: "integer"
                },
                AvailBlanking: {
                    shape: "Sg",
                    locationName: "availBlanking"
                },
                Esam: {
                    shape: "Si",
                    locationName: "esam"
                },
                Inputs: {
                    locationName: "inputs",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            AudioSelectorGroups: {
                                shape: "Sq",
                                locationName: "audioSelectorGroups"
                            },
                            AudioSelectors: {
                                shape: "Su",
                                locationName: "audioSelectors"
                            },
                            CaptionSelectors: {
                                shape: "S1e",
                                locationName: "captionSelectors"
                            },
                            Crop: {
                                shape: "S20",
                                locationName: "crop"
                            },
                            DeblockFilter: {
                                locationName: "deblockFilter"
                            },
                            DecryptionSettings: {
                                locationName: "decryptionSettings",
                                type: "structure",
                                members: {
                                    DecryptionMode: {
                                        locationName: "decryptionMode"
                                    },
                                    EncryptedDecryptionKey: {
                                        locationName: "encryptedDecryptionKey"
                                    },
                                    InitializationVector: {
                                        locationName: "initializationVector"
                                    },
                                    KmsKeyRegion: {
                                        locationName: "kmsKeyRegion"
                                    }
                                }
                            },
                            DenoiseFilter: {
                                locationName: "denoiseFilter"
                            },
                            FileInput: {
                                locationName: "fileInput"
                            },
                            FilterEnable: {
                                locationName: "filterEnable"
                            },
                            FilterStrength: {
                                locationName: "filterStrength",
                                type: "integer"
                            },
                            ImageInserter: {
                                shape: "S2d",
                                locationName: "imageInserter"
                            },
                            InputClippings: {
                                shape: "S2k",
                                locationName: "inputClippings"
                            },
                            InputScanType: {
                                locationName: "inputScanType"
                            },
                            Position: {
                                shape: "S20",
                                locationName: "position"
                            },
                            ProgramNumber: {
                                locationName: "programNumber",
                                type: "integer"
                            },
                            PsiControl: {
                                locationName: "psiControl"
                            },
                            SupplementalImps: {
                                locationName: "supplementalImps",
                                type: "list",
                                member: {}
                            },
                            TimecodeSource: {
                                locationName: "timecodeSource"
                            },
                            TimecodeStart: {
                                locationName: "timecodeStart"
                            },
                            VideoSelector: {
                                shape: "S2t",
                                locationName: "videoSelector"
                            }
                        }
                    }
                },
                MotionImageInserter: {
                    shape: "S31",
                    locationName: "motionImageInserter"
                },
                NielsenConfiguration: {
                    shape: "S39",
                    locationName: "nielsenConfiguration"
                },
                NielsenNonLinearWatermark: {
                    shape: "S3b",
                    locationName: "nielsenNonLinearWatermark"
                },
                OutputGroups: {
                    shape: "S3l",
                    locationName: "outputGroups"
                },
                TimecodeConfig: {
                    shape: "Sgl",
                    locationName: "timecodeConfig"
                },
                TimedMetadataInsertion: {
                    shape: "Sgo",
                    locationName: "timedMetadataInsertion"
                }
            }
        },
        Sg: {
            type: "structure",
            members: {
                AvailBlankingImage: {
                    locationName: "availBlankingImage"
                }
            }
        },
        Si: {
            type: "structure",
            members: {
                ManifestConfirmConditionNotification: {
                    locationName: "manifestConfirmConditionNotification",
                    type: "structure",
                    members: {
                        MccXml: {
                            locationName: "mccXml"
                        }
                    }
                },
                ResponseSignalPreroll: {
                    locationName: "responseSignalPreroll",
                    type: "integer"
                },
                SignalProcessingNotification: {
                    locationName: "signalProcessingNotification",
                    type: "structure",
                    members: {
                        SccXml: {
                            locationName: "sccXml"
                        }
                    }
                }
            }
        },
        Sq: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    AudioSelectorNames: {
                        shape: "Ss",
                        locationName: "audioSelectorNames"
                    }
                }
            }
        },
        Ss: {
            type: "list",
            member: {}
        },
        Su: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    CustomLanguageCode: {
                        locationName: "customLanguageCode"
                    },
                    DefaultSelection: {
                        locationName: "defaultSelection"
                    },
                    ExternalAudioFileInput: {
                        locationName: "externalAudioFileInput"
                    },
                    LanguageCode: {
                        locationName: "languageCode"
                    },
                    Offset: {
                        locationName: "offset",
                        type: "integer"
                    },
                    Pids: {
                        shape: "S11",
                        locationName: "pids"
                    },
                    ProgramSelection: {
                        locationName: "programSelection",
                        type: "integer"
                    },
                    RemixSettings: {
                        shape: "S14",
                        locationName: "remixSettings"
                    },
                    SelectorType: {
                        locationName: "selectorType"
                    },
                    Tracks: {
                        shape: "S11",
                        locationName: "tracks"
                    }
                }
            }
        },
        S11: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        S14: {
            type: "structure",
            members: {
                ChannelMapping: {
                    locationName: "channelMapping",
                    type: "structure",
                    members: {
                        OutputChannels: {
                            locationName: "outputChannels",
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    InputChannels: {
                                        locationName: "inputChannels",
                                        type: "list",
                                        member: {
                                            type: "integer"
                                        }
                                    },
                                    InputChannelsFineTune: {
                                        locationName: "inputChannelsFineTune",
                                        type: "list",
                                        member: {
                                            type: "double"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                ChannelsIn: {
                    locationName: "channelsIn",
                    type: "integer"
                },
                ChannelsOut: {
                    locationName: "channelsOut",
                    type: "integer"
                }
            }
        },
        S1e: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    CustomLanguageCode: {
                        locationName: "customLanguageCode"
                    },
                    LanguageCode: {
                        locationName: "languageCode"
                    },
                    SourceSettings: {
                        locationName: "sourceSettings",
                        type: "structure",
                        members: {
                            AncillarySourceSettings: {
                                locationName: "ancillarySourceSettings",
                                type: "structure",
                                members: {
                                    Convert608To708: {
                                        locationName: "convert608To708"
                                    },
                                    SourceAncillaryChannelNumber: {
                                        locationName: "sourceAncillaryChannelNumber",
                                        type: "integer"
                                    },
                                    TerminateCaptions: {
                                        locationName: "terminateCaptions"
                                    }
                                }
                            },
                            DvbSubSourceSettings: {
                                locationName: "dvbSubSourceSettings",
                                type: "structure",
                                members: {
                                    Pid: {
                                        locationName: "pid",
                                        type: "integer"
                                    }
                                }
                            },
                            EmbeddedSourceSettings: {
                                locationName: "embeddedSourceSettings",
                                type: "structure",
                                members: {
                                    Convert608To708: {
                                        locationName: "convert608To708"
                                    },
                                    Source608ChannelNumber: {
                                        locationName: "source608ChannelNumber",
                                        type: "integer"
                                    },
                                    Source608TrackNumber: {
                                        locationName: "source608TrackNumber",
                                        type: "integer"
                                    },
                                    TerminateCaptions: {
                                        locationName: "terminateCaptions"
                                    }
                                }
                            },
                            FileSourceSettings: {
                                locationName: "fileSourceSettings",
                                type: "structure",
                                members: {
                                    Convert608To708: {
                                        locationName: "convert608To708"
                                    },
                                    Framerate: {
                                        locationName: "framerate",
                                        type: "structure",
                                        members: {
                                            FramerateDenominator: {
                                                locationName: "framerateDenominator",
                                                type: "integer"
                                            },
                                            FramerateNumerator: {
                                                locationName: "framerateNumerator",
                                                type: "integer"
                                            }
                                        }
                                    },
                                    SourceFile: {
                                        locationName: "sourceFile"
                                    },
                                    TimeDelta: {
                                        locationName: "timeDelta",
                                        type: "integer"
                                    }
                                }
                            },
                            SourceType: {
                                locationName: "sourceType"
                            },
                            TeletextSourceSettings: {
                                locationName: "teletextSourceSettings",
                                type: "structure",
                                members: {
                                    PageNumber: {
                                        locationName: "pageNumber"
                                    }
                                }
                            },
                            TrackSourceSettings: {
                                locationName: "trackSourceSettings",
                                type: "structure",
                                members: {
                                    TrackNumber: {
                                        locationName: "trackNumber",
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S20: {
            type: "structure",
            members: {
                Height: {
                    locationName: "height",
                    type: "integer"
                },
                Width: {
                    locationName: "width",
                    type: "integer"
                },
                X: {
                    locationName: "x",
                    type: "integer"
                },
                Y: {
                    locationName: "y",
                    type: "integer"
                }
            }
        },
        S2d: {
            type: "structure",
            members: {
                InsertableImages: {
                    locationName: "insertableImages",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Duration: {
                                locationName: "duration",
                                type: "integer"
                            },
                            FadeIn: {
                                locationName: "fadeIn",
                                type: "integer"
                            },
                            FadeOut: {
                                locationName: "fadeOut",
                                type: "integer"
                            },
                            Height: {
                                locationName: "height",
                                type: "integer"
                            },
                            ImageInserterInput: {
                                locationName: "imageInserterInput"
                            },
                            ImageX: {
                                locationName: "imageX",
                                type: "integer"
                            },
                            ImageY: {
                                locationName: "imageY",
                                type: "integer"
                            },
                            Layer: {
                                locationName: "layer",
                                type: "integer"
                            },
                            Opacity: {
                                locationName: "opacity",
                                type: "integer"
                            },
                            StartTime: {
                                locationName: "startTime"
                            },
                            Width: {
                                locationName: "width",
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S2k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EndTimecode: {
                        locationName: "endTimecode"
                    },
                    StartTimecode: {
                        locationName: "startTimecode"
                    }
                }
            }
        },
        S2t: {
            type: "structure",
            members: {
                AlphaBehavior: {
                    locationName: "alphaBehavior"
                },
                ColorSpace: {
                    locationName: "colorSpace"
                },
                ColorSpaceUsage: {
                    locationName: "colorSpaceUsage"
                },
                Hdr10Metadata: {
                    shape: "S2x",
                    locationName: "hdr10Metadata"
                },
                Pid: {
                    locationName: "pid",
                    type: "integer"
                },
                ProgramNumber: {
                    locationName: "programNumber",
                    type: "integer"
                },
                Rotate: {
                    locationName: "rotate"
                }
            }
        },
        S2x: {
            type: "structure",
            members: {
                BluePrimaryX: {
                    locationName: "bluePrimaryX",
                    type: "integer"
                },
                BluePrimaryY: {
                    locationName: "bluePrimaryY",
                    type: "integer"
                },
                GreenPrimaryX: {
                    locationName: "greenPrimaryX",
                    type: "integer"
                },
                GreenPrimaryY: {
                    locationName: "greenPrimaryY",
                    type: "integer"
                },
                MaxContentLightLevel: {
                    locationName: "maxContentLightLevel",
                    type: "integer"
                },
                MaxFrameAverageLightLevel: {
                    locationName: "maxFrameAverageLightLevel",
                    type: "integer"
                },
                MaxLuminance: {
                    locationName: "maxLuminance",
                    type: "integer"
                },
                MinLuminance: {
                    locationName: "minLuminance",
                    type: "integer"
                },
                RedPrimaryX: {
                    locationName: "redPrimaryX",
                    type: "integer"
                },
                RedPrimaryY: {
                    locationName: "redPrimaryY",
                    type: "integer"
                },
                WhitePointX: {
                    locationName: "whitePointX",
                    type: "integer"
                },
                WhitePointY: {
                    locationName: "whitePointY",
                    type: "integer"
                }
            }
        },
        S31: {
            type: "structure",
            members: {
                Framerate: {
                    locationName: "framerate",
                    type: "structure",
                    members: {
                        FramerateDenominator: {
                            locationName: "framerateDenominator",
                            type: "integer"
                        },
                        FramerateNumerator: {
                            locationName: "framerateNumerator",
                            type: "integer"
                        }
                    }
                },
                Input: {
                    locationName: "input"
                },
                InsertionMode: {
                    locationName: "insertionMode"
                },
                Offset: {
                    locationName: "offset",
                    type: "structure",
                    members: {
                        ImageX: {
                            locationName: "imageX",
                            type: "integer"
                        },
                        ImageY: {
                            locationName: "imageY",
                            type: "integer"
                        }
                    }
                },
                Playback: {
                    locationName: "playback"
                },
                StartTime: {
                    locationName: "startTime"
                }
            }
        },
        S39: {
            type: "structure",
            members: {
                BreakoutCode: {
                    locationName: "breakoutCode",
                    type: "integer"
                },
                DistributorId: {
                    locationName: "distributorId"
                }
            }
        },
        S3b: {
            type: "structure",
            members: {
                ActiveWatermarkProcess: {
                    locationName: "activeWatermarkProcess"
                },
                AdiFilename: {
                    locationName: "adiFilename"
                },
                AssetId: {
                    locationName: "assetId"
                },
                AssetName: {
                    locationName: "assetName"
                },
                CbetSourceId: {
                    locationName: "cbetSourceId"
                },
                EpisodeId: {
                    locationName: "episodeId"
                },
                MetadataDestination: {
                    locationName: "metadataDestination"
                },
                SourceId: {
                    locationName: "sourceId",
                    type: "integer"
                },
                SourceWatermarkStatus: {
                    locationName: "sourceWatermarkStatus"
                },
                TicServerUrl: {
                    locationName: "ticServerUrl"
                },
                UniqueTicPerAudioTrack: {
                    locationName: "uniqueTicPerAudioTrack"
                }
            }
        },
        S3l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AutomatedEncodingSettings: {
                        locationName: "automatedEncodingSettings",
                        type: "structure",
                        members: {
                            AbrSettings: {
                                locationName: "abrSettings",
                                type: "structure",
                                members: {
                                    MaxAbrBitrate: {
                                        locationName: "maxAbrBitrate",
                                        type: "integer"
                                    },
                                    MaxRenditions: {
                                        locationName: "maxRenditions",
                                        type: "integer"
                                    },
                                    MinAbrBitrate: {
                                        locationName: "minAbrBitrate",
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    CustomName: {
                        locationName: "customName"
                    },
                    Name: {
                        locationName: "name"
                    },
                    OutputGroupSettings: {
                        locationName: "outputGroupSettings",
                        type: "structure",
                        members: {
                            CmafGroupSettings: {
                                locationName: "cmafGroupSettings",
                                type: "structure",
                                members: {
                                    AdditionalManifests: {
                                        locationName: "additionalManifests",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                ManifestNameModifier: {
                                                    locationName: "manifestNameModifier"
                                                },
                                                SelectedOutputs: {
                                                    shape: "Ss",
                                                    locationName: "selectedOutputs"
                                                }
                                            }
                                        }
                                    },
                                    BaseUrl: {
                                        locationName: "baseUrl"
                                    },
                                    ClientCache: {
                                        locationName: "clientCache"
                                    },
                                    CodecSpecification: {
                                        locationName: "codecSpecification"
                                    },
                                    Destination: {
                                        locationName: "destination"
                                    },
                                    DestinationSettings: {
                                        shape: "S3x",
                                        locationName: "destinationSettings"
                                    },
                                    Encryption: {
                                        locationName: "encryption",
                                        type: "structure",
                                        members: {
                                            ConstantInitializationVector: {
                                                locationName: "constantInitializationVector"
                                            },
                                            EncryptionMethod: {
                                                locationName: "encryptionMethod"
                                            },
                                            InitializationVectorInManifest: {
                                                locationName: "initializationVectorInManifest"
                                            },
                                            SpekeKeyProvider: {
                                                locationName: "spekeKeyProvider",
                                                type: "structure",
                                                members: {
                                                    CertificateArn: {
                                                        locationName: "certificateArn"
                                                    },
                                                    DashSignaledSystemIds: {
                                                        shape: "S4a",
                                                        locationName: "dashSignaledSystemIds"
                                                    },
                                                    HlsSignaledSystemIds: {
                                                        shape: "S4a",
                                                        locationName: "hlsSignaledSystemIds"
                                                    },
                                                    ResourceId: {
                                                        locationName: "resourceId"
                                                    },
                                                    Url: {
                                                        locationName: "url"
                                                    }
                                                }
                                            },
                                            StaticKeyProvider: {
                                                shape: "S4d",
                                                locationName: "staticKeyProvider"
                                            },
                                            Type: {
                                                locationName: "type"
                                            }
                                        }
                                    },
                                    FragmentLength: {
                                        locationName: "fragmentLength",
                                        type: "integer"
                                    },
                                    ManifestCompression: {
                                        locationName: "manifestCompression"
                                    },
                                    ManifestDurationFormat: {
                                        locationName: "manifestDurationFormat"
                                    },
                                    MinBufferTime: {
                                        locationName: "minBufferTime",
                                        type: "integer"
                                    },
                                    MinFinalSegmentLength: {
                                        locationName: "minFinalSegmentLength",
                                        type: "double"
                                    },
                                    MpdProfile: {
                                        locationName: "mpdProfile"
                                    },
                                    PtsOffsetHandlingForBFrames: {
                                        locationName: "ptsOffsetHandlingForBFrames"
                                    },
                                    SegmentControl: {
                                        locationName: "segmentControl"
                                    },
                                    SegmentLength: {
                                        locationName: "segmentLength",
                                        type: "integer"
                                    },
                                    StreamInfResolution: {
                                        locationName: "streamInfResolution"
                                    },
                                    WriteDashManifest: {
                                        locationName: "writeDashManifest"
                                    },
                                    WriteHlsManifest: {
                                        locationName: "writeHlsManifest"
                                    },
                                    WriteSegmentTimelineInRepresentation: {
                                        locationName: "writeSegmentTimelineInRepresentation"
                                    }
                                }
                            },
                            DashIsoGroupSettings: {
                                locationName: "dashIsoGroupSettings",
                                type: "structure",
                                members: {
                                    AdditionalManifests: {
                                        locationName: "additionalManifests",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                ManifestNameModifier: {
                                                    locationName: "manifestNameModifier"
                                                },
                                                SelectedOutputs: {
                                                    shape: "Ss",
                                                    locationName: "selectedOutputs"
                                                }
                                            }
                                        }
                                    },
                                    AudioChannelConfigSchemeIdUri: {
                                        locationName: "audioChannelConfigSchemeIdUri"
                                    },
                                    BaseUrl: {
                                        locationName: "baseUrl"
                                    },
                                    Destination: {
                                        locationName: "destination"
                                    },
                                    DestinationSettings: {
                                        shape: "S3x",
                                        locationName: "destinationSettings"
                                    },
                                    Encryption: {
                                        locationName: "encryption",
                                        type: "structure",
                                        members: {
                                            PlaybackDeviceCompatibility: {
                                                locationName: "playbackDeviceCompatibility"
                                            },
                                            SpekeKeyProvider: {
                                                shape: "S4y",
                                                locationName: "spekeKeyProvider"
                                            }
                                        }
                                    },
                                    FragmentLength: {
                                        locationName: "fragmentLength",
                                        type: "integer"
                                    },
                                    HbbtvCompliance: {
                                        locationName: "hbbtvCompliance"
                                    },
                                    MinBufferTime: {
                                        locationName: "minBufferTime",
                                        type: "integer"
                                    },
                                    MinFinalSegmentLength: {
                                        locationName: "minFinalSegmentLength",
                                        type: "double"
                                    },
                                    MpdProfile: {
                                        locationName: "mpdProfile"
                                    },
                                    PtsOffsetHandlingForBFrames: {
                                        locationName: "ptsOffsetHandlingForBFrames"
                                    },
                                    SegmentControl: {
                                        locationName: "segmentControl"
                                    },
                                    SegmentLength: {
                                        locationName: "segmentLength",
                                        type: "integer"
                                    },
                                    WriteSegmentTimelineInRepresentation: {
                                        locationName: "writeSegmentTimelineInRepresentation"
                                    }
                                }
                            },
                            FileGroupSettings: {
                                locationName: "fileGroupSettings",
                                type: "structure",
                                members: {
                                    Destination: {
                                        locationName: "destination"
                                    },
                                    DestinationSettings: {
                                        shape: "S3x",
                                        locationName: "destinationSettings"
                                    }
                                }
                            },
                            HlsGroupSettings: {
                                locationName: "hlsGroupSettings",
                                type: "structure",
                                members: {
                                    AdMarkers: {
                                        locationName: "adMarkers",
                                        type: "list",
                                        member: {}
                                    },
                                    AdditionalManifests: {
                                        locationName: "additionalManifests",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                ManifestNameModifier: {
                                                    locationName: "manifestNameModifier"
                                                },
                                                SelectedOutputs: {
                                                    shape: "Ss",
                                                    locationName: "selectedOutputs"
                                                }
                                            }
                                        }
                                    },
                                    AudioOnlyHeader: {
                                        locationName: "audioOnlyHeader"
                                    },
                                    BaseUrl: {
                                        locationName: "baseUrl"
                                    },
                                    CaptionLanguageMappings: {
                                        locationName: "captionLanguageMappings",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                CaptionChannel: {
                                                    locationName: "captionChannel",
                                                    type: "integer"
                                                },
                                                CustomLanguageCode: {
                                                    locationName: "customLanguageCode"
                                                },
                                                LanguageCode: {
                                                    locationName: "languageCode"
                                                },
                                                LanguageDescription: {
                                                    locationName: "languageDescription"
                                                }
                                            }
                                        }
                                    },
                                    CaptionLanguageSetting: {
                                        locationName: "captionLanguageSetting"
                                    },
                                    ClientCache: {
                                        locationName: "clientCache"
                                    },
                                    CodecSpecification: {
                                        locationName: "codecSpecification"
                                    },
                                    Destination: {
                                        locationName: "destination"
                                    },
                                    DestinationSettings: {
                                        shape: "S3x",
                                        locationName: "destinationSettings"
                                    },
                                    DirectoryStructure: {
                                        locationName: "directoryStructure"
                                    },
                                    Encryption: {
                                        locationName: "encryption",
                                        type: "structure",
                                        members: {
                                            ConstantInitializationVector: {
                                                locationName: "constantInitializationVector"
                                            },
                                            EncryptionMethod: {
                                                locationName: "encryptionMethod"
                                            },
                                            InitializationVectorInManifest: {
                                                locationName: "initializationVectorInManifest"
                                            },
                                            OfflineEncrypted: {
                                                locationName: "offlineEncrypted"
                                            },
                                            SpekeKeyProvider: {
                                                shape: "S4y",
                                                locationName: "spekeKeyProvider"
                                            },
                                            StaticKeyProvider: {
                                                shape: "S4d",
                                                locationName: "staticKeyProvider"
                                            },
                                            Type: {
                                                locationName: "type"
                                            }
                                        }
                                    },
                                    ManifestCompression: {
                                        locationName: "manifestCompression"
                                    },
                                    ManifestDurationFormat: {
                                        locationName: "manifestDurationFormat"
                                    },
                                    MinFinalSegmentLength: {
                                        locationName: "minFinalSegmentLength",
                                        type: "double"
                                    },
                                    MinSegmentLength: {
                                        locationName: "minSegmentLength",
                                        type: "integer"
                                    },
                                    OutputSelection: {
                                        locationName: "outputSelection"
                                    },
                                    ProgramDateTime: {
                                        locationName: "programDateTime"
                                    },
                                    ProgramDateTimePeriod: {
                                        locationName: "programDateTimePeriod",
                                        type: "integer"
                                    },
                                    SegmentControl: {
                                        locationName: "segmentControl"
                                    },
                                    SegmentLength: {
                                        locationName: "segmentLength",
                                        type: "integer"
                                    },
                                    SegmentsPerSubdirectory: {
                                        locationName: "segmentsPerSubdirectory",
                                        type: "integer"
                                    },
                                    StreamInfResolution: {
                                        locationName: "streamInfResolution"
                                    },
                                    TimedMetadataId3Frame: {
                                        locationName: "timedMetadataId3Frame"
                                    },
                                    TimedMetadataId3Period: {
                                        locationName: "timedMetadataId3Period",
                                        type: "integer"
                                    },
                                    TimestampDeltaMilliseconds: {
                                        locationName: "timestampDeltaMilliseconds",
                                        type: "integer"
                                    }
                                }
                            },
                            MsSmoothGroupSettings: {
                                locationName: "msSmoothGroupSettings",
                                type: "structure",
                                members: {
                                    AdditionalManifests: {
                                        locationName: "additionalManifests",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                ManifestNameModifier: {
                                                    locationName: "manifestNameModifier"
                                                },
                                                SelectedOutputs: {
                                                    shape: "Ss",
                                                    locationName: "selectedOutputs"
                                                }
                                            }
                                        }
                                    },
                                    AudioDeduplication: {
                                        locationName: "audioDeduplication"
                                    },
                                    Destination: {
                                        locationName: "destination"
                                    },
                                    DestinationSettings: {
                                        shape: "S3x",
                                        locationName: "destinationSettings"
                                    },
                                    Encryption: {
                                        locationName: "encryption",
                                        type: "structure",
                                        members: {
                                            SpekeKeyProvider: {
                                                shape: "S4y",
                                                locationName: "spekeKeyProvider"
                                            }
                                        }
                                    },
                                    FragmentLength: {
                                        locationName: "fragmentLength",
                                        type: "integer"
                                    },
                                    ManifestEncoding: {
                                        locationName: "manifestEncoding"
                                    }
                                }
                            },
                            Type: {
                                locationName: "type"
                            }
                        }
                    },
                    Outputs: {
                        locationName: "outputs",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AudioDescriptions: {
                                    shape: "S65",
                                    locationName: "audioDescriptions"
                                },
                                CaptionDescriptions: {
                                    locationName: "captionDescriptions",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            CaptionSelectorName: {
                                                locationName: "captionSelectorName"
                                            },
                                            CustomLanguageCode: {
                                                locationName: "customLanguageCode"
                                            },
                                            DestinationSettings: {
                                                shape: "S8m",
                                                locationName: "destinationSettings"
                                            },
                                            LanguageCode: {
                                                locationName: "languageCode"
                                            },
                                            LanguageDescription: {
                                                locationName: "languageDescription"
                                            }
                                        }
                                    }
                                },
                                ContainerSettings: {
                                    shape: "S9k",
                                    locationName: "containerSettings"
                                },
                                Extension: {
                                    locationName: "extension"
                                },
                                NameModifier: {
                                    locationName: "nameModifier"
                                },
                                OutputSettings: {
                                    locationName: "outputSettings",
                                    type: "structure",
                                    members: {
                                        HlsSettings: {
                                            locationName: "hlsSettings",
                                            type: "structure",
                                            members: {
                                                AudioGroupId: {
                                                    locationName: "audioGroupId"
                                                },
                                                AudioOnlyContainer: {
                                                    locationName: "audioOnlyContainer"
                                                },
                                                AudioRenditionSets: {
                                                    locationName: "audioRenditionSets"
                                                },
                                                AudioTrackType: {
                                                    locationName: "audioTrackType"
                                                },
                                                DescriptiveVideoServiceFlag: {
                                                    locationName: "descriptiveVideoServiceFlag"
                                                },
                                                IFrameOnlyManifest: {
                                                    locationName: "iFrameOnlyManifest"
                                                },
                                                SegmentModifier: {
                                                    locationName: "segmentModifier"
                                                }
                                            }
                                        }
                                    }
                                },
                                Preset: {
                                    locationName: "preset"
                                },
                                VideoDescription: {
                                    shape: "Sbl",
                                    locationName: "videoDescription"
                                }
                            }
                        }
                    }
                }
            }
        },
        S3x: {
            type: "structure",
            members: {
                S3Settings: {
                    locationName: "s3Settings",
                    type: "structure",
                    members: {
                        AccessControl: {
                            locationName: "accessControl",
                            type: "structure",
                            members: {
                                CannedAcl: {
                                    locationName: "cannedAcl"
                                }
                            }
                        },
                        Encryption: {
                            locationName: "encryption",
                            type: "structure",
                            members: {
                                EncryptionType: {
                                    locationName: "encryptionType"
                                },
                                KmsKeyArn: {
                                    locationName: "kmsKeyArn"
                                }
                            }
                        }
                    }
                }
            }
        },
        S4a: {
            type: "list",
            member: {}
        },
        S4d: {
            type: "structure",
            members: {
                KeyFormat: {
                    locationName: "keyFormat"
                },
                KeyFormatVersions: {
                    locationName: "keyFormatVersions"
                },
                StaticKeyValue: {
                    locationName: "staticKeyValue"
                },
                Url: {
                    locationName: "url"
                }
            }
        },
        S4y: {
            type: "structure",
            members: {
                CertificateArn: {
                    locationName: "certificateArn"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                SystemIds: {
                    locationName: "systemIds",
                    type: "list",
                    member: {}
                },
                Url: {
                    locationName: "url"
                }
            }
        },
        S65: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AudioChannelTaggingSettings: {
                        locationName: "audioChannelTaggingSettings",
                        type: "structure",
                        members: {
                            ChannelTag: {
                                locationName: "channelTag"
                            }
                        }
                    },
                    AudioNormalizationSettings: {
                        locationName: "audioNormalizationSettings",
                        type: "structure",
                        members: {
                            Algorithm: {
                                locationName: "algorithm"
                            },
                            AlgorithmControl: {
                                locationName: "algorithmControl"
                            },
                            CorrectionGateLevel: {
                                locationName: "correctionGateLevel",
                                type: "integer"
                            },
                            LoudnessLogging: {
                                locationName: "loudnessLogging"
                            },
                            PeakCalculation: {
                                locationName: "peakCalculation"
                            },
                            TargetLkfs: {
                                locationName: "targetLkfs",
                                type: "double"
                            }
                        }
                    },
                    AudioSourceName: {
                        locationName: "audioSourceName"
                    },
                    AudioType: {
                        locationName: "audioType",
                        type: "integer"
                    },
                    AudioTypeControl: {
                        locationName: "audioTypeControl"
                    },
                    CodecSettings: {
                        locationName: "codecSettings",
                        type: "structure",
                        members: {
                            AacSettings: {
                                locationName: "aacSettings",
                                type: "structure",
                                members: {
                                    AudioDescriptionBroadcasterMix: {
                                        locationName: "audioDescriptionBroadcasterMix"
                                    },
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    CodecProfile: {
                                        locationName: "codecProfile"
                                    },
                                    CodingMode: {
                                        locationName: "codingMode"
                                    },
                                    RateControlMode: {
                                        locationName: "rateControlMode"
                                    },
                                    RawFormat: {
                                        locationName: "rawFormat"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    },
                                    Specification: {
                                        locationName: "specification"
                                    },
                                    VbrQuality: {
                                        locationName: "vbrQuality"
                                    }
                                }
                            },
                            Ac3Settings: {
                                locationName: "ac3Settings",
                                type: "structure",
                                members: {
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    BitstreamMode: {
                                        locationName: "bitstreamMode"
                                    },
                                    CodingMode: {
                                        locationName: "codingMode"
                                    },
                                    Dialnorm: {
                                        locationName: "dialnorm",
                                        type: "integer"
                                    },
                                    DynamicRangeCompressionLine: {
                                        locationName: "dynamicRangeCompressionLine"
                                    },
                                    DynamicRangeCompressionProfile: {
                                        locationName: "dynamicRangeCompressionProfile"
                                    },
                                    DynamicRangeCompressionRf: {
                                        locationName: "dynamicRangeCompressionRf"
                                    },
                                    LfeFilter: {
                                        locationName: "lfeFilter"
                                    },
                                    MetadataControl: {
                                        locationName: "metadataControl"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    }
                                }
                            },
                            AiffSettings: {
                                locationName: "aiffSettings",
                                type: "structure",
                                members: {
                                    BitDepth: {
                                        locationName: "bitDepth",
                                        type: "integer"
                                    },
                                    Channels: {
                                        locationName: "channels",
                                        type: "integer"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    }
                                }
                            },
                            Codec: {
                                locationName: "codec"
                            },
                            Eac3AtmosSettings: {
                                locationName: "eac3AtmosSettings",
                                type: "structure",
                                members: {
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    BitstreamMode: {
                                        locationName: "bitstreamMode"
                                    },
                                    CodingMode: {
                                        locationName: "codingMode"
                                    },
                                    DialogueIntelligence: {
                                        locationName: "dialogueIntelligence"
                                    },
                                    DynamicRangeCompressionLine: {
                                        locationName: "dynamicRangeCompressionLine"
                                    },
                                    DynamicRangeCompressionRf: {
                                        locationName: "dynamicRangeCompressionRf"
                                    },
                                    LoRoCenterMixLevel: {
                                        locationName: "loRoCenterMixLevel",
                                        type: "double"
                                    },
                                    LoRoSurroundMixLevel: {
                                        locationName: "loRoSurroundMixLevel",
                                        type: "double"
                                    },
                                    LtRtCenterMixLevel: {
                                        locationName: "ltRtCenterMixLevel",
                                        type: "double"
                                    },
                                    LtRtSurroundMixLevel: {
                                        locationName: "ltRtSurroundMixLevel",
                                        type: "double"
                                    },
                                    MeteringMode: {
                                        locationName: "meteringMode"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    },
                                    SpeechThreshold: {
                                        locationName: "speechThreshold",
                                        type: "integer"
                                    },
                                    StereoDownmix: {
                                        locationName: "stereoDownmix"
                                    },
                                    SurroundExMode: {
                                        locationName: "surroundExMode"
                                    }
                                }
                            },
                            Eac3Settings: {
                                locationName: "eac3Settings",
                                type: "structure",
                                members: {
                                    AttenuationControl: {
                                        locationName: "attenuationControl"
                                    },
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    BitstreamMode: {
                                        locationName: "bitstreamMode"
                                    },
                                    CodingMode: {
                                        locationName: "codingMode"
                                    },
                                    DcFilter: {
                                        locationName: "dcFilter"
                                    },
                                    Dialnorm: {
                                        locationName: "dialnorm",
                                        type: "integer"
                                    },
                                    DynamicRangeCompressionLine: {
                                        locationName: "dynamicRangeCompressionLine"
                                    },
                                    DynamicRangeCompressionRf: {
                                        locationName: "dynamicRangeCompressionRf"
                                    },
                                    LfeControl: {
                                        locationName: "lfeControl"
                                    },
                                    LfeFilter: {
                                        locationName: "lfeFilter"
                                    },
                                    LoRoCenterMixLevel: {
                                        locationName: "loRoCenterMixLevel",
                                        type: "double"
                                    },
                                    LoRoSurroundMixLevel: {
                                        locationName: "loRoSurroundMixLevel",
                                        type: "double"
                                    },
                                    LtRtCenterMixLevel: {
                                        locationName: "ltRtCenterMixLevel",
                                        type: "double"
                                    },
                                    LtRtSurroundMixLevel: {
                                        locationName: "ltRtSurroundMixLevel",
                                        type: "double"
                                    },
                                    MetadataControl: {
                                        locationName: "metadataControl"
                                    },
                                    PassthroughControl: {
                                        locationName: "passthroughControl"
                                    },
                                    PhaseControl: {
                                        locationName: "phaseControl"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    },
                                    StereoDownmix: {
                                        locationName: "stereoDownmix"
                                    },
                                    SurroundExMode: {
                                        locationName: "surroundExMode"
                                    },
                                    SurroundMode: {
                                        locationName: "surroundMode"
                                    }
                                }
                            },
                            Mp2Settings: {
                                locationName: "mp2Settings",
                                type: "structure",
                                members: {
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    Channels: {
                                        locationName: "channels",
                                        type: "integer"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    }
                                }
                            },
                            Mp3Settings: {
                                locationName: "mp3Settings",
                                type: "structure",
                                members: {
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    Channels: {
                                        locationName: "channels",
                                        type: "integer"
                                    },
                                    RateControlMode: {
                                        locationName: "rateControlMode"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    },
                                    VbrQuality: {
                                        locationName: "vbrQuality",
                                        type: "integer"
                                    }
                                }
                            },
                            OpusSettings: {
                                locationName: "opusSettings",
                                type: "structure",
                                members: {
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    Channels: {
                                        locationName: "channels",
                                        type: "integer"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    }
                                }
                            },
                            VorbisSettings: {
                                locationName: "vorbisSettings",
                                type: "structure",
                                members: {
                                    Channels: {
                                        locationName: "channels",
                                        type: "integer"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    },
                                    VbrQuality: {
                                        locationName: "vbrQuality",
                                        type: "integer"
                                    }
                                }
                            },
                            WavSettings: {
                                locationName: "wavSettings",
                                type: "structure",
                                members: {
                                    BitDepth: {
                                        locationName: "bitDepth",
                                        type: "integer"
                                    },
                                    Channels: {
                                        locationName: "channels",
                                        type: "integer"
                                    },
                                    Format: {
                                        locationName: "format"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    CustomLanguageCode: {
                        locationName: "customLanguageCode"
                    },
                    LanguageCode: {
                        locationName: "languageCode"
                    },
                    LanguageCodeControl: {
                        locationName: "languageCodeControl"
                    },
                    RemixSettings: {
                        shape: "S14",
                        locationName: "remixSettings"
                    },
                    StreamName: {
                        locationName: "streamName"
                    }
                }
            }
        },
        S8m: {
            type: "structure",
            members: {
                BurninDestinationSettings: {
                    locationName: "burninDestinationSettings",
                    type: "structure",
                    members: {
                        Alignment: {
                            locationName: "alignment"
                        },
                        BackgroundColor: {
                            locationName: "backgroundColor"
                        },
                        BackgroundOpacity: {
                            locationName: "backgroundOpacity",
                            type: "integer"
                        },
                        FontColor: {
                            locationName: "fontColor"
                        },
                        FontOpacity: {
                            locationName: "fontOpacity",
                            type: "integer"
                        },
                        FontResolution: {
                            locationName: "fontResolution",
                            type: "integer"
                        },
                        FontScript: {
                            locationName: "fontScript"
                        },
                        FontSize: {
                            locationName: "fontSize",
                            type: "integer"
                        },
                        OutlineColor: {
                            locationName: "outlineColor"
                        },
                        OutlineSize: {
                            locationName: "outlineSize",
                            type: "integer"
                        },
                        ShadowColor: {
                            locationName: "shadowColor"
                        },
                        ShadowOpacity: {
                            locationName: "shadowOpacity",
                            type: "integer"
                        },
                        ShadowXOffset: {
                            locationName: "shadowXOffset",
                            type: "integer"
                        },
                        ShadowYOffset: {
                            locationName: "shadowYOffset",
                            type: "integer"
                        },
                        TeletextSpacing: {
                            locationName: "teletextSpacing"
                        },
                        XPosition: {
                            locationName: "xPosition",
                            type: "integer"
                        },
                        YPosition: {
                            locationName: "yPosition",
                            type: "integer"
                        }
                    }
                },
                DestinationType: {
                    locationName: "destinationType"
                },
                DvbSubDestinationSettings: {
                    locationName: "dvbSubDestinationSettings",
                    type: "structure",
                    members: {
                        Alignment: {
                            locationName: "alignment"
                        },
                        BackgroundColor: {
                            locationName: "backgroundColor"
                        },
                        BackgroundOpacity: {
                            locationName: "backgroundOpacity",
                            type: "integer"
                        },
                        FontColor: {
                            locationName: "fontColor"
                        },
                        FontOpacity: {
                            locationName: "fontOpacity",
                            type: "integer"
                        },
                        FontResolution: {
                            locationName: "fontResolution",
                            type: "integer"
                        },
                        FontScript: {
                            locationName: "fontScript"
                        },
                        FontSize: {
                            locationName: "fontSize",
                            type: "integer"
                        },
                        OutlineColor: {
                            locationName: "outlineColor"
                        },
                        OutlineSize: {
                            locationName: "outlineSize",
                            type: "integer"
                        },
                        ShadowColor: {
                            locationName: "shadowColor"
                        },
                        ShadowOpacity: {
                            locationName: "shadowOpacity",
                            type: "integer"
                        },
                        ShadowXOffset: {
                            locationName: "shadowXOffset",
                            type: "integer"
                        },
                        ShadowYOffset: {
                            locationName: "shadowYOffset",
                            type: "integer"
                        },
                        SubtitlingType: {
                            locationName: "subtitlingType"
                        },
                        TeletextSpacing: {
                            locationName: "teletextSpacing"
                        },
                        XPosition: {
                            locationName: "xPosition",
                            type: "integer"
                        },
                        YPosition: {
                            locationName: "yPosition",
                            type: "integer"
                        }
                    }
                },
                EmbeddedDestinationSettings: {
                    locationName: "embeddedDestinationSettings",
                    type: "structure",
                    members: {
                        Destination608ChannelNumber: {
                            locationName: "destination608ChannelNumber",
                            type: "integer"
                        },
                        Destination708ServiceNumber: {
                            locationName: "destination708ServiceNumber",
                            type: "integer"
                        }
                    }
                },
                ImscDestinationSettings: {
                    locationName: "imscDestinationSettings",
                    type: "structure",
                    members: {
                        StylePassthrough: {
                            locationName: "stylePassthrough"
                        }
                    }
                },
                SccDestinationSettings: {
                    locationName: "sccDestinationSettings",
                    type: "structure",
                    members: {
                        Framerate: {
                            locationName: "framerate"
                        }
                    }
                },
                TeletextDestinationSettings: {
                    locationName: "teletextDestinationSettings",
                    type: "structure",
                    members: {
                        PageNumber: {
                            locationName: "pageNumber"
                        },
                        PageTypes: {
                            locationName: "pageTypes",
                            type: "list",
                            member: {}
                        }
                    }
                },
                TtmlDestinationSettings: {
                    locationName: "ttmlDestinationSettings",
                    type: "structure",
                    members: {
                        StylePassthrough: {
                            locationName: "stylePassthrough"
                        }
                    }
                },
                WebvttDestinationSettings: {
                    locationName: "webvttDestinationSettings",
                    type: "structure",
                    members: {
                        StylePassthrough: {
                            locationName: "stylePassthrough"
                        }
                    }
                }
            }
        },
        S9k: {
            type: "structure",
            members: {
                CmfcSettings: {
                    locationName: "cmfcSettings",
                    type: "structure",
                    members: {
                        AudioDuration: {
                            locationName: "audioDuration"
                        },
                        AudioGroupId: {
                            locationName: "audioGroupId"
                        },
                        AudioRenditionSets: {
                            locationName: "audioRenditionSets"
                        },
                        AudioTrackType: {
                            locationName: "audioTrackType"
                        },
                        DescriptiveVideoServiceFlag: {
                            locationName: "descriptiveVideoServiceFlag"
                        },
                        IFrameOnlyManifest: {
                            locationName: "iFrameOnlyManifest"
                        },
                        Scte35Esam: {
                            locationName: "scte35Esam"
                        },
                        Scte35Source: {
                            locationName: "scte35Source"
                        }
                    }
                },
                Container: {
                    locationName: "container"
                },
                F4vSettings: {
                    locationName: "f4vSettings",
                    type: "structure",
                    members: {
                        MoovPlacement: {
                            locationName: "moovPlacement"
                        }
                    }
                },
                M2tsSettings: {
                    locationName: "m2tsSettings",
                    type: "structure",
                    members: {
                        AudioBufferModel: {
                            locationName: "audioBufferModel"
                        },
                        AudioDuration: {
                            locationName: "audioDuration"
                        },
                        AudioFramesPerPes: {
                            locationName: "audioFramesPerPes",
                            type: "integer"
                        },
                        AudioPids: {
                            shape: "S9y",
                            locationName: "audioPids"
                        },
                        Bitrate: {
                            locationName: "bitrate",
                            type: "integer"
                        },
                        BufferModel: {
                            locationName: "bufferModel"
                        },
                        DvbNitSettings: {
                            locationName: "dvbNitSettings",
                            type: "structure",
                            members: {
                                NetworkId: {
                                    locationName: "networkId",
                                    type: "integer"
                                },
                                NetworkName: {
                                    locationName: "networkName"
                                },
                                NitInterval: {
                                    locationName: "nitInterval",
                                    type: "integer"
                                }
                            }
                        },
                        DvbSdtSettings: {
                            locationName: "dvbSdtSettings",
                            type: "structure",
                            members: {
                                OutputSdt: {
                                    locationName: "outputSdt"
                                },
                                SdtInterval: {
                                    locationName: "sdtInterval",
                                    type: "integer"
                                },
                                ServiceName: {
                                    locationName: "serviceName"
                                },
                                ServiceProviderName: {
                                    locationName: "serviceProviderName"
                                }
                            }
                        },
                        DvbSubPids: {
                            shape: "S9y",
                            locationName: "dvbSubPids"
                        },
                        DvbTdtSettings: {
                            locationName: "dvbTdtSettings",
                            type: "structure",
                            members: {
                                TdtInterval: {
                                    locationName: "tdtInterval",
                                    type: "integer"
                                }
                            }
                        },
                        DvbTeletextPid: {
                            locationName: "dvbTeletextPid",
                            type: "integer"
                        },
                        EbpAudioInterval: {
                            locationName: "ebpAudioInterval"
                        },
                        EbpPlacement: {
                            locationName: "ebpPlacement"
                        },
                        EsRateInPes: {
                            locationName: "esRateInPes"
                        },
                        ForceTsVideoEbpOrder: {
                            locationName: "forceTsVideoEbpOrder"
                        },
                        FragmentTime: {
                            locationName: "fragmentTime",
                            type: "double"
                        },
                        MaxPcrInterval: {
                            locationName: "maxPcrInterval",
                            type: "integer"
                        },
                        MinEbpInterval: {
                            locationName: "minEbpInterval",
                            type: "integer"
                        },
                        NielsenId3: {
                            locationName: "nielsenId3"
                        },
                        NullPacketBitrate: {
                            locationName: "nullPacketBitrate",
                            type: "double"
                        },
                        PatInterval: {
                            locationName: "patInterval",
                            type: "integer"
                        },
                        PcrControl: {
                            locationName: "pcrControl"
                        },
                        PcrPid: {
                            locationName: "pcrPid",
                            type: "integer"
                        },
                        PmtInterval: {
                            locationName: "pmtInterval",
                            type: "integer"
                        },
                        PmtPid: {
                            locationName: "pmtPid",
                            type: "integer"
                        },
                        PrivateMetadataPid: {
                            locationName: "privateMetadataPid",
                            type: "integer"
                        },
                        ProgramNumber: {
                            locationName: "programNumber",
                            type: "integer"
                        },
                        RateMode: {
                            locationName: "rateMode"
                        },
                        Scte35Esam: {
                            locationName: "scte35Esam",
                            type: "structure",
                            members: {
                                Scte35EsamPid: {
                                    locationName: "scte35EsamPid",
                                    type: "integer"
                                }
                            }
                        },
                        Scte35Pid: {
                            locationName: "scte35Pid",
                            type: "integer"
                        },
                        Scte35Source: {
                            locationName: "scte35Source"
                        },
                        SegmentationMarkers: {
                            locationName: "segmentationMarkers"
                        },
                        SegmentationStyle: {
                            locationName: "segmentationStyle"
                        },
                        SegmentationTime: {
                            locationName: "segmentationTime",
                            type: "double"
                        },
                        TimedMetadataPid: {
                            locationName: "timedMetadataPid",
                            type: "integer"
                        },
                        TransportStreamId: {
                            locationName: "transportStreamId",
                            type: "integer"
                        },
                        VideoPid: {
                            locationName: "videoPid",
                            type: "integer"
                        }
                    }
                },
                M3u8Settings: {
                    locationName: "m3u8Settings",
                    type: "structure",
                    members: {
                        AudioDuration: {
                            locationName: "audioDuration"
                        },
                        AudioFramesPerPes: {
                            locationName: "audioFramesPerPes",
                            type: "integer"
                        },
                        AudioPids: {
                            shape: "S9y",
                            locationName: "audioPids"
                        },
                        NielsenId3: {
                            locationName: "nielsenId3"
                        },
                        PatInterval: {
                            locationName: "patInterval",
                            type: "integer"
                        },
                        PcrControl: {
                            locationName: "pcrControl"
                        },
                        PcrPid: {
                            locationName: "pcrPid",
                            type: "integer"
                        },
                        PmtInterval: {
                            locationName: "pmtInterval",
                            type: "integer"
                        },
                        PmtPid: {
                            locationName: "pmtPid",
                            type: "integer"
                        },
                        PrivateMetadataPid: {
                            locationName: "privateMetadataPid",
                            type: "integer"
                        },
                        ProgramNumber: {
                            locationName: "programNumber",
                            type: "integer"
                        },
                        Scte35Pid: {
                            locationName: "scte35Pid",
                            type: "integer"
                        },
                        Scte35Source: {
                            locationName: "scte35Source"
                        },
                        TimedMetadata: {
                            locationName: "timedMetadata"
                        },
                        TimedMetadataPid: {
                            locationName: "timedMetadataPid",
                            type: "integer"
                        },
                        TransportStreamId: {
                            locationName: "transportStreamId",
                            type: "integer"
                        },
                        VideoPid: {
                            locationName: "videoPid",
                            type: "integer"
                        }
                    }
                },
                MovSettings: {
                    locationName: "movSettings",
                    type: "structure",
                    members: {
                        ClapAtom: {
                            locationName: "clapAtom"
                        },
                        CslgAtom: {
                            locationName: "cslgAtom"
                        },
                        Mpeg2FourCCControl: {
                            locationName: "mpeg2FourCCControl"
                        },
                        PaddingControl: {
                            locationName: "paddingControl"
                        },
                        Reference: {
                            locationName: "reference"
                        }
                    }
                },
                Mp4Settings: {
                    locationName: "mp4Settings",
                    type: "structure",
                    members: {
                        AudioDuration: {
                            locationName: "audioDuration"
                        },
                        CslgAtom: {
                            locationName: "cslgAtom"
                        },
                        CttsVersion: {
                            locationName: "cttsVersion",
                            type: "integer"
                        },
                        FreeSpaceBox: {
                            locationName: "freeSpaceBox"
                        },
                        MoovPlacement: {
                            locationName: "moovPlacement"
                        },
                        Mp4MajorBrand: {
                            locationName: "mp4MajorBrand"
                        }
                    }
                },
                MpdSettings: {
                    locationName: "mpdSettings",
                    type: "structure",
                    members: {
                        AccessibilityCaptionHints: {
                            locationName: "accessibilityCaptionHints"
                        },
                        AudioDuration: {
                            locationName: "audioDuration"
                        },
                        CaptionContainerType: {
                            locationName: "captionContainerType"
                        },
                        Scte35Esam: {
                            locationName: "scte35Esam"
                        },
                        Scte35Source: {
                            locationName: "scte35Source"
                        }
                    }
                },
                MxfSettings: {
                    locationName: "mxfSettings",
                    type: "structure",
                    members: {
                        AfdSignaling: {
                            locationName: "afdSignaling"
                        },
                        Profile: {
                            locationName: "profile"
                        }
                    }
                }
            }
        },
        S9y: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        Sbl: {
            type: "structure",
            members: {
                AfdSignaling: {
                    locationName: "afdSignaling"
                },
                AntiAlias: {
                    locationName: "antiAlias"
                },
                CodecSettings: {
                    locationName: "codecSettings",
                    type: "structure",
                    members: {
                        Av1Settings: {
                            locationName: "av1Settings",
                            type: "structure",
                            members: {
                                AdaptiveQuantization: {
                                    locationName: "adaptiveQuantization"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                GopSize: {
                                    locationName: "gopSize",
                                    type: "double"
                                },
                                MaxBitrate: {
                                    locationName: "maxBitrate",
                                    type: "integer"
                                },
                                NumberBFramesBetweenReferenceFrames: {
                                    locationName: "numberBFramesBetweenReferenceFrames",
                                    type: "integer"
                                },
                                QvbrSettings: {
                                    locationName: "qvbrSettings",
                                    type: "structure",
                                    members: {
                                        QvbrQualityLevel: {
                                            locationName: "qvbrQualityLevel",
                                            type: "integer"
                                        },
                                        QvbrQualityLevelFineTune: {
                                            locationName: "qvbrQualityLevelFineTune",
                                            type: "double"
                                        }
                                    }
                                },
                                RateControlMode: {
                                    locationName: "rateControlMode"
                                },
                                Slices: {
                                    locationName: "slices",
                                    type: "integer"
                                },
                                SpatialAdaptiveQuantization: {
                                    locationName: "spatialAdaptiveQuantization"
                                }
                            }
                        },
                        AvcIntraSettings: {
                            locationName: "avcIntraSettings",
                            type: "structure",
                            members: {
                                AvcIntraClass: {
                                    locationName: "avcIntraClass"
                                },
                                AvcIntraUhdSettings: {
                                    locationName: "avcIntraUhdSettings",
                                    type: "structure",
                                    members: {
                                        QualityTuningLevel: {
                                            locationName: "qualityTuningLevel"
                                        }
                                    }
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                InterlaceMode: {
                                    locationName: "interlaceMode"
                                },
                                ScanTypeConversionMode: {
                                    locationName: "scanTypeConversionMode"
                                },
                                SlowPal: {
                                    locationName: "slowPal"
                                },
                                Telecine: {
                                    locationName: "telecine"
                                }
                            }
                        },
                        Codec: {
                            locationName: "codec"
                        },
                        FrameCaptureSettings: {
                            locationName: "frameCaptureSettings",
                            type: "structure",
                            members: {
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                MaxCaptures: {
                                    locationName: "maxCaptures",
                                    type: "integer"
                                },
                                Quality: {
                                    locationName: "quality",
                                    type: "integer"
                                }
                            }
                        },
                        H264Settings: {
                            locationName: "h264Settings",
                            type: "structure",
                            members: {
                                AdaptiveQuantization: {
                                    locationName: "adaptiveQuantization"
                                },
                                Bitrate: {
                                    locationName: "bitrate",
                                    type: "integer"
                                },
                                CodecLevel: {
                                    locationName: "codecLevel"
                                },
                                CodecProfile: {
                                    locationName: "codecProfile"
                                },
                                DynamicSubGop: {
                                    locationName: "dynamicSubGop"
                                },
                                EntropyEncoding: {
                                    locationName: "entropyEncoding"
                                },
                                FieldEncoding: {
                                    locationName: "fieldEncoding"
                                },
                                FlickerAdaptiveQuantization: {
                                    locationName: "flickerAdaptiveQuantization"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                GopBReference: {
                                    locationName: "gopBReference"
                                },
                                GopClosedCadence: {
                                    locationName: "gopClosedCadence",
                                    type: "integer"
                                },
                                GopSize: {
                                    locationName: "gopSize",
                                    type: "double"
                                },
                                GopSizeUnits: {
                                    locationName: "gopSizeUnits"
                                },
                                HrdBufferInitialFillPercentage: {
                                    locationName: "hrdBufferInitialFillPercentage",
                                    type: "integer"
                                },
                                HrdBufferSize: {
                                    locationName: "hrdBufferSize",
                                    type: "integer"
                                },
                                InterlaceMode: {
                                    locationName: "interlaceMode"
                                },
                                MaxBitrate: {
                                    locationName: "maxBitrate",
                                    type: "integer"
                                },
                                MinIInterval: {
                                    locationName: "minIInterval",
                                    type: "integer"
                                },
                                NumberBFramesBetweenReferenceFrames: {
                                    locationName: "numberBFramesBetweenReferenceFrames",
                                    type: "integer"
                                },
                                NumberReferenceFrames: {
                                    locationName: "numberReferenceFrames",
                                    type: "integer"
                                },
                                ParControl: {
                                    locationName: "parControl"
                                },
                                ParDenominator: {
                                    locationName: "parDenominator",
                                    type: "integer"
                                },
                                ParNumerator: {
                                    locationName: "parNumerator",
                                    type: "integer"
                                },
                                QualityTuningLevel: {
                                    locationName: "qualityTuningLevel"
                                },
                                QvbrSettings: {
                                    locationName: "qvbrSettings",
                                    type: "structure",
                                    members: {
                                        MaxAverageBitrate: {
                                            locationName: "maxAverageBitrate",
                                            type: "integer"
                                        },
                                        QvbrQualityLevel: {
                                            locationName: "qvbrQualityLevel",
                                            type: "integer"
                                        },
                                        QvbrQualityLevelFineTune: {
                                            locationName: "qvbrQualityLevelFineTune",
                                            type: "double"
                                        }
                                    }
                                },
                                RateControlMode: {
                                    locationName: "rateControlMode"
                                },
                                RepeatPps: {
                                    locationName: "repeatPps"
                                },
                                ScanTypeConversionMode: {
                                    locationName: "scanTypeConversionMode"
                                },
                                SceneChangeDetect: {
                                    locationName: "sceneChangeDetect"
                                },
                                Slices: {
                                    locationName: "slices",
                                    type: "integer"
                                },
                                SlowPal: {
                                    locationName: "slowPal"
                                },
                                Softness: {
                                    locationName: "softness",
                                    type: "integer"
                                },
                                SpatialAdaptiveQuantization: {
                                    locationName: "spatialAdaptiveQuantization"
                                },
                                Syntax: {
                                    locationName: "syntax"
                                },
                                Telecine: {
                                    locationName: "telecine"
                                },
                                TemporalAdaptiveQuantization: {
                                    locationName: "temporalAdaptiveQuantization"
                                },
                                UnregisteredSeiTimecode: {
                                    locationName: "unregisteredSeiTimecode"
                                }
                            }
                        },
                        H265Settings: {
                            locationName: "h265Settings",
                            type: "structure",
                            members: {
                                AdaptiveQuantization: {
                                    locationName: "adaptiveQuantization"
                                },
                                AlternateTransferFunctionSei: {
                                    locationName: "alternateTransferFunctionSei"
                                },
                                Bitrate: {
                                    locationName: "bitrate",
                                    type: "integer"
                                },
                                CodecLevel: {
                                    locationName: "codecLevel"
                                },
                                CodecProfile: {
                                    locationName: "codecProfile"
                                },
                                DynamicSubGop: {
                                    locationName: "dynamicSubGop"
                                },
                                FlickerAdaptiveQuantization: {
                                    locationName: "flickerAdaptiveQuantization"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                GopBReference: {
                                    locationName: "gopBReference"
                                },
                                GopClosedCadence: {
                                    locationName: "gopClosedCadence",
                                    type: "integer"
                                },
                                GopSize: {
                                    locationName: "gopSize",
                                    type: "double"
                                },
                                GopSizeUnits: {
                                    locationName: "gopSizeUnits"
                                },
                                HrdBufferInitialFillPercentage: {
                                    locationName: "hrdBufferInitialFillPercentage",
                                    type: "integer"
                                },
                                HrdBufferSize: {
                                    locationName: "hrdBufferSize",
                                    type: "integer"
                                },
                                InterlaceMode: {
                                    locationName: "interlaceMode"
                                },
                                MaxBitrate: {
                                    locationName: "maxBitrate",
                                    type: "integer"
                                },
                                MinIInterval: {
                                    locationName: "minIInterval",
                                    type: "integer"
                                },
                                NumberBFramesBetweenReferenceFrames: {
                                    locationName: "numberBFramesBetweenReferenceFrames",
                                    type: "integer"
                                },
                                NumberReferenceFrames: {
                                    locationName: "numberReferenceFrames",
                                    type: "integer"
                                },
                                ParControl: {
                                    locationName: "parControl"
                                },
                                ParDenominator: {
                                    locationName: "parDenominator",
                                    type: "integer"
                                },
                                ParNumerator: {
                                    locationName: "parNumerator",
                                    type: "integer"
                                },
                                QualityTuningLevel: {
                                    locationName: "qualityTuningLevel"
                                },
                                QvbrSettings: {
                                    locationName: "qvbrSettings",
                                    type: "structure",
                                    members: {
                                        MaxAverageBitrate: {
                                            locationName: "maxAverageBitrate",
                                            type: "integer"
                                        },
                                        QvbrQualityLevel: {
                                            locationName: "qvbrQualityLevel",
                                            type: "integer"
                                        },
                                        QvbrQualityLevelFineTune: {
                                            locationName: "qvbrQualityLevelFineTune",
                                            type: "double"
                                        }
                                    }
                                },
                                RateControlMode: {
                                    locationName: "rateControlMode"
                                },
                                SampleAdaptiveOffsetFilterMode: {
                                    locationName: "sampleAdaptiveOffsetFilterMode"
                                },
                                ScanTypeConversionMode: {
                                    locationName: "scanTypeConversionMode"
                                },
                                SceneChangeDetect: {
                                    locationName: "sceneChangeDetect"
                                },
                                Slices: {
                                    locationName: "slices",
                                    type: "integer"
                                },
                                SlowPal: {
                                    locationName: "slowPal"
                                },
                                SpatialAdaptiveQuantization: {
                                    locationName: "spatialAdaptiveQuantization"
                                },
                                Telecine: {
                                    locationName: "telecine"
                                },
                                TemporalAdaptiveQuantization: {
                                    locationName: "temporalAdaptiveQuantization"
                                },
                                TemporalIds: {
                                    locationName: "temporalIds"
                                },
                                Tiles: {
                                    locationName: "tiles"
                                },
                                UnregisteredSeiTimecode: {
                                    locationName: "unregisteredSeiTimecode"
                                },
                                WriteMp4PackagingType: {
                                    locationName: "writeMp4PackagingType"
                                }
                            }
                        },
                        Mpeg2Settings: {
                            locationName: "mpeg2Settings",
                            type: "structure",
                            members: {
                                AdaptiveQuantization: {
                                    locationName: "adaptiveQuantization"
                                },
                                Bitrate: {
                                    locationName: "bitrate",
                                    type: "integer"
                                },
                                CodecLevel: {
                                    locationName: "codecLevel"
                                },
                                CodecProfile: {
                                    locationName: "codecProfile"
                                },
                                DynamicSubGop: {
                                    locationName: "dynamicSubGop"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                GopClosedCadence: {
                                    locationName: "gopClosedCadence",
                                    type: "integer"
                                },
                                GopSize: {
                                    locationName: "gopSize",
                                    type: "double"
                                },
                                GopSizeUnits: {
                                    locationName: "gopSizeUnits"
                                },
                                HrdBufferInitialFillPercentage: {
                                    locationName: "hrdBufferInitialFillPercentage",
                                    type: "integer"
                                },
                                HrdBufferSize: {
                                    locationName: "hrdBufferSize",
                                    type: "integer"
                                },
                                InterlaceMode: {
                                    locationName: "interlaceMode"
                                },
                                IntraDcPrecision: {
                                    locationName: "intraDcPrecision"
                                },
                                MaxBitrate: {
                                    locationName: "maxBitrate",
                                    type: "integer"
                                },
                                MinIInterval: {
                                    locationName: "minIInterval",
                                    type: "integer"
                                },
                                NumberBFramesBetweenReferenceFrames: {
                                    locationName: "numberBFramesBetweenReferenceFrames",
                                    type: "integer"
                                },
                                ParControl: {
                                    locationName: "parControl"
                                },
                                ParDenominator: {
                                    locationName: "parDenominator",
                                    type: "integer"
                                },
                                ParNumerator: {
                                    locationName: "parNumerator",
                                    type: "integer"
                                },
                                QualityTuningLevel: {
                                    locationName: "qualityTuningLevel"
                                },
                                RateControlMode: {
                                    locationName: "rateControlMode"
                                },
                                ScanTypeConversionMode: {
                                    locationName: "scanTypeConversionMode"
                                },
                                SceneChangeDetect: {
                                    locationName: "sceneChangeDetect"
                                },
                                SlowPal: {
                                    locationName: "slowPal"
                                },
                                Softness: {
                                    locationName: "softness",
                                    type: "integer"
                                },
                                SpatialAdaptiveQuantization: {
                                    locationName: "spatialAdaptiveQuantization"
                                },
                                Syntax: {
                                    locationName: "syntax"
                                },
                                Telecine: {
                                    locationName: "telecine"
                                },
                                TemporalAdaptiveQuantization: {
                                    locationName: "temporalAdaptiveQuantization"
                                }
                            }
                        },
                        ProresSettings: {
                            locationName: "proresSettings",
                            type: "structure",
                            members: {
                                CodecProfile: {
                                    locationName: "codecProfile"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                InterlaceMode: {
                                    locationName: "interlaceMode"
                                },
                                ParControl: {
                                    locationName: "parControl"
                                },
                                ParDenominator: {
                                    locationName: "parDenominator",
                                    type: "integer"
                                },
                                ParNumerator: {
                                    locationName: "parNumerator",
                                    type: "integer"
                                },
                                ScanTypeConversionMode: {
                                    locationName: "scanTypeConversionMode"
                                },
                                SlowPal: {
                                    locationName: "slowPal"
                                },
                                Telecine: {
                                    locationName: "telecine"
                                }
                            }
                        },
                        Vc3Settings: {
                            locationName: "vc3Settings",
                            type: "structure",
                            members: {
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                InterlaceMode: {
                                    locationName: "interlaceMode"
                                },
                                ScanTypeConversionMode: {
                                    locationName: "scanTypeConversionMode"
                                },
                                SlowPal: {
                                    locationName: "slowPal"
                                },
                                Telecine: {
                                    locationName: "telecine"
                                },
                                Vc3Class: {
                                    locationName: "vc3Class"
                                }
                            }
                        },
                        Vp8Settings: {
                            locationName: "vp8Settings",
                            type: "structure",
                            members: {
                                Bitrate: {
                                    locationName: "bitrate",
                                    type: "integer"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                GopSize: {
                                    locationName: "gopSize",
                                    type: "double"
                                },
                                HrdBufferSize: {
                                    locationName: "hrdBufferSize",
                                    type: "integer"
                                },
                                MaxBitrate: {
                                    locationName: "maxBitrate",
                                    type: "integer"
                                },
                                ParControl: {
                                    locationName: "parControl"
                                },
                                ParDenominator: {
                                    locationName: "parDenominator",
                                    type: "integer"
                                },
                                ParNumerator: {
                                    locationName: "parNumerator",
                                    type: "integer"
                                },
                                QualityTuningLevel: {
                                    locationName: "qualityTuningLevel"
                                },
                                RateControlMode: {
                                    locationName: "rateControlMode"
                                }
                            }
                        },
                        Vp9Settings: {
                            locationName: "vp9Settings",
                            type: "structure",
                            members: {
                                Bitrate: {
                                    locationName: "bitrate",
                                    type: "integer"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                GopSize: {
                                    locationName: "gopSize",
                                    type: "double"
                                },
                                HrdBufferSize: {
                                    locationName: "hrdBufferSize",
                                    type: "integer"
                                },
                                MaxBitrate: {
                                    locationName: "maxBitrate",
                                    type: "integer"
                                },
                                ParControl: {
                                    locationName: "parControl"
                                },
                                ParDenominator: {
                                    locationName: "parDenominator",
                                    type: "integer"
                                },
                                ParNumerator: {
                                    locationName: "parNumerator",
                                    type: "integer"
                                },
                                QualityTuningLevel: {
                                    locationName: "qualityTuningLevel"
                                },
                                RateControlMode: {
                                    locationName: "rateControlMode"
                                }
                            }
                        }
                    }
                },
                ColorMetadata: {
                    locationName: "colorMetadata"
                },
                Crop: {
                    shape: "S20",
                    locationName: "crop"
                },
                DropFrameTimecode: {
                    locationName: "dropFrameTimecode"
                },
                FixedAfd: {
                    locationName: "fixedAfd",
                    type: "integer"
                },
                Height: {
                    locationName: "height",
                    type: "integer"
                },
                Position: {
                    shape: "S20",
                    locationName: "position"
                },
                RespondToAfd: {
                    locationName: "respondToAfd"
                },
                ScalingBehavior: {
                    locationName: "scalingBehavior"
                },
                Sharpness: {
                    locationName: "sharpness",
                    type: "integer"
                },
                TimecodeInsertion: {
                    locationName: "timecodeInsertion"
                },
                VideoPreprocessors: {
                    locationName: "videoPreprocessors",
                    type: "structure",
                    members: {
                        ColorCorrector: {
                            locationName: "colorCorrector",
                            type: "structure",
                            members: {
                                Brightness: {
                                    locationName: "brightness",
                                    type: "integer"
                                },
                                ColorSpaceConversion: {
                                    locationName: "colorSpaceConversion"
                                },
                                Contrast: {
                                    locationName: "contrast",
                                    type: "integer"
                                },
                                Hdr10Metadata: {
                                    shape: "S2x",
                                    locationName: "hdr10Metadata"
                                },
                                Hue: {
                                    locationName: "hue",
                                    type: "integer"
                                },
                                Saturation: {
                                    locationName: "saturation",
                                    type: "integer"
                                }
                            }
                        },
                        Deinterlacer: {
                            locationName: "deinterlacer",
                            type: "structure",
                            members: {
                                Algorithm: {
                                    locationName: "algorithm"
                                },
                                Control: {
                                    locationName: "control"
                                },
                                Mode: {
                                    locationName: "mode"
                                }
                            }
                        },
                        DolbyVision: {
                            locationName: "dolbyVision",
                            type: "structure",
                            members: {
                                L6Metadata: {
                                    locationName: "l6Metadata",
                                    type: "structure",
                                    members: {
                                        MaxCll: {
                                            locationName: "maxCll",
                                            type: "integer"
                                        },
                                        MaxFall: {
                                            locationName: "maxFall",
                                            type: "integer"
                                        }
                                    }
                                },
                                L6Mode: {
                                    locationName: "l6Mode"
                                },
                                Profile: {
                                    locationName: "profile"
                                }
                            }
                        },
                        ImageInserter: {
                            shape: "S2d",
                            locationName: "imageInserter"
                        },
                        NoiseReducer: {
                            locationName: "noiseReducer",
                            type: "structure",
                            members: {
                                Filter: {
                                    locationName: "filter"
                                },
                                FilterSettings: {
                                    locationName: "filterSettings",
                                    type: "structure",
                                    members: {
                                        Strength: {
                                            locationName: "strength",
                                            type: "integer"
                                        }
                                    }
                                },
                                SpatialFilterSettings: {
                                    locationName: "spatialFilterSettings",
                                    type: "structure",
                                    members: {
                                        PostFilterSharpenStrength: {
                                            locationName: "postFilterSharpenStrength",
                                            type: "integer"
                                        },
                                        Speed: {
                                            locationName: "speed",
                                            type: "integer"
                                        },
                                        Strength: {
                                            locationName: "strength",
                                            type: "integer"
                                        }
                                    }
                                },
                                TemporalFilterSettings: {
                                    locationName: "temporalFilterSettings",
                                    type: "structure",
                                    members: {
                                        AggressiveMode: {
                                            locationName: "aggressiveMode",
                                            type: "integer"
                                        },
                                        PostTemporalSharpening: {
                                            locationName: "postTemporalSharpening"
                                        },
                                        Speed: {
                                            locationName: "speed",
                                            type: "integer"
                                        },
                                        Strength: {
                                            locationName: "strength",
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        },
                        PartnerWatermarking: {
                            locationName: "partnerWatermarking",
                            type: "structure",
                            members: {
                                NexguardFileMarkerSettings: {
                                    locationName: "nexguardFileMarkerSettings",
                                    type: "structure",
                                    members: {
                                        License: {
                                            locationName: "license"
                                        },
                                        Payload: {
                                            locationName: "payload",
                                            type: "integer"
                                        },
                                        Preset: {
                                            locationName: "preset"
                                        },
                                        Strength: {
                                            locationName: "strength"
                                        }
                                    }
                                }
                            }
                        },
                        TimecodeBurnin: {
                            locationName: "timecodeBurnin",
                            type: "structure",
                            members: {
                                FontSize: {
                                    locationName: "fontSize",
                                    type: "integer"
                                },
                                Position: {
                                    locationName: "position"
                                },
                                Prefix: {
                                    locationName: "prefix"
                                }
                            }
                        }
                    }
                },
                Width: {
                    locationName: "width",
                    type: "integer"
                }
            }
        },
        Sgl: {
            type: "structure",
            members: {
                Anchor: {
                    locationName: "anchor"
                },
                Source: {
                    locationName: "source"
                },
                Start: {
                    locationName: "start"
                },
                TimestampOffset: {
                    locationName: "timestampOffset"
                }
            }
        },
        Sgo: {
            type: "structure",
            members: {
                Id3Insertions: {
                    locationName: "id3Insertions",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Id3: {
                                locationName: "id3"
                            },
                            Timecode: {
                                locationName: "timecode"
                            }
                        }
                    }
                }
            }
        },
        Sgu: {
            type: "map",
            key: {},
            value: {}
        },
        Sgw: {
            type: "structure",
            members: {
                AccelerationSettings: {
                    shape: "S7",
                    locationName: "accelerationSettings"
                },
                AccelerationStatus: {
                    locationName: "accelerationStatus"
                },
                Arn: {
                    locationName: "arn"
                },
                BillingTagsSource: {
                    locationName: "billingTagsSource"
                },
                CreatedAt: {
                    shape: "Sgy",
                    locationName: "createdAt"
                },
                CurrentPhase: {
                    locationName: "currentPhase"
                },
                ErrorCode: {
                    locationName: "errorCode",
                    type: "integer"
                },
                ErrorMessage: {
                    locationName: "errorMessage"
                },
                HopDestinations: {
                    shape: "Sa",
                    locationName: "hopDestinations"
                },
                Id: {
                    locationName: "id"
                },
                JobPercentComplete: {
                    locationName: "jobPercentComplete",
                    type: "integer"
                },
                JobTemplate: {
                    locationName: "jobTemplate"
                },
                Messages: {
                    locationName: "messages",
                    type: "structure",
                    members: {
                        Info: {
                            shape: "Sh1",
                            locationName: "info"
                        },
                        Warning: {
                            shape: "Sh1",
                            locationName: "warning"
                        }
                    }
                },
                OutputGroupDetails: {
                    locationName: "outputGroupDetails",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            OutputDetails: {
                                locationName: "outputDetails",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        DurationInMs: {
                                            locationName: "durationInMs",
                                            type: "integer"
                                        },
                                        VideoDetails: {
                                            locationName: "videoDetails",
                                            type: "structure",
                                            members: {
                                                HeightInPx: {
                                                    locationName: "heightInPx",
                                                    type: "integer"
                                                },
                                                WidthInPx: {
                                                    locationName: "widthInPx",
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                Priority: {
                    locationName: "priority",
                    type: "integer"
                },
                Queue: {
                    locationName: "queue"
                },
                QueueTransitions: {
                    locationName: "queueTransitions",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            DestinationQueue: {
                                locationName: "destinationQueue"
                            },
                            SourceQueue: {
                                locationName: "sourceQueue"
                            },
                            Timestamp: {
                                shape: "Sgy",
                                locationName: "timestamp"
                            }
                        }
                    }
                },
                RetryCount: {
                    locationName: "retryCount",
                    type: "integer"
                },
                Role: {
                    locationName: "role"
                },
                Settings: {
                    shape: "Se",
                    locationName: "settings"
                },
                SimulateReservedQueue: {
                    locationName: "simulateReservedQueue"
                },
                Status: {
                    locationName: "status"
                },
                StatusUpdateInterval: {
                    locationName: "statusUpdateInterval"
                },
                Timing: {
                    locationName: "timing",
                    type: "structure",
                    members: {
                        FinishTime: {
                            shape: "Sgy",
                            locationName: "finishTime"
                        },
                        StartTime: {
                            shape: "Sgy",
                            locationName: "startTime"
                        },
                        SubmitTime: {
                            shape: "Sgy",
                            locationName: "submitTime"
                        }
                    }
                },
                UserMetadata: {
                    shape: "Sgu",
                    locationName: "userMetadata"
                }
            },
            required: [ "Role", "Settings" ]
        },
        Sgy: {
            type: "timestamp",
            timestampFormat: "unixTimestamp"
        },
        Sh1: {
            type: "list",
            member: {}
        },
        Shc: {
            type: "structure",
            members: {
                AdAvailOffset: {
                    locationName: "adAvailOffset",
                    type: "integer"
                },
                AvailBlanking: {
                    shape: "Sg",
                    locationName: "availBlanking"
                },
                Esam: {
                    shape: "Si",
                    locationName: "esam"
                },
                Inputs: {
                    locationName: "inputs",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            AudioSelectorGroups: {
                                shape: "Sq",
                                locationName: "audioSelectorGroups"
                            },
                            AudioSelectors: {
                                shape: "Su",
                                locationName: "audioSelectors"
                            },
                            CaptionSelectors: {
                                shape: "S1e",
                                locationName: "captionSelectors"
                            },
                            Crop: {
                                shape: "S20",
                                locationName: "crop"
                            },
                            DeblockFilter: {
                                locationName: "deblockFilter"
                            },
                            DenoiseFilter: {
                                locationName: "denoiseFilter"
                            },
                            FilterEnable: {
                                locationName: "filterEnable"
                            },
                            FilterStrength: {
                                locationName: "filterStrength",
                                type: "integer"
                            },
                            ImageInserter: {
                                shape: "S2d",
                                locationName: "imageInserter"
                            },
                            InputClippings: {
                                shape: "S2k",
                                locationName: "inputClippings"
                            },
                            InputScanType: {
                                locationName: "inputScanType"
                            },
                            Position: {
                                shape: "S20",
                                locationName: "position"
                            },
                            ProgramNumber: {
                                locationName: "programNumber",
                                type: "integer"
                            },
                            PsiControl: {
                                locationName: "psiControl"
                            },
                            TimecodeSource: {
                                locationName: "timecodeSource"
                            },
                            TimecodeStart: {
                                locationName: "timecodeStart"
                            },
                            VideoSelector: {
                                shape: "S2t",
                                locationName: "videoSelector"
                            }
                        }
                    }
                },
                MotionImageInserter: {
                    shape: "S31",
                    locationName: "motionImageInserter"
                },
                NielsenConfiguration: {
                    shape: "S39",
                    locationName: "nielsenConfiguration"
                },
                NielsenNonLinearWatermark: {
                    shape: "S3b",
                    locationName: "nielsenNonLinearWatermark"
                },
                OutputGroups: {
                    shape: "S3l",
                    locationName: "outputGroups"
                },
                TimecodeConfig: {
                    shape: "Sgl",
                    locationName: "timecodeConfig"
                },
                TimedMetadataInsertion: {
                    shape: "Sgo",
                    locationName: "timedMetadataInsertion"
                }
            }
        },
        Shg: {
            type: "structure",
            members: {
                AccelerationSettings: {
                    shape: "S7",
                    locationName: "accelerationSettings"
                },
                Arn: {
                    locationName: "arn"
                },
                Category: {
                    locationName: "category"
                },
                CreatedAt: {
                    shape: "Sgy",
                    locationName: "createdAt"
                },
                Description: {
                    locationName: "description"
                },
                HopDestinations: {
                    shape: "Sa",
                    locationName: "hopDestinations"
                },
                LastUpdated: {
                    shape: "Sgy",
                    locationName: "lastUpdated"
                },
                Name: {
                    locationName: "name"
                },
                Priority: {
                    locationName: "priority",
                    type: "integer"
                },
                Queue: {
                    locationName: "queue"
                },
                Settings: {
                    shape: "Shc",
                    locationName: "settings"
                },
                StatusUpdateInterval: {
                    locationName: "statusUpdateInterval"
                },
                Type: {
                    locationName: "type"
                }
            },
            required: [ "Settings", "Name" ]
        },
        Shj: {
            type: "structure",
            members: {
                AudioDescriptions: {
                    shape: "S65",
                    locationName: "audioDescriptions"
                },
                CaptionDescriptions: {
                    locationName: "captionDescriptions",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            CustomLanguageCode: {
                                locationName: "customLanguageCode"
                            },
                            DestinationSettings: {
                                shape: "S8m",
                                locationName: "destinationSettings"
                            },
                            LanguageCode: {
                                locationName: "languageCode"
                            },
                            LanguageDescription: {
                                locationName: "languageDescription"
                            }
                        }
                    }
                },
                ContainerSettings: {
                    shape: "S9k",
                    locationName: "containerSettings"
                },
                VideoDescription: {
                    shape: "Sbl",
                    locationName: "videoDescription"
                }
            }
        },
        Shn: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                Category: {
                    locationName: "category"
                },
                CreatedAt: {
                    shape: "Sgy",
                    locationName: "createdAt"
                },
                Description: {
                    locationName: "description"
                },
                LastUpdated: {
                    shape: "Sgy",
                    locationName: "lastUpdated"
                },
                Name: {
                    locationName: "name"
                },
                Settings: {
                    shape: "Shj",
                    locationName: "settings"
                },
                Type: {
                    locationName: "type"
                }
            },
            required: [ "Settings", "Name" ]
        },
        Shq: {
            type: "structure",
            members: {
                Commitment: {
                    locationName: "commitment"
                },
                RenewalType: {
                    locationName: "renewalType"
                },
                ReservedSlots: {
                    locationName: "reservedSlots",
                    type: "integer"
                }
            },
            required: [ "Commitment", "ReservedSlots", "RenewalType" ]
        },
        Shv: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                CreatedAt: {
                    shape: "Sgy",
                    locationName: "createdAt"
                },
                Description: {
                    locationName: "description"
                },
                LastUpdated: {
                    shape: "Sgy",
                    locationName: "lastUpdated"
                },
                Name: {
                    locationName: "name"
                },
                PricingPlan: {
                    locationName: "pricingPlan"
                },
                ProgressingJobsCount: {
                    locationName: "progressingJobsCount",
                    type: "integer"
                },
                ReservationPlan: {
                    locationName: "reservationPlan",
                    type: "structure",
                    members: {
                        Commitment: {
                            locationName: "commitment"
                        },
                        ExpiresAt: {
                            shape: "Sgy",
                            locationName: "expiresAt"
                        },
                        PurchasedAt: {
                            shape: "Sgy",
                            locationName: "purchasedAt"
                        },
                        RenewalType: {
                            locationName: "renewalType"
                        },
                        ReservedSlots: {
                            locationName: "reservedSlots",
                            type: "integer"
                        },
                        Status: {
                            locationName: "status"
                        }
                    }
                },
                Status: {
                    locationName: "status"
                },
                SubmittedJobsCount: {
                    locationName: "submittedJobsCount",
                    type: "integer"
                },
                Type: {
                    locationName: "type"
                }
            },
            required: [ "Name" ]
        }
    },
    paginators: {
        DescribeEndpoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Endpoints"
        },
        ListJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Jobs"
        },
        ListPresets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Presets"
        },
        ListJobTemplates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobTemplates"
        },
        ListQueues: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Queues"
        }
    }
};

AWS.apiLoader.services["medialive"] = {};

AWS.MediaLive = AWS.Service.defineService("medialive", [ "2017-10-14" ]);

AWS.apiLoader.services["medialive"]["2017-10-14"] = {
    metadata: {
        apiVersion: "2017-10-14",
        endpointPrefix: "medialive",
        signingName: "medialive",
        serviceFullName: "AWS Elemental MediaLive",
        serviceId: "MediaLive",
        protocol: "rest-json",
        uid: "medialive-2017-10-14",
        signatureVersion: "v4",
        serviceAbbreviation: "MediaLive",
        jsonVersion: "1.1"
    },
    operations: {
        AcceptInputDeviceTransfer: {
            http: {
                requestUri: "/prod/inputDevices/{inputDeviceId}/accept",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchDelete: {
            http: {
                requestUri: "/prod/batch/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelIds: {
                        shape: "S5",
                        locationName: "channelIds"
                    },
                    InputIds: {
                        shape: "S5",
                        locationName: "inputIds"
                    },
                    InputSecurityGroupIds: {
                        shape: "S5",
                        locationName: "inputSecurityGroupIds"
                    },
                    MultiplexIds: {
                        shape: "S5",
                        locationName: "multiplexIds"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failed: {
                        shape: "S7",
                        locationName: "failed"
                    },
                    Successful: {
                        shape: "S9",
                        locationName: "successful"
                    }
                }
            }
        },
        BatchStart: {
            http: {
                requestUri: "/prod/batch/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelIds: {
                        shape: "S5",
                        locationName: "channelIds"
                    },
                    MultiplexIds: {
                        shape: "S5",
                        locationName: "multiplexIds"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failed: {
                        shape: "S7",
                        locationName: "failed"
                    },
                    Successful: {
                        shape: "S9",
                        locationName: "successful"
                    }
                }
            }
        },
        BatchStop: {
            http: {
                requestUri: "/prod/batch/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelIds: {
                        shape: "S5",
                        locationName: "channelIds"
                    },
                    MultiplexIds: {
                        shape: "S5",
                        locationName: "multiplexIds"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failed: {
                        shape: "S7",
                        locationName: "failed"
                    },
                    Successful: {
                        shape: "S9",
                        locationName: "successful"
                    }
                }
            }
        },
        BatchUpdateSchedule: {
            http: {
                method: "PUT",
                requestUri: "/prod/channels/{channelId}/schedule",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    },
                    Creates: {
                        locationName: "creates",
                        type: "structure",
                        members: {
                            ScheduleActions: {
                                shape: "Sh",
                                locationName: "scheduleActions"
                            }
                        },
                        required: [ "ScheduleActions" ]
                    },
                    Deletes: {
                        locationName: "deletes",
                        type: "structure",
                        members: {
                            ActionNames: {
                                shape: "S5",
                                locationName: "actionNames"
                            }
                        },
                        required: [ "ActionNames" ]
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    Creates: {
                        locationName: "creates",
                        type: "structure",
                        members: {
                            ScheduleActions: {
                                shape: "Sh",
                                locationName: "scheduleActions"
                            }
                        },
                        required: [ "ScheduleActions" ]
                    },
                    Deletes: {
                        locationName: "deletes",
                        type: "structure",
                        members: {
                            ScheduleActions: {
                                shape: "Sh",
                                locationName: "scheduleActions"
                            }
                        },
                        required: [ "ScheduleActions" ]
                    }
                }
            }
        },
        CancelInputDeviceTransfer: {
            http: {
                requestUri: "/prod/inputDevices/{inputDeviceId}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateChannel: {
            http: {
                requestUri: "/prod/channels",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    CdiInputSpecification: {
                        shape: "S20",
                        locationName: "cdiInputSpecification"
                    },
                    ChannelClass: {
                        locationName: "channelClass"
                    },
                    Destinations: {
                        shape: "S23",
                        locationName: "destinations"
                    },
                    EncoderSettings: {
                        shape: "S2b",
                        locationName: "encoderSettings"
                    },
                    InputAttachments: {
                        shape: "Sc6",
                        locationName: "inputAttachments"
                    },
                    InputSpecification: {
                        shape: "Sdo",
                        locationName: "inputSpecification"
                    },
                    LogLevel: {
                        locationName: "logLevel"
                    },
                    Name: {
                        locationName: "name"
                    },
                    RequestId: {
                        locationName: "requestId",
                        idempotencyToken: true
                    },
                    Reserved: {
                        locationName: "reserved",
                        deprecated: true
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    },
                    Vpc: {
                        locationName: "vpc",
                        type: "structure",
                        members: {
                            PublicAddressAllocationIds: {
                                shape: "S5",
                                locationName: "publicAddressAllocationIds"
                            },
                            SecurityGroupIds: {
                                shape: "S5",
                                locationName: "securityGroupIds"
                            },
                            SubnetIds: {
                                shape: "S5",
                                locationName: "subnetIds"
                            }
                        },
                        required: [ "SubnetIds" ]
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        shape: "Sdw",
                        locationName: "channel"
                    }
                }
            }
        },
        CreateInput: {
            http: {
                requestUri: "/prod/inputs",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Destinations: {
                        shape: "Se4",
                        locationName: "destinations"
                    },
                    InputDevices: {
                        shape: "Se6",
                        locationName: "inputDevices"
                    },
                    InputSecurityGroups: {
                        shape: "S5",
                        locationName: "inputSecurityGroups"
                    },
                    MediaConnectFlows: {
                        shape: "Se8",
                        locationName: "mediaConnectFlows"
                    },
                    Name: {
                        locationName: "name"
                    },
                    RequestId: {
                        locationName: "requestId",
                        idempotencyToken: true
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    Sources: {
                        shape: "Sea",
                        locationName: "sources"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    },
                    Type: {
                        locationName: "type"
                    },
                    Vpc: {
                        locationName: "vpc",
                        type: "structure",
                        members: {
                            SecurityGroupIds: {
                                shape: "S5",
                                locationName: "securityGroupIds"
                            },
                            SubnetIds: {
                                shape: "S5",
                                locationName: "subnetIds"
                            }
                        },
                        required: [ "SubnetIds" ]
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Input: {
                        shape: "Sef",
                        locationName: "input"
                    }
                }
            }
        },
        CreateInputSecurityGroup: {
            http: {
                requestUri: "/prod/inputSecurityGroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    },
                    WhitelistRules: {
                        shape: "Ser",
                        locationName: "whitelistRules"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityGroup: {
                        shape: "Seu",
                        locationName: "securityGroup"
                    }
                }
            }
        },
        CreateMultiplex: {
            http: {
                requestUri: "/prod/multiplexes",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    AvailabilityZones: {
                        shape: "S5",
                        locationName: "availabilityZones"
                    },
                    MultiplexSettings: {
                        shape: "Sez",
                        locationName: "multiplexSettings"
                    },
                    Name: {
                        locationName: "name"
                    },
                    RequestId: {
                        locationName: "requestId",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    }
                },
                required: [ "RequestId", "MultiplexSettings", "AvailabilityZones", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Multiplex: {
                        shape: "Sf4",
                        locationName: "multiplex"
                    }
                }
            }
        },
        CreateMultiplexProgram: {
            http: {
                requestUri: "/prod/multiplexes/{multiplexId}/programs",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    },
                    MultiplexProgramSettings: {
                        shape: "Sfa",
                        locationName: "multiplexProgramSettings"
                    },
                    ProgramName: {
                        locationName: "programName"
                    },
                    RequestId: {
                        locationName: "requestId",
                        idempotencyToken: true
                    }
                },
                required: [ "MultiplexId", "RequestId", "MultiplexProgramSettings", "ProgramName" ]
            },
            output: {
                type: "structure",
                members: {
                    MultiplexProgram: {
                        shape: "Sfj",
                        locationName: "multiplexProgram"
                    }
                }
            }
        },
        CreatePartnerInput: {
            http: {
                requestUri: "/prod/inputs/{inputId}/partners",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    InputId: {
                        location: "uri",
                        locationName: "inputId"
                    },
                    RequestId: {
                        locationName: "requestId",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    }
                },
                required: [ "InputId" ]
            },
            output: {
                type: "structure",
                members: {
                    Input: {
                        shape: "Sef",
                        locationName: "input"
                    }
                }
            }
        },
        CreateTags: {
            http: {
                requestUri: "/prod/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn" ]
            }
        },
        DeleteChannel: {
            http: {
                method: "DELETE",
                requestUri: "/prod/channels/{channelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CdiInputSpecification: {
                        shape: "S20",
                        locationName: "cdiInputSpecification"
                    },
                    ChannelClass: {
                        locationName: "channelClass"
                    },
                    Destinations: {
                        shape: "S23",
                        locationName: "destinations"
                    },
                    EgressEndpoints: {
                        shape: "Sdx",
                        locationName: "egressEndpoints"
                    },
                    EncoderSettings: {
                        shape: "S2b",
                        locationName: "encoderSettings"
                    },
                    Id: {
                        locationName: "id"
                    },
                    InputAttachments: {
                        shape: "Sc6",
                        locationName: "inputAttachments"
                    },
                    InputSpecification: {
                        shape: "Sdo",
                        locationName: "inputSpecification"
                    },
                    LogLevel: {
                        locationName: "logLevel"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelineDetails: {
                        shape: "Sdz",
                        locationName: "pipelineDetails"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    },
                    Vpc: {
                        shape: "Se2",
                        locationName: "vpc"
                    }
                }
            }
        },
        DeleteInput: {
            http: {
                method: "DELETE",
                requestUri: "/prod/inputs/{inputId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputId: {
                        location: "uri",
                        locationName: "inputId"
                    }
                },
                required: [ "InputId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInputSecurityGroup: {
            http: {
                method: "DELETE",
                requestUri: "/prod/inputSecurityGroups/{inputSecurityGroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputSecurityGroupId: {
                        location: "uri",
                        locationName: "inputSecurityGroupId"
                    }
                },
                required: [ "InputSecurityGroupId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteMultiplex: {
            http: {
                method: "DELETE",
                requestUri: "/prod/multiplexes/{multiplexId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    }
                },
                required: [ "MultiplexId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AvailabilityZones: {
                        shape: "S5",
                        locationName: "availabilityZones"
                    },
                    Destinations: {
                        shape: "Sf5",
                        locationName: "destinations"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MultiplexSettings: {
                        shape: "Sez",
                        locationName: "multiplexSettings"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    ProgramCount: {
                        locationName: "programCount",
                        type: "integer"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    }
                }
            }
        },
        DeleteMultiplexProgram: {
            http: {
                method: "DELETE",
                requestUri: "/prod/multiplexes/{multiplexId}/programs/{programName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    },
                    ProgramName: {
                        location: "uri",
                        locationName: "programName"
                    }
                },
                required: [ "MultiplexId", "ProgramName" ]
            },
            output: {
                type: "structure",
                members: {
                    ChannelId: {
                        locationName: "channelId"
                    },
                    MultiplexProgramSettings: {
                        shape: "Sfa",
                        locationName: "multiplexProgramSettings"
                    },
                    PacketIdentifiersMap: {
                        shape: "Sfk",
                        locationName: "packetIdentifiersMap"
                    },
                    PipelineDetails: {
                        shape: "Sfm",
                        locationName: "pipelineDetails"
                    },
                    ProgramName: {
                        locationName: "programName"
                    }
                }
            }
        },
        DeleteReservation: {
            http: {
                method: "DELETE",
                requestUri: "/prod/reservations/{reservationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ReservationId: {
                        location: "uri",
                        locationName: "reservationId"
                    }
                },
                required: [ "ReservationId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Count: {
                        locationName: "count",
                        type: "integer"
                    },
                    CurrencyCode: {
                        locationName: "currencyCode"
                    },
                    Duration: {
                        locationName: "duration",
                        type: "integer"
                    },
                    DurationUnits: {
                        locationName: "durationUnits"
                    },
                    End: {
                        locationName: "end"
                    },
                    FixedPrice: {
                        locationName: "fixedPrice",
                        type: "double"
                    },
                    Name: {
                        locationName: "name"
                    },
                    OfferingDescription: {
                        locationName: "offeringDescription"
                    },
                    OfferingId: {
                        locationName: "offeringId"
                    },
                    OfferingType: {
                        locationName: "offeringType"
                    },
                    Region: {
                        locationName: "region"
                    },
                    ReservationId: {
                        locationName: "reservationId"
                    },
                    ResourceSpecification: {
                        shape: "Sg5",
                        locationName: "resourceSpecification"
                    },
                    Start: {
                        locationName: "start"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    },
                    UsagePrice: {
                        locationName: "usagePrice",
                        type: "double"
                    }
                }
            }
        },
        DeleteSchedule: {
            http: {
                method: "DELETE",
                requestUri: "/prod/channels/{channelId}/schedule",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTags: {
            http: {
                method: "DELETE",
                requestUri: "/prod/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        shape: "S5",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        DescribeChannel: {
            http: {
                method: "GET",
                requestUri: "/prod/channels/{channelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CdiInputSpecification: {
                        shape: "S20",
                        locationName: "cdiInputSpecification"
                    },
                    ChannelClass: {
                        locationName: "channelClass"
                    },
                    Destinations: {
                        shape: "S23",
                        locationName: "destinations"
                    },
                    EgressEndpoints: {
                        shape: "Sdx",
                        locationName: "egressEndpoints"
                    },
                    EncoderSettings: {
                        shape: "S2b",
                        locationName: "encoderSettings"
                    },
                    Id: {
                        locationName: "id"
                    },
                    InputAttachments: {
                        shape: "Sc6",
                        locationName: "inputAttachments"
                    },
                    InputSpecification: {
                        shape: "Sdo",
                        locationName: "inputSpecification"
                    },
                    LogLevel: {
                        locationName: "logLevel"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelineDetails: {
                        shape: "Sdz",
                        locationName: "pipelineDetails"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    },
                    Vpc: {
                        shape: "Se2",
                        locationName: "vpc"
                    }
                }
            }
        },
        DescribeInput: {
            http: {
                method: "GET",
                requestUri: "/prod/inputs/{inputId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputId: {
                        location: "uri",
                        locationName: "inputId"
                    }
                },
                required: [ "InputId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AttachedChannels: {
                        shape: "S5",
                        locationName: "attachedChannels"
                    },
                    Destinations: {
                        shape: "Seg",
                        locationName: "destinations"
                    },
                    Id: {
                        locationName: "id"
                    },
                    InputClass: {
                        locationName: "inputClass"
                    },
                    InputDevices: {
                        shape: "Se6",
                        locationName: "inputDevices"
                    },
                    InputPartnerIds: {
                        shape: "S5",
                        locationName: "inputPartnerIds"
                    },
                    InputSourceType: {
                        locationName: "inputSourceType"
                    },
                    MediaConnectFlows: {
                        shape: "Sel",
                        locationName: "mediaConnectFlows"
                    },
                    Name: {
                        locationName: "name"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    SecurityGroups: {
                        shape: "S5",
                        locationName: "securityGroups"
                    },
                    Sources: {
                        shape: "Sen",
                        locationName: "sources"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    },
                    Type: {
                        locationName: "type"
                    }
                }
            }
        },
        DescribeInputDevice: {
            http: {
                method: "GET",
                requestUri: "/prod/inputDevices/{inputDeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    ConnectionState: {
                        locationName: "connectionState"
                    },
                    DeviceSettingsSyncState: {
                        locationName: "deviceSettingsSyncState"
                    },
                    DeviceUpdateStatus: {
                        locationName: "deviceUpdateStatus"
                    },
                    HdDeviceSettings: {
                        shape: "Sgq",
                        locationName: "hdDeviceSettings"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MacAddress: {
                        locationName: "macAddress"
                    },
                    Name: {
                        locationName: "name"
                    },
                    NetworkSettings: {
                        shape: "Sgv",
                        locationName: "networkSettings"
                    },
                    SerialNumber: {
                        locationName: "serialNumber"
                    },
                    Type: {
                        locationName: "type"
                    },
                    UhdDeviceSettings: {
                        shape: "Sgy",
                        locationName: "uhdDeviceSettings"
                    }
                }
            }
        },
        DescribeInputDeviceThumbnail: {
            http: {
                method: "GET",
                requestUri: "/prod/inputDevices/{inputDeviceId}/thumbnailData",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    },
                    Accept: {
                        location: "header",
                        locationName: "accept"
                    }
                },
                required: [ "InputDeviceId", "Accept" ]
            },
            output: {
                type: "structure",
                members: {
                    Body: {
                        locationName: "body",
                        type: "blob",
                        streaming: true
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    ContentLength: {
                        location: "header",
                        locationName: "Content-Length",
                        type: "long"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    },
                    LastModified: {
                        location: "header",
                        locationName: "Last-Modified",
                        type: "timestamp"
                    }
                },
                payload: "Body"
            }
        },
        DescribeInputSecurityGroup: {
            http: {
                method: "GET",
                requestUri: "/prod/inputSecurityGroups/{inputSecurityGroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputSecurityGroupId: {
                        location: "uri",
                        locationName: "inputSecurityGroupId"
                    }
                },
                required: [ "InputSecurityGroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Inputs: {
                        shape: "S5",
                        locationName: "inputs"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    },
                    WhitelistRules: {
                        shape: "Sew",
                        locationName: "whitelistRules"
                    }
                }
            }
        },
        DescribeMultiplex: {
            http: {
                method: "GET",
                requestUri: "/prod/multiplexes/{multiplexId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    }
                },
                required: [ "MultiplexId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AvailabilityZones: {
                        shape: "S5",
                        locationName: "availabilityZones"
                    },
                    Destinations: {
                        shape: "Sf5",
                        locationName: "destinations"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MultiplexSettings: {
                        shape: "Sez",
                        locationName: "multiplexSettings"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    ProgramCount: {
                        locationName: "programCount",
                        type: "integer"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    }
                }
            }
        },
        DescribeMultiplexProgram: {
            http: {
                method: "GET",
                requestUri: "/prod/multiplexes/{multiplexId}/programs/{programName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    },
                    ProgramName: {
                        location: "uri",
                        locationName: "programName"
                    }
                },
                required: [ "MultiplexId", "ProgramName" ]
            },
            output: {
                type: "structure",
                members: {
                    ChannelId: {
                        locationName: "channelId"
                    },
                    MultiplexProgramSettings: {
                        shape: "Sfa",
                        locationName: "multiplexProgramSettings"
                    },
                    PacketIdentifiersMap: {
                        shape: "Sfk",
                        locationName: "packetIdentifiersMap"
                    },
                    PipelineDetails: {
                        shape: "Sfm",
                        locationName: "pipelineDetails"
                    },
                    ProgramName: {
                        locationName: "programName"
                    }
                }
            }
        },
        DescribeOffering: {
            http: {
                method: "GET",
                requestUri: "/prod/offerings/{offeringId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    OfferingId: {
                        location: "uri",
                        locationName: "offeringId"
                    }
                },
                required: [ "OfferingId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CurrencyCode: {
                        locationName: "currencyCode"
                    },
                    Duration: {
                        locationName: "duration",
                        type: "integer"
                    },
                    DurationUnits: {
                        locationName: "durationUnits"
                    },
                    FixedPrice: {
                        locationName: "fixedPrice",
                        type: "double"
                    },
                    OfferingDescription: {
                        locationName: "offeringDescription"
                    },
                    OfferingId: {
                        locationName: "offeringId"
                    },
                    OfferingType: {
                        locationName: "offeringType"
                    },
                    Region: {
                        locationName: "region"
                    },
                    ResourceSpecification: {
                        shape: "Sg5",
                        locationName: "resourceSpecification"
                    },
                    UsagePrice: {
                        locationName: "usagePrice",
                        type: "double"
                    }
                }
            }
        },
        DescribeReservation: {
            http: {
                method: "GET",
                requestUri: "/prod/reservations/{reservationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ReservationId: {
                        location: "uri",
                        locationName: "reservationId"
                    }
                },
                required: [ "ReservationId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Count: {
                        locationName: "count",
                        type: "integer"
                    },
                    CurrencyCode: {
                        locationName: "currencyCode"
                    },
                    Duration: {
                        locationName: "duration",
                        type: "integer"
                    },
                    DurationUnits: {
                        locationName: "durationUnits"
                    },
                    End: {
                        locationName: "end"
                    },
                    FixedPrice: {
                        locationName: "fixedPrice",
                        type: "double"
                    },
                    Name: {
                        locationName: "name"
                    },
                    OfferingDescription: {
                        locationName: "offeringDescription"
                    },
                    OfferingId: {
                        locationName: "offeringId"
                    },
                    OfferingType: {
                        locationName: "offeringType"
                    },
                    Region: {
                        locationName: "region"
                    },
                    ReservationId: {
                        locationName: "reservationId"
                    },
                    ResourceSpecification: {
                        shape: "Sg5",
                        locationName: "resourceSpecification"
                    },
                    Start: {
                        locationName: "start"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    },
                    UsagePrice: {
                        locationName: "usagePrice",
                        type: "double"
                    }
                }
            }
        },
        DescribeSchedule: {
            http: {
                method: "GET",
                requestUri: "/prod/channels/{channelId}/schedule",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    ScheduleActions: {
                        shape: "Sh",
                        locationName: "scheduleActions"
                    }
                }
            }
        },
        ListChannels: {
            http: {
                method: "GET",
                requestUri: "/prod/channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        locationName: "channels",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                CdiInputSpecification: {
                                    shape: "S20",
                                    locationName: "cdiInputSpecification"
                                },
                                ChannelClass: {
                                    locationName: "channelClass"
                                },
                                Destinations: {
                                    shape: "S23",
                                    locationName: "destinations"
                                },
                                EgressEndpoints: {
                                    shape: "Sdx",
                                    locationName: "egressEndpoints"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                InputAttachments: {
                                    shape: "Sc6",
                                    locationName: "inputAttachments"
                                },
                                InputSpecification: {
                                    shape: "Sdo",
                                    locationName: "inputSpecification"
                                },
                                LogLevel: {
                                    locationName: "logLevel"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                PipelinesRunningCount: {
                                    locationName: "pipelinesRunningCount",
                                    type: "integer"
                                },
                                RoleArn: {
                                    locationName: "roleArn"
                                },
                                State: {
                                    locationName: "state"
                                },
                                Tags: {
                                    shape: "Sdt",
                                    locationName: "tags"
                                },
                                Vpc: {
                                    shape: "Se2",
                                    locationName: "vpc"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListInputDeviceTransfers: {
            http: {
                method: "GET",
                requestUri: "/prod/inputDeviceTransfers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    TransferType: {
                        location: "querystring",
                        locationName: "transferType"
                    }
                },
                required: [ "TransferType" ]
            },
            output: {
                type: "structure",
                members: {
                    InputDeviceTransfers: {
                        locationName: "inputDeviceTransfers",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {
                                    locationName: "id"
                                },
                                Message: {
                                    locationName: "message"
                                },
                                TargetCustomerId: {
                                    locationName: "targetCustomerId"
                                },
                                TransferType: {
                                    locationName: "transferType"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListInputDevices: {
            http: {
                method: "GET",
                requestUri: "/prod/inputDevices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InputDevices: {
                        locationName: "inputDevices",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                ConnectionState: {
                                    locationName: "connectionState"
                                },
                                DeviceSettingsSyncState: {
                                    locationName: "deviceSettingsSyncState"
                                },
                                DeviceUpdateStatus: {
                                    locationName: "deviceUpdateStatus"
                                },
                                HdDeviceSettings: {
                                    shape: "Sgq",
                                    locationName: "hdDeviceSettings"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                MacAddress: {
                                    locationName: "macAddress"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                NetworkSettings: {
                                    shape: "Sgv",
                                    locationName: "networkSettings"
                                },
                                SerialNumber: {
                                    locationName: "serialNumber"
                                },
                                Type: {
                                    locationName: "type"
                                },
                                UhdDeviceSettings: {
                                    shape: "Sgy",
                                    locationName: "uhdDeviceSettings"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListInputSecurityGroups: {
            http: {
                method: "GET",
                requestUri: "/prod/inputSecurityGroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InputSecurityGroups: {
                        locationName: "inputSecurityGroups",
                        type: "list",
                        member: {
                            shape: "Seu"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListInputs: {
            http: {
                method: "GET",
                requestUri: "/prod/inputs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Inputs: {
                        locationName: "inputs",
                        type: "list",
                        member: {
                            shape: "Sef"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListMultiplexPrograms: {
            http: {
                method: "GET",
                requestUri: "/prod/multiplexes/{multiplexId}/programs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "MultiplexId" ]
            },
            output: {
                type: "structure",
                members: {
                    MultiplexPrograms: {
                        locationName: "multiplexPrograms",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ChannelId: {
                                    locationName: "channelId"
                                },
                                ProgramName: {
                                    locationName: "programName"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListMultiplexes: {
            http: {
                method: "GET",
                requestUri: "/prod/multiplexes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Multiplexes: {
                        locationName: "multiplexes",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                AvailabilityZones: {
                                    shape: "S5",
                                    locationName: "availabilityZones"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                MultiplexSettings: {
                                    locationName: "multiplexSettings",
                                    type: "structure",
                                    members: {
                                        TransportStreamBitrate: {
                                            locationName: "transportStreamBitrate",
                                            type: "integer"
                                        }
                                    }
                                },
                                Name: {
                                    locationName: "name"
                                },
                                PipelinesRunningCount: {
                                    locationName: "pipelinesRunningCount",
                                    type: "integer"
                                },
                                ProgramCount: {
                                    locationName: "programCount",
                                    type: "integer"
                                },
                                State: {
                                    locationName: "state"
                                },
                                Tags: {
                                    shape: "Sdt",
                                    locationName: "tags"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListOfferings: {
            http: {
                method: "GET",
                requestUri: "/prod/offerings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelClass: {
                        location: "querystring",
                        locationName: "channelClass"
                    },
                    ChannelConfiguration: {
                        location: "querystring",
                        locationName: "channelConfiguration"
                    },
                    Codec: {
                        location: "querystring",
                        locationName: "codec"
                    },
                    Duration: {
                        location: "querystring",
                        locationName: "duration"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    MaximumBitrate: {
                        location: "querystring",
                        locationName: "maximumBitrate"
                    },
                    MaximumFramerate: {
                        location: "querystring",
                        locationName: "maximumFramerate"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    Resolution: {
                        location: "querystring",
                        locationName: "resolution"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    SpecialFeature: {
                        location: "querystring",
                        locationName: "specialFeature"
                    },
                    VideoQuality: {
                        location: "querystring",
                        locationName: "videoQuality"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Offerings: {
                        locationName: "offerings",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                CurrencyCode: {
                                    locationName: "currencyCode"
                                },
                                Duration: {
                                    locationName: "duration",
                                    type: "integer"
                                },
                                DurationUnits: {
                                    locationName: "durationUnits"
                                },
                                FixedPrice: {
                                    locationName: "fixedPrice",
                                    type: "double"
                                },
                                OfferingDescription: {
                                    locationName: "offeringDescription"
                                },
                                OfferingId: {
                                    locationName: "offeringId"
                                },
                                OfferingType: {
                                    locationName: "offeringType"
                                },
                                Region: {
                                    locationName: "region"
                                },
                                ResourceSpecification: {
                                    shape: "Sg5",
                                    locationName: "resourceSpecification"
                                },
                                UsagePrice: {
                                    locationName: "usagePrice",
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListReservations: {
            http: {
                method: "GET",
                requestUri: "/prod/reservations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelClass: {
                        location: "querystring",
                        locationName: "channelClass"
                    },
                    Codec: {
                        location: "querystring",
                        locationName: "codec"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    MaximumBitrate: {
                        location: "querystring",
                        locationName: "maximumBitrate"
                    },
                    MaximumFramerate: {
                        location: "querystring",
                        locationName: "maximumFramerate"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    Resolution: {
                        location: "querystring",
                        locationName: "resolution"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    SpecialFeature: {
                        location: "querystring",
                        locationName: "specialFeature"
                    },
                    VideoQuality: {
                        location: "querystring",
                        locationName: "videoQuality"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Reservations: {
                        locationName: "reservations",
                        type: "list",
                        member: {
                            shape: "Sii"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/prod/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    }
                }
            }
        },
        PurchaseOffering: {
            http: {
                requestUri: "/prod/offerings/{offeringId}/purchase",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Count: {
                        locationName: "count",
                        type: "integer"
                    },
                    Name: {
                        locationName: "name"
                    },
                    OfferingId: {
                        location: "uri",
                        locationName: "offeringId"
                    },
                    RequestId: {
                        locationName: "requestId",
                        idempotencyToken: true
                    },
                    Start: {
                        locationName: "start"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    }
                },
                required: [ "OfferingId", "Count" ]
            },
            output: {
                type: "structure",
                members: {
                    Reservation: {
                        shape: "Sii",
                        locationName: "reservation"
                    }
                }
            }
        },
        RejectInputDeviceTransfer: {
            http: {
                requestUri: "/prod/inputDevices/{inputDeviceId}/reject",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartChannel: {
            http: {
                requestUri: "/prod/channels/{channelId}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CdiInputSpecification: {
                        shape: "S20",
                        locationName: "cdiInputSpecification"
                    },
                    ChannelClass: {
                        locationName: "channelClass"
                    },
                    Destinations: {
                        shape: "S23",
                        locationName: "destinations"
                    },
                    EgressEndpoints: {
                        shape: "Sdx",
                        locationName: "egressEndpoints"
                    },
                    EncoderSettings: {
                        shape: "S2b",
                        locationName: "encoderSettings"
                    },
                    Id: {
                        locationName: "id"
                    },
                    InputAttachments: {
                        shape: "Sc6",
                        locationName: "inputAttachments"
                    },
                    InputSpecification: {
                        shape: "Sdo",
                        locationName: "inputSpecification"
                    },
                    LogLevel: {
                        locationName: "logLevel"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelineDetails: {
                        shape: "Sdz",
                        locationName: "pipelineDetails"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    },
                    Vpc: {
                        shape: "Se2",
                        locationName: "vpc"
                    }
                }
            }
        },
        StartMultiplex: {
            http: {
                requestUri: "/prod/multiplexes/{multiplexId}/start",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    }
                },
                required: [ "MultiplexId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AvailabilityZones: {
                        shape: "S5",
                        locationName: "availabilityZones"
                    },
                    Destinations: {
                        shape: "Sf5",
                        locationName: "destinations"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MultiplexSettings: {
                        shape: "Sez",
                        locationName: "multiplexSettings"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    ProgramCount: {
                        locationName: "programCount",
                        type: "integer"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    }
                }
            }
        },
        StopChannel: {
            http: {
                requestUri: "/prod/channels/{channelId}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CdiInputSpecification: {
                        shape: "S20",
                        locationName: "cdiInputSpecification"
                    },
                    ChannelClass: {
                        locationName: "channelClass"
                    },
                    Destinations: {
                        shape: "S23",
                        locationName: "destinations"
                    },
                    EgressEndpoints: {
                        shape: "Sdx",
                        locationName: "egressEndpoints"
                    },
                    EncoderSettings: {
                        shape: "S2b",
                        locationName: "encoderSettings"
                    },
                    Id: {
                        locationName: "id"
                    },
                    InputAttachments: {
                        shape: "Sc6",
                        locationName: "inputAttachments"
                    },
                    InputSpecification: {
                        shape: "Sdo",
                        locationName: "inputSpecification"
                    },
                    LogLevel: {
                        locationName: "logLevel"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelineDetails: {
                        shape: "Sdz",
                        locationName: "pipelineDetails"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    },
                    Vpc: {
                        shape: "Se2",
                        locationName: "vpc"
                    }
                }
            }
        },
        StopMultiplex: {
            http: {
                requestUri: "/prod/multiplexes/{multiplexId}/stop",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    }
                },
                required: [ "MultiplexId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AvailabilityZones: {
                        shape: "S5",
                        locationName: "availabilityZones"
                    },
                    Destinations: {
                        shape: "Sf5",
                        locationName: "destinations"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MultiplexSettings: {
                        shape: "Sez",
                        locationName: "multiplexSettings"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    ProgramCount: {
                        locationName: "programCount",
                        type: "integer"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    }
                }
            }
        },
        TransferInputDevice: {
            http: {
                requestUri: "/prod/inputDevices/{inputDeviceId}/transfer",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    },
                    TargetCustomerId: {
                        locationName: "targetCustomerId"
                    },
                    TargetRegion: {
                        locationName: "targetRegion"
                    },
                    TransferMessage: {
                        locationName: "transferMessage"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateChannel: {
            http: {
                method: "PUT",
                requestUri: "/prod/channels/{channelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CdiInputSpecification: {
                        shape: "S20",
                        locationName: "cdiInputSpecification"
                    },
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    },
                    Destinations: {
                        shape: "S23",
                        locationName: "destinations"
                    },
                    EncoderSettings: {
                        shape: "S2b",
                        locationName: "encoderSettings"
                    },
                    InputAttachments: {
                        shape: "Sc6",
                        locationName: "inputAttachments"
                    },
                    InputSpecification: {
                        shape: "Sdo",
                        locationName: "inputSpecification"
                    },
                    LogLevel: {
                        locationName: "logLevel"
                    },
                    Name: {
                        locationName: "name"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        shape: "Sdw",
                        locationName: "channel"
                    }
                }
            }
        },
        UpdateChannelClass: {
            http: {
                method: "PUT",
                requestUri: "/prod/channels/{channelId}/channelClass",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelClass: {
                        locationName: "channelClass"
                    },
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    },
                    Destinations: {
                        shape: "S23",
                        locationName: "destinations"
                    }
                },
                required: [ "ChannelId", "ChannelClass" ]
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        shape: "Sdw",
                        locationName: "channel"
                    }
                }
            }
        },
        UpdateInput: {
            http: {
                method: "PUT",
                requestUri: "/prod/inputs/{inputId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Destinations: {
                        shape: "Se4",
                        locationName: "destinations"
                    },
                    InputDevices: {
                        locationName: "inputDevices",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {
                                    locationName: "id"
                                }
                            }
                        }
                    },
                    InputId: {
                        location: "uri",
                        locationName: "inputId"
                    },
                    InputSecurityGroups: {
                        shape: "S5",
                        locationName: "inputSecurityGroups"
                    },
                    MediaConnectFlows: {
                        shape: "Se8",
                        locationName: "mediaConnectFlows"
                    },
                    Name: {
                        locationName: "name"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    Sources: {
                        shape: "Sea",
                        locationName: "sources"
                    }
                },
                required: [ "InputId" ]
            },
            output: {
                type: "structure",
                members: {
                    Input: {
                        shape: "Sef",
                        locationName: "input"
                    }
                }
            }
        },
        UpdateInputDevice: {
            http: {
                method: "PUT",
                requestUri: "/prod/inputDevices/{inputDeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    HdDeviceSettings: {
                        shape: "Sj8",
                        locationName: "hdDeviceSettings"
                    },
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    UhdDeviceSettings: {
                        shape: "Sj8",
                        locationName: "uhdDeviceSettings"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    ConnectionState: {
                        locationName: "connectionState"
                    },
                    DeviceSettingsSyncState: {
                        locationName: "deviceSettingsSyncState"
                    },
                    DeviceUpdateStatus: {
                        locationName: "deviceUpdateStatus"
                    },
                    HdDeviceSettings: {
                        shape: "Sgq",
                        locationName: "hdDeviceSettings"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MacAddress: {
                        locationName: "macAddress"
                    },
                    Name: {
                        locationName: "name"
                    },
                    NetworkSettings: {
                        shape: "Sgv",
                        locationName: "networkSettings"
                    },
                    SerialNumber: {
                        locationName: "serialNumber"
                    },
                    Type: {
                        locationName: "type"
                    },
                    UhdDeviceSettings: {
                        shape: "Sgy",
                        locationName: "uhdDeviceSettings"
                    }
                }
            }
        },
        UpdateInputSecurityGroup: {
            http: {
                method: "PUT",
                requestUri: "/prod/inputSecurityGroups/{inputSecurityGroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputSecurityGroupId: {
                        location: "uri",
                        locationName: "inputSecurityGroupId"
                    },
                    Tags: {
                        shape: "Sdt",
                        locationName: "tags"
                    },
                    WhitelistRules: {
                        shape: "Ser",
                        locationName: "whitelistRules"
                    }
                },
                required: [ "InputSecurityGroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    SecurityGroup: {
                        shape: "Seu",
                        locationName: "securityGroup"
                    }
                }
            }
        },
        UpdateMultiplex: {
            http: {
                method: "PUT",
                requestUri: "/prod/multiplexes/{multiplexId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    },
                    MultiplexSettings: {
                        shape: "Sez",
                        locationName: "multiplexSettings"
                    },
                    Name: {
                        locationName: "name"
                    }
                },
                required: [ "MultiplexId" ]
            },
            output: {
                type: "structure",
                members: {
                    Multiplex: {
                        shape: "Sf4",
                        locationName: "multiplex"
                    }
                }
            }
        },
        UpdateMultiplexProgram: {
            http: {
                method: "PUT",
                requestUri: "/prod/multiplexes/{multiplexId}/programs/{programName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    },
                    MultiplexProgramSettings: {
                        shape: "Sfa",
                        locationName: "multiplexProgramSettings"
                    },
                    ProgramName: {
                        location: "uri",
                        locationName: "programName"
                    }
                },
                required: [ "MultiplexId", "ProgramName" ]
            },
            output: {
                type: "structure",
                members: {
                    MultiplexProgram: {
                        shape: "Sfj",
                        locationName: "multiplexProgram"
                    }
                }
            }
        },
        UpdateReservation: {
            http: {
                method: "PUT",
                requestUri: "/prod/reservations/{reservationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name"
                    },
                    ReservationId: {
                        location: "uri",
                        locationName: "reservationId"
                    }
                },
                required: [ "ReservationId" ]
            },
            output: {
                type: "structure",
                members: {
                    Reservation: {
                        shape: "Sii",
                        locationName: "reservation"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {}
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Code: {
                        locationName: "code"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Message: {
                        locationName: "message"
                    }
                }
            }
        },
        S9: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Id: {
                        locationName: "id"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ActionName: {
                        locationName: "actionName"
                    },
                    ScheduleActionSettings: {
                        locationName: "scheduleActionSettings",
                        type: "structure",
                        members: {
                            HlsId3SegmentTaggingSettings: {
                                locationName: "hlsId3SegmentTaggingSettings",
                                type: "structure",
                                members: {
                                    Tag: {
                                        locationName: "tag"
                                    }
                                },
                                required: [ "Tag" ]
                            },
                            HlsTimedMetadataSettings: {
                                locationName: "hlsTimedMetadataSettings",
                                type: "structure",
                                members: {
                                    Id3: {
                                        locationName: "id3"
                                    }
                                },
                                required: [ "Id3" ]
                            },
                            InputPrepareSettings: {
                                locationName: "inputPrepareSettings",
                                type: "structure",
                                members: {
                                    InputAttachmentNameReference: {
                                        locationName: "inputAttachmentNameReference"
                                    },
                                    InputClippingSettings: {
                                        shape: "Sn",
                                        locationName: "inputClippingSettings"
                                    },
                                    UrlPath: {
                                        shape: "S5",
                                        locationName: "urlPath"
                                    }
                                }
                            },
                            InputSwitchSettings: {
                                locationName: "inputSwitchSettings",
                                type: "structure",
                                members: {
                                    InputAttachmentNameReference: {
                                        locationName: "inputAttachmentNameReference"
                                    },
                                    InputClippingSettings: {
                                        shape: "Sn",
                                        locationName: "inputClippingSettings"
                                    },
                                    UrlPath: {
                                        shape: "S5",
                                        locationName: "urlPath"
                                    }
                                },
                                required: [ "InputAttachmentNameReference" ]
                            },
                            MotionGraphicsImageActivateSettings: {
                                locationName: "motionGraphicsImageActivateSettings",
                                type: "structure",
                                members: {
                                    Duration: {
                                        locationName: "duration",
                                        type: "long"
                                    },
                                    PasswordParam: {
                                        locationName: "passwordParam"
                                    },
                                    Url: {
                                        locationName: "url"
                                    },
                                    Username: {
                                        locationName: "username"
                                    }
                                }
                            },
                            MotionGraphicsImageDeactivateSettings: {
                                locationName: "motionGraphicsImageDeactivateSettings",
                                type: "structure",
                                members: {}
                            },
                            PauseStateSettings: {
                                locationName: "pauseStateSettings",
                                type: "structure",
                                members: {
                                    Pipelines: {
                                        locationName: "pipelines",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                PipelineId: {
                                                    locationName: "pipelineId"
                                                }
                                            },
                                            required: [ "PipelineId" ]
                                        }
                                    }
                                }
                            },
                            Scte35ReturnToNetworkSettings: {
                                locationName: "scte35ReturnToNetworkSettings",
                                type: "structure",
                                members: {
                                    SpliceEventId: {
                                        locationName: "spliceEventId",
                                        type: "long"
                                    }
                                },
                                required: [ "SpliceEventId" ]
                            },
                            Scte35SpliceInsertSettings: {
                                locationName: "scte35SpliceInsertSettings",
                                type: "structure",
                                members: {
                                    Duration: {
                                        locationName: "duration",
                                        type: "long"
                                    },
                                    SpliceEventId: {
                                        locationName: "spliceEventId",
                                        type: "long"
                                    }
                                },
                                required: [ "SpliceEventId" ]
                            },
                            Scte35TimeSignalSettings: {
                                locationName: "scte35TimeSignalSettings",
                                type: "structure",
                                members: {
                                    Scte35Descriptors: {
                                        locationName: "scte35Descriptors",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Scte35DescriptorSettings: {
                                                    locationName: "scte35DescriptorSettings",
                                                    type: "structure",
                                                    members: {
                                                        SegmentationDescriptorScte35DescriptorSettings: {
                                                            locationName: "segmentationDescriptorScte35DescriptorSettings",
                                                            type: "structure",
                                                            members: {
                                                                DeliveryRestrictions: {
                                                                    locationName: "deliveryRestrictions",
                                                                    type: "structure",
                                                                    members: {
                                                                        ArchiveAllowedFlag: {
                                                                            locationName: "archiveAllowedFlag"
                                                                        },
                                                                        DeviceRestrictions: {
                                                                            locationName: "deviceRestrictions"
                                                                        },
                                                                        NoRegionalBlackoutFlag: {
                                                                            locationName: "noRegionalBlackoutFlag"
                                                                        },
                                                                        WebDeliveryAllowedFlag: {
                                                                            locationName: "webDeliveryAllowedFlag"
                                                                        }
                                                                    },
                                                                    required: [ "DeviceRestrictions", "ArchiveAllowedFlag", "WebDeliveryAllowedFlag", "NoRegionalBlackoutFlag" ]
                                                                },
                                                                SegmentNum: {
                                                                    locationName: "segmentNum",
                                                                    type: "integer"
                                                                },
                                                                SegmentationCancelIndicator: {
                                                                    locationName: "segmentationCancelIndicator"
                                                                },
                                                                SegmentationDuration: {
                                                                    locationName: "segmentationDuration",
                                                                    type: "long"
                                                                },
                                                                SegmentationEventId: {
                                                                    locationName: "segmentationEventId",
                                                                    type: "long"
                                                                },
                                                                SegmentationTypeId: {
                                                                    locationName: "segmentationTypeId",
                                                                    type: "integer"
                                                                },
                                                                SegmentationUpid: {
                                                                    locationName: "segmentationUpid"
                                                                },
                                                                SegmentationUpidType: {
                                                                    locationName: "segmentationUpidType",
                                                                    type: "integer"
                                                                },
                                                                SegmentsExpected: {
                                                                    locationName: "segmentsExpected",
                                                                    type: "integer"
                                                                },
                                                                SubSegmentNum: {
                                                                    locationName: "subSegmentNum",
                                                                    type: "integer"
                                                                },
                                                                SubSegmentsExpected: {
                                                                    locationName: "subSegmentsExpected",
                                                                    type: "integer"
                                                                }
                                                            },
                                                            required: [ "SegmentationEventId", "SegmentationCancelIndicator" ]
                                                        }
                                                    },
                                                    required: [ "SegmentationDescriptorScte35DescriptorSettings" ]
                                                }
                                            },
                                            required: [ "Scte35DescriptorSettings" ]
                                        }
                                    }
                                },
                                required: [ "Scte35Descriptors" ]
                            },
                            StaticImageActivateSettings: {
                                locationName: "staticImageActivateSettings",
                                type: "structure",
                                members: {
                                    Duration: {
                                        locationName: "duration",
                                        type: "integer"
                                    },
                                    FadeIn: {
                                        locationName: "fadeIn",
                                        type: "integer"
                                    },
                                    FadeOut: {
                                        locationName: "fadeOut",
                                        type: "integer"
                                    },
                                    Height: {
                                        locationName: "height",
                                        type: "integer"
                                    },
                                    Image: {
                                        shape: "S1k",
                                        locationName: "image"
                                    },
                                    ImageX: {
                                        locationName: "imageX",
                                        type: "integer"
                                    },
                                    ImageY: {
                                        locationName: "imageY",
                                        type: "integer"
                                    },
                                    Layer: {
                                        locationName: "layer",
                                        type: "integer"
                                    },
                                    Opacity: {
                                        locationName: "opacity",
                                        type: "integer"
                                    },
                                    Width: {
                                        locationName: "width",
                                        type: "integer"
                                    }
                                },
                                required: [ "Image" ]
                            },
                            StaticImageDeactivateSettings: {
                                locationName: "staticImageDeactivateSettings",
                                type: "structure",
                                members: {
                                    FadeOut: {
                                        locationName: "fadeOut",
                                        type: "integer"
                                    },
                                    Layer: {
                                        locationName: "layer",
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    ScheduleActionStartSettings: {
                        locationName: "scheduleActionStartSettings",
                        type: "structure",
                        members: {
                            FixedModeScheduleActionStartSettings: {
                                locationName: "fixedModeScheduleActionStartSettings",
                                type: "structure",
                                members: {
                                    Time: {
                                        locationName: "time"
                                    }
                                },
                                required: [ "Time" ]
                            },
                            FollowModeScheduleActionStartSettings: {
                                locationName: "followModeScheduleActionStartSettings",
                                type: "structure",
                                members: {
                                    FollowPoint: {
                                        locationName: "followPoint"
                                    },
                                    ReferenceActionName: {
                                        locationName: "referenceActionName"
                                    }
                                },
                                required: [ "ReferenceActionName", "FollowPoint" ]
                            },
                            ImmediateModeScheduleActionStartSettings: {
                                locationName: "immediateModeScheduleActionStartSettings",
                                type: "structure",
                                members: {}
                            }
                        }
                    }
                },
                required: [ "ActionName", "ScheduleActionStartSettings", "ScheduleActionSettings" ]
            }
        },
        Sn: {
            type: "structure",
            members: {
                InputTimecodeSource: {
                    locationName: "inputTimecodeSource"
                },
                StartTimecode: {
                    locationName: "startTimecode",
                    type: "structure",
                    members: {
                        Timecode: {
                            locationName: "timecode"
                        }
                    }
                },
                StopTimecode: {
                    locationName: "stopTimecode",
                    type: "structure",
                    members: {
                        LastFrameClippingBehavior: {
                            locationName: "lastFrameClippingBehavior"
                        },
                        Timecode: {
                            locationName: "timecode"
                        }
                    }
                }
            },
            required: [ "InputTimecodeSource" ]
        },
        S1k: {
            type: "structure",
            members: {
                PasswordParam: {
                    locationName: "passwordParam"
                },
                Uri: {
                    locationName: "uri"
                },
                Username: {
                    locationName: "username"
                }
            },
            required: [ "Uri" ]
        },
        S20: {
            type: "structure",
            members: {
                Resolution: {
                    locationName: "resolution"
                }
            }
        },
        S23: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {
                        locationName: "id"
                    },
                    MediaPackageSettings: {
                        locationName: "mediaPackageSettings",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ChannelId: {
                                    locationName: "channelId"
                                }
                            }
                        }
                    },
                    MultiplexSettings: {
                        locationName: "multiplexSettings",
                        type: "structure",
                        members: {
                            MultiplexId: {
                                locationName: "multiplexId"
                            },
                            ProgramName: {
                                locationName: "programName"
                            }
                        }
                    },
                    Settings: {
                        locationName: "settings",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PasswordParam: {
                                    locationName: "passwordParam"
                                },
                                StreamName: {
                                    locationName: "streamName"
                                },
                                Url: {
                                    locationName: "url"
                                },
                                Username: {
                                    locationName: "username"
                                }
                            }
                        }
                    }
                }
            }
        },
        S2b: {
            type: "structure",
            members: {
                AudioDescriptions: {
                    locationName: "audioDescriptions",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            AudioNormalizationSettings: {
                                locationName: "audioNormalizationSettings",
                                type: "structure",
                                members: {
                                    Algorithm: {
                                        locationName: "algorithm"
                                    },
                                    AlgorithmControl: {
                                        locationName: "algorithmControl"
                                    },
                                    TargetLkfs: {
                                        locationName: "targetLkfs",
                                        type: "double"
                                    }
                                }
                            },
                            AudioSelectorName: {
                                locationName: "audioSelectorName"
                            },
                            AudioType: {
                                locationName: "audioType"
                            },
                            AudioTypeControl: {
                                locationName: "audioTypeControl"
                            },
                            CodecSettings: {
                                locationName: "codecSettings",
                                type: "structure",
                                members: {
                                    AacSettings: {
                                        locationName: "aacSettings",
                                        type: "structure",
                                        members: {
                                            Bitrate: {
                                                locationName: "bitrate",
                                                type: "double"
                                            },
                                            CodingMode: {
                                                locationName: "codingMode"
                                            },
                                            InputType: {
                                                locationName: "inputType"
                                            },
                                            Profile: {
                                                locationName: "profile"
                                            },
                                            RateControlMode: {
                                                locationName: "rateControlMode"
                                            },
                                            RawFormat: {
                                                locationName: "rawFormat"
                                            },
                                            SampleRate: {
                                                locationName: "sampleRate",
                                                type: "double"
                                            },
                                            Spec: {
                                                locationName: "spec"
                                            },
                                            VbrQuality: {
                                                locationName: "vbrQuality"
                                            }
                                        }
                                    },
                                    Ac3Settings: {
                                        locationName: "ac3Settings",
                                        type: "structure",
                                        members: {
                                            Bitrate: {
                                                locationName: "bitrate",
                                                type: "double"
                                            },
                                            BitstreamMode: {
                                                locationName: "bitstreamMode"
                                            },
                                            CodingMode: {
                                                locationName: "codingMode"
                                            },
                                            Dialnorm: {
                                                locationName: "dialnorm",
                                                type: "integer"
                                            },
                                            DrcProfile: {
                                                locationName: "drcProfile"
                                            },
                                            LfeFilter: {
                                                locationName: "lfeFilter"
                                            },
                                            MetadataControl: {
                                                locationName: "metadataControl"
                                            }
                                        }
                                    },
                                    Eac3Settings: {
                                        locationName: "eac3Settings",
                                        type: "structure",
                                        members: {
                                            AttenuationControl: {
                                                locationName: "attenuationControl"
                                            },
                                            Bitrate: {
                                                locationName: "bitrate",
                                                type: "double"
                                            },
                                            BitstreamMode: {
                                                locationName: "bitstreamMode"
                                            },
                                            CodingMode: {
                                                locationName: "codingMode"
                                            },
                                            DcFilter: {
                                                locationName: "dcFilter"
                                            },
                                            Dialnorm: {
                                                locationName: "dialnorm",
                                                type: "integer"
                                            },
                                            DrcLine: {
                                                locationName: "drcLine"
                                            },
                                            DrcRf: {
                                                locationName: "drcRf"
                                            },
                                            LfeControl: {
                                                locationName: "lfeControl"
                                            },
                                            LfeFilter: {
                                                locationName: "lfeFilter"
                                            },
                                            LoRoCenterMixLevel: {
                                                locationName: "loRoCenterMixLevel",
                                                type: "double"
                                            },
                                            LoRoSurroundMixLevel: {
                                                locationName: "loRoSurroundMixLevel",
                                                type: "double"
                                            },
                                            LtRtCenterMixLevel: {
                                                locationName: "ltRtCenterMixLevel",
                                                type: "double"
                                            },
                                            LtRtSurroundMixLevel: {
                                                locationName: "ltRtSurroundMixLevel",
                                                type: "double"
                                            },
                                            MetadataControl: {
                                                locationName: "metadataControl"
                                            },
                                            PassthroughControl: {
                                                locationName: "passthroughControl"
                                            },
                                            PhaseControl: {
                                                locationName: "phaseControl"
                                            },
                                            StereoDownmix: {
                                                locationName: "stereoDownmix"
                                            },
                                            SurroundExMode: {
                                                locationName: "surroundExMode"
                                            },
                                            SurroundMode: {
                                                locationName: "surroundMode"
                                            }
                                        }
                                    },
                                    Mp2Settings: {
                                        locationName: "mp2Settings",
                                        type: "structure",
                                        members: {
                                            Bitrate: {
                                                locationName: "bitrate",
                                                type: "double"
                                            },
                                            CodingMode: {
                                                locationName: "codingMode"
                                            },
                                            SampleRate: {
                                                locationName: "sampleRate",
                                                type: "double"
                                            }
                                        }
                                    },
                                    PassThroughSettings: {
                                        locationName: "passThroughSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    WavSettings: {
                                        locationName: "wavSettings",
                                        type: "structure",
                                        members: {
                                            BitDepth: {
                                                locationName: "bitDepth",
                                                type: "double"
                                            },
                                            CodingMode: {
                                                locationName: "codingMode"
                                            },
                                            SampleRate: {
                                                locationName: "sampleRate",
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            },
                            LanguageCode: {
                                locationName: "languageCode"
                            },
                            LanguageCodeControl: {
                                locationName: "languageCodeControl"
                            },
                            Name: {
                                locationName: "name"
                            },
                            RemixSettings: {
                                locationName: "remixSettings",
                                type: "structure",
                                members: {
                                    ChannelMappings: {
                                        locationName: "channelMappings",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                InputChannelLevels: {
                                                    locationName: "inputChannelLevels",
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Gain: {
                                                                locationName: "gain",
                                                                type: "integer"
                                                            },
                                                            InputChannel: {
                                                                locationName: "inputChannel",
                                                                type: "integer"
                                                            }
                                                        },
                                                        required: [ "InputChannel", "Gain" ]
                                                    }
                                                },
                                                OutputChannel: {
                                                    locationName: "outputChannel",
                                                    type: "integer"
                                                }
                                            },
                                            required: [ "OutputChannel", "InputChannelLevels" ]
                                        }
                                    },
                                    ChannelsIn: {
                                        locationName: "channelsIn",
                                        type: "integer"
                                    },
                                    ChannelsOut: {
                                        locationName: "channelsOut",
                                        type: "integer"
                                    }
                                },
                                required: [ "ChannelMappings" ]
                            },
                            StreamName: {
                                locationName: "streamName"
                            }
                        },
                        required: [ "AudioSelectorName", "Name" ]
                    }
                },
                AvailBlanking: {
                    locationName: "availBlanking",
                    type: "structure",
                    members: {
                        AvailBlankingImage: {
                            shape: "S1k",
                            locationName: "availBlankingImage"
                        },
                        State: {
                            locationName: "state"
                        }
                    }
                },
                AvailConfiguration: {
                    locationName: "availConfiguration",
                    type: "structure",
                    members: {
                        AvailSettings: {
                            locationName: "availSettings",
                            type: "structure",
                            members: {
                                Scte35SpliceInsert: {
                                    locationName: "scte35SpliceInsert",
                                    type: "structure",
                                    members: {
                                        AdAvailOffset: {
                                            locationName: "adAvailOffset",
                                            type: "integer"
                                        },
                                        NoRegionalBlackoutFlag: {
                                            locationName: "noRegionalBlackoutFlag"
                                        },
                                        WebDeliveryAllowedFlag: {
                                            locationName: "webDeliveryAllowedFlag"
                                        }
                                    }
                                },
                                Scte35TimeSignalApos: {
                                    locationName: "scte35TimeSignalApos",
                                    type: "structure",
                                    members: {
                                        AdAvailOffset: {
                                            locationName: "adAvailOffset",
                                            type: "integer"
                                        },
                                        NoRegionalBlackoutFlag: {
                                            locationName: "noRegionalBlackoutFlag"
                                        },
                                        WebDeliveryAllowedFlag: {
                                            locationName: "webDeliveryAllowedFlag"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                BlackoutSlate: {
                    locationName: "blackoutSlate",
                    type: "structure",
                    members: {
                        BlackoutSlateImage: {
                            shape: "S1k",
                            locationName: "blackoutSlateImage"
                        },
                        NetworkEndBlackout: {
                            locationName: "networkEndBlackout"
                        },
                        NetworkEndBlackoutImage: {
                            shape: "S1k",
                            locationName: "networkEndBlackoutImage"
                        },
                        NetworkId: {
                            locationName: "networkId"
                        },
                        State: {
                            locationName: "state"
                        }
                    }
                },
                CaptionDescriptions: {
                    locationName: "captionDescriptions",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            CaptionSelectorName: {
                                locationName: "captionSelectorName"
                            },
                            DestinationSettings: {
                                locationName: "destinationSettings",
                                type: "structure",
                                members: {
                                    AribDestinationSettings: {
                                        locationName: "aribDestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    BurnInDestinationSettings: {
                                        locationName: "burnInDestinationSettings",
                                        type: "structure",
                                        members: {
                                            Alignment: {
                                                locationName: "alignment"
                                            },
                                            BackgroundColor: {
                                                locationName: "backgroundColor"
                                            },
                                            BackgroundOpacity: {
                                                locationName: "backgroundOpacity",
                                                type: "integer"
                                            },
                                            Font: {
                                                shape: "S1k",
                                                locationName: "font"
                                            },
                                            FontColor: {
                                                locationName: "fontColor"
                                            },
                                            FontOpacity: {
                                                locationName: "fontOpacity",
                                                type: "integer"
                                            },
                                            FontResolution: {
                                                locationName: "fontResolution",
                                                type: "integer"
                                            },
                                            FontSize: {
                                                locationName: "fontSize"
                                            },
                                            OutlineColor: {
                                                locationName: "outlineColor"
                                            },
                                            OutlineSize: {
                                                locationName: "outlineSize",
                                                type: "integer"
                                            },
                                            ShadowColor: {
                                                locationName: "shadowColor"
                                            },
                                            ShadowOpacity: {
                                                locationName: "shadowOpacity",
                                                type: "integer"
                                            },
                                            ShadowXOffset: {
                                                locationName: "shadowXOffset",
                                                type: "integer"
                                            },
                                            ShadowYOffset: {
                                                locationName: "shadowYOffset",
                                                type: "integer"
                                            },
                                            TeletextGridControl: {
                                                locationName: "teletextGridControl"
                                            },
                                            XPosition: {
                                                locationName: "xPosition",
                                                type: "integer"
                                            },
                                            YPosition: {
                                                locationName: "yPosition",
                                                type: "integer"
                                            }
                                        }
                                    },
                                    DvbSubDestinationSettings: {
                                        locationName: "dvbSubDestinationSettings",
                                        type: "structure",
                                        members: {
                                            Alignment: {
                                                locationName: "alignment"
                                            },
                                            BackgroundColor: {
                                                locationName: "backgroundColor"
                                            },
                                            BackgroundOpacity: {
                                                locationName: "backgroundOpacity",
                                                type: "integer"
                                            },
                                            Font: {
                                                shape: "S1k",
                                                locationName: "font"
                                            },
                                            FontColor: {
                                                locationName: "fontColor"
                                            },
                                            FontOpacity: {
                                                locationName: "fontOpacity",
                                                type: "integer"
                                            },
                                            FontResolution: {
                                                locationName: "fontResolution",
                                                type: "integer"
                                            },
                                            FontSize: {
                                                locationName: "fontSize"
                                            },
                                            OutlineColor: {
                                                locationName: "outlineColor"
                                            },
                                            OutlineSize: {
                                                locationName: "outlineSize",
                                                type: "integer"
                                            },
                                            ShadowColor: {
                                                locationName: "shadowColor"
                                            },
                                            ShadowOpacity: {
                                                locationName: "shadowOpacity",
                                                type: "integer"
                                            },
                                            ShadowXOffset: {
                                                locationName: "shadowXOffset",
                                                type: "integer"
                                            },
                                            ShadowYOffset: {
                                                locationName: "shadowYOffset",
                                                type: "integer"
                                            },
                                            TeletextGridControl: {
                                                locationName: "teletextGridControl"
                                            },
                                            XPosition: {
                                                locationName: "xPosition",
                                                type: "integer"
                                            },
                                            YPosition: {
                                                locationName: "yPosition",
                                                type: "integer"
                                            }
                                        }
                                    },
                                    EbuTtDDestinationSettings: {
                                        locationName: "ebuTtDDestinationSettings",
                                        type: "structure",
                                        members: {
                                            CopyrightHolder: {
                                                locationName: "copyrightHolder"
                                            },
                                            FillLineGap: {
                                                locationName: "fillLineGap"
                                            },
                                            FontFamily: {
                                                locationName: "fontFamily"
                                            },
                                            StyleControl: {
                                                locationName: "styleControl"
                                            }
                                        }
                                    },
                                    EmbeddedDestinationSettings: {
                                        locationName: "embeddedDestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    EmbeddedPlusScte20DestinationSettings: {
                                        locationName: "embeddedPlusScte20DestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    RtmpCaptionInfoDestinationSettings: {
                                        locationName: "rtmpCaptionInfoDestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    Scte20PlusEmbeddedDestinationSettings: {
                                        locationName: "scte20PlusEmbeddedDestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    Scte27DestinationSettings: {
                                        locationName: "scte27DestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    SmpteTtDestinationSettings: {
                                        locationName: "smpteTtDestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    TeletextDestinationSettings: {
                                        locationName: "teletextDestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    TtmlDestinationSettings: {
                                        locationName: "ttmlDestinationSettings",
                                        type: "structure",
                                        members: {
                                            StyleControl: {
                                                locationName: "styleControl"
                                            }
                                        }
                                    },
                                    WebvttDestinationSettings: {
                                        locationName: "webvttDestinationSettings",
                                        type: "structure",
                                        members: {}
                                    }
                                }
                            },
                            LanguageCode: {
                                locationName: "languageCode"
                            },
                            LanguageDescription: {
                                locationName: "languageDescription"
                            },
                            Name: {
                                locationName: "name"
                            }
                        },
                        required: [ "CaptionSelectorName", "Name" ]
                    }
                },
                FeatureActivations: {
                    locationName: "featureActivations",
                    type: "structure",
                    members: {
                        InputPrepareScheduleActions: {
                            locationName: "inputPrepareScheduleActions"
                        }
                    }
                },
                GlobalConfiguration: {
                    locationName: "globalConfiguration",
                    type: "structure",
                    members: {
                        InitialAudioGain: {
                            locationName: "initialAudioGain",
                            type: "integer"
                        },
                        InputEndAction: {
                            locationName: "inputEndAction"
                        },
                        InputLossBehavior: {
                            locationName: "inputLossBehavior",
                            type: "structure",
                            members: {
                                BlackFrameMsec: {
                                    locationName: "blackFrameMsec",
                                    type: "integer"
                                },
                                InputLossImageColor: {
                                    locationName: "inputLossImageColor"
                                },
                                InputLossImageSlate: {
                                    shape: "S1k",
                                    locationName: "inputLossImageSlate"
                                },
                                InputLossImageType: {
                                    locationName: "inputLossImageType"
                                },
                                RepeatFrameMsec: {
                                    locationName: "repeatFrameMsec",
                                    type: "integer"
                                }
                            }
                        },
                        OutputLockingMode: {
                            locationName: "outputLockingMode"
                        },
                        OutputTimingSource: {
                            locationName: "outputTimingSource"
                        },
                        SupportLowFramerateInputs: {
                            locationName: "supportLowFramerateInputs"
                        }
                    }
                },
                MotionGraphicsConfiguration: {
                    locationName: "motionGraphicsConfiguration",
                    type: "structure",
                    members: {
                        MotionGraphicsInsertion: {
                            locationName: "motionGraphicsInsertion"
                        },
                        MotionGraphicsSettings: {
                            locationName: "motionGraphicsSettings",
                            type: "structure",
                            members: {
                                HtmlMotionGraphicsSettings: {
                                    locationName: "htmlMotionGraphicsSettings",
                                    type: "structure",
                                    members: {}
                                }
                            }
                        }
                    },
                    required: [ "MotionGraphicsSettings" ]
                },
                NielsenConfiguration: {
                    locationName: "nielsenConfiguration",
                    type: "structure",
                    members: {
                        DistributorId: {
                            locationName: "distributorId"
                        },
                        NielsenPcmToId3Tagging: {
                            locationName: "nielsenPcmToId3Tagging"
                        }
                    }
                },
                OutputGroups: {
                    locationName: "outputGroups",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {
                                locationName: "name"
                            },
                            OutputGroupSettings: {
                                locationName: "outputGroupSettings",
                                type: "structure",
                                members: {
                                    ArchiveGroupSettings: {
                                        locationName: "archiveGroupSettings",
                                        type: "structure",
                                        members: {
                                            ArchiveCdnSettings: {
                                                locationName: "archiveCdnSettings",
                                                type: "structure",
                                                members: {
                                                    ArchiveS3Settings: {
                                                        locationName: "archiveS3Settings",
                                                        type: "structure",
                                                        members: {
                                                            CannedAcl: {
                                                                locationName: "cannedAcl"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            Destination: {
                                                shape: "S60",
                                                locationName: "destination"
                                            },
                                            RolloverInterval: {
                                                locationName: "rolloverInterval",
                                                type: "integer"
                                            }
                                        },
                                        required: [ "Destination" ]
                                    },
                                    FrameCaptureGroupSettings: {
                                        locationName: "frameCaptureGroupSettings",
                                        type: "structure",
                                        members: {
                                            Destination: {
                                                shape: "S60",
                                                locationName: "destination"
                                            },
                                            FrameCaptureCdnSettings: {
                                                locationName: "frameCaptureCdnSettings",
                                                type: "structure",
                                                members: {
                                                    FrameCaptureS3Settings: {
                                                        locationName: "frameCaptureS3Settings",
                                                        type: "structure",
                                                        members: {
                                                            CannedAcl: {
                                                                locationName: "cannedAcl"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        required: [ "Destination" ]
                                    },
                                    HlsGroupSettings: {
                                        locationName: "hlsGroupSettings",
                                        type: "structure",
                                        members: {
                                            AdMarkers: {
                                                locationName: "adMarkers",
                                                type: "list",
                                                member: {}
                                            },
                                            BaseUrlContent: {
                                                locationName: "baseUrlContent"
                                            },
                                            BaseUrlContent1: {
                                                locationName: "baseUrlContent1"
                                            },
                                            BaseUrlManifest: {
                                                locationName: "baseUrlManifest"
                                            },
                                            BaseUrlManifest1: {
                                                locationName: "baseUrlManifest1"
                                            },
                                            CaptionLanguageMappings: {
                                                locationName: "captionLanguageMappings",
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        CaptionChannel: {
                                                            locationName: "captionChannel",
                                                            type: "integer"
                                                        },
                                                        LanguageCode: {
                                                            locationName: "languageCode"
                                                        },
                                                        LanguageDescription: {
                                                            locationName: "languageDescription"
                                                        }
                                                    },
                                                    required: [ "LanguageCode", "LanguageDescription", "CaptionChannel" ]
                                                }
                                            },
                                            CaptionLanguageSetting: {
                                                locationName: "captionLanguageSetting"
                                            },
                                            ClientCache: {
                                                locationName: "clientCache"
                                            },
                                            CodecSpecification: {
                                                locationName: "codecSpecification"
                                            },
                                            ConstantIv: {
                                                locationName: "constantIv"
                                            },
                                            Destination: {
                                                shape: "S60",
                                                locationName: "destination"
                                            },
                                            DirectoryStructure: {
                                                locationName: "directoryStructure"
                                            },
                                            DiscontinuityTags: {
                                                locationName: "discontinuityTags"
                                            },
                                            EncryptionType: {
                                                locationName: "encryptionType"
                                            },
                                            HlsCdnSettings: {
                                                locationName: "hlsCdnSettings",
                                                type: "structure",
                                                members: {
                                                    HlsAkamaiSettings: {
                                                        locationName: "hlsAkamaiSettings",
                                                        type: "structure",
                                                        members: {
                                                            ConnectionRetryInterval: {
                                                                locationName: "connectionRetryInterval",
                                                                type: "integer"
                                                            },
                                                            FilecacheDuration: {
                                                                locationName: "filecacheDuration",
                                                                type: "integer"
                                                            },
                                                            HttpTransferMode: {
                                                                locationName: "httpTransferMode"
                                                            },
                                                            NumRetries: {
                                                                locationName: "numRetries",
                                                                type: "integer"
                                                            },
                                                            RestartDelay: {
                                                                locationName: "restartDelay",
                                                                type: "integer"
                                                            },
                                                            Salt: {
                                                                locationName: "salt"
                                                            },
                                                            Token: {
                                                                locationName: "token"
                                                            }
                                                        }
                                                    },
                                                    HlsBasicPutSettings: {
                                                        locationName: "hlsBasicPutSettings",
                                                        type: "structure",
                                                        members: {
                                                            ConnectionRetryInterval: {
                                                                locationName: "connectionRetryInterval",
                                                                type: "integer"
                                                            },
                                                            FilecacheDuration: {
                                                                locationName: "filecacheDuration",
                                                                type: "integer"
                                                            },
                                                            NumRetries: {
                                                                locationName: "numRetries",
                                                                type: "integer"
                                                            },
                                                            RestartDelay: {
                                                                locationName: "restartDelay",
                                                                type: "integer"
                                                            }
                                                        }
                                                    },
                                                    HlsMediaStoreSettings: {
                                                        locationName: "hlsMediaStoreSettings",
                                                        type: "structure",
                                                        members: {
                                                            ConnectionRetryInterval: {
                                                                locationName: "connectionRetryInterval",
                                                                type: "integer"
                                                            },
                                                            FilecacheDuration: {
                                                                locationName: "filecacheDuration",
                                                                type: "integer"
                                                            },
                                                            MediaStoreStorageClass: {
                                                                locationName: "mediaStoreStorageClass"
                                                            },
                                                            NumRetries: {
                                                                locationName: "numRetries",
                                                                type: "integer"
                                                            },
                                                            RestartDelay: {
                                                                locationName: "restartDelay",
                                                                type: "integer"
                                                            }
                                                        }
                                                    },
                                                    HlsS3Settings: {
                                                        locationName: "hlsS3Settings",
                                                        type: "structure",
                                                        members: {
                                                            CannedAcl: {
                                                                locationName: "cannedAcl"
                                                            }
                                                        }
                                                    },
                                                    HlsWebdavSettings: {
                                                        locationName: "hlsWebdavSettings",
                                                        type: "structure",
                                                        members: {
                                                            ConnectionRetryInterval: {
                                                                locationName: "connectionRetryInterval",
                                                                type: "integer"
                                                            },
                                                            FilecacheDuration: {
                                                                locationName: "filecacheDuration",
                                                                type: "integer"
                                                            },
                                                            HttpTransferMode: {
                                                                locationName: "httpTransferMode"
                                                            },
                                                            NumRetries: {
                                                                locationName: "numRetries",
                                                                type: "integer"
                                                            },
                                                            RestartDelay: {
                                                                locationName: "restartDelay",
                                                                type: "integer"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            HlsId3SegmentTagging: {
                                                locationName: "hlsId3SegmentTagging"
                                            },
                                            IFrameOnlyPlaylists: {
                                                locationName: "iFrameOnlyPlaylists"
                                            },
                                            IncompleteSegmentBehavior: {
                                                locationName: "incompleteSegmentBehavior"
                                            },
                                            IndexNSegments: {
                                                locationName: "indexNSegments",
                                                type: "integer"
                                            },
                                            InputLossAction: {
                                                locationName: "inputLossAction"
                                            },
                                            IvInManifest: {
                                                locationName: "ivInManifest"
                                            },
                                            IvSource: {
                                                locationName: "ivSource"
                                            },
                                            KeepSegments: {
                                                locationName: "keepSegments",
                                                type: "integer"
                                            },
                                            KeyFormat: {
                                                locationName: "keyFormat"
                                            },
                                            KeyFormatVersions: {
                                                locationName: "keyFormatVersions"
                                            },
                                            KeyProviderSettings: {
                                                locationName: "keyProviderSettings",
                                                type: "structure",
                                                members: {
                                                    StaticKeySettings: {
                                                        locationName: "staticKeySettings",
                                                        type: "structure",
                                                        members: {
                                                            KeyProviderServer: {
                                                                shape: "S1k",
                                                                locationName: "keyProviderServer"
                                                            },
                                                            StaticKeyValue: {
                                                                locationName: "staticKeyValue"
                                                            }
                                                        },
                                                        required: [ "StaticKeyValue" ]
                                                    }
                                                }
                                            },
                                            ManifestCompression: {
                                                locationName: "manifestCompression"
                                            },
                                            ManifestDurationFormat: {
                                                locationName: "manifestDurationFormat"
                                            },
                                            MinSegmentLength: {
                                                locationName: "minSegmentLength",
                                                type: "integer"
                                            },
                                            Mode: {
                                                locationName: "mode"
                                            },
                                            OutputSelection: {
                                                locationName: "outputSelection"
                                            },
                                            ProgramDateTime: {
                                                locationName: "programDateTime"
                                            },
                                            ProgramDateTimePeriod: {
                                                locationName: "programDateTimePeriod",
                                                type: "integer"
                                            },
                                            RedundantManifest: {
                                                locationName: "redundantManifest"
                                            },
                                            SegmentLength: {
                                                locationName: "segmentLength",
                                                type: "integer"
                                            },
                                            SegmentationMode: {
                                                locationName: "segmentationMode"
                                            },
                                            SegmentsPerSubdirectory: {
                                                locationName: "segmentsPerSubdirectory",
                                                type: "integer"
                                            },
                                            StreamInfResolution: {
                                                locationName: "streamInfResolution"
                                            },
                                            TimedMetadataId3Frame: {
                                                locationName: "timedMetadataId3Frame"
                                            },
                                            TimedMetadataId3Period: {
                                                locationName: "timedMetadataId3Period",
                                                type: "integer"
                                            },
                                            TimestampDeltaMilliseconds: {
                                                locationName: "timestampDeltaMilliseconds",
                                                type: "integer"
                                            },
                                            TsFileMode: {
                                                locationName: "tsFileMode"
                                            }
                                        },
                                        required: [ "Destination" ]
                                    },
                                    MediaPackageGroupSettings: {
                                        locationName: "mediaPackageGroupSettings",
                                        type: "structure",
                                        members: {
                                            Destination: {
                                                shape: "S60",
                                                locationName: "destination"
                                            }
                                        },
                                        required: [ "Destination" ]
                                    },
                                    MsSmoothGroupSettings: {
                                        locationName: "msSmoothGroupSettings",
                                        type: "structure",
                                        members: {
                                            AcquisitionPointId: {
                                                locationName: "acquisitionPointId"
                                            },
                                            AudioOnlyTimecodeControl: {
                                                locationName: "audioOnlyTimecodeControl"
                                            },
                                            CertificateMode: {
                                                locationName: "certificateMode"
                                            },
                                            ConnectionRetryInterval: {
                                                locationName: "connectionRetryInterval",
                                                type: "integer"
                                            },
                                            Destination: {
                                                shape: "S60",
                                                locationName: "destination"
                                            },
                                            EventId: {
                                                locationName: "eventId"
                                            },
                                            EventIdMode: {
                                                locationName: "eventIdMode"
                                            },
                                            EventStopBehavior: {
                                                locationName: "eventStopBehavior"
                                            },
                                            FilecacheDuration: {
                                                locationName: "filecacheDuration",
                                                type: "integer"
                                            },
                                            FragmentLength: {
                                                locationName: "fragmentLength",
                                                type: "integer"
                                            },
                                            InputLossAction: {
                                                locationName: "inputLossAction"
                                            },
                                            NumRetries: {
                                                locationName: "numRetries",
                                                type: "integer"
                                            },
                                            RestartDelay: {
                                                locationName: "restartDelay",
                                                type: "integer"
                                            },
                                            SegmentationMode: {
                                                locationName: "segmentationMode"
                                            },
                                            SendDelayMs: {
                                                locationName: "sendDelayMs",
                                                type: "integer"
                                            },
                                            SparseTrackType: {
                                                locationName: "sparseTrackType"
                                            },
                                            StreamManifestBehavior: {
                                                locationName: "streamManifestBehavior"
                                            },
                                            TimestampOffset: {
                                                locationName: "timestampOffset"
                                            },
                                            TimestampOffsetMode: {
                                                locationName: "timestampOffsetMode"
                                            }
                                        },
                                        required: [ "Destination" ]
                                    },
                                    MultiplexGroupSettings: {
                                        locationName: "multiplexGroupSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    RtmpGroupSettings: {
                                        locationName: "rtmpGroupSettings",
                                        type: "structure",
                                        members: {
                                            AdMarkers: {
                                                locationName: "adMarkers",
                                                type: "list",
                                                member: {}
                                            },
                                            AuthenticationScheme: {
                                                locationName: "authenticationScheme"
                                            },
                                            CacheFullBehavior: {
                                                locationName: "cacheFullBehavior"
                                            },
                                            CacheLength: {
                                                locationName: "cacheLength",
                                                type: "integer"
                                            },
                                            CaptionData: {
                                                locationName: "captionData"
                                            },
                                            InputLossAction: {
                                                locationName: "inputLossAction"
                                            },
                                            RestartDelay: {
                                                locationName: "restartDelay",
                                                type: "integer"
                                            }
                                        }
                                    },
                                    UdpGroupSettings: {
                                        locationName: "udpGroupSettings",
                                        type: "structure",
                                        members: {
                                            InputLossAction: {
                                                locationName: "inputLossAction"
                                            },
                                            TimedMetadataId3Frame: {
                                                locationName: "timedMetadataId3Frame"
                                            },
                                            TimedMetadataId3Period: {
                                                locationName: "timedMetadataId3Period",
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            },
                            Outputs: {
                                locationName: "outputs",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        AudioDescriptionNames: {
                                            shape: "S5",
                                            locationName: "audioDescriptionNames"
                                        },
                                        CaptionDescriptionNames: {
                                            shape: "S5",
                                            locationName: "captionDescriptionNames"
                                        },
                                        OutputName: {
                                            locationName: "outputName"
                                        },
                                        OutputSettings: {
                                            locationName: "outputSettings",
                                            type: "structure",
                                            members: {
                                                ArchiveOutputSettings: {
                                                    locationName: "archiveOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        ContainerSettings: {
                                                            locationName: "containerSettings",
                                                            type: "structure",
                                                            members: {
                                                                M2tsSettings: {
                                                                    shape: "S86",
                                                                    locationName: "m2tsSettings"
                                                                },
                                                                RawSettings: {
                                                                    locationName: "rawSettings",
                                                                    type: "structure",
                                                                    members: {}
                                                                }
                                                            }
                                                        },
                                                        Extension: {
                                                            locationName: "extension"
                                                        },
                                                        NameModifier: {
                                                            locationName: "nameModifier"
                                                        }
                                                    },
                                                    required: [ "ContainerSettings" ]
                                                },
                                                FrameCaptureOutputSettings: {
                                                    locationName: "frameCaptureOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        NameModifier: {
                                                            locationName: "nameModifier"
                                                        }
                                                    }
                                                },
                                                HlsOutputSettings: {
                                                    locationName: "hlsOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        H265PackagingType: {
                                                            locationName: "h265PackagingType"
                                                        },
                                                        HlsSettings: {
                                                            locationName: "hlsSettings",
                                                            type: "structure",
                                                            members: {
                                                                AudioOnlyHlsSettings: {
                                                                    locationName: "audioOnlyHlsSettings",
                                                                    type: "structure",
                                                                    members: {
                                                                        AudioGroupId: {
                                                                            locationName: "audioGroupId"
                                                                        },
                                                                        AudioOnlyImage: {
                                                                            shape: "S1k",
                                                                            locationName: "audioOnlyImage"
                                                                        },
                                                                        AudioTrackType: {
                                                                            locationName: "audioTrackType"
                                                                        },
                                                                        SegmentType: {
                                                                            locationName: "segmentType"
                                                                        }
                                                                    }
                                                                },
                                                                Fmp4HlsSettings: {
                                                                    locationName: "fmp4HlsSettings",
                                                                    type: "structure",
                                                                    members: {
                                                                        AudioRenditionSets: {
                                                                            locationName: "audioRenditionSets"
                                                                        },
                                                                        NielsenId3Behavior: {
                                                                            locationName: "nielsenId3Behavior"
                                                                        },
                                                                        TimedMetadataBehavior: {
                                                                            locationName: "timedMetadataBehavior"
                                                                        }
                                                                    }
                                                                },
                                                                FrameCaptureHlsSettings: {
                                                                    locationName: "frameCaptureHlsSettings",
                                                                    type: "structure",
                                                                    members: {}
                                                                },
                                                                StandardHlsSettings: {
                                                                    locationName: "standardHlsSettings",
                                                                    type: "structure",
                                                                    members: {
                                                                        AudioRenditionSets: {
                                                                            locationName: "audioRenditionSets"
                                                                        },
                                                                        M3u8Settings: {
                                                                            locationName: "m3u8Settings",
                                                                            type: "structure",
                                                                            members: {
                                                                                AudioFramesPerPes: {
                                                                                    locationName: "audioFramesPerPes",
                                                                                    type: "integer"
                                                                                },
                                                                                AudioPids: {
                                                                                    locationName: "audioPids"
                                                                                },
                                                                                EcmPid: {
                                                                                    locationName: "ecmPid"
                                                                                },
                                                                                NielsenId3Behavior: {
                                                                                    locationName: "nielsenId3Behavior"
                                                                                },
                                                                                PatInterval: {
                                                                                    locationName: "patInterval",
                                                                                    type: "integer"
                                                                                },
                                                                                PcrControl: {
                                                                                    locationName: "pcrControl"
                                                                                },
                                                                                PcrPeriod: {
                                                                                    locationName: "pcrPeriod",
                                                                                    type: "integer"
                                                                                },
                                                                                PcrPid: {
                                                                                    locationName: "pcrPid"
                                                                                },
                                                                                PmtInterval: {
                                                                                    locationName: "pmtInterval",
                                                                                    type: "integer"
                                                                                },
                                                                                PmtPid: {
                                                                                    locationName: "pmtPid"
                                                                                },
                                                                                ProgramNum: {
                                                                                    locationName: "programNum",
                                                                                    type: "integer"
                                                                                },
                                                                                Scte35Behavior: {
                                                                                    locationName: "scte35Behavior"
                                                                                },
                                                                                Scte35Pid: {
                                                                                    locationName: "scte35Pid"
                                                                                },
                                                                                TimedMetadataBehavior: {
                                                                                    locationName: "timedMetadataBehavior"
                                                                                },
                                                                                TimedMetadataPid: {
                                                                                    locationName: "timedMetadataPid"
                                                                                },
                                                                                TransportStreamId: {
                                                                                    locationName: "transportStreamId",
                                                                                    type: "integer"
                                                                                },
                                                                                VideoPid: {
                                                                                    locationName: "videoPid"
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    required: [ "M3u8Settings" ]
                                                                }
                                                            }
                                                        },
                                                        NameModifier: {
                                                            locationName: "nameModifier"
                                                        },
                                                        SegmentModifier: {
                                                            locationName: "segmentModifier"
                                                        }
                                                    },
                                                    required: [ "HlsSettings" ]
                                                },
                                                MediaPackageOutputSettings: {
                                                    locationName: "mediaPackageOutputSettings",
                                                    type: "structure",
                                                    members: {}
                                                },
                                                MsSmoothOutputSettings: {
                                                    locationName: "msSmoothOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        H265PackagingType: {
                                                            locationName: "h265PackagingType"
                                                        },
                                                        NameModifier: {
                                                            locationName: "nameModifier"
                                                        }
                                                    }
                                                },
                                                MultiplexOutputSettings: {
                                                    locationName: "multiplexOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        Destination: {
                                                            shape: "S60",
                                                            locationName: "destination"
                                                        }
                                                    },
                                                    required: [ "Destination" ]
                                                },
                                                RtmpOutputSettings: {
                                                    locationName: "rtmpOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        CertificateMode: {
                                                            locationName: "certificateMode"
                                                        },
                                                        ConnectionRetryInterval: {
                                                            locationName: "connectionRetryInterval",
                                                            type: "integer"
                                                        },
                                                        Destination: {
                                                            shape: "S60",
                                                            locationName: "destination"
                                                        },
                                                        NumRetries: {
                                                            locationName: "numRetries",
                                                            type: "integer"
                                                        }
                                                    },
                                                    required: [ "Destination" ]
                                                },
                                                UdpOutputSettings: {
                                                    locationName: "udpOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        BufferMsec: {
                                                            locationName: "bufferMsec",
                                                            type: "integer"
                                                        },
                                                        ContainerSettings: {
                                                            locationName: "containerSettings",
                                                            type: "structure",
                                                            members: {
                                                                M2tsSettings: {
                                                                    shape: "S86",
                                                                    locationName: "m2tsSettings"
                                                                }
                                                            }
                                                        },
                                                        Destination: {
                                                            shape: "S60",
                                                            locationName: "destination"
                                                        },
                                                        FecOutputSettings: {
                                                            locationName: "fecOutputSettings",
                                                            type: "structure",
                                                            members: {
                                                                ColumnDepth: {
                                                                    locationName: "columnDepth",
                                                                    type: "integer"
                                                                },
                                                                IncludeFec: {
                                                                    locationName: "includeFec"
                                                                },
                                                                RowLength: {
                                                                    locationName: "rowLength",
                                                                    type: "integer"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    required: [ "Destination", "ContainerSettings" ]
                                                }
                                            }
                                        },
                                        VideoDescriptionName: {
                                            locationName: "videoDescriptionName"
                                        }
                                    },
                                    required: [ "OutputSettings" ]
                                }
                            }
                        },
                        required: [ "Outputs", "OutputGroupSettings" ]
                    }
                },
                TimecodeConfig: {
                    locationName: "timecodeConfig",
                    type: "structure",
                    members: {
                        Source: {
                            locationName: "source"
                        },
                        SyncThreshold: {
                            locationName: "syncThreshold",
                            type: "integer"
                        }
                    },
                    required: [ "Source" ]
                },
                VideoDescriptions: {
                    locationName: "videoDescriptions",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            CodecSettings: {
                                locationName: "codecSettings",
                                type: "structure",
                                members: {
                                    FrameCaptureSettings: {
                                        locationName: "frameCaptureSettings",
                                        type: "structure",
                                        members: {
                                            CaptureInterval: {
                                                locationName: "captureInterval",
                                                type: "integer"
                                            },
                                            CaptureIntervalUnits: {
                                                locationName: "captureIntervalUnits"
                                            }
                                        }
                                    },
                                    H264Settings: {
                                        locationName: "h264Settings",
                                        type: "structure",
                                        members: {
                                            AdaptiveQuantization: {
                                                locationName: "adaptiveQuantization"
                                            },
                                            AfdSignaling: {
                                                locationName: "afdSignaling"
                                            },
                                            Bitrate: {
                                                locationName: "bitrate",
                                                type: "integer"
                                            },
                                            BufFillPct: {
                                                locationName: "bufFillPct",
                                                type: "integer"
                                            },
                                            BufSize: {
                                                locationName: "bufSize",
                                                type: "integer"
                                            },
                                            ColorMetadata: {
                                                locationName: "colorMetadata"
                                            },
                                            ColorSpaceSettings: {
                                                locationName: "colorSpaceSettings",
                                                type: "structure",
                                                members: {
                                                    ColorSpacePassthroughSettings: {
                                                        shape: "Sad",
                                                        locationName: "colorSpacePassthroughSettings"
                                                    },
                                                    Rec601Settings: {
                                                        shape: "Sae",
                                                        locationName: "rec601Settings"
                                                    },
                                                    Rec709Settings: {
                                                        shape: "Saf",
                                                        locationName: "rec709Settings"
                                                    }
                                                }
                                            },
                                            EntropyEncoding: {
                                                locationName: "entropyEncoding"
                                            },
                                            FilterSettings: {
                                                locationName: "filterSettings",
                                                type: "structure",
                                                members: {
                                                    TemporalFilterSettings: {
                                                        shape: "Sai",
                                                        locationName: "temporalFilterSettings"
                                                    }
                                                }
                                            },
                                            FixedAfd: {
                                                locationName: "fixedAfd"
                                            },
                                            FlickerAq: {
                                                locationName: "flickerAq"
                                            },
                                            ForceFieldPictures: {
                                                locationName: "forceFieldPictures"
                                            },
                                            FramerateControl: {
                                                locationName: "framerateControl"
                                            },
                                            FramerateDenominator: {
                                                locationName: "framerateDenominator",
                                                type: "integer"
                                            },
                                            FramerateNumerator: {
                                                locationName: "framerateNumerator",
                                                type: "integer"
                                            },
                                            GopBReference: {
                                                locationName: "gopBReference"
                                            },
                                            GopClosedCadence: {
                                                locationName: "gopClosedCadence",
                                                type: "integer"
                                            },
                                            GopNumBFrames: {
                                                locationName: "gopNumBFrames",
                                                type: "integer"
                                            },
                                            GopSize: {
                                                locationName: "gopSize",
                                                type: "double"
                                            },
                                            GopSizeUnits: {
                                                locationName: "gopSizeUnits"
                                            },
                                            Level: {
                                                locationName: "level"
                                            },
                                            LookAheadRateControl: {
                                                locationName: "lookAheadRateControl"
                                            },
                                            MaxBitrate: {
                                                locationName: "maxBitrate",
                                                type: "integer"
                                            },
                                            MinIInterval: {
                                                locationName: "minIInterval",
                                                type: "integer"
                                            },
                                            NumRefFrames: {
                                                locationName: "numRefFrames",
                                                type: "integer"
                                            },
                                            ParControl: {
                                                locationName: "parControl"
                                            },
                                            ParDenominator: {
                                                locationName: "parDenominator",
                                                type: "integer"
                                            },
                                            ParNumerator: {
                                                locationName: "parNumerator",
                                                type: "integer"
                                            },
                                            Profile: {
                                                locationName: "profile"
                                            },
                                            QualityLevel: {
                                                locationName: "qualityLevel"
                                            },
                                            QvbrQualityLevel: {
                                                locationName: "qvbrQualityLevel",
                                                type: "integer"
                                            },
                                            RateControlMode: {
                                                locationName: "rateControlMode"
                                            },
                                            ScanType: {
                                                locationName: "scanType"
                                            },
                                            SceneChangeDetect: {
                                                locationName: "sceneChangeDetect"
                                            },
                                            Slices: {
                                                locationName: "slices",
                                                type: "integer"
                                            },
                                            Softness: {
                                                locationName: "softness",
                                                type: "integer"
                                            },
                                            SpatialAq: {
                                                locationName: "spatialAq"
                                            },
                                            SubgopLength: {
                                                locationName: "subgopLength"
                                            },
                                            Syntax: {
                                                locationName: "syntax"
                                            },
                                            TemporalAq: {
                                                locationName: "temporalAq"
                                            },
                                            TimecodeInsertion: {
                                                locationName: "timecodeInsertion"
                                            }
                                        }
                                    },
                                    H265Settings: {
                                        locationName: "h265Settings",
                                        type: "structure",
                                        members: {
                                            AdaptiveQuantization: {
                                                locationName: "adaptiveQuantization"
                                            },
                                            AfdSignaling: {
                                                locationName: "afdSignaling"
                                            },
                                            AlternativeTransferFunction: {
                                                locationName: "alternativeTransferFunction"
                                            },
                                            Bitrate: {
                                                locationName: "bitrate",
                                                type: "integer"
                                            },
                                            BufSize: {
                                                locationName: "bufSize",
                                                type: "integer"
                                            },
                                            ColorMetadata: {
                                                locationName: "colorMetadata"
                                            },
                                            ColorSpaceSettings: {
                                                locationName: "colorSpaceSettings",
                                                type: "structure",
                                                members: {
                                                    ColorSpacePassthroughSettings: {
                                                        shape: "Sad",
                                                        locationName: "colorSpacePassthroughSettings"
                                                    },
                                                    Hdr10Settings: {
                                                        shape: "Sbg",
                                                        locationName: "hdr10Settings"
                                                    },
                                                    Rec601Settings: {
                                                        shape: "Sae",
                                                        locationName: "rec601Settings"
                                                    },
                                                    Rec709Settings: {
                                                        shape: "Saf",
                                                        locationName: "rec709Settings"
                                                    }
                                                }
                                            },
                                            FilterSettings: {
                                                locationName: "filterSettings",
                                                type: "structure",
                                                members: {
                                                    TemporalFilterSettings: {
                                                        shape: "Sai",
                                                        locationName: "temporalFilterSettings"
                                                    }
                                                }
                                            },
                                            FixedAfd: {
                                                locationName: "fixedAfd"
                                            },
                                            FlickerAq: {
                                                locationName: "flickerAq"
                                            },
                                            FramerateDenominator: {
                                                locationName: "framerateDenominator",
                                                type: "integer"
                                            },
                                            FramerateNumerator: {
                                                locationName: "framerateNumerator",
                                                type: "integer"
                                            },
                                            GopClosedCadence: {
                                                locationName: "gopClosedCadence",
                                                type: "integer"
                                            },
                                            GopSize: {
                                                locationName: "gopSize",
                                                type: "double"
                                            },
                                            GopSizeUnits: {
                                                locationName: "gopSizeUnits"
                                            },
                                            Level: {
                                                locationName: "level"
                                            },
                                            LookAheadRateControl: {
                                                locationName: "lookAheadRateControl"
                                            },
                                            MaxBitrate: {
                                                locationName: "maxBitrate",
                                                type: "integer"
                                            },
                                            MinIInterval: {
                                                locationName: "minIInterval",
                                                type: "integer"
                                            },
                                            ParDenominator: {
                                                locationName: "parDenominator",
                                                type: "integer"
                                            },
                                            ParNumerator: {
                                                locationName: "parNumerator",
                                                type: "integer"
                                            },
                                            Profile: {
                                                locationName: "profile"
                                            },
                                            QvbrQualityLevel: {
                                                locationName: "qvbrQualityLevel",
                                                type: "integer"
                                            },
                                            RateControlMode: {
                                                locationName: "rateControlMode"
                                            },
                                            ScanType: {
                                                locationName: "scanType"
                                            },
                                            SceneChangeDetect: {
                                                locationName: "sceneChangeDetect"
                                            },
                                            Slices: {
                                                locationName: "slices",
                                                type: "integer"
                                            },
                                            Tier: {
                                                locationName: "tier"
                                            },
                                            TimecodeInsertion: {
                                                locationName: "timecodeInsertion"
                                            }
                                        },
                                        required: [ "FramerateNumerator", "FramerateDenominator" ]
                                    },
                                    Mpeg2Settings: {
                                        locationName: "mpeg2Settings",
                                        type: "structure",
                                        members: {
                                            AdaptiveQuantization: {
                                                locationName: "adaptiveQuantization"
                                            },
                                            AfdSignaling: {
                                                locationName: "afdSignaling"
                                            },
                                            ColorMetadata: {
                                                locationName: "colorMetadata"
                                            },
                                            ColorSpace: {
                                                locationName: "colorSpace"
                                            },
                                            DisplayAspectRatio: {
                                                locationName: "displayAspectRatio"
                                            },
                                            FilterSettings: {
                                                locationName: "filterSettings",
                                                type: "structure",
                                                members: {
                                                    TemporalFilterSettings: {
                                                        shape: "Sai",
                                                        locationName: "temporalFilterSettings"
                                                    }
                                                }
                                            },
                                            FixedAfd: {
                                                locationName: "fixedAfd"
                                            },
                                            FramerateDenominator: {
                                                locationName: "framerateDenominator",
                                                type: "integer"
                                            },
                                            FramerateNumerator: {
                                                locationName: "framerateNumerator",
                                                type: "integer"
                                            },
                                            GopClosedCadence: {
                                                locationName: "gopClosedCadence",
                                                type: "integer"
                                            },
                                            GopNumBFrames: {
                                                locationName: "gopNumBFrames",
                                                type: "integer"
                                            },
                                            GopSize: {
                                                locationName: "gopSize",
                                                type: "double"
                                            },
                                            GopSizeUnits: {
                                                locationName: "gopSizeUnits"
                                            },
                                            ScanType: {
                                                locationName: "scanType"
                                            },
                                            SubgopLength: {
                                                locationName: "subgopLength"
                                            },
                                            TimecodeInsertion: {
                                                locationName: "timecodeInsertion"
                                            }
                                        },
                                        required: [ "FramerateNumerator", "FramerateDenominator" ]
                                    }
                                }
                            },
                            Height: {
                                locationName: "height",
                                type: "integer"
                            },
                            Name: {
                                locationName: "name"
                            },
                            RespondToAfd: {
                                locationName: "respondToAfd"
                            },
                            ScalingBehavior: {
                                locationName: "scalingBehavior"
                            },
                            Sharpness: {
                                locationName: "sharpness",
                                type: "integer"
                            },
                            Width: {
                                locationName: "width",
                                type: "integer"
                            }
                        },
                        required: [ "Name" ]
                    }
                }
            },
            required: [ "VideoDescriptions", "AudioDescriptions", "OutputGroups", "TimecodeConfig" ]
        },
        S60: {
            type: "structure",
            members: {
                DestinationRefId: {
                    locationName: "destinationRefId"
                }
            }
        },
        S86: {
            type: "structure",
            members: {
                AbsentInputAudioBehavior: {
                    locationName: "absentInputAudioBehavior"
                },
                Arib: {
                    locationName: "arib"
                },
                AribCaptionsPid: {
                    locationName: "aribCaptionsPid"
                },
                AribCaptionsPidControl: {
                    locationName: "aribCaptionsPidControl"
                },
                AudioBufferModel: {
                    locationName: "audioBufferModel"
                },
                AudioFramesPerPes: {
                    locationName: "audioFramesPerPes",
                    type: "integer"
                },
                AudioPids: {
                    locationName: "audioPids"
                },
                AudioStreamType: {
                    locationName: "audioStreamType"
                },
                Bitrate: {
                    locationName: "bitrate",
                    type: "integer"
                },
                BufferModel: {
                    locationName: "bufferModel"
                },
                CcDescriptor: {
                    locationName: "ccDescriptor"
                },
                DvbNitSettings: {
                    locationName: "dvbNitSettings",
                    type: "structure",
                    members: {
                        NetworkId: {
                            locationName: "networkId",
                            type: "integer"
                        },
                        NetworkName: {
                            locationName: "networkName"
                        },
                        RepInterval: {
                            locationName: "repInterval",
                            type: "integer"
                        }
                    },
                    required: [ "NetworkName", "NetworkId" ]
                },
                DvbSdtSettings: {
                    locationName: "dvbSdtSettings",
                    type: "structure",
                    members: {
                        OutputSdt: {
                            locationName: "outputSdt"
                        },
                        RepInterval: {
                            locationName: "repInterval",
                            type: "integer"
                        },
                        ServiceName: {
                            locationName: "serviceName"
                        },
                        ServiceProviderName: {
                            locationName: "serviceProviderName"
                        }
                    }
                },
                DvbSubPids: {
                    locationName: "dvbSubPids"
                },
                DvbTdtSettings: {
                    locationName: "dvbTdtSettings",
                    type: "structure",
                    members: {
                        RepInterval: {
                            locationName: "repInterval",
                            type: "integer"
                        }
                    }
                },
                DvbTeletextPid: {
                    locationName: "dvbTeletextPid"
                },
                Ebif: {
                    locationName: "ebif"
                },
                EbpAudioInterval: {
                    locationName: "ebpAudioInterval"
                },
                EbpLookaheadMs: {
                    locationName: "ebpLookaheadMs",
                    type: "integer"
                },
                EbpPlacement: {
                    locationName: "ebpPlacement"
                },
                EcmPid: {
                    locationName: "ecmPid"
                },
                EsRateInPes: {
                    locationName: "esRateInPes"
                },
                EtvPlatformPid: {
                    locationName: "etvPlatformPid"
                },
                EtvSignalPid: {
                    locationName: "etvSignalPid"
                },
                FragmentTime: {
                    locationName: "fragmentTime",
                    type: "double"
                },
                Klv: {
                    locationName: "klv"
                },
                KlvDataPids: {
                    locationName: "klvDataPids"
                },
                NielsenId3Behavior: {
                    locationName: "nielsenId3Behavior"
                },
                NullPacketBitrate: {
                    locationName: "nullPacketBitrate",
                    type: "double"
                },
                PatInterval: {
                    locationName: "patInterval",
                    type: "integer"
                },
                PcrControl: {
                    locationName: "pcrControl"
                },
                PcrPeriod: {
                    locationName: "pcrPeriod",
                    type: "integer"
                },
                PcrPid: {
                    locationName: "pcrPid"
                },
                PmtInterval: {
                    locationName: "pmtInterval",
                    type: "integer"
                },
                PmtPid: {
                    locationName: "pmtPid"
                },
                ProgramNum: {
                    locationName: "programNum",
                    type: "integer"
                },
                RateMode: {
                    locationName: "rateMode"
                },
                Scte27Pids: {
                    locationName: "scte27Pids"
                },
                Scte35Control: {
                    locationName: "scte35Control"
                },
                Scte35Pid: {
                    locationName: "scte35Pid"
                },
                SegmentationMarkers: {
                    locationName: "segmentationMarkers"
                },
                SegmentationStyle: {
                    locationName: "segmentationStyle"
                },
                SegmentationTime: {
                    locationName: "segmentationTime",
                    type: "double"
                },
                TimedMetadataBehavior: {
                    locationName: "timedMetadataBehavior"
                },
                TimedMetadataPid: {
                    locationName: "timedMetadataPid"
                },
                TransportStreamId: {
                    locationName: "transportStreamId",
                    type: "integer"
                },
                VideoPid: {
                    locationName: "videoPid"
                }
            }
        },
        Sad: {
            type: "structure",
            members: {}
        },
        Sae: {
            type: "structure",
            members: {}
        },
        Saf: {
            type: "structure",
            members: {}
        },
        Sai: {
            type: "structure",
            members: {
                PostFilterSharpening: {
                    locationName: "postFilterSharpening"
                },
                Strength: {
                    locationName: "strength"
                }
            }
        },
        Sbg: {
            type: "structure",
            members: {
                MaxCll: {
                    locationName: "maxCll",
                    type: "integer"
                },
                MaxFall: {
                    locationName: "maxFall",
                    type: "integer"
                }
            }
        },
        Sc6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AutomaticInputFailoverSettings: {
                        locationName: "automaticInputFailoverSettings",
                        type: "structure",
                        members: {
                            ErrorClearTimeMsec: {
                                locationName: "errorClearTimeMsec",
                                type: "integer"
                            },
                            FailoverConditions: {
                                locationName: "failoverConditions",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        FailoverConditionSettings: {
                                            locationName: "failoverConditionSettings",
                                            type: "structure",
                                            members: {
                                                AudioSilenceSettings: {
                                                    locationName: "audioSilenceSettings",
                                                    type: "structure",
                                                    members: {
                                                        AudioSelectorName: {
                                                            locationName: "audioSelectorName"
                                                        },
                                                        AudioSilenceThresholdMsec: {
                                                            locationName: "audioSilenceThresholdMsec",
                                                            type: "integer"
                                                        }
                                                    },
                                                    required: [ "AudioSelectorName" ]
                                                },
                                                InputLossSettings: {
                                                    locationName: "inputLossSettings",
                                                    type: "structure",
                                                    members: {
                                                        InputLossThresholdMsec: {
                                                            locationName: "inputLossThresholdMsec",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                VideoBlackSettings: {
                                                    locationName: "videoBlackSettings",
                                                    type: "structure",
                                                    members: {
                                                        BlackDetectThreshold: {
                                                            locationName: "blackDetectThreshold",
                                                            type: "double"
                                                        },
                                                        VideoBlackThresholdMsec: {
                                                            locationName: "videoBlackThresholdMsec",
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            InputPreference: {
                                locationName: "inputPreference"
                            },
                            SecondaryInputId: {
                                locationName: "secondaryInputId"
                            }
                        },
                        required: [ "SecondaryInputId" ]
                    },
                    InputAttachmentName: {
                        locationName: "inputAttachmentName"
                    },
                    InputId: {
                        locationName: "inputId"
                    },
                    InputSettings: {
                        locationName: "inputSettings",
                        type: "structure",
                        members: {
                            AudioSelectors: {
                                locationName: "audioSelectors",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {
                                            locationName: "name"
                                        },
                                        SelectorSettings: {
                                            locationName: "selectorSettings",
                                            type: "structure",
                                            members: {
                                                AudioLanguageSelection: {
                                                    locationName: "audioLanguageSelection",
                                                    type: "structure",
                                                    members: {
                                                        LanguageCode: {
                                                            locationName: "languageCode"
                                                        },
                                                        LanguageSelectionPolicy: {
                                                            locationName: "languageSelectionPolicy"
                                                        }
                                                    },
                                                    required: [ "LanguageCode" ]
                                                },
                                                AudioPidSelection: {
                                                    locationName: "audioPidSelection",
                                                    type: "structure",
                                                    members: {
                                                        Pid: {
                                                            locationName: "pid",
                                                            type: "integer"
                                                        }
                                                    },
                                                    required: [ "Pid" ]
                                                },
                                                AudioTrackSelection: {
                                                    locationName: "audioTrackSelection",
                                                    type: "structure",
                                                    members: {
                                                        Tracks: {
                                                            locationName: "tracks",
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Track: {
                                                                        locationName: "track",
                                                                        type: "integer"
                                                                    }
                                                                },
                                                                required: [ "Track" ]
                                                            }
                                                        }
                                                    },
                                                    required: [ "Tracks" ]
                                                }
                                            }
                                        }
                                    },
                                    required: [ "Name" ]
                                }
                            },
                            CaptionSelectors: {
                                locationName: "captionSelectors",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        LanguageCode: {
                                            locationName: "languageCode"
                                        },
                                        Name: {
                                            locationName: "name"
                                        },
                                        SelectorSettings: {
                                            locationName: "selectorSettings",
                                            type: "structure",
                                            members: {
                                                AncillarySourceSettings: {
                                                    locationName: "ancillarySourceSettings",
                                                    type: "structure",
                                                    members: {
                                                        SourceAncillaryChannelNumber: {
                                                            locationName: "sourceAncillaryChannelNumber",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                AribSourceSettings: {
                                                    locationName: "aribSourceSettings",
                                                    type: "structure",
                                                    members: {}
                                                },
                                                DvbSubSourceSettings: {
                                                    locationName: "dvbSubSourceSettings",
                                                    type: "structure",
                                                    members: {
                                                        Pid: {
                                                            locationName: "pid",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                EmbeddedSourceSettings: {
                                                    locationName: "embeddedSourceSettings",
                                                    type: "structure",
                                                    members: {
                                                        Convert608To708: {
                                                            locationName: "convert608To708"
                                                        },
                                                        Scte20Detection: {
                                                            locationName: "scte20Detection"
                                                        },
                                                        Source608ChannelNumber: {
                                                            locationName: "source608ChannelNumber",
                                                            type: "integer"
                                                        },
                                                        Source608TrackNumber: {
                                                            locationName: "source608TrackNumber",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                Scte20SourceSettings: {
                                                    locationName: "scte20SourceSettings",
                                                    type: "structure",
                                                    members: {
                                                        Convert608To708: {
                                                            locationName: "convert608To708"
                                                        },
                                                        Source608ChannelNumber: {
                                                            locationName: "source608ChannelNumber",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                Scte27SourceSettings: {
                                                    locationName: "scte27SourceSettings",
                                                    type: "structure",
                                                    members: {
                                                        Pid: {
                                                            locationName: "pid",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                TeletextSourceSettings: {
                                                    locationName: "teletextSourceSettings",
                                                    type: "structure",
                                                    members: {
                                                        OutputRectangle: {
                                                            locationName: "outputRectangle",
                                                            type: "structure",
                                                            members: {
                                                                Height: {
                                                                    locationName: "height",
                                                                    type: "double"
                                                                },
                                                                LeftOffset: {
                                                                    locationName: "leftOffset",
                                                                    type: "double"
                                                                },
                                                                TopOffset: {
                                                                    locationName: "topOffset",
                                                                    type: "double"
                                                                },
                                                                Width: {
                                                                    locationName: "width",
                                                                    type: "double"
                                                                }
                                                            },
                                                            required: [ "TopOffset", "Height", "Width", "LeftOffset" ]
                                                        },
                                                        PageNumber: {
                                                            locationName: "pageNumber"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    required: [ "Name" ]
                                }
                            },
                            DeblockFilter: {
                                locationName: "deblockFilter"
                            },
                            DenoiseFilter: {
                                locationName: "denoiseFilter"
                            },
                            FilterStrength: {
                                locationName: "filterStrength",
                                type: "integer"
                            },
                            InputFilter: {
                                locationName: "inputFilter"
                            },
                            NetworkInputSettings: {
                                locationName: "networkInputSettings",
                                type: "structure",
                                members: {
                                    HlsInputSettings: {
                                        locationName: "hlsInputSettings",
                                        type: "structure",
                                        members: {
                                            Bandwidth: {
                                                locationName: "bandwidth",
                                                type: "integer"
                                            },
                                            BufferSegments: {
                                                locationName: "bufferSegments",
                                                type: "integer"
                                            },
                                            Retries: {
                                                locationName: "retries",
                                                type: "integer"
                                            },
                                            RetryInterval: {
                                                locationName: "retryInterval",
                                                type: "integer"
                                            }
                                        }
                                    },
                                    ServerValidation: {
                                        locationName: "serverValidation"
                                    }
                                }
                            },
                            Smpte2038DataPreference: {
                                locationName: "smpte2038DataPreference"
                            },
                            SourceEndBehavior: {
                                locationName: "sourceEndBehavior"
                            },
                            VideoSelector: {
                                locationName: "videoSelector",
                                type: "structure",
                                members: {
                                    ColorSpace: {
                                        locationName: "colorSpace"
                                    },
                                    ColorSpaceSettings: {
                                        locationName: "colorSpaceSettings",
                                        type: "structure",
                                        members: {
                                            Hdr10Settings: {
                                                shape: "Sbg",
                                                locationName: "hdr10Settings"
                                            }
                                        }
                                    },
                                    ColorSpaceUsage: {
                                        locationName: "colorSpaceUsage"
                                    },
                                    SelectorSettings: {
                                        locationName: "selectorSettings",
                                        type: "structure",
                                        members: {
                                            VideoSelectorPid: {
                                                locationName: "videoSelectorPid",
                                                type: "structure",
                                                members: {
                                                    Pid: {
                                                        locationName: "pid",
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            VideoSelectorProgramId: {
                                                locationName: "videoSelectorProgramId",
                                                type: "structure",
                                                members: {
                                                    ProgramId: {
                                                        locationName: "programId",
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sdo: {
            type: "structure",
            members: {
                Codec: {
                    locationName: "codec"
                },
                MaximumBitrate: {
                    locationName: "maximumBitrate"
                },
                Resolution: {
                    locationName: "resolution"
                }
            }
        },
        Sdt: {
            type: "map",
            key: {},
            value: {}
        },
        Sdw: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                CdiInputSpecification: {
                    shape: "S20",
                    locationName: "cdiInputSpecification"
                },
                ChannelClass: {
                    locationName: "channelClass"
                },
                Destinations: {
                    shape: "S23",
                    locationName: "destinations"
                },
                EgressEndpoints: {
                    shape: "Sdx",
                    locationName: "egressEndpoints"
                },
                EncoderSettings: {
                    shape: "S2b",
                    locationName: "encoderSettings"
                },
                Id: {
                    locationName: "id"
                },
                InputAttachments: {
                    shape: "Sc6",
                    locationName: "inputAttachments"
                },
                InputSpecification: {
                    shape: "Sdo",
                    locationName: "inputSpecification"
                },
                LogLevel: {
                    locationName: "logLevel"
                },
                Name: {
                    locationName: "name"
                },
                PipelineDetails: {
                    shape: "Sdz",
                    locationName: "pipelineDetails"
                },
                PipelinesRunningCount: {
                    locationName: "pipelinesRunningCount",
                    type: "integer"
                },
                RoleArn: {
                    locationName: "roleArn"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "Sdt",
                    locationName: "tags"
                },
                Vpc: {
                    shape: "Se2",
                    locationName: "vpc"
                }
            }
        },
        Sdx: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SourceIp: {
                        locationName: "sourceIp"
                    }
                }
            }
        },
        Sdz: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ActiveInputAttachmentName: {
                        locationName: "activeInputAttachmentName"
                    },
                    ActiveInputSwitchActionName: {
                        locationName: "activeInputSwitchActionName"
                    },
                    ActiveMotionGraphicsActionName: {
                        locationName: "activeMotionGraphicsActionName"
                    },
                    ActiveMotionGraphicsUri: {
                        locationName: "activeMotionGraphicsUri"
                    },
                    PipelineId: {
                        locationName: "pipelineId"
                    }
                }
            }
        },
        Se2: {
            type: "structure",
            members: {
                AvailabilityZones: {
                    shape: "S5",
                    locationName: "availabilityZones"
                },
                NetworkInterfaceIds: {
                    shape: "S5",
                    locationName: "networkInterfaceIds"
                },
                SecurityGroupIds: {
                    shape: "S5",
                    locationName: "securityGroupIds"
                },
                SubnetIds: {
                    shape: "S5",
                    locationName: "subnetIds"
                }
            }
        },
        Se4: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StreamName: {
                        locationName: "streamName"
                    }
                }
            }
        },
        Se6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {
                        locationName: "id"
                    }
                }
            }
        },
        Se8: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    }
                }
            }
        },
        Sea: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PasswordParam: {
                        locationName: "passwordParam"
                    },
                    Url: {
                        locationName: "url"
                    },
                    Username: {
                        locationName: "username"
                    }
                }
            }
        },
        Sef: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                AttachedChannels: {
                    shape: "S5",
                    locationName: "attachedChannels"
                },
                Destinations: {
                    shape: "Seg",
                    locationName: "destinations"
                },
                Id: {
                    locationName: "id"
                },
                InputClass: {
                    locationName: "inputClass"
                },
                InputDevices: {
                    shape: "Se6",
                    locationName: "inputDevices"
                },
                InputPartnerIds: {
                    shape: "S5",
                    locationName: "inputPartnerIds"
                },
                InputSourceType: {
                    locationName: "inputSourceType"
                },
                MediaConnectFlows: {
                    shape: "Sel",
                    locationName: "mediaConnectFlows"
                },
                Name: {
                    locationName: "name"
                },
                RoleArn: {
                    locationName: "roleArn"
                },
                SecurityGroups: {
                    shape: "S5",
                    locationName: "securityGroups"
                },
                Sources: {
                    shape: "Sen",
                    locationName: "sources"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "Sdt",
                    locationName: "tags"
                },
                Type: {
                    locationName: "type"
                }
            }
        },
        Seg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Ip: {
                        locationName: "ip"
                    },
                    Port: {
                        locationName: "port"
                    },
                    Url: {
                        locationName: "url"
                    },
                    Vpc: {
                        locationName: "vpc",
                        type: "structure",
                        members: {
                            AvailabilityZone: {
                                locationName: "availabilityZone"
                            },
                            NetworkInterfaceId: {
                                locationName: "networkInterfaceId"
                            }
                        }
                    }
                }
            }
        },
        Sel: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    }
                }
            }
        },
        Sen: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PasswordParam: {
                        locationName: "passwordParam"
                    },
                    Url: {
                        locationName: "url"
                    },
                    Username: {
                        locationName: "username"
                    }
                }
            }
        },
        Ser: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Cidr: {
                        locationName: "cidr"
                    }
                }
            }
        },
        Seu: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                Id: {
                    locationName: "id"
                },
                Inputs: {
                    shape: "S5",
                    locationName: "inputs"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "Sdt",
                    locationName: "tags"
                },
                WhitelistRules: {
                    shape: "Sew",
                    locationName: "whitelistRules"
                }
            }
        },
        Sew: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Cidr: {
                        locationName: "cidr"
                    }
                }
            }
        },
        Sez: {
            type: "structure",
            members: {
                MaximumVideoBufferDelayMilliseconds: {
                    locationName: "maximumVideoBufferDelayMilliseconds",
                    type: "integer"
                },
                TransportStreamBitrate: {
                    locationName: "transportStreamBitrate",
                    type: "integer"
                },
                TransportStreamId: {
                    locationName: "transportStreamId",
                    type: "integer"
                },
                TransportStreamReservedBitrate: {
                    locationName: "transportStreamReservedBitrate",
                    type: "integer"
                }
            },
            required: [ "TransportStreamBitrate", "TransportStreamId" ]
        },
        Sf4: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                AvailabilityZones: {
                    shape: "S5",
                    locationName: "availabilityZones"
                },
                Destinations: {
                    shape: "Sf5",
                    locationName: "destinations"
                },
                Id: {
                    locationName: "id"
                },
                MultiplexSettings: {
                    shape: "Sez",
                    locationName: "multiplexSettings"
                },
                Name: {
                    locationName: "name"
                },
                PipelinesRunningCount: {
                    locationName: "pipelinesRunningCount",
                    type: "integer"
                },
                ProgramCount: {
                    locationName: "programCount",
                    type: "integer"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "Sdt",
                    locationName: "tags"
                }
            }
        },
        Sf5: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    MediaConnectSettings: {
                        locationName: "mediaConnectSettings",
                        type: "structure",
                        members: {
                            EntitlementArn: {
                                locationName: "entitlementArn"
                            }
                        }
                    }
                }
            }
        },
        Sfa: {
            type: "structure",
            members: {
                PreferredChannelPipeline: {
                    locationName: "preferredChannelPipeline"
                },
                ProgramNumber: {
                    locationName: "programNumber",
                    type: "integer"
                },
                ServiceDescriptor: {
                    locationName: "serviceDescriptor",
                    type: "structure",
                    members: {
                        ProviderName: {
                            locationName: "providerName"
                        },
                        ServiceName: {
                            locationName: "serviceName"
                        }
                    },
                    required: [ "ProviderName", "ServiceName" ]
                },
                VideoSettings: {
                    locationName: "videoSettings",
                    type: "structure",
                    members: {
                        ConstantBitrate: {
                            locationName: "constantBitrate",
                            type: "integer"
                        },
                        StatmuxSettings: {
                            locationName: "statmuxSettings",
                            type: "structure",
                            members: {
                                MaximumBitrate: {
                                    locationName: "maximumBitrate",
                                    type: "integer"
                                },
                                MinimumBitrate: {
                                    locationName: "minimumBitrate",
                                    type: "integer"
                                },
                                Priority: {
                                    locationName: "priority",
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            },
            required: [ "ProgramNumber" ]
        },
        Sfj: {
            type: "structure",
            members: {
                ChannelId: {
                    locationName: "channelId"
                },
                MultiplexProgramSettings: {
                    shape: "Sfa",
                    locationName: "multiplexProgramSettings"
                },
                PacketIdentifiersMap: {
                    shape: "Sfk",
                    locationName: "packetIdentifiersMap"
                },
                PipelineDetails: {
                    shape: "Sfm",
                    locationName: "pipelineDetails"
                },
                ProgramName: {
                    locationName: "programName"
                }
            }
        },
        Sfk: {
            type: "structure",
            members: {
                AudioPids: {
                    shape: "Sfl",
                    locationName: "audioPids"
                },
                DvbSubPids: {
                    shape: "Sfl",
                    locationName: "dvbSubPids"
                },
                DvbTeletextPid: {
                    locationName: "dvbTeletextPid",
                    type: "integer"
                },
                EtvPlatformPid: {
                    locationName: "etvPlatformPid",
                    type: "integer"
                },
                EtvSignalPid: {
                    locationName: "etvSignalPid",
                    type: "integer"
                },
                KlvDataPids: {
                    shape: "Sfl",
                    locationName: "klvDataPids"
                },
                PcrPid: {
                    locationName: "pcrPid",
                    type: "integer"
                },
                PmtPid: {
                    locationName: "pmtPid",
                    type: "integer"
                },
                PrivateMetadataPid: {
                    locationName: "privateMetadataPid",
                    type: "integer"
                },
                Scte27Pids: {
                    shape: "Sfl",
                    locationName: "scte27Pids"
                },
                Scte35Pid: {
                    locationName: "scte35Pid",
                    type: "integer"
                },
                TimedMetadataPid: {
                    locationName: "timedMetadataPid",
                    type: "integer"
                },
                VideoPid: {
                    locationName: "videoPid",
                    type: "integer"
                }
            }
        },
        Sfl: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        Sfm: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ActiveChannelPipeline: {
                        locationName: "activeChannelPipeline"
                    },
                    PipelineId: {
                        locationName: "pipelineId"
                    }
                }
            }
        },
        Sg5: {
            type: "structure",
            members: {
                ChannelClass: {
                    locationName: "channelClass"
                },
                Codec: {
                    locationName: "codec"
                },
                MaximumBitrate: {
                    locationName: "maximumBitrate"
                },
                MaximumFramerate: {
                    locationName: "maximumFramerate"
                },
                Resolution: {
                    locationName: "resolution"
                },
                ResourceType: {
                    locationName: "resourceType"
                },
                SpecialFeature: {
                    locationName: "specialFeature"
                },
                VideoQuality: {
                    locationName: "videoQuality"
                }
            }
        },
        Sgq: {
            type: "structure",
            members: {
                ActiveInput: {
                    locationName: "activeInput"
                },
                ConfiguredInput: {
                    locationName: "configuredInput"
                },
                DeviceState: {
                    locationName: "deviceState"
                },
                Framerate: {
                    locationName: "framerate",
                    type: "double"
                },
                Height: {
                    locationName: "height",
                    type: "integer"
                },
                MaxBitrate: {
                    locationName: "maxBitrate",
                    type: "integer"
                },
                ScanType: {
                    locationName: "scanType"
                },
                Width: {
                    locationName: "width",
                    type: "integer"
                }
            }
        },
        Sgv: {
            type: "structure",
            members: {
                DnsAddresses: {
                    shape: "S5",
                    locationName: "dnsAddresses"
                },
                Gateway: {
                    locationName: "gateway"
                },
                IpAddress: {
                    locationName: "ipAddress"
                },
                IpScheme: {
                    locationName: "ipScheme"
                },
                SubnetMask: {
                    locationName: "subnetMask"
                }
            }
        },
        Sgy: {
            type: "structure",
            members: {
                ActiveInput: {
                    locationName: "activeInput"
                },
                ConfiguredInput: {
                    locationName: "configuredInput"
                },
                DeviceState: {
                    locationName: "deviceState"
                },
                Framerate: {
                    locationName: "framerate",
                    type: "double"
                },
                Height: {
                    locationName: "height",
                    type: "integer"
                },
                MaxBitrate: {
                    locationName: "maxBitrate",
                    type: "integer"
                },
                ScanType: {
                    locationName: "scanType"
                },
                Width: {
                    locationName: "width",
                    type: "integer"
                }
            }
        },
        Sii: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                Count: {
                    locationName: "count",
                    type: "integer"
                },
                CurrencyCode: {
                    locationName: "currencyCode"
                },
                Duration: {
                    locationName: "duration",
                    type: "integer"
                },
                DurationUnits: {
                    locationName: "durationUnits"
                },
                End: {
                    locationName: "end"
                },
                FixedPrice: {
                    locationName: "fixedPrice",
                    type: "double"
                },
                Name: {
                    locationName: "name"
                },
                OfferingDescription: {
                    locationName: "offeringDescription"
                },
                OfferingId: {
                    locationName: "offeringId"
                },
                OfferingType: {
                    locationName: "offeringType"
                },
                Region: {
                    locationName: "region"
                },
                ReservationId: {
                    locationName: "reservationId"
                },
                ResourceSpecification: {
                    shape: "Sg5",
                    locationName: "resourceSpecification"
                },
                Start: {
                    locationName: "start"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "Sdt",
                    locationName: "tags"
                },
                UsagePrice: {
                    locationName: "usagePrice",
                    type: "double"
                }
            }
        },
        Sj8: {
            type: "structure",
            members: {
                ConfiguredInput: {
                    locationName: "configuredInput"
                },
                MaxBitrate: {
                    locationName: "maxBitrate",
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        DescribeSchedule: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ScheduleActions"
        },
        ListChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Channels"
        },
        ListInputSecurityGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InputSecurityGroups"
        },
        ListInputs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Inputs"
        },
        ListOfferings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Offerings"
        },
        ListReservations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Reservations"
        },
        ListMultiplexPrograms: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "MultiplexPrograms"
        },
        ListMultiplexes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Multiplexes"
        },
        ListInputDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InputDevices"
        },
        ListInputDeviceTransfers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InputDeviceTransfers"
        }
    },
    waiters: {
        ChannelCreated: {
            description: "Wait until a channel has been created",
            operation: "DescribeChannel",
            delay: 3,
            maxAttempts: 5,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "IDLE"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "CREATING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            }, {
                state: "failure",
                matcher: "path",
                argument: "State",
                expected: "CREATE_FAILED"
            } ]
        },
        ChannelRunning: {
            description: "Wait until a channel is running",
            operation: "DescribeChannel",
            delay: 5,
            maxAttempts: 120,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "RUNNING"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "STARTING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        ChannelStopped: {
            description: "Wait until a channel has is stopped",
            operation: "DescribeChannel",
            delay: 5,
            maxAttempts: 60,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "IDLE"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "STOPPING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        ChannelDeleted: {
            description: "Wait until a channel has been deleted",
            operation: "DescribeChannel",
            delay: 5,
            maxAttempts: 84,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "DELETED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "DELETING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        InputAttached: {
            description: "Wait until an input has been attached",
            operation: "DescribeInput",
            delay: 5,
            maxAttempts: 20,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "ATTACHED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "DETACHED"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        InputDetached: {
            description: "Wait until an input has been detached",
            operation: "DescribeInput",
            delay: 5,
            maxAttempts: 84,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "DETACHED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "CREATING"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "ATTACHED"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        InputDeleted: {
            description: "Wait until an input has been deleted",
            operation: "DescribeInput",
            delay: 5,
            maxAttempts: 20,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "DELETED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "DELETING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        MultiplexCreated: {
            description: "Wait until a multiplex has been created",
            operation: "DescribeMultiplex",
            delay: 3,
            maxAttempts: 5,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "IDLE"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "CREATING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            }, {
                state: "failure",
                matcher: "path",
                argument: "State",
                expected: "CREATE_FAILED"
            } ]
        },
        MultiplexRunning: {
            description: "Wait until a multiplex is running",
            operation: "DescribeMultiplex",
            delay: 5,
            maxAttempts: 120,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "RUNNING"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "STARTING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        MultiplexStopped: {
            description: "Wait until a multiplex has is stopped",
            operation: "DescribeMultiplex",
            delay: 5,
            maxAttempts: 28,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "IDLE"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "STOPPING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        MultiplexDeleted: {
            description: "Wait until a multiplex has been deleted",
            operation: "DescribeMultiplex",
            delay: 5,
            maxAttempts: 20,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "DELETED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "DELETING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        }
    }
};

AWS.apiLoader.services["mediapackage"] = {};

AWS.MediaPackage = AWS.Service.defineService("mediapackage", [ "2017-10-12" ]);

AWS.apiLoader.services["mediapackage"]["2017-10-12"] = {
    metadata: {
        apiVersion: "2017-10-12",
        endpointPrefix: "mediapackage",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "MediaPackage",
        serviceFullName: "AWS Elemental MediaPackage",
        serviceId: "MediaPackage",
        signatureVersion: "v4",
        signingName: "mediapackage",
        uid: "mediapackage-2017-10-12"
    },
    operations: {
        ConfigureLogs: {
            http: {
                method: "PUT",
                requestUri: "/channels/{id}/configure_logs",
                responseCode: 200
            },
            input: {
                members: {
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        location: "uri",
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    HlsIngest: {
                        locationName: "hlsIngest",
                        shape: "S6"
                    },
                    Id: {
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                type: "structure"
            }
        },
        CreateChannel: {
            http: {
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                members: {
                    Description: {
                        locationName: "description"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    HlsIngest: {
                        locationName: "hlsIngest",
                        shape: "S6"
                    },
                    Id: {
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                type: "structure"
            }
        },
        CreateHarvestJob: {
            http: {
                requestUri: "/harvest_jobs",
                responseCode: 200
            },
            input: {
                members: {
                    EndTime: {
                        locationName: "endTime"
                    },
                    Id: {
                        locationName: "id"
                    },
                    OriginEndpointId: {
                        locationName: "originEndpointId"
                    },
                    S3Destination: {
                        locationName: "s3Destination",
                        shape: "Sd"
                    },
                    StartTime: {
                        locationName: "startTime"
                    }
                },
                required: [ "S3Destination", "EndTime", "OriginEndpointId", "StartTime", "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    ChannelId: {
                        locationName: "channelId"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    EndTime: {
                        locationName: "endTime"
                    },
                    Id: {
                        locationName: "id"
                    },
                    OriginEndpointId: {
                        locationName: "originEndpointId"
                    },
                    S3Destination: {
                        locationName: "s3Destination",
                        shape: "Sd"
                    },
                    StartTime: {
                        locationName: "startTime"
                    },
                    Status: {
                        locationName: "status"
                    }
                },
                type: "structure"
            }
        },
        CreateOriginEndpoint: {
            http: {
                requestUri: "/origin_endpoints",
                responseCode: 200
            },
            input: {
                members: {
                    Authorization: {
                        locationName: "authorization",
                        shape: "Sh"
                    },
                    ChannelId: {
                        locationName: "channelId"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "Si"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "S10"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "S18"
                    },
                    Id: {
                        locationName: "id"
                    },
                    ManifestName: {
                        locationName: "manifestName"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "S1b"
                    },
                    Origination: {
                        locationName: "origination"
                    },
                    StartoverWindowSeconds: {
                        locationName: "startoverWindowSeconds",
                        type: "integer"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    },
                    TimeDelaySeconds: {
                        locationName: "timeDelaySeconds",
                        type: "integer"
                    },
                    Whitelist: {
                        locationName: "whitelist",
                        shape: "Sp"
                    }
                },
                required: [ "ChannelId", "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "Sh"
                    },
                    ChannelId: {
                        locationName: "channelId"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "S1f"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "S10"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "S18"
                    },
                    Id: {
                        locationName: "id"
                    },
                    ManifestName: {
                        locationName: "manifestName"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "S1b"
                    },
                    Origination: {
                        locationName: "origination"
                    },
                    StartoverWindowSeconds: {
                        locationName: "startoverWindowSeconds",
                        type: "integer"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    },
                    TimeDelaySeconds: {
                        locationName: "timeDelaySeconds",
                        type: "integer"
                    },
                    Url: {
                        locationName: "url"
                    },
                    Whitelist: {
                        locationName: "whitelist",
                        shape: "Sp"
                    }
                },
                type: "structure"
            }
        },
        DeleteChannel: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{id}",
                responseCode: 202
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DeleteOriginEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/origin_endpoints/{id}",
                responseCode: 202
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DescribeChannel: {
            http: {
                method: "GET",
                requestUri: "/channels/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    HlsIngest: {
                        locationName: "hlsIngest",
                        shape: "S6"
                    },
                    Id: {
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                type: "structure"
            }
        },
        DescribeHarvestJob: {
            http: {
                method: "GET",
                requestUri: "/harvest_jobs/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    ChannelId: {
                        locationName: "channelId"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    EndTime: {
                        locationName: "endTime"
                    },
                    Id: {
                        locationName: "id"
                    },
                    OriginEndpointId: {
                        locationName: "originEndpointId"
                    },
                    S3Destination: {
                        locationName: "s3Destination",
                        shape: "Sd"
                    },
                    StartTime: {
                        locationName: "startTime"
                    },
                    Status: {
                        locationName: "status"
                    }
                },
                type: "structure"
            }
        },
        DescribeOriginEndpoint: {
            http: {
                method: "GET",
                requestUri: "/origin_endpoints/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "Sh"
                    },
                    ChannelId: {
                        locationName: "channelId"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "S1f"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "S10"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "S18"
                    },
                    Id: {
                        locationName: "id"
                    },
                    ManifestName: {
                        locationName: "manifestName"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "S1b"
                    },
                    Origination: {
                        locationName: "origination"
                    },
                    StartoverWindowSeconds: {
                        locationName: "startoverWindowSeconds",
                        type: "integer"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    },
                    TimeDelaySeconds: {
                        locationName: "timeDelaySeconds",
                        type: "integer"
                    },
                    Url: {
                        locationName: "url"
                    },
                    Whitelist: {
                        locationName: "whitelist",
                        shape: "Sp"
                    }
                },
                type: "structure"
            }
        },
        ListChannels: {
            http: {
                method: "GET",
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    Channels: {
                        locationName: "channels",
                        member: {
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                EgressAccessLogs: {
                                    locationName: "egressAccessLogs",
                                    shape: "S2"
                                },
                                HlsIngest: {
                                    locationName: "hlsIngest",
                                    shape: "S6"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                IngressAccessLogs: {
                                    locationName: "ingressAccessLogs",
                                    shape: "S4"
                                },
                                Tags: {
                                    locationName: "tags",
                                    shape: "S9"
                                }
                            },
                            type: "structure"
                        },
                        type: "list"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            }
        },
        ListHarvestJobs: {
            http: {
                method: "GET",
                requestUri: "/harvest_jobs",
                responseCode: 200
            },
            input: {
                members: {
                    IncludeChannelId: {
                        location: "querystring",
                        locationName: "includeChannelId"
                    },
                    IncludeStatus: {
                        location: "querystring",
                        locationName: "includeStatus"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    HarvestJobs: {
                        locationName: "harvestJobs",
                        member: {
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                ChannelId: {
                                    locationName: "channelId"
                                },
                                CreatedAt: {
                                    locationName: "createdAt"
                                },
                                EndTime: {
                                    locationName: "endTime"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                OriginEndpointId: {
                                    locationName: "originEndpointId"
                                },
                                S3Destination: {
                                    locationName: "s3Destination",
                                    shape: "Sd"
                                },
                                StartTime: {
                                    locationName: "startTime"
                                },
                                Status: {
                                    locationName: "status"
                                }
                            },
                            type: "structure"
                        },
                        type: "list"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            }
        },
        ListOriginEndpoints: {
            http: {
                method: "GET",
                requestUri: "/origin_endpoints",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelId: {
                        location: "querystring",
                        locationName: "channelId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    OriginEndpoints: {
                        locationName: "originEndpoints",
                        member: {
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                Authorization: {
                                    locationName: "authorization",
                                    shape: "Sh"
                                },
                                ChannelId: {
                                    locationName: "channelId"
                                },
                                CmafPackage: {
                                    locationName: "cmafPackage",
                                    shape: "S1f"
                                },
                                DashPackage: {
                                    locationName: "dashPackage",
                                    shape: "S10"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                HlsPackage: {
                                    locationName: "hlsPackage",
                                    shape: "S18"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                ManifestName: {
                                    locationName: "manifestName"
                                },
                                MssPackage: {
                                    locationName: "mssPackage",
                                    shape: "S1b"
                                },
                                Origination: {
                                    locationName: "origination"
                                },
                                StartoverWindowSeconds: {
                                    locationName: "startoverWindowSeconds",
                                    type: "integer"
                                },
                                Tags: {
                                    locationName: "tags",
                                    shape: "S9"
                                },
                                TimeDelaySeconds: {
                                    locationName: "timeDelaySeconds",
                                    type: "integer"
                                },
                                Url: {
                                    locationName: "url"
                                },
                                Whitelist: {
                                    locationName: "whitelist",
                                    shape: "Sp"
                                }
                            },
                            type: "structure"
                        },
                        type: "list"
                    }
                },
                type: "structure"
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ],
                type: "structure"
            },
            output: {
                members: {
                    Tags: {
                        locationName: "tags",
                        shape: "S27"
                    }
                },
                type: "structure"
            }
        },
        RotateChannelCredentials: {
            deprecated: true,
            deprecatedMessage: "This API is deprecated. Please use RotateIngestEndpointCredentials instead",
            http: {
                method: "PUT",
                requestUri: "/channels/{id}/credentials",
                responseCode: 200
            },
            input: {
                deprecated: true,
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                deprecated: true,
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    HlsIngest: {
                        locationName: "hlsIngest",
                        shape: "S6"
                    },
                    Id: {
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                type: "structure"
            }
        },
        RotateIngestEndpointCredentials: {
            http: {
                method: "PUT",
                requestUri: "/channels/{id}/ingest_endpoints/{ingest_endpoint_id}/credentials",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    },
                    IngestEndpointId: {
                        location: "uri",
                        locationName: "ingest_endpoint_id"
                    }
                },
                required: [ "IngestEndpointId", "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    HlsIngest: {
                        locationName: "hlsIngest",
                        shape: "S6"
                    },
                    Id: {
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                type: "structure"
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S27"
                    }
                },
                required: [ "ResourceArn", "Tags" ],
                type: "structure"
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        shape: "Sp"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ],
                type: "structure"
            }
        },
        UpdateChannel: {
            http: {
                method: "PUT",
                requestUri: "/channels/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Description: {
                        locationName: "description"
                    },
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    HlsIngest: {
                        locationName: "hlsIngest",
                        shape: "S6"
                    },
                    Id: {
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                type: "structure"
            }
        },
        UpdateOriginEndpoint: {
            http: {
                method: "PUT",
                requestUri: "/origin_endpoints/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Authorization: {
                        locationName: "authorization",
                        shape: "Sh"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "Si"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "S10"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "S18"
                    },
                    Id: {
                        location: "uri",
                        locationName: "id"
                    },
                    ManifestName: {
                        locationName: "manifestName"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "S1b"
                    },
                    Origination: {
                        locationName: "origination"
                    },
                    StartoverWindowSeconds: {
                        locationName: "startoverWindowSeconds",
                        type: "integer"
                    },
                    TimeDelaySeconds: {
                        locationName: "timeDelaySeconds",
                        type: "integer"
                    },
                    Whitelist: {
                        locationName: "whitelist",
                        shape: "Sp"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "Sh"
                    },
                    ChannelId: {
                        locationName: "channelId"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "S1f"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "S10"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "S18"
                    },
                    Id: {
                        locationName: "id"
                    },
                    ManifestName: {
                        locationName: "manifestName"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "S1b"
                    },
                    Origination: {
                        locationName: "origination"
                    },
                    StartoverWindowSeconds: {
                        locationName: "startoverWindowSeconds",
                        type: "integer"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    },
                    TimeDelaySeconds: {
                        locationName: "timeDelaySeconds",
                        type: "integer"
                    },
                    Url: {
                        locationName: "url"
                    },
                    Whitelist: {
                        locationName: "whitelist",
                        shape: "Sp"
                    }
                },
                type: "structure"
            }
        }
    },
    shapes: {
        S2: {
            members: {
                LogGroupName: {
                    locationName: "logGroupName"
                }
            },
            type: "structure"
        },
        S4: {
            members: {
                LogGroupName: {
                    locationName: "logGroupName"
                }
            },
            type: "structure"
        },
        S6: {
            members: {
                IngestEndpoints: {
                    locationName: "ingestEndpoints",
                    member: {
                        members: {
                            Id: {
                                locationName: "id"
                            },
                            Password: {
                                locationName: "password"
                            },
                            Url: {
                                locationName: "url"
                            },
                            Username: {
                                locationName: "username"
                            }
                        },
                        type: "structure"
                    },
                    type: "list"
                }
            },
            type: "structure"
        },
        S9: {
            key: {},
            type: "map",
            value: {}
        },
        Sd: {
            members: {
                BucketName: {
                    locationName: "bucketName"
                },
                ManifestKey: {
                    locationName: "manifestKey"
                },
                RoleArn: {
                    locationName: "roleArn"
                }
            },
            required: [ "ManifestKey", "BucketName", "RoleArn" ],
            type: "structure"
        },
        Sh: {
            members: {
                CdnIdentifierSecret: {
                    locationName: "cdnIdentifierSecret"
                },
                SecretsRoleArn: {
                    locationName: "secretsRoleArn"
                }
            },
            required: [ "SecretsRoleArn", "CdnIdentifierSecret" ],
            type: "structure"
        },
        Si: {
            members: {
                Encryption: {
                    locationName: "encryption",
                    shape: "Sj"
                },
                HlsManifests: {
                    locationName: "hlsManifests",
                    member: {
                        members: {
                            AdMarkers: {
                                locationName: "adMarkers"
                            },
                            AdTriggers: {
                                locationName: "adTriggers",
                                shape: "St"
                            },
                            AdsOnDeliveryRestrictions: {
                                locationName: "adsOnDeliveryRestrictions"
                            },
                            Id: {
                                locationName: "id"
                            },
                            IncludeIframeOnlyStream: {
                                locationName: "includeIframeOnlyStream",
                                type: "boolean"
                            },
                            ManifestName: {
                                locationName: "manifestName"
                            },
                            PlaylistType: {
                                locationName: "playlistType"
                            },
                            PlaylistWindowSeconds: {
                                locationName: "playlistWindowSeconds",
                                type: "integer"
                            },
                            ProgramDateTimeIntervalSeconds: {
                                locationName: "programDateTimeIntervalSeconds",
                                type: "integer"
                            }
                        },
                        required: [ "Id" ],
                        type: "structure"
                    },
                    type: "list"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                SegmentPrefix: {
                    locationName: "segmentPrefix"
                },
                StreamSelection: {
                    locationName: "streamSelection",
                    shape: "Sy"
                }
            },
            type: "structure"
        },
        Sj: {
            members: {
                ConstantInitializationVector: {
                    locationName: "constantInitializationVector"
                },
                KeyRotationIntervalSeconds: {
                    locationName: "keyRotationIntervalSeconds",
                    type: "integer"
                },
                SpekeKeyProvider: {
                    locationName: "spekeKeyProvider",
                    shape: "Sl"
                }
            },
            required: [ "SpekeKeyProvider" ],
            type: "structure"
        },
        Sl: {
            members: {
                CertificateArn: {
                    locationName: "certificateArn"
                },
                EncryptionContractConfiguration: {
                    locationName: "encryptionContractConfiguration",
                    members: {
                        PresetSpeke20Audio: {
                            locationName: "presetSpeke20Audio"
                        },
                        PresetSpeke20Video: {
                            locationName: "presetSpeke20Video"
                        }
                    },
                    required: [ "PresetSpeke20Audio", "PresetSpeke20Video" ],
                    type: "structure"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                RoleArn: {
                    locationName: "roleArn"
                },
                SystemIds: {
                    locationName: "systemIds",
                    shape: "Sp"
                },
                Url: {
                    locationName: "url"
                }
            },
            required: [ "ResourceId", "SystemIds", "Url", "RoleArn" ],
            type: "structure"
        },
        Sp: {
            member: {},
            type: "list"
        },
        St: {
            member: {},
            type: "list"
        },
        Sy: {
            members: {
                MaxVideoBitsPerSecond: {
                    locationName: "maxVideoBitsPerSecond",
                    type: "integer"
                },
                MinVideoBitsPerSecond: {
                    locationName: "minVideoBitsPerSecond",
                    type: "integer"
                },
                StreamOrder: {
                    locationName: "streamOrder"
                }
            },
            type: "structure"
        },
        S10: {
            members: {
                AdTriggers: {
                    locationName: "adTriggers",
                    shape: "St"
                },
                AdsOnDeliveryRestrictions: {
                    locationName: "adsOnDeliveryRestrictions"
                },
                Encryption: {
                    locationName: "encryption",
                    members: {
                        KeyRotationIntervalSeconds: {
                            locationName: "keyRotationIntervalSeconds",
                            type: "integer"
                        },
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Sl"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                ManifestLayout: {
                    locationName: "manifestLayout"
                },
                ManifestWindowSeconds: {
                    locationName: "manifestWindowSeconds",
                    type: "integer"
                },
                MinBufferTimeSeconds: {
                    locationName: "minBufferTimeSeconds",
                    type: "integer"
                },
                MinUpdatePeriodSeconds: {
                    locationName: "minUpdatePeriodSeconds",
                    type: "integer"
                },
                PeriodTriggers: {
                    locationName: "periodTriggers",
                    member: {},
                    type: "list"
                },
                Profile: {
                    locationName: "profile"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                SegmentTemplateFormat: {
                    locationName: "segmentTemplateFormat"
                },
                StreamSelection: {
                    locationName: "streamSelection",
                    shape: "Sy"
                },
                SuggestedPresentationDelaySeconds: {
                    locationName: "suggestedPresentationDelaySeconds",
                    type: "integer"
                },
                UtcTiming: {
                    locationName: "utcTiming"
                },
                UtcTimingUri: {
                    locationName: "utcTimingUri"
                }
            },
            type: "structure"
        },
        S18: {
            members: {
                AdMarkers: {
                    locationName: "adMarkers"
                },
                AdTriggers: {
                    locationName: "adTriggers",
                    shape: "St"
                },
                AdsOnDeliveryRestrictions: {
                    locationName: "adsOnDeliveryRestrictions"
                },
                Encryption: {
                    locationName: "encryption",
                    members: {
                        ConstantInitializationVector: {
                            locationName: "constantInitializationVector"
                        },
                        EncryptionMethod: {
                            locationName: "encryptionMethod"
                        },
                        KeyRotationIntervalSeconds: {
                            locationName: "keyRotationIntervalSeconds",
                            type: "integer"
                        },
                        RepeatExtXKey: {
                            locationName: "repeatExtXKey",
                            type: "boolean"
                        },
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Sl"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                IncludeIframeOnlyStream: {
                    locationName: "includeIframeOnlyStream",
                    type: "boolean"
                },
                PlaylistType: {
                    locationName: "playlistType"
                },
                PlaylistWindowSeconds: {
                    locationName: "playlistWindowSeconds",
                    type: "integer"
                },
                ProgramDateTimeIntervalSeconds: {
                    locationName: "programDateTimeIntervalSeconds",
                    type: "integer"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                StreamSelection: {
                    locationName: "streamSelection",
                    shape: "Sy"
                },
                UseAudioRenditionGroup: {
                    locationName: "useAudioRenditionGroup",
                    type: "boolean"
                }
            },
            type: "structure"
        },
        S1b: {
            members: {
                Encryption: {
                    locationName: "encryption",
                    members: {
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Sl"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                ManifestWindowSeconds: {
                    locationName: "manifestWindowSeconds",
                    type: "integer"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                StreamSelection: {
                    locationName: "streamSelection",
                    shape: "Sy"
                }
            },
            type: "structure"
        },
        S1f: {
            members: {
                Encryption: {
                    locationName: "encryption",
                    shape: "Sj"
                },
                HlsManifests: {
                    locationName: "hlsManifests",
                    member: {
                        members: {
                            AdMarkers: {
                                locationName: "adMarkers"
                            },
                            Id: {
                                locationName: "id"
                            },
                            IncludeIframeOnlyStream: {
                                locationName: "includeIframeOnlyStream",
                                type: "boolean"
                            },
                            ManifestName: {
                                locationName: "manifestName"
                            },
                            PlaylistType: {
                                locationName: "playlistType"
                            },
                            PlaylistWindowSeconds: {
                                locationName: "playlistWindowSeconds",
                                type: "integer"
                            },
                            ProgramDateTimeIntervalSeconds: {
                                locationName: "programDateTimeIntervalSeconds",
                                type: "integer"
                            },
                            Url: {
                                locationName: "url"
                            }
                        },
                        required: [ "Id" ],
                        type: "structure"
                    },
                    type: "list"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                SegmentPrefix: {
                    locationName: "segmentPrefix"
                },
                StreamSelection: {
                    locationName: "streamSelection",
                    shape: "Sy"
                }
            },
            type: "structure"
        },
        S27: {
            key: {},
            type: "map",
            value: {}
        }
    },
    paginators: {
        ListChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Channels"
        },
        ListOriginEndpoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "OriginEndpoints"
        },
        ListHarvestJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "HarvestJobs"
        }
    }
};

AWS.apiLoader.services["mediastore"] = {};

AWS.MediaStore = AWS.Service.defineService("mediastore", [ "2017-09-01" ]);

AWS.apiLoader.services["mediastore"]["2017-09-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-01",
        endpointPrefix: "mediastore",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "MediaStore",
        serviceFullName: "AWS Elemental MediaStore",
        serviceId: "MediaStore",
        signatureVersion: "v4",
        signingName: "mediastore",
        targetPrefix: "MediaStore_20170901",
        uid: "mediastore-2017-09-01"
    },
    operations: {
        CreateContainer: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Container" ],
                members: {
                    Container: {
                        shape: "S8"
                    }
                }
            }
        },
        DeleteContainer: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteContainerPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCorsPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteMetricPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeContainer: {
            input: {
                type: "structure",
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Container: {
                        shape: "S8"
                    }
                }
            }
        },
        GetContainerPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Policy" ],
                members: {
                    Policy: {}
                }
            }
        },
        GetCorsPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CorsPolicy" ],
                members: {
                    CorsPolicy: {
                        shape: "Sv"
                    }
                }
            }
        },
        GetLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "LifecyclePolicy" ],
                members: {
                    LifecyclePolicy: {}
                }
            }
        },
        GetMetricPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "MetricPolicy" ],
                members: {
                    MetricPolicy: {
                        shape: "S1a"
                    }
                }
            }
        },
        ListContainers: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Containers" ],
                members: {
                    Containers: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "Resource" ],
                members: {
                    Resource: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S3"
                    }
                }
            }
        },
        PutContainerPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName", "Policy" ],
                members: {
                    ContainerName: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutCorsPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName", "CorsPolicy" ],
                members: {
                    ContainerName: {},
                    CorsPolicy: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName", "LifecyclePolicy" ],
                members: {
                    ContainerName: {},
                    LifecyclePolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutMetricPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName", "MetricPolicy" ],
                members: {
                    ContainerName: {},
                    MetricPolicy: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartAccessLogging: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopAccessLogging: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "Resource", "Tags" ],
                members: {
                    Resource: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "Resource", "TagKeys" ],
                members: {
                    Resource: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S8: {
            type: "structure",
            members: {
                Endpoint: {},
                CreationTime: {
                    type: "timestamp"
                },
                ARN: {},
                Name: {},
                Status: {},
                AccessLoggingEnabled: {
                    type: "boolean"
                }
            }
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AllowedOrigins", "AllowedHeaders" ],
                members: {
                    AllowedOrigins: {
                        type: "list",
                        member: {}
                    },
                    AllowedMethods: {
                        type: "list",
                        member: {}
                    },
                    AllowedHeaders: {
                        type: "list",
                        member: {}
                    },
                    MaxAgeSeconds: {
                        type: "integer"
                    },
                    ExposeHeaders: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S1a: {
            type: "structure",
            required: [ "ContainerLevelMetrics" ],
            members: {
                ContainerLevelMetrics: {},
                MetricPolicyRules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ObjectGroup", "ObjectGroupName" ],
                        members: {
                            ObjectGroup: {},
                            ObjectGroupName: {}
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListContainers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["mediastoredata"] = {};

AWS.MediaStoreData = AWS.Service.defineService("mediastoredata", [ "2017-09-01" ]);

AWS.apiLoader.services["mediastoredata"]["2017-09-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-01",
        endpointPrefix: "data.mediastore",
        protocol: "rest-json",
        serviceAbbreviation: "MediaStore Data",
        serviceFullName: "AWS Elemental MediaStore Data Plane",
        serviceId: "MediaStore Data",
        signatureVersion: "v4",
        signingName: "mediastore",
        uid: "mediastore-data-2017-09-01"
    },
    operations: {
        DeleteObject: {
            http: {
                method: "DELETE",
                requestUri: "/{Path+}"
            },
            input: {
                type: "structure",
                required: [ "Path" ],
                members: {
                    Path: {
                        location: "uri",
                        locationName: "Path"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeObject: {
            http: {
                method: "HEAD",
                requestUri: "/{Path+}"
            },
            input: {
                type: "structure",
                required: [ "Path" ],
                members: {
                    Path: {
                        location: "uri",
                        locationName: "Path"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    ContentLength: {
                        location: "header",
                        locationName: "Content-Length",
                        type: "long"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    LastModified: {
                        location: "header",
                        locationName: "Last-Modified",
                        type: "timestamp"
                    }
                }
            }
        },
        GetObject: {
            http: {
                method: "GET",
                requestUri: "/{Path+}"
            },
            input: {
                type: "structure",
                required: [ "Path" ],
                members: {
                    Path: {
                        location: "uri",
                        locationName: "Path"
                    },
                    Range: {
                        location: "header",
                        locationName: "Range"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "StatusCode" ],
                members: {
                    Body: {
                        shape: "Se"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    ContentRange: {
                        location: "header",
                        locationName: "Content-Range"
                    },
                    ContentLength: {
                        location: "header",
                        locationName: "Content-Length",
                        type: "long"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    },
                    LastModified: {
                        location: "header",
                        locationName: "Last-Modified",
                        type: "timestamp"
                    },
                    StatusCode: {
                        location: "statusCode",
                        type: "integer"
                    }
                },
                payload: "Body"
            }
        },
        ListItems: {
            http: {
                method: "GET"
            },
            input: {
                type: "structure",
                members: {
                    Path: {
                        location: "querystring",
                        locationName: "Path"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Type: {},
                                ETag: {},
                                LastModified: {
                                    type: "timestamp"
                                },
                                ContentType: {},
                                ContentLength: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutObject: {
            http: {
                method: "PUT",
                requestUri: "/{Path+}"
            },
            input: {
                type: "structure",
                required: [ "Body", "Path" ],
                members: {
                    Body: {
                        shape: "Se"
                    },
                    Path: {
                        location: "uri",
                        locationName: "Path"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    StorageClass: {
                        location: "header",
                        locationName: "x-amz-storage-class"
                    },
                    UploadAvailability: {
                        location: "header",
                        locationName: "x-amz-upload-availability"
                    }
                },
                payload: "Body"
            },
            output: {
                type: "structure",
                members: {
                    ContentSHA256: {},
                    ETag: {},
                    StorageClass: {}
                }
            },
            authtype: "v4-unsigned-body"
        }
    },
    shapes: {
        Se: {
            type: "blob",
            streaming: true
        }
    },
    paginators: {
        ListItems: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["appsync"] = {};

AWS.AppSync = AWS.Service.defineService("appsync", [ "2017-07-25" ]);

AWS.apiLoader.services["appsync"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "appsync",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AWSAppSync",
        serviceFullName: "AWS AppSync",
        serviceId: "AppSync",
        signatureVersion: "v4",
        signingName: "appsync",
        uid: "appsync-2017-07-25"
    },
    operations: {
        CreateApiCache: {
            http: {
                requestUri: "/v1/apis/{apiId}/ApiCaches"
            },
            input: {
                type: "structure",
                required: [ "apiId", "ttl", "apiCachingBehavior", "type" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ttl: {
                        type: "long"
                    },
                    transitEncryptionEnabled: {
                        type: "boolean"
                    },
                    atRestEncryptionEnabled: {
                        type: "boolean"
                    },
                    apiCachingBehavior: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    apiCache: {
                        shape: "S8"
                    }
                }
            }
        },
        CreateApiKey: {
            http: {
                requestUri: "/v1/apis/{apiId}/apikeys"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    description: {},
                    expires: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    apiKey: {
                        shape: "Sc"
                    }
                }
            }
        },
        CreateDataSource: {
            http: {
                requestUri: "/v1/apis/{apiId}/datasources"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name", "type" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {},
                    description: {},
                    type: {},
                    serviceRoleArn: {},
                    dynamodbConfig: {
                        shape: "Sg"
                    },
                    lambdaConfig: {
                        shape: "Si"
                    },
                    elasticsearchConfig: {
                        shape: "Sj"
                    },
                    httpConfig: {
                        shape: "Sk"
                    },
                    relationalDatabaseConfig: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataSource: {
                        shape: "Ss"
                    }
                }
            }
        },
        CreateFunction: {
            http: {
                requestUri: "/v1/apis/{apiId}/functions"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name", "dataSourceName", "functionVersion" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {},
                    description: {},
                    dataSourceName: {},
                    requestMappingTemplate: {},
                    responseMappingTemplate: {},
                    functionVersion: {},
                    syncConfig: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    functionConfiguration: {
                        shape: "S10"
                    }
                }
            }
        },
        CreateGraphqlApi: {
            http: {
                requestUri: "/v1/apis"
            },
            input: {
                type: "structure",
                required: [ "name", "authenticationType" ],
                members: {
                    name: {},
                    logConfig: {
                        shape: "S12"
                    },
                    authenticationType: {},
                    userPoolConfig: {
                        shape: "S15"
                    },
                    openIDConnectConfig: {
                        shape: "S17"
                    },
                    tags: {
                        shape: "S18"
                    },
                    additionalAuthenticationProviders: {
                        shape: "S1b"
                    },
                    xrayEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    graphqlApi: {
                        shape: "S1f"
                    }
                }
            }
        },
        CreateResolver: {
            http: {
                requestUri: "/v1/apis/{apiId}/types/{typeName}/resolvers"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName", "fieldName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    fieldName: {},
                    dataSourceName: {},
                    requestMappingTemplate: {},
                    responseMappingTemplate: {},
                    kind: {},
                    pipelineConfig: {
                        shape: "S1j"
                    },
                    syncConfig: {
                        shape: "Sv"
                    },
                    cachingConfig: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resolver: {
                        shape: "S1o"
                    }
                }
            }
        },
        CreateType: {
            http: {
                requestUri: "/v1/apis/{apiId}/types"
            },
            input: {
                type: "structure",
                required: [ "apiId", "definition", "format" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    definition: {},
                    format: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    type: {
                        shape: "S1s"
                    }
                }
            }
        },
        DeleteApiCache: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/ApiCaches"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApiKey: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/apikeys/{id}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "id" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDataSource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/datasources/{name}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFunction: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/functions/{functionId}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "functionId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    functionId: {
                        location: "uri",
                        locationName: "functionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteGraphqlApi: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteResolver: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName", "fieldName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    fieldName: {
                        location: "uri",
                        locationName: "fieldName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteType: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/types/{typeName}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        FlushApiCache: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/FlushCache"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetApiCache: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/ApiCaches"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    apiCache: {
                        shape: "S8"
                    }
                }
            }
        },
        GetDataSource: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/datasources/{name}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataSource: {
                        shape: "Ss"
                    }
                }
            }
        },
        GetFunction: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/functions/{functionId}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "functionId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    functionId: {
                        location: "uri",
                        locationName: "functionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    functionConfiguration: {
                        shape: "S10"
                    }
                }
            }
        },
        GetGraphqlApi: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    graphqlApi: {
                        shape: "S1f"
                    }
                }
            }
        },
        GetIntrospectionSchema: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/schema"
            },
            input: {
                type: "structure",
                required: [ "apiId", "format" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    includeDirectives: {
                        location: "querystring",
                        locationName: "includeDirectives",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    schema: {
                        type: "blob"
                    }
                },
                payload: "schema"
            }
        },
        GetResolver: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName", "fieldName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    fieldName: {
                        location: "uri",
                        locationName: "fieldName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resolver: {
                        shape: "S1o"
                    }
                }
            }
        },
        GetSchemaCreationStatus: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/schemacreation"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    details: {}
                }
            }
        },
        GetType: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/types/{typeName}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName", "format" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    type: {
                        shape: "S1s"
                    }
                }
            }
        },
        ListApiKeys: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/apikeys"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    apiKeys: {
                        type: "list",
                        member: {
                            shape: "Sc"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataSources: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/datasources"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataSources: {
                        type: "list",
                        member: {
                            shape: "Ss"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFunctions: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/functions"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    functions: {
                        type: "list",
                        member: {
                            shape: "S10"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListGraphqlApis: {
            http: {
                method: "GET",
                requestUri: "/v1/apis"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    graphqlApis: {
                        type: "list",
                        member: {
                            shape: "S1f"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListResolvers: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/types/{typeName}/resolvers"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resolvers: {
                        shape: "S39"
                    },
                    nextToken: {}
                }
            }
        },
        ListResolversByFunction: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/functions/{functionId}/resolvers"
            },
            input: {
                type: "structure",
                required: [ "apiId", "functionId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    functionId: {
                        location: "uri",
                        locationName: "functionId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resolvers: {
                        shape: "S39"
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v1/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S18"
                    }
                }
            }
        },
        ListTypes: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/types"
            },
            input: {
                type: "structure",
                required: [ "apiId", "format" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    types: {
                        type: "list",
                        member: {
                            shape: "S1s"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        StartSchemaCreation: {
            http: {
                requestUri: "/v1/apis/{apiId}/schemacreation"
            },
            input: {
                type: "structure",
                required: [ "apiId", "definition" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    definition: {
                        type: "blob"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S18"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApiCache: {
            http: {
                requestUri: "/v1/apis/{apiId}/ApiCaches/update"
            },
            input: {
                type: "structure",
                required: [ "apiId", "ttl", "apiCachingBehavior", "type" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ttl: {
                        type: "long"
                    },
                    apiCachingBehavior: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    apiCache: {
                        shape: "S8"
                    }
                }
            }
        },
        UpdateApiKey: {
            http: {
                requestUri: "/v1/apis/{apiId}/apikeys/{id}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "id" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    description: {},
                    expires: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    apiKey: {
                        shape: "Sc"
                    }
                }
            }
        },
        UpdateDataSource: {
            http: {
                requestUri: "/v1/apis/{apiId}/datasources/{name}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name", "type" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {},
                    type: {},
                    serviceRoleArn: {},
                    dynamodbConfig: {
                        shape: "Sg"
                    },
                    lambdaConfig: {
                        shape: "Si"
                    },
                    elasticsearchConfig: {
                        shape: "Sj"
                    },
                    httpConfig: {
                        shape: "Sk"
                    },
                    relationalDatabaseConfig: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataSource: {
                        shape: "Ss"
                    }
                }
            }
        },
        UpdateFunction: {
            http: {
                requestUri: "/v1/apis/{apiId}/functions/{functionId}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name", "functionId", "dataSourceName", "functionVersion" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {},
                    description: {},
                    functionId: {
                        location: "uri",
                        locationName: "functionId"
                    },
                    dataSourceName: {},
                    requestMappingTemplate: {},
                    responseMappingTemplate: {},
                    functionVersion: {},
                    syncConfig: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    functionConfiguration: {
                        shape: "S10"
                    }
                }
            }
        },
        UpdateGraphqlApi: {
            http: {
                requestUri: "/v1/apis/{apiId}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {},
                    logConfig: {
                        shape: "S12"
                    },
                    authenticationType: {},
                    userPoolConfig: {
                        shape: "S15"
                    },
                    openIDConnectConfig: {
                        shape: "S17"
                    },
                    additionalAuthenticationProviders: {
                        shape: "S1b"
                    },
                    xrayEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    graphqlApi: {
                        shape: "S1f"
                    }
                }
            }
        },
        UpdateResolver: {
            http: {
                requestUri: "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName", "fieldName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    fieldName: {
                        location: "uri",
                        locationName: "fieldName"
                    },
                    dataSourceName: {},
                    requestMappingTemplate: {},
                    responseMappingTemplate: {},
                    kind: {},
                    pipelineConfig: {
                        shape: "S1j"
                    },
                    syncConfig: {
                        shape: "Sv"
                    },
                    cachingConfig: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resolver: {
                        shape: "S1o"
                    }
                }
            }
        },
        UpdateType: {
            http: {
                requestUri: "/v1/apis/{apiId}/types/{typeName}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName", "format" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    definition: {},
                    format: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    type: {
                        shape: "S1s"
                    }
                }
            }
        }
    },
    shapes: {
        S8: {
            type: "structure",
            members: {
                ttl: {
                    type: "long"
                },
                apiCachingBehavior: {},
                transitEncryptionEnabled: {
                    type: "boolean"
                },
                atRestEncryptionEnabled: {
                    type: "boolean"
                },
                type: {},
                status: {}
            }
        },
        Sc: {
            type: "structure",
            members: {
                id: {},
                description: {},
                expires: {
                    type: "long"
                },
                deletes: {
                    type: "long"
                }
            }
        },
        Sg: {
            type: "structure",
            required: [ "tableName", "awsRegion" ],
            members: {
                tableName: {},
                awsRegion: {},
                useCallerCredentials: {
                    type: "boolean"
                },
                deltaSyncConfig: {
                    type: "structure",
                    members: {
                        baseTableTTL: {
                            type: "long"
                        },
                        deltaSyncTableName: {},
                        deltaSyncTableTTL: {
                            type: "long"
                        }
                    }
                },
                versioned: {
                    type: "boolean"
                }
            }
        },
        Si: {
            type: "structure",
            required: [ "lambdaFunctionArn" ],
            members: {
                lambdaFunctionArn: {}
            }
        },
        Sj: {
            type: "structure",
            required: [ "endpoint", "awsRegion" ],
            members: {
                endpoint: {},
                awsRegion: {}
            }
        },
        Sk: {
            type: "structure",
            members: {
                endpoint: {},
                authorizationConfig: {
                    type: "structure",
                    required: [ "authorizationType" ],
                    members: {
                        authorizationType: {},
                        awsIamConfig: {
                            type: "structure",
                            members: {
                                signingRegion: {},
                                signingServiceName: {}
                            }
                        }
                    }
                }
            }
        },
        So: {
            type: "structure",
            members: {
                relationalDatabaseSourceType: {},
                rdsHttpEndpointConfig: {
                    type: "structure",
                    members: {
                        awsRegion: {},
                        dbClusterIdentifier: {},
                        databaseName: {},
                        schema: {},
                        awsSecretStoreArn: {}
                    }
                }
            }
        },
        Ss: {
            type: "structure",
            members: {
                dataSourceArn: {},
                name: {},
                description: {},
                type: {},
                serviceRoleArn: {},
                dynamodbConfig: {
                    shape: "Sg"
                },
                lambdaConfig: {
                    shape: "Si"
                },
                elasticsearchConfig: {
                    shape: "Sj"
                },
                httpConfig: {
                    shape: "Sk"
                },
                relationalDatabaseConfig: {
                    shape: "So"
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                conflictHandler: {},
                conflictDetection: {},
                lambdaConflictHandlerConfig: {
                    type: "structure",
                    members: {
                        lambdaConflictHandlerArn: {}
                    }
                }
            }
        },
        S10: {
            type: "structure",
            members: {
                functionId: {},
                functionArn: {},
                name: {},
                description: {},
                dataSourceName: {},
                requestMappingTemplate: {},
                responseMappingTemplate: {},
                functionVersion: {},
                syncConfig: {
                    shape: "Sv"
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "fieldLogLevel", "cloudWatchLogsRoleArn" ],
            members: {
                fieldLogLevel: {},
                cloudWatchLogsRoleArn: {},
                excludeVerboseContent: {
                    type: "boolean"
                }
            }
        },
        S15: {
            type: "structure",
            required: [ "userPoolId", "awsRegion", "defaultAction" ],
            members: {
                userPoolId: {},
                awsRegion: {},
                defaultAction: {},
                appIdClientRegex: {}
            }
        },
        S17: {
            type: "structure",
            required: [ "issuer" ],
            members: {
                issuer: {},
                clientId: {},
                iatTTL: {
                    type: "long"
                },
                authTTL: {
                    type: "long"
                }
            }
        },
        S18: {
            type: "map",
            key: {},
            value: {}
        },
        S1b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    authenticationType: {},
                    openIDConnectConfig: {
                        shape: "S17"
                    },
                    userPoolConfig: {
                        type: "structure",
                        required: [ "userPoolId", "awsRegion" ],
                        members: {
                            userPoolId: {},
                            awsRegion: {},
                            appIdClientRegex: {}
                        }
                    }
                }
            }
        },
        S1f: {
            type: "structure",
            members: {
                name: {},
                apiId: {},
                authenticationType: {},
                logConfig: {
                    shape: "S12"
                },
                userPoolConfig: {
                    shape: "S15"
                },
                openIDConnectConfig: {
                    shape: "S17"
                },
                arn: {},
                uris: {
                    type: "map",
                    key: {},
                    value: {}
                },
                tags: {
                    shape: "S18"
                },
                additionalAuthenticationProviders: {
                    shape: "S1b"
                },
                xrayEnabled: {
                    type: "boolean"
                },
                wafWebAclArn: {}
            }
        },
        S1j: {
            type: "structure",
            members: {
                functions: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1l: {
            type: "structure",
            members: {
                ttl: {
                    type: "long"
                },
                cachingKeys: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1o: {
            type: "structure",
            members: {
                typeName: {},
                fieldName: {},
                dataSourceName: {},
                resolverArn: {},
                requestMappingTemplate: {},
                responseMappingTemplate: {},
                kind: {},
                pipelineConfig: {
                    shape: "S1j"
                },
                syncConfig: {
                    shape: "Sv"
                },
                cachingConfig: {
                    shape: "S1l"
                }
            }
        },
        S1s: {
            type: "structure",
            members: {
                name: {},
                description: {},
                arn: {},
                definition: {},
                format: {}
            }
        },
        S39: {
            type: "list",
            member: {
                shape: "S1o"
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["guardduty"] = {};

AWS.GuardDuty = AWS.Service.defineService("guardduty", [ "2017-11-28" ]);

AWS.apiLoader.services["guardduty"]["2017-11-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-11-28",
        endpointPrefix: "guardduty",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon GuardDuty",
        serviceId: "GuardDuty",
        signatureVersion: "v4",
        signingName: "guardduty",
        uid: "guardduty-2017-11-28"
    },
    operations: {
        AcceptInvitation: {
            http: {
                requestUri: "/detector/{detectorId}/master",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "MasterId", "InvitationId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    MasterId: {
                        locationName: "masterId"
                    },
                    InvitationId: {
                        locationName: "invitationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ArchiveFindings: {
            http: {
                requestUri: "/detector/{detectorId}/findings/archive",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FindingIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingIds: {
                        shape: "S6",
                        locationName: "findingIds"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDetector: {
            http: {
                requestUri: "/detector",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Enable" ],
                members: {
                    Enable: {
                        locationName: "enable",
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        locationName: "clientToken"
                    },
                    FindingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    DataSources: {
                        shape: "Sd",
                        locationName: "dataSources"
                    },
                    Tags: {
                        shape: "Sf",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DetectorId: {
                        locationName: "detectorId"
                    }
                }
            }
        },
        CreateFilter: {
            http: {
                requestUri: "/detector/{detectorId}/filter",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "Name", "FindingCriteria" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Action: {
                        locationName: "action"
                    },
                    Rank: {
                        locationName: "rank",
                        type: "integer"
                    },
                    FindingCriteria: {
                        shape: "So",
                        locationName: "findingCriteria"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        locationName: "clientToken"
                    },
                    Tags: {
                        shape: "Sf",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        locationName: "name"
                    }
                }
            }
        },
        CreateIPSet: {
            http: {
                requestUri: "/detector/{detectorId}/ipset",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "Name", "Format", "Location", "Activate" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Format: {
                        locationName: "format"
                    },
                    Location: {
                        locationName: "location"
                    },
                    Activate: {
                        locationName: "activate",
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        locationName: "clientToken"
                    },
                    Tags: {
                        shape: "Sf",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "IpSetId" ],
                members: {
                    IpSetId: {
                        locationName: "ipSetId"
                    }
                }
            }
        },
        CreateMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountDetails" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountDetails: {
                        locationName: "accountDetails",
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AccountId", "Email" ],
                            members: {
                                AccountId: {
                                    locationName: "accountId"
                                },
                                Email: {
                                    locationName: "email"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S19",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        CreatePublishingDestination: {
            http: {
                requestUri: "/detector/{detectorId}/publishingDestination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "DestinationType", "DestinationProperties" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    DestinationType: {
                        locationName: "destinationType"
                    },
                    DestinationProperties: {
                        shape: "S1d",
                        locationName: "destinationProperties"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DestinationId" ],
                members: {
                    DestinationId: {
                        locationName: "destinationId"
                    }
                }
            }
        },
        CreateSampleFindings: {
            http: {
                requestUri: "/detector/{detectorId}/findings/create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingTypes: {
                        locationName: "findingTypes",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateThreatIntelSet: {
            http: {
                requestUri: "/detector/{detectorId}/threatintelset",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "Name", "Format", "Location", "Activate" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Format: {
                        locationName: "format"
                    },
                    Location: {
                        locationName: "location"
                    },
                    Activate: {
                        locationName: "activate",
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        locationName: "clientToken"
                    },
                    Tags: {
                        shape: "Sf",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ThreatIntelSetId" ],
                members: {
                    ThreatIntelSetId: {
                        locationName: "threatIntelSetId"
                    }
                }
            }
        },
        DeclineInvitations: {
            http: {
                requestUri: "/invitation/decline",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "S1n",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S19",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        DeleteDetector: {
            http: {
                method: "DELETE",
                requestUri: "/detector/{detectorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFilter: {
            http: {
                method: "DELETE",
                requestUri: "/detector/{detectorId}/filter/{filterName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FilterName" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FilterName: {
                        location: "uri",
                        locationName: "filterName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteIPSet: {
            http: {
                method: "DELETE",
                requestUri: "/detector/{detectorId}/ipset/{ipSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "IpSetId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    IpSetId: {
                        location: "uri",
                        locationName: "ipSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInvitations: {
            http: {
                requestUri: "/invitation/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "S1n",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S19",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        DeleteMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S1n",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S19",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        DeletePublishingDestination: {
            http: {
                method: "DELETE",
                requestUri: "/detector/{detectorId}/publishingDestination/{destinationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "DestinationId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    DestinationId: {
                        location: "uri",
                        locationName: "destinationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteThreatIntelSet: {
            http: {
                method: "DELETE",
                requestUri: "/detector/{detectorId}/threatintelset/{threatIntelSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "ThreatIntelSetId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    ThreatIntelSetId: {
                        location: "uri",
                        locationName: "threatIntelSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeOrganizationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AutoEnable", "MemberAccountLimitReached" ],
                members: {
                    AutoEnable: {
                        locationName: "autoEnable",
                        type: "boolean"
                    },
                    MemberAccountLimitReached: {
                        locationName: "memberAccountLimitReached",
                        type: "boolean"
                    },
                    DataSources: {
                        locationName: "dataSources",
                        type: "structure",
                        required: [ "S3Logs" ],
                        members: {
                            S3Logs: {
                                locationName: "s3Logs",
                                type: "structure",
                                required: [ "AutoEnable" ],
                                members: {
                                    AutoEnable: {
                                        locationName: "autoEnable",
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribePublishingDestination: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/publishingDestination/{destinationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "DestinationId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    DestinationId: {
                        location: "uri",
                        locationName: "destinationId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DestinationId", "DestinationType", "Status", "PublishingFailureStartTimestamp", "DestinationProperties" ],
                members: {
                    DestinationId: {
                        locationName: "destinationId"
                    },
                    DestinationType: {
                        locationName: "destinationType"
                    },
                    Status: {
                        locationName: "status"
                    },
                    PublishingFailureStartTimestamp: {
                        locationName: "publishingFailureStartTimestamp",
                        type: "long"
                    },
                    DestinationProperties: {
                        shape: "S1d",
                        locationName: "destinationProperties"
                    }
                }
            }
        },
        DisableOrganizationAdminAccount: {
            http: {
                requestUri: "/admin/disable",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AdminAccountId" ],
                members: {
                    AdminAccountId: {
                        locationName: "adminAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFromMasterAccount: {
            http: {
                requestUri: "/detector/{detectorId}/master/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S1n",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S19",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        EnableOrganizationAdminAccount: {
            http: {
                requestUri: "/admin/enable",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AdminAccountId" ],
                members: {
                    AdminAccountId: {
                        locationName: "adminAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetDetector: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ServiceRole", "Status" ],
                members: {
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    FindingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    ServiceRole: {
                        locationName: "serviceRole"
                    },
                    Status: {
                        locationName: "status"
                    },
                    UpdatedAt: {
                        locationName: "updatedAt"
                    },
                    DataSources: {
                        shape: "S2l",
                        locationName: "dataSources"
                    },
                    Tags: {
                        shape: "Sf",
                        locationName: "tags"
                    }
                }
            }
        },
        GetFilter: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/filter/{filterName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FilterName" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FilterName: {
                        location: "uri",
                        locationName: "filterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name", "Action", "FindingCriteria" ],
                members: {
                    Name: {
                        locationName: "name"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Action: {
                        locationName: "action"
                    },
                    Rank: {
                        locationName: "rank",
                        type: "integer"
                    },
                    FindingCriteria: {
                        shape: "So",
                        locationName: "findingCriteria"
                    },
                    Tags: {
                        shape: "Sf",
                        locationName: "tags"
                    }
                }
            }
        },
        GetFindings: {
            http: {
                requestUri: "/detector/{detectorId}/findings/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FindingIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingIds: {
                        shape: "S6",
                        locationName: "findingIds"
                    },
                    SortCriteria: {
                        shape: "S2u",
                        locationName: "sortCriteria"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Findings" ],
                members: {
                    Findings: {
                        locationName: "findings",
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AccountId", "Arn", "CreatedAt", "Id", "Region", "Resource", "SchemaVersion", "Severity", "Type", "UpdatedAt" ],
                            members: {
                                AccountId: {
                                    locationName: "accountId"
                                },
                                Arn: {
                                    locationName: "arn"
                                },
                                Confidence: {
                                    locationName: "confidence",
                                    type: "double"
                                },
                                CreatedAt: {
                                    locationName: "createdAt"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                Partition: {
                                    locationName: "partition"
                                },
                                Region: {
                                    locationName: "region"
                                },
                                Resource: {
                                    locationName: "resource",
                                    type: "structure",
                                    members: {
                                        AccessKeyDetails: {
                                            locationName: "accessKeyDetails",
                                            type: "structure",
                                            members: {
                                                AccessKeyId: {
                                                    locationName: "accessKeyId"
                                                },
                                                PrincipalId: {
                                                    locationName: "principalId"
                                                },
                                                UserName: {
                                                    locationName: "userName"
                                                },
                                                UserType: {
                                                    locationName: "userType"
                                                }
                                            }
                                        },
                                        S3BucketDetails: {
                                            locationName: "s3BucketDetails",
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Arn: {
                                                        locationName: "arn"
                                                    },
                                                    Name: {
                                                        locationName: "name"
                                                    },
                                                    Type: {
                                                        locationName: "type"
                                                    },
                                                    CreatedAt: {
                                                        locationName: "createdAt",
                                                        type: "timestamp"
                                                    },
                                                    Owner: {
                                                        locationName: "owner",
                                                        type: "structure",
                                                        members: {
                                                            Id: {
                                                                locationName: "id"
                                                            }
                                                        }
                                                    },
                                                    Tags: {
                                                        shape: "S36",
                                                        locationName: "tags"
                                                    },
                                                    DefaultServerSideEncryption: {
                                                        locationName: "defaultServerSideEncryption",
                                                        type: "structure",
                                                        members: {
                                                            EncryptionType: {
                                                                locationName: "encryptionType"
                                                            },
                                                            KmsMasterKeyArn: {
                                                                locationName: "kmsMasterKeyArn"
                                                            }
                                                        }
                                                    },
                                                    PublicAccess: {
                                                        locationName: "publicAccess",
                                                        type: "structure",
                                                        members: {
                                                            PermissionConfiguration: {
                                                                locationName: "permissionConfiguration",
                                                                type: "structure",
                                                                members: {
                                                                    BucketLevelPermissions: {
                                                                        locationName: "bucketLevelPermissions",
                                                                        type: "structure",
                                                                        members: {
                                                                            AccessControlList: {
                                                                                locationName: "accessControlList",
                                                                                type: "structure",
                                                                                members: {
                                                                                    AllowsPublicReadAccess: {
                                                                                        locationName: "allowsPublicReadAccess",
                                                                                        type: "boolean"
                                                                                    },
                                                                                    AllowsPublicWriteAccess: {
                                                                                        locationName: "allowsPublicWriteAccess",
                                                                                        type: "boolean"
                                                                                    }
                                                                                }
                                                                            },
                                                                            BucketPolicy: {
                                                                                locationName: "bucketPolicy",
                                                                                type: "structure",
                                                                                members: {
                                                                                    AllowsPublicReadAccess: {
                                                                                        locationName: "allowsPublicReadAccess",
                                                                                        type: "boolean"
                                                                                    },
                                                                                    AllowsPublicWriteAccess: {
                                                                                        locationName: "allowsPublicWriteAccess",
                                                                                        type: "boolean"
                                                                                    }
                                                                                }
                                                                            },
                                                                            BlockPublicAccess: {
                                                                                shape: "S3e",
                                                                                locationName: "blockPublicAccess"
                                                                            }
                                                                        }
                                                                    },
                                                                    AccountLevelPermissions: {
                                                                        locationName: "accountLevelPermissions",
                                                                        type: "structure",
                                                                        members: {
                                                                            BlockPublicAccess: {
                                                                                shape: "S3e",
                                                                                locationName: "blockPublicAccess"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            EffectivePermission: {
                                                                locationName: "effectivePermission"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        InstanceDetails: {
                                            locationName: "instanceDetails",
                                            type: "structure",
                                            members: {
                                                AvailabilityZone: {
                                                    locationName: "availabilityZone"
                                                },
                                                IamInstanceProfile: {
                                                    locationName: "iamInstanceProfile",
                                                    type: "structure",
                                                    members: {
                                                        Arn: {
                                                            locationName: "arn"
                                                        },
                                                        Id: {
                                                            locationName: "id"
                                                        }
                                                    }
                                                },
                                                ImageDescription: {
                                                    locationName: "imageDescription"
                                                },
                                                ImageId: {
                                                    locationName: "imageId"
                                                },
                                                InstanceId: {
                                                    locationName: "instanceId"
                                                },
                                                InstanceState: {
                                                    locationName: "instanceState"
                                                },
                                                InstanceType: {
                                                    locationName: "instanceType"
                                                },
                                                OutpostArn: {
                                                    locationName: "outpostArn"
                                                },
                                                LaunchTime: {
                                                    locationName: "launchTime"
                                                },
                                                NetworkInterfaces: {
                                                    locationName: "networkInterfaces",
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Ipv6Addresses: {
                                                                locationName: "ipv6Addresses",
                                                                type: "list",
                                                                member: {}
                                                            },
                                                            NetworkInterfaceId: {
                                                                locationName: "networkInterfaceId"
                                                            },
                                                            PrivateDnsName: {
                                                                locationName: "privateDnsName"
                                                            },
                                                            PrivateIpAddress: {
                                                                locationName: "privateIpAddress"
                                                            },
                                                            PrivateIpAddresses: {
                                                                locationName: "privateIpAddresses",
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    members: {
                                                                        PrivateDnsName: {
                                                                            locationName: "privateDnsName"
                                                                        },
                                                                        PrivateIpAddress: {
                                                                            locationName: "privateIpAddress"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            PublicDnsName: {
                                                                locationName: "publicDnsName"
                                                            },
                                                            PublicIp: {
                                                                locationName: "publicIp"
                                                            },
                                                            SecurityGroups: {
                                                                locationName: "securityGroups",
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    members: {
                                                                        GroupId: {
                                                                            locationName: "groupId"
                                                                        },
                                                                        GroupName: {
                                                                            locationName: "groupName"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            SubnetId: {
                                                                locationName: "subnetId"
                                                            },
                                                            VpcId: {
                                                                locationName: "vpcId"
                                                            }
                                                        }
                                                    }
                                                },
                                                Platform: {
                                                    locationName: "platform"
                                                },
                                                ProductCodes: {
                                                    locationName: "productCodes",
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Code: {
                                                                locationName: "code"
                                                            },
                                                            ProductType: {
                                                                locationName: "productType"
                                                            }
                                                        }
                                                    }
                                                },
                                                Tags: {
                                                    shape: "S36",
                                                    locationName: "tags"
                                                }
                                            }
                                        },
                                        ResourceType: {
                                            locationName: "resourceType"
                                        }
                                    }
                                },
                                SchemaVersion: {
                                    locationName: "schemaVersion"
                                },
                                Service: {
                                    locationName: "service",
                                    type: "structure",
                                    members: {
                                        Action: {
                                            locationName: "action",
                                            type: "structure",
                                            members: {
                                                ActionType: {
                                                    locationName: "actionType"
                                                },
                                                AwsApiCallAction: {
                                                    locationName: "awsApiCallAction",
                                                    type: "structure",
                                                    members: {
                                                        Api: {
                                                            locationName: "api"
                                                        },
                                                        CallerType: {
                                                            locationName: "callerType"
                                                        },
                                                        DomainDetails: {
                                                            locationName: "domainDetails",
                                                            type: "structure",
                                                            members: {
                                                                Domain: {
                                                                    locationName: "domain"
                                                                }
                                                            }
                                                        },
                                                        ErrorCode: {
                                                            locationName: "errorCode"
                                                        },
                                                        RemoteIpDetails: {
                                                            shape: "S3v",
                                                            locationName: "remoteIpDetails"
                                                        },
                                                        ServiceName: {
                                                            locationName: "serviceName"
                                                        }
                                                    }
                                                },
                                                DnsRequestAction: {
                                                    locationName: "dnsRequestAction",
                                                    type: "structure",
                                                    members: {
                                                        Domain: {
                                                            locationName: "domain"
                                                        }
                                                    }
                                                },
                                                NetworkConnectionAction: {
                                                    locationName: "networkConnectionAction",
                                                    type: "structure",
                                                    members: {
                                                        Blocked: {
                                                            locationName: "blocked",
                                                            type: "boolean"
                                                        },
                                                        ConnectionDirection: {
                                                            locationName: "connectionDirection"
                                                        },
                                                        LocalPortDetails: {
                                                            shape: "S42",
                                                            locationName: "localPortDetails"
                                                        },
                                                        Protocol: {
                                                            locationName: "protocol"
                                                        },
                                                        LocalIpDetails: {
                                                            shape: "S43",
                                                            locationName: "localIpDetails"
                                                        },
                                                        RemoteIpDetails: {
                                                            shape: "S3v",
                                                            locationName: "remoteIpDetails"
                                                        },
                                                        RemotePortDetails: {
                                                            locationName: "remotePortDetails",
                                                            type: "structure",
                                                            members: {
                                                                Port: {
                                                                    locationName: "port",
                                                                    type: "integer"
                                                                },
                                                                PortName: {
                                                                    locationName: "portName"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                PortProbeAction: {
                                                    locationName: "portProbeAction",
                                                    type: "structure",
                                                    members: {
                                                        Blocked: {
                                                            locationName: "blocked",
                                                            type: "boolean"
                                                        },
                                                        PortProbeDetails: {
                                                            locationName: "portProbeDetails",
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    LocalPortDetails: {
                                                                        shape: "S42",
                                                                        locationName: "localPortDetails"
                                                                    },
                                                                    LocalIpDetails: {
                                                                        shape: "S43",
                                                                        locationName: "localIpDetails"
                                                                    },
                                                                    RemoteIpDetails: {
                                                                        shape: "S3v",
                                                                        locationName: "remoteIpDetails"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        Evidence: {
                                            locationName: "evidence",
                                            type: "structure",
                                            members: {
                                                ThreatIntelligenceDetails: {
                                                    locationName: "threatIntelligenceDetails",
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            ThreatListName: {
                                                                locationName: "threatListName"
                                                            },
                                                            ThreatNames: {
                                                                locationName: "threatNames",
                                                                type: "list",
                                                                member: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        Archived: {
                                            locationName: "archived",
                                            type: "boolean"
                                        },
                                        Count: {
                                            locationName: "count",
                                            type: "integer"
                                        },
                                        DetectorId: {
                                            locationName: "detectorId"
                                        },
                                        EventFirstSeen: {
                                            locationName: "eventFirstSeen"
                                        },
                                        EventLastSeen: {
                                            locationName: "eventLastSeen"
                                        },
                                        ResourceRole: {
                                            locationName: "resourceRole"
                                        },
                                        ServiceName: {
                                            locationName: "serviceName"
                                        },
                                        UserFeedback: {
                                            locationName: "userFeedback"
                                        }
                                    }
                                },
                                Severity: {
                                    locationName: "severity",
                                    type: "double"
                                },
                                Title: {
                                    locationName: "title"
                                },
                                Type: {
                                    locationName: "type"
                                },
                                UpdatedAt: {
                                    locationName: "updatedAt"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetFindingsStatistics: {
            http: {
                requestUri: "/detector/{detectorId}/findings/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FindingStatisticTypes" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingStatisticTypes: {
                        locationName: "findingStatisticTypes",
                        type: "list",
                        member: {}
                    },
                    FindingCriteria: {
                        shape: "So",
                        locationName: "findingCriteria"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FindingStatistics" ],
                members: {
                    FindingStatistics: {
                        locationName: "findingStatistics",
                        type: "structure",
                        members: {
                            CountBySeverity: {
                                locationName: "countBySeverity",
                                type: "map",
                                key: {},
                                value: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetIPSet: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/ipset/{ipSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "IpSetId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    IpSetId: {
                        location: "uri",
                        locationName: "ipSetId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name", "Format", "Location", "Status" ],
                members: {
                    Name: {
                        locationName: "name"
                    },
                    Format: {
                        locationName: "format"
                    },
                    Location: {
                        locationName: "location"
                    },
                    Status: {
                        locationName: "status"
                    },
                    Tags: {
                        shape: "Sf",
                        locationName: "tags"
                    }
                }
            }
        },
        GetInvitationsCount: {
            http: {
                method: "GET",
                requestUri: "/invitation/count",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    InvitationsCount: {
                        locationName: "invitationsCount",
                        type: "integer"
                    }
                }
            }
        },
        GetMasterAccount: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/master",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Master" ],
                members: {
                    Master: {
                        locationName: "master",
                        type: "structure",
                        members: {
                            AccountId: {
                                locationName: "accountId"
                            },
                            InvitationId: {
                                locationName: "invitationId"
                            },
                            RelationshipStatus: {
                                locationName: "relationshipStatus"
                            },
                            InvitedAt: {
                                locationName: "invitedAt"
                            }
                        }
                    }
                }
            }
        },
        GetMemberDetectors: {
            http: {
                requestUri: "/detector/{detectorId}/member/detector/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S1n",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MemberDataSourceConfigurations", "UnprocessedAccounts" ],
                members: {
                    MemberDataSourceConfigurations: {
                        locationName: "members",
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AccountId", "DataSources" ],
                            members: {
                                AccountId: {
                                    locationName: "accountId"
                                },
                                DataSources: {
                                    shape: "S2l",
                                    locationName: "dataSources"
                                }
                            }
                        }
                    },
                    UnprocessedAccounts: {
                        shape: "S19",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        GetMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S1n",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Members", "UnprocessedAccounts" ],
                members: {
                    Members: {
                        shape: "S4w",
                        locationName: "members"
                    },
                    UnprocessedAccounts: {
                        shape: "S19",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        GetThreatIntelSet: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/threatintelset/{threatIntelSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "ThreatIntelSetId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    ThreatIntelSetId: {
                        location: "uri",
                        locationName: "threatIntelSetId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name", "Format", "Location", "Status" ],
                members: {
                    Name: {
                        locationName: "name"
                    },
                    Format: {
                        locationName: "format"
                    },
                    Location: {
                        locationName: "location"
                    },
                    Status: {
                        locationName: "status"
                    },
                    Tags: {
                        shape: "Sf",
                        locationName: "tags"
                    }
                }
            }
        },
        GetUsageStatistics: {
            http: {
                requestUri: "/detector/{detectorId}/usage/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "UsageStatisticType", "UsageCriteria" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    UsageStatisticType: {
                        locationName: "usageStatisticsType"
                    },
                    UsageCriteria: {
                        locationName: "usageCriteria",
                        type: "structure",
                        required: [ "DataSources" ],
                        members: {
                            AccountIds: {
                                shape: "S1n",
                                locationName: "accountIds"
                            },
                            DataSources: {
                                locationName: "dataSources",
                                type: "list",
                                member: {}
                            },
                            Resources: {
                                locationName: "resources",
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    Unit: {
                        locationName: "unit"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UsageStatistics: {
                        locationName: "usageStatistics",
                        type: "structure",
                        members: {
                            SumByAccount: {
                                locationName: "sumByAccount",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        AccountId: {
                                            locationName: "accountId"
                                        },
                                        Total: {
                                            shape: "S5c",
                                            locationName: "total"
                                        }
                                    }
                                }
                            },
                            SumByDataSource: {
                                locationName: "sumByDataSource",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        DataSource: {
                                            locationName: "dataSource"
                                        },
                                        Total: {
                                            shape: "S5c",
                                            locationName: "total"
                                        }
                                    }
                                }
                            },
                            SumByResource: {
                                shape: "S5f",
                                locationName: "sumByResource"
                            },
                            TopResources: {
                                shape: "S5f",
                                locationName: "topResources"
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        InviteMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member/invite",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S1n",
                        locationName: "accountIds"
                    },
                    DisableEmailNotification: {
                        locationName: "disableEmailNotification",
                        type: "boolean"
                    },
                    Message: {
                        locationName: "message"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S19",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        ListDetectors: {
            http: {
                method: "GET",
                requestUri: "/detector",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DetectorIds" ],
                members: {
                    DetectorIds: {
                        locationName: "detectorIds",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListFilters: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/filter",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FilterNames" ],
                members: {
                    FilterNames: {
                        locationName: "filterNames",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListFindings: {
            http: {
                requestUri: "/detector/{detectorId}/findings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingCriteria: {
                        shape: "So",
                        locationName: "findingCriteria"
                    },
                    SortCriteria: {
                        shape: "S2u",
                        locationName: "sortCriteria"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FindingIds" ],
                members: {
                    FindingIds: {
                        shape: "S6",
                        locationName: "findingIds"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListIPSets: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/ipset",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "IpSetIds" ],
                members: {
                    IpSetIds: {
                        locationName: "ipSetIds",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListInvitations: {
            http: {
                method: "GET",
                requestUri: "/invitation",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Invitations: {
                        locationName: "invitations",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {
                                    locationName: "accountId"
                                },
                                InvitationId: {
                                    locationName: "invitationId"
                                },
                                RelationshipStatus: {
                                    locationName: "relationshipStatus"
                                },
                                InvitedAt: {
                                    locationName: "invitedAt"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListMembers: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/member",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    OnlyAssociated: {
                        location: "querystring",
                        locationName: "onlyAssociated"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Members: {
                        shape: "S4w",
                        locationName: "members"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListOrganizationAdminAccounts: {
            http: {
                method: "GET",
                requestUri: "/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdminAccounts: {
                        locationName: "adminAccounts",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AdminAccountId: {
                                    locationName: "adminAccountId"
                                },
                                AdminStatus: {
                                    locationName: "adminStatus"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListPublishingDestinations: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/publishingDestination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Destinations" ],
                members: {
                    Destinations: {
                        locationName: "destinations",
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DestinationId", "DestinationType", "Status" ],
                            members: {
                                DestinationId: {
                                    locationName: "destinationId"
                                },
                                DestinationType: {
                                    locationName: "destinationType"
                                },
                                Status: {
                                    locationName: "status"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sf",
                        locationName: "tags"
                    }
                }
            }
        },
        ListThreatIntelSets: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/threatintelset",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ThreatIntelSetIds" ],
                members: {
                    ThreatIntelSetIds: {
                        locationName: "threatIntelSetIds",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        StartMonitoringMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S1n",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S19",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        StopMonitoringMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S1n",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S19",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Sf",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UnarchiveFindings: {
            http: {
                requestUri: "/detector/{detectorId}/findings/unarchive",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FindingIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingIds: {
                        shape: "S6",
                        locationName: "findingIds"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDetector: {
            http: {
                requestUri: "/detector/{detectorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    Enable: {
                        locationName: "enable",
                        type: "boolean"
                    },
                    FindingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    DataSources: {
                        shape: "Sd",
                        locationName: "dataSources"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFilter: {
            http: {
                requestUri: "/detector/{detectorId}/filter/{filterName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FilterName" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FilterName: {
                        location: "uri",
                        locationName: "filterName"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Action: {
                        locationName: "action"
                    },
                    Rank: {
                        locationName: "rank",
                        type: "integer"
                    },
                    FindingCriteria: {
                        shape: "So",
                        locationName: "findingCriteria"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        locationName: "name"
                    }
                }
            }
        },
        UpdateFindingsFeedback: {
            http: {
                requestUri: "/detector/{detectorId}/findings/feedback",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FindingIds", "Feedback" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingIds: {
                        shape: "S6",
                        locationName: "findingIds"
                    },
                    Feedback: {
                        locationName: "feedback"
                    },
                    Comments: {
                        locationName: "comments"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateIPSet: {
            http: {
                requestUri: "/detector/{detectorId}/ipset/{ipSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "IpSetId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    IpSetId: {
                        location: "uri",
                        locationName: "ipSetId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Location: {
                        locationName: "location"
                    },
                    Activate: {
                        locationName: "activate",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMemberDetectors: {
            http: {
                requestUri: "/detector/{detectorId}/member/detector/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S1n",
                        locationName: "accountIds"
                    },
                    DataSources: {
                        shape: "Sd",
                        locationName: "dataSources"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S19",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        UpdateOrganizationConfiguration: {
            http: {
                requestUri: "/detector/{detectorId}/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AutoEnable" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AutoEnable: {
                        locationName: "autoEnable",
                        type: "boolean"
                    },
                    DataSources: {
                        locationName: "dataSources",
                        type: "structure",
                        members: {
                            S3Logs: {
                                locationName: "s3Logs",
                                type: "structure",
                                required: [ "AutoEnable" ],
                                members: {
                                    AutoEnable: {
                                        locationName: "autoEnable",
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePublishingDestination: {
            http: {
                requestUri: "/detector/{detectorId}/publishingDestination/{destinationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "DestinationId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    DestinationId: {
                        location: "uri",
                        locationName: "destinationId"
                    },
                    DestinationProperties: {
                        shape: "S1d",
                        locationName: "destinationProperties"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateThreatIntelSet: {
            http: {
                requestUri: "/detector/{detectorId}/threatintelset/{threatIntelSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "ThreatIntelSetId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    ThreatIntelSetId: {
                        location: "uri",
                        locationName: "threatIntelSetId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Location: {
                        locationName: "location"
                    },
                    Activate: {
                        locationName: "activate",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S6: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "structure",
            members: {
                S3Logs: {
                    locationName: "s3Logs",
                    type: "structure",
                    required: [ "Enable" ],
                    members: {
                        Enable: {
                            locationName: "enable",
                            type: "boolean"
                        }
                    }
                }
            }
        },
        Sf: {
            type: "map",
            key: {},
            value: {}
        },
        So: {
            type: "structure",
            members: {
                Criterion: {
                    locationName: "criterion",
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            Eq: {
                                deprecated: true,
                                locationName: "eq",
                                type: "list",
                                member: {}
                            },
                            Neq: {
                                deprecated: true,
                                locationName: "neq",
                                type: "list",
                                member: {}
                            },
                            Gt: {
                                deprecated: true,
                                locationName: "gt",
                                type: "integer"
                            },
                            Gte: {
                                deprecated: true,
                                locationName: "gte",
                                type: "integer"
                            },
                            Lt: {
                                deprecated: true,
                                locationName: "lt",
                                type: "integer"
                            },
                            Lte: {
                                deprecated: true,
                                locationName: "lte",
                                type: "integer"
                            },
                            Equals: {
                                locationName: "equals",
                                type: "list",
                                member: {}
                            },
                            NotEquals: {
                                locationName: "notEquals",
                                type: "list",
                                member: {}
                            },
                            GreaterThan: {
                                locationName: "greaterThan",
                                type: "long"
                            },
                            GreaterThanOrEqual: {
                                locationName: "greaterThanOrEqual",
                                type: "long"
                            },
                            LessThan: {
                                locationName: "lessThan",
                                type: "long"
                            },
                            LessThanOrEqual: {
                                locationName: "lessThanOrEqual",
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S19: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AccountId", "Result" ],
                members: {
                    AccountId: {
                        locationName: "accountId"
                    },
                    Result: {
                        locationName: "result"
                    }
                }
            }
        },
        S1d: {
            type: "structure",
            members: {
                DestinationArn: {
                    locationName: "destinationArn"
                },
                KmsKeyArn: {
                    locationName: "kmsKeyArn"
                }
            }
        },
        S1n: {
            type: "list",
            member: {}
        },
        S2l: {
            type: "structure",
            required: [ "CloudTrail", "DNSLogs", "FlowLogs", "S3Logs" ],
            members: {
                CloudTrail: {
                    locationName: "cloudTrail",
                    type: "structure",
                    required: [ "Status" ],
                    members: {
                        Status: {
                            locationName: "status"
                        }
                    }
                },
                DNSLogs: {
                    locationName: "dnsLogs",
                    type: "structure",
                    required: [ "Status" ],
                    members: {
                        Status: {
                            locationName: "status"
                        }
                    }
                },
                FlowLogs: {
                    locationName: "flowLogs",
                    type: "structure",
                    required: [ "Status" ],
                    members: {
                        Status: {
                            locationName: "status"
                        }
                    }
                },
                S3Logs: {
                    locationName: "s3Logs",
                    type: "structure",
                    required: [ "Status" ],
                    members: {
                        Status: {
                            locationName: "status"
                        }
                    }
                }
            }
        },
        S2u: {
            type: "structure",
            members: {
                AttributeName: {
                    locationName: "attributeName"
                },
                OrderBy: {
                    locationName: "orderBy"
                }
            }
        },
        S36: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {
                        locationName: "key"
                    },
                    Value: {
                        locationName: "value"
                    }
                }
            }
        },
        S3e: {
            type: "structure",
            members: {
                IgnorePublicAcls: {
                    locationName: "ignorePublicAcls",
                    type: "boolean"
                },
                RestrictPublicBuckets: {
                    locationName: "restrictPublicBuckets",
                    type: "boolean"
                },
                BlockPublicAcls: {
                    locationName: "blockPublicAcls",
                    type: "boolean"
                },
                BlockPublicPolicy: {
                    locationName: "blockPublicPolicy",
                    type: "boolean"
                }
            }
        },
        S3v: {
            type: "structure",
            members: {
                City: {
                    locationName: "city",
                    type: "structure",
                    members: {
                        CityName: {
                            locationName: "cityName"
                        }
                    }
                },
                Country: {
                    locationName: "country",
                    type: "structure",
                    members: {
                        CountryCode: {
                            locationName: "countryCode"
                        },
                        CountryName: {
                            locationName: "countryName"
                        }
                    }
                },
                GeoLocation: {
                    locationName: "geoLocation",
                    type: "structure",
                    members: {
                        Lat: {
                            locationName: "lat",
                            type: "double"
                        },
                        Lon: {
                            locationName: "lon",
                            type: "double"
                        }
                    }
                },
                IpAddressV4: {
                    locationName: "ipAddressV4"
                },
                Organization: {
                    locationName: "organization",
                    type: "structure",
                    members: {
                        Asn: {
                            locationName: "asn"
                        },
                        AsnOrg: {
                            locationName: "asnOrg"
                        },
                        Isp: {
                            locationName: "isp"
                        },
                        Org: {
                            locationName: "org"
                        }
                    }
                }
            }
        },
        S42: {
            type: "structure",
            members: {
                Port: {
                    locationName: "port",
                    type: "integer"
                },
                PortName: {
                    locationName: "portName"
                }
            }
        },
        S43: {
            type: "structure",
            members: {
                IpAddressV4: {
                    locationName: "ipAddressV4"
                }
            }
        },
        S4w: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AccountId", "MasterId", "Email", "RelationshipStatus", "UpdatedAt" ],
                members: {
                    AccountId: {
                        locationName: "accountId"
                    },
                    DetectorId: {
                        locationName: "detectorId"
                    },
                    MasterId: {
                        locationName: "masterId"
                    },
                    Email: {
                        locationName: "email"
                    },
                    RelationshipStatus: {
                        locationName: "relationshipStatus"
                    },
                    InvitedAt: {
                        locationName: "invitedAt"
                    },
                    UpdatedAt: {
                        locationName: "updatedAt"
                    }
                }
            }
        },
        S5c: {
            type: "structure",
            members: {
                Amount: {
                    locationName: "amount"
                },
                Unit: {
                    locationName: "unit"
                }
            }
        },
        S5f: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Resource: {
                        locationName: "resource"
                    },
                    Total: {
                        shape: "S5c",
                        locationName: "total"
                    }
                }
            }
        }
    },
    paginators: {
        GetUsageStatistics: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDetectors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DetectorIds"
        },
        ListFilters: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FilterNames"
        },
        ListFindings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FindingIds"
        },
        ListIPSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "IpSetIds"
        },
        ListInvitations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Invitations"
        },
        ListMembers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Members"
        },
        ListOrganizationAdminAccounts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AdminAccounts"
        },
        ListPublishingDestinations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListThreatIntelSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ThreatIntelSetIds"
        }
    }
};

AWS.apiLoader.services["mq"] = {};

AWS.MQ = AWS.Service.defineService("mq", [ "2017-11-27" ]);

AWS.apiLoader.services["mq"]["2017-11-27"] = {
    metadata: {
        apiVersion: "2017-11-27",
        endpointPrefix: "mq",
        signingName: "mq",
        serviceFullName: "AmazonMQ",
        serviceId: "mq",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "mq-2017-11-27",
        signatureVersion: "v4"
    },
    operations: {
        CreateBroker: {
            http: {
                requestUri: "/v1/brokers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    AutoMinorVersionUpgrade: {
                        locationName: "autoMinorVersionUpgrade",
                        type: "boolean"
                    },
                    BrokerName: {
                        locationName: "brokerName"
                    },
                    Configuration: {
                        shape: "S5",
                        locationName: "configuration"
                    },
                    CreatorRequestId: {
                        locationName: "creatorRequestId",
                        idempotencyToken: true
                    },
                    DeploymentMode: {
                        locationName: "deploymentMode"
                    },
                    EncryptionOptions: {
                        shape: "S8",
                        locationName: "encryptionOptions"
                    },
                    EngineType: {
                        locationName: "engineType"
                    },
                    EngineVersion: {
                        locationName: "engineVersion"
                    },
                    HostInstanceType: {
                        locationName: "hostInstanceType"
                    },
                    LdapServerMetadata: {
                        shape: "Sa",
                        locationName: "ldapServerMetadata"
                    },
                    Logs: {
                        shape: "Sc",
                        locationName: "logs"
                    },
                    MaintenanceWindowStartTime: {
                        shape: "Sd",
                        locationName: "maintenanceWindowStartTime"
                    },
                    PubliclyAccessible: {
                        locationName: "publiclyAccessible",
                        type: "boolean"
                    },
                    SecurityGroups: {
                        shape: "Sb",
                        locationName: "securityGroups"
                    },
                    StorageType: {
                        locationName: "storageType"
                    },
                    SubnetIds: {
                        shape: "Sb",
                        locationName: "subnetIds"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Users: {
                        locationName: "users",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConsoleAccess: {
                                    locationName: "consoleAccess",
                                    type: "boolean"
                                },
                                Groups: {
                                    shape: "Sb",
                                    locationName: "groups"
                                },
                                Password: {
                                    locationName: "password"
                                },
                                Username: {
                                    locationName: "username"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BrokerArn: {
                        locationName: "brokerArn"
                    },
                    BrokerId: {
                        locationName: "brokerId"
                    }
                }
            }
        },
        CreateConfiguration: {
            http: {
                requestUri: "/v1/configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    EngineType: {
                        locationName: "engineType"
                    },
                    EngineVersion: {
                        locationName: "engineVersion"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    Created: {
                        shape: "Sm",
                        locationName: "created"
                    },
                    Id: {
                        locationName: "id"
                    },
                    LatestRevision: {
                        shape: "Sn",
                        locationName: "latestRevision"
                    },
                    Name: {
                        locationName: "name"
                    }
                }
            }
        },
        CreateTags: {
            http: {
                requestUri: "/v1/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn" ]
            }
        },
        CreateUser: {
            http: {
                requestUri: "/v1/brokers/{broker-id}/users/{username}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    },
                    ConsoleAccess: {
                        locationName: "consoleAccess",
                        type: "boolean"
                    },
                    Groups: {
                        shape: "Sb",
                        locationName: "groups"
                    },
                    Password: {
                        locationName: "password"
                    },
                    Username: {
                        location: "uri",
                        locationName: "username"
                    }
                },
                required: [ "Username", "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteBroker: {
            http: {
                method: "DELETE",
                requestUri: "/v1/brokers/{broker-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    }
                },
                required: [ "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {
                    BrokerId: {
                        locationName: "brokerId"
                    }
                }
            }
        },
        DeleteTags: {
            http: {
                method: "DELETE",
                requestUri: "/v1/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        shape: "Sb",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        DeleteUser: {
            http: {
                method: "DELETE",
                requestUri: "/v1/brokers/{broker-id}/users/{username}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    },
                    Username: {
                        location: "uri",
                        locationName: "username"
                    }
                },
                required: [ "Username", "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeBroker: {
            http: {
                method: "GET",
                requestUri: "/v1/brokers/{broker-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    }
                },
                required: [ "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    AutoMinorVersionUpgrade: {
                        locationName: "autoMinorVersionUpgrade",
                        type: "boolean"
                    },
                    BrokerArn: {
                        locationName: "brokerArn"
                    },
                    BrokerId: {
                        locationName: "brokerId"
                    },
                    BrokerInstances: {
                        locationName: "brokerInstances",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConsoleURL: {
                                    locationName: "consoleURL"
                                },
                                Endpoints: {
                                    shape: "Sb",
                                    locationName: "endpoints"
                                },
                                IpAddress: {
                                    locationName: "ipAddress"
                                }
                            }
                        }
                    },
                    BrokerName: {
                        locationName: "brokerName"
                    },
                    BrokerState: {
                        locationName: "brokerState"
                    },
                    Configurations: {
                        locationName: "configurations",
                        type: "structure",
                        members: {
                            Current: {
                                shape: "S5",
                                locationName: "current"
                            },
                            History: {
                                locationName: "history",
                                type: "list",
                                member: {
                                    shape: "S5"
                                }
                            },
                            Pending: {
                                shape: "S5",
                                locationName: "pending"
                            }
                        }
                    },
                    Created: {
                        shape: "Sm",
                        locationName: "created"
                    },
                    DeploymentMode: {
                        locationName: "deploymentMode"
                    },
                    EncryptionOptions: {
                        shape: "S8",
                        locationName: "encryptionOptions"
                    },
                    EngineType: {
                        locationName: "engineType"
                    },
                    EngineVersion: {
                        locationName: "engineVersion"
                    },
                    HostInstanceType: {
                        locationName: "hostInstanceType"
                    },
                    LdapServerMetadata: {
                        shape: "S13",
                        locationName: "ldapServerMetadata"
                    },
                    Logs: {
                        locationName: "logs",
                        type: "structure",
                        members: {
                            Audit: {
                                locationName: "audit",
                                type: "boolean"
                            },
                            AuditLogGroup: {
                                locationName: "auditLogGroup"
                            },
                            General: {
                                locationName: "general",
                                type: "boolean"
                            },
                            GeneralLogGroup: {
                                locationName: "generalLogGroup"
                            },
                            Pending: {
                                locationName: "pending",
                                type: "structure",
                                members: {
                                    Audit: {
                                        locationName: "audit",
                                        type: "boolean"
                                    },
                                    General: {
                                        locationName: "general",
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    },
                    MaintenanceWindowStartTime: {
                        shape: "Sd",
                        locationName: "maintenanceWindowStartTime"
                    },
                    PendingAuthenticationStrategy: {
                        locationName: "pendingAuthenticationStrategy"
                    },
                    PendingEngineVersion: {
                        locationName: "pendingEngineVersion"
                    },
                    PendingHostInstanceType: {
                        locationName: "pendingHostInstanceType"
                    },
                    PendingLdapServerMetadata: {
                        shape: "S13",
                        locationName: "pendingLdapServerMetadata"
                    },
                    PendingSecurityGroups: {
                        shape: "Sb",
                        locationName: "pendingSecurityGroups"
                    },
                    PubliclyAccessible: {
                        locationName: "publiclyAccessible",
                        type: "boolean"
                    },
                    SecurityGroups: {
                        shape: "Sb",
                        locationName: "securityGroups"
                    },
                    StorageType: {
                        locationName: "storageType"
                    },
                    SubnetIds: {
                        shape: "Sb",
                        locationName: "subnetIds"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Users: {
                        shape: "S16",
                        locationName: "users"
                    }
                }
            }
        },
        DescribeBrokerEngineTypes: {
            http: {
                method: "GET",
                requestUri: "/v1/broker-engine-types",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    EngineType: {
                        location: "querystring",
                        locationName: "engineType"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BrokerEngineTypes: {
                        locationName: "brokerEngineTypes",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EngineType: {
                                    locationName: "engineType"
                                },
                                EngineVersions: {
                                    locationName: "engineVersions",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {
                                                locationName: "name"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeBrokerInstanceOptions: {
            http: {
                method: "GET",
                requestUri: "/v1/broker-instance-options",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    EngineType: {
                        location: "querystring",
                        locationName: "engineType"
                    },
                    HostInstanceType: {
                        location: "querystring",
                        locationName: "hostInstanceType"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    StorageType: {
                        location: "querystring",
                        locationName: "storageType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BrokerInstanceOptions: {
                        locationName: "brokerInstanceOptions",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AvailabilityZones: {
                                    locationName: "availabilityZones",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {
                                                locationName: "name"
                                            }
                                        }
                                    }
                                },
                                EngineType: {
                                    locationName: "engineType"
                                },
                                HostInstanceType: {
                                    locationName: "hostInstanceType"
                                },
                                StorageType: {
                                    locationName: "storageType"
                                },
                                SupportedDeploymentModes: {
                                    locationName: "supportedDeploymentModes",
                                    type: "list",
                                    member: {}
                                },
                                SupportedEngineVersions: {
                                    shape: "Sb",
                                    locationName: "supportedEngineVersions"
                                }
                            }
                        }
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeConfiguration: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations/{configuration-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationId: {
                        location: "uri",
                        locationName: "configuration-id"
                    }
                },
                required: [ "ConfigurationId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    Created: {
                        shape: "Sm",
                        locationName: "created"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EngineType: {
                        locationName: "engineType"
                    },
                    EngineVersion: {
                        locationName: "engineVersion"
                    },
                    Id: {
                        locationName: "id"
                    },
                    LatestRevision: {
                        shape: "Sn",
                        locationName: "latestRevision"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        DescribeConfigurationRevision: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations/{configuration-id}/revisions/{configuration-revision}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationId: {
                        location: "uri",
                        locationName: "configuration-id"
                    },
                    ConfigurationRevision: {
                        location: "uri",
                        locationName: "configuration-revision"
                    }
                },
                required: [ "ConfigurationRevision", "ConfigurationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationId: {
                        locationName: "configurationId"
                    },
                    Created: {
                        shape: "Sm",
                        locationName: "created"
                    },
                    Data: {
                        locationName: "data"
                    },
                    Description: {
                        locationName: "description"
                    }
                }
            }
        },
        DescribeUser: {
            http: {
                method: "GET",
                requestUri: "/v1/brokers/{broker-id}/users/{username}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    },
                    Username: {
                        location: "uri",
                        locationName: "username"
                    }
                },
                required: [ "Username", "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {
                    BrokerId: {
                        locationName: "brokerId"
                    },
                    ConsoleAccess: {
                        locationName: "consoleAccess",
                        type: "boolean"
                    },
                    Groups: {
                        shape: "Sb",
                        locationName: "groups"
                    },
                    Pending: {
                        locationName: "pending",
                        type: "structure",
                        members: {
                            ConsoleAccess: {
                                locationName: "consoleAccess",
                                type: "boolean"
                            },
                            Groups: {
                                shape: "Sb",
                                locationName: "groups"
                            },
                            PendingChange: {
                                locationName: "pendingChange"
                            }
                        }
                    },
                    Username: {
                        locationName: "username"
                    }
                }
            }
        },
        ListBrokers: {
            http: {
                method: "GET",
                requestUri: "/v1/brokers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BrokerSummaries: {
                        locationName: "brokerSummaries",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BrokerArn: {
                                    locationName: "brokerArn"
                                },
                                BrokerId: {
                                    locationName: "brokerId"
                                },
                                BrokerName: {
                                    locationName: "brokerName"
                                },
                                BrokerState: {
                                    locationName: "brokerState"
                                },
                                Created: {
                                    shape: "Sm",
                                    locationName: "created"
                                },
                                DeploymentMode: {
                                    locationName: "deploymentMode"
                                },
                                EngineType: {
                                    locationName: "engineType"
                                },
                                HostInstanceType: {
                                    locationName: "hostInstanceType"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListConfigurationRevisions: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations/{configuration-id}/revisions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationId: {
                        location: "uri",
                        locationName: "configuration-id"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ConfigurationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationId: {
                        locationName: "configurationId"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Revisions: {
                        locationName: "revisions",
                        type: "list",
                        member: {
                            shape: "Sn"
                        }
                    }
                }
            }
        },
        ListConfigurations: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Configurations: {
                        locationName: "configurations",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                AuthenticationStrategy: {
                                    locationName: "authenticationStrategy"
                                },
                                Created: {
                                    shape: "Sm",
                                    locationName: "created"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                EngineType: {
                                    locationName: "engineType"
                                },
                                EngineVersion: {
                                    locationName: "engineVersion"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                LatestRevision: {
                                    shape: "Sn",
                                    locationName: "latestRevision"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                Tags: {
                                    shape: "Sg",
                                    locationName: "tags"
                                }
                            }
                        }
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListTags: {
            http: {
                method: "GET",
                requestUri: "/v1/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        ListUsers: {
            http: {
                method: "GET",
                requestUri: "/v1/brokers/{broker-id}/users",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {
                    BrokerId: {
                        locationName: "brokerId"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Users: {
                        shape: "S16",
                        locationName: "users"
                    }
                }
            }
        },
        RebootBroker: {
            http: {
                requestUri: "/v1/brokers/{broker-id}/reboot",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    }
                },
                required: [ "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateBroker: {
            http: {
                method: "PUT",
                requestUri: "/v1/brokers/{broker-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    AutoMinorVersionUpgrade: {
                        locationName: "autoMinorVersionUpgrade",
                        type: "boolean"
                    },
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    },
                    Configuration: {
                        shape: "S5",
                        locationName: "configuration"
                    },
                    EngineVersion: {
                        locationName: "engineVersion"
                    },
                    HostInstanceType: {
                        locationName: "hostInstanceType"
                    },
                    LdapServerMetadata: {
                        shape: "Sa",
                        locationName: "ldapServerMetadata"
                    },
                    Logs: {
                        shape: "Sc",
                        locationName: "logs"
                    },
                    SecurityGroups: {
                        shape: "Sb",
                        locationName: "securityGroups"
                    }
                },
                required: [ "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    AutoMinorVersionUpgrade: {
                        locationName: "autoMinorVersionUpgrade",
                        type: "boolean"
                    },
                    BrokerId: {
                        locationName: "brokerId"
                    },
                    Configuration: {
                        shape: "S5",
                        locationName: "configuration"
                    },
                    EngineVersion: {
                        locationName: "engineVersion"
                    },
                    HostInstanceType: {
                        locationName: "hostInstanceType"
                    },
                    LdapServerMetadata: {
                        shape: "S13",
                        locationName: "ldapServerMetadata"
                    },
                    Logs: {
                        shape: "Sc",
                        locationName: "logs"
                    },
                    SecurityGroups: {
                        shape: "Sb",
                        locationName: "securityGroups"
                    }
                }
            }
        },
        UpdateConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/v1/configurations/{configuration-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationId: {
                        location: "uri",
                        locationName: "configuration-id"
                    },
                    Data: {
                        locationName: "data"
                    },
                    Description: {
                        locationName: "description"
                    }
                },
                required: [ "ConfigurationId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Created: {
                        shape: "Sm",
                        locationName: "created"
                    },
                    Id: {
                        locationName: "id"
                    },
                    LatestRevision: {
                        shape: "Sn",
                        locationName: "latestRevision"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Warnings: {
                        locationName: "warnings",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AttributeName: {
                                    locationName: "attributeName"
                                },
                                ElementName: {
                                    locationName: "elementName"
                                },
                                Reason: {
                                    locationName: "reason"
                                }
                            }
                        }
                    }
                }
            }
        },
        UpdateUser: {
            http: {
                method: "PUT",
                requestUri: "/v1/brokers/{broker-id}/users/{username}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    },
                    ConsoleAccess: {
                        locationName: "consoleAccess",
                        type: "boolean"
                    },
                    Groups: {
                        shape: "Sb",
                        locationName: "groups"
                    },
                    Password: {
                        locationName: "password"
                    },
                    Username: {
                        location: "uri",
                        locationName: "username"
                    }
                },
                required: [ "Username", "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                Id: {
                    locationName: "id"
                },
                Revision: {
                    locationName: "revision",
                    type: "integer"
                }
            }
        },
        S8: {
            type: "structure",
            members: {
                KmsKeyId: {
                    locationName: "kmsKeyId"
                },
                UseAwsOwnedKey: {
                    locationName: "useAwsOwnedKey",
                    type: "boolean"
                }
            },
            required: [ "UseAwsOwnedKey" ]
        },
        Sa: {
            type: "structure",
            members: {
                Hosts: {
                    shape: "Sb",
                    locationName: "hosts"
                },
                RoleBase: {
                    locationName: "roleBase"
                },
                RoleName: {
                    locationName: "roleName"
                },
                RoleSearchMatching: {
                    locationName: "roleSearchMatching"
                },
                RoleSearchSubtree: {
                    locationName: "roleSearchSubtree",
                    type: "boolean"
                },
                ServiceAccountPassword: {
                    locationName: "serviceAccountPassword"
                },
                ServiceAccountUsername: {
                    locationName: "serviceAccountUsername"
                },
                UserBase: {
                    locationName: "userBase"
                },
                UserRoleName: {
                    locationName: "userRoleName"
                },
                UserSearchMatching: {
                    locationName: "userSearchMatching"
                },
                UserSearchSubtree: {
                    locationName: "userSearchSubtree",
                    type: "boolean"
                }
            }
        },
        Sb: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "structure",
            members: {
                Audit: {
                    locationName: "audit",
                    type: "boolean"
                },
                General: {
                    locationName: "general",
                    type: "boolean"
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                DayOfWeek: {
                    locationName: "dayOfWeek"
                },
                TimeOfDay: {
                    locationName: "timeOfDay"
                },
                TimeZone: {
                    locationName: "timeZone"
                }
            }
        },
        Sg: {
            type: "map",
            key: {},
            value: {}
        },
        Sm: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sn: {
            type: "structure",
            members: {
                Created: {
                    shape: "Sm",
                    locationName: "created"
                },
                Description: {
                    locationName: "description"
                },
                Revision: {
                    locationName: "revision",
                    type: "integer"
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                Hosts: {
                    shape: "Sb",
                    locationName: "hosts"
                },
                RoleBase: {
                    locationName: "roleBase"
                },
                RoleName: {
                    locationName: "roleName"
                },
                RoleSearchMatching: {
                    locationName: "roleSearchMatching"
                },
                RoleSearchSubtree: {
                    locationName: "roleSearchSubtree",
                    type: "boolean"
                },
                ServiceAccountUsername: {
                    locationName: "serviceAccountUsername"
                },
                UserBase: {
                    locationName: "userBase"
                },
                UserRoleName: {
                    locationName: "userRoleName"
                },
                UserSearchMatching: {
                    locationName: "userSearchMatching"
                },
                UserSearchSubtree: {
                    locationName: "userSearchSubtree",
                    type: "boolean"
                }
            }
        },
        S16: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PendingChange: {
                        locationName: "pendingChange"
                    },
                    Username: {
                        locationName: "username"
                    }
                }
            }
        }
    },
    authorizers: {
        authorization_strategy: {
            name: "authorization_strategy",
            type: "provided",
            placement: {
                location: "header",
                name: "Authorization"
            }
        }
    },
    paginators: {
        ListBrokers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "BrokerSummaries"
        }
    }
};

AWS.apiLoader.services["comprehend"] = {};

AWS.Comprehend = AWS.Service.defineService("comprehend", [ "2017-11-27" ]);

AWS.apiLoader.services["comprehend"]["2017-11-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-11-27",
        endpointPrefix: "comprehend",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Comprehend",
        serviceId: "Comprehend",
        signatureVersion: "v4",
        signingName: "comprehend",
        targetPrefix: "Comprehend_20171127",
        uid: "comprehend-2017-11-27"
    },
    operations: {
        BatchDetectDominantLanguage: {
            input: {
                type: "structure",
                required: [ "TextList" ],
                members: {
                    TextList: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ResultList", "ErrorList" ],
                members: {
                    ResultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Index: {
                                    type: "integer"
                                },
                                Languages: {
                                    shape: "S8"
                                }
                            }
                        }
                    },
                    ErrorList: {
                        shape: "Sc"
                    }
                },
                sensitive: true
            }
        },
        BatchDetectEntities: {
            input: {
                type: "structure",
                required: [ "TextList", "LanguageCode" ],
                members: {
                    TextList: {
                        shape: "S2"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResultList", "ErrorList" ],
                members: {
                    ResultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Index: {
                                    type: "integer"
                                },
                                Entities: {
                                    shape: "Sj"
                                }
                            }
                        }
                    },
                    ErrorList: {
                        shape: "Sc"
                    }
                },
                sensitive: true
            }
        },
        BatchDetectKeyPhrases: {
            input: {
                type: "structure",
                required: [ "TextList", "LanguageCode" ],
                members: {
                    TextList: {
                        shape: "S2"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResultList", "ErrorList" ],
                members: {
                    ResultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Index: {
                                    type: "integer"
                                },
                                KeyPhrases: {
                                    shape: "Sq"
                                }
                            }
                        }
                    },
                    ErrorList: {
                        shape: "Sc"
                    }
                },
                sensitive: true
            }
        },
        BatchDetectSentiment: {
            input: {
                type: "structure",
                required: [ "TextList", "LanguageCode" ],
                members: {
                    TextList: {
                        shape: "S2"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResultList", "ErrorList" ],
                members: {
                    ResultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Index: {
                                    type: "integer"
                                },
                                Sentiment: {},
                                SentimentScore: {
                                    shape: "Sx"
                                }
                            }
                        }
                    },
                    ErrorList: {
                        shape: "Sc"
                    }
                },
                sensitive: true
            }
        },
        BatchDetectSyntax: {
            input: {
                type: "structure",
                required: [ "TextList", "LanguageCode" ],
                members: {
                    TextList: {
                        shape: "S2"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResultList", "ErrorList" ],
                members: {
                    ResultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Index: {
                                    type: "integer"
                                },
                                SyntaxTokens: {
                                    shape: "S13"
                                }
                            }
                        }
                    },
                    ErrorList: {
                        shape: "Sc"
                    }
                },
                sensitive: true
            }
        },
        ClassifyDocument: {
            input: {
                type: "structure",
                required: [ "Text", "EndpointArn" ],
                members: {
                    Text: {
                        shape: "S3"
                    },
                    EndpointArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Classes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Score: {
                                    type: "float"
                                }
                            }
                        }
                    },
                    Labels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Score: {
                                    type: "float"
                                }
                            }
                        }
                    }
                },
                sensitive: true
            }
        },
        ContainsPiiEntities: {
            input: {
                type: "structure",
                required: [ "Text", "LanguageCode" ],
                members: {
                    Text: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Labels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Score: {
                                    type: "float"
                                }
                            }
                        }
                    }
                }
            }
        },
        CreateDocumentClassifier: {
            input: {
                type: "structure",
                required: [ "DocumentClassifierName", "DataAccessRoleArn", "InputDataConfig", "LanguageCode" ],
                members: {
                    DocumentClassifierName: {},
                    DataAccessRoleArn: {},
                    Tags: {
                        shape: "S1m"
                    },
                    InputDataConfig: {
                        shape: "S1q"
                    },
                    OutputDataConfig: {
                        shape: "S1y"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    LanguageCode: {},
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S21"
                    },
                    Mode: {},
                    ModelKmsKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentClassifierArn: {}
                }
            }
        },
        CreateEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName", "ModelArn", "DesiredInferenceUnits" ],
                members: {
                    EndpointName: {},
                    ModelArn: {},
                    DesiredInferenceUnits: {
                        type: "integer"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S1m"
                    },
                    DataAccessRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointArn: {}
                }
            }
        },
        CreateEntityRecognizer: {
            input: {
                type: "structure",
                required: [ "RecognizerName", "DataAccessRoleArn", "InputDataConfig", "LanguageCode" ],
                members: {
                    RecognizerName: {},
                    DataAccessRoleArn: {},
                    Tags: {
                        shape: "S1m"
                    },
                    InputDataConfig: {
                        shape: "S2g"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    LanguageCode: {},
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S21"
                    },
                    ModelKmsKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EntityRecognizerArn: {}
                }
            }
        },
        DeleteDocumentClassifier: {
            input: {
                type: "structure",
                required: [ "DocumentClassifierArn" ],
                members: {
                    DocumentClassifierArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEntityRecognizer: {
            input: {
                type: "structure",
                required: [ "EntityRecognizerArn" ],
                members: {
                    EntityRecognizerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeDocumentClassificationJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentClassificationJobProperties: {
                        shape: "S30"
                    }
                }
            }
        },
        DescribeDocumentClassifier: {
            input: {
                type: "structure",
                required: [ "DocumentClassifierArn" ],
                members: {
                    DocumentClassifierArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentClassifierProperties: {
                        shape: "S3a"
                    }
                }
            }
        },
        DescribeDominantLanguageDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DominantLanguageDetectionJobProperties: {
                        shape: "S3h"
                    }
                }
            }
        },
        DescribeEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointProperties: {
                        shape: "S3k"
                    }
                }
            }
        },
        DescribeEntitiesDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EntitiesDetectionJobProperties: {
                        shape: "S3o"
                    }
                }
            }
        },
        DescribeEntityRecognizer: {
            input: {
                type: "structure",
                required: [ "EntityRecognizerArn" ],
                members: {
                    EntityRecognizerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EntityRecognizerProperties: {
                        shape: "S3r"
                    }
                }
            }
        },
        DescribeEventsDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventsDetectionJobProperties: {
                        shape: "S3z"
                    }
                }
            }
        },
        DescribeKeyPhrasesDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyPhrasesDetectionJobProperties: {
                        shape: "S44"
                    }
                }
            }
        },
        DescribePiiEntitiesDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PiiEntitiesDetectionJobProperties: {
                        shape: "S47"
                    }
                }
            }
        },
        DescribeSentimentDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SentimentDetectionJobProperties: {
                        shape: "S4g"
                    }
                }
            }
        },
        DescribeTopicsDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TopicsDetectionJobProperties: {
                        shape: "S4j"
                    }
                }
            }
        },
        DetectDominantLanguage: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Languages: {
                        shape: "S8"
                    }
                },
                sensitive: true
            }
        },
        DetectEntities: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {
                        shape: "S3"
                    },
                    LanguageCode: {},
                    EndpointArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Entities: {
                        shape: "Sj"
                    }
                },
                sensitive: true
            }
        },
        DetectKeyPhrases: {
            input: {
                type: "structure",
                required: [ "Text", "LanguageCode" ],
                members: {
                    Text: {
                        shape: "S3"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyPhrases: {
                        shape: "Sq"
                    }
                },
                sensitive: true
            }
        },
        DetectPiiEntities: {
            input: {
                type: "structure",
                required: [ "Text", "LanguageCode" ],
                members: {
                    Text: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Score: {
                                    type: "float"
                                },
                                Type: {},
                                BeginOffset: {
                                    type: "integer"
                                },
                                EndOffset: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        DetectSentiment: {
            input: {
                type: "structure",
                required: [ "Text", "LanguageCode" ],
                members: {
                    Text: {
                        shape: "S3"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Sentiment: {},
                    SentimentScore: {
                        shape: "Sx"
                    }
                },
                sensitive: true
            }
        },
        DetectSyntax: {
            input: {
                type: "structure",
                required: [ "Text", "LanguageCode" ],
                members: {
                    Text: {
                        shape: "S3"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SyntaxTokens: {
                        shape: "S13"
                    }
                },
                sensitive: true
            }
        },
        ListDocumentClassificationJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentClassificationJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S30"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDocumentClassifiers: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            Status: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentClassifierPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S3a"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDominantLanguageDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DominantLanguageDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S3h"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEndpoints: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            ModelArn: {},
                            Status: {},
                            CreationTimeBefore: {
                                type: "timestamp"
                            },
                            CreationTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S3k"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEntitiesDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EntitiesDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S3o"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEntityRecognizers: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            Status: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EntityRecognizerPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S3r"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventsDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventsDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S3z"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListKeyPhrasesDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyPhrasesDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S44"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPiiEntitiesDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PiiEntitiesDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S47"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSentimentDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SentimentDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S4g"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S1m"
                    }
                }
            }
        },
        ListTopicsDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TopicsDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S4j"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        StartDocumentClassificationJob: {
            input: {
                type: "structure",
                required: [ "DocumentClassifierArn", "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn" ],
                members: {
                    JobName: {},
                    DocumentClassifierArn: {},
                    InputDataConfig: {
                        shape: "S35"
                    },
                    OutputDataConfig: {
                        shape: "S37"
                    },
                    DataAccessRoleArn: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StartDominantLanguageDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn" ],
                members: {
                    InputDataConfig: {
                        shape: "S35"
                    },
                    OutputDataConfig: {
                        shape: "S37"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StartEntitiesDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S35"
                    },
                    OutputDataConfig: {
                        shape: "S37"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    EntityRecognizerArn: {},
                    LanguageCode: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StartEventsDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode", "TargetEventTypes" ],
                members: {
                    InputDataConfig: {
                        shape: "S35"
                    },
                    OutputDataConfig: {
                        shape: "S37"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    LanguageCode: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    TargetEventTypes: {
                        shape: "S40"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StartKeyPhrasesDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S35"
                    },
                    OutputDataConfig: {
                        shape: "S37"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    LanguageCode: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StartPiiEntitiesDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "Mode", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S35"
                    },
                    OutputDataConfig: {
                        shape: "S37"
                    },
                    Mode: {},
                    RedactionConfig: {
                        shape: "S49"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    LanguageCode: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StartSentimentDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S35"
                    },
                    OutputDataConfig: {
                        shape: "S37"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    LanguageCode: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StartTopicsDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn" ],
                members: {
                    InputDataConfig: {
                        shape: "S35"
                    },
                    OutputDataConfig: {
                        shape: "S37"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    NumberOfTopics: {
                        type: "integer"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopDominantLanguageDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopEntitiesDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopEventsDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopKeyPhrasesDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopPiiEntitiesDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopSentimentDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopTrainingDocumentClassifier: {
            input: {
                type: "structure",
                required: [ "DocumentClassifierArn" ],
                members: {
                    DocumentClassifierArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopTrainingEntityRecognizer: {
            input: {
                type: "structure",
                required: [ "EntityRecognizerArn" ],
                members: {
                    EntityRecognizerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointArn", "DesiredInferenceUnits" ],
                members: {
                    EndpointArn: {},
                    DesiredInferenceUnits: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {
                shape: "S3"
            },
            sensitive: true
        },
        S3: {
            type: "string",
            sensitive: true
        },
        S8: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    LanguageCode: {},
                    Score: {
                        type: "float"
                    }
                }
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Index: {
                        type: "integer"
                    },
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Score: {
                        type: "float"
                    },
                    Type: {},
                    Text: {},
                    BeginOffset: {
                        type: "integer"
                    },
                    EndOffset: {
                        type: "integer"
                    }
                }
            }
        },
        Sq: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Score: {
                        type: "float"
                    },
                    Text: {},
                    BeginOffset: {
                        type: "integer"
                    },
                    EndOffset: {
                        type: "integer"
                    }
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                Positive: {
                    type: "float"
                },
                Negative: {
                    type: "float"
                },
                Neutral: {
                    type: "float"
                },
                Mixed: {
                    type: "float"
                }
            }
        },
        S13: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TokenId: {
                        type: "integer"
                    },
                    Text: {},
                    BeginOffset: {
                        type: "integer"
                    },
                    EndOffset: {
                        type: "integer"
                    },
                    PartOfSpeech: {
                        type: "structure",
                        members: {
                            Tag: {},
                            Score: {
                                type: "float"
                            }
                        }
                    }
                }
            }
        },
        S1m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S1q: {
            type: "structure",
            members: {
                DataFormat: {},
                S3Uri: {},
                LabelDelimiter: {},
                AugmentedManifests: {
                    type: "list",
                    member: {
                        shape: "S1v"
                    }
                }
            }
        },
        S1v: {
            type: "structure",
            required: [ "S3Uri", "AttributeNames" ],
            members: {
                S3Uri: {},
                AttributeNames: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1y: {
            type: "structure",
            members: {
                S3Uri: {},
                KmsKeyId: {}
            }
        },
        S21: {
            type: "structure",
            required: [ "SecurityGroupIds", "Subnets" ],
            members: {
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                },
                Subnets: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2g: {
            type: "structure",
            required: [ "EntityTypes" ],
            members: {
                DataFormat: {},
                EntityTypes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Type" ],
                        members: {
                            Type: {}
                        }
                    }
                },
                Documents: {
                    type: "structure",
                    required: [ "S3Uri" ],
                    members: {
                        S3Uri: {}
                    }
                },
                Annotations: {
                    type: "structure",
                    required: [ "S3Uri" ],
                    members: {
                        S3Uri: {}
                    }
                },
                EntityList: {
                    type: "structure",
                    required: [ "S3Uri" ],
                    members: {
                        S3Uri: {}
                    }
                },
                AugmentedManifests: {
                    type: "list",
                    member: {
                        shape: "S1v"
                    }
                }
            }
        },
        S30: {
            type: "structure",
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                DocumentClassifierArn: {},
                InputDataConfig: {
                    shape: "S35"
                },
                OutputDataConfig: {
                    shape: "S37"
                },
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S21"
                }
            }
        },
        S35: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                S3Uri: {},
                InputFormat: {}
            }
        },
        S37: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                S3Uri: {},
                KmsKeyId: {}
            }
        },
        S3a: {
            type: "structure",
            members: {
                DocumentClassifierArn: {},
                LanguageCode: {},
                Status: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                TrainingStartTime: {
                    type: "timestamp"
                },
                TrainingEndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S1q"
                },
                OutputDataConfig: {
                    shape: "S1y"
                },
                ClassifierMetadata: {
                    type: "structure",
                    members: {
                        NumberOfLabels: {
                            type: "integer"
                        },
                        NumberOfTrainedDocuments: {
                            type: "integer"
                        },
                        NumberOfTestDocuments: {
                            type: "integer"
                        },
                        EvaluationMetrics: {
                            type: "structure",
                            members: {
                                Accuracy: {
                                    type: "double"
                                },
                                Precision: {
                                    type: "double"
                                },
                                Recall: {
                                    type: "double"
                                },
                                F1Score: {
                                    type: "double"
                                },
                                MicroPrecision: {
                                    type: "double"
                                },
                                MicroRecall: {
                                    type: "double"
                                },
                                MicroF1Score: {
                                    type: "double"
                                },
                                HammingLoss: {
                                    type: "double"
                                }
                            }
                        }
                    },
                    sensitive: true
                },
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S21"
                },
                Mode: {},
                ModelKmsKeyId: {}
            }
        },
        S3h: {
            type: "structure",
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S35"
                },
                OutputDataConfig: {
                    shape: "S37"
                },
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S21"
                }
            }
        },
        S3k: {
            type: "structure",
            members: {
                EndpointArn: {},
                Status: {},
                Message: {},
                ModelArn: {},
                DesiredInferenceUnits: {
                    type: "integer"
                },
                CurrentInferenceUnits: {
                    type: "integer"
                },
                CreationTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                DataAccessRoleArn: {}
            }
        },
        S3o: {
            type: "structure",
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                EntityRecognizerArn: {},
                InputDataConfig: {
                    shape: "S35"
                },
                OutputDataConfig: {
                    shape: "S37"
                },
                LanguageCode: {},
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S21"
                }
            }
        },
        S3r: {
            type: "structure",
            members: {
                EntityRecognizerArn: {},
                LanguageCode: {},
                Status: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                TrainingStartTime: {
                    type: "timestamp"
                },
                TrainingEndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S2g"
                },
                RecognizerMetadata: {
                    type: "structure",
                    members: {
                        NumberOfTrainedDocuments: {
                            type: "integer"
                        },
                        NumberOfTestDocuments: {
                            type: "integer"
                        },
                        EvaluationMetrics: {
                            type: "structure",
                            members: {
                                Precision: {
                                    type: "double"
                                },
                                Recall: {
                                    type: "double"
                                },
                                F1Score: {
                                    type: "double"
                                }
                            }
                        },
                        EntityTypes: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    Type: {},
                                    EvaluationMetrics: {
                                        type: "structure",
                                        members: {
                                            Precision: {
                                                type: "double"
                                            },
                                            Recall: {
                                                type: "double"
                                            },
                                            F1Score: {
                                                type: "double"
                                            }
                                        }
                                    },
                                    NumberOfTrainMentions: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    sensitive: true
                },
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S21"
                },
                ModelKmsKeyId: {}
            }
        },
        S3z: {
            type: "structure",
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S35"
                },
                OutputDataConfig: {
                    shape: "S37"
                },
                LanguageCode: {},
                DataAccessRoleArn: {},
                TargetEventTypes: {
                    shape: "S40"
                }
            }
        },
        S40: {
            type: "list",
            member: {}
        },
        S44: {
            type: "structure",
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S35"
                },
                OutputDataConfig: {
                    shape: "S37"
                },
                LanguageCode: {},
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S21"
                }
            }
        },
        S47: {
            type: "structure",
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S35"
                },
                OutputDataConfig: {
                    type: "structure",
                    required: [ "S3Uri" ],
                    members: {
                        S3Uri: {},
                        KmsKeyId: {}
                    }
                },
                RedactionConfig: {
                    shape: "S49"
                },
                LanguageCode: {},
                DataAccessRoleArn: {},
                Mode: {}
            }
        },
        S49: {
            type: "structure",
            members: {
                PiiEntityTypes: {
                    type: "list",
                    member: {}
                },
                MaskMode: {},
                MaskCharacter: {}
            }
        },
        S4g: {
            type: "structure",
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S35"
                },
                OutputDataConfig: {
                    shape: "S37"
                },
                LanguageCode: {},
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S21"
                }
            }
        },
        S4j: {
            type: "structure",
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S35"
                },
                OutputDataConfig: {
                    shape: "S37"
                },
                NumberOfTopics: {
                    type: "integer"
                },
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S21"
                }
            }
        }
    },
    paginators: {
        ListDocumentClassificationJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDocumentClassifiers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDominantLanguageDetectionJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListEntitiesDetectionJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListEntityRecognizers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListEventsDetectionJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListKeyPhrasesDetectionJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSentimentDetectionJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTopicsDetectionJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["iotjobsdataplane"] = {};

AWS.IoTJobsDataPlane = AWS.Service.defineService("iotjobsdataplane", [ "2017-09-29" ]);

AWS.apiLoader.services["iotjobsdataplane"]["2017-09-29"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-29",
        endpointPrefix: "data.jobs.iot",
        protocol: "rest-json",
        serviceFullName: "AWS IoT Jobs Data Plane",
        serviceId: "IoT Jobs Data Plane",
        signatureVersion: "v4",
        signingName: "iot-jobs-data",
        uid: "iot-jobs-data-2017-09-29"
    },
    operations: {
        DescribeJobExecution: {
            http: {
                method: "GET",
                requestUri: "/things/{thingName}/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "jobId", "thingName" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    includeJobDocument: {
                        location: "querystring",
                        locationName: "includeJobDocument",
                        type: "boolean"
                    },
                    executionNumber: {
                        location: "querystring",
                        locationName: "executionNumber",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    execution: {
                        shape: "S7"
                    }
                }
            }
        },
        GetPendingJobExecutions: {
            http: {
                method: "GET",
                requestUri: "/things/{thingName}/jobs"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    inProgressJobs: {
                        shape: "Sl"
                    },
                    queuedJobs: {
                        shape: "Sl"
                    }
                }
            }
        },
        StartNextPendingJobExecution: {
            http: {
                method: "PUT",
                requestUri: "/things/{thingName}/jobs/$next"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    statusDetails: {
                        shape: "Sa"
                    },
                    stepTimeoutInMinutes: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    execution: {
                        shape: "S7"
                    }
                }
            }
        },
        UpdateJobExecution: {
            http: {
                requestUri: "/things/{thingName}/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "jobId", "thingName", "status" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    status: {},
                    statusDetails: {
                        shape: "Sa"
                    },
                    stepTimeoutInMinutes: {
                        type: "long"
                    },
                    expectedVersion: {
                        type: "long"
                    },
                    includeJobExecutionState: {
                        type: "boolean"
                    },
                    includeJobDocument: {
                        type: "boolean"
                    },
                    executionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    executionState: {
                        type: "structure",
                        members: {
                            status: {},
                            statusDetails: {
                                shape: "Sa"
                            },
                            versionNumber: {
                                type: "long"
                            }
                        }
                    },
                    jobDocument: {}
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            members: {
                jobId: {},
                thingName: {},
                status: {},
                statusDetails: {
                    shape: "Sa"
                },
                queuedAt: {
                    type: "long"
                },
                startedAt: {
                    type: "long"
                },
                lastUpdatedAt: {
                    type: "long"
                },
                approximateSecondsBeforeTimedOut: {
                    type: "long"
                },
                versionNumber: {
                    type: "long"
                },
                executionNumber: {
                    type: "long"
                },
                jobDocument: {}
            }
        },
        Sa: {
            type: "map",
            key: {},
            value: {}
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    jobId: {},
                    queuedAt: {
                        type: "long"
                    },
                    startedAt: {
                        type: "long"
                    },
                    lastUpdatedAt: {
                        type: "long"
                    },
                    versionNumber: {
                        type: "long"
                    },
                    executionNumber: {
                        type: "long"
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["kinesisvideoarchivedmedia"] = {};

AWS.KinesisVideoArchivedMedia = AWS.Service.defineService("kinesisvideoarchivedmedia", [ "2017-09-30" ]);

AWS.apiLoader.services["kinesisvideoarchivedmedia"]["2017-09-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-30",
        endpointPrefix: "kinesisvideo",
        protocol: "rest-json",
        serviceAbbreviation: "Kinesis Video Archived Media",
        serviceFullName: "Amazon Kinesis Video Streams Archived Media",
        serviceId: "Kinesis Video Archived Media",
        signatureVersion: "v4",
        uid: "kinesis-video-archived-media-2017-09-30"
    },
    operations: {
        GetClip: {
            http: {
                requestUri: "/getClip"
            },
            input: {
                type: "structure",
                required: [ "ClipFragmentSelector" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    ClipFragmentSelector: {
                        type: "structure",
                        required: [ "FragmentSelectorType", "TimestampRange" ],
                        members: {
                            FragmentSelectorType: {},
                            TimestampRange: {
                                type: "structure",
                                required: [ "StartTimestamp", "EndTimestamp" ],
                                members: {
                                    StartTimestamp: {
                                        type: "timestamp"
                                    },
                                    EndTimestamp: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Payload: {
                        shape: "Sa"
                    }
                },
                payload: "Payload"
            }
        },
        GetDASHStreamingSessionURL: {
            http: {
                requestUri: "/getDASHStreamingSessionURL"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {},
                    PlaybackMode: {},
                    DisplayFragmentTimestamp: {},
                    DisplayFragmentNumber: {},
                    DASHFragmentSelector: {
                        type: "structure",
                        members: {
                            FragmentSelectorType: {},
                            TimestampRange: {
                                type: "structure",
                                members: {
                                    StartTimestamp: {
                                        type: "timestamp"
                                    },
                                    EndTimestamp: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    },
                    Expires: {
                        type: "integer"
                    },
                    MaxManifestFragmentResults: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DASHStreamingSessionURL: {}
                }
            }
        },
        GetHLSStreamingSessionURL: {
            http: {
                requestUri: "/getHLSStreamingSessionURL"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {},
                    PlaybackMode: {},
                    HLSFragmentSelector: {
                        type: "structure",
                        members: {
                            FragmentSelectorType: {},
                            TimestampRange: {
                                type: "structure",
                                members: {
                                    StartTimestamp: {
                                        type: "timestamp"
                                    },
                                    EndTimestamp: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    },
                    ContainerFormat: {},
                    DiscontinuityMode: {},
                    DisplayFragmentTimestamp: {},
                    Expires: {
                        type: "integer"
                    },
                    MaxMediaPlaylistFragmentResults: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HLSStreamingSessionURL: {}
                }
            }
        },
        GetMediaForFragmentList: {
            http: {
                requestUri: "/getMediaForFragmentList"
            },
            input: {
                type: "structure",
                required: [ "Fragments" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    Fragments: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Payload: {
                        shape: "Sa"
                    }
                },
                payload: "Payload"
            }
        },
        ListFragments: {
            http: {
                requestUri: "/listFragments"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {},
                    MaxResults: {
                        type: "long"
                    },
                    NextToken: {},
                    FragmentSelector: {
                        type: "structure",
                        required: [ "FragmentSelectorType", "TimestampRange" ],
                        members: {
                            FragmentSelectorType: {},
                            TimestampRange: {
                                type: "structure",
                                required: [ "StartTimestamp", "EndTimestamp" ],
                                members: {
                                    StartTimestamp: {
                                        type: "timestamp"
                                    },
                                    EndTimestamp: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Fragments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FragmentNumber: {},
                                FragmentSizeInBytes: {
                                    type: "long"
                                },
                                ProducerTimestamp: {
                                    type: "timestamp"
                                },
                                ServerTimestamp: {
                                    type: "timestamp"
                                },
                                FragmentLengthInMilliseconds: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "blob",
            streaming: true
        }
    },
    paginators: {
        ListFragments: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Fragments"
        }
    }
};

AWS.apiLoader.services["kinesisvideomedia"] = {};

AWS.KinesisVideoMedia = AWS.Service.defineService("kinesisvideomedia", [ "2017-09-30" ]);

AWS.apiLoader.services["kinesisvideomedia"]["2017-09-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-30",
        endpointPrefix: "kinesisvideo",
        protocol: "rest-json",
        serviceAbbreviation: "Kinesis Video Media",
        serviceFullName: "Amazon Kinesis Video Streams Media",
        serviceId: "Kinesis Video Media",
        signatureVersion: "v4",
        uid: "kinesis-video-media-2017-09-30"
    },
    operations: {
        GetMedia: {
            http: {
                requestUri: "/getMedia"
            },
            input: {
                type: "structure",
                required: [ "StartSelector" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    StartSelector: {
                        type: "structure",
                        required: [ "StartSelectorType" ],
                        members: {
                            StartSelectorType: {},
                            AfterFragmentNumber: {},
                            StartTimestamp: {
                                type: "timestamp"
                            },
                            ContinuationToken: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Payload: {
                        type: "blob",
                        streaming: true
                    }
                },
                payload: "Payload"
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["kinesisvideo"] = {};

AWS.KinesisVideo = AWS.Service.defineService("kinesisvideo", [ "2017-09-30" ]);

AWS.apiLoader.services["kinesisvideo"]["2017-09-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-30",
        endpointPrefix: "kinesisvideo",
        protocol: "rest-json",
        serviceAbbreviation: "Kinesis Video",
        serviceFullName: "Amazon Kinesis Video Streams",
        serviceId: "Kinesis Video",
        signatureVersion: "v4",
        uid: "kinesisvideo-2017-09-30"
    },
    operations: {
        CreateSignalingChannel: {
            http: {
                requestUri: "/createSignalingChannel"
            },
            input: {
                type: "structure",
                required: [ "ChannelName" ],
                members: {
                    ChannelName: {},
                    ChannelType: {},
                    SingleMasterConfiguration: {
                        shape: "S4"
                    },
                    Tags: {
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelARN: {}
                }
            }
        },
        CreateStream: {
            http: {
                requestUri: "/createStream"
            },
            input: {
                type: "structure",
                required: [ "StreamName" ],
                members: {
                    DeviceName: {},
                    StreamName: {},
                    MediaType: {},
                    KmsKeyId: {},
                    DataRetentionInHours: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamARN: {}
                }
            }
        },
        DeleteSignalingChannel: {
            http: {
                requestUri: "/deleteSignalingChannel"
            },
            input: {
                type: "structure",
                required: [ "ChannelARN" ],
                members: {
                    ChannelARN: {},
                    CurrentVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteStream: {
            http: {
                requestUri: "/deleteStream"
            },
            input: {
                type: "structure",
                required: [ "StreamARN" ],
                members: {
                    StreamARN: {},
                    CurrentVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeSignalingChannel: {
            http: {
                requestUri: "/describeSignalingChannel"
            },
            input: {
                type: "structure",
                members: {
                    ChannelName: {},
                    ChannelARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelInfo: {
                        shape: "Sr"
                    }
                }
            }
        },
        DescribeStream: {
            http: {
                requestUri: "/describeStream"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamInfo: {
                        shape: "Sw"
                    }
                }
            }
        },
        GetDataEndpoint: {
            http: {
                requestUri: "/getDataEndpoint"
            },
            input: {
                type: "structure",
                required: [ "APIName" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    APIName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataEndpoint: {}
                }
            }
        },
        GetSignalingChannelEndpoint: {
            http: {
                requestUri: "/getSignalingChannelEndpoint"
            },
            input: {
                type: "structure",
                required: [ "ChannelARN" ],
                members: {
                    ChannelARN: {},
                    SingleMasterChannelEndpointConfiguration: {
                        type: "structure",
                        members: {
                            Protocols: {
                                type: "list",
                                member: {}
                            },
                            Role: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceEndpointList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Protocol: {},
                                ResourceEndpoint: {}
                            }
                        }
                    }
                }
            }
        },
        ListSignalingChannels: {
            http: {
                requestUri: "/listSignalingChannels"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ChannelNameCondition: {
                        type: "structure",
                        members: {
                            ComparisonOperator: {},
                            ComparisonValue: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelInfoList: {
                        type: "list",
                        member: {
                            shape: "Sr"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStreams: {
            http: {
                requestUri: "/listStreams"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    StreamNameCondition: {
                        type: "structure",
                        members: {
                            ComparisonOperator: {},
                            ComparisonValue: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamInfoList: {
                        type: "list",
                        member: {
                            shape: "Sw"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/ListTagsForResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    NextToken: {},
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Tags: {
                        shape: "Si"
                    }
                }
            }
        },
        ListTagsForStream: {
            http: {
                requestUri: "/listTagsForStream"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    StreamARN: {},
                    StreamName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Tags: {
                        shape: "Si"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/TagResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagStream: {
            http: {
                requestUri: "/tagStream"
            },
            input: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    StreamARN: {},
                    StreamName: {},
                    Tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/UntagResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeyList" ],
                members: {
                    ResourceARN: {},
                    TagKeyList: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagStream: {
            http: {
                requestUri: "/untagStream"
            },
            input: {
                type: "structure",
                required: [ "TagKeyList" ],
                members: {
                    StreamARN: {},
                    StreamName: {},
                    TagKeyList: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDataRetention: {
            http: {
                requestUri: "/updateDataRetention"
            },
            input: {
                type: "structure",
                required: [ "CurrentVersion", "Operation", "DataRetentionChangeInHours" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    CurrentVersion: {},
                    Operation: {},
                    DataRetentionChangeInHours: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSignalingChannel: {
            http: {
                requestUri: "/updateSignalingChannel"
            },
            input: {
                type: "structure",
                required: [ "ChannelARN", "CurrentVersion" ],
                members: {
                    ChannelARN: {},
                    CurrentVersion: {},
                    SingleMasterConfiguration: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateStream: {
            http: {
                requestUri: "/updateStream"
            },
            input: {
                type: "structure",
                required: [ "CurrentVersion" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    CurrentVersion: {},
                    DeviceName: {},
                    MediaType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                MessageTtlSeconds: {
                    type: "integer"
                }
            }
        },
        S7: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {},
                Value: {}
            }
        },
        Si: {
            type: "map",
            key: {},
            value: {}
        },
        Sr: {
            type: "structure",
            members: {
                ChannelName: {},
                ChannelARN: {},
                ChannelType: {},
                ChannelStatus: {},
                CreationTime: {
                    type: "timestamp"
                },
                SingleMasterConfiguration: {
                    shape: "S4"
                },
                Version: {}
            }
        },
        Sw: {
            type: "structure",
            members: {
                DeviceName: {},
                StreamName: {},
                StreamARN: {},
                MediaType: {},
                KmsKeyId: {},
                Version: {},
                Status: {},
                CreationTime: {
                    type: "timestamp"
                },
                DataRetentionInHours: {
                    type: "integer"
                }
            }
        },
        S1v: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListSignalingChannels: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ChannelInfoList"
        },
        ListStreams: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "StreamInfoList"
        }
    }
};

AWS.apiLoader.services["sagemakerruntime"] = {};

AWS.SageMakerRuntime = AWS.Service.defineService("sagemakerruntime", [ "2017-05-13" ]);

AWS.apiLoader.services["sagemakerruntime"]["2017-05-13"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-05-13",
        endpointPrefix: "runtime.sagemaker",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon SageMaker Runtime",
        serviceId: "SageMaker Runtime",
        signatureVersion: "v4",
        signingName: "sagemaker",
        uid: "runtime.sagemaker-2017-05-13"
    },
    operations: {
        InvokeEndpoint: {
            http: {
                requestUri: "/endpoints/{EndpointName}/invocations"
            },
            input: {
                type: "structure",
                required: [ "EndpointName", "Body" ],
                members: {
                    EndpointName: {
                        location: "uri",
                        locationName: "EndpointName"
                    },
                    Body: {
                        shape: "S3"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Accept: {
                        location: "header",
                        locationName: "Accept"
                    },
                    CustomAttributes: {
                        shape: "S5",
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Custom-Attributes"
                    },
                    TargetModel: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Target-Model"
                    },
                    TargetVariant: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Target-Variant"
                    },
                    TargetContainerHostname: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Target-Container-Hostname"
                    },
                    InferenceId: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Inference-Id"
                    }
                },
                payload: "Body"
            },
            output: {
                type: "structure",
                required: [ "Body" ],
                members: {
                    Body: {
                        shape: "S3"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    InvokedProductionVariant: {
                        location: "header",
                        locationName: "x-Amzn-Invoked-Production-Variant"
                    },
                    CustomAttributes: {
                        shape: "S5",
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Custom-Attributes"
                    }
                },
                payload: "Body"
            }
        }
    },
    shapes: {
        S3: {
            type: "blob",
            sensitive: true
        },
        S5: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {}
};

AWS.apiLoader.services["sagemaker"] = {};

AWS.SageMaker = AWS.Service.defineService("sagemaker", [ "2017-07-24" ]);

AWS.apiLoader.services["sagemaker"]["2017-07-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-24",
        endpointPrefix: "api.sagemaker",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "SageMaker",
        serviceFullName: "Amazon SageMaker Service",
        serviceId: "SageMaker",
        signatureVersion: "v4",
        signingName: "sagemaker",
        targetPrefix: "SageMaker",
        uid: "sagemaker-2017-07-24"
    },
    operations: {
        AddAssociation: {
            input: {
                type: "structure",
                required: [ "SourceArn", "DestinationArn" ],
                members: {
                    SourceArn: {},
                    DestinationArn: {},
                    AssociationType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SourceArn: {},
                    DestinationArn: {}
                }
            }
        },
        AddTags: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        AssociateTrialComponent: {
            input: {
                type: "structure",
                required: [ "TrialComponentName", "TrialName" ],
                members: {
                    TrialComponentName: {},
                    TrialName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentArn: {},
                    TrialArn: {}
                }
            }
        },
        CreateAction: {
            input: {
                type: "structure",
                required: [ "ActionName", "Source", "ActionType" ],
                members: {
                    ActionName: {},
                    Source: {
                        shape: "Si"
                    },
                    ActionType: {},
                    Description: {},
                    Status: {},
                    Properties: {
                        shape: "Sn"
                    },
                    MetadataProperties: {
                        shape: "Sp"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ActionArn: {}
                }
            }
        },
        CreateAlgorithm: {
            input: {
                type: "structure",
                required: [ "AlgorithmName", "TrainingSpecification" ],
                members: {
                    AlgorithmName: {},
                    AlgorithmDescription: {},
                    TrainingSpecification: {
                        shape: "Sw"
                    },
                    InferenceSpecification: {
                        shape: "S1t"
                    },
                    ValidationSpecification: {
                        shape: "S25"
                    },
                    CertifyForMarketplace: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AlgorithmArn" ],
                members: {
                    AlgorithmArn: {}
                }
            }
        },
        CreateApp: {
            input: {
                type: "structure",
                required: [ "DomainId", "UserProfileName", "AppType", "AppName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {},
                    AppType: {},
                    AppName: {},
                    Tags: {
                        shape: "S7"
                    },
                    ResourceSpec: {
                        shape: "S3p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppArn: {}
                }
            }
        },
        CreateAppImageConfig: {
            input: {
                type: "structure",
                required: [ "AppImageConfigName" ],
                members: {
                    AppImageConfigName: {},
                    Tags: {
                        shape: "S7"
                    },
                    KernelGatewayImageConfig: {
                        shape: "S3x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppImageConfigArn: {}
                }
            }
        },
        CreateArtifact: {
            input: {
                type: "structure",
                required: [ "Source", "ArtifactType" ],
                members: {
                    ArtifactName: {},
                    Source: {
                        shape: "S49"
                    },
                    ArtifactType: {},
                    Properties: {
                        shape: "Sn"
                    },
                    MetadataProperties: {
                        shape: "Sp"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArtifactArn: {}
                }
            }
        },
        CreateAutoMLJob: {
            input: {
                type: "structure",
                required: [ "AutoMLJobName", "InputDataConfig", "OutputDataConfig", "RoleArn" ],
                members: {
                    AutoMLJobName: {},
                    InputDataConfig: {
                        shape: "S4h"
                    },
                    OutputDataConfig: {
                        shape: "S4n"
                    },
                    ProblemType: {},
                    AutoMLJobObjective: {
                        shape: "S4p"
                    },
                    AutoMLJobConfig: {
                        shape: "S4r"
                    },
                    RoleArn: {},
                    GenerateCandidateDefinitionsOnly: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AutoMLJobArn" ],
                members: {
                    AutoMLJobArn: {}
                }
            }
        },
        CreateCodeRepository: {
            input: {
                type: "structure",
                required: [ "CodeRepositoryName", "GitConfig" ],
                members: {
                    CodeRepositoryName: {},
                    GitConfig: {
                        shape: "S56"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CodeRepositoryArn" ],
                members: {
                    CodeRepositoryArn: {}
                }
            }
        },
        CreateCompilationJob: {
            input: {
                type: "structure",
                required: [ "CompilationJobName", "RoleArn", "InputConfig", "OutputConfig", "StoppingCondition" ],
                members: {
                    CompilationJobName: {},
                    RoleArn: {},
                    InputConfig: {
                        shape: "S5d"
                    },
                    OutputConfig: {
                        shape: "S5h"
                    },
                    StoppingCondition: {
                        shape: "S2y"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CompilationJobArn" ],
                members: {
                    CompilationJobArn: {}
                }
            }
        },
        CreateContext: {
            input: {
                type: "structure",
                required: [ "ContextName", "Source", "ContextType" ],
                members: {
                    ContextName: {},
                    Source: {
                        shape: "S5r"
                    },
                    ContextType: {},
                    Description: {},
                    Properties: {
                        shape: "Sn"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContextArn: {}
                }
            }
        },
        CreateDataQualityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName", "DataQualityAppSpecification", "DataQualityJobInput", "DataQualityJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionName: {},
                    DataQualityBaselineConfig: {
                        shape: "S5w"
                    },
                    DataQualityAppSpecification: {
                        shape: "S60"
                    },
                    DataQualityJobInput: {
                        shape: "S69"
                    },
                    DataQualityJobOutputConfig: {
                        shape: "S6i"
                    },
                    JobResources: {
                        shape: "S6o"
                    },
                    NetworkConfig: {
                        shape: "S6t"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S6u"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn" ],
                members: {
                    JobDefinitionArn: {}
                }
            }
        },
        CreateDeviceFleet: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName", "OutputConfig" ],
                members: {
                    DeviceFleetName: {},
                    RoleArn: {},
                    Description: {},
                    OutputConfig: {
                        shape: "S70"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        CreateDomain: {
            input: {
                type: "structure",
                required: [ "DomainName", "AuthMode", "DefaultUserSettings", "SubnetIds", "VpcId" ],
                members: {
                    DomainName: {},
                    AuthMode: {},
                    DefaultUserSettings: {
                        shape: "S74"
                    },
                    SubnetIds: {
                        shape: "S50"
                    },
                    VpcId: {},
                    Tags: {
                        shape: "S7"
                    },
                    AppNetworkAccessType: {},
                    HomeEfsFileSystemKmsKeyId: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated, use KmsKeyId instead."
                    },
                    KmsKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainArn: {},
                    Url: {}
                }
            }
        },
        CreateEdgePackagingJob: {
            input: {
                type: "structure",
                required: [ "EdgePackagingJobName", "CompilationJobName", "ModelName", "ModelVersion", "RoleArn", "OutputConfig" ],
                members: {
                    EdgePackagingJobName: {},
                    CompilationJobName: {},
                    ModelName: {},
                    ModelVersion: {},
                    RoleArn: {},
                    OutputConfig: {
                        shape: "S70"
                    },
                    ResourceKey: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        CreateEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName", "EndpointConfigName" ],
                members: {
                    EndpointName: {},
                    EndpointConfigName: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            }
        },
        CreateEndpointConfig: {
            input: {
                type: "structure",
                required: [ "EndpointConfigName", "ProductionVariants" ],
                members: {
                    EndpointConfigName: {},
                    ProductionVariants: {
                        shape: "S7r"
                    },
                    DataCaptureConfig: {
                        shape: "S80"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    KmsKeyId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointConfigArn" ],
                members: {
                    EndpointConfigArn: {}
                }
            }
        },
        CreateExperiment: {
            input: {
                type: "structure",
                required: [ "ExperimentName" ],
                members: {
                    ExperimentName: {},
                    DisplayName: {},
                    Description: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExperimentArn: {}
                }
            }
        },
        CreateFeatureGroup: {
            input: {
                type: "structure",
                required: [ "FeatureGroupName", "RecordIdentifierFeatureName", "EventTimeFeatureName", "FeatureDefinitions" ],
                members: {
                    FeatureGroupName: {},
                    RecordIdentifierFeatureName: {},
                    EventTimeFeatureName: {},
                    FeatureDefinitions: {
                        shape: "S8j"
                    },
                    OnlineStoreConfig: {
                        shape: "S8m"
                    },
                    OfflineStoreConfig: {
                        shape: "S8o"
                    },
                    RoleArn: {},
                    Description: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FeatureGroupArn" ],
                members: {
                    FeatureGroupArn: {}
                }
            }
        },
        CreateFlowDefinition: {
            input: {
                type: "structure",
                required: [ "FlowDefinitionName", "HumanLoopConfig", "OutputConfig", "RoleArn" ],
                members: {
                    FlowDefinitionName: {},
                    HumanLoopRequestSource: {
                        shape: "S8z"
                    },
                    HumanLoopActivationConfig: {
                        shape: "S91"
                    },
                    HumanLoopConfig: {
                        shape: "S94"
                    },
                    OutputConfig: {
                        shape: "S9j"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FlowDefinitionArn" ],
                members: {
                    FlowDefinitionArn: {}
                }
            }
        },
        CreateHumanTaskUi: {
            input: {
                type: "structure",
                required: [ "HumanTaskUiName", "UiTemplate" ],
                members: {
                    HumanTaskUiName: {},
                    UiTemplate: {
                        shape: "S9o"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HumanTaskUiArn" ],
                members: {
                    HumanTaskUiArn: {}
                }
            }
        },
        CreateHyperParameterTuningJob: {
            input: {
                type: "structure",
                required: [ "HyperParameterTuningJobName", "HyperParameterTuningJobConfig" ],
                members: {
                    HyperParameterTuningJobName: {},
                    HyperParameterTuningJobConfig: {
                        shape: "S9t"
                    },
                    TrainingJobDefinition: {
                        shape: "Saa"
                    },
                    TrainingJobDefinitions: {
                        shape: "Sag"
                    },
                    WarmStartConfig: {
                        shape: "Sah"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HyperParameterTuningJobArn" ],
                members: {
                    HyperParameterTuningJobArn: {}
                }
            }
        },
        CreateImage: {
            input: {
                type: "structure",
                required: [ "ImageName", "RoleArn" ],
                members: {
                    Description: {},
                    DisplayName: {},
                    ImageName: {},
                    RoleArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageArn: {}
                }
            }
        },
        CreateImageVersion: {
            input: {
                type: "structure",
                required: [ "BaseImage", "ClientToken", "ImageName" ],
                members: {
                    BaseImage: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ImageName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageVersionArn: {}
                }
            }
        },
        CreateLabelingJob: {
            input: {
                type: "structure",
                required: [ "LabelingJobName", "LabelAttributeName", "InputConfig", "OutputConfig", "RoleArn", "HumanTaskConfig" ],
                members: {
                    LabelingJobName: {},
                    LabelAttributeName: {},
                    InputConfig: {
                        shape: "Say"
                    },
                    OutputConfig: {
                        shape: "Sb6"
                    },
                    RoleArn: {},
                    LabelCategoryConfigS3Uri: {},
                    StoppingConditions: {
                        shape: "Sb7"
                    },
                    LabelingJobAlgorithmsConfig: {
                        shape: "Sba"
                    },
                    HumanTaskConfig: {
                        shape: "Sbe"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "LabelingJobArn" ],
                members: {
                    LabelingJobArn: {}
                }
            }
        },
        CreateModel: {
            input: {
                type: "structure",
                required: [ "ModelName", "ExecutionRoleArn" ],
                members: {
                    ModelName: {},
                    PrimaryContainer: {
                        shape: "Sbt"
                    },
                    Containers: {
                        shape: "Sc5"
                    },
                    InferenceExecutionConfig: {
                        shape: "Sc6"
                    },
                    ExecutionRoleArn: {},
                    Tags: {
                        shape: "S7"
                    },
                    VpcConfig: {
                        shape: "S4x"
                    },
                    EnableNetworkIsolation: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ModelArn" ],
                members: {
                    ModelArn: {}
                }
            }
        },
        CreateModelBiasJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName", "ModelBiasAppSpecification", "ModelBiasJobInput", "ModelBiasJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionName: {},
                    ModelBiasBaselineConfig: {
                        shape: "Sca"
                    },
                    ModelBiasAppSpecification: {
                        shape: "Scb"
                    },
                    ModelBiasJobInput: {
                        shape: "Scc"
                    },
                    ModelBiasJobOutputConfig: {
                        shape: "S6i"
                    },
                    JobResources: {
                        shape: "S6o"
                    },
                    NetworkConfig: {
                        shape: "S6t"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S6u"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn" ],
                members: {
                    JobDefinitionArn: {}
                }
            }
        },
        CreateModelExplainabilityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName", "ModelExplainabilityAppSpecification", "ModelExplainabilityJobInput", "ModelExplainabilityJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionName: {},
                    ModelExplainabilityBaselineConfig: {
                        shape: "Scg"
                    },
                    ModelExplainabilityAppSpecification: {
                        shape: "Sch"
                    },
                    ModelExplainabilityJobInput: {
                        shape: "Sci"
                    },
                    ModelExplainabilityJobOutputConfig: {
                        shape: "S6i"
                    },
                    JobResources: {
                        shape: "S6o"
                    },
                    NetworkConfig: {
                        shape: "S6t"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S6u"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn" ],
                members: {
                    JobDefinitionArn: {}
                }
            }
        },
        CreateModelPackage: {
            input: {
                type: "structure",
                members: {
                    ModelPackageName: {},
                    ModelPackageGroupName: {},
                    ModelPackageDescription: {},
                    InferenceSpecification: {
                        shape: "S1t"
                    },
                    ValidationSpecification: {
                        shape: "Scl"
                    },
                    SourceAlgorithmSpecification: {
                        shape: "Sco"
                    },
                    CertifyForMarketplace: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    ModelApprovalStatus: {},
                    MetadataProperties: {
                        shape: "Sp"
                    },
                    ModelMetrics: {
                        shape: "Scs"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageArn" ],
                members: {
                    ModelPackageArn: {}
                }
            }
        },
        CreateModelPackageGroup: {
            input: {
                type: "structure",
                required: [ "ModelPackageGroupName" ],
                members: {
                    ModelPackageGroupName: {},
                    ModelPackageGroupDescription: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageGroupArn" ],
                members: {
                    ModelPackageGroupArn: {}
                }
            }
        },
        CreateModelQualityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName", "ModelQualityAppSpecification", "ModelQualityJobInput", "ModelQualityJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionName: {},
                    ModelQualityBaselineConfig: {
                        shape: "Sd5"
                    },
                    ModelQualityAppSpecification: {
                        shape: "Sd6"
                    },
                    ModelQualityJobInput: {
                        shape: "Sd8"
                    },
                    ModelQualityJobOutputConfig: {
                        shape: "S6i"
                    },
                    JobResources: {
                        shape: "S6o"
                    },
                    NetworkConfig: {
                        shape: "S6t"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S6u"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn" ],
                members: {
                    JobDefinitionArn: {}
                }
            }
        },
        CreateMonitoringSchedule: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName", "MonitoringScheduleConfig" ],
                members: {
                    MonitoringScheduleName: {},
                    MonitoringScheduleConfig: {
                        shape: "Sdc"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MonitoringScheduleArn" ],
                members: {
                    MonitoringScheduleArn: {}
                }
            }
        },
        CreateNotebookInstance: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName", "InstanceType", "RoleArn" ],
                members: {
                    NotebookInstanceName: {},
                    InstanceType: {},
                    SubnetId: {},
                    SecurityGroupIds: {
                        shape: "S75"
                    },
                    RoleArn: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "S7"
                    },
                    LifecycleConfigName: {},
                    DirectInternetAccess: {},
                    VolumeSizeInGB: {
                        type: "integer"
                    },
                    AcceleratorTypes: {
                        shape: "Sdu"
                    },
                    DefaultCodeRepository: {},
                    AdditionalCodeRepositories: {
                        shape: "Sdx"
                    },
                    RootAccess: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookInstanceArn: {}
                }
            }
        },
        CreateNotebookInstanceLifecycleConfig: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceLifecycleConfigName" ],
                members: {
                    NotebookInstanceLifecycleConfigName: {},
                    OnCreate: {
                        shape: "Se2"
                    },
                    OnStart: {
                        shape: "Se2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookInstanceLifecycleConfigArn: {}
                }
            }
        },
        CreatePipeline: {
            input: {
                type: "structure",
                required: [ "PipelineName", "PipelineDefinition", "ClientRequestToken", "RoleArn" ],
                members: {
                    PipelineName: {},
                    PipelineDisplayName: {},
                    PipelineDefinition: {},
                    PipelineDescription: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineArn: {}
                }
            }
        },
        CreatePresignedDomainUrl: {
            input: {
                type: "structure",
                required: [ "DomainId", "UserProfileName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {},
                    SessionExpirationDurationInSeconds: {
                        type: "integer"
                    },
                    ExpiresInSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthorizedUrl: {}
                }
            }
        },
        CreatePresignedNotebookInstanceUrl: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName" ],
                members: {
                    NotebookInstanceName: {},
                    SessionExpirationDurationInSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthorizedUrl: {}
                }
            }
        },
        CreateProcessingJob: {
            input: {
                type: "structure",
                required: [ "ProcessingJobName", "ProcessingResources", "AppSpecification", "RoleArn" ],
                members: {
                    ProcessingInputs: {
                        shape: "Sen"
                    },
                    ProcessingOutputConfig: {
                        shape: "Sfa"
                    },
                    ProcessingJobName: {},
                    ProcessingResources: {
                        shape: "Sff"
                    },
                    StoppingCondition: {
                        shape: "Sfh"
                    },
                    AppSpecification: {
                        shape: "Sfj"
                    },
                    Environment: {
                        shape: "Sfl"
                    },
                    NetworkConfig: {
                        shape: "Sdk"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S7"
                    },
                    ExperimentConfig: {
                        shape: "Sfm"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProcessingJobArn" ],
                members: {
                    ProcessingJobArn: {}
                }
            }
        },
        CreateProject: {
            input: {
                type: "structure",
                required: [ "ProjectName", "ServiceCatalogProvisioningDetails" ],
                members: {
                    ProjectName: {},
                    ProjectDescription: {},
                    ServiceCatalogProvisioningDetails: {
                        shape: "Sfr"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProjectArn", "ProjectId" ],
                members: {
                    ProjectArn: {},
                    ProjectId: {}
                }
            }
        },
        CreateTrainingJob: {
            input: {
                type: "structure",
                required: [ "TrainingJobName", "AlgorithmSpecification", "RoleArn", "OutputDataConfig", "ResourceConfig", "StoppingCondition" ],
                members: {
                    TrainingJobName: {},
                    HyperParameters: {
                        shape: "S2a"
                    },
                    AlgorithmSpecification: {
                        shape: "Sg2"
                    },
                    RoleArn: {},
                    InputDataConfig: {
                        shape: "S2c"
                    },
                    OutputDataConfig: {
                        shape: "S2t"
                    },
                    ResourceConfig: {
                        shape: "S2v"
                    },
                    VpcConfig: {
                        shape: "S4x"
                    },
                    StoppingCondition: {
                        shape: "S2y"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    EnableNetworkIsolation: {
                        type: "boolean"
                    },
                    EnableInterContainerTrafficEncryption: {
                        type: "boolean"
                    },
                    EnableManagedSpotTraining: {
                        type: "boolean"
                    },
                    CheckpointConfig: {
                        shape: "Saf"
                    },
                    DebugHookConfig: {
                        shape: "Sg3"
                    },
                    DebugRuleConfigurations: {
                        shape: "Sgb"
                    },
                    TensorBoardOutputConfig: {
                        shape: "Sgg"
                    },
                    ExperimentConfig: {
                        shape: "Sfm"
                    },
                    ProfilerConfig: {
                        shape: "Sgh"
                    },
                    ProfilerRuleConfigurations: {
                        shape: "Sgk"
                    },
                    Environment: {
                        shape: "Sgm"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrainingJobArn" ],
                members: {
                    TrainingJobArn: {}
                }
            }
        },
        CreateTransformJob: {
            input: {
                type: "structure",
                required: [ "TransformJobName", "ModelName", "TransformInput", "TransformOutput", "TransformResources" ],
                members: {
                    TransformJobName: {},
                    ModelName: {},
                    MaxConcurrentTransforms: {
                        type: "integer"
                    },
                    ModelClientConfig: {
                        shape: "Sgt"
                    },
                    MaxPayloadInMB: {
                        type: "integer"
                    },
                    BatchStrategy: {},
                    Environment: {
                        shape: "S35"
                    },
                    TransformInput: {
                        shape: "S38"
                    },
                    TransformOutput: {
                        shape: "S3c"
                    },
                    TransformResources: {
                        shape: "S3f"
                    },
                    DataProcessing: {
                        shape: "Sgw"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    ExperimentConfig: {
                        shape: "Sfm"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TransformJobArn" ],
                members: {
                    TransformJobArn: {}
                }
            }
        },
        CreateTrial: {
            input: {
                type: "structure",
                required: [ "TrialName", "ExperimentName" ],
                members: {
                    TrialName: {},
                    DisplayName: {},
                    ExperimentName: {},
                    MetadataProperties: {
                        shape: "Sp"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialArn: {}
                }
            }
        },
        CreateTrialComponent: {
            input: {
                type: "structure",
                required: [ "TrialComponentName" ],
                members: {
                    TrialComponentName: {},
                    DisplayName: {},
                    Status: {
                        shape: "Sh4"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Parameters: {
                        shape: "Sh8"
                    },
                    InputArtifacts: {
                        shape: "Shc"
                    },
                    OutputArtifacts: {
                        shape: "Shc"
                    },
                    MetadataProperties: {
                        shape: "Sp"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentArn: {}
                }
            }
        },
        CreateUserProfile: {
            input: {
                type: "structure",
                required: [ "DomainId", "UserProfileName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {},
                    SingleSignOnUserIdentifier: {},
                    SingleSignOnUserValue: {},
                    Tags: {
                        shape: "S7"
                    },
                    UserSettings: {
                        shape: "S74"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserProfileArn: {}
                }
            }
        },
        CreateWorkforce: {
            input: {
                type: "structure",
                required: [ "WorkforceName" ],
                members: {
                    CognitoConfig: {
                        shape: "Shn"
                    },
                    OidcConfig: {
                        shape: "Shq"
                    },
                    SourceIpConfig: {
                        shape: "Sht"
                    },
                    WorkforceName: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "WorkforceArn" ],
                members: {
                    WorkforceArn: {}
                }
            }
        },
        CreateWorkteam: {
            input: {
                type: "structure",
                required: [ "WorkteamName", "MemberDefinitions", "Description" ],
                members: {
                    WorkteamName: {},
                    WorkforceName: {},
                    MemberDefinitions: {
                        shape: "Si1"
                    },
                    Description: {},
                    NotificationConfiguration: {
                        shape: "Si9"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkteamArn: {}
                }
            }
        },
        DeleteAction: {
            input: {
                type: "structure",
                required: [ "ActionName" ],
                members: {
                    ActionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ActionArn: {}
                }
            }
        },
        DeleteAlgorithm: {
            input: {
                type: "structure",
                required: [ "AlgorithmName" ],
                members: {
                    AlgorithmName: {}
                }
            }
        },
        DeleteApp: {
            input: {
                type: "structure",
                required: [ "DomainId", "UserProfileName", "AppType", "AppName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {},
                    AppType: {},
                    AppName: {}
                }
            }
        },
        DeleteAppImageConfig: {
            input: {
                type: "structure",
                required: [ "AppImageConfigName" ],
                members: {
                    AppImageConfigName: {}
                }
            }
        },
        DeleteArtifact: {
            input: {
                type: "structure",
                members: {
                    ArtifactArn: {},
                    Source: {
                        shape: "S49"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArtifactArn: {}
                }
            }
        },
        DeleteAssociation: {
            input: {
                type: "structure",
                required: [ "SourceArn", "DestinationArn" ],
                members: {
                    SourceArn: {},
                    DestinationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SourceArn: {},
                    DestinationArn: {}
                }
            }
        },
        DeleteCodeRepository: {
            input: {
                type: "structure",
                required: [ "CodeRepositoryName" ],
                members: {
                    CodeRepositoryName: {}
                }
            }
        },
        DeleteContext: {
            input: {
                type: "structure",
                required: [ "ContextName" ],
                members: {
                    ContextName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ContextArn: {}
                }
            }
        },
        DeleteDataQualityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            }
        },
        DeleteDeviceFleet: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName" ],
                members: {
                    DeviceFleetName: {}
                }
            }
        },
        DeleteDomain: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    RetentionPolicy: {
                        type: "structure",
                        members: {
                            HomeEfsFileSystem: {}
                        }
                    }
                }
            }
        },
        DeleteEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName" ],
                members: {
                    EndpointName: {}
                }
            }
        },
        DeleteEndpointConfig: {
            input: {
                type: "structure",
                required: [ "EndpointConfigName" ],
                members: {
                    EndpointConfigName: {}
                }
            }
        },
        DeleteExperiment: {
            input: {
                type: "structure",
                required: [ "ExperimentName" ],
                members: {
                    ExperimentName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExperimentArn: {}
                }
            }
        },
        DeleteFeatureGroup: {
            input: {
                type: "structure",
                required: [ "FeatureGroupName" ],
                members: {
                    FeatureGroupName: {}
                }
            }
        },
        DeleteFlowDefinition: {
            input: {
                type: "structure",
                required: [ "FlowDefinitionName" ],
                members: {
                    FlowDefinitionName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteHumanTaskUi: {
            input: {
                type: "structure",
                required: [ "HumanTaskUiName" ],
                members: {
                    HumanTaskUiName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteImage: {
            input: {
                type: "structure",
                required: [ "ImageName" ],
                members: {
                    ImageName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteImageVersion: {
            input: {
                type: "structure",
                required: [ "ImageName", "Version" ],
                members: {
                    ImageName: {},
                    Version: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            }
        },
        DeleteModelBiasJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            }
        },
        DeleteModelExplainabilityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            }
        },
        DeleteModelPackage: {
            input: {
                type: "structure",
                required: [ "ModelPackageName" ],
                members: {
                    ModelPackageName: {}
                }
            }
        },
        DeleteModelPackageGroup: {
            input: {
                type: "structure",
                required: [ "ModelPackageGroupName" ],
                members: {
                    ModelPackageGroupName: {}
                }
            }
        },
        DeleteModelPackageGroupPolicy: {
            input: {
                type: "structure",
                required: [ "ModelPackageGroupName" ],
                members: {
                    ModelPackageGroupName: {}
                }
            }
        },
        DeleteModelQualityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            }
        },
        DeleteMonitoringSchedule: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName" ],
                members: {
                    MonitoringScheduleName: {}
                }
            }
        },
        DeleteNotebookInstance: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName" ],
                members: {
                    NotebookInstanceName: {}
                }
            }
        },
        DeleteNotebookInstanceLifecycleConfig: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceLifecycleConfigName" ],
                members: {
                    NotebookInstanceLifecycleConfigName: {}
                }
            }
        },
        DeletePipeline: {
            input: {
                type: "structure",
                required: [ "PipelineName", "ClientRequestToken" ],
                members: {
                    PipelineName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineArn: {}
                }
            }
        },
        DeleteProject: {
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {}
                }
            }
        },
        DeleteTags: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTrial: {
            input: {
                type: "structure",
                required: [ "TrialName" ],
                members: {
                    TrialName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialArn: {}
                }
            }
        },
        DeleteTrialComponent: {
            input: {
                type: "structure",
                required: [ "TrialComponentName" ],
                members: {
                    TrialComponentName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentArn: {}
                }
            }
        },
        DeleteUserProfile: {
            input: {
                type: "structure",
                required: [ "DomainId", "UserProfileName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {}
                }
            }
        },
        DeleteWorkforce: {
            input: {
                type: "structure",
                required: [ "WorkforceName" ],
                members: {
                    WorkforceName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorkteam: {
            input: {
                type: "structure",
                required: [ "WorkteamName" ],
                members: {
                    WorkteamName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Success" ],
                members: {
                    Success: {
                        type: "boolean"
                    }
                }
            }
        },
        DeregisterDevices: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName", "DeviceNames" ],
                members: {
                    DeviceFleetName: {},
                    DeviceNames: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        DescribeAction: {
            input: {
                type: "structure",
                required: [ "ActionName" ],
                members: {
                    ActionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ActionName: {},
                    ActionArn: {},
                    Source: {
                        shape: "Si"
                    },
                    ActionType: {},
                    Description: {},
                    Status: {},
                    Properties: {
                        shape: "Sn"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Sk1"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Sk1"
                    },
                    MetadataProperties: {
                        shape: "Sp"
                    }
                }
            }
        },
        DescribeAlgorithm: {
            input: {
                type: "structure",
                required: [ "AlgorithmName" ],
                members: {
                    AlgorithmName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AlgorithmName", "AlgorithmArn", "CreationTime", "TrainingSpecification", "AlgorithmStatus", "AlgorithmStatusDetails" ],
                members: {
                    AlgorithmName: {},
                    AlgorithmArn: {},
                    AlgorithmDescription: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    TrainingSpecification: {
                        shape: "Sw"
                    },
                    InferenceSpecification: {
                        shape: "S1t"
                    },
                    ValidationSpecification: {
                        shape: "S25"
                    },
                    AlgorithmStatus: {},
                    AlgorithmStatusDetails: {
                        type: "structure",
                        members: {
                            ValidationStatuses: {
                                shape: "Sk7"
                            },
                            ImageScanStatuses: {
                                shape: "Sk7"
                            }
                        }
                    },
                    ProductId: {},
                    CertifyForMarketplace: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeApp: {
            input: {
                type: "structure",
                required: [ "DomainId", "UserProfileName", "AppType", "AppName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {},
                    AppType: {},
                    AppName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppArn: {},
                    AppType: {},
                    AppName: {},
                    DomainId: {},
                    UserProfileName: {},
                    Status: {},
                    LastHealthCheckTimestamp: {
                        type: "timestamp"
                    },
                    LastUserActivityTimestamp: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    ResourceSpec: {
                        shape: "S3p"
                    }
                }
            }
        },
        DescribeAppImageConfig: {
            input: {
                type: "structure",
                required: [ "AppImageConfigName" ],
                members: {
                    AppImageConfigName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppImageConfigArn: {},
                    AppImageConfigName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    KernelGatewayImageConfig: {
                        shape: "S3x"
                    }
                }
            }
        },
        DescribeArtifact: {
            input: {
                type: "structure",
                required: [ "ArtifactArn" ],
                members: {
                    ArtifactArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ArtifactName: {},
                    ArtifactArn: {},
                    Source: {
                        shape: "S49"
                    },
                    ArtifactType: {},
                    Properties: {
                        shape: "Sn"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Sk1"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Sk1"
                    },
                    MetadataProperties: {
                        shape: "Sp"
                    }
                }
            }
        },
        DescribeAutoMLJob: {
            input: {
                type: "structure",
                required: [ "AutoMLJobName" ],
                members: {
                    AutoMLJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AutoMLJobName", "AutoMLJobArn", "InputDataConfig", "OutputDataConfig", "RoleArn", "CreationTime", "LastModifiedTime", "AutoMLJobStatus", "AutoMLJobSecondaryStatus" ],
                members: {
                    AutoMLJobName: {},
                    AutoMLJobArn: {},
                    InputDataConfig: {
                        shape: "S4h"
                    },
                    OutputDataConfig: {
                        shape: "S4n"
                    },
                    RoleArn: {},
                    AutoMLJobObjective: {
                        shape: "S4p"
                    },
                    ProblemType: {},
                    AutoMLJobConfig: {
                        shape: "S4r"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    PartialFailureReasons: {
                        shape: "Skl"
                    },
                    BestCandidate: {
                        shape: "Skn"
                    },
                    AutoMLJobStatus: {},
                    AutoMLJobSecondaryStatus: {},
                    GenerateCandidateDefinitionsOnly: {
                        type: "boolean"
                    },
                    AutoMLJobArtifacts: {
                        type: "structure",
                        members: {
                            CandidateDefinitionNotebookLocation: {},
                            DataExplorationNotebookLocation: {}
                        }
                    },
                    ResolvedAttributes: {
                        type: "structure",
                        members: {
                            AutoMLJobObjective: {
                                shape: "S4p"
                            },
                            ProblemType: {},
                            CompletionCriteria: {
                                shape: "S4s"
                            }
                        }
                    }
                }
            }
        },
        DescribeCodeRepository: {
            input: {
                type: "structure",
                required: [ "CodeRepositoryName" ],
                members: {
                    CodeRepositoryName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CodeRepositoryName", "CodeRepositoryArn", "CreationTime", "LastModifiedTime" ],
                members: {
                    CodeRepositoryName: {},
                    CodeRepositoryArn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    GitConfig: {
                        shape: "S56"
                    }
                }
            }
        },
        DescribeCompilationJob: {
            input: {
                type: "structure",
                required: [ "CompilationJobName" ],
                members: {
                    CompilationJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CompilationJobName", "CompilationJobArn", "CompilationJobStatus", "StoppingCondition", "CreationTime", "LastModifiedTime", "FailureReason", "ModelArtifacts", "RoleArn", "InputConfig", "OutputConfig" ],
                members: {
                    CompilationJobName: {},
                    CompilationJobArn: {},
                    CompilationJobStatus: {},
                    CompilationStartTime: {
                        type: "timestamp"
                    },
                    CompilationEndTime: {
                        type: "timestamp"
                    },
                    StoppingCondition: {
                        shape: "S2y"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    ModelArtifacts: {
                        shape: "Slg"
                    },
                    ModelDigests: {
                        type: "structure",
                        members: {
                            ArtifactDigest: {}
                        }
                    },
                    RoleArn: {},
                    InputConfig: {
                        shape: "S5d"
                    },
                    OutputConfig: {
                        shape: "S5h"
                    }
                }
            }
        },
        DescribeContext: {
            input: {
                type: "structure",
                required: [ "ContextName" ],
                members: {
                    ContextName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ContextName: {},
                    ContextArn: {},
                    Source: {
                        shape: "S5r"
                    },
                    ContextType: {},
                    Description: {},
                    Properties: {
                        shape: "Sn"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Sk1"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Sk1"
                    }
                }
            }
        },
        DescribeDataQualityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn", "JobDefinitionName", "CreationTime", "DataQualityAppSpecification", "DataQualityJobInput", "DataQualityJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionArn: {},
                    JobDefinitionName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    DataQualityBaselineConfig: {
                        shape: "S5w"
                    },
                    DataQualityAppSpecification: {
                        shape: "S60"
                    },
                    DataQualityJobInput: {
                        shape: "S69"
                    },
                    DataQualityJobOutputConfig: {
                        shape: "S6i"
                    },
                    JobResources: {
                        shape: "S6o"
                    },
                    NetworkConfig: {
                        shape: "S6t"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S6u"
                    }
                }
            }
        },
        DescribeDevice: {
            input: {
                type: "structure",
                required: [ "DeviceName", "DeviceFleetName" ],
                members: {
                    NextToken: {},
                    DeviceName: {},
                    DeviceFleetName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DeviceName", "DeviceFleetName", "RegistrationTime" ],
                members: {
                    DeviceArn: {},
                    DeviceName: {},
                    Description: {},
                    DeviceFleetName: {},
                    IotThingName: {},
                    RegistrationTime: {
                        type: "timestamp"
                    },
                    LatestHeartbeat: {
                        type: "timestamp"
                    },
                    Models: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelName", "ModelVersion" ],
                            members: {
                                ModelName: {},
                                ModelVersion: {},
                                LatestSampleTime: {
                                    type: "timestamp"
                                },
                                LatestInference: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    MaxModels: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeDeviceFleet: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName" ],
                members: {
                    DeviceFleetName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DeviceFleetName", "DeviceFleetArn", "OutputConfig", "CreationTime", "LastModifiedTime" ],
                members: {
                    DeviceFleetName: {},
                    DeviceFleetArn: {},
                    OutputConfig: {
                        shape: "S70"
                    },
                    Description: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    RoleArn: {},
                    IotRoleAlias: {}
                }
            }
        },
        DescribeDomain: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainArn: {},
                    DomainId: {},
                    DomainName: {},
                    HomeEfsFileSystemId: {},
                    SingleSignOnManagedApplicationInstanceId: {},
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    AuthMode: {},
                    DefaultUserSettings: {
                        shape: "S74"
                    },
                    AppNetworkAccessType: {},
                    HomeEfsFileSystemKmsKeyId: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated, use KmsKeyId instead."
                    },
                    SubnetIds: {
                        shape: "S50"
                    },
                    Url: {},
                    VpcId: {},
                    KmsKeyId: {}
                }
            }
        },
        DescribeEdgePackagingJob: {
            input: {
                type: "structure",
                required: [ "EdgePackagingJobName" ],
                members: {
                    EdgePackagingJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "EdgePackagingJobArn", "EdgePackagingJobName", "EdgePackagingJobStatus" ],
                members: {
                    EdgePackagingJobArn: {},
                    EdgePackagingJobName: {},
                    CompilationJobName: {},
                    ModelName: {},
                    ModelVersion: {},
                    RoleArn: {},
                    OutputConfig: {
                        shape: "S70"
                    },
                    ResourceKey: {},
                    EdgePackagingJobStatus: {},
                    EdgePackagingJobStatusMessage: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    ModelArtifact: {},
                    ModelSignature: {}
                }
            }
        },
        DescribeEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName" ],
                members: {
                    EndpointName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointName", "EndpointArn", "EndpointConfigName", "EndpointStatus", "CreationTime", "LastModifiedTime" ],
                members: {
                    EndpointName: {},
                    EndpointArn: {},
                    EndpointConfigName: {},
                    ProductionVariants: {
                        shape: "Sma"
                    },
                    DataCaptureConfig: {
                        shape: "Sme"
                    },
                    EndpointStatus: {},
                    FailureReason: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastDeploymentConfig: {
                        shape: "Smh"
                    }
                }
            }
        },
        DescribeEndpointConfig: {
            input: {
                type: "structure",
                required: [ "EndpointConfigName" ],
                members: {
                    EndpointConfigName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointConfigName", "EndpointConfigArn", "ProductionVariants", "CreationTime" ],
                members: {
                    EndpointConfigName: {},
                    EndpointConfigArn: {},
                    ProductionVariants: {
                        shape: "S7r"
                    },
                    DataCaptureConfig: {
                        shape: "S80"
                    },
                    KmsKeyId: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeExperiment: {
            input: {
                type: "structure",
                required: [ "ExperimentName" ],
                members: {
                    ExperimentName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExperimentName: {},
                    ExperimentArn: {},
                    DisplayName: {},
                    Source: {
                        shape: "Smz"
                    },
                    Description: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Sk1"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Sk1"
                    }
                }
            }
        },
        DescribeFeatureGroup: {
            input: {
                type: "structure",
                required: [ "FeatureGroupName" ],
                members: {
                    FeatureGroupName: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "FeatureGroupArn", "FeatureGroupName", "RecordIdentifierFeatureName", "EventTimeFeatureName", "FeatureDefinitions", "CreationTime", "NextToken" ],
                members: {
                    FeatureGroupArn: {},
                    FeatureGroupName: {},
                    RecordIdentifierFeatureName: {},
                    EventTimeFeatureName: {},
                    FeatureDefinitions: {
                        shape: "S8j"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    OnlineStoreConfig: {
                        shape: "S8m"
                    },
                    OfflineStoreConfig: {
                        shape: "S8o"
                    },
                    RoleArn: {},
                    FeatureGroupStatus: {},
                    OfflineStoreStatus: {
                        shape: "Sn5"
                    },
                    FailureReason: {},
                    Description: {},
                    NextToken: {}
                }
            }
        },
        DescribeFlowDefinition: {
            input: {
                type: "structure",
                required: [ "FlowDefinitionName" ],
                members: {
                    FlowDefinitionName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "FlowDefinitionArn", "FlowDefinitionName", "FlowDefinitionStatus", "CreationTime", "HumanLoopConfig", "OutputConfig", "RoleArn" ],
                members: {
                    FlowDefinitionArn: {},
                    FlowDefinitionName: {},
                    FlowDefinitionStatus: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    HumanLoopRequestSource: {
                        shape: "S8z"
                    },
                    HumanLoopActivationConfig: {
                        shape: "S91"
                    },
                    HumanLoopConfig: {
                        shape: "S94"
                    },
                    OutputConfig: {
                        shape: "S9j"
                    },
                    RoleArn: {},
                    FailureReason: {}
                }
            }
        },
        DescribeHumanTaskUi: {
            input: {
                type: "structure",
                required: [ "HumanTaskUiName" ],
                members: {
                    HumanTaskUiName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HumanTaskUiArn", "HumanTaskUiName", "CreationTime", "UiTemplate" ],
                members: {
                    HumanTaskUiArn: {},
                    HumanTaskUiName: {},
                    HumanTaskUiStatus: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    UiTemplate: {
                        type: "structure",
                        members: {
                            Url: {},
                            ContentSha256: {}
                        }
                    }
                }
            }
        },
        DescribeHyperParameterTuningJob: {
            input: {
                type: "structure",
                required: [ "HyperParameterTuningJobName" ],
                members: {
                    HyperParameterTuningJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HyperParameterTuningJobName", "HyperParameterTuningJobArn", "HyperParameterTuningJobConfig", "HyperParameterTuningJobStatus", "CreationTime", "TrainingJobStatusCounters", "ObjectiveStatusCounters" ],
                members: {
                    HyperParameterTuningJobName: {},
                    HyperParameterTuningJobArn: {},
                    HyperParameterTuningJobConfig: {
                        shape: "S9t"
                    },
                    TrainingJobDefinition: {
                        shape: "Saa"
                    },
                    TrainingJobDefinitions: {
                        shape: "Sag"
                    },
                    HyperParameterTuningJobStatus: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    HyperParameterTuningEndTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    TrainingJobStatusCounters: {
                        shape: "Snk"
                    },
                    ObjectiveStatusCounters: {
                        shape: "Snm"
                    },
                    BestTrainingJob: {
                        shape: "Sno"
                    },
                    OverallBestTrainingJob: {
                        shape: "Sno"
                    },
                    WarmStartConfig: {
                        shape: "Sah"
                    },
                    FailureReason: {}
                }
            }
        },
        DescribeImage: {
            input: {
                type: "structure",
                required: [ "ImageName" ],
                members: {
                    ImageName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CreationTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    DisplayName: {},
                    FailureReason: {},
                    ImageArn: {},
                    ImageName: {},
                    ImageStatus: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    RoleArn: {}
                }
            }
        },
        DescribeImageVersion: {
            input: {
                type: "structure",
                required: [ "ImageName" ],
                members: {
                    ImageName: {},
                    Version: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BaseImage: {},
                    ContainerImage: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    ImageArn: {},
                    ImageVersionArn: {},
                    ImageVersionStatus: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    Version: {
                        type: "integer"
                    }
                }
            }
        },
        DescribeLabelingJob: {
            input: {
                type: "structure",
                required: [ "LabelingJobName" ],
                members: {
                    LabelingJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "LabelingJobStatus", "LabelCounters", "CreationTime", "LastModifiedTime", "JobReferenceCode", "LabelingJobName", "LabelingJobArn", "InputConfig", "OutputConfig", "RoleArn", "HumanTaskConfig" ],
                members: {
                    LabelingJobStatus: {},
                    LabelCounters: {
                        shape: "So1"
                    },
                    FailureReason: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    JobReferenceCode: {},
                    LabelingJobName: {},
                    LabelingJobArn: {},
                    LabelAttributeName: {},
                    InputConfig: {
                        shape: "Say"
                    },
                    OutputConfig: {
                        shape: "Sb6"
                    },
                    RoleArn: {},
                    LabelCategoryConfigS3Uri: {},
                    StoppingConditions: {
                        shape: "Sb7"
                    },
                    LabelingJobAlgorithmsConfig: {
                        shape: "Sba"
                    },
                    HumanTaskConfig: {
                        shape: "Sbe"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    LabelingJobOutput: {
                        shape: "So4"
                    }
                }
            }
        },
        DescribeModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelName", "ExecutionRoleArn", "CreationTime", "ModelArn" ],
                members: {
                    ModelName: {},
                    PrimaryContainer: {
                        shape: "Sbt"
                    },
                    Containers: {
                        shape: "Sc5"
                    },
                    InferenceExecutionConfig: {
                        shape: "Sc6"
                    },
                    ExecutionRoleArn: {},
                    VpcConfig: {
                        shape: "S4x"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    ModelArn: {},
                    EnableNetworkIsolation: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeModelBiasJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn", "JobDefinitionName", "CreationTime", "ModelBiasAppSpecification", "ModelBiasJobInput", "ModelBiasJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionArn: {},
                    JobDefinitionName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    ModelBiasBaselineConfig: {
                        shape: "Sca"
                    },
                    ModelBiasAppSpecification: {
                        shape: "Scb"
                    },
                    ModelBiasJobInput: {
                        shape: "Scc"
                    },
                    ModelBiasJobOutputConfig: {
                        shape: "S6i"
                    },
                    JobResources: {
                        shape: "S6o"
                    },
                    NetworkConfig: {
                        shape: "S6t"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S6u"
                    }
                }
            }
        },
        DescribeModelExplainabilityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn", "JobDefinitionName", "CreationTime", "ModelExplainabilityAppSpecification", "ModelExplainabilityJobInput", "ModelExplainabilityJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionArn: {},
                    JobDefinitionName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    ModelExplainabilityBaselineConfig: {
                        shape: "Scg"
                    },
                    ModelExplainabilityAppSpecification: {
                        shape: "Sch"
                    },
                    ModelExplainabilityJobInput: {
                        shape: "Sci"
                    },
                    ModelExplainabilityJobOutputConfig: {
                        shape: "S6i"
                    },
                    JobResources: {
                        shape: "S6o"
                    },
                    NetworkConfig: {
                        shape: "S6t"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S6u"
                    }
                }
            }
        },
        DescribeModelPackage: {
            input: {
                type: "structure",
                required: [ "ModelPackageName" ],
                members: {
                    ModelPackageName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageName", "ModelPackageArn", "CreationTime", "ModelPackageStatus", "ModelPackageStatusDetails" ],
                members: {
                    ModelPackageName: {},
                    ModelPackageGroupName: {},
                    ModelPackageVersion: {
                        type: "integer"
                    },
                    ModelPackageArn: {},
                    ModelPackageDescription: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    InferenceSpecification: {
                        shape: "S1t"
                    },
                    SourceAlgorithmSpecification: {
                        shape: "Sco"
                    },
                    ValidationSpecification: {
                        shape: "Scl"
                    },
                    ModelPackageStatus: {},
                    ModelPackageStatusDetails: {
                        shape: "Sof"
                    },
                    CertifyForMarketplace: {
                        type: "boolean"
                    },
                    ModelApprovalStatus: {},
                    CreatedBy: {
                        shape: "Sk1"
                    },
                    MetadataProperties: {
                        shape: "Sp"
                    },
                    ModelMetrics: {
                        shape: "Scs"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Sk1"
                    },
                    ApprovalDescription: {}
                }
            }
        },
        DescribeModelPackageGroup: {
            input: {
                type: "structure",
                required: [ "ModelPackageGroupName" ],
                members: {
                    ModelPackageGroupName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageGroupName", "ModelPackageGroupArn", "CreationTime", "CreatedBy", "ModelPackageGroupStatus" ],
                members: {
                    ModelPackageGroupName: {},
                    ModelPackageGroupArn: {},
                    ModelPackageGroupDescription: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Sk1"
                    },
                    ModelPackageGroupStatus: {}
                }
            }
        },
        DescribeModelQualityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn", "JobDefinitionName", "CreationTime", "ModelQualityAppSpecification", "ModelQualityJobInput", "ModelQualityJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionArn: {},
                    JobDefinitionName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    ModelQualityBaselineConfig: {
                        shape: "Sd5"
                    },
                    ModelQualityAppSpecification: {
                        shape: "Sd6"
                    },
                    ModelQualityJobInput: {
                        shape: "Sd8"
                    },
                    ModelQualityJobOutputConfig: {
                        shape: "S6i"
                    },
                    JobResources: {
                        shape: "S6o"
                    },
                    NetworkConfig: {
                        shape: "S6t"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S6u"
                    }
                }
            }
        },
        DescribeMonitoringSchedule: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName" ],
                members: {
                    MonitoringScheduleName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "MonitoringScheduleArn", "MonitoringScheduleName", "MonitoringScheduleStatus", "CreationTime", "LastModifiedTime", "MonitoringScheduleConfig" ],
                members: {
                    MonitoringScheduleArn: {},
                    MonitoringScheduleName: {},
                    MonitoringScheduleStatus: {},
                    MonitoringType: {},
                    FailureReason: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    MonitoringScheduleConfig: {
                        shape: "Sdc"
                    },
                    EndpointName: {},
                    LastMonitoringExecutionSummary: {
                        shape: "Sos"
                    }
                }
            }
        },
        DescribeNotebookInstance: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName" ],
                members: {
                    NotebookInstanceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookInstanceArn: {},
                    NotebookInstanceName: {},
                    NotebookInstanceStatus: {},
                    FailureReason: {},
                    Url: {},
                    InstanceType: {},
                    SubnetId: {},
                    SecurityGroups: {
                        shape: "S75"
                    },
                    RoleArn: {},
                    KmsKeyId: {},
                    NetworkInterfaceId: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    NotebookInstanceLifecycleConfigName: {},
                    DirectInternetAccess: {},
                    VolumeSizeInGB: {
                        type: "integer"
                    },
                    AcceleratorTypes: {
                        shape: "Sdu"
                    },
                    DefaultCodeRepository: {},
                    AdditionalCodeRepositories: {
                        shape: "Sdx"
                    },
                    RootAccess: {}
                }
            }
        },
        DescribeNotebookInstanceLifecycleConfig: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceLifecycleConfigName" ],
                members: {
                    NotebookInstanceLifecycleConfigName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookInstanceLifecycleConfigArn: {},
                    NotebookInstanceLifecycleConfigName: {},
                    OnCreate: {
                        shape: "Se2"
                    },
                    OnStart: {
                        shape: "Se2"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribePipeline: {
            input: {
                type: "structure",
                required: [ "PipelineName" ],
                members: {
                    PipelineName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineArn: {},
                    PipelineName: {},
                    PipelineDisplayName: {},
                    PipelineDefinition: {},
                    PipelineDescription: {},
                    RoleArn: {},
                    PipelineStatus: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastRunTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Sk1"
                    },
                    LastModifiedBy: {
                        shape: "Sk1"
                    }
                }
            }
        },
        DescribePipelineDefinitionForExecution: {
            input: {
                type: "structure",
                required: [ "PipelineExecutionArn" ],
                members: {
                    PipelineExecutionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineDefinition: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribePipelineExecution: {
            input: {
                type: "structure",
                required: [ "PipelineExecutionArn" ],
                members: {
                    PipelineExecutionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineArn: {},
                    PipelineExecutionArn: {},
                    PipelineExecutionDisplayName: {},
                    PipelineExecutionStatus: {},
                    PipelineExecutionDescription: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Sk1"
                    },
                    LastModifiedBy: {
                        shape: "Sk1"
                    }
                }
            }
        },
        DescribeProcessingJob: {
            input: {
                type: "structure",
                required: [ "ProcessingJobName" ],
                members: {
                    ProcessingJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ProcessingJobName", "ProcessingResources", "AppSpecification", "ProcessingJobArn", "ProcessingJobStatus", "CreationTime" ],
                members: {
                    ProcessingInputs: {
                        shape: "Sen"
                    },
                    ProcessingOutputConfig: {
                        shape: "Sfa"
                    },
                    ProcessingJobName: {},
                    ProcessingResources: {
                        shape: "Sff"
                    },
                    StoppingCondition: {
                        shape: "Sfh"
                    },
                    AppSpecification: {
                        shape: "Sfj"
                    },
                    Environment: {
                        shape: "Sfl"
                    },
                    NetworkConfig: {
                        shape: "Sdk"
                    },
                    RoleArn: {},
                    ExperimentConfig: {
                        shape: "Sfm"
                    },
                    ProcessingJobArn: {},
                    ProcessingJobStatus: {},
                    ExitMessage: {},
                    FailureReason: {},
                    ProcessingEndTime: {
                        type: "timestamp"
                    },
                    ProcessingStartTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    MonitoringScheduleArn: {},
                    AutoMLJobArn: {},
                    TrainingJobArn: {}
                }
            }
        },
        DescribeProject: {
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ProjectArn", "ProjectName", "ProjectId", "ServiceCatalogProvisioningDetails", "ProjectStatus", "CreationTime" ],
                members: {
                    ProjectArn: {},
                    ProjectName: {},
                    ProjectId: {},
                    ProjectDescription: {},
                    ServiceCatalogProvisioningDetails: {
                        shape: "Sfr"
                    },
                    ServiceCatalogProvisionedProductDetails: {
                        type: "structure",
                        members: {
                            ProvisionedProductId: {},
                            ProvisionedProductStatusMessage: {}
                        }
                    },
                    ProjectStatus: {},
                    CreatedBy: {
                        shape: "Sk1"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeSubscribedWorkteam: {
            input: {
                type: "structure",
                required: [ "WorkteamArn" ],
                members: {
                    WorkteamArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SubscribedWorkteam" ],
                members: {
                    SubscribedWorkteam: {
                        shape: "Spm"
                    }
                }
            }
        },
        DescribeTrainingJob: {
            input: {
                type: "structure",
                required: [ "TrainingJobName" ],
                members: {
                    TrainingJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TrainingJobName", "TrainingJobArn", "ModelArtifacts", "TrainingJobStatus", "SecondaryStatus", "AlgorithmSpecification", "ResourceConfig", "StoppingCondition", "CreationTime" ],
                members: {
                    TrainingJobName: {},
                    TrainingJobArn: {},
                    TuningJobArn: {},
                    LabelingJobArn: {},
                    AutoMLJobArn: {},
                    ModelArtifacts: {
                        shape: "Slg"
                    },
                    TrainingJobStatus: {},
                    SecondaryStatus: {},
                    FailureReason: {},
                    HyperParameters: {
                        shape: "S2a"
                    },
                    AlgorithmSpecification: {
                        shape: "Sg2"
                    },
                    RoleArn: {},
                    InputDataConfig: {
                        shape: "S2c"
                    },
                    OutputDataConfig: {
                        shape: "S2t"
                    },
                    ResourceConfig: {
                        shape: "S2v"
                    },
                    VpcConfig: {
                        shape: "S4x"
                    },
                    StoppingCondition: {
                        shape: "S2y"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    TrainingStartTime: {
                        type: "timestamp"
                    },
                    TrainingEndTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    SecondaryStatusTransitions: {
                        shape: "Spq"
                    },
                    FinalMetricDataList: {
                        shape: "Spt"
                    },
                    EnableNetworkIsolation: {
                        type: "boolean"
                    },
                    EnableInterContainerTrafficEncryption: {
                        type: "boolean"
                    },
                    EnableManagedSpotTraining: {
                        type: "boolean"
                    },
                    CheckpointConfig: {
                        shape: "Saf"
                    },
                    TrainingTimeInSeconds: {
                        type: "integer"
                    },
                    BillableTimeInSeconds: {
                        type: "integer"
                    },
                    DebugHookConfig: {
                        shape: "Sg3"
                    },
                    ExperimentConfig: {
                        shape: "Sfm"
                    },
                    DebugRuleConfigurations: {
                        shape: "Sgb"
                    },
                    TensorBoardOutputConfig: {
                        shape: "Sgg"
                    },
                    DebugRuleEvaluationStatuses: {
                        shape: "Spy"
                    },
                    ProfilerConfig: {
                        shape: "Sgh"
                    },
                    ProfilerRuleConfigurations: {
                        shape: "Sgk"
                    },
                    ProfilerRuleEvaluationStatuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RuleConfigurationName: {},
                                RuleEvaluationJobArn: {},
                                RuleEvaluationStatus: {},
                                StatusDetails: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    ProfilingStatus: {},
                    Environment: {
                        shape: "Sgm"
                    }
                }
            }
        },
        DescribeTransformJob: {
            input: {
                type: "structure",
                required: [ "TransformJobName" ],
                members: {
                    TransformJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TransformJobName", "TransformJobArn", "TransformJobStatus", "ModelName", "TransformInput", "TransformResources", "CreationTime" ],
                members: {
                    TransformJobName: {},
                    TransformJobArn: {},
                    TransformJobStatus: {},
                    FailureReason: {},
                    ModelName: {},
                    MaxConcurrentTransforms: {
                        type: "integer"
                    },
                    ModelClientConfig: {
                        shape: "Sgt"
                    },
                    MaxPayloadInMB: {
                        type: "integer"
                    },
                    BatchStrategy: {},
                    Environment: {
                        shape: "S35"
                    },
                    TransformInput: {
                        shape: "S38"
                    },
                    TransformOutput: {
                        shape: "S3c"
                    },
                    TransformResources: {
                        shape: "S3f"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    TransformStartTime: {
                        type: "timestamp"
                    },
                    TransformEndTime: {
                        type: "timestamp"
                    },
                    LabelingJobArn: {},
                    AutoMLJobArn: {},
                    DataProcessing: {
                        shape: "Sgw"
                    },
                    ExperimentConfig: {
                        shape: "Sfm"
                    }
                }
            }
        },
        DescribeTrial: {
            input: {
                type: "structure",
                required: [ "TrialName" ],
                members: {
                    TrialName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialName: {},
                    TrialArn: {},
                    DisplayName: {},
                    ExperimentName: {},
                    Source: {
                        shape: "Sqa"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Sk1"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Sk1"
                    },
                    MetadataProperties: {
                        shape: "Sp"
                    }
                }
            }
        },
        DescribeTrialComponent: {
            input: {
                type: "structure",
                required: [ "TrialComponentName" ],
                members: {
                    TrialComponentName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentName: {},
                    TrialComponentArn: {},
                    DisplayName: {},
                    Source: {
                        shape: "Sqe"
                    },
                    Status: {
                        shape: "Sh4"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Sk1"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Sk1"
                    },
                    Parameters: {
                        shape: "Sh8"
                    },
                    InputArtifacts: {
                        shape: "Shc"
                    },
                    OutputArtifacts: {
                        shape: "Shc"
                    },
                    MetadataProperties: {
                        shape: "Sp"
                    },
                    Metrics: {
                        shape: "Sqg"
                    }
                }
            }
        },
        DescribeUserProfile: {
            input: {
                type: "structure",
                required: [ "DomainId", "UserProfileName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainId: {},
                    UserProfileArn: {},
                    UserProfileName: {},
                    HomeEfsFileSystemUid: {},
                    Status: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    SingleSignOnUserIdentifier: {},
                    SingleSignOnUserValue: {},
                    UserSettings: {
                        shape: "S74"
                    }
                }
            }
        },
        DescribeWorkforce: {
            input: {
                type: "structure",
                required: [ "WorkforceName" ],
                members: {
                    WorkforceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Workforce" ],
                members: {
                    Workforce: {
                        shape: "Sqq"
                    }
                }
            }
        },
        DescribeWorkteam: {
            input: {
                type: "structure",
                required: [ "WorkteamName" ],
                members: {
                    WorkteamName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Workteam" ],
                members: {
                    Workteam: {
                        shape: "Squ"
                    }
                }
            }
        },
        DisableSagemakerServicecatalogPortfolio: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateTrialComponent: {
            input: {
                type: "structure",
                required: [ "TrialComponentName", "TrialName" ],
                members: {
                    TrialComponentName: {},
                    TrialName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentArn: {},
                    TrialArn: {}
                }
            }
        },
        EnableSagemakerServicecatalogPortfolio: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetDeviceFleetReport: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName" ],
                members: {
                    DeviceFleetName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DeviceFleetArn", "DeviceFleetName" ],
                members: {
                    DeviceFleetArn: {},
                    DeviceFleetName: {},
                    OutputConfig: {
                        shape: "S70"
                    },
                    Description: {},
                    ReportGenerated: {
                        type: "timestamp"
                    },
                    DeviceStats: {
                        type: "structure",
                        required: [ "ConnectedDeviceCount", "RegisteredDeviceCount" ],
                        members: {
                            ConnectedDeviceCount: {
                                type: "long"
                            },
                            RegisteredDeviceCount: {
                                type: "long"
                            }
                        }
                    },
                    AgentVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Version", "AgentCount" ],
                            members: {
                                Version: {},
                                AgentCount: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    ModelStats: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelName", "ModelVersion", "OfflineDeviceCount", "ConnectedDeviceCount", "ActiveDeviceCount", "SamplingDeviceCount" ],
                            members: {
                                ModelName: {},
                                ModelVersion: {},
                                OfflineDeviceCount: {
                                    type: "long"
                                },
                                ConnectedDeviceCount: {
                                    type: "long"
                                },
                                ActiveDeviceCount: {
                                    type: "long"
                                },
                                SamplingDeviceCount: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetModelPackageGroupPolicy: {
            input: {
                type: "structure",
                required: [ "ModelPackageGroupName" ],
                members: {
                    ModelPackageGroupName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResourcePolicy" ],
                members: {
                    ResourcePolicy: {}
                }
            }
        },
        GetSagemakerServicecatalogPortfolioStatus: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        GetSearchSuggestions: {
            input: {
                type: "structure",
                required: [ "Resource" ],
                members: {
                    Resource: {},
                    SuggestionQuery: {
                        type: "structure",
                        members: {
                            PropertyNameQuery: {
                                type: "structure",
                                required: [ "PropertyNameHint" ],
                                members: {
                                    PropertyNameHint: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PropertyNameSuggestions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PropertyName: {}
                            }
                        }
                    }
                }
            }
        },
        ListActions: {
            input: {
                type: "structure",
                members: {
                    SourceUri: {},
                    ActionType: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ActionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ActionArn: {},
                                ActionName: {},
                                Source: {
                                    shape: "Si"
                                },
                                ActionType: {},
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAlgorithms: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AlgorithmSummaryList" ],
                members: {
                    AlgorithmSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AlgorithmName", "AlgorithmArn", "CreationTime", "AlgorithmStatus" ],
                            members: {
                                AlgorithmName: {},
                                AlgorithmArn: {},
                                AlgorithmDescription: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                AlgorithmStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAppImageConfigs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    ModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    ModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    AppImageConfigs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppImageConfigArn: {},
                                AppImageConfigName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                KernelGatewayImageConfig: {
                                    shape: "S3x"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListApps: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortOrder: {},
                    SortBy: {},
                    DomainIdEquals: {},
                    UserProfileNameEquals: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Apps: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainId: {},
                                UserProfileName: {},
                                AppType: {},
                                AppName: {},
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListArtifacts: {
            input: {
                type: "structure",
                members: {
                    SourceUri: {},
                    ArtifactType: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArtifactSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ArtifactArn: {},
                                ArtifactName: {},
                                Source: {
                                    shape: "S49"
                                },
                                ArtifactType: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAssociations: {
            input: {
                type: "structure",
                members: {
                    SourceArn: {},
                    DestinationArn: {},
                    SourceType: {},
                    DestinationType: {},
                    AssociationType: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceArn: {},
                                DestinationArn: {},
                                SourceType: {},
                                DestinationType: {},
                                AssociationType: {},
                                SourceName: {},
                                DestinationName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                CreatedBy: {
                                    shape: "Sk1"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAutoMLJobs: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    StatusEquals: {},
                    SortOrder: {},
                    SortBy: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AutoMLJobSummaries" ],
                members: {
                    AutoMLJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AutoMLJobName", "AutoMLJobArn", "AutoMLJobStatus", "AutoMLJobSecondaryStatus", "CreationTime", "LastModifiedTime" ],
                            members: {
                                AutoMLJobName: {},
                                AutoMLJobArn: {},
                                AutoMLJobStatus: {},
                                AutoMLJobSecondaryStatus: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                FailureReason: {},
                                PartialFailureReasons: {
                                    shape: "Skl"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCandidatesForAutoMLJob: {
            input: {
                type: "structure",
                required: [ "AutoMLJobName" ],
                members: {
                    AutoMLJobName: {},
                    StatusEquals: {},
                    CandidateNameEquals: {},
                    SortOrder: {},
                    SortBy: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Candidates" ],
                members: {
                    Candidates: {
                        type: "list",
                        member: {
                            shape: "Skn"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCodeRepositories: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CodeRepositorySummaryList" ],
                members: {
                    CodeRepositorySummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CodeRepositoryName", "CodeRepositoryArn", "CreationTime", "LastModifiedTime" ],
                            members: {
                                CodeRepositoryName: {},
                                CodeRepositoryArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                GitConfig: {
                                    shape: "S56"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCompilationJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CompilationJobSummaries" ],
                members: {
                    CompilationJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CompilationJobName", "CompilationJobArn", "CreationTime", "CompilationJobStatus" ],
                            members: {
                                CompilationJobName: {},
                                CompilationJobArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                CompilationStartTime: {
                                    type: "timestamp"
                                },
                                CompilationEndTime: {
                                    type: "timestamp"
                                },
                                CompilationTargetDevice: {},
                                CompilationTargetPlatformOs: {},
                                CompilationTargetPlatformArch: {},
                                CompilationTargetPlatformAccelerator: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                CompilationJobStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListContexts: {
            input: {
                type: "structure",
                members: {
                    SourceUri: {},
                    ContextType: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContextSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ContextArn: {},
                                ContextName: {},
                                Source: {
                                    shape: "S5r"
                                },
                                ContextType: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDataQualityJobDefinitions: {
            input: {
                type: "structure",
                members: {
                    EndpointName: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionSummaries" ],
                members: {
                    JobDefinitionSummaries: {
                        shape: "Stk"
                    },
                    NextToken: {}
                }
            }
        },
        ListDeviceFleets: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DeviceFleetSummaries" ],
                members: {
                    DeviceFleetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceFleetArn", "DeviceFleetName" ],
                            members: {
                                DeviceFleetArn: {},
                                DeviceFleetName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDevices: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    LatestHeartbeatAfter: {
                        type: "timestamp"
                    },
                    ModelName: {},
                    DeviceFleetName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DeviceSummaries" ],
                members: {
                    DeviceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceName", "DeviceArn" ],
                            members: {
                                DeviceName: {},
                                DeviceArn: {},
                                Description: {},
                                DeviceFleetName: {},
                                IotThingName: {},
                                RegistrationTime: {
                                    type: "timestamp"
                                },
                                LatestHeartbeat: {
                                    type: "timestamp"
                                },
                                Models: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "ModelName", "ModelVersion" ],
                                        members: {
                                            ModelName: {},
                                            ModelVersion: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDomains: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Domains: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainArn: {},
                                DomainId: {},
                                DomainName: {},
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                Url: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEdgePackagingJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    ModelNameContains: {},
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "EdgePackagingJobSummaries" ],
                members: {
                    EdgePackagingJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EdgePackagingJobArn", "EdgePackagingJobName", "EdgePackagingJobStatus" ],
                            members: {
                                EdgePackagingJobArn: {},
                                EdgePackagingJobName: {},
                                EdgePackagingJobStatus: {},
                                CompilationJobName: {},
                                ModelName: {},
                                ModelVersion: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEndpointConfigs: {
            input: {
                type: "structure",
                members: {
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointConfigs" ],
                members: {
                    EndpointConfigs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EndpointConfigName", "EndpointConfigArn", "CreationTime" ],
                            members: {
                                EndpointConfigName: {},
                                EndpointConfigArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEndpoints: {
            input: {
                type: "structure",
                members: {
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    StatusEquals: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Endpoints" ],
                members: {
                    Endpoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EndpointName", "EndpointArn", "CreationTime", "LastModifiedTime", "EndpointStatus" ],
                            members: {
                                EndpointName: {},
                                EndpointArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                EndpointStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListExperiments: {
            input: {
                type: "structure",
                members: {
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExperimentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ExperimentArn: {},
                                ExperimentName: {},
                                DisplayName: {},
                                ExperimentSource: {
                                    shape: "Smz"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFeatureGroups: {
            input: {
                type: "structure",
                members: {
                    NameContains: {},
                    FeatureGroupStatusEquals: {},
                    OfflineStoreStatusEquals: {},
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    SortOrder: {},
                    SortBy: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "FeatureGroupSummaries", "NextToken" ],
                members: {
                    FeatureGroupSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FeatureGroupName", "FeatureGroupArn", "CreationTime" ],
                            members: {
                                FeatureGroupName: {},
                                FeatureGroupArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                FeatureGroupStatus: {},
                                OfflineStoreStatus: {
                                    shape: "Sn5"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFlowDefinitions: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FlowDefinitionSummaries" ],
                members: {
                    FlowDefinitionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FlowDefinitionName", "FlowDefinitionArn", "FlowDefinitionStatus", "CreationTime" ],
                            members: {
                                FlowDefinitionName: {},
                                FlowDefinitionArn: {},
                                FlowDefinitionStatus: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                FailureReason: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListHumanTaskUis: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HumanTaskUiSummaries" ],
                members: {
                    HumanTaskUiSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "HumanTaskUiName", "HumanTaskUiArn", "CreationTime" ],
                            members: {
                                HumanTaskUiName: {},
                                HumanTaskUiArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListHyperParameterTuningJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NameContains: {},
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    StatusEquals: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HyperParameterTuningJobSummaries" ],
                members: {
                    HyperParameterTuningJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "HyperParameterTuningJobName", "HyperParameterTuningJobArn", "HyperParameterTuningJobStatus", "Strategy", "CreationTime", "TrainingJobStatusCounters", "ObjectiveStatusCounters" ],
                            members: {
                                HyperParameterTuningJobName: {},
                                HyperParameterTuningJobArn: {},
                                HyperParameterTuningJobStatus: {},
                                Strategy: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                HyperParameterTuningEndTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                TrainingJobStatusCounters: {
                                    shape: "Snk"
                                },
                                ObjectiveStatusCounters: {
                                    shape: "Snm"
                                },
                                ResourceLimits: {
                                    shape: "S9v"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListImageVersions: {
            input: {
                type: "structure",
                required: [ "ImageName" ],
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    ImageName: {},
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreationTime", "ImageArn", "ImageVersionArn", "ImageVersionStatus", "LastModifiedTime", "Version" ],
                            members: {
                                CreationTime: {
                                    type: "timestamp"
                                },
                                FailureReason: {},
                                ImageArn: {},
                                ImageVersionArn: {},
                                ImageVersionStatus: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                Version: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListImages: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Images: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreationTime", "ImageArn", "ImageName", "ImageStatus", "LastModifiedTime" ],
                            members: {
                                CreationTime: {
                                    type: "timestamp"
                                },
                                Description: {},
                                DisplayName: {},
                                FailureReason: {},
                                ImageArn: {},
                                ImageName: {},
                                ImageStatus: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLabelingJobs: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    NameContains: {},
                    SortBy: {},
                    SortOrder: {},
                    StatusEquals: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LabelingJobSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "LabelingJobName", "LabelingJobArn", "CreationTime", "LastModifiedTime", "LabelingJobStatus", "LabelCounters", "WorkteamArn", "PreHumanTaskLambdaArn" ],
                            members: {
                                LabelingJobName: {},
                                LabelingJobArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LabelingJobStatus: {},
                                LabelCounters: {
                                    shape: "So1"
                                },
                                WorkteamArn: {},
                                PreHumanTaskLambdaArn: {},
                                AnnotationConsolidationLambdaArn: {},
                                FailureReason: {},
                                LabelingJobOutput: {
                                    shape: "So4"
                                },
                                InputConfig: {
                                    shape: "Say"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLabelingJobsForWorkteam: {
            input: {
                type: "structure",
                required: [ "WorkteamArn" ],
                members: {
                    WorkteamArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    JobReferenceCodeContains: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "LabelingJobSummaryList" ],
                members: {
                    LabelingJobSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "JobReferenceCode", "WorkRequesterAccountId", "CreationTime" ],
                            members: {
                                LabelingJobName: {},
                                JobReferenceCode: {},
                                WorkRequesterAccountId: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LabelCounters: {
                                    type: "structure",
                                    members: {
                                        HumanLabeled: {
                                            type: "integer"
                                        },
                                        PendingHuman: {
                                            type: "integer"
                                        },
                                        Total: {
                                            type: "integer"
                                        }
                                    }
                                },
                                NumberOfHumanWorkersPerDataObject: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListModelBiasJobDefinitions: {
            input: {
                type: "structure",
                members: {
                    EndpointName: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionSummaries" ],
                members: {
                    JobDefinitionSummaries: {
                        shape: "Stk"
                    },
                    NextToken: {}
                }
            }
        },
        ListModelExplainabilityJobDefinitions: {
            input: {
                type: "structure",
                members: {
                    EndpointName: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionSummaries" ],
                members: {
                    JobDefinitionSummaries: {
                        shape: "Stk"
                    },
                    NextToken: {}
                }
            }
        },
        ListModelPackageGroups: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageGroupSummaryList" ],
                members: {
                    ModelPackageGroupSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelPackageGroupName", "ModelPackageGroupArn", "CreationTime", "ModelPackageGroupStatus" ],
                            members: {
                                ModelPackageGroupName: {},
                                ModelPackageGroupArn: {},
                                ModelPackageGroupDescription: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ModelPackageGroupStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListModelPackages: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    ModelApprovalStatus: {},
                    ModelPackageGroupName: {},
                    ModelPackageType: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageSummaryList" ],
                members: {
                    ModelPackageSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelPackageName", "ModelPackageArn", "CreationTime", "ModelPackageStatus" ],
                            members: {
                                ModelPackageName: {},
                                ModelPackageGroupName: {},
                                ModelPackageVersion: {
                                    type: "integer"
                                },
                                ModelPackageArn: {},
                                ModelPackageDescription: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ModelPackageStatus: {},
                                ModelApprovalStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListModelQualityJobDefinitions: {
            input: {
                type: "structure",
                members: {
                    EndpointName: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionSummaries" ],
                members: {
                    JobDefinitionSummaries: {
                        shape: "Stk"
                    },
                    NextToken: {}
                }
            }
        },
        ListModels: {
            input: {
                type: "structure",
                members: {
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Models" ],
                members: {
                    Models: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelName", "ModelArn", "CreationTime" ],
                            members: {
                                ModelName: {},
                                ModelArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMonitoringExecutions: {
            input: {
                type: "structure",
                members: {
                    MonitoringScheduleName: {},
                    EndpointName: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ScheduledTimeBefore: {
                        type: "timestamp"
                    },
                    ScheduledTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    StatusEquals: {},
                    MonitoringJobDefinitionName: {},
                    MonitoringTypeEquals: {}
                }
            },
            output: {
                type: "structure",
                required: [ "MonitoringExecutionSummaries" ],
                members: {
                    MonitoringExecutionSummaries: {
                        type: "list",
                        member: {
                            shape: "Sos"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMonitoringSchedules: {
            input: {
                type: "structure",
                members: {
                    EndpointName: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    StatusEquals: {},
                    MonitoringJobDefinitionName: {},
                    MonitoringTypeEquals: {}
                }
            },
            output: {
                type: "structure",
                required: [ "MonitoringScheduleSummaries" ],
                members: {
                    MonitoringScheduleSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "MonitoringScheduleName", "MonitoringScheduleArn", "CreationTime", "LastModifiedTime", "MonitoringScheduleStatus" ],
                            members: {
                                MonitoringScheduleName: {},
                                MonitoringScheduleArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                MonitoringScheduleStatus: {},
                                EndpointName: {},
                                MonitoringJobDefinitionName: {},
                                MonitoringType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNotebookInstanceLifecycleConfigs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NotebookInstanceLifecycleConfigs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "NotebookInstanceLifecycleConfigName", "NotebookInstanceLifecycleConfigArn" ],
                            members: {
                                NotebookInstanceLifecycleConfigName: {},
                                NotebookInstanceLifecycleConfigArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListNotebookInstances: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    StatusEquals: {},
                    NotebookInstanceLifecycleConfigNameContains: {},
                    DefaultCodeRepositoryContains: {},
                    AdditionalCodeRepositoryEquals: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NotebookInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "NotebookInstanceName", "NotebookInstanceArn" ],
                            members: {
                                NotebookInstanceName: {},
                                NotebookInstanceArn: {},
                                NotebookInstanceStatus: {},
                                Url: {},
                                InstanceType: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                NotebookInstanceLifecycleConfigName: {},
                                DefaultCodeRepository: {},
                                AdditionalCodeRepositories: {
                                    shape: "Sdx"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPipelineExecutionSteps: {
            input: {
                type: "structure",
                members: {
                    PipelineExecutionArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineExecutionSteps: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StepName: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                StepStatus: {},
                                CacheHitResult: {
                                    type: "structure",
                                    members: {
                                        SourcePipelineExecutionArn: {}
                                    }
                                },
                                FailureReason: {},
                                Metadata: {
                                    type: "structure",
                                    members: {
                                        TrainingJob: {
                                            type: "structure",
                                            members: {
                                                Arn: {}
                                            }
                                        },
                                        ProcessingJob: {
                                            type: "structure",
                                            members: {
                                                Arn: {}
                                            }
                                        },
                                        TransformJob: {
                                            type: "structure",
                                            members: {
                                                Arn: {}
                                            }
                                        },
                                        Model: {
                                            type: "structure",
                                            members: {
                                                Arn: {}
                                            }
                                        },
                                        RegisterModel: {
                                            type: "structure",
                                            members: {
                                                Arn: {}
                                            }
                                        },
                                        Condition: {
                                            type: "structure",
                                            members: {
                                                Outcome: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPipelineExecutions: {
            input: {
                type: "structure",
                required: [ "PipelineName" ],
                members: {
                    PipelineName: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineExecutionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PipelineExecutionArn: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                PipelineExecutionStatus: {},
                                PipelineExecutionDescription: {},
                                PipelineExecutionDisplayName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPipelineParametersForExecution: {
            input: {
                type: "structure",
                required: [ "PipelineExecutionArn" ],
                members: {
                    PipelineExecutionArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineParameters: {
                        shape: "Sxy"
                    },
                    NextToken: {}
                }
            }
        },
        ListPipelines: {
            input: {
                type: "structure",
                members: {
                    PipelineNamePrefix: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PipelineArn: {},
                                PipelineName: {},
                                PipelineDisplayName: {},
                                PipelineDescription: {},
                                RoleArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastExecutionTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProcessingJobs: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProcessingJobSummaries" ],
                members: {
                    ProcessingJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ProcessingJobName", "ProcessingJobArn", "CreationTime", "ProcessingJobStatus" ],
                            members: {
                                ProcessingJobName: {},
                                ProcessingJobArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ProcessingEndTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                ProcessingJobStatus: {},
                                FailureReason: {},
                                ExitMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProjects: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ProjectSummaryList" ],
                members: {
                    ProjectSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ProjectName", "ProjectArn", "ProjectId", "CreationTime", "ProjectStatus" ],
                            members: {
                                ProjectName: {},
                                ProjectDescription: {},
                                ProjectArn: {},
                                ProjectId: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ProjectStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSubscribedWorkteams: {
            input: {
                type: "structure",
                members: {
                    NameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SubscribedWorkteams" ],
                members: {
                    SubscribedWorkteams: {
                        type: "list",
                        member: {
                            shape: "Spm"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S7"
                    },
                    NextToken: {}
                }
            }
        },
        ListTrainingJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TrainingJobSummaries" ],
                members: {
                    TrainingJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TrainingJobName", "TrainingJobArn", "CreationTime", "TrainingJobStatus" ],
                            members: {
                                TrainingJobName: {},
                                TrainingJobArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                TrainingEndTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                TrainingJobStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTrainingJobsForHyperParameterTuningJob: {
            input: {
                type: "structure",
                required: [ "HyperParameterTuningJobName" ],
                members: {
                    HyperParameterTuningJobName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TrainingJobSummaries" ],
                members: {
                    TrainingJobSummaries: {
                        type: "list",
                        member: {
                            shape: "Sno"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTransformJobs: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TransformJobSummaries" ],
                members: {
                    TransformJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TransformJobName", "TransformJobArn", "CreationTime", "TransformJobStatus" ],
                            members: {
                                TransformJobName: {},
                                TransformJobArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                TransformEndTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                TransformJobStatus: {},
                                FailureReason: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTrialComponents: {
            input: {
                type: "structure",
                members: {
                    ExperimentName: {},
                    TrialName: {},
                    SourceArn: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TrialComponentName: {},
                                TrialComponentArn: {},
                                DisplayName: {},
                                TrialComponentSource: {
                                    shape: "Sqe"
                                },
                                Status: {
                                    shape: "Sh4"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                CreatedBy: {
                                    shape: "Sk1"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedBy: {
                                    shape: "Sk1"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTrials: {
            input: {
                type: "structure",
                members: {
                    ExperimentName: {},
                    TrialComponentName: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TrialArn: {},
                                TrialName: {},
                                DisplayName: {},
                                TrialSource: {
                                    shape: "Sqa"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListUserProfiles: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortOrder: {},
                    SortBy: {},
                    DomainIdEquals: {},
                    UserProfileNameContains: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserProfiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainId: {},
                                UserProfileName: {},
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListWorkforces: {
            input: {
                type: "structure",
                members: {
                    SortBy: {},
                    SortOrder: {},
                    NameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Workforces" ],
                members: {
                    Workforces: {
                        type: "list",
                        member: {
                            shape: "Sqq"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListWorkteams: {
            input: {
                type: "structure",
                members: {
                    SortBy: {},
                    SortOrder: {},
                    NameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Workteams" ],
                members: {
                    Workteams: {
                        type: "list",
                        member: {
                            shape: "Squ"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutModelPackageGroupPolicy: {
            input: {
                type: "structure",
                required: [ "ModelPackageGroupName", "ResourcePolicy" ],
                members: {
                    ModelPackageGroupName: {},
                    ResourcePolicy: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageGroupArn" ],
                members: {
                    ModelPackageGroupArn: {}
                }
            }
        },
        RegisterDevices: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName", "Devices" ],
                members: {
                    DeviceFleetName: {},
                    Devices: {
                        shape: "Szo"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        RenderUiTemplate: {
            input: {
                type: "structure",
                required: [ "Task", "RoleArn" ],
                members: {
                    UiTemplate: {
                        shape: "S9o"
                    },
                    Task: {
                        type: "structure",
                        required: [ "Input" ],
                        members: {
                            Input: {}
                        }
                    },
                    RoleArn: {},
                    HumanTaskUiArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RenderedContent", "Errors" ],
                members: {
                    RenderedContent: {},
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Code", "Message" ],
                            members: {
                                Code: {},
                                Message: {}
                            }
                        }
                    }
                }
            }
        },
        Search: {
            input: {
                type: "structure",
                required: [ "Resource" ],
                members: {
                    Resource: {},
                    SearchExpression: {
                        shape: "Szx"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TrainingJob: {
                                    shape: "S10a"
                                },
                                Experiment: {
                                    type: "structure",
                                    members: {
                                        ExperimentName: {},
                                        ExperimentArn: {},
                                        DisplayName: {},
                                        Source: {
                                            shape: "Smz"
                                        },
                                        Description: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        CreatedBy: {
                                            shape: "Sk1"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedBy: {
                                            shape: "Sk1"
                                        },
                                        Tags: {
                                            shape: "S7"
                                        }
                                    }
                                },
                                Trial: {
                                    type: "structure",
                                    members: {
                                        TrialName: {},
                                        TrialArn: {},
                                        DisplayName: {},
                                        ExperimentName: {},
                                        Source: {
                                            shape: "Sqa"
                                        },
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        CreatedBy: {
                                            shape: "Sk1"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedBy: {
                                            shape: "Sk1"
                                        },
                                        MetadataProperties: {
                                            shape: "Sp"
                                        },
                                        Tags: {
                                            shape: "S7"
                                        },
                                        TrialComponentSummaries: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    TrialComponentName: {},
                                                    TrialComponentArn: {},
                                                    TrialComponentSource: {
                                                        shape: "Sqe"
                                                    },
                                                    CreationTime: {
                                                        type: "timestamp"
                                                    },
                                                    CreatedBy: {
                                                        shape: "Sk1"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                TrialComponent: {
                                    type: "structure",
                                    members: {
                                        TrialComponentName: {},
                                        DisplayName: {},
                                        TrialComponentArn: {},
                                        Source: {
                                            shape: "Sqe"
                                        },
                                        Status: {
                                            shape: "Sh4"
                                        },
                                        StartTime: {
                                            type: "timestamp"
                                        },
                                        EndTime: {
                                            type: "timestamp"
                                        },
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        CreatedBy: {
                                            shape: "Sk1"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedBy: {
                                            shape: "Sk1"
                                        },
                                        Parameters: {
                                            shape: "Sh8"
                                        },
                                        InputArtifacts: {
                                            shape: "Shc"
                                        },
                                        OutputArtifacts: {
                                            shape: "Shc"
                                        },
                                        Metrics: {
                                            shape: "Sqg"
                                        },
                                        MetadataProperties: {
                                            shape: "Sp"
                                        },
                                        SourceDetail: {
                                            type: "structure",
                                            members: {
                                                SourceArn: {},
                                                TrainingJob: {
                                                    shape: "S10a"
                                                },
                                                ProcessingJob: {
                                                    type: "structure",
                                                    members: {
                                                        ProcessingInputs: {
                                                            shape: "Sen"
                                                        },
                                                        ProcessingOutputConfig: {
                                                            shape: "Sfa"
                                                        },
                                                        ProcessingJobName: {},
                                                        ProcessingResources: {
                                                            shape: "Sff"
                                                        },
                                                        StoppingCondition: {
                                                            shape: "Sfh"
                                                        },
                                                        AppSpecification: {
                                                            shape: "Sfj"
                                                        },
                                                        Environment: {
                                                            shape: "Sfl"
                                                        },
                                                        NetworkConfig: {
                                                            shape: "Sdk"
                                                        },
                                                        RoleArn: {},
                                                        ExperimentConfig: {
                                                            shape: "Sfm"
                                                        },
                                                        ProcessingJobArn: {},
                                                        ProcessingJobStatus: {},
                                                        ExitMessage: {},
                                                        FailureReason: {},
                                                        ProcessingEndTime: {
                                                            type: "timestamp"
                                                        },
                                                        ProcessingStartTime: {
                                                            type: "timestamp"
                                                        },
                                                        LastModifiedTime: {
                                                            type: "timestamp"
                                                        },
                                                        CreationTime: {
                                                            type: "timestamp"
                                                        },
                                                        MonitoringScheduleArn: {},
                                                        AutoMLJobArn: {},
                                                        TrainingJobArn: {},
                                                        Tags: {
                                                            shape: "S7"
                                                        }
                                                    }
                                                },
                                                TransformJob: {
                                                    type: "structure",
                                                    members: {
                                                        TransformJobName: {},
                                                        TransformJobArn: {},
                                                        TransformJobStatus: {},
                                                        FailureReason: {},
                                                        ModelName: {},
                                                        MaxConcurrentTransforms: {
                                                            type: "integer"
                                                        },
                                                        ModelClientConfig: {
                                                            shape: "Sgt"
                                                        },
                                                        MaxPayloadInMB: {
                                                            type: "integer"
                                                        },
                                                        BatchStrategy: {},
                                                        Environment: {
                                                            shape: "S35"
                                                        },
                                                        TransformInput: {
                                                            shape: "S38"
                                                        },
                                                        TransformOutput: {
                                                            shape: "S3c"
                                                        },
                                                        TransformResources: {
                                                            shape: "S3f"
                                                        },
                                                        CreationTime: {
                                                            type: "timestamp"
                                                        },
                                                        TransformStartTime: {
                                                            type: "timestamp"
                                                        },
                                                        TransformEndTime: {
                                                            type: "timestamp"
                                                        },
                                                        LabelingJobArn: {},
                                                        AutoMLJobArn: {},
                                                        DataProcessing: {
                                                            shape: "Sgw"
                                                        },
                                                        ExperimentConfig: {
                                                            shape: "Sfm"
                                                        },
                                                        Tags: {
                                                            shape: "S7"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        Tags: {
                                            shape: "S7"
                                        },
                                        Parents: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    TrialName: {},
                                                    ExperimentName: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                Endpoint: {
                                    type: "structure",
                                    required: [ "EndpointName", "EndpointArn", "EndpointConfigName", "EndpointStatus", "CreationTime", "LastModifiedTime" ],
                                    members: {
                                        EndpointName: {},
                                        EndpointArn: {},
                                        EndpointConfigName: {},
                                        ProductionVariants: {
                                            shape: "Sma"
                                        },
                                        DataCaptureConfig: {
                                            shape: "Sme"
                                        },
                                        EndpointStatus: {},
                                        FailureReason: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        MonitoringSchedules: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    MonitoringScheduleArn: {},
                                                    MonitoringScheduleName: {},
                                                    MonitoringScheduleStatus: {},
                                                    MonitoringType: {},
                                                    FailureReason: {},
                                                    CreationTime: {
                                                        type: "timestamp"
                                                    },
                                                    LastModifiedTime: {
                                                        type: "timestamp"
                                                    },
                                                    MonitoringScheduleConfig: {
                                                        shape: "Sdc"
                                                    },
                                                    EndpointName: {},
                                                    LastMonitoringExecutionSummary: {
                                                        shape: "Sos"
                                                    },
                                                    Tags: {
                                                        shape: "S7"
                                                    }
                                                }
                                            }
                                        },
                                        Tags: {
                                            shape: "S7"
                                        }
                                    }
                                },
                                ModelPackage: {
                                    type: "structure",
                                    members: {
                                        ModelPackageName: {},
                                        ModelPackageGroupName: {},
                                        ModelPackageVersion: {
                                            type: "integer"
                                        },
                                        ModelPackageArn: {},
                                        ModelPackageDescription: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        InferenceSpecification: {
                                            shape: "S1t"
                                        },
                                        SourceAlgorithmSpecification: {
                                            shape: "Sco"
                                        },
                                        ValidationSpecification: {
                                            shape: "Scl"
                                        },
                                        ModelPackageStatus: {},
                                        ModelPackageStatusDetails: {
                                            shape: "Sof"
                                        },
                                        CertifyForMarketplace: {
                                            type: "boolean"
                                        },
                                        ModelApprovalStatus: {},
                                        CreatedBy: {
                                            shape: "Sk1"
                                        },
                                        MetadataProperties: {
                                            shape: "Sp"
                                        },
                                        ModelMetrics: {
                                            shape: "Scs"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedBy: {
                                            shape: "Sk1"
                                        },
                                        ApprovalDescription: {},
                                        Tags: {
                                            shape: "S7"
                                        }
                                    }
                                },
                                ModelPackageGroup: {
                                    type: "structure",
                                    members: {
                                        ModelPackageGroupName: {},
                                        ModelPackageGroupArn: {},
                                        ModelPackageGroupDescription: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        CreatedBy: {
                                            shape: "Sk1"
                                        },
                                        ModelPackageGroupStatus: {},
                                        Tags: {
                                            shape: "S7"
                                        }
                                    }
                                },
                                Pipeline: {
                                    type: "structure",
                                    members: {
                                        PipelineArn: {},
                                        PipelineName: {},
                                        PipelineDisplayName: {},
                                        PipelineDescription: {},
                                        RoleArn: {},
                                        PipelineStatus: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        LastRunTime: {
                                            type: "timestamp"
                                        },
                                        CreatedBy: {
                                            shape: "Sk1"
                                        },
                                        LastModifiedBy: {
                                            shape: "Sk1"
                                        },
                                        Tags: {
                                            shape: "S7"
                                        }
                                    }
                                },
                                PipelineExecution: {
                                    type: "structure",
                                    members: {
                                        PipelineArn: {},
                                        PipelineExecutionArn: {},
                                        PipelineExecutionDisplayName: {},
                                        PipelineExecutionStatus: {},
                                        PipelineExecutionDescription: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        CreatedBy: {
                                            shape: "Sk1"
                                        },
                                        LastModifiedBy: {
                                            shape: "Sk1"
                                        },
                                        PipelineParameters: {
                                            shape: "Sxy"
                                        }
                                    }
                                },
                                FeatureGroup: {
                                    type: "structure",
                                    members: {
                                        FeatureGroupArn: {},
                                        FeatureGroupName: {},
                                        RecordIdentifierFeatureName: {},
                                        EventTimeFeatureName: {},
                                        FeatureDefinitions: {
                                            shape: "S8j"
                                        },
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        OnlineStoreConfig: {
                                            shape: "S8m"
                                        },
                                        OfflineStoreConfig: {
                                            shape: "S8o"
                                        },
                                        RoleArn: {},
                                        FeatureGroupStatus: {},
                                        OfflineStoreStatus: {
                                            shape: "Sn5"
                                        },
                                        FailureReason: {},
                                        Description: {},
                                        Tags: {
                                            shape: "S7"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        StartMonitoringSchedule: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName" ],
                members: {
                    MonitoringScheduleName: {}
                }
            }
        },
        StartNotebookInstance: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName" ],
                members: {
                    NotebookInstanceName: {}
                }
            }
        },
        StartPipelineExecution: {
            input: {
                type: "structure",
                required: [ "PipelineName", "ClientRequestToken" ],
                members: {
                    PipelineName: {},
                    PipelineExecutionDisplayName: {},
                    PipelineParameters: {
                        shape: "Sxy"
                    },
                    PipelineExecutionDescription: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineExecutionArn: {}
                }
            }
        },
        StopAutoMLJob: {
            input: {
                type: "structure",
                required: [ "AutoMLJobName" ],
                members: {
                    AutoMLJobName: {}
                }
            }
        },
        StopCompilationJob: {
            input: {
                type: "structure",
                required: [ "CompilationJobName" ],
                members: {
                    CompilationJobName: {}
                }
            }
        },
        StopEdgePackagingJob: {
            input: {
                type: "structure",
                required: [ "EdgePackagingJobName" ],
                members: {
                    EdgePackagingJobName: {}
                }
            }
        },
        StopHyperParameterTuningJob: {
            input: {
                type: "structure",
                required: [ "HyperParameterTuningJobName" ],
                members: {
                    HyperParameterTuningJobName: {}
                }
            }
        },
        StopLabelingJob: {
            input: {
                type: "structure",
                required: [ "LabelingJobName" ],
                members: {
                    LabelingJobName: {}
                }
            }
        },
        StopMonitoringSchedule: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName" ],
                members: {
                    MonitoringScheduleName: {}
                }
            }
        },
        StopNotebookInstance: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName" ],
                members: {
                    NotebookInstanceName: {}
                }
            }
        },
        StopPipelineExecution: {
            input: {
                type: "structure",
                required: [ "PipelineExecutionArn", "ClientRequestToken" ],
                members: {
                    PipelineExecutionArn: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineExecutionArn: {}
                }
            }
        },
        StopProcessingJob: {
            input: {
                type: "structure",
                required: [ "ProcessingJobName" ],
                members: {
                    ProcessingJobName: {}
                }
            }
        },
        StopTrainingJob: {
            input: {
                type: "structure",
                required: [ "TrainingJobName" ],
                members: {
                    TrainingJobName: {}
                }
            }
        },
        StopTransformJob: {
            input: {
                type: "structure",
                required: [ "TransformJobName" ],
                members: {
                    TransformJobName: {}
                }
            }
        },
        UpdateAction: {
            input: {
                type: "structure",
                required: [ "ActionName" ],
                members: {
                    ActionName: {},
                    Description: {},
                    Status: {},
                    Properties: {
                        shape: "Sn"
                    },
                    PropertiesToRemove: {
                        shape: "S11a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ActionArn: {}
                }
            }
        },
        UpdateAppImageConfig: {
            input: {
                type: "structure",
                required: [ "AppImageConfigName" ],
                members: {
                    AppImageConfigName: {},
                    KernelGatewayImageConfig: {
                        shape: "S3x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppImageConfigArn: {}
                }
            }
        },
        UpdateArtifact: {
            input: {
                type: "structure",
                required: [ "ArtifactArn" ],
                members: {
                    ArtifactArn: {},
                    ArtifactName: {},
                    Properties: {
                        shape: "Sn"
                    },
                    PropertiesToRemove: {
                        shape: "S11a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArtifactArn: {}
                }
            }
        },
        UpdateCodeRepository: {
            input: {
                type: "structure",
                required: [ "CodeRepositoryName" ],
                members: {
                    CodeRepositoryName: {},
                    GitConfig: {
                        type: "structure",
                        members: {
                            SecretArn: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CodeRepositoryArn" ],
                members: {
                    CodeRepositoryArn: {}
                }
            }
        },
        UpdateContext: {
            input: {
                type: "structure",
                required: [ "ContextName" ],
                members: {
                    ContextName: {},
                    Description: {},
                    Properties: {
                        shape: "Sn"
                    },
                    PropertiesToRemove: {
                        shape: "S11a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContextArn: {}
                }
            }
        },
        UpdateDeviceFleet: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName", "OutputConfig" ],
                members: {
                    DeviceFleetName: {},
                    RoleArn: {},
                    Description: {},
                    OutputConfig: {
                        shape: "S70"
                    }
                }
            }
        },
        UpdateDevices: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName", "Devices" ],
                members: {
                    DeviceFleetName: {},
                    Devices: {
                        shape: "Szo"
                    }
                }
            }
        },
        UpdateDomain: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    DefaultUserSettings: {
                        shape: "S74"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainArn: {}
                }
            }
        },
        UpdateEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName", "EndpointConfigName" ],
                members: {
                    EndpointName: {},
                    EndpointConfigName: {},
                    RetainAllVariantProperties: {
                        type: "boolean"
                    },
                    ExcludeRetainedVariantProperties: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "VariantPropertyType" ],
                            members: {
                                VariantPropertyType: {}
                            }
                        }
                    },
                    DeploymentConfig: {
                        shape: "Smh"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            }
        },
        UpdateEndpointWeightsAndCapacities: {
            input: {
                type: "structure",
                required: [ "EndpointName", "DesiredWeightsAndCapacities" ],
                members: {
                    EndpointName: {},
                    DesiredWeightsAndCapacities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "VariantName" ],
                            members: {
                                VariantName: {},
                                DesiredWeight: {
                                    type: "float"
                                },
                                DesiredInstanceCount: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            }
        },
        UpdateExperiment: {
            input: {
                type: "structure",
                required: [ "ExperimentName" ],
                members: {
                    ExperimentName: {},
                    DisplayName: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExperimentArn: {}
                }
            }
        },
        UpdateImage: {
            input: {
                type: "structure",
                required: [ "ImageName" ],
                members: {
                    DeleteProperties: {
                        type: "list",
                        member: {}
                    },
                    Description: {},
                    DisplayName: {},
                    ImageName: {},
                    RoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageArn: {}
                }
            }
        },
        UpdateModelPackage: {
            input: {
                type: "structure",
                required: [ "ModelPackageArn", "ModelApprovalStatus" ],
                members: {
                    ModelPackageArn: {},
                    ModelApprovalStatus: {},
                    ApprovalDescription: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageArn" ],
                members: {
                    ModelPackageArn: {}
                }
            }
        },
        UpdateMonitoringSchedule: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName", "MonitoringScheduleConfig" ],
                members: {
                    MonitoringScheduleName: {},
                    MonitoringScheduleConfig: {
                        shape: "Sdc"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MonitoringScheduleArn" ],
                members: {
                    MonitoringScheduleArn: {}
                }
            }
        },
        UpdateNotebookInstance: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName" ],
                members: {
                    NotebookInstanceName: {},
                    InstanceType: {},
                    RoleArn: {},
                    LifecycleConfigName: {},
                    DisassociateLifecycleConfig: {
                        type: "boolean"
                    },
                    VolumeSizeInGB: {
                        type: "integer"
                    },
                    DefaultCodeRepository: {},
                    AdditionalCodeRepositories: {
                        shape: "Sdx"
                    },
                    AcceleratorTypes: {
                        shape: "Sdu"
                    },
                    DisassociateAcceleratorTypes: {
                        type: "boolean"
                    },
                    DisassociateDefaultCodeRepository: {
                        type: "boolean"
                    },
                    DisassociateAdditionalCodeRepositories: {
                        type: "boolean"
                    },
                    RootAccess: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNotebookInstanceLifecycleConfig: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceLifecycleConfigName" ],
                members: {
                    NotebookInstanceLifecycleConfigName: {},
                    OnCreate: {
                        shape: "Se2"
                    },
                    OnStart: {
                        shape: "Se2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePipeline: {
            input: {
                type: "structure",
                required: [ "PipelineName" ],
                members: {
                    PipelineName: {},
                    PipelineDisplayName: {},
                    PipelineDefinition: {},
                    PipelineDescription: {},
                    RoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineArn: {}
                }
            }
        },
        UpdatePipelineExecution: {
            input: {
                type: "structure",
                required: [ "PipelineExecutionArn" ],
                members: {
                    PipelineExecutionArn: {},
                    PipelineExecutionDescription: {},
                    PipelineExecutionDisplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineExecutionArn: {}
                }
            }
        },
        UpdateTrainingJob: {
            input: {
                type: "structure",
                required: [ "TrainingJobName" ],
                members: {
                    TrainingJobName: {},
                    ProfilerConfig: {
                        type: "structure",
                        members: {
                            S3OutputPath: {},
                            ProfilingIntervalInMilliseconds: {
                                type: "long"
                            },
                            ProfilingParameters: {
                                shape: "Sgj"
                            },
                            DisableProfiler: {
                                type: "boolean"
                            }
                        }
                    },
                    ProfilerRuleConfigurations: {
                        shape: "Sgk"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrainingJobArn" ],
                members: {
                    TrainingJobArn: {}
                }
            }
        },
        UpdateTrial: {
            input: {
                type: "structure",
                required: [ "TrialName" ],
                members: {
                    TrialName: {},
                    DisplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialArn: {}
                }
            }
        },
        UpdateTrialComponent: {
            input: {
                type: "structure",
                required: [ "TrialComponentName" ],
                members: {
                    TrialComponentName: {},
                    DisplayName: {},
                    Status: {
                        shape: "Sh4"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Parameters: {
                        shape: "Sh8"
                    },
                    ParametersToRemove: {
                        shape: "S12r"
                    },
                    InputArtifacts: {
                        shape: "Shc"
                    },
                    InputArtifactsToRemove: {
                        shape: "S12r"
                    },
                    OutputArtifacts: {
                        shape: "Shc"
                    },
                    OutputArtifactsToRemove: {
                        shape: "S12r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentArn: {}
                }
            }
        },
        UpdateUserProfile: {
            input: {
                type: "structure",
                required: [ "DomainId", "UserProfileName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {},
                    UserSettings: {
                        shape: "S74"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserProfileArn: {}
                }
            }
        },
        UpdateWorkforce: {
            input: {
                type: "structure",
                required: [ "WorkforceName" ],
                members: {
                    WorkforceName: {},
                    SourceIpConfig: {
                        shape: "Sht"
                    },
                    OidcConfig: {
                        shape: "Shq"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Workforce" ],
                members: {
                    Workforce: {
                        shape: "Sqq"
                    }
                }
            }
        },
        UpdateWorkteam: {
            input: {
                type: "structure",
                required: [ "WorkteamName" ],
                members: {
                    WorkteamName: {},
                    MemberDefinitions: {
                        shape: "Si1"
                    },
                    Description: {},
                    NotificationConfiguration: {
                        shape: "Si9"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Workteam" ],
                members: {
                    Workteam: {
                        shape: "Squ"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Si: {
            type: "structure",
            required: [ "SourceUri" ],
            members: {
                SourceUri: {},
                SourceType: {},
                SourceId: {}
            }
        },
        Sn: {
            type: "map",
            key: {},
            value: {}
        },
        Sp: {
            type: "structure",
            members: {
                CommitId: {},
                Repository: {},
                GeneratedBy: {},
                ProjectId: {}
            }
        },
        Sw: {
            type: "structure",
            required: [ "TrainingImage", "SupportedTrainingInstanceTypes", "TrainingChannels" ],
            members: {
                TrainingImage: {},
                TrainingImageDigest: {},
                SupportedHyperParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Type" ],
                        members: {
                            Name: {},
                            Description: {},
                            Type: {},
                            Range: {
                                type: "structure",
                                members: {
                                    IntegerParameterRangeSpecification: {
                                        type: "structure",
                                        required: [ "MinValue", "MaxValue" ],
                                        members: {
                                            MinValue: {},
                                            MaxValue: {}
                                        }
                                    },
                                    ContinuousParameterRangeSpecification: {
                                        type: "structure",
                                        required: [ "MinValue", "MaxValue" ],
                                        members: {
                                            MinValue: {},
                                            MaxValue: {}
                                        }
                                    },
                                    CategoricalParameterRangeSpecification: {
                                        type: "structure",
                                        required: [ "Values" ],
                                        members: {
                                            Values: {
                                                shape: "S18"
                                            }
                                        }
                                    }
                                }
                            },
                            IsTunable: {
                                type: "boolean"
                            },
                            IsRequired: {
                                type: "boolean"
                            },
                            DefaultValue: {}
                        }
                    }
                },
                SupportedTrainingInstanceTypes: {
                    type: "list",
                    member: {}
                },
                SupportsDistributedTraining: {
                    type: "boolean"
                },
                MetricDefinitions: {
                    shape: "S1d"
                },
                TrainingChannels: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "SupportedContentTypes", "SupportedInputModes" ],
                        members: {
                            Name: {},
                            Description: {},
                            IsRequired: {
                                type: "boolean"
                            },
                            SupportedContentTypes: {
                                shape: "S1k"
                            },
                            SupportedCompressionTypes: {
                                type: "list",
                                member: {}
                            },
                            SupportedInputModes: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                SupportedTuningJobObjectiveMetrics: {
                    type: "list",
                    member: {
                        shape: "S1r"
                    }
                }
            }
        },
        S18: {
            type: "list",
            member: {}
        },
        S1d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Regex" ],
                members: {
                    Name: {},
                    Regex: {}
                }
            }
        },
        S1k: {
            type: "list",
            member: {}
        },
        S1r: {
            type: "structure",
            required: [ "Type", "MetricName" ],
            members: {
                Type: {},
                MetricName: {}
            }
        },
        S1t: {
            type: "structure",
            required: [ "Containers", "SupportedContentTypes", "SupportedResponseMIMETypes" ],
            members: {
                Containers: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Image" ],
                        members: {
                            ContainerHostname: {},
                            Image: {},
                            ImageDigest: {},
                            ModelDataUrl: {},
                            ProductId: {}
                        }
                    }
                },
                SupportedTransformInstanceTypes: {
                    type: "list",
                    member: {}
                },
                SupportedRealtimeInferenceInstanceTypes: {
                    type: "list",
                    member: {}
                },
                SupportedContentTypes: {
                    shape: "S1k"
                },
                SupportedResponseMIMETypes: {
                    type: "list",
                    member: {}
                }
            }
        },
        S25: {
            type: "structure",
            required: [ "ValidationRole", "ValidationProfiles" ],
            members: {
                ValidationRole: {},
                ValidationProfiles: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ProfileName", "TrainingJobDefinition" ],
                        members: {
                            ProfileName: {},
                            TrainingJobDefinition: {
                                type: "structure",
                                required: [ "TrainingInputMode", "InputDataConfig", "OutputDataConfig", "ResourceConfig", "StoppingCondition" ],
                                members: {
                                    TrainingInputMode: {},
                                    HyperParameters: {
                                        shape: "S2a"
                                    },
                                    InputDataConfig: {
                                        shape: "S2c"
                                    },
                                    OutputDataConfig: {
                                        shape: "S2t"
                                    },
                                    ResourceConfig: {
                                        shape: "S2v"
                                    },
                                    StoppingCondition: {
                                        shape: "S2y"
                                    }
                                }
                            },
                            TransformJobDefinition: {
                                shape: "S31"
                            }
                        }
                    }
                }
            }
        },
        S2a: {
            type: "map",
            key: {},
            value: {}
        },
        S2c: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ChannelName", "DataSource" ],
                members: {
                    ChannelName: {},
                    DataSource: {
                        type: "structure",
                        members: {
                            S3DataSource: {
                                type: "structure",
                                required: [ "S3DataType", "S3Uri" ],
                                members: {
                                    S3DataType: {},
                                    S3Uri: {},
                                    S3DataDistributionType: {},
                                    AttributeNames: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            },
                            FileSystemDataSource: {
                                type: "structure",
                                required: [ "FileSystemId", "FileSystemAccessMode", "FileSystemType", "DirectoryPath" ],
                                members: {
                                    FileSystemId: {},
                                    FileSystemAccessMode: {},
                                    FileSystemType: {},
                                    DirectoryPath: {}
                                }
                            }
                        }
                    },
                    ContentType: {},
                    CompressionType: {},
                    RecordWrapperType: {},
                    InputMode: {},
                    ShuffleConfig: {
                        type: "structure",
                        required: [ "Seed" ],
                        members: {
                            Seed: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S2t: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                KmsKeyId: {},
                S3OutputPath: {}
            }
        },
        S2v: {
            type: "structure",
            required: [ "InstanceType", "InstanceCount", "VolumeSizeInGB" ],
            members: {
                InstanceType: {},
                InstanceCount: {
                    type: "integer"
                },
                VolumeSizeInGB: {
                    type: "integer"
                },
                VolumeKmsKeyId: {}
            }
        },
        S2y: {
            type: "structure",
            members: {
                MaxRuntimeInSeconds: {
                    type: "integer"
                },
                MaxWaitTimeInSeconds: {
                    type: "integer"
                }
            }
        },
        S31: {
            type: "structure",
            required: [ "TransformInput", "TransformOutput", "TransformResources" ],
            members: {
                MaxConcurrentTransforms: {
                    type: "integer"
                },
                MaxPayloadInMB: {
                    type: "integer"
                },
                BatchStrategy: {},
                Environment: {
                    shape: "S35"
                },
                TransformInput: {
                    shape: "S38"
                },
                TransformOutput: {
                    shape: "S3c"
                },
                TransformResources: {
                    shape: "S3f"
                }
            }
        },
        S35: {
            type: "map",
            key: {},
            value: {}
        },
        S38: {
            type: "structure",
            required: [ "DataSource" ],
            members: {
                DataSource: {
                    type: "structure",
                    required: [ "S3DataSource" ],
                    members: {
                        S3DataSource: {
                            type: "structure",
                            required: [ "S3DataType", "S3Uri" ],
                            members: {
                                S3DataType: {},
                                S3Uri: {}
                            }
                        }
                    }
                },
                ContentType: {},
                CompressionType: {},
                SplitType: {}
            }
        },
        S3c: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                S3OutputPath: {},
                Accept: {},
                AssembleWith: {},
                KmsKeyId: {}
            }
        },
        S3f: {
            type: "structure",
            required: [ "InstanceType", "InstanceCount" ],
            members: {
                InstanceType: {},
                InstanceCount: {
                    type: "integer"
                },
                VolumeKmsKeyId: {}
            }
        },
        S3p: {
            type: "structure",
            members: {
                SageMakerImageArn: {},
                SageMakerImageVersionArn: {},
                InstanceType: {}
            }
        },
        S3x: {
            type: "structure",
            required: [ "KernelSpecs" ],
            members: {
                KernelSpecs: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            DisplayName: {}
                        }
                    }
                },
                FileSystemConfig: {
                    type: "structure",
                    members: {
                        MountPath: {},
                        DefaultUid: {
                            type: "integer"
                        },
                        DefaultGid: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S49: {
            type: "structure",
            required: [ "SourceUri" ],
            members: {
                SourceUri: {},
                SourceTypes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "SourceIdType", "Value" ],
                        members: {
                            SourceIdType: {},
                            Value: {}
                        }
                    }
                }
            }
        },
        S4h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DataSource", "TargetAttributeName" ],
                members: {
                    DataSource: {
                        type: "structure",
                        required: [ "S3DataSource" ],
                        members: {
                            S3DataSource: {
                                type: "structure",
                                required: [ "S3DataType", "S3Uri" ],
                                members: {
                                    S3DataType: {},
                                    S3Uri: {}
                                }
                            }
                        }
                    },
                    CompressionType: {},
                    TargetAttributeName: {}
                }
            }
        },
        S4n: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                KmsKeyId: {},
                S3OutputPath: {}
            }
        },
        S4p: {
            type: "structure",
            required: [ "MetricName" ],
            members: {
                MetricName: {}
            }
        },
        S4r: {
            type: "structure",
            members: {
                CompletionCriteria: {
                    shape: "S4s"
                },
                SecurityConfig: {
                    type: "structure",
                    members: {
                        VolumeKmsKeyId: {},
                        EnableInterContainerTrafficEncryption: {
                            type: "boolean"
                        },
                        VpcConfig: {
                            shape: "S4x"
                        }
                    }
                }
            }
        },
        S4s: {
            type: "structure",
            members: {
                MaxCandidates: {
                    type: "integer"
                },
                MaxRuntimePerTrainingJobInSeconds: {
                    type: "integer"
                },
                MaxAutoMLJobRuntimeInSeconds: {
                    type: "integer"
                }
            }
        },
        S4x: {
            type: "structure",
            required: [ "SecurityGroupIds", "Subnets" ],
            members: {
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                },
                Subnets: {
                    shape: "S50"
                }
            }
        },
        S50: {
            type: "list",
            member: {}
        },
        S56: {
            type: "structure",
            required: [ "RepositoryUrl" ],
            members: {
                RepositoryUrl: {},
                Branch: {},
                SecretArn: {}
            }
        },
        S5d: {
            type: "structure",
            required: [ "S3Uri", "DataInputConfig", "Framework" ],
            members: {
                S3Uri: {},
                DataInputConfig: {},
                Framework: {},
                FrameworkVersion: {}
            }
        },
        S5h: {
            type: "structure",
            required: [ "S3OutputLocation" ],
            members: {
                S3OutputLocation: {},
                TargetDevice: {},
                TargetPlatform: {
                    type: "structure",
                    required: [ "Os", "Arch" ],
                    members: {
                        Os: {},
                        Arch: {},
                        Accelerator: {}
                    }
                },
                CompilerOptions: {},
                KmsKeyId: {}
            }
        },
        S5r: {
            type: "structure",
            required: [ "SourceUri" ],
            members: {
                SourceUri: {},
                SourceType: {},
                SourceId: {}
            }
        },
        S5w: {
            type: "structure",
            members: {
                BaseliningJobName: {},
                ConstraintsResource: {
                    shape: "S5y"
                },
                StatisticsResource: {
                    shape: "S5z"
                }
            }
        },
        S5y: {
            type: "structure",
            members: {
                S3Uri: {}
            }
        },
        S5z: {
            type: "structure",
            members: {
                S3Uri: {}
            }
        },
        S60: {
            type: "structure",
            required: [ "ImageUri" ],
            members: {
                ImageUri: {},
                ContainerEntrypoint: {
                    shape: "S62"
                },
                ContainerArguments: {
                    shape: "S64"
                },
                RecordPreprocessorSourceUri: {},
                PostAnalyticsProcessorSourceUri: {},
                Environment: {
                    shape: "S66"
                }
            }
        },
        S62: {
            type: "list",
            member: {}
        },
        S64: {
            type: "list",
            member: {}
        },
        S66: {
            type: "map",
            key: {},
            value: {}
        },
        S69: {
            type: "structure",
            required: [ "EndpointInput" ],
            members: {
                EndpointInput: {
                    shape: "S6a"
                }
            }
        },
        S6a: {
            type: "structure",
            required: [ "EndpointName", "LocalPath" ],
            members: {
                EndpointName: {},
                LocalPath: {},
                S3InputMode: {},
                S3DataDistributionType: {},
                FeaturesAttribute: {},
                InferenceAttribute: {},
                ProbabilityAttribute: {},
                ProbabilityThresholdAttribute: {
                    type: "double"
                },
                StartTimeOffset: {},
                EndTimeOffset: {}
            }
        },
        S6i: {
            type: "structure",
            required: [ "MonitoringOutputs" ],
            members: {
                MonitoringOutputs: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "S3Output" ],
                        members: {
                            S3Output: {
                                type: "structure",
                                required: [ "S3Uri", "LocalPath" ],
                                members: {
                                    S3Uri: {},
                                    LocalPath: {},
                                    S3UploadMode: {}
                                }
                            }
                        }
                    }
                },
                KmsKeyId: {}
            }
        },
        S6o: {
            type: "structure",
            required: [ "ClusterConfig" ],
            members: {
                ClusterConfig: {
                    type: "structure",
                    required: [ "InstanceCount", "InstanceType", "VolumeSizeInGB" ],
                    members: {
                        InstanceCount: {
                            type: "integer"
                        },
                        InstanceType: {},
                        VolumeSizeInGB: {
                            type: "integer"
                        },
                        VolumeKmsKeyId: {}
                    }
                }
            }
        },
        S6t: {
            type: "structure",
            members: {
                EnableInterContainerTrafficEncryption: {
                    type: "boolean"
                },
                EnableNetworkIsolation: {
                    type: "boolean"
                },
                VpcConfig: {
                    shape: "S4x"
                }
            }
        },
        S6u: {
            type: "structure",
            required: [ "MaxRuntimeInSeconds" ],
            members: {
                MaxRuntimeInSeconds: {
                    type: "integer"
                }
            }
        },
        S70: {
            type: "structure",
            required: [ "S3OutputLocation" ],
            members: {
                S3OutputLocation: {},
                KmsKeyId: {}
            }
        },
        S74: {
            type: "structure",
            members: {
                ExecutionRole: {},
                SecurityGroups: {
                    shape: "S75"
                },
                SharingSettings: {
                    type: "structure",
                    members: {
                        NotebookOutputOption: {},
                        S3OutputPath: {},
                        S3KmsKeyId: {}
                    }
                },
                JupyterServerAppSettings: {
                    type: "structure",
                    members: {
                        DefaultResourceSpec: {
                            shape: "S3p"
                        }
                    }
                },
                KernelGatewayAppSettings: {
                    type: "structure",
                    members: {
                        DefaultResourceSpec: {
                            shape: "S3p"
                        },
                        CustomImages: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "ImageName", "AppImageConfigName" ],
                                members: {
                                    ImageName: {},
                                    ImageVersionNumber: {
                                        type: "integer"
                                    },
                                    AppImageConfigName: {}
                                }
                            }
                        }
                    }
                },
                TensorBoardAppSettings: {
                    type: "structure",
                    members: {
                        DefaultResourceSpec: {
                            shape: "S3p"
                        }
                    }
                }
            }
        },
        S75: {
            type: "list",
            member: {}
        },
        S7r: {
            type: "list",
            member: {
                type: "structure",
                required: [ "VariantName", "ModelName", "InitialInstanceCount", "InstanceType" ],
                members: {
                    VariantName: {},
                    ModelName: {},
                    InitialInstanceCount: {
                        type: "integer"
                    },
                    InstanceType: {},
                    InitialVariantWeight: {
                        type: "float"
                    },
                    AcceleratorType: {},
                    CoreDumpConfig: {
                        type: "structure",
                        required: [ "DestinationS3Uri" ],
                        members: {
                            DestinationS3Uri: {},
                            KmsKeyId: {}
                        }
                    }
                }
            }
        },
        S80: {
            type: "structure",
            required: [ "InitialSamplingPercentage", "DestinationS3Uri", "CaptureOptions" ],
            members: {
                EnableCapture: {
                    type: "boolean"
                },
                InitialSamplingPercentage: {
                    type: "integer"
                },
                DestinationS3Uri: {},
                KmsKeyId: {},
                CaptureOptions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "CaptureMode" ],
                        members: {
                            CaptureMode: {}
                        }
                    }
                },
                CaptureContentTypeHeader: {
                    type: "structure",
                    members: {
                        CsvContentTypes: {
                            type: "list",
                            member: {}
                        },
                        JsonContentTypes: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S8j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FeatureName: {},
                    FeatureType: {}
                }
            }
        },
        S8m: {
            type: "structure",
            members: {
                SecurityConfig: {
                    type: "structure",
                    members: {
                        KmsKeyId: {}
                    }
                },
                EnableOnlineStore: {
                    type: "boolean"
                }
            }
        },
        S8o: {
            type: "structure",
            required: [ "S3StorageConfig" ],
            members: {
                S3StorageConfig: {
                    type: "structure",
                    required: [ "S3Uri" ],
                    members: {
                        S3Uri: {},
                        KmsKeyId: {},
                        ResolvedOutputS3Uri: {}
                    }
                },
                DisableGlueTableCreation: {
                    type: "boolean"
                },
                DataCatalogConfig: {
                    type: "structure",
                    required: [ "TableName", "Catalog", "Database" ],
                    members: {
                        TableName: {},
                        Catalog: {},
                        Database: {}
                    }
                }
            }
        },
        S8z: {
            type: "structure",
            required: [ "AwsManagedHumanLoopRequestSource" ],
            members: {
                AwsManagedHumanLoopRequestSource: {}
            }
        },
        S91: {
            type: "structure",
            required: [ "HumanLoopActivationConditionsConfig" ],
            members: {
                HumanLoopActivationConditionsConfig: {
                    type: "structure",
                    required: [ "HumanLoopActivationConditions" ],
                    members: {
                        HumanLoopActivationConditions: {
                            jsonvalue: true
                        }
                    }
                }
            }
        },
        S94: {
            type: "structure",
            required: [ "WorkteamArn", "HumanTaskUiArn", "TaskTitle", "TaskDescription", "TaskCount" ],
            members: {
                WorkteamArn: {},
                HumanTaskUiArn: {},
                TaskTitle: {},
                TaskDescription: {},
                TaskCount: {
                    type: "integer"
                },
                TaskAvailabilityLifetimeInSeconds: {
                    type: "integer"
                },
                TaskTimeLimitInSeconds: {
                    type: "integer"
                },
                TaskKeywords: {
                    type: "list",
                    member: {}
                },
                PublicWorkforceTaskPrice: {
                    shape: "S9e"
                }
            }
        },
        S9e: {
            type: "structure",
            members: {
                AmountInUsd: {
                    type: "structure",
                    members: {
                        Dollars: {
                            type: "integer"
                        },
                        Cents: {
                            type: "integer"
                        },
                        TenthFractionsOfACent: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S9j: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                S3OutputPath: {},
                KmsKeyId: {}
            }
        },
        S9o: {
            type: "structure",
            required: [ "Content" ],
            members: {
                Content: {}
            }
        },
        S9t: {
            type: "structure",
            required: [ "Strategy", "ResourceLimits" ],
            members: {
                Strategy: {},
                HyperParameterTuningJobObjective: {
                    shape: "S1r"
                },
                ResourceLimits: {
                    shape: "S9v"
                },
                ParameterRanges: {
                    shape: "S9y"
                },
                TrainingJobEarlyStoppingType: {},
                TuningJobCompletionCriteria: {
                    type: "structure",
                    required: [ "TargetObjectiveMetricValue" ],
                    members: {
                        TargetObjectiveMetricValue: {
                            type: "float"
                        }
                    }
                }
            }
        },
        S9v: {
            type: "structure",
            required: [ "MaxNumberOfTrainingJobs", "MaxParallelTrainingJobs" ],
            members: {
                MaxNumberOfTrainingJobs: {
                    type: "integer"
                },
                MaxParallelTrainingJobs: {
                    type: "integer"
                }
            }
        },
        S9y: {
            type: "structure",
            members: {
                IntegerParameterRanges: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "MinValue", "MaxValue" ],
                        members: {
                            Name: {},
                            MinValue: {},
                            MaxValue: {},
                            ScalingType: {}
                        }
                    }
                },
                ContinuousParameterRanges: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "MinValue", "MaxValue" ],
                        members: {
                            Name: {},
                            MinValue: {},
                            MaxValue: {},
                            ScalingType: {}
                        }
                    }
                },
                CategoricalParameterRanges: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                shape: "S18"
                            }
                        }
                    }
                }
            }
        },
        Saa: {
            type: "structure",
            required: [ "AlgorithmSpecification", "RoleArn", "OutputDataConfig", "ResourceConfig", "StoppingCondition" ],
            members: {
                DefinitionName: {},
                TuningObjective: {
                    shape: "S1r"
                },
                HyperParameterRanges: {
                    shape: "S9y"
                },
                StaticHyperParameters: {
                    shape: "S2a"
                },
                AlgorithmSpecification: {
                    type: "structure",
                    required: [ "TrainingInputMode" ],
                    members: {
                        TrainingImage: {},
                        TrainingInputMode: {},
                        AlgorithmName: {},
                        MetricDefinitions: {
                            shape: "S1d"
                        }
                    }
                },
                RoleArn: {},
                InputDataConfig: {
                    shape: "S2c"
                },
                VpcConfig: {
                    shape: "S4x"
                },
                OutputDataConfig: {
                    shape: "S2t"
                },
                ResourceConfig: {
                    shape: "S2v"
                },
                StoppingCondition: {
                    shape: "S2y"
                },
                EnableNetworkIsolation: {
                    type: "boolean"
                },
                EnableInterContainerTrafficEncryption: {
                    type: "boolean"
                },
                EnableManagedSpotTraining: {
                    type: "boolean"
                },
                CheckpointConfig: {
                    shape: "Saf"
                }
            }
        },
        Saf: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                S3Uri: {},
                LocalPath: {}
            }
        },
        Sag: {
            type: "list",
            member: {
                shape: "Saa"
            }
        },
        Sah: {
            type: "structure",
            required: [ "ParentHyperParameterTuningJobs", "WarmStartType" ],
            members: {
                ParentHyperParameterTuningJobs: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            HyperParameterTuningJobName: {}
                        }
                    }
                },
                WarmStartType: {}
            }
        },
        Say: {
            type: "structure",
            required: [ "DataSource" ],
            members: {
                DataSource: {
                    type: "structure",
                    members: {
                        S3DataSource: {
                            type: "structure",
                            required: [ "ManifestS3Uri" ],
                            members: {
                                ManifestS3Uri: {}
                            }
                        },
                        SnsDataSource: {
                            type: "structure",
                            required: [ "SnsTopicArn" ],
                            members: {
                                SnsTopicArn: {}
                            }
                        }
                    }
                },
                DataAttributes: {
                    type: "structure",
                    members: {
                        ContentClassifiers: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        Sb6: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                S3OutputPath: {},
                KmsKeyId: {},
                SnsTopicArn: {}
            }
        },
        Sb7: {
            type: "structure",
            members: {
                MaxHumanLabeledObjectCount: {
                    type: "integer"
                },
                MaxPercentageOfInputDatasetLabeled: {
                    type: "integer"
                }
            }
        },
        Sba: {
            type: "structure",
            required: [ "LabelingJobAlgorithmSpecificationArn" ],
            members: {
                LabelingJobAlgorithmSpecificationArn: {},
                InitialActiveLearningModelArn: {},
                LabelingJobResourceConfig: {
                    type: "structure",
                    members: {
                        VolumeKmsKeyId: {}
                    }
                }
            }
        },
        Sbe: {
            type: "structure",
            required: [ "WorkteamArn", "UiConfig", "PreHumanTaskLambdaArn", "TaskTitle", "TaskDescription", "NumberOfHumanWorkersPerDataObject", "TaskTimeLimitInSeconds", "AnnotationConsolidationConfig" ],
            members: {
                WorkteamArn: {},
                UiConfig: {
                    type: "structure",
                    members: {
                        UiTemplateS3Uri: {},
                        HumanTaskUiArn: {}
                    }
                },
                PreHumanTaskLambdaArn: {},
                TaskKeywords: {
                    type: "list",
                    member: {}
                },
                TaskTitle: {},
                TaskDescription: {},
                NumberOfHumanWorkersPerDataObject: {
                    type: "integer"
                },
                TaskTimeLimitInSeconds: {
                    type: "integer"
                },
                TaskAvailabilityLifetimeInSeconds: {
                    type: "integer"
                },
                MaxConcurrentTaskCount: {
                    type: "integer"
                },
                AnnotationConsolidationConfig: {
                    type: "structure",
                    required: [ "AnnotationConsolidationLambdaArn" ],
                    members: {
                        AnnotationConsolidationLambdaArn: {}
                    }
                },
                PublicWorkforceTaskPrice: {
                    shape: "S9e"
                }
            }
        },
        Sbt: {
            type: "structure",
            members: {
                ContainerHostname: {},
                Image: {},
                ImageConfig: {
                    type: "structure",
                    required: [ "RepositoryAccessMode" ],
                    members: {
                        RepositoryAccessMode: {},
                        RepositoryAuthConfig: {
                            type: "structure",
                            required: [ "RepositoryCredentialsProviderArn" ],
                            members: {
                                RepositoryCredentialsProviderArn: {}
                            }
                        }
                    }
                },
                Mode: {},
                ModelDataUrl: {},
                Environment: {
                    shape: "Sbz"
                },
                ModelPackageName: {},
                MultiModelConfig: {
                    type: "structure",
                    members: {
                        ModelCacheSetting: {}
                    }
                }
            }
        },
        Sbz: {
            type: "map",
            key: {},
            value: {}
        },
        Sc5: {
            type: "list",
            member: {
                shape: "Sbt"
            }
        },
        Sc6: {
            type: "structure",
            required: [ "Mode" ],
            members: {
                Mode: {}
            }
        },
        Sca: {
            type: "structure",
            members: {
                BaseliningJobName: {},
                ConstraintsResource: {
                    shape: "S5y"
                }
            }
        },
        Scb: {
            type: "structure",
            required: [ "ImageUri", "ConfigUri" ],
            members: {
                ImageUri: {},
                ConfigUri: {},
                Environment: {
                    shape: "S66"
                }
            }
        },
        Scc: {
            type: "structure",
            required: [ "EndpointInput", "GroundTruthS3Input" ],
            members: {
                EndpointInput: {
                    shape: "S6a"
                },
                GroundTruthS3Input: {
                    shape: "Scd"
                }
            }
        },
        Scd: {
            type: "structure",
            members: {
                S3Uri: {}
            }
        },
        Scg: {
            type: "structure",
            members: {
                BaseliningJobName: {},
                ConstraintsResource: {
                    shape: "S5y"
                }
            }
        },
        Sch: {
            type: "structure",
            required: [ "ImageUri", "ConfigUri" ],
            members: {
                ImageUri: {},
                ConfigUri: {},
                Environment: {
                    shape: "S66"
                }
            }
        },
        Sci: {
            type: "structure",
            required: [ "EndpointInput" ],
            members: {
                EndpointInput: {
                    shape: "S6a"
                }
            }
        },
        Scl: {
            type: "structure",
            required: [ "ValidationRole", "ValidationProfiles" ],
            members: {
                ValidationRole: {},
                ValidationProfiles: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ProfileName", "TransformJobDefinition" ],
                        members: {
                            ProfileName: {},
                            TransformJobDefinition: {
                                shape: "S31"
                            }
                        }
                    }
                }
            }
        },
        Sco: {
            type: "structure",
            required: [ "SourceAlgorithms" ],
            members: {
                SourceAlgorithms: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "AlgorithmName" ],
                        members: {
                            ModelDataUrl: {},
                            AlgorithmName: {}
                        }
                    }
                }
            }
        },
        Scs: {
            type: "structure",
            members: {
                ModelQuality: {
                    type: "structure",
                    members: {
                        Statistics: {
                            shape: "Scu"
                        },
                        Constraints: {
                            shape: "Scu"
                        }
                    }
                },
                ModelDataQuality: {
                    type: "structure",
                    members: {
                        Statistics: {
                            shape: "Scu"
                        },
                        Constraints: {
                            shape: "Scu"
                        }
                    }
                },
                Bias: {
                    type: "structure",
                    members: {
                        Report: {
                            shape: "Scu"
                        }
                    }
                },
                Explainability: {
                    type: "structure",
                    members: {
                        Report: {
                            shape: "Scu"
                        }
                    }
                }
            }
        },
        Scu: {
            type: "structure",
            required: [ "ContentType", "S3Uri" ],
            members: {
                ContentType: {},
                ContentDigest: {},
                S3Uri: {}
            }
        },
        Sd5: {
            type: "structure",
            members: {
                BaseliningJobName: {},
                ConstraintsResource: {
                    shape: "S5y"
                }
            }
        },
        Sd6: {
            type: "structure",
            required: [ "ImageUri" ],
            members: {
                ImageUri: {},
                ContainerEntrypoint: {
                    shape: "S62"
                },
                ContainerArguments: {
                    shape: "S64"
                },
                RecordPreprocessorSourceUri: {},
                PostAnalyticsProcessorSourceUri: {},
                ProblemType: {},
                Environment: {
                    shape: "S66"
                }
            }
        },
        Sd8: {
            type: "structure",
            required: [ "EndpointInput", "GroundTruthS3Input" ],
            members: {
                EndpointInput: {
                    shape: "S6a"
                },
                GroundTruthS3Input: {
                    shape: "Scd"
                }
            }
        },
        Sdc: {
            type: "structure",
            members: {
                ScheduleConfig: {
                    type: "structure",
                    required: [ "ScheduleExpression" ],
                    members: {
                        ScheduleExpression: {}
                    }
                },
                MonitoringJobDefinition: {
                    type: "structure",
                    required: [ "MonitoringInputs", "MonitoringOutputConfig", "MonitoringResources", "MonitoringAppSpecification", "RoleArn" ],
                    members: {
                        BaselineConfig: {
                            type: "structure",
                            members: {
                                BaseliningJobName: {},
                                ConstraintsResource: {
                                    shape: "S5y"
                                },
                                StatisticsResource: {
                                    shape: "S5z"
                                }
                            }
                        },
                        MonitoringInputs: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "EndpointInput" ],
                                members: {
                                    EndpointInput: {
                                        shape: "S6a"
                                    }
                                }
                            }
                        },
                        MonitoringOutputConfig: {
                            shape: "S6i"
                        },
                        MonitoringResources: {
                            shape: "S6o"
                        },
                        MonitoringAppSpecification: {
                            type: "structure",
                            required: [ "ImageUri" ],
                            members: {
                                ImageUri: {},
                                ContainerEntrypoint: {
                                    shape: "S62"
                                },
                                ContainerArguments: {
                                    shape: "S64"
                                },
                                RecordPreprocessorSourceUri: {},
                                PostAnalyticsProcessorSourceUri: {}
                            }
                        },
                        StoppingCondition: {
                            shape: "S6u"
                        },
                        Environment: {
                            shape: "S66"
                        },
                        NetworkConfig: {
                            shape: "Sdk"
                        },
                        RoleArn: {}
                    }
                },
                MonitoringJobDefinitionName: {},
                MonitoringType: {}
            }
        },
        Sdk: {
            type: "structure",
            members: {
                EnableInterContainerTrafficEncryption: {
                    type: "boolean"
                },
                EnableNetworkIsolation: {
                    type: "boolean"
                },
                VpcConfig: {
                    shape: "S4x"
                }
            }
        },
        Sdu: {
            type: "list",
            member: {}
        },
        Sdx: {
            type: "list",
            member: {}
        },
        Se2: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Content: {}
                }
            }
        },
        Sen: {
            type: "list",
            member: {
                type: "structure",
                required: [ "InputName" ],
                members: {
                    InputName: {},
                    AppManaged: {
                        type: "boolean"
                    },
                    S3Input: {
                        type: "structure",
                        required: [ "S3Uri", "S3DataType" ],
                        members: {
                            S3Uri: {},
                            LocalPath: {},
                            S3DataType: {},
                            S3InputMode: {},
                            S3DataDistributionType: {},
                            S3CompressionType: {}
                        }
                    },
                    DatasetDefinition: {
                        type: "structure",
                        members: {
                            AthenaDatasetDefinition: {
                                type: "structure",
                                required: [ "Catalog", "Database", "QueryString", "OutputS3Uri", "OutputFormat" ],
                                members: {
                                    Catalog: {},
                                    Database: {},
                                    QueryString: {},
                                    WorkGroup: {},
                                    OutputS3Uri: {},
                                    KmsKeyId: {},
                                    OutputFormat: {},
                                    OutputCompression: {}
                                }
                            },
                            RedshiftDatasetDefinition: {
                                type: "structure",
                                required: [ "ClusterId", "Database", "DbUser", "QueryString", "ClusterRoleArn", "OutputS3Uri", "OutputFormat" ],
                                members: {
                                    ClusterId: {},
                                    Database: {},
                                    DbUser: {},
                                    QueryString: {},
                                    ClusterRoleArn: {},
                                    OutputS3Uri: {},
                                    KmsKeyId: {},
                                    OutputFormat: {},
                                    OutputCompression: {}
                                }
                            },
                            LocalPath: {},
                            DataDistributionType: {},
                            InputMode: {}
                        }
                    }
                }
            }
        },
        Sfa: {
            type: "structure",
            required: [ "Outputs" ],
            members: {
                Outputs: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "OutputName" ],
                        members: {
                            OutputName: {},
                            S3Output: {
                                type: "structure",
                                required: [ "S3Uri", "LocalPath", "S3UploadMode" ],
                                members: {
                                    S3Uri: {},
                                    LocalPath: {},
                                    S3UploadMode: {}
                                }
                            },
                            FeatureStoreOutput: {
                                type: "structure",
                                required: [ "FeatureGroupName" ],
                                members: {
                                    FeatureGroupName: {}
                                }
                            },
                            AppManaged: {
                                type: "boolean"
                            }
                        }
                    }
                },
                KmsKeyId: {}
            }
        },
        Sff: {
            type: "structure",
            required: [ "ClusterConfig" ],
            members: {
                ClusterConfig: {
                    type: "structure",
                    required: [ "InstanceCount", "InstanceType", "VolumeSizeInGB" ],
                    members: {
                        InstanceCount: {
                            type: "integer"
                        },
                        InstanceType: {},
                        VolumeSizeInGB: {
                            type: "integer"
                        },
                        VolumeKmsKeyId: {}
                    }
                }
            }
        },
        Sfh: {
            type: "structure",
            required: [ "MaxRuntimeInSeconds" ],
            members: {
                MaxRuntimeInSeconds: {
                    type: "integer"
                }
            }
        },
        Sfj: {
            type: "structure",
            required: [ "ImageUri" ],
            members: {
                ImageUri: {},
                ContainerEntrypoint: {
                    shape: "S62"
                },
                ContainerArguments: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sfl: {
            type: "map",
            key: {},
            value: {}
        },
        Sfm: {
            type: "structure",
            members: {
                ExperimentName: {},
                TrialName: {},
                TrialComponentDisplayName: {}
            }
        },
        Sfr: {
            type: "structure",
            required: [ "ProductId", "ProvisioningArtifactId" ],
            members: {
                ProductId: {},
                ProvisioningArtifactId: {},
                PathId: {},
                ProvisioningParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {}
                        }
                    }
                }
            }
        },
        Sg2: {
            type: "structure",
            required: [ "TrainingInputMode" ],
            members: {
                TrainingImage: {},
                AlgorithmName: {},
                TrainingInputMode: {},
                MetricDefinitions: {
                    shape: "S1d"
                },
                EnableSageMakerMetricsTimeSeries: {
                    type: "boolean"
                }
            }
        },
        Sg3: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                LocalPath: {},
                S3OutputPath: {},
                HookParameters: {
                    type: "map",
                    key: {},
                    value: {}
                },
                CollectionConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            CollectionName: {},
                            CollectionParameters: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            }
        },
        Sgb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "RuleConfigurationName", "RuleEvaluatorImage" ],
                members: {
                    RuleConfigurationName: {},
                    LocalPath: {},
                    S3OutputPath: {},
                    RuleEvaluatorImage: {},
                    InstanceType: {},
                    VolumeSizeInGB: {
                        type: "integer"
                    },
                    RuleParameters: {
                        shape: "Sgf"
                    }
                }
            }
        },
        Sgf: {
            type: "map",
            key: {},
            value: {}
        },
        Sgg: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                LocalPath: {},
                S3OutputPath: {}
            }
        },
        Sgh: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                S3OutputPath: {},
                ProfilingIntervalInMilliseconds: {
                    type: "long"
                },
                ProfilingParameters: {
                    shape: "Sgj"
                }
            }
        },
        Sgj: {
            type: "map",
            key: {},
            value: {}
        },
        Sgk: {
            type: "list",
            member: {
                type: "structure",
                required: [ "RuleConfigurationName", "RuleEvaluatorImage" ],
                members: {
                    RuleConfigurationName: {},
                    LocalPath: {},
                    S3OutputPath: {},
                    RuleEvaluatorImage: {},
                    InstanceType: {},
                    VolumeSizeInGB: {
                        type: "integer"
                    },
                    RuleParameters: {
                        shape: "Sgf"
                    }
                }
            }
        },
        Sgm: {
            type: "map",
            key: {},
            value: {}
        },
        Sgt: {
            type: "structure",
            members: {
                InvocationsTimeoutInSeconds: {
                    type: "integer"
                },
                InvocationsMaxRetries: {
                    type: "integer"
                }
            }
        },
        Sgw: {
            type: "structure",
            members: {
                InputFilter: {},
                OutputFilter: {},
                JoinSource: {}
            }
        },
        Sh4: {
            type: "structure",
            members: {
                PrimaryStatus: {},
                Message: {}
            }
        },
        Sh8: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    StringValue: {},
                    NumberValue: {
                        type: "double"
                    }
                }
            }
        },
        Shc: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "Value" ],
                members: {
                    MediaType: {},
                    Value: {}
                }
            }
        },
        Shn: {
            type: "structure",
            required: [ "UserPool", "ClientId" ],
            members: {
                UserPool: {},
                ClientId: {}
            }
        },
        Shq: {
            type: "structure",
            required: [ "ClientId", "ClientSecret", "Issuer", "AuthorizationEndpoint", "TokenEndpoint", "UserInfoEndpoint", "LogoutEndpoint", "JwksUri" ],
            members: {
                ClientId: {},
                ClientSecret: {
                    type: "string",
                    sensitive: true
                },
                Issuer: {},
                AuthorizationEndpoint: {},
                TokenEndpoint: {},
                UserInfoEndpoint: {},
                LogoutEndpoint: {},
                JwksUri: {}
            }
        },
        Sht: {
            type: "structure",
            required: [ "Cidrs" ],
            members: {
                Cidrs: {
                    type: "list",
                    member: {}
                }
            }
        },
        Si1: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    CognitoMemberDefinition: {
                        type: "structure",
                        required: [ "UserPool", "UserGroup", "ClientId" ],
                        members: {
                            UserPool: {},
                            UserGroup: {},
                            ClientId: {}
                        }
                    },
                    OidcMemberDefinition: {
                        type: "structure",
                        required: [ "Groups" ],
                        members: {
                            Groups: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        Si9: {
            type: "structure",
            members: {
                NotificationTopicArn: {}
            }
        },
        Sk1: {
            type: "structure",
            members: {
                UserProfileArn: {},
                UserProfileName: {},
                DomainId: {}
            }
        },
        Sk7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Status" ],
                members: {
                    Name: {},
                    Status: {},
                    FailureReason: {}
                }
            }
        },
        Skl: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PartialFailureMessage: {}
                }
            }
        },
        Skn: {
            type: "structure",
            required: [ "CandidateName", "ObjectiveStatus", "CandidateSteps", "CandidateStatus", "CreationTime", "LastModifiedTime" ],
            members: {
                CandidateName: {},
                FinalAutoMLJobObjectiveMetric: {
                    type: "structure",
                    required: [ "MetricName", "Value" ],
                    members: {
                        Type: {},
                        MetricName: {},
                        Value: {
                            type: "float"
                        }
                    }
                },
                ObjectiveStatus: {},
                CandidateSteps: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "CandidateStepType", "CandidateStepArn", "CandidateStepName" ],
                        members: {
                            CandidateStepType: {},
                            CandidateStepArn: {},
                            CandidateStepName: {}
                        }
                    }
                },
                CandidateStatus: {},
                InferenceContainers: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Image", "ModelDataUrl" ],
                        members: {
                            Image: {},
                            ModelDataUrl: {},
                            Environment: {
                                shape: "Sbz"
                            }
                        }
                    }
                },
                CreationTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                FailureReason: {},
                CandidateProperties: {
                    type: "structure",
                    members: {
                        CandidateArtifactLocations: {
                            type: "structure",
                            required: [ "Explainability" ],
                            members: {
                                Explainability: {}
                            }
                        }
                    }
                }
            }
        },
        Slg: {
            type: "structure",
            required: [ "S3ModelArtifacts" ],
            members: {
                S3ModelArtifacts: {}
            }
        },
        Sma: {
            type: "list",
            member: {
                type: "structure",
                required: [ "VariantName" ],
                members: {
                    VariantName: {},
                    DeployedImages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SpecifiedImage: {},
                                ResolvedImage: {},
                                ResolutionTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    CurrentWeight: {
                        type: "float"
                    },
                    DesiredWeight: {
                        type: "float"
                    },
                    CurrentInstanceCount: {
                        type: "integer"
                    },
                    DesiredInstanceCount: {
                        type: "integer"
                    }
                }
            }
        },
        Sme: {
            type: "structure",
            required: [ "EnableCapture", "CaptureStatus", "CurrentSamplingPercentage", "DestinationS3Uri", "KmsKeyId" ],
            members: {
                EnableCapture: {
                    type: "boolean"
                },
                CaptureStatus: {},
                CurrentSamplingPercentage: {
                    type: "integer"
                },
                DestinationS3Uri: {},
                KmsKeyId: {}
            }
        },
        Smh: {
            type: "structure",
            required: [ "BlueGreenUpdatePolicy" ],
            members: {
                BlueGreenUpdatePolicy: {
                    type: "structure",
                    required: [ "TrafficRoutingConfiguration" ],
                    members: {
                        TrafficRoutingConfiguration: {
                            type: "structure",
                            required: [ "Type", "WaitIntervalInSeconds" ],
                            members: {
                                Type: {},
                                WaitIntervalInSeconds: {
                                    type: "integer"
                                },
                                CanarySize: {
                                    type: "structure",
                                    required: [ "Type", "Value" ],
                                    members: {
                                        Type: {},
                                        Value: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        },
                        TerminationWaitInSeconds: {
                            type: "integer"
                        },
                        MaximumExecutionTimeoutInSeconds: {
                            type: "integer"
                        }
                    }
                },
                AutoRollbackConfiguration: {
                    type: "structure",
                    members: {
                        Alarms: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    AlarmName: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        Smz: {
            type: "structure",
            required: [ "SourceArn" ],
            members: {
                SourceArn: {},
                SourceType: {}
            }
        },
        Sn5: {
            type: "structure",
            required: [ "Status" ],
            members: {
                Status: {},
                BlockedReason: {}
            }
        },
        Snk: {
            type: "structure",
            members: {
                Completed: {
                    type: "integer"
                },
                InProgress: {
                    type: "integer"
                },
                RetryableError: {
                    type: "integer"
                },
                NonRetryableError: {
                    type: "integer"
                },
                Stopped: {
                    type: "integer"
                }
            }
        },
        Snm: {
            type: "structure",
            members: {
                Succeeded: {
                    type: "integer"
                },
                Pending: {
                    type: "integer"
                },
                Failed: {
                    type: "integer"
                }
            }
        },
        Sno: {
            type: "structure",
            required: [ "TrainingJobName", "TrainingJobArn", "CreationTime", "TrainingJobStatus", "TunedHyperParameters" ],
            members: {
                TrainingJobDefinitionName: {},
                TrainingJobName: {},
                TrainingJobArn: {},
                TuningJobName: {},
                CreationTime: {
                    type: "timestamp"
                },
                TrainingStartTime: {
                    type: "timestamp"
                },
                TrainingEndTime: {
                    type: "timestamp"
                },
                TrainingJobStatus: {},
                TunedHyperParameters: {
                    shape: "S2a"
                },
                FailureReason: {},
                FinalHyperParameterTuningJobObjectiveMetric: {
                    type: "structure",
                    required: [ "MetricName", "Value" ],
                    members: {
                        Type: {},
                        MetricName: {},
                        Value: {
                            type: "float"
                        }
                    }
                },
                ObjectiveStatus: {}
            }
        },
        So1: {
            type: "structure",
            members: {
                TotalLabeled: {
                    type: "integer"
                },
                HumanLabeled: {
                    type: "integer"
                },
                MachineLabeled: {
                    type: "integer"
                },
                FailedNonRetryableError: {
                    type: "integer"
                },
                Unlabeled: {
                    type: "integer"
                }
            }
        },
        So4: {
            type: "structure",
            required: [ "OutputDatasetS3Uri" ],
            members: {
                OutputDatasetS3Uri: {},
                FinalActiveLearningModelArn: {}
            }
        },
        Sof: {
            type: "structure",
            required: [ "ValidationStatuses" ],
            members: {
                ValidationStatuses: {
                    shape: "Sog"
                },
                ImageScanStatuses: {
                    shape: "Sog"
                }
            }
        },
        Sog: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Status" ],
                members: {
                    Name: {},
                    Status: {},
                    FailureReason: {}
                }
            }
        },
        Sos: {
            type: "structure",
            required: [ "MonitoringScheduleName", "ScheduledTime", "CreationTime", "LastModifiedTime", "MonitoringExecutionStatus" ],
            members: {
                MonitoringScheduleName: {},
                ScheduledTime: {
                    type: "timestamp"
                },
                CreationTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                MonitoringExecutionStatus: {},
                ProcessingJobArn: {},
                EndpointName: {},
                FailureReason: {},
                MonitoringJobDefinitionName: {},
                MonitoringType: {}
            }
        },
        Spm: {
            type: "structure",
            required: [ "WorkteamArn" ],
            members: {
                WorkteamArn: {},
                MarketplaceTitle: {},
                SellerName: {},
                MarketplaceDescription: {},
                ListingId: {}
            }
        },
        Spq: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Status", "StartTime" ],
                members: {
                    Status: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    StatusMessage: {}
                }
            }
        },
        Spt: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    MetricName: {},
                    Value: {
                        type: "float"
                    },
                    Timestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        Spy: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RuleConfigurationName: {},
                    RuleEvaluationJobArn: {},
                    RuleEvaluationStatus: {},
                    StatusDetails: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        Sqa: {
            type: "structure",
            required: [ "SourceArn" ],
            members: {
                SourceArn: {},
                SourceType: {}
            }
        },
        Sqe: {
            type: "structure",
            required: [ "SourceArn" ],
            members: {
                SourceArn: {},
                SourceType: {}
            }
        },
        Sqg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    MetricName: {},
                    SourceArn: {},
                    TimeStamp: {
                        type: "timestamp"
                    },
                    Max: {
                        type: "double"
                    },
                    Min: {
                        type: "double"
                    },
                    Last: {
                        type: "double"
                    },
                    Count: {
                        type: "integer"
                    },
                    Avg: {
                        type: "double"
                    },
                    StdDev: {
                        type: "double"
                    }
                }
            }
        },
        Sqq: {
            type: "structure",
            required: [ "WorkforceName", "WorkforceArn" ],
            members: {
                WorkforceName: {},
                WorkforceArn: {},
                LastUpdatedDate: {
                    type: "timestamp"
                },
                SourceIpConfig: {
                    shape: "Sht"
                },
                SubDomain: {},
                CognitoConfig: {
                    shape: "Shn"
                },
                OidcConfig: {
                    type: "structure",
                    members: {
                        ClientId: {},
                        Issuer: {},
                        AuthorizationEndpoint: {},
                        TokenEndpoint: {},
                        UserInfoEndpoint: {},
                        LogoutEndpoint: {},
                        JwksUri: {}
                    }
                },
                CreateDate: {
                    type: "timestamp"
                }
            }
        },
        Squ: {
            type: "structure",
            required: [ "WorkteamName", "MemberDefinitions", "WorkteamArn", "Description" ],
            members: {
                WorkteamName: {},
                MemberDefinitions: {
                    shape: "Si1"
                },
                WorkteamArn: {},
                WorkforceArn: {},
                ProductListingIds: {
                    type: "list",
                    member: {}
                },
                Description: {},
                SubDomain: {},
                CreateDate: {
                    type: "timestamp"
                },
                LastUpdatedDate: {
                    type: "timestamp"
                },
                NotificationConfiguration: {
                    shape: "Si9"
                }
            }
        },
        Stk: {
            type: "list",
            member: {
                type: "structure",
                required: [ "MonitoringJobDefinitionName", "MonitoringJobDefinitionArn", "CreationTime", "EndpointName" ],
                members: {
                    MonitoringJobDefinitionName: {},
                    MonitoringJobDefinitionArn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    EndpointName: {}
                }
            }
        },
        Sxy: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        Szo: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DeviceName" ],
                members: {
                    DeviceName: {},
                    Description: {},
                    IotThingName: {}
                }
            }
        },
        Szx: {
            type: "structure",
            members: {
                Filters: {
                    shape: "Szy"
                },
                NestedFilters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "NestedPropertyName", "Filters" ],
                        members: {
                            NestedPropertyName: {},
                            Filters: {
                                shape: "Szy"
                            }
                        }
                    }
                },
                SubExpressions: {
                    type: "list",
                    member: {
                        shape: "Szx"
                    }
                },
                Operator: {}
            }
        },
        Szy: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Operator: {},
                    Value: {}
                }
            }
        },
        S10a: {
            type: "structure",
            members: {
                TrainingJobName: {},
                TrainingJobArn: {},
                TuningJobArn: {},
                LabelingJobArn: {},
                AutoMLJobArn: {},
                ModelArtifacts: {
                    shape: "Slg"
                },
                TrainingJobStatus: {},
                SecondaryStatus: {},
                FailureReason: {},
                HyperParameters: {
                    shape: "S2a"
                },
                AlgorithmSpecification: {
                    shape: "Sg2"
                },
                RoleArn: {},
                InputDataConfig: {
                    shape: "S2c"
                },
                OutputDataConfig: {
                    shape: "S2t"
                },
                ResourceConfig: {
                    shape: "S2v"
                },
                VpcConfig: {
                    shape: "S4x"
                },
                StoppingCondition: {
                    shape: "S2y"
                },
                CreationTime: {
                    type: "timestamp"
                },
                TrainingStartTime: {
                    type: "timestamp"
                },
                TrainingEndTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                SecondaryStatusTransitions: {
                    shape: "Spq"
                },
                FinalMetricDataList: {
                    shape: "Spt"
                },
                EnableNetworkIsolation: {
                    type: "boolean"
                },
                EnableInterContainerTrafficEncryption: {
                    type: "boolean"
                },
                EnableManagedSpotTraining: {
                    type: "boolean"
                },
                CheckpointConfig: {
                    shape: "Saf"
                },
                TrainingTimeInSeconds: {
                    type: "integer"
                },
                BillableTimeInSeconds: {
                    type: "integer"
                },
                DebugHookConfig: {
                    shape: "Sg3"
                },
                ExperimentConfig: {
                    shape: "Sfm"
                },
                DebugRuleConfigurations: {
                    shape: "Sgb"
                },
                TensorBoardOutputConfig: {
                    shape: "Sgg"
                },
                DebugRuleEvaluationStatuses: {
                    shape: "Spy"
                },
                Environment: {
                    shape: "Sgm"
                },
                Tags: {
                    shape: "S7"
                }
            }
        },
        S11a: {
            type: "list",
            member: {}
        },
        S12r: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListActions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ActionSummaries"
        },
        ListAlgorithms: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AlgorithmSummaryList"
        },
        ListAppImageConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AppImageConfigs"
        },
        ListApps: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Apps"
        },
        ListArtifacts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ArtifactSummaries"
        },
        ListAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AssociationSummaries"
        },
        ListAutoMLJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AutoMLJobSummaries"
        },
        ListCandidatesForAutoMLJob: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Candidates"
        },
        ListCodeRepositories: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CodeRepositorySummaryList"
        },
        ListCompilationJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CompilationJobSummaries"
        },
        ListContexts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ContextSummaries"
        },
        ListDataQualityJobDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobDefinitionSummaries"
        },
        ListDeviceFleets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DeviceFleetSummaries"
        },
        ListDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DeviceSummaries"
        },
        ListDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Domains"
        },
        ListEdgePackagingJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EdgePackagingJobSummaries"
        },
        ListEndpointConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EndpointConfigs"
        },
        ListEndpoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Endpoints"
        },
        ListExperiments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ExperimentSummaries"
        },
        ListFeatureGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FeatureGroupSummaries"
        },
        ListFlowDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FlowDefinitionSummaries"
        },
        ListHumanTaskUis: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "HumanTaskUiSummaries"
        },
        ListHyperParameterTuningJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "HyperParameterTuningJobSummaries"
        },
        ListImageVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ImageVersions"
        },
        ListImages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Images"
        },
        ListLabelingJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "LabelingJobSummaryList"
        },
        ListLabelingJobsForWorkteam: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "LabelingJobSummaryList"
        },
        ListModelBiasJobDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobDefinitionSummaries"
        },
        ListModelExplainabilityJobDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobDefinitionSummaries"
        },
        ListModelPackageGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ModelPackageGroupSummaryList"
        },
        ListModelPackages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ModelPackageSummaryList"
        },
        ListModelQualityJobDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobDefinitionSummaries"
        },
        ListModels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Models"
        },
        ListMonitoringExecutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "MonitoringExecutionSummaries"
        },
        ListMonitoringSchedules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "MonitoringScheduleSummaries"
        },
        ListNotebookInstanceLifecycleConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "NotebookInstanceLifecycleConfigs"
        },
        ListNotebookInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "NotebookInstances"
        },
        ListPipelineExecutionSteps: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PipelineExecutionSteps"
        },
        ListPipelineExecutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PipelineExecutionSummaries"
        },
        ListPipelineParametersForExecution: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PipelineParameters"
        },
        ListPipelines: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PipelineSummaries"
        },
        ListProcessingJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ProcessingJobSummaries"
        },
        ListProjects: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSubscribedWorkteams: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SubscribedWorkteams"
        },
        ListTags: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tags"
        },
        ListTrainingJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TrainingJobSummaries"
        },
        ListTrainingJobsForHyperParameterTuningJob: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TrainingJobSummaries"
        },
        ListTransformJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TransformJobSummaries"
        },
        ListTrialComponents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TrialComponentSummaries"
        },
        ListTrials: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TrialSummaries"
        },
        ListUserProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "UserProfiles"
        },
        ListWorkforces: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Workforces"
        },
        ListWorkteams: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Workteams"
        },
        Search: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Results"
        }
    },
    waiters: {
        NotebookInstanceInService: {
            delay: 30,
            maxAttempts: 60,
            operation: "DescribeNotebookInstance",
            acceptors: [ {
                expected: "InService",
                matcher: "path",
                state: "success",
                argument: "NotebookInstanceStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "NotebookInstanceStatus"
            } ]
        },
        NotebookInstanceStopped: {
            delay: 30,
            operation: "DescribeNotebookInstance",
            maxAttempts: 60,
            acceptors: [ {
                expected: "Stopped",
                matcher: "path",
                state: "success",
                argument: "NotebookInstanceStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "NotebookInstanceStatus"
            } ]
        },
        NotebookInstanceDeleted: {
            delay: 30,
            maxAttempts: 60,
            operation: "DescribeNotebookInstance",
            acceptors: [ {
                expected: "ValidationException",
                matcher: "error",
                state: "success"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "NotebookInstanceStatus"
            } ]
        },
        TrainingJobCompletedOrStopped: {
            delay: 120,
            maxAttempts: 180,
            operation: "DescribeTrainingJob",
            acceptors: [ {
                expected: "Completed",
                matcher: "path",
                state: "success",
                argument: "TrainingJobStatus"
            }, {
                expected: "Stopped",
                matcher: "path",
                state: "success",
                argument: "TrainingJobStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "TrainingJobStatus"
            }, {
                expected: "ValidationException",
                matcher: "error",
                state: "failure"
            } ]
        },
        EndpointInService: {
            delay: 30,
            maxAttempts: 120,
            operation: "DescribeEndpoint",
            acceptors: [ {
                expected: "InService",
                matcher: "path",
                state: "success",
                argument: "EndpointStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "EndpointStatus"
            }, {
                expected: "ValidationException",
                matcher: "error",
                state: "failure"
            } ]
        },
        EndpointDeleted: {
            delay: 30,
            maxAttempts: 60,
            operation: "DescribeEndpoint",
            acceptors: [ {
                expected: "ValidationException",
                matcher: "error",
                state: "success"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "EndpointStatus"
            } ]
        },
        TransformJobCompletedOrStopped: {
            delay: 60,
            maxAttempts: 60,
            operation: "DescribeTransformJob",
            acceptors: [ {
                expected: "Completed",
                matcher: "path",
                state: "success",
                argument: "TransformJobStatus"
            }, {
                expected: "Stopped",
                matcher: "path",
                state: "success",
                argument: "TransformJobStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "TransformJobStatus"
            }, {
                expected: "ValidationException",
                matcher: "error",
                state: "failure"
            } ]
        },
        ProcessingJobCompletedOrStopped: {
            delay: 60,
            maxAttempts: 60,
            operation: "DescribeProcessingJob",
            acceptors: [ {
                expected: "Completed",
                matcher: "path",
                state: "success",
                argument: "ProcessingJobStatus"
            }, {
                expected: "Stopped",
                matcher: "path",
                state: "success",
                argument: "ProcessingJobStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "ProcessingJobStatus"
            }, {
                expected: "ValidationException",
                matcher: "error",
                state: "failure"
            } ]
        }
    }
};

AWS.apiLoader.services["translate"] = {};

AWS.Translate = AWS.Service.defineService("translate", [ "2017-07-01" ]);

AWS.apiLoader.services["translate"]["2017-07-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-01",
        endpointPrefix: "translate",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Translate",
        serviceId: "Translate",
        signatureVersion: "v4",
        signingName: "translate",
        targetPrefix: "AWSShineFrontendService_20170701",
        uid: "translate-2017-07-01"
    },
    operations: {
        CreateParallelData: {
            input: {
                type: "structure",
                required: [ "Name", "ParallelDataConfig", "ClientToken" ],
                members: {
                    Name: {},
                    Description: {},
                    ParallelDataConfig: {
                        shape: "S4"
                    },
                    EncryptionKey: {
                        shape: "S7"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Status: {}
                }
            }
        },
        DeleteParallelData: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Status: {}
                }
            }
        },
        DeleteTerminology: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DescribeTextTranslationJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TextTranslationJobProperties: {
                        shape: "Sj"
                    }
                }
            }
        },
        GetParallelData: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ParallelDataProperties: {
                        shape: "Sz"
                    },
                    DataLocation: {
                        shape: "S13"
                    },
                    AuxiliaryDataLocation: {
                        shape: "S13"
                    },
                    LatestUpdateAttemptAuxiliaryDataLocation: {
                        shape: "S13"
                    }
                }
            }
        },
        GetTerminology: {
            input: {
                type: "structure",
                required: [ "Name", "TerminologyDataFormat" ],
                members: {
                    Name: {},
                    TerminologyDataFormat: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TerminologyProperties: {
                        shape: "S18"
                    },
                    TerminologyDataLocation: {
                        type: "structure",
                        required: [ "RepositoryType", "Location" ],
                        members: {
                            RepositoryType: {},
                            Location: {}
                        }
                    }
                }
            }
        },
        ImportTerminology: {
            input: {
                type: "structure",
                required: [ "Name", "MergeStrategy", "TerminologyData" ],
                members: {
                    Name: {},
                    MergeStrategy: {},
                    Description: {},
                    TerminologyData: {
                        type: "structure",
                        required: [ "File", "Format" ],
                        members: {
                            File: {
                                type: "blob",
                                sensitive: true
                            },
                            Format: {}
                        }
                    },
                    EncryptionKey: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TerminologyProperties: {
                        shape: "S18"
                    }
                }
            }
        },
        ListParallelData: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ParallelDataPropertiesList: {
                        type: "list",
                        member: {
                            shape: "Sz"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTerminologies: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TerminologyPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S18"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTextTranslationJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmittedBeforeTime: {
                                type: "timestamp"
                            },
                            SubmittedAfterTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TextTranslationJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "Sj"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        StartTextTranslationJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "SourceLanguageCode", "TargetLanguageCodes", "ClientToken" ],
                members: {
                    JobName: {},
                    InputDataConfig: {
                        shape: "St"
                    },
                    OutputDataConfig: {
                        shape: "Sv"
                    },
                    DataAccessRoleArn: {},
                    SourceLanguageCode: {},
                    TargetLanguageCodes: {
                        shape: "Sp"
                    },
                    TerminologyNames: {
                        shape: "Sq"
                    },
                    ParallelDataNames: {
                        shape: "Sq"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopTextTranslationJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        TranslateText: {
            input: {
                type: "structure",
                required: [ "Text", "SourceLanguageCode", "TargetLanguageCode" ],
                members: {
                    Text: {},
                    TerminologyNames: {
                        shape: "Sq"
                    },
                    SourceLanguageCode: {},
                    TargetLanguageCode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TranslatedText", "SourceLanguageCode", "TargetLanguageCode" ],
                members: {
                    TranslatedText: {},
                    SourceLanguageCode: {},
                    TargetLanguageCode: {},
                    AppliedTerminologies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Terms: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            SourceText: {},
                                            TargetText: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        UpdateParallelData: {
            input: {
                type: "structure",
                required: [ "Name", "ParallelDataConfig", "ClientToken" ],
                members: {
                    Name: {},
                    Description: {},
                    ParallelDataConfig: {
                        shape: "S4"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Status: {},
                    LatestUpdateAttemptStatus: {},
                    LatestUpdateAttemptAt: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "S3Uri", "Format" ],
            members: {
                S3Uri: {},
                Format: {}
            }
        },
        S7: {
            type: "structure",
            required: [ "Type", "Id" ],
            members: {
                Type: {},
                Id: {}
            }
        },
        Sj: {
            type: "structure",
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                JobDetails: {
                    type: "structure",
                    members: {
                        TranslatedDocumentsCount: {
                            type: "integer"
                        },
                        DocumentsWithErrorsCount: {
                            type: "integer"
                        },
                        InputDocumentsCount: {
                            type: "integer"
                        }
                    }
                },
                SourceLanguageCode: {},
                TargetLanguageCodes: {
                    shape: "Sp"
                },
                TerminologyNames: {
                    shape: "Sq"
                },
                ParallelDataNames: {
                    shape: "Sq"
                },
                Message: {},
                SubmittedTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "St"
                },
                OutputDataConfig: {
                    shape: "Sv"
                },
                DataAccessRoleArn: {}
            }
        },
        Sp: {
            type: "list",
            member: {}
        },
        Sq: {
            type: "list",
            member: {}
        },
        St: {
            type: "structure",
            required: [ "S3Uri", "ContentType" ],
            members: {
                S3Uri: {},
                ContentType: {}
            }
        },
        Sv: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                S3Uri: {}
            }
        },
        Sz: {
            type: "structure",
            members: {
                Name: {},
                Arn: {},
                Description: {},
                Status: {},
                SourceLanguageCode: {},
                TargetLanguageCodes: {
                    shape: "S11"
                },
                ParallelDataConfig: {
                    shape: "S4"
                },
                Message: {},
                ImportedDataSize: {
                    type: "long"
                },
                ImportedRecordCount: {
                    type: "long"
                },
                FailedRecordCount: {
                    type: "long"
                },
                SkippedRecordCount: {
                    type: "long"
                },
                EncryptionKey: {
                    shape: "S7"
                },
                CreatedAt: {
                    type: "timestamp"
                },
                LastUpdatedAt: {
                    type: "timestamp"
                },
                LatestUpdateAttemptStatus: {},
                LatestUpdateAttemptAt: {
                    type: "timestamp"
                }
            }
        },
        S11: {
            type: "list",
            member: {}
        },
        S13: {
            type: "structure",
            required: [ "RepositoryType", "Location" ],
            members: {
                RepositoryType: {},
                Location: {}
            }
        },
        S18: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                Arn: {},
                SourceLanguageCode: {},
                TargetLanguageCodes: {
                    shape: "S11"
                },
                EncryptionKey: {
                    shape: "S7"
                },
                SizeBytes: {
                    type: "integer"
                },
                TermCount: {
                    type: "integer"
                },
                CreatedAt: {
                    type: "timestamp"
                },
                LastUpdatedAt: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {
        ListParallelData: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTerminologies: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTextTranslationJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        }
    }
};

AWS.apiLoader.services["resourcegroups"] = {};

AWS.ResourceGroups = AWS.Service.defineService("resourcegroups", [ "2017-11-27" ]);

AWS.apiLoader.services["resourcegroups"]["2017-11-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-11-27",
        endpointPrefix: "resource-groups",
        protocol: "rest-json",
        serviceAbbreviation: "Resource Groups",
        serviceFullName: "AWS Resource Groups",
        serviceId: "Resource Groups",
        signatureVersion: "v4",
        signingName: "resource-groups",
        uid: "resource-groups-2017-11-27"
    },
    operations: {
        CreateGroup: {
            http: {
                requestUri: "/groups"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    ResourceQuery: {
                        shape: "S4"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    Configuration: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "Sj"
                    },
                    ResourceQuery: {
                        shape: "S4"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    GroupConfiguration: {
                        shape: "Sl"
                    }
                }
            }
        },
        DeleteGroup: {
            http: {
                requestUri: "/delete-group"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Group instead."
                    },
                    Group: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "Sj"
                    }
                }
            }
        },
        GetGroup: {
            http: {
                requestUri: "/get-group"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Group instead."
                    },
                    Group: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "Sj"
                    }
                }
            }
        },
        GetGroupConfiguration: {
            http: {
                requestUri: "/get-group-configuration"
            },
            input: {
                type: "structure",
                members: {
                    Group: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupConfiguration: {
                        shape: "Sl"
                    }
                }
            }
        },
        GetGroupQuery: {
            http: {
                requestUri: "/get-group-query"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Group instead."
                    },
                    Group: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupQuery: {
                        shape: "Sx"
                    }
                }
            }
        },
        GetTags: {
            http: {
                method: "GET",
                requestUri: "/resources/{Arn}/tags"
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "Arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        GroupResources: {
            http: {
                requestUri: "/group-resources"
            },
            input: {
                type: "structure",
                required: [ "Group", "ResourceArns" ],
                members: {
                    Group: {},
                    ResourceArns: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Succeeded: {
                        shape: "S11"
                    },
                    Failed: {
                        shape: "S14"
                    },
                    Pending: {
                        shape: "S18"
                    }
                }
            }
        },
        ListGroupResources: {
            http: {
                requestUri: "/list-group-resources"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Group instead."
                    },
                    Group: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Resources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Identifier: {
                                    shape: "S1l"
                                },
                                Status: {
                                    type: "structure",
                                    members: {
                                        Name: {}
                                    }
                                }
                            }
                        }
                    },
                    ResourceIdentifiers: {
                        shape: "S1p",
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Resources instead."
                    },
                    NextToken: {},
                    QueryErrors: {
                        shape: "S1q"
                    }
                }
            }
        },
        ListGroups: {
            http: {
                requestUri: "/groups-list"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupIdentifiers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupName: {},
                                GroupArn: {}
                            }
                        }
                    },
                    Groups: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use GroupIdentifiers instead.",
                        type: "list",
                        member: {
                            shape: "Sj"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutGroupConfiguration: {
            http: {
                requestUri: "/put-group-configuration",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Group: {},
                    Configuration: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchResources: {
            http: {
                requestUri: "/resources/search"
            },
            input: {
                type: "structure",
                required: [ "ResourceQuery" ],
                members: {
                    ResourceQuery: {
                        shape: "S4"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceIdentifiers: {
                        shape: "S1p"
                    },
                    NextToken: {},
                    QueryErrors: {
                        shape: "S1q"
                    }
                }
            }
        },
        Tag: {
            http: {
                method: "PUT",
                requestUri: "/resources/{Arn}/tags"
            },
            input: {
                type: "structure",
                required: [ "Arn", "Tags" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "Arn"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        UngroupResources: {
            http: {
                requestUri: "/ungroup-resources"
            },
            input: {
                type: "structure",
                required: [ "Group", "ResourceArns" ],
                members: {
                    Group: {},
                    ResourceArns: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Succeeded: {
                        shape: "S11"
                    },
                    Failed: {
                        shape: "S14"
                    },
                    Pending: {
                        shape: "S18"
                    }
                }
            }
        },
        Untag: {
            http: {
                method: "PATCH",
                requestUri: "/resources/{Arn}/tags"
            },
            input: {
                type: "structure",
                required: [ "Arn", "Keys" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "Arn"
                    },
                    Keys: {
                        shape: "S2d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Keys: {
                        shape: "S2d"
                    }
                }
            }
        },
        UpdateGroup: {
            http: {
                requestUri: "/update-group"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Group instead."
                    },
                    Group: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "Sj"
                    }
                }
            }
        },
        UpdateGroupQuery: {
            http: {
                requestUri: "/update-group-query"
            },
            input: {
                type: "structure",
                required: [ "ResourceQuery" ],
                members: {
                    GroupName: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Group instead."
                    },
                    Group: {},
                    ResourceQuery: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupQuery: {
                        shape: "Sx"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "Type", "Query" ],
            members: {
                Type: {},
                Query: {}
            }
        },
        S7: {
            type: "map",
            key: {},
            value: {}
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type" ],
                members: {
                    Type: {},
                    Parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name" ],
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        Sj: {
            type: "structure",
            required: [ "GroupArn", "Name" ],
            members: {
                GroupArn: {},
                Name: {},
                Description: {}
            }
        },
        Sl: {
            type: "structure",
            members: {
                Configuration: {
                    shape: "Sa"
                },
                ProposedConfiguration: {
                    shape: "Sa"
                },
                Status: {},
                FailureReason: {}
            }
        },
        Sx: {
            type: "structure",
            required: [ "GroupName", "ResourceQuery" ],
            members: {
                GroupName: {},
                ResourceQuery: {
                    shape: "S4"
                }
            }
        },
        S11: {
            type: "list",
            member: {}
        },
        S14: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    ErrorMessage: {},
                    ErrorCode: {}
                }
            }
        },
        S18: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceArn: {}
                }
            }
        },
        S1l: {
            type: "structure",
            members: {
                ResourceArn: {},
                ResourceType: {}
            }
        },
        S1p: {
            type: "list",
            member: {
                shape: "S1l"
            }
        },
        S1q: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ErrorCode: {},
                    Message: {}
                }
            }
        },
        S2d: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListGroupResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: [ "ResourceIdentifiers", "Resources" ]
        },
        ListGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "GroupIdentifiers"
        },
        SearchResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResourceIdentifiers"
        }
    }
};

AWS.apiLoader.services["alexaforbusiness"] = {};

AWS.AlexaForBusiness = AWS.Service.defineService("alexaforbusiness", [ "2017-11-09" ]);

AWS.apiLoader.services["alexaforbusiness"]["2017-11-09"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-11-09",
        endpointPrefix: "a4b",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Alexa For Business",
        serviceId: "Alexa For Business",
        signatureVersion: "v4",
        targetPrefix: "AlexaForBusiness",
        uid: "alexaforbusiness-2017-11-09"
    },
    operations: {
        ApproveSkill: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateContactWithAddressBook: {
            input: {
                type: "structure",
                required: [ "ContactArn", "AddressBookArn" ],
                members: {
                    ContactArn: {},
                    AddressBookArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateDeviceWithNetworkProfile: {
            input: {
                type: "structure",
                required: [ "DeviceArn", "NetworkProfileArn" ],
                members: {
                    DeviceArn: {},
                    NetworkProfileArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateDeviceWithRoom: {
            input: {
                type: "structure",
                members: {
                    DeviceArn: {},
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateSkillGroupWithRoom: {
            input: {
                type: "structure",
                members: {
                    SkillGroupArn: {},
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateSkillWithSkillGroup: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillGroupArn: {},
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateSkillWithUsers: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateAddressBook: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AddressBookArn: {}
                }
            }
        },
        CreateBusinessReportSchedule: {
            input: {
                type: "structure",
                required: [ "Format", "ContentRange" ],
                members: {
                    ScheduleName: {},
                    S3BucketName: {},
                    S3KeyPrefix: {},
                    Format: {},
                    ContentRange: {
                        shape: "Sv"
                    },
                    Recurrence: {
                        shape: "Sx"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ScheduleArn: {}
                }
            }
        },
        CreateConferenceProvider: {
            input: {
                type: "structure",
                required: [ "ConferenceProviderName", "ConferenceProviderType", "MeetingSetting" ],
                members: {
                    ConferenceProviderName: {},
                    ConferenceProviderType: {},
                    IPDialIn: {
                        shape: "S13"
                    },
                    PSTNDialIn: {
                        shape: "S16"
                    },
                    MeetingSetting: {
                        shape: "S1b"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConferenceProviderArn: {}
                }
            }
        },
        CreateContact: {
            input: {
                type: "structure",
                required: [ "FirstName" ],
                members: {
                    DisplayName: {},
                    FirstName: {},
                    LastName: {},
                    PhoneNumber: {
                        shape: "S1g"
                    },
                    PhoneNumbers: {
                        shape: "S1h"
                    },
                    SipAddresses: {
                        shape: "S1k"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactArn: {}
                }
            }
        },
        CreateGatewayGroup: {
            input: {
                type: "structure",
                required: [ "Name", "ClientRequestToken" ],
                members: {
                    Name: {},
                    Description: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayGroupArn: {}
                }
            }
        },
        CreateNetworkProfile: {
            input: {
                type: "structure",
                required: [ "NetworkProfileName", "Ssid", "SecurityType", "ClientRequestToken" ],
                members: {
                    NetworkProfileName: {},
                    Description: {},
                    Ssid: {},
                    SecurityType: {},
                    EapMethod: {},
                    CurrentPassword: {
                        shape: "S1z"
                    },
                    NextPassword: {
                        shape: "S20"
                    },
                    CertificateAuthorityArn: {},
                    TrustAnchors: {
                        shape: "S21"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkProfileArn: {}
                }
            }
        },
        CreateProfile: {
            input: {
                type: "structure",
                required: [ "ProfileName", "Timezone", "Address", "DistanceUnit", "TemperatureUnit", "WakeWord" ],
                members: {
                    ProfileName: {},
                    Timezone: {},
                    Address: {},
                    DistanceUnit: {},
                    TemperatureUnit: {},
                    WakeWord: {},
                    Locale: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    SetupModeDisabled: {
                        type: "boolean"
                    },
                    MaxVolumeLimit: {
                        type: "integer"
                    },
                    PSTNEnabled: {
                        type: "boolean"
                    },
                    DataRetentionOptIn: {
                        type: "boolean"
                    },
                    MeetingRoomConfiguration: {
                        type: "structure",
                        members: {
                            RoomUtilizationMetricsEnabled: {
                                type: "boolean"
                            },
                            EndOfMeetingReminder: {
                                type: "structure",
                                required: [ "ReminderAtMinutes", "ReminderType", "Enabled" ],
                                members: {
                                    ReminderAtMinutes: {
                                        shape: "S2g"
                                    },
                                    ReminderType: {},
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            InstantBooking: {
                                type: "structure",
                                required: [ "DurationInMinutes", "Enabled" ],
                                members: {
                                    DurationInMinutes: {
                                        type: "integer"
                                    },
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            RequireCheckIn: {
                                type: "structure",
                                required: [ "ReleaseAfterMinutes", "Enabled" ],
                                members: {
                                    ReleaseAfterMinutes: {
                                        type: "integer"
                                    },
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProfileArn: {}
                }
            }
        },
        CreateRoom: {
            input: {
                type: "structure",
                required: [ "RoomName" ],
                members: {
                    RoomName: {},
                    Description: {},
                    ProfileArn: {},
                    ProviderCalendarId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RoomArn: {}
                }
            }
        },
        CreateSkillGroup: {
            input: {
                type: "structure",
                required: [ "SkillGroupName" ],
                members: {
                    SkillGroupName: {},
                    Description: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SkillGroupArn: {}
                }
            }
        },
        CreateUser: {
            input: {
                type: "structure",
                required: [ "UserId" ],
                members: {
                    UserId: {},
                    FirstName: {},
                    LastName: {},
                    Email: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserArn: {}
                }
            }
        },
        DeleteAddressBook: {
            input: {
                type: "structure",
                required: [ "AddressBookArn" ],
                members: {
                    AddressBookArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteBusinessReportSchedule: {
            input: {
                type: "structure",
                required: [ "ScheduleArn" ],
                members: {
                    ScheduleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConferenceProvider: {
            input: {
                type: "structure",
                required: [ "ConferenceProviderArn" ],
                members: {
                    ConferenceProviderArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteContact: {
            input: {
                type: "structure",
                required: [ "ContactArn" ],
                members: {
                    ContactArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDevice: {
            input: {
                type: "structure",
                required: [ "DeviceArn" ],
                members: {
                    DeviceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDeviceUsageData: {
            input: {
                type: "structure",
                required: [ "DeviceArn", "DeviceUsageType" ],
                members: {
                    DeviceArn: {},
                    DeviceUsageType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteGatewayGroup: {
            input: {
                type: "structure",
                required: [ "GatewayGroupArn" ],
                members: {
                    GatewayGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteNetworkProfile: {
            input: {
                type: "structure",
                required: [ "NetworkProfileArn" ],
                members: {
                    NetworkProfileArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteProfile: {
            input: {
                type: "structure",
                members: {
                    ProfileArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRoom: {
            input: {
                type: "structure",
                members: {
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRoomSkillParameter: {
            input: {
                type: "structure",
                required: [ "SkillId", "ParameterKey" ],
                members: {
                    RoomArn: {},
                    SkillId: {},
                    ParameterKey: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSkillAuthorization: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillId: {},
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSkillGroup: {
            input: {
                type: "structure",
                members: {
                    SkillGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "EnrollmentId" ],
                members: {
                    UserArn: {},
                    EnrollmentId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateContactFromAddressBook: {
            input: {
                type: "structure",
                required: [ "ContactArn", "AddressBookArn" ],
                members: {
                    ContactArn: {},
                    AddressBookArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateDeviceFromRoom: {
            input: {
                type: "structure",
                members: {
                    DeviceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateSkillFromSkillGroup: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillGroupArn: {},
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateSkillFromUsers: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateSkillGroupFromRoom: {
            input: {
                type: "structure",
                members: {
                    SkillGroupArn: {},
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ForgetSmartHomeAppliances: {
            input: {
                type: "structure",
                required: [ "RoomArn" ],
                members: {
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAddressBook: {
            input: {
                type: "structure",
                required: [ "AddressBookArn" ],
                members: {
                    AddressBookArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AddressBook: {
                        type: "structure",
                        members: {
                            AddressBookArn: {},
                            Name: {},
                            Description: {}
                        }
                    }
                }
            }
        },
        GetConferencePreference: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Preference: {
                        shape: "S4d"
                    }
                }
            }
        },
        GetConferenceProvider: {
            input: {
                type: "structure",
                required: [ "ConferenceProviderArn" ],
                members: {
                    ConferenceProviderArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConferenceProvider: {
                        shape: "S4g"
                    }
                }
            }
        },
        GetContact: {
            input: {
                type: "structure",
                required: [ "ContactArn" ],
                members: {
                    ContactArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Contact: {
                        type: "structure",
                        members: {
                            ContactArn: {},
                            DisplayName: {},
                            FirstName: {},
                            LastName: {},
                            PhoneNumber: {
                                shape: "S1g"
                            },
                            PhoneNumbers: {
                                shape: "S1h"
                            },
                            SipAddresses: {
                                shape: "S1k"
                            }
                        }
                    }
                }
            }
        },
        GetDevice: {
            input: {
                type: "structure",
                members: {
                    DeviceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Device: {
                        type: "structure",
                        members: {
                            DeviceArn: {},
                            DeviceSerialNumber: {},
                            DeviceType: {},
                            DeviceName: {},
                            SoftwareVersion: {},
                            MacAddress: {},
                            RoomArn: {},
                            DeviceStatus: {},
                            DeviceStatusInfo: {
                                shape: "S4t"
                            },
                            NetworkProfileInfo: {
                                type: "structure",
                                members: {
                                    NetworkProfileArn: {},
                                    CertificateArn: {},
                                    CertificateExpirationTime: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetGateway: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Gateway: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Name: {},
                            Description: {},
                            GatewayGroupArn: {},
                            SoftwareVersion: {}
                        }
                    }
                }
            }
        },
        GetGatewayGroup: {
            input: {
                type: "structure",
                required: [ "GatewayGroupArn" ],
                members: {
                    GatewayGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayGroup: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Name: {},
                            Description: {}
                        }
                    }
                }
            }
        },
        GetInvitationConfiguration: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    OrganizationName: {},
                    ContactEmail: {},
                    PrivateSkillIds: {
                        shape: "S5e"
                    }
                }
            }
        },
        GetNetworkProfile: {
            input: {
                type: "structure",
                required: [ "NetworkProfileArn" ],
                members: {
                    NetworkProfileArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkProfile: {
                        type: "structure",
                        members: {
                            NetworkProfileArn: {},
                            NetworkProfileName: {},
                            Description: {},
                            Ssid: {},
                            SecurityType: {},
                            EapMethod: {},
                            CurrentPassword: {
                                shape: "S1z"
                            },
                            NextPassword: {
                                shape: "S20"
                            },
                            CertificateAuthorityArn: {},
                            TrustAnchors: {
                                shape: "S21"
                            }
                        }
                    }
                }
            }
        },
        GetProfile: {
            input: {
                type: "structure",
                members: {
                    ProfileArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Profile: {
                        type: "structure",
                        members: {
                            ProfileArn: {},
                            ProfileName: {},
                            IsDefault: {
                                type: "boolean"
                            },
                            Address: {},
                            Timezone: {},
                            DistanceUnit: {},
                            TemperatureUnit: {},
                            WakeWord: {},
                            Locale: {},
                            SetupModeDisabled: {
                                type: "boolean"
                            },
                            MaxVolumeLimit: {
                                type: "integer"
                            },
                            PSTNEnabled: {
                                type: "boolean"
                            },
                            DataRetentionOptIn: {
                                type: "boolean"
                            },
                            AddressBookArn: {},
                            MeetingRoomConfiguration: {
                                type: "structure",
                                members: {
                                    RoomUtilizationMetricsEnabled: {
                                        type: "boolean"
                                    },
                                    EndOfMeetingReminder: {
                                        type: "structure",
                                        members: {
                                            ReminderAtMinutes: {
                                                shape: "S2g"
                                            },
                                            ReminderType: {},
                                            Enabled: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    InstantBooking: {
                                        type: "structure",
                                        members: {
                                            DurationInMinutes: {
                                                type: "integer"
                                            },
                                            Enabled: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    RequireCheckIn: {
                                        type: "structure",
                                        members: {
                                            ReleaseAfterMinutes: {
                                                type: "integer"
                                            },
                                            Enabled: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetRoom: {
            input: {
                type: "structure",
                members: {
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Room: {
                        type: "structure",
                        members: {
                            RoomArn: {},
                            RoomName: {},
                            Description: {},
                            ProviderCalendarId: {},
                            ProfileArn: {}
                        }
                    }
                }
            }
        },
        GetRoomSkillParameter: {
            input: {
                type: "structure",
                required: [ "SkillId", "ParameterKey" ],
                members: {
                    RoomArn: {},
                    SkillId: {},
                    ParameterKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RoomSkillParameter: {
                        shape: "S5u"
                    }
                }
            }
        },
        GetSkillGroup: {
            input: {
                type: "structure",
                members: {
                    SkillGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SkillGroup: {
                        type: "structure",
                        members: {
                            SkillGroupArn: {},
                            SkillGroupName: {},
                            Description: {}
                        }
                    }
                }
            }
        },
        ListBusinessReportSchedules: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BusinessReportSchedules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ScheduleArn: {},
                                ScheduleName: {},
                                S3BucketName: {},
                                S3KeyPrefix: {},
                                Format: {},
                                ContentRange: {
                                    shape: "Sv"
                                },
                                Recurrence: {
                                    shape: "Sx"
                                },
                                LastBusinessReport: {
                                    type: "structure",
                                    members: {
                                        Status: {},
                                        FailureCode: {},
                                        S3Location: {
                                            type: "structure",
                                            members: {
                                                Path: {},
                                                BucketName: {}
                                            }
                                        },
                                        DeliveryTime: {
                                            type: "timestamp"
                                        },
                                        DownloadUrl: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConferenceProviders: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConferenceProviders: {
                        type: "list",
                        member: {
                            shape: "S4g"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDeviceEvents: {
            input: {
                type: "structure",
                required: [ "DeviceArn" ],
                members: {
                    DeviceArn: {},
                    EventType: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                Value: {},
                                Timestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListGatewayGroups: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListGateways: {
            input: {
                type: "structure",
                members: {
                    GatewayGroupArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Gateways: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                Description: {},
                                GatewayGroupArn: {},
                                SoftwareVersion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSkills: {
            input: {
                type: "structure",
                members: {
                    SkillGroupArn: {},
                    EnablementType: {},
                    SkillType: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SkillSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SkillId: {},
                                SkillName: {},
                                SupportsLinking: {
                                    type: "boolean"
                                },
                                EnablementType: {},
                                SkillType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSkillsStoreCategories: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CategoryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CategoryId: {
                                    type: "long"
                                },
                                CategoryName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSkillsStoreSkillsByCategory: {
            input: {
                type: "structure",
                required: [ "CategoryId" ],
                members: {
                    CategoryId: {
                        type: "long"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SkillsStoreSkills: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SkillId: {},
                                SkillName: {},
                                ShortDescription: {},
                                IconUrl: {},
                                SampleUtterances: {
                                    type: "list",
                                    member: {}
                                },
                                SkillDetails: {
                                    type: "structure",
                                    members: {
                                        ProductDescription: {},
                                        InvocationPhrase: {},
                                        ReleaseDate: {},
                                        EndUserLicenseAgreement: {},
                                        GenericKeywords: {
                                            type: "list",
                                            member: {}
                                        },
                                        BulletPoints: {
                                            type: "list",
                                            member: {}
                                        },
                                        NewInThisVersionBulletPoints: {
                                            type: "list",
                                            member: {}
                                        },
                                        SkillTypes: {
                                            type: "list",
                                            member: {}
                                        },
                                        Reviews: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        },
                                        DeveloperInfo: {
                                            type: "structure",
                                            members: {
                                                DeveloperName: {},
                                                PrivacyPolicy: {},
                                                Email: {},
                                                Url: {}
                                            }
                                        }
                                    }
                                },
                                SupportsLinking: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSmartHomeAppliances: {
            input: {
                type: "structure",
                required: [ "RoomArn" ],
                members: {
                    RoomArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SmartHomeAppliances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FriendlyName: {},
                                Description: {},
                                ManufacturerName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sl"
                    },
                    NextToken: {}
                }
            }
        },
        PutConferencePreference: {
            input: {
                type: "structure",
                required: [ "ConferencePreference" ],
                members: {
                    ConferencePreference: {
                        shape: "S4d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutInvitationConfiguration: {
            input: {
                type: "structure",
                required: [ "OrganizationName" ],
                members: {
                    OrganizationName: {},
                    ContactEmail: {},
                    PrivateSkillIds: {
                        shape: "S5e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutRoomSkillParameter: {
            input: {
                type: "structure",
                required: [ "SkillId", "RoomSkillParameter" ],
                members: {
                    RoomArn: {},
                    SkillId: {},
                    RoomSkillParameter: {
                        shape: "S5u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutSkillAuthorization: {
            input: {
                type: "structure",
                required: [ "AuthorizationResult", "SkillId" ],
                members: {
                    AuthorizationResult: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    SkillId: {},
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RegisterAVSDevice: {
            input: {
                type: "structure",
                required: [ "ClientId", "UserCode", "ProductId", "AmazonId" ],
                members: {
                    ClientId: {},
                    UserCode: {},
                    ProductId: {},
                    DeviceSerialNumber: {},
                    AmazonId: {},
                    RoomArn: {},
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceArn: {}
                }
            }
        },
        RejectSkill: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ResolveRoom: {
            input: {
                type: "structure",
                required: [ "UserId", "SkillId" ],
                members: {
                    UserId: {},
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RoomArn: {},
                    RoomName: {},
                    RoomSkillParameters: {
                        type: "list",
                        member: {
                            shape: "S5u"
                        }
                    }
                }
            }
        },
        RevokeInvitation: {
            input: {
                type: "structure",
                members: {
                    UserArn: {},
                    EnrollmentId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchAddressBooks: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S92"
                    },
                    SortCriteria: {
                        shape: "S97"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AddressBooks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AddressBookArn: {},
                                Name: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            }
        },
        SearchContacts: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S92"
                    },
                    SortCriteria: {
                        shape: "S97"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Contacts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ContactArn: {},
                                DisplayName: {},
                                FirstName: {},
                                LastName: {},
                                PhoneNumber: {
                                    shape: "S1g"
                                },
                                PhoneNumbers: {
                                    shape: "S1h"
                                },
                                SipAddresses: {
                                    shape: "S1k"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            }
        },
        SearchDevices: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S92"
                    },
                    SortCriteria: {
                        shape: "S97"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Devices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeviceArn: {},
                                DeviceSerialNumber: {},
                                DeviceType: {},
                                DeviceName: {},
                                SoftwareVersion: {},
                                MacAddress: {},
                                DeviceStatus: {},
                                NetworkProfileArn: {},
                                NetworkProfileName: {},
                                RoomArn: {},
                                RoomName: {},
                                DeviceStatusInfo: {
                                    shape: "S4t"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            }
        },
        SearchNetworkProfiles: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S92"
                    },
                    SortCriteria: {
                        shape: "S97"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkProfiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                NetworkProfileArn: {},
                                NetworkProfileName: {},
                                Description: {},
                                Ssid: {},
                                SecurityType: {},
                                EapMethod: {},
                                CertificateAuthorityArn: {}
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            }
        },
        SearchProfiles: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S92"
                    },
                    SortCriteria: {
                        shape: "S97"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Profiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProfileArn: {},
                                ProfileName: {},
                                IsDefault: {
                                    type: "boolean"
                                },
                                Address: {},
                                Timezone: {},
                                DistanceUnit: {},
                                TemperatureUnit: {},
                                WakeWord: {},
                                Locale: {}
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            }
        },
        SearchRooms: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S92"
                    },
                    SortCriteria: {
                        shape: "S97"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rooms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RoomArn: {},
                                RoomName: {},
                                Description: {},
                                ProviderCalendarId: {},
                                ProfileArn: {},
                                ProfileName: {}
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            }
        },
        SearchSkillGroups: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S92"
                    },
                    SortCriteria: {
                        shape: "S97"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SkillGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SkillGroupArn: {},
                                SkillGroupName: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            }
        },
        SearchUsers: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S92"
                    },
                    SortCriteria: {
                        shape: "S97"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UserArn: {},
                                FirstName: {},
                                LastName: {},
                                Email: {},
                                EnrollmentStatus: {},
                                EnrollmentId: {}
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            }
        },
        SendAnnouncement: {
            input: {
                type: "structure",
                required: [ "RoomFilters", "Content", "ClientRequestToken" ],
                members: {
                    RoomFilters: {
                        shape: "S92"
                    },
                    Content: {
                        type: "structure",
                        members: {
                            TextList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Locale", "Value" ],
                                    members: {
                                        Locale: {},
                                        Value: {}
                                    }
                                }
                            },
                            SsmlList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Locale", "Value" ],
                                    members: {
                                        Locale: {},
                                        Value: {}
                                    }
                                }
                            },
                            AudioList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Locale", "Location" ],
                                    members: {
                                        Locale: {},
                                        Location: {}
                                    }
                                }
                            }
                        }
                    },
                    TimeToLiveInSeconds: {
                        type: "integer"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnnouncementArn: {}
                }
            }
        },
        SendInvitation: {
            input: {
                type: "structure",
                members: {
                    UserArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartDeviceSync: {
            input: {
                type: "structure",
                required: [ "Features" ],
                members: {
                    RoomArn: {},
                    DeviceArn: {},
                    Features: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartSmartHomeApplianceDiscovery: {
            input: {
                type: "structure",
                required: [ "RoomArn" ],
                members: {
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "Arn", "Tags" ],
                members: {
                    Arn: {},
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "Arn", "TagKeys" ],
                members: {
                    Arn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAddressBook: {
            input: {
                type: "structure",
                required: [ "AddressBookArn" ],
                members: {
                    AddressBookArn: {},
                    Name: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateBusinessReportSchedule: {
            input: {
                type: "structure",
                required: [ "ScheduleArn" ],
                members: {
                    ScheduleArn: {},
                    S3BucketName: {},
                    S3KeyPrefix: {},
                    Format: {},
                    ScheduleName: {},
                    Recurrence: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConferenceProvider: {
            input: {
                type: "structure",
                required: [ "ConferenceProviderArn", "ConferenceProviderType", "MeetingSetting" ],
                members: {
                    ConferenceProviderArn: {},
                    ConferenceProviderType: {},
                    IPDialIn: {
                        shape: "S13"
                    },
                    PSTNDialIn: {
                        shape: "S16"
                    },
                    MeetingSetting: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContact: {
            input: {
                type: "structure",
                required: [ "ContactArn" ],
                members: {
                    ContactArn: {},
                    DisplayName: {},
                    FirstName: {},
                    LastName: {},
                    PhoneNumber: {
                        shape: "S1g"
                    },
                    PhoneNumbers: {
                        shape: "S1h"
                    },
                    SipAddresses: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDevice: {
            input: {
                type: "structure",
                members: {
                    DeviceArn: {},
                    DeviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateGateway: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {},
                    Name: {},
                    Description: {},
                    SoftwareVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateGatewayGroup: {
            input: {
                type: "structure",
                required: [ "GatewayGroupArn" ],
                members: {
                    GatewayGroupArn: {},
                    Name: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNetworkProfile: {
            input: {
                type: "structure",
                required: [ "NetworkProfileArn" ],
                members: {
                    NetworkProfileArn: {},
                    NetworkProfileName: {},
                    Description: {},
                    CurrentPassword: {
                        shape: "S1z"
                    },
                    NextPassword: {
                        shape: "S20"
                    },
                    CertificateAuthorityArn: {},
                    TrustAnchors: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateProfile: {
            input: {
                type: "structure",
                members: {
                    ProfileArn: {},
                    ProfileName: {},
                    IsDefault: {
                        type: "boolean"
                    },
                    Timezone: {},
                    Address: {},
                    DistanceUnit: {},
                    TemperatureUnit: {},
                    WakeWord: {},
                    Locale: {},
                    SetupModeDisabled: {
                        type: "boolean"
                    },
                    MaxVolumeLimit: {
                        type: "integer"
                    },
                    PSTNEnabled: {
                        type: "boolean"
                    },
                    DataRetentionOptIn: {
                        type: "boolean"
                    },
                    MeetingRoomConfiguration: {
                        type: "structure",
                        members: {
                            RoomUtilizationMetricsEnabled: {
                                type: "boolean"
                            },
                            EndOfMeetingReminder: {
                                type: "structure",
                                members: {
                                    ReminderAtMinutes: {
                                        shape: "S2g"
                                    },
                                    ReminderType: {},
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            InstantBooking: {
                                type: "structure",
                                members: {
                                    DurationInMinutes: {
                                        type: "integer"
                                    },
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            RequireCheckIn: {
                                type: "structure",
                                members: {
                                    ReleaseAfterMinutes: {
                                        type: "integer"
                                    },
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRoom: {
            input: {
                type: "structure",
                members: {
                    RoomArn: {},
                    RoomName: {},
                    Description: {},
                    ProviderCalendarId: {},
                    ProfileArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSkillGroup: {
            input: {
                type: "structure",
                members: {
                    SkillGroupArn: {},
                    SkillGroupName: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sl: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sv: {
            type: "structure",
            required: [ "Interval" ],
            members: {
                Interval: {}
            }
        },
        Sx: {
            type: "structure",
            members: {
                StartDate: {}
            }
        },
        S13: {
            type: "structure",
            required: [ "Endpoint", "CommsProtocol" ],
            members: {
                Endpoint: {},
                CommsProtocol: {}
            }
        },
        S16: {
            type: "structure",
            required: [ "CountryCode", "PhoneNumber", "OneClickIdDelay", "OneClickPinDelay" ],
            members: {
                CountryCode: {},
                PhoneNumber: {},
                OneClickIdDelay: {},
                OneClickPinDelay: {}
            }
        },
        S1b: {
            type: "structure",
            required: [ "RequirePin" ],
            members: {
                RequirePin: {}
            }
        },
        S1g: {
            type: "string",
            sensitive: true
        },
        S1h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Number", "Type" ],
                members: {
                    Number: {
                        shape: "S1g"
                    },
                    Type: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Uri", "Type" ],
                members: {
                    Uri: {
                        type: "string",
                        sensitive: true
                    },
                    Type: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S1z: {
            type: "string",
            sensitive: true
        },
        S20: {
            type: "string",
            sensitive: true
        },
        S21: {
            type: "list",
            member: {}
        },
        S2g: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        S4d: {
            type: "structure",
            members: {
                DefaultConferenceProviderArn: {}
            }
        },
        S4g: {
            type: "structure",
            members: {
                Arn: {},
                Name: {},
                Type: {},
                IPDialIn: {
                    shape: "S13"
                },
                PSTNDialIn: {
                    shape: "S16"
                },
                MeetingSetting: {
                    shape: "S1b"
                }
            }
        },
        S4t: {
            type: "structure",
            members: {
                DeviceStatusDetails: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Feature: {},
                            Code: {}
                        }
                    }
                },
                ConnectionStatus: {},
                ConnectionStatusUpdatedTime: {
                    type: "timestamp"
                }
            }
        },
        S5e: {
            type: "list",
            member: {}
        },
        S5u: {
            type: "structure",
            required: [ "ParameterKey", "ParameterValue" ],
            members: {
                ParameterKey: {},
                ParameterValue: {}
            }
        },
        S92: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Values" ],
                members: {
                    Key: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S97: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {
        ListBusinessReportSchedules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListConferenceProviders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDeviceEvents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListGatewayGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListGateways: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSkills: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSkillsStoreCategories: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSkillsStoreSkillsByCategory: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSmartHomeAppliances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTags: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchAddressBooks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchContacts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchNetworkProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchRooms: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchSkillGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["cloud9"] = {};

AWS.Cloud9 = AWS.Service.defineService("cloud9", [ "2017-09-23" ]);

AWS.apiLoader.services["cloud9"]["2017-09-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-23",
        endpointPrefix: "cloud9",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Cloud9",
        serviceId: "Cloud9",
        signatureVersion: "v4",
        targetPrefix: "AWSCloud9WorkspaceManagementService",
        uid: "cloud9-2017-09-23"
    },
    operations: {
        CreateEnvironmentEC2: {
            input: {
                type: "structure",
                required: [ "name", "instanceType" ],
                members: {
                    name: {},
                    description: {
                        shape: "S3"
                    },
                    clientRequestToken: {},
                    instanceType: {},
                    subnetId: {},
                    imageId: {},
                    automaticStopTimeMinutes: {
                        type: "integer"
                    },
                    ownerArn: {},
                    tags: {
                        shape: "Sa"
                    },
                    connectionType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentId: {}
                }
            },
            idempotent: true
        },
        CreateEnvironmentMembership: {
            input: {
                type: "structure",
                required: [ "environmentId", "userArn", "permissions" ],
                members: {
                    environmentId: {},
                    userArn: {},
                    permissions: {}
                }
            },
            output: {
                type: "structure",
                required: [ "membership" ],
                members: {
                    membership: {
                        shape: "Sk"
                    }
                }
            },
            idempotent: true
        },
        DeleteEnvironment: {
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteEnvironmentMembership: {
            input: {
                type: "structure",
                required: [ "environmentId", "userArn" ],
                members: {
                    environmentId: {},
                    userArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeEnvironmentMemberships: {
            input: {
                type: "structure",
                members: {
                    userArn: {},
                    environmentId: {},
                    permissions: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    memberships: {
                        type: "list",
                        member: {
                            shape: "Sk"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeEnvironmentStatus: {
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "status", "message" ],
                members: {
                    status: {},
                    message: {}
                }
            }
        },
        DescribeEnvironments: {
            input: {
                type: "structure",
                required: [ "environmentIds" ],
                members: {
                    environmentIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "type", "arn", "ownerArn" ],
                            members: {
                                id: {},
                                name: {},
                                description: {
                                    shape: "S3"
                                },
                                type: {},
                                connectionType: {},
                                arn: {},
                                ownerArn: {},
                                lifecycle: {
                                    type: "structure",
                                    members: {
                                        status: {},
                                        reason: {},
                                        failureResource: {}
                                    }
                                },
                                managedCredentialsStatus: {}
                            }
                        }
                    }
                }
            }
        },
        ListEnvironments: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    environmentIds: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "Sc"
                        },
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEnvironment: {
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {},
                    name: {},
                    description: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateEnvironmentMembership: {
            input: {
                type: "structure",
                required: [ "environmentId", "userArn", "permissions" ],
                members: {
                    environmentId: {},
                    userArn: {},
                    permissions: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    membership: {
                        shape: "Sk"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "string",
            sensitive: true
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "Sc"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                },
                sensitive: true
            },
            sensitive: true
        },
        Sc: {
            type: "string",
            sensitive: true
        },
        Sk: {
            type: "structure",
            required: [ "permissions", "userId", "userArn", "environmentId" ],
            members: {
                permissions: {},
                userId: {},
                userArn: {},
                environmentId: {},
                lastAccess: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {
        DescribeEnvironmentMemberships: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListEnvironments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["serverlessapplicationrepository"] = {};

AWS.ServerlessApplicationRepository = AWS.Service.defineService("serverlessapplicationrepository", [ "2017-09-08" ]);

AWS.apiLoader.services["serverlessapplicationrepository"]["2017-09-08"] = {
    metadata: {
        apiVersion: "2017-09-08",
        endpointPrefix: "serverlessrepo",
        signingName: "serverlessrepo",
        serviceFullName: "AWSServerlessApplicationRepository",
        serviceId: "ServerlessApplicationRepository",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "serverlessrepo-2017-09-08",
        signatureVersion: "v4"
    },
    operations: {
        CreateApplication: {
            http: {
                requestUri: "/applications",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Author: {
                        locationName: "author"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HomePageUrl: {
                        locationName: "homePageUrl"
                    },
                    Labels: {
                        shape: "S3",
                        locationName: "labels"
                    },
                    LicenseBody: {
                        locationName: "licenseBody"
                    },
                    LicenseUrl: {
                        locationName: "licenseUrl"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ReadmeBody: {
                        locationName: "readmeBody"
                    },
                    ReadmeUrl: {
                        locationName: "readmeUrl"
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    },
                    SourceCodeArchiveUrl: {
                        locationName: "sourceCodeArchiveUrl"
                    },
                    SourceCodeUrl: {
                        locationName: "sourceCodeUrl"
                    },
                    SpdxLicenseId: {
                        locationName: "spdxLicenseId"
                    },
                    TemplateBody: {
                        locationName: "templateBody"
                    },
                    TemplateUrl: {
                        locationName: "templateUrl"
                    }
                },
                required: [ "Description", "Name", "Author" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    Author: {
                        locationName: "author"
                    },
                    CreationTime: {
                        locationName: "creationTime"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HomePageUrl: {
                        locationName: "homePageUrl"
                    },
                    IsVerifiedAuthor: {
                        locationName: "isVerifiedAuthor",
                        type: "boolean"
                    },
                    Labels: {
                        shape: "S3",
                        locationName: "labels"
                    },
                    LicenseUrl: {
                        locationName: "licenseUrl"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ReadmeUrl: {
                        locationName: "readmeUrl"
                    },
                    SpdxLicenseId: {
                        locationName: "spdxLicenseId"
                    },
                    VerifiedAuthorUrl: {
                        locationName: "verifiedAuthorUrl"
                    },
                    Version: {
                        shape: "S6",
                        locationName: "version"
                    }
                }
            }
        },
        CreateApplicationVersion: {
            http: {
                method: "PUT",
                requestUri: "/applications/{applicationId}/versions/{semanticVersion}",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    SemanticVersion: {
                        location: "uri",
                        locationName: "semanticVersion"
                    },
                    SourceCodeArchiveUrl: {
                        locationName: "sourceCodeArchiveUrl"
                    },
                    SourceCodeUrl: {
                        locationName: "sourceCodeUrl"
                    },
                    TemplateBody: {
                        locationName: "templateBody"
                    },
                    TemplateUrl: {
                        locationName: "templateUrl"
                    }
                },
                required: [ "ApplicationId", "SemanticVersion" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    CreationTime: {
                        locationName: "creationTime"
                    },
                    ParameterDefinitions: {
                        shape: "S7",
                        locationName: "parameterDefinitions"
                    },
                    RequiredCapabilities: {
                        shape: "Sa",
                        locationName: "requiredCapabilities"
                    },
                    ResourcesSupported: {
                        locationName: "resourcesSupported",
                        type: "boolean"
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    },
                    SourceCodeArchiveUrl: {
                        locationName: "sourceCodeArchiveUrl"
                    },
                    SourceCodeUrl: {
                        locationName: "sourceCodeUrl"
                    },
                    TemplateUrl: {
                        locationName: "templateUrl"
                    }
                }
            }
        },
        CreateCloudFormationChangeSet: {
            http: {
                requestUri: "/applications/{applicationId}/changesets",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    Capabilities: {
                        shape: "S3",
                        locationName: "capabilities"
                    },
                    ChangeSetName: {
                        locationName: "changeSetName"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    },
                    Description: {
                        locationName: "description"
                    },
                    NotificationArns: {
                        shape: "S3",
                        locationName: "notificationArns"
                    },
                    ParameterOverrides: {
                        locationName: "parameterOverrides",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    locationName: "name"
                                },
                                Value: {
                                    locationName: "value"
                                }
                            },
                            required: [ "Value", "Name" ]
                        }
                    },
                    ResourceTypes: {
                        shape: "S3",
                        locationName: "resourceTypes"
                    },
                    RollbackConfiguration: {
                        locationName: "rollbackConfiguration",
                        type: "structure",
                        members: {
                            MonitoringTimeInMinutes: {
                                locationName: "monitoringTimeInMinutes",
                                type: "integer"
                            },
                            RollbackTriggers: {
                                locationName: "rollbackTriggers",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Arn: {
                                            locationName: "arn"
                                        },
                                        Type: {
                                            locationName: "type"
                                        }
                                    },
                                    required: [ "Type", "Arn" ]
                                }
                            }
                        }
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    },
                    StackName: {
                        locationName: "stackName"
                    },
                    Tags: {
                        locationName: "tags",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {
                                    locationName: "key"
                                },
                                Value: {
                                    locationName: "value"
                                }
                            },
                            required: [ "Value", "Key" ]
                        }
                    },
                    TemplateId: {
                        locationName: "templateId"
                    }
                },
                required: [ "ApplicationId", "StackName" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    ChangeSetId: {
                        locationName: "changeSetId"
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    },
                    StackId: {
                        locationName: "stackId"
                    }
                }
            }
        },
        CreateCloudFormationTemplate: {
            http: {
                requestUri: "/applications/{applicationId}/templates",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    CreationTime: {
                        locationName: "creationTime"
                    },
                    ExpirationTime: {
                        locationName: "expirationTime"
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    },
                    Status: {
                        locationName: "status"
                    },
                    TemplateId: {
                        locationName: "templateId"
                    },
                    TemplateUrl: {
                        locationName: "templateUrl"
                    }
                }
            }
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                },
                required: [ "ApplicationId" ]
            }
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    SemanticVersion: {
                        location: "querystring",
                        locationName: "semanticVersion"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    Author: {
                        locationName: "author"
                    },
                    CreationTime: {
                        locationName: "creationTime"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HomePageUrl: {
                        locationName: "homePageUrl"
                    },
                    IsVerifiedAuthor: {
                        locationName: "isVerifiedAuthor",
                        type: "boolean"
                    },
                    Labels: {
                        shape: "S3",
                        locationName: "labels"
                    },
                    LicenseUrl: {
                        locationName: "licenseUrl"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ReadmeUrl: {
                        locationName: "readmeUrl"
                    },
                    SpdxLicenseId: {
                        locationName: "spdxLicenseId"
                    },
                    VerifiedAuthorUrl: {
                        locationName: "verifiedAuthorUrl"
                    },
                    Version: {
                        shape: "S6",
                        locationName: "version"
                    }
                }
            }
        },
        GetApplicationPolicy: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    Statements: {
                        shape: "Sv",
                        locationName: "statements"
                    }
                }
            }
        },
        GetCloudFormationTemplate: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/templates/{templateId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "templateId"
                    }
                },
                required: [ "ApplicationId", "TemplateId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    CreationTime: {
                        locationName: "creationTime"
                    },
                    ExpirationTime: {
                        locationName: "expirationTime"
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    },
                    Status: {
                        locationName: "status"
                    },
                    TemplateId: {
                        locationName: "templateId"
                    },
                    TemplateUrl: {
                        locationName: "templateUrl"
                    }
                }
            }
        },
        ListApplicationDependencies: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/dependencies",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxItems",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    SemanticVersion: {
                        location: "querystring",
                        locationName: "semanticVersion"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    Dependencies: {
                        locationName: "dependencies",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {
                                    locationName: "applicationId"
                                },
                                SemanticVersion: {
                                    locationName: "semanticVersion"
                                }
                            },
                            required: [ "ApplicationId", "SemanticVersion" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListApplicationVersions: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxItems",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Versions: {
                        locationName: "versions",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {
                                    locationName: "applicationId"
                                },
                                CreationTime: {
                                    locationName: "creationTime"
                                },
                                SemanticVersion: {
                                    locationName: "semanticVersion"
                                },
                                SourceCodeUrl: {
                                    locationName: "sourceCodeUrl"
                                }
                            },
                            required: [ "CreationTime", "ApplicationId", "SemanticVersion" ]
                        }
                    }
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxItems",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Applications: {
                        locationName: "applications",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {
                                    locationName: "applicationId"
                                },
                                Author: {
                                    locationName: "author"
                                },
                                CreationTime: {
                                    locationName: "creationTime"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                HomePageUrl: {
                                    locationName: "homePageUrl"
                                },
                                Labels: {
                                    shape: "S3",
                                    locationName: "labels"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                SpdxLicenseId: {
                                    locationName: "spdxLicenseId"
                                }
                            },
                            required: [ "Description", "Author", "ApplicationId", "Name" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        PutApplicationPolicy: {
            http: {
                method: "PUT",
                requestUri: "/applications/{applicationId}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    Statements: {
                        shape: "Sv",
                        locationName: "statements"
                    }
                },
                required: [ "ApplicationId", "Statements" ]
            },
            output: {
                type: "structure",
                members: {
                    Statements: {
                        shape: "Sv",
                        locationName: "statements"
                    }
                }
            }
        },
        UnshareApplication: {
            http: {
                requestUri: "/applications/{applicationId}/unshare",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    OrganizationId: {
                        locationName: "organizationId"
                    }
                },
                required: [ "ApplicationId", "OrganizationId" ]
            }
        },
        UpdateApplication: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    Author: {
                        locationName: "author"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HomePageUrl: {
                        locationName: "homePageUrl"
                    },
                    Labels: {
                        shape: "S3",
                        locationName: "labels"
                    },
                    ReadmeBody: {
                        locationName: "readmeBody"
                    },
                    ReadmeUrl: {
                        locationName: "readmeUrl"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    Author: {
                        locationName: "author"
                    },
                    CreationTime: {
                        locationName: "creationTime"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HomePageUrl: {
                        locationName: "homePageUrl"
                    },
                    IsVerifiedAuthor: {
                        locationName: "isVerifiedAuthor",
                        type: "boolean"
                    },
                    Labels: {
                        shape: "S3",
                        locationName: "labels"
                    },
                    LicenseUrl: {
                        locationName: "licenseUrl"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ReadmeUrl: {
                        locationName: "readmeUrl"
                    },
                    SpdxLicenseId: {
                        locationName: "spdxLicenseId"
                    },
                    VerifiedAuthorUrl: {
                        locationName: "verifiedAuthorUrl"
                    },
                    Version: {
                        shape: "S6",
                        locationName: "version"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S6: {
            type: "structure",
            members: {
                ApplicationId: {
                    locationName: "applicationId"
                },
                CreationTime: {
                    locationName: "creationTime"
                },
                ParameterDefinitions: {
                    shape: "S7",
                    locationName: "parameterDefinitions"
                },
                RequiredCapabilities: {
                    shape: "Sa",
                    locationName: "requiredCapabilities"
                },
                ResourcesSupported: {
                    locationName: "resourcesSupported",
                    type: "boolean"
                },
                SemanticVersion: {
                    locationName: "semanticVersion"
                },
                SourceCodeArchiveUrl: {
                    locationName: "sourceCodeArchiveUrl"
                },
                SourceCodeUrl: {
                    locationName: "sourceCodeUrl"
                },
                TemplateUrl: {
                    locationName: "templateUrl"
                }
            },
            required: [ "TemplateUrl", "ParameterDefinitions", "ResourcesSupported", "CreationTime", "RequiredCapabilities", "ApplicationId", "SemanticVersion" ]
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AllowedPattern: {
                        locationName: "allowedPattern"
                    },
                    AllowedValues: {
                        shape: "S3",
                        locationName: "allowedValues"
                    },
                    ConstraintDescription: {
                        locationName: "constraintDescription"
                    },
                    DefaultValue: {
                        locationName: "defaultValue"
                    },
                    Description: {
                        locationName: "description"
                    },
                    MaxLength: {
                        locationName: "maxLength",
                        type: "integer"
                    },
                    MaxValue: {
                        locationName: "maxValue",
                        type: "integer"
                    },
                    MinLength: {
                        locationName: "minLength",
                        type: "integer"
                    },
                    MinValue: {
                        locationName: "minValue",
                        type: "integer"
                    },
                    Name: {
                        locationName: "name"
                    },
                    NoEcho: {
                        locationName: "noEcho",
                        type: "boolean"
                    },
                    ReferencedByResources: {
                        shape: "S3",
                        locationName: "referencedByResources"
                    },
                    Type: {
                        locationName: "type"
                    }
                },
                required: [ "ReferencedByResources", "Name" ]
            }
        },
        Sa: {
            type: "list",
            member: {}
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Actions: {
                        shape: "S3",
                        locationName: "actions"
                    },
                    PrincipalOrgIDs: {
                        shape: "S3",
                        locationName: "principalOrgIDs"
                    },
                    Principals: {
                        shape: "S3",
                        locationName: "principals"
                    },
                    StatementId: {
                        locationName: "statementId"
                    }
                },
                required: [ "Principals", "Actions" ]
            }
        }
    },
    paginators: {
        ListApplicationVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxItems"
        },
        ListApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxItems"
        },
        ListApplicationDependencies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxItems"
        }
    }
};

AWS.apiLoader.services["servicediscovery"] = {};

AWS.ServiceDiscovery = AWS.Service.defineService("servicediscovery", [ "2017-03-14" ]);

AWS.apiLoader.services["servicediscovery"]["2017-03-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-03-14",
        endpointPrefix: "servicediscovery",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "ServiceDiscovery",
        serviceFullName: "AWS Cloud Map",
        serviceId: "ServiceDiscovery",
        signatureVersion: "v4",
        targetPrefix: "Route53AutoNaming_v20170314",
        uid: "servicediscovery-2017-03-14"
    },
    operations: {
        CreateHttpNamespace: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Description: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        CreatePrivateDnsNamespace: {
            input: {
                type: "structure",
                required: [ "Name", "Vpc" ],
                members: {
                    Name: {},
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Description: {},
                    Vpc: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        CreatePublicDnsNamespace: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Description: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        CreateService: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    NamespaceId: {},
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Description: {},
                    DnsConfig: {
                        shape: "Sj"
                    },
                    HealthCheckConfig: {
                        shape: "Sp"
                    },
                    HealthCheckCustomConfig: {
                        shape: "St"
                    },
                    Tags: {
                        shape: "S5"
                    },
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Service: {
                        shape: "Sw"
                    }
                }
            }
        },
        DeleteNamespace: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        DeleteService: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterInstance: {
            input: {
                type: "structure",
                required: [ "ServiceId", "InstanceId" ],
                members: {
                    ServiceId: {},
                    InstanceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        DiscoverInstances: {
            input: {
                type: "structure",
                required: [ "NamespaceName", "ServiceName" ],
                members: {
                    NamespaceName: {},
                    ServiceName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    QueryParameters: {
                        shape: "S1a"
                    },
                    OptionalParameters: {
                        shape: "S1a"
                    },
                    HealthStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceId: {},
                                NamespaceName: {},
                                ServiceName: {},
                                HealthStatus: {},
                                Attributes: {
                                    shape: "S1a"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "data-"
            }
        },
        GetInstance: {
            input: {
                type: "structure",
                required: [ "ServiceId", "InstanceId" ],
                members: {
                    ServiceId: {},
                    InstanceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Instance: {
                        type: "structure",
                        required: [ "Id" ],
                        members: {
                            Id: {},
                            CreatorRequestId: {},
                            Attributes: {
                                shape: "S1a"
                            }
                        }
                    }
                }
            }
        },
        GetInstancesHealthStatus: {
            input: {
                type: "structure",
                required: [ "ServiceId" ],
                members: {
                    ServiceId: {},
                    Instances: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    NextToken: {}
                }
            }
        },
        GetNamespace: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Namespace: {
                        type: "structure",
                        members: {
                            Id: {},
                            Arn: {},
                            Name: {},
                            Type: {},
                            Description: {},
                            ServiceCount: {
                                type: "integer"
                            },
                            Properties: {
                                shape: "S1v"
                            },
                            CreateDate: {
                                type: "timestamp"
                            },
                            CreatorRequestId: {}
                        }
                    }
                }
            }
        },
        GetOperation: {
            input: {
                type: "structure",
                required: [ "OperationId" ],
                members: {
                    OperationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Operation: {
                        type: "structure",
                        members: {
                            Id: {},
                            Type: {},
                            Status: {},
                            ErrorMessage: {},
                            ErrorCode: {},
                            CreateDate: {
                                type: "timestamp"
                            },
                            UpdateDate: {
                                type: "timestamp"
                            },
                            Targets: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            }
        },
        GetService: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Service: {
                        shape: "Sw"
                    }
                }
            }
        },
        ListInstances: {
            input: {
                type: "structure",
                required: [ "ServiceId" ],
                members: {
                    ServiceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Attributes: {
                                    shape: "S1a"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNamespaces: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S2h"
                                },
                                Condition: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Namespaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                Type: {},
                                Description: {},
                                ServiceCount: {
                                    type: "integer"
                                },
                                Properties: {
                                    shape: "S1v"
                                },
                                CreateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListOperations: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S2h"
                                },
                                Condition: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Operations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListServices: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S2h"
                                },
                                Condition: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Services: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                Type: {},
                                Description: {},
                                InstanceCount: {
                                    type: "integer"
                                },
                                DnsConfig: {
                                    shape: "Sj"
                                },
                                HealthCheckConfig: {
                                    shape: "Sp"
                                },
                                HealthCheckCustomConfig: {
                                    shape: "St"
                                },
                                CreateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S5"
                    }
                }
            }
        },
        RegisterInstance: {
            input: {
                type: "structure",
                required: [ "ServiceId", "InstanceId", "Attributes" ],
                members: {
                    ServiceId: {},
                    InstanceId: {},
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Attributes: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateInstanceCustomHealthStatus: {
            input: {
                type: "structure",
                required: [ "ServiceId", "InstanceId", "Status" ],
                members: {
                    ServiceId: {},
                    InstanceId: {},
                    Status: {}
                }
            }
        },
        UpdateService: {
            input: {
                type: "structure",
                required: [ "Id", "Service" ],
                members: {
                    Id: {},
                    Service: {
                        type: "structure",
                        members: {
                            Description: {},
                            DnsConfig: {
                                type: "structure",
                                required: [ "DnsRecords" ],
                                members: {
                                    DnsRecords: {
                                        shape: "Sl"
                                    }
                                }
                            },
                            HealthCheckConfig: {
                                shape: "Sp"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sj: {
            type: "structure",
            required: [ "DnsRecords" ],
            members: {
                NamespaceId: {
                    deprecated: true,
                    deprecatedMessage: "Top level attribute in request should be used to reference namespace-id"
                },
                RoutingPolicy: {},
                DnsRecords: {
                    shape: "Sl"
                }
            }
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "TTL" ],
                members: {
                    Type: {},
                    TTL: {
                        type: "long"
                    }
                }
            }
        },
        Sp: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {},
                ResourcePath: {},
                FailureThreshold: {
                    type: "integer"
                }
            }
        },
        St: {
            type: "structure",
            members: {
                FailureThreshold: {
                    deprecated: true,
                    deprecatedMessage: "Configurable FailureThreshold of HealthCheckCustomConfig is deprecated.  It will always have value 1.",
                    type: "integer"
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                NamespaceId: {},
                Description: {},
                InstanceCount: {
                    type: "integer"
                },
                DnsConfig: {
                    shape: "Sj"
                },
                Type: {},
                HealthCheckConfig: {
                    shape: "Sp"
                },
                HealthCheckCustomConfig: {
                    shape: "St"
                },
                CreateDate: {
                    type: "timestamp"
                },
                CreatorRequestId: {}
            }
        },
        S1a: {
            type: "map",
            key: {},
            value: {}
        },
        S1v: {
            type: "structure",
            members: {
                DnsProperties: {
                    type: "structure",
                    members: {
                        HostedZoneId: {}
                    }
                },
                HttpProperties: {
                    type: "structure",
                    members: {
                        HttpName: {}
                    }
                }
            }
        },
        S2h: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetInstancesHealthStatus: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNamespaces: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListOperations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListServices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["workmail"] = {};

AWS.WorkMail = AWS.Service.defineService("workmail", [ "2017-10-01" ]);

AWS.apiLoader.services["workmail"]["2017-10-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-10-01",
        endpointPrefix: "workmail",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon WorkMail",
        serviceId: "WorkMail",
        signatureVersion: "v4",
        targetPrefix: "WorkMailService",
        uid: "workmail-2017-10-01"
    },
    operations: {
        AssociateDelegateToResource: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ResourceId", "EntityId" ],
                members: {
                    OrganizationId: {},
                    ResourceId: {},
                    EntityId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        AssociateMemberToGroup: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "GroupId", "MemberId" ],
                members: {
                    OrganizationId: {},
                    GroupId: {},
                    MemberId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        CancelMailboxExportJob: {
            input: {
                type: "structure",
                required: [ "ClientToken", "JobId", "OrganizationId" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    JobId: {},
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        CreateAlias: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId", "Alias" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    Alias: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        CreateGroup: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Name" ],
                members: {
                    OrganizationId: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupId: {}
                }
            },
            idempotent: true
        },
        CreateMobileDeviceAccessRule: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Name", "Effect" ],
                members: {
                    OrganizationId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Name: {},
                    Description: {},
                    Effect: {},
                    DeviceTypes: {
                        shape: "Sm"
                    },
                    NotDeviceTypes: {
                        shape: "Sm"
                    },
                    DeviceModels: {
                        shape: "So"
                    },
                    NotDeviceModels: {
                        shape: "So"
                    },
                    DeviceOperatingSystems: {
                        shape: "Sq"
                    },
                    NotDeviceOperatingSystems: {
                        shape: "Sq"
                    },
                    DeviceUserAgents: {
                        shape: "Ss"
                    },
                    NotDeviceUserAgents: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MobileDeviceAccessRuleId: {}
                }
            }
        },
        CreateOrganization: {
            input: {
                type: "structure",
                required: [ "Alias" ],
                members: {
                    DirectoryId: {},
                    Alias: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Domains: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainName: {},
                                HostedZoneId: {}
                            }
                        }
                    },
                    KmsKeyArn: {},
                    EnableInteroperability: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationId: {}
                }
            },
            idempotent: true
        },
        CreateResource: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Name", "Type" ],
                members: {
                    OrganizationId: {},
                    Name: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceId: {}
                }
            },
            idempotent: true
        },
        CreateUser: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Name", "DisplayName", "Password" ],
                members: {
                    OrganizationId: {},
                    Name: {},
                    DisplayName: {},
                    Password: {
                        shape: "S1d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserId: {}
                }
            },
            idempotent: true
        },
        DeleteAccessControlRule: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Name" ],
                members: {
                    OrganizationId: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAlias: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId", "Alias" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    Alias: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteGroup: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "GroupId" ],
                members: {
                    OrganizationId: {},
                    GroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteMailboxPermissions: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId", "GranteeId" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    GranteeId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteMobileDeviceAccessRule: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "MobileDeviceAccessRuleId" ],
                members: {
                    OrganizationId: {},
                    MobileDeviceAccessRuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteOrganization: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "DeleteDirectory" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    OrganizationId: {},
                    DeleteDirectory: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationId: {},
                    State: {}
                }
            },
            idempotent: true
        },
        DeleteResource: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ResourceId" ],
                members: {
                    OrganizationId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteRetentionPolicy: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Id" ],
                members: {
                    OrganizationId: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId" ],
                members: {
                    OrganizationId: {},
                    UserId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeregisterFromWorkMail: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId" ],
                members: {
                    OrganizationId: {},
                    EntityId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeGroup: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "GroupId" ],
                members: {
                    OrganizationId: {},
                    GroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupId: {},
                    Name: {},
                    Email: {},
                    State: {},
                    EnabledDate: {
                        type: "timestamp"
                    },
                    DisabledDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeMailboxExportJob: {
            input: {
                type: "structure",
                required: [ "JobId", "OrganizationId" ],
                members: {
                    JobId: {},
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EntityId: {},
                    Description: {},
                    RoleArn: {},
                    KmsKeyArn: {},
                    S3BucketName: {},
                    S3Prefix: {},
                    S3Path: {},
                    EstimatedProgress: {
                        type: "integer"
                    },
                    State: {},
                    ErrorInfo: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeOrganization: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationId: {},
                    Alias: {},
                    State: {},
                    DirectoryId: {},
                    DirectoryType: {},
                    DefaultMailDomain: {},
                    CompletedDate: {
                        type: "timestamp"
                    },
                    ErrorMessage: {},
                    ARN: {}
                }
            },
            idempotent: true
        },
        DescribeResource: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ResourceId" ],
                members: {
                    OrganizationId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceId: {},
                    Email: {},
                    Name: {},
                    Type: {},
                    BookingOptions: {
                        shape: "S2j"
                    },
                    State: {},
                    EnabledDate: {
                        type: "timestamp"
                    },
                    DisabledDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeUser: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId" ],
                members: {
                    OrganizationId: {},
                    UserId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserId: {},
                    Name: {},
                    Email: {},
                    DisplayName: {},
                    State: {},
                    UserRole: {},
                    EnabledDate: {
                        type: "timestamp"
                    },
                    DisabledDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DisassociateDelegateFromResource: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ResourceId", "EntityId" ],
                members: {
                    OrganizationId: {},
                    ResourceId: {},
                    EntityId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateMemberFromGroup: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "GroupId", "MemberId" ],
                members: {
                    OrganizationId: {},
                    GroupId: {},
                    MemberId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetAccessControlEffect: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "IpAddress", "Action", "UserId" ],
                members: {
                    OrganizationId: {},
                    IpAddress: {},
                    Action: {},
                    UserId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Effect: {},
                    MatchedRules: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        GetDefaultRetentionPolicy: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    Description: {},
                    FolderConfigurations: {
                        shape: "S2z"
                    }
                }
            },
            idempotent: true
        },
        GetMailboxDetails: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId" ],
                members: {
                    OrganizationId: {},
                    UserId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MailboxQuota: {
                        type: "integer"
                    },
                    MailboxSize: {
                        type: "double"
                    }
                }
            },
            idempotent: true
        },
        GetMobileDeviceAccessEffect: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    DeviceType: {},
                    DeviceModel: {},
                    DeviceOperatingSystem: {},
                    DeviceUserAgent: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Effect: {},
                    MatchedRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MobileDeviceAccessRuleId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListAccessControlRules: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Effect: {},
                                Description: {},
                                IpRanges: {
                                    shape: "S3h"
                                },
                                NotIpRanges: {
                                    shape: "S3h"
                                },
                                Actions: {
                                    shape: "S3j"
                                },
                                NotActions: {
                                    shape: "S3j"
                                },
                                UserIds: {
                                    shape: "S3k"
                                },
                                NotUserIds: {
                                    shape: "S3k"
                                },
                                DateCreated: {
                                    type: "timestamp"
                                },
                                DateModified: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListAliases: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Aliases: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListGroupMembers: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "GroupId" ],
                members: {
                    OrganizationId: {},
                    GroupId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Members: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Type: {},
                                State: {},
                                EnabledDate: {
                                    type: "timestamp"
                                },
                                DisabledDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListGroups: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Email: {},
                                Name: {},
                                State: {},
                                EnabledDate: {
                                    type: "timestamp"
                                },
                                DisabledDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListMailboxExportJobs: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobId: {},
                                EntityId: {},
                                Description: {},
                                S3BucketName: {},
                                S3Path: {},
                                EstimatedProgress: {
                                    type: "integer"
                                },
                                State: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListMailboxPermissions: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Permissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "GranteeId", "GranteeType", "PermissionValues" ],
                            members: {
                                GranteeId: {},
                                GranteeType: {},
                                PermissionValues: {
                                    shape: "S47"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListMobileDeviceAccessRules: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MobileDeviceAccessRuleId: {},
                                Name: {},
                                Description: {},
                                Effect: {},
                                DeviceTypes: {
                                    shape: "Sm"
                                },
                                NotDeviceTypes: {
                                    shape: "Sm"
                                },
                                DeviceModels: {
                                    shape: "So"
                                },
                                NotDeviceModels: {
                                    shape: "So"
                                },
                                DeviceOperatingSystems: {
                                    shape: "Sq"
                                },
                                NotDeviceOperatingSystems: {
                                    shape: "Sq"
                                },
                                DeviceUserAgents: {
                                    shape: "Ss"
                                },
                                NotDeviceUserAgents: {
                                    shape: "Ss"
                                },
                                DateCreated: {
                                    type: "timestamp"
                                },
                                DateModified: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListOrganizations: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                OrganizationId: {},
                                Alias: {},
                                DefaultMailDomain: {},
                                ErrorMessage: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListResourceDelegates: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ResourceId" ],
                members: {
                    OrganizationId: {},
                    ResourceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Delegates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "Type" ],
                            members: {
                                Id: {},
                                Type: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListResources: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Resources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Email: {},
                                Name: {},
                                Type: {},
                                State: {},
                                EnabledDate: {
                                    type: "timestamp"
                                },
                                DisabledDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S4r"
                    }
                }
            }
        },
        ListUsers: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Email: {},
                                Name: {},
                                DisplayName: {},
                                State: {},
                                UserRole: {},
                                EnabledDate: {
                                    type: "timestamp"
                                },
                                DisabledDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        PutAccessControlRule: {
            input: {
                type: "structure",
                required: [ "Name", "Effect", "Description", "OrganizationId" ],
                members: {
                    Name: {},
                    Effect: {},
                    Description: {},
                    IpRanges: {
                        shape: "S3h"
                    },
                    NotIpRanges: {
                        shape: "S3h"
                    },
                    Actions: {
                        shape: "S3j"
                    },
                    NotActions: {
                        shape: "S3j"
                    },
                    UserIds: {
                        shape: "S3k"
                    },
                    NotUserIds: {
                        shape: "S3k"
                    },
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutMailboxPermissions: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId", "GranteeId", "PermissionValues" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    GranteeId: {},
                    PermissionValues: {
                        shape: "S47"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        PutRetentionPolicy: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Name", "FolderConfigurations" ],
                members: {
                    OrganizationId: {},
                    Id: {},
                    Name: {},
                    Description: {
                        type: "string",
                        sensitive: true
                    },
                    FolderConfigurations: {
                        shape: "S2z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        RegisterToWorkMail: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId", "Email" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    Email: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        ResetPassword: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId", "Password" ],
                members: {
                    OrganizationId: {},
                    UserId: {},
                    Password: {
                        shape: "S1d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        StartMailboxExportJob: {
            input: {
                type: "structure",
                required: [ "ClientToken", "OrganizationId", "EntityId", "RoleArn", "KmsKeyArn", "S3BucketName", "S3Prefix" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    OrganizationId: {},
                    EntityId: {},
                    Description: {},
                    RoleArn: {},
                    KmsKeyArn: {},
                    S3BucketName: {},
                    S3Prefix: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S4r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMailboxQuota: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId", "MailboxQuota" ],
                members: {
                    OrganizationId: {},
                    UserId: {},
                    MailboxQuota: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateMobileDeviceAccessRule: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "MobileDeviceAccessRuleId", "Name", "Effect" ],
                members: {
                    OrganizationId: {},
                    MobileDeviceAccessRuleId: {},
                    Name: {},
                    Description: {},
                    Effect: {},
                    DeviceTypes: {
                        shape: "Sm"
                    },
                    NotDeviceTypes: {
                        shape: "Sm"
                    },
                    DeviceModels: {
                        shape: "So"
                    },
                    NotDeviceModels: {
                        shape: "So"
                    },
                    DeviceOperatingSystems: {
                        shape: "Sq"
                    },
                    NotDeviceOperatingSystems: {
                        shape: "Sq"
                    },
                    DeviceUserAgents: {
                        shape: "Ss"
                    },
                    NotDeviceUserAgents: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePrimaryEmailAddress: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId", "Email" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    Email: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateResource: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ResourceId" ],
                members: {
                    OrganizationId: {},
                    ResourceId: {},
                    Name: {},
                    BookingOptions: {
                        shape: "S2j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        Sm: {
            type: "list",
            member: {}
        },
        So: {
            type: "list",
            member: {}
        },
        Sq: {
            type: "list",
            member: {}
        },
        Ss: {
            type: "list",
            member: {}
        },
        S1d: {
            type: "string",
            sensitive: true
        },
        S2j: {
            type: "structure",
            members: {
                AutoAcceptRequests: {
                    type: "boolean"
                },
                AutoDeclineRecurringRequests: {
                    type: "boolean"
                },
                AutoDeclineConflictingRequests: {
                    type: "boolean"
                }
            }
        },
        S2z: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Action" ],
                members: {
                    Name: {},
                    Action: {},
                    Period: {
                        type: "integer"
                    }
                }
            }
        },
        S3h: {
            type: "list",
            member: {}
        },
        S3j: {
            type: "list",
            member: {}
        },
        S3k: {
            type: "list",
            member: {}
        },
        S47: {
            type: "list",
            member: {}
        },
        S4r: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {
        ListAliases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListGroupMembers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMailboxExportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMailboxPermissions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListOrganizations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListResourceDelegates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["autoscalingplans"] = {};

AWS.AutoScalingPlans = AWS.Service.defineService("autoscalingplans", [ "2018-01-06" ]);

AWS.apiLoader.services["autoscalingplans"]["2018-01-06"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-01-06",
        endpointPrefix: "autoscaling-plans",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Auto Scaling Plans",
        serviceId: "Auto Scaling Plans",
        signatureVersion: "v4",
        signingName: "autoscaling-plans",
        targetPrefix: "AnyScaleScalingPlannerFrontendService",
        uid: "autoscaling-plans-2018-01-06"
    },
    operations: {
        CreateScalingPlan: {
            input: {
                type: "structure",
                required: [ "ScalingPlanName", "ApplicationSource", "ScalingInstructions" ],
                members: {
                    ScalingPlanName: {},
                    ApplicationSource: {
                        shape: "S3"
                    },
                    ScalingInstructions: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ScalingPlanVersion" ],
                members: {
                    ScalingPlanVersion: {
                        type: "long"
                    }
                }
            }
        },
        DeleteScalingPlan: {
            input: {
                type: "structure",
                required: [ "ScalingPlanName", "ScalingPlanVersion" ],
                members: {
                    ScalingPlanName: {},
                    ScalingPlanVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeScalingPlanResources: {
            input: {
                type: "structure",
                required: [ "ScalingPlanName", "ScalingPlanVersion" ],
                members: {
                    ScalingPlanName: {},
                    ScalingPlanVersion: {
                        type: "long"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ScalingPlanResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ScalingPlanName", "ScalingPlanVersion", "ServiceNamespace", "ResourceId", "ScalableDimension", "ScalingStatusCode" ],
                            members: {
                                ScalingPlanName: {},
                                ScalingPlanVersion: {
                                    type: "long"
                                },
                                ServiceNamespace: {},
                                ResourceId: {},
                                ScalableDimension: {},
                                ScalingPolicies: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "PolicyName", "PolicyType" ],
                                        members: {
                                            PolicyName: {},
                                            PolicyType: {},
                                            TargetTrackingConfiguration: {
                                                shape: "Sh"
                                            }
                                        }
                                    }
                                },
                                ScalingStatusCode: {},
                                ScalingStatusMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeScalingPlans: {
            input: {
                type: "structure",
                members: {
                    ScalingPlanNames: {
                        type: "list",
                        member: {}
                    },
                    ScalingPlanVersion: {
                        type: "long"
                    },
                    ApplicationSources: {
                        type: "list",
                        member: {
                            shape: "S3"
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ScalingPlans: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ScalingPlanName", "ScalingPlanVersion", "ApplicationSource", "ScalingInstructions", "StatusCode" ],
                            members: {
                                ScalingPlanName: {},
                                ScalingPlanVersion: {
                                    type: "long"
                                },
                                ApplicationSource: {
                                    shape: "S3"
                                },
                                ScalingInstructions: {
                                    shape: "Sa"
                                },
                                StatusCode: {},
                                StatusMessage: {},
                                StatusStartTime: {
                                    type: "timestamp"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetScalingPlanResourceForecastData: {
            input: {
                type: "structure",
                required: [ "ScalingPlanName", "ScalingPlanVersion", "ServiceNamespace", "ResourceId", "ScalableDimension", "ForecastDataType", "StartTime", "EndTime" ],
                members: {
                    ScalingPlanName: {},
                    ScalingPlanVersion: {
                        type: "long"
                    },
                    ServiceNamespace: {},
                    ResourceId: {},
                    ScalableDimension: {},
                    ForecastDataType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Datapoints" ],
                members: {
                    Datapoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "timestamp"
                                },
                                Value: {
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            }
        },
        UpdateScalingPlan: {
            input: {
                type: "structure",
                required: [ "ScalingPlanName", "ScalingPlanVersion" ],
                members: {
                    ScalingPlanName: {},
                    ScalingPlanVersion: {
                        type: "long"
                    },
                    ApplicationSource: {
                        shape: "S3"
                    },
                    ScalingInstructions: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                CloudFormationStackARN: {},
                TagFilters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Values: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ServiceNamespace", "ResourceId", "ScalableDimension", "MinCapacity", "MaxCapacity", "TargetTrackingConfigurations" ],
                members: {
                    ServiceNamespace: {},
                    ResourceId: {},
                    ScalableDimension: {},
                    MinCapacity: {
                        type: "integer"
                    },
                    MaxCapacity: {
                        type: "integer"
                    },
                    TargetTrackingConfigurations: {
                        type: "list",
                        member: {
                            shape: "Sh"
                        }
                    },
                    PredefinedLoadMetricSpecification: {
                        type: "structure",
                        required: [ "PredefinedLoadMetricType" ],
                        members: {
                            PredefinedLoadMetricType: {},
                            ResourceLabel: {}
                        }
                    },
                    CustomizedLoadMetricSpecification: {
                        type: "structure",
                        required: [ "MetricName", "Namespace", "Statistic" ],
                        members: {
                            MetricName: {},
                            Namespace: {},
                            Dimensions: {
                                shape: "So"
                            },
                            Statistic: {},
                            Unit: {}
                        }
                    },
                    ScheduledActionBufferTime: {
                        type: "integer"
                    },
                    PredictiveScalingMaxCapacityBehavior: {},
                    PredictiveScalingMaxCapacityBuffer: {
                        type: "integer"
                    },
                    PredictiveScalingMode: {},
                    ScalingPolicyUpdateBehavior: {},
                    DisableDynamicScaling: {
                        type: "boolean"
                    }
                }
            }
        },
        Sh: {
            type: "structure",
            required: [ "TargetValue" ],
            members: {
                PredefinedScalingMetricSpecification: {
                    type: "structure",
                    required: [ "PredefinedScalingMetricType" ],
                    members: {
                        PredefinedScalingMetricType: {},
                        ResourceLabel: {}
                    }
                },
                CustomizedScalingMetricSpecification: {
                    type: "structure",
                    required: [ "MetricName", "Namespace", "Statistic" ],
                    members: {
                        MetricName: {},
                        Namespace: {},
                        Dimensions: {
                            shape: "So"
                        },
                        Statistic: {},
                        Unit: {}
                    }
                },
                TargetValue: {
                    type: "double"
                },
                DisableScaleIn: {
                    type: "boolean"
                },
                ScaleOutCooldown: {
                    type: "integer"
                },
                ScaleInCooldown: {
                    type: "integer"
                },
                EstimatedInstanceWarmup: {
                    type: "integer"
                }
            }
        },
        So: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["transcribeservice"] = {};

AWS.TranscribeService = AWS.Service.defineService("transcribeservice", [ "2017-10-26" ]);

AWS.apiLoader.services["transcribeservice"]["2017-10-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-10-26",
        endpointPrefix: "transcribe",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Transcribe Service",
        serviceId: "Transcribe",
        signatureVersion: "v4",
        signingName: "transcribe",
        targetPrefix: "Transcribe",
        uid: "transcribe-2017-10-26"
    },
    operations: {
        CreateLanguageModel: {
            input: {
                type: "structure",
                required: [ "LanguageCode", "BaseModelName", "ModelName", "InputDataConfig" ],
                members: {
                    LanguageCode: {},
                    BaseModelName: {},
                    ModelName: {},
                    InputDataConfig: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LanguageCode: {},
                    BaseModelName: {},
                    ModelName: {},
                    InputDataConfig: {
                        shape: "S5"
                    },
                    ModelStatus: {}
                }
            }
        },
        CreateMedicalVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName", "LanguageCode", "VocabularyFileUri" ],
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    VocabularyFileUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    VocabularyState: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {}
                }
            }
        },
        CreateVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName", "LanguageCode" ],
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    Phrases: {
                        shape: "Si"
                    },
                    VocabularyFileUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    VocabularyState: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {}
                }
            }
        },
        CreateVocabularyFilter: {
            input: {
                type: "structure",
                required: [ "VocabularyFilterName", "LanguageCode" ],
                members: {
                    VocabularyFilterName: {},
                    LanguageCode: {},
                    Words: {
                        shape: "Sn"
                    },
                    VocabularyFilterFileUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyFilterName: {},
                    LanguageCode: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteLanguageModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            }
        },
        DeleteMedicalTranscriptionJob: {
            input: {
                type: "structure",
                required: [ "MedicalTranscriptionJobName" ],
                members: {
                    MedicalTranscriptionJobName: {}
                }
            }
        },
        DeleteMedicalVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName" ],
                members: {
                    VocabularyName: {}
                }
            }
        },
        DeleteTranscriptionJob: {
            input: {
                type: "structure",
                required: [ "TranscriptionJobName" ],
                members: {
                    TranscriptionJobName: {}
                }
            }
        },
        DeleteVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName" ],
                members: {
                    VocabularyName: {}
                }
            }
        },
        DeleteVocabularyFilter: {
            input: {
                type: "structure",
                required: [ "VocabularyFilterName" ],
                members: {
                    VocabularyFilterName: {}
                }
            }
        },
        DescribeLanguageModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LanguageModel: {
                        shape: "Sz"
                    }
                }
            }
        },
        GetMedicalTranscriptionJob: {
            input: {
                type: "structure",
                required: [ "MedicalTranscriptionJobName" ],
                members: {
                    MedicalTranscriptionJobName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MedicalTranscriptionJob: {
                        shape: "S13"
                    }
                }
            }
        },
        GetMedicalVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName" ],
                members: {
                    VocabularyName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    VocabularyState: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    DownloadUri: {}
                }
            }
        },
        GetTranscriptionJob: {
            input: {
                type: "structure",
                required: [ "TranscriptionJobName" ],
                members: {
                    TranscriptionJobName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TranscriptionJob: {
                        shape: "S1i"
                    }
                }
            }
        },
        GetVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName" ],
                members: {
                    VocabularyName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    VocabularyState: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    DownloadUri: {}
                }
            }
        },
        GetVocabularyFilter: {
            input: {
                type: "structure",
                required: [ "VocabularyFilterName" ],
                members: {
                    VocabularyFilterName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyFilterName: {},
                    LanguageCode: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    DownloadUri: {}
                }
            }
        },
        ListLanguageModels: {
            input: {
                type: "structure",
                members: {
                    StatusEquals: {},
                    NameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Models: {
                        type: "list",
                        member: {
                            shape: "Sz"
                        }
                    }
                }
            }
        },
        ListMedicalTranscriptionJobs: {
            input: {
                type: "structure",
                members: {
                    Status: {},
                    JobNameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    NextToken: {},
                    MedicalTranscriptionJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MedicalTranscriptionJobName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                CompletionTime: {
                                    type: "timestamp"
                                },
                                LanguageCode: {},
                                TranscriptionJobStatus: {},
                                FailureReason: {},
                                OutputLocationType: {},
                                Specialty: {},
                                Type: {}
                            }
                        }
                    }
                }
            }
        },
        ListMedicalVocabularies: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    StateEquals: {},
                    NameContains: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    NextToken: {},
                    Vocabularies: {
                        shape: "S29"
                    }
                }
            }
        },
        ListTranscriptionJobs: {
            input: {
                type: "structure",
                members: {
                    Status: {},
                    JobNameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    NextToken: {},
                    TranscriptionJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TranscriptionJobName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                CompletionTime: {
                                    type: "timestamp"
                                },
                                LanguageCode: {},
                                TranscriptionJobStatus: {},
                                FailureReason: {},
                                OutputLocationType: {},
                                ContentRedaction: {
                                    shape: "S1o"
                                },
                                ModelSettings: {
                                    shape: "S1m"
                                },
                                IdentifyLanguage: {
                                    type: "boolean"
                                },
                                IdentifiedLanguageScore: {
                                    type: "float"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListVocabularies: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    StateEquals: {},
                    NameContains: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    NextToken: {},
                    Vocabularies: {
                        shape: "S29"
                    }
                }
            }
        },
        ListVocabularyFilters: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    VocabularyFilters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VocabularyFilterName: {},
                                LanguageCode: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        StartMedicalTranscriptionJob: {
            input: {
                type: "structure",
                required: [ "MedicalTranscriptionJobName", "LanguageCode", "Media", "OutputBucketName", "Specialty", "Type" ],
                members: {
                    MedicalTranscriptionJobName: {},
                    LanguageCode: {},
                    MediaSampleRateHertz: {
                        type: "integer"
                    },
                    MediaFormat: {},
                    Media: {
                        shape: "S17"
                    },
                    OutputBucketName: {},
                    OutputKey: {},
                    OutputEncryptionKMSKeyId: {},
                    Settings: {
                        shape: "S19"
                    },
                    Specialty: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MedicalTranscriptionJob: {
                        shape: "S13"
                    }
                }
            }
        },
        StartTranscriptionJob: {
            input: {
                type: "structure",
                required: [ "TranscriptionJobName", "Media" ],
                members: {
                    TranscriptionJobName: {},
                    LanguageCode: {},
                    MediaSampleRateHertz: {
                        type: "integer"
                    },
                    MediaFormat: {},
                    Media: {
                        shape: "S17"
                    },
                    OutputBucketName: {},
                    OutputKey: {},
                    OutputEncryptionKMSKeyId: {},
                    Settings: {
                        shape: "S1k"
                    },
                    ModelSettings: {
                        shape: "S1m"
                    },
                    JobExecutionSettings: {
                        shape: "S1n"
                    },
                    ContentRedaction: {
                        shape: "S1o"
                    },
                    IdentifyLanguage: {
                        type: "boolean"
                    },
                    LanguageOptions: {
                        shape: "S1r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TranscriptionJob: {
                        shape: "S1i"
                    }
                }
            }
        },
        UpdateMedicalVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName", "LanguageCode" ],
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    VocabularyFileUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    VocabularyState: {}
                }
            }
        },
        UpdateVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName", "LanguageCode" ],
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    Phrases: {
                        shape: "Si"
                    },
                    VocabularyFileUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    VocabularyState: {}
                }
            }
        },
        UpdateVocabularyFilter: {
            input: {
                type: "structure",
                required: [ "VocabularyFilterName" ],
                members: {
                    VocabularyFilterName: {},
                    Words: {
                        shape: "Sn"
                    },
                    VocabularyFilterFileUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyFilterName: {},
                    LanguageCode: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "S3Uri", "DataAccessRoleArn" ],
            members: {
                S3Uri: {},
                TuningDataS3Uri: {},
                DataAccessRoleArn: {}
            }
        },
        Si: {
            type: "list",
            member: {}
        },
        Sn: {
            type: "list",
            member: {}
        },
        Sz: {
            type: "structure",
            members: {
                ModelName: {},
                CreateTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                LanguageCode: {},
                BaseModelName: {},
                ModelStatus: {},
                UpgradeAvailability: {
                    type: "boolean"
                },
                FailureReason: {},
                InputDataConfig: {
                    shape: "S5"
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                MedicalTranscriptionJobName: {},
                TranscriptionJobStatus: {},
                LanguageCode: {},
                MediaSampleRateHertz: {
                    type: "integer"
                },
                MediaFormat: {},
                Media: {
                    shape: "S17"
                },
                Transcript: {
                    type: "structure",
                    members: {
                        TranscriptFileUri: {}
                    }
                },
                StartTime: {
                    type: "timestamp"
                },
                CreationTime: {
                    type: "timestamp"
                },
                CompletionTime: {
                    type: "timestamp"
                },
                FailureReason: {},
                Settings: {
                    shape: "S19"
                },
                Specialty: {},
                Type: {}
            }
        },
        S17: {
            type: "structure",
            members: {
                MediaFileUri: {}
            }
        },
        S19: {
            type: "structure",
            members: {
                ShowSpeakerLabels: {
                    type: "boolean"
                },
                MaxSpeakerLabels: {
                    type: "integer"
                },
                ChannelIdentification: {
                    type: "boolean"
                },
                ShowAlternatives: {
                    type: "boolean"
                },
                MaxAlternatives: {
                    type: "integer"
                },
                VocabularyName: {}
            }
        },
        S1i: {
            type: "structure",
            members: {
                TranscriptionJobName: {},
                TranscriptionJobStatus: {},
                LanguageCode: {},
                MediaSampleRateHertz: {
                    type: "integer"
                },
                MediaFormat: {},
                Media: {
                    shape: "S17"
                },
                Transcript: {
                    type: "structure",
                    members: {
                        TranscriptFileUri: {},
                        RedactedTranscriptFileUri: {}
                    }
                },
                StartTime: {
                    type: "timestamp"
                },
                CreationTime: {
                    type: "timestamp"
                },
                CompletionTime: {
                    type: "timestamp"
                },
                FailureReason: {},
                Settings: {
                    shape: "S1k"
                },
                ModelSettings: {
                    shape: "S1m"
                },
                JobExecutionSettings: {
                    shape: "S1n"
                },
                ContentRedaction: {
                    shape: "S1o"
                },
                IdentifyLanguage: {
                    type: "boolean"
                },
                LanguageOptions: {
                    shape: "S1r"
                },
                IdentifiedLanguageScore: {
                    type: "float"
                }
            }
        },
        S1k: {
            type: "structure",
            members: {
                VocabularyName: {},
                ShowSpeakerLabels: {
                    type: "boolean"
                },
                MaxSpeakerLabels: {
                    type: "integer"
                },
                ChannelIdentification: {
                    type: "boolean"
                },
                ShowAlternatives: {
                    type: "boolean"
                },
                MaxAlternatives: {
                    type: "integer"
                },
                VocabularyFilterName: {},
                VocabularyFilterMethod: {}
            }
        },
        S1m: {
            type: "structure",
            members: {
                LanguageModelName: {}
            }
        },
        S1n: {
            type: "structure",
            members: {
                AllowDeferredExecution: {
                    type: "boolean"
                },
                DataAccessRoleArn: {}
            }
        },
        S1o: {
            type: "structure",
            required: [ "RedactionType", "RedactionOutput" ],
            members: {
                RedactionType: {},
                RedactionOutput: {}
            }
        },
        S1r: {
            type: "list",
            member: {}
        },
        S29: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    VocabularyState: {}
                }
            }
        }
    },
    paginators: {
        ListLanguageModels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMedicalTranscriptionJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMedicalVocabularies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTranscriptionJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVocabularies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVocabularyFilters: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["connect"] = {};

AWS.Connect = AWS.Service.defineService("connect", [ "2017-08-08" ]);

AWS.apiLoader.services["connect"]["2017-08-08"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-08-08",
        endpointPrefix: "connect",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon Connect",
        serviceFullName: "Amazon Connect Service",
        serviceId: "Connect",
        signatureVersion: "v4",
        signingName: "connect",
        uid: "connect-2017-08-08"
    },
    operations: {
        AssociateApprovedOrigin: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/approved-origin"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Origin" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Origin: {}
                }
            }
        },
        AssociateInstanceStorageConfig: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/storage-config"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ResourceType", "StorageConfig" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ResourceType: {},
                    StorageConfig: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationId: {}
                }
            }
        },
        AssociateLambdaFunction: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/lambda-function"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "FunctionArn" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    FunctionArn: {}
                }
            }
        },
        AssociateLexBot: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/lex-bot"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "LexBot" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    LexBot: {
                        shape: "So"
                    }
                }
            }
        },
        AssociateQueueQuickConnects: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/associate-quick-connects"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId", "QuickConnectIds" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    QuickConnectIds: {
                        shape: "St"
                    }
                }
            }
        },
        AssociateRoutingProfileQueues: {
            http: {
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/associate-queues"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId", "QueueConfigs" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    QueueConfigs: {
                        shape: "Sx"
                    }
                }
            }
        },
        AssociateSecurityKey: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/security-key"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Key" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Key: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationId: {}
                }
            }
        },
        CreateContactFlow: {
            http: {
                method: "PUT",
                requestUri: "/contact-flows/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "Type", "Content" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Type: {},
                    Description: {},
                    Content: {},
                    Tags: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactFlowId: {},
                    ContactFlowArn: {}
                }
            }
        },
        CreateInstance: {
            http: {
                method: "PUT",
                requestUri: "/instance"
            },
            input: {
                type: "structure",
                required: [ "IdentityManagementType", "InboundCallsEnabled", "OutboundCallsEnabled" ],
                members: {
                    ClientToken: {},
                    IdentityManagementType: {},
                    InstanceAlias: {
                        shape: "S1j"
                    },
                    DirectoryId: {},
                    InboundCallsEnabled: {
                        type: "boolean"
                    },
                    OutboundCallsEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Arn: {}
                }
            }
        },
        CreateIntegrationAssociation: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/integration-associations"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "IntegrationType", "IntegrationArn", "SourceApplicationUrl", "SourceApplicationName", "SourceType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    IntegrationType: {},
                    IntegrationArn: {},
                    SourceApplicationUrl: {},
                    SourceApplicationName: {},
                    SourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IntegrationAssociationId: {},
                    IntegrationAssociationArn: {}
                }
            }
        },
        CreateQueue: {
            http: {
                method: "PUT",
                requestUri: "/queues/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "HoursOfOperationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Description: {},
                    OutboundCallerConfig: {
                        shape: "S1y"
                    },
                    HoursOfOperationId: {},
                    MaxContacts: {
                        type: "integer"
                    },
                    QuickConnectIds: {
                        shape: "St"
                    },
                    Tags: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueueArn: {},
                    QueueId: {}
                }
            }
        },
        CreateQuickConnect: {
            http: {
                method: "PUT",
                requestUri: "/quick-connects/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "QuickConnectConfig" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Description: {},
                    QuickConnectConfig: {
                        shape: "S27"
                    },
                    Tags: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QuickConnectARN: {},
                    QuickConnectId: {}
                }
            }
        },
        CreateRoutingProfile: {
            http: {
                method: "PUT",
                requestUri: "/routing-profiles/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "Description", "DefaultOutboundQueueId", "MediaConcurrencies" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Description: {},
                    DefaultOutboundQueueId: {},
                    QueueConfigs: {
                        shape: "Sx"
                    },
                    MediaConcurrencies: {
                        shape: "S2i"
                    },
                    Tags: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RoutingProfileArn: {},
                    RoutingProfileId: {}
                }
            }
        },
        CreateUseCase: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "IntegrationAssociationId", "UseCaseType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    IntegrationAssociationId: {
                        location: "uri",
                        locationName: "IntegrationAssociationId"
                    },
                    UseCaseType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UseCaseId: {},
                    UseCaseArn: {}
                }
            }
        },
        CreateUser: {
            http: {
                method: "PUT",
                requestUri: "/users/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "Username", "PhoneConfig", "SecurityProfileIds", "RoutingProfileId", "InstanceId" ],
                members: {
                    Username: {},
                    Password: {},
                    IdentityInfo: {
                        shape: "S2t"
                    },
                    PhoneConfig: {
                        shape: "S2x"
                    },
                    DirectoryUserId: {},
                    SecurityProfileIds: {
                        shape: "S32"
                    },
                    RoutingProfileId: {},
                    HierarchyGroupId: {},
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Tags: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserId: {},
                    UserArn: {}
                }
            }
        },
        CreateUserHierarchyGroup: {
            http: {
                method: "PUT",
                requestUri: "/user-hierarchy-groups/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "Name", "InstanceId" ],
                members: {
                    Name: {},
                    ParentGroupId: {},
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HierarchyGroupId: {},
                    HierarchyGroupArn: {}
                }
            }
        },
        DeleteInstance: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        DeleteIntegrationAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "IntegrationAssociationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    IntegrationAssociationId: {
                        location: "uri",
                        locationName: "IntegrationAssociationId"
                    }
                }
            }
        },
        DeleteQuickConnect: {
            http: {
                method: "DELETE",
                requestUri: "/quick-connects/{InstanceId}/{QuickConnectId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QuickConnectId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QuickConnectId: {
                        location: "uri",
                        locationName: "QuickConnectId"
                    }
                }
            }
        },
        DeleteUseCase: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases/{UseCaseId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "IntegrationAssociationId", "UseCaseId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    IntegrationAssociationId: {
                        location: "uri",
                        locationName: "IntegrationAssociationId"
                    },
                    UseCaseId: {
                        location: "uri",
                        locationName: "UseCaseId"
                    }
                }
            }
        },
        DeleteUser: {
            http: {
                method: "DELETE",
                requestUri: "/users/{InstanceId}/{UserId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "UserId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    }
                }
            }
        },
        DeleteUserHierarchyGroup: {
            http: {
                method: "DELETE",
                requestUri: "/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}"
            },
            input: {
                type: "structure",
                required: [ "HierarchyGroupId", "InstanceId" ],
                members: {
                    HierarchyGroupId: {
                        location: "uri",
                        locationName: "HierarchyGroupId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        DescribeContactFlow: {
            http: {
                method: "GET",
                requestUri: "/contact-flows/{InstanceId}/{ContactFlowId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowId: {
                        location: "uri",
                        locationName: "ContactFlowId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactFlow: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Id: {},
                            Name: {},
                            Type: {},
                            Description: {},
                            Content: {},
                            Tags: {
                                shape: "S1b"
                            }
                        }
                    }
                }
            }
        },
        DescribeHoursOfOperation: {
            http: {
                method: "GET",
                requestUri: "/hours-of-operations/{InstanceId}/{HoursOfOperationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "HoursOfOperationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    HoursOfOperationId: {
                        location: "uri",
                        locationName: "HoursOfOperationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HoursOfOperation: {
                        type: "structure",
                        members: {
                            HoursOfOperationId: {},
                            HoursOfOperationArn: {},
                            Name: {},
                            Description: {},
                            TimeZone: {},
                            Config: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Day: {},
                                        StartTime: {
                                            shape: "S3q"
                                        },
                                        EndTime: {
                                            shape: "S3q"
                                        }
                                    }
                                }
                            },
                            Tags: {
                                shape: "S1b"
                            }
                        }
                    }
                }
            }
        },
        DescribeInstance: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Instance: {
                        type: "structure",
                        members: {
                            Id: {},
                            Arn: {},
                            IdentityManagementType: {},
                            InstanceAlias: {
                                shape: "S1j"
                            },
                            CreatedTime: {
                                type: "timestamp"
                            },
                            ServiceRole: {},
                            InstanceStatus: {},
                            StatusReason: {
                                type: "structure",
                                members: {
                                    Message: {}
                                }
                            },
                            InboundCallsEnabled: {
                                type: "boolean"
                            },
                            OutboundCallsEnabled: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        DescribeInstanceAttribute: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/attribute/{AttributeType}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AttributeType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AttributeType: {
                        location: "uri",
                        locationName: "AttributeType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attribute: {
                        shape: "S43"
                    }
                }
            }
        },
        DescribeInstanceStorageConfig: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/storage-config/{AssociationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AssociationId", "ResourceType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AssociationId: {
                        location: "uri",
                        locationName: "AssociationId"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageConfig: {
                        shape: "S6"
                    }
                }
            }
        },
        DescribeQueue: {
            http: {
                method: "GET",
                requestUri: "/queues/{InstanceId}/{QueueId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Queue: {
                        type: "structure",
                        members: {
                            Name: {},
                            QueueArn: {},
                            QueueId: {},
                            Description: {},
                            OutboundCallerConfig: {
                                shape: "S1y"
                            },
                            HoursOfOperationId: {},
                            MaxContacts: {
                                type: "integer"
                            },
                            Status: {},
                            Tags: {
                                shape: "S1b"
                            }
                        }
                    }
                }
            }
        },
        DescribeQuickConnect: {
            http: {
                method: "GET",
                requestUri: "/quick-connects/{InstanceId}/{QuickConnectId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QuickConnectId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QuickConnectId: {
                        location: "uri",
                        locationName: "QuickConnectId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QuickConnect: {
                        type: "structure",
                        members: {
                            QuickConnectARN: {},
                            QuickConnectId: {},
                            Name: {},
                            Description: {},
                            QuickConnectConfig: {
                                shape: "S27"
                            },
                            Tags: {
                                shape: "S1b"
                            }
                        }
                    }
                }
            }
        },
        DescribeRoutingProfile: {
            http: {
                method: "GET",
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RoutingProfile: {
                        type: "structure",
                        members: {
                            InstanceId: {},
                            Name: {},
                            RoutingProfileArn: {},
                            RoutingProfileId: {},
                            Description: {},
                            MediaConcurrencies: {
                                shape: "S2i"
                            },
                            DefaultOutboundQueueId: {},
                            Tags: {
                                shape: "S1b"
                            }
                        }
                    }
                }
            }
        },
        DescribeUser: {
            http: {
                method: "GET",
                requestUri: "/users/{InstanceId}/{UserId}"
            },
            input: {
                type: "structure",
                required: [ "UserId", "InstanceId" ],
                members: {
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        type: "structure",
                        members: {
                            Id: {},
                            Arn: {},
                            Username: {},
                            IdentityInfo: {
                                shape: "S2t"
                            },
                            PhoneConfig: {
                                shape: "S2x"
                            },
                            DirectoryUserId: {},
                            SecurityProfileIds: {
                                shape: "S32"
                            },
                            RoutingProfileId: {},
                            HierarchyGroupId: {},
                            Tags: {
                                shape: "S1b"
                            }
                        }
                    }
                }
            }
        },
        DescribeUserHierarchyGroup: {
            http: {
                method: "GET",
                requestUri: "/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}"
            },
            input: {
                type: "structure",
                required: [ "HierarchyGroupId", "InstanceId" ],
                members: {
                    HierarchyGroupId: {
                        location: "uri",
                        locationName: "HierarchyGroupId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HierarchyGroup: {
                        type: "structure",
                        members: {
                            Id: {},
                            Arn: {},
                            Name: {},
                            LevelId: {},
                            HierarchyPath: {
                                type: "structure",
                                members: {
                                    LevelOne: {
                                        shape: "S4p"
                                    },
                                    LevelTwo: {
                                        shape: "S4p"
                                    },
                                    LevelThree: {
                                        shape: "S4p"
                                    },
                                    LevelFour: {
                                        shape: "S4p"
                                    },
                                    LevelFive: {
                                        shape: "S4p"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeUserHierarchyStructure: {
            http: {
                method: "GET",
                requestUri: "/user-hierarchy-structure/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HierarchyStructure: {
                        type: "structure",
                        members: {
                            LevelOne: {
                                shape: "S4t"
                            },
                            LevelTwo: {
                                shape: "S4t"
                            },
                            LevelThree: {
                                shape: "S4t"
                            },
                            LevelFour: {
                                shape: "S4t"
                            },
                            LevelFive: {
                                shape: "S4t"
                            }
                        }
                    }
                }
            }
        },
        DisassociateApprovedOrigin: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/approved-origin"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Origin" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Origin: {
                        location: "querystring",
                        locationName: "origin"
                    }
                }
            }
        },
        DisassociateInstanceStorageConfig: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/storage-config/{AssociationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AssociationId", "ResourceType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AssociationId: {
                        location: "uri",
                        locationName: "AssociationId"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    }
                }
            }
        },
        DisassociateLambdaFunction: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/lambda-function"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "FunctionArn" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    FunctionArn: {
                        location: "querystring",
                        locationName: "functionArn"
                    }
                }
            }
        },
        DisassociateLexBot: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/lex-bot"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "BotName", "LexRegion" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    BotName: {
                        location: "querystring",
                        locationName: "botName"
                    },
                    LexRegion: {
                        location: "querystring",
                        locationName: "lexRegion"
                    }
                }
            }
        },
        DisassociateQueueQuickConnects: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/disassociate-quick-connects"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId", "QuickConnectIds" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    QuickConnectIds: {
                        shape: "St"
                    }
                }
            }
        },
        DisassociateRoutingProfileQueues: {
            http: {
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/disassociate-queues"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId", "QueueReferences" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    QueueReferences: {
                        type: "list",
                        member: {
                            shape: "Sz"
                        }
                    }
                }
            }
        },
        DisassociateSecurityKey: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/security-key/{AssociationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AssociationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AssociationId: {
                        location: "uri",
                        locationName: "AssociationId"
                    }
                }
            }
        },
        GetContactAttributes: {
            http: {
                method: "GET",
                requestUri: "/contact/attributes/{InstanceId}/{InitialContactId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "InitialContactId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    InitialContactId: {
                        location: "uri",
                        locationName: "InitialContactId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S56"
                    }
                }
            }
        },
        GetCurrentMetricData: {
            http: {
                requestUri: "/metrics/current/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Filters", "CurrentMetrics" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Filters: {
                        shape: "S5a"
                    },
                    Groupings: {
                        shape: "S5d"
                    },
                    CurrentMetrics: {
                        type: "list",
                        member: {
                            shape: "S5g"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MetricResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Dimensions: {
                                    shape: "S5o"
                                },
                                Collections: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Metric: {
                                                shape: "S5g"
                                            },
                                            Value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    DataSnapshotTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetFederationToken: {
            http: {
                method: "GET",
                requestUri: "/user/federate/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Credentials: {
                        type: "structure",
                        members: {
                            AccessToken: {
                                shape: "S5x"
                            },
                            AccessTokenExpiration: {
                                type: "timestamp"
                            },
                            RefreshToken: {
                                shape: "S5x"
                            },
                            RefreshTokenExpiration: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetMetricData: {
            http: {
                requestUri: "/metrics/historical/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "StartTime", "EndTime", "Filters", "HistoricalMetrics" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Filters: {
                        shape: "S5a"
                    },
                    Groupings: {
                        shape: "S5d"
                    },
                    HistoricalMetrics: {
                        type: "list",
                        member: {
                            shape: "S60"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MetricResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Dimensions: {
                                    shape: "S5o"
                                },
                                Collections: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Metric: {
                                                shape: "S60"
                                            },
                                            Value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListApprovedOrigins: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/approved-origins"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Origins: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListContactFlows: {
            http: {
                method: "GET",
                requestUri: "/contact-flows-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowTypes: {
                        location: "querystring",
                        locationName: "contactFlowTypes",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactFlowSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                ContactFlowType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListHoursOfOperations: {
            http: {
                method: "GET",
                requestUri: "/hours-of-operations-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HoursOfOperationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInstanceAttributes: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/attributes"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        type: "list",
                        member: {
                            shape: "S43"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInstanceStorageConfigs: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/storage-configs"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ResourceType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageConfigs: {
                        type: "list",
                        member: {
                            shape: "S6"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInstances: {
            http: {
                method: "GET",
                requestUri: "/instance"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                IdentityManagementType: {},
                                InstanceAlias: {
                                    shape: "S1j"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                ServiceRole: {},
                                InstanceStatus: {},
                                InboundCallsEnabled: {
                                    type: "boolean"
                                },
                                OutboundCallsEnabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListIntegrationAssociations: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/integration-associations"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IntegrationAssociationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IntegrationAssociationId: {},
                                IntegrationAssociationArn: {},
                                InstanceId: {},
                                IntegrationType: {},
                                IntegrationArn: {},
                                SourceApplicationUrl: {},
                                SourceApplicationName: {},
                                SourceType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLambdaFunctions: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/lambda-functions"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LambdaFunctions: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListLexBots: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/lex-bots"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LexBots: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPhoneNumbers: {
            http: {
                method: "GET",
                requestUri: "/phone-numbers-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    PhoneNumberTypes: {
                        location: "querystring",
                        locationName: "phoneNumberTypes",
                        type: "list",
                        member: {}
                    },
                    PhoneNumberCountryCodes: {
                        location: "querystring",
                        locationName: "phoneNumberCountryCodes",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                PhoneNumber: {},
                                PhoneNumberType: {},
                                PhoneNumberCountryCode: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPrompts: {
            http: {
                method: "GET",
                requestUri: "/prompts-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PromptSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListQueueQuickConnects: {
            http: {
                method: "GET",
                requestUri: "/queues/{InstanceId}/{QueueId}/quick-connects"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    QuickConnectSummaryList: {
                        shape: "S7s"
                    }
                }
            }
        },
        ListQueues: {
            http: {
                method: "GET",
                requestUri: "/queues-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueTypes: {
                        location: "querystring",
                        locationName: "queueTypes",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueueSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                QueueType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListQuickConnects: {
            http: {
                method: "GET",
                requestUri: "/quick-connects/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    QuickConnectTypes: {
                        location: "querystring",
                        locationName: "QuickConnectTypes",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QuickConnectSummaryList: {
                        shape: "S7s"
                    },
                    NextToken: {}
                }
            }
        },
        ListRoutingProfileQueues: {
            http: {
                method: "GET",
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/queues"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RoutingProfileQueueConfigSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "QueueId", "QueueArn", "QueueName", "Priority", "Delay", "Channel" ],
                            members: {
                                QueueId: {},
                                QueueArn: {},
                                QueueName: {},
                                Priority: {
                                    type: "integer"
                                },
                                Delay: {
                                    type: "integer"
                                },
                                Channel: {}
                            }
                        }
                    }
                }
            }
        },
        ListRoutingProfiles: {
            http: {
                method: "GET",
                requestUri: "/routing-profiles-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RoutingProfileSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSecurityKeys: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/security-keys"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityKeys: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssociationId: {},
                                Key: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSecurityProfiles: {
            http: {
                method: "GET",
                requestUri: "/security-profiles-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityProfileSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1b"
                    }
                }
            }
        },
        ListUseCases: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "IntegrationAssociationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    IntegrationAssociationId: {
                        location: "uri",
                        locationName: "IntegrationAssociationId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UseCaseSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UseCaseId: {},
                                UseCaseArn: {},
                                UseCaseType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListUserHierarchyGroups: {
            http: {
                method: "GET",
                requestUri: "/user-hierarchy-groups-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserHierarchyGroupSummaryList: {
                        type: "list",
                        member: {
                            shape: "S4p"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListUsers: {
            http: {
                method: "GET",
                requestUri: "/users-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Username: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ResumeContactRecording: {
            http: {
                requestUri: "/contact/resume-recording"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "InitialContactId" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    InitialContactId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartChatContact: {
            http: {
                method: "PUT",
                requestUri: "/contact/chat"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowId", "ParticipantDetails" ],
                members: {
                    InstanceId: {},
                    ContactFlowId: {},
                    Attributes: {
                        shape: "S56"
                    },
                    ParticipantDetails: {
                        type: "structure",
                        required: [ "DisplayName" ],
                        members: {
                            DisplayName: {}
                        }
                    },
                    InitialMessage: {
                        type: "structure",
                        required: [ "ContentType", "Content" ],
                        members: {
                            ContentType: {},
                            Content: {}
                        }
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactId: {},
                    ParticipantId: {},
                    ParticipantToken: {}
                }
            }
        },
        StartContactRecording: {
            http: {
                requestUri: "/contact/start-recording"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "InitialContactId", "VoiceRecordingConfiguration" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    InitialContactId: {},
                    VoiceRecordingConfiguration: {
                        type: "structure",
                        members: {
                            VoiceRecordingTrack: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartOutboundVoiceContact: {
            http: {
                method: "PUT",
                requestUri: "/contact/outbound-voice"
            },
            input: {
                type: "structure",
                required: [ "DestinationPhoneNumber", "ContactFlowId", "InstanceId" ],
                members: {
                    DestinationPhoneNumber: {},
                    ContactFlowId: {},
                    InstanceId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    SourcePhoneNumber: {},
                    QueueId: {},
                    Attributes: {
                        shape: "S56"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactId: {}
                }
            }
        },
        StartTaskContact: {
            http: {
                method: "PUT",
                requestUri: "/contact/task"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowId", "Name" ],
                members: {
                    InstanceId: {},
                    PreviousContactId: {},
                    ContactFlowId: {},
                    Attributes: {
                        shape: "S56"
                    },
                    Name: {},
                    References: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "Value", "Type" ],
                            members: {
                                Value: {},
                                Type: {}
                            }
                        }
                    },
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactId: {}
                }
            }
        },
        StopContact: {
            http: {
                requestUri: "/contact/stop"
            },
            input: {
                type: "structure",
                required: [ "ContactId", "InstanceId" ],
                members: {
                    ContactId: {},
                    InstanceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopContactRecording: {
            http: {
                requestUri: "/contact/stop-recording"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "InitialContactId" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    InitialContactId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SuspendContactRecording: {
            http: {
                requestUri: "/contact/suspend-recording"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "InitialContactId" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    InitialContactId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1b"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateContactAttributes: {
            http: {
                requestUri: "/contact/attributes"
            },
            input: {
                type: "structure",
                required: [ "InitialContactId", "InstanceId", "Attributes" ],
                members: {
                    InitialContactId: {},
                    InstanceId: {},
                    Attributes: {
                        shape: "S56"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContactFlowContent: {
            http: {
                requestUri: "/contact-flows/{InstanceId}/{ContactFlowId}/content"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowId", "Content" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowId: {
                        location: "uri",
                        locationName: "ContactFlowId"
                    },
                    Content: {}
                }
            }
        },
        UpdateContactFlowName: {
            http: {
                requestUri: "/contact-flows/{InstanceId}/{ContactFlowId}/name"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowId: {
                        location: "uri",
                        locationName: "ContactFlowId"
                    },
                    Name: {},
                    Description: {}
                }
            }
        },
        UpdateInstanceAttribute: {
            http: {
                requestUri: "/instance/{InstanceId}/attribute/{AttributeType}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AttributeType", "Value" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AttributeType: {
                        location: "uri",
                        locationName: "AttributeType"
                    },
                    Value: {}
                }
            }
        },
        UpdateInstanceStorageConfig: {
            http: {
                requestUri: "/instance/{InstanceId}/storage-config/{AssociationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AssociationId", "ResourceType", "StorageConfig" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AssociationId: {
                        location: "uri",
                        locationName: "AssociationId"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    StorageConfig: {
                        shape: "S6"
                    }
                }
            }
        },
        UpdateQueueHoursOfOperation: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/hours-of-operation"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId", "HoursOfOperationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    HoursOfOperationId: {}
                }
            }
        },
        UpdateQueueMaxContacts: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/max-contacts"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    MaxContacts: {
                        type: "integer"
                    }
                }
            }
        },
        UpdateQueueName: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/name"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    Name: {},
                    Description: {}
                }
            }
        },
        UpdateQueueOutboundCallerConfig: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/outbound-caller-config"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId", "OutboundCallerConfig" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    OutboundCallerConfig: {
                        shape: "S1y"
                    }
                }
            }
        },
        UpdateQueueStatus: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/status"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId", "Status" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    Status: {}
                }
            }
        },
        UpdateQuickConnectConfig: {
            http: {
                requestUri: "/quick-connects/{InstanceId}/{QuickConnectId}/config"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QuickConnectId", "QuickConnectConfig" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QuickConnectId: {
                        location: "uri",
                        locationName: "QuickConnectId"
                    },
                    QuickConnectConfig: {
                        shape: "S27"
                    }
                }
            }
        },
        UpdateQuickConnectName: {
            http: {
                requestUri: "/quick-connects/{InstanceId}/{QuickConnectId}/name"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QuickConnectId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QuickConnectId: {
                        location: "uri",
                        locationName: "QuickConnectId"
                    },
                    Name: {},
                    Description: {}
                }
            }
        },
        UpdateRoutingProfileConcurrency: {
            http: {
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/concurrency"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId", "MediaConcurrencies" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    MediaConcurrencies: {
                        shape: "S2i"
                    }
                }
            }
        },
        UpdateRoutingProfileDefaultOutboundQueue: {
            http: {
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/default-outbound-queue"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId", "DefaultOutboundQueueId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    DefaultOutboundQueueId: {}
                }
            }
        },
        UpdateRoutingProfileName: {
            http: {
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/name"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    Name: {},
                    Description: {}
                }
            }
        },
        UpdateRoutingProfileQueues: {
            http: {
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/queues"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId", "QueueConfigs" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    QueueConfigs: {
                        shape: "Sx"
                    }
                }
            }
        },
        UpdateUserHierarchy: {
            http: {
                requestUri: "/users/{InstanceId}/{UserId}/hierarchy"
            },
            input: {
                type: "structure",
                required: [ "UserId", "InstanceId" ],
                members: {
                    HierarchyGroupId: {},
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        UpdateUserHierarchyGroupName: {
            http: {
                requestUri: "/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}/name"
            },
            input: {
                type: "structure",
                required: [ "Name", "HierarchyGroupId", "InstanceId" ],
                members: {
                    Name: {},
                    HierarchyGroupId: {
                        location: "uri",
                        locationName: "HierarchyGroupId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        UpdateUserHierarchyStructure: {
            http: {
                requestUri: "/user-hierarchy-structure/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "HierarchyStructure", "InstanceId" ],
                members: {
                    HierarchyStructure: {
                        type: "structure",
                        members: {
                            LevelOne: {
                                shape: "Saj"
                            },
                            LevelTwo: {
                                shape: "Saj"
                            },
                            LevelThree: {
                                shape: "Saj"
                            },
                            LevelFour: {
                                shape: "Saj"
                            },
                            LevelFive: {
                                shape: "Saj"
                            }
                        }
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        UpdateUserIdentityInfo: {
            http: {
                requestUri: "/users/{InstanceId}/{UserId}/identity-info"
            },
            input: {
                type: "structure",
                required: [ "IdentityInfo", "UserId", "InstanceId" ],
                members: {
                    IdentityInfo: {
                        shape: "S2t"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        UpdateUserPhoneConfig: {
            http: {
                requestUri: "/users/{InstanceId}/{UserId}/phone-config"
            },
            input: {
                type: "structure",
                required: [ "PhoneConfig", "UserId", "InstanceId" ],
                members: {
                    PhoneConfig: {
                        shape: "S2x"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        UpdateUserRoutingProfile: {
            http: {
                requestUri: "/users/{InstanceId}/{UserId}/routing-profile"
            },
            input: {
                type: "structure",
                required: [ "RoutingProfileId", "UserId", "InstanceId" ],
                members: {
                    RoutingProfileId: {},
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        UpdateUserSecurityProfiles: {
            http: {
                requestUri: "/users/{InstanceId}/{UserId}/security-profiles"
            },
            input: {
                type: "structure",
                required: [ "SecurityProfileIds", "UserId", "InstanceId" ],
                members: {
                    SecurityProfileIds: {
                        shape: "S32"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            required: [ "StorageType" ],
            members: {
                AssociationId: {},
                StorageType: {},
                S3Config: {
                    type: "structure",
                    required: [ "BucketName", "BucketPrefix" ],
                    members: {
                        BucketName: {},
                        BucketPrefix: {},
                        EncryptionConfig: {
                            shape: "Sc"
                        }
                    }
                },
                KinesisVideoStreamConfig: {
                    type: "structure",
                    required: [ "Prefix", "RetentionPeriodHours", "EncryptionConfig" ],
                    members: {
                        Prefix: {},
                        RetentionPeriodHours: {
                            type: "integer"
                        },
                        EncryptionConfig: {
                            shape: "Sc"
                        }
                    }
                },
                KinesisStreamConfig: {
                    type: "structure",
                    required: [ "StreamArn" ],
                    members: {
                        StreamArn: {}
                    }
                },
                KinesisFirehoseConfig: {
                    type: "structure",
                    required: [ "FirehoseArn" ],
                    members: {
                        FirehoseArn: {}
                    }
                }
            }
        },
        Sc: {
            type: "structure",
            required: [ "EncryptionType", "KeyId" ],
            members: {
                EncryptionType: {},
                KeyId: {}
            }
        },
        So: {
            type: "structure",
            members: {
                Name: {},
                LexRegion: {}
            }
        },
        St: {
            type: "list",
            member: {}
        },
        Sx: {
            type: "list",
            member: {
                type: "structure",
                required: [ "QueueReference", "Priority", "Delay" ],
                members: {
                    QueueReference: {
                        shape: "Sz"
                    },
                    Priority: {
                        type: "integer"
                    },
                    Delay: {
                        type: "integer"
                    }
                }
            }
        },
        Sz: {
            type: "structure",
            required: [ "QueueId", "Channel" ],
            members: {
                QueueId: {},
                Channel: {}
            }
        },
        S1b: {
            type: "map",
            key: {},
            value: {}
        },
        S1j: {
            type: "string",
            sensitive: true
        },
        S1y: {
            type: "structure",
            members: {
                OutboundCallerIdName: {},
                OutboundCallerIdNumberId: {},
                OutboundFlowId: {}
            }
        },
        S27: {
            type: "structure",
            required: [ "QuickConnectType" ],
            members: {
                QuickConnectType: {},
                UserConfig: {
                    type: "structure",
                    required: [ "UserId", "ContactFlowId" ],
                    members: {
                        UserId: {},
                        ContactFlowId: {}
                    }
                },
                QueueConfig: {
                    type: "structure",
                    required: [ "QueueId", "ContactFlowId" ],
                    members: {
                        QueueId: {},
                        ContactFlowId: {}
                    }
                },
                PhoneConfig: {
                    type: "structure",
                    required: [ "PhoneNumber" ],
                    members: {
                        PhoneNumber: {}
                    }
                }
            }
        },
        S2i: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Channel", "Concurrency" ],
                members: {
                    Channel: {},
                    Concurrency: {
                        type: "integer"
                    }
                }
            }
        },
        S2t: {
            type: "structure",
            members: {
                FirstName: {},
                LastName: {},
                Email: {}
            }
        },
        S2x: {
            type: "structure",
            required: [ "PhoneType" ],
            members: {
                PhoneType: {},
                AutoAccept: {
                    type: "boolean"
                },
                AfterContactWorkTimeLimit: {
                    type: "integer"
                },
                DeskPhoneNumber: {}
            }
        },
        S32: {
            type: "list",
            member: {}
        },
        S3q: {
            type: "structure",
            members: {
                Hours: {
                    type: "integer"
                },
                Minutes: {
                    type: "integer"
                }
            }
        },
        S43: {
            type: "structure",
            members: {
                AttributeType: {},
                Value: {}
            }
        },
        S4p: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {}
            }
        },
        S4t: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {}
            }
        },
        S56: {
            type: "map",
            key: {},
            value: {}
        },
        S5a: {
            type: "structure",
            members: {
                Queues: {
                    type: "list",
                    member: {}
                },
                Channels: {
                    type: "list",
                    member: {}
                }
            }
        },
        S5d: {
            type: "list",
            member: {}
        },
        S5g: {
            type: "structure",
            members: {
                Name: {},
                Unit: {}
            }
        },
        S5o: {
            type: "structure",
            members: {
                Queue: {
                    type: "structure",
                    members: {
                        Id: {},
                        Arn: {}
                    }
                },
                Channel: {}
            }
        },
        S5x: {
            type: "string",
            sensitive: true
        },
        S60: {
            type: "structure",
            members: {
                Name: {},
                Threshold: {
                    type: "structure",
                    members: {
                        Comparison: {},
                        ThresholdValue: {
                            type: "double"
                        }
                    }
                },
                Statistic: {},
                Unit: {}
            }
        },
        S7s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Arn: {},
                    Name: {},
                    QuickConnectType: {}
                }
            }
        },
        Saj: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {}
            }
        }
    },
    paginators: {
        GetCurrentMetricData: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetMetricData: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListApprovedOrigins: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Origins"
        },
        ListContactFlows: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ContactFlowSummaryList"
        },
        ListHoursOfOperations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "HoursOfOperationSummaryList"
        },
        ListInstanceAttributes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Attributes"
        },
        ListInstanceStorageConfigs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "StorageConfigs"
        },
        ListInstances: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InstanceSummaryList"
        },
        ListIntegrationAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "IntegrationAssociationSummaryList"
        },
        ListLambdaFunctions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LambdaFunctions"
        },
        ListLexBots: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LexBots"
        },
        ListPhoneNumbers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PhoneNumberSummaryList"
        },
        ListPrompts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PromptSummaryList"
        },
        ListQueueQuickConnects: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "QuickConnectSummaryList"
        },
        ListQueues: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "QueueSummaryList"
        },
        ListQuickConnects: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "QuickConnectSummaryList"
        },
        ListRoutingProfileQueues: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "RoutingProfileQueueConfigSummaryList"
        },
        ListRoutingProfiles: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "RoutingProfileSummaryList"
        },
        ListSecurityKeys: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SecurityKeys"
        },
        ListSecurityProfiles: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SecurityProfileSummaryList"
        },
        ListUseCases: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "UseCaseSummaryList"
        },
        ListUserHierarchyGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "UserHierarchyGroupSummaryList"
        },
        ListUsers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "UserSummaryList"
        }
    }
};

AWS.apiLoader.services["acmpca"] = {};

AWS.ACMPCA = AWS.Service.defineService("acmpca", [ "2017-08-22" ]);

AWS.apiLoader.services["acmpca"]["2017-08-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-08-22",
        endpointPrefix: "acm-pca",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "ACM-PCA",
        serviceFullName: "AWS Certificate Manager Private Certificate Authority",
        serviceId: "ACM PCA",
        signatureVersion: "v4",
        targetPrefix: "ACMPrivateCA",
        uid: "acm-pca-2017-08-22"
    },
    operations: {
        CreateCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityConfiguration", "CertificateAuthorityType" ],
                members: {
                    CertificateAuthorityConfiguration: {
                        shape: "S2"
                    },
                    RevocationConfiguration: {
                        shape: "Ss"
                    },
                    CertificateAuthorityType: {},
                    IdempotencyToken: {},
                    Tags: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CertificateAuthorityArn: {}
                }
            },
            idempotent: true
        },
        CreateCertificateAuthorityAuditReport: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "S3BucketName", "AuditReportResponseFormat" ],
                members: {
                    CertificateAuthorityArn: {},
                    S3BucketName: {},
                    AuditReportResponseFormat: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuditReportId: {},
                    S3Key: {}
                }
            },
            idempotent: true
        },
        CreatePermission: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "Principal", "Actions" ],
                members: {
                    CertificateAuthorityArn: {},
                    Principal: {},
                    SourceAccount: {},
                    Actions: {
                        shape: "S1d"
                    }
                }
            }
        },
        DeleteCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {},
                    PermanentDeletionTimeInDays: {
                        type: "integer"
                    }
                }
            }
        },
        DeletePermission: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "Principal" ],
                members: {
                    CertificateAuthorityArn: {},
                    Principal: {},
                    SourceAccount: {}
                }
            }
        },
        DeletePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            }
        },
        DescribeCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CertificateAuthority: {
                        shape: "S1l"
                    }
                }
            }
        },
        DescribeCertificateAuthorityAuditReport: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "AuditReportId" ],
                members: {
                    CertificateAuthorityArn: {},
                    AuditReportId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuditReportStatus: {},
                    S3BucketName: {},
                    S3Key: {},
                    CreatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "CertificateArn" ],
                members: {
                    CertificateAuthorityArn: {},
                    CertificateArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Certificate: {},
                    CertificateChain: {}
                }
            }
        },
        GetCertificateAuthorityCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Certificate: {},
                    CertificateChain: {}
                }
            }
        },
        GetCertificateAuthorityCsr: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Csr: {}
                }
            }
        },
        GetPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        ImportCertificateAuthorityCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "Certificate" ],
                members: {
                    CertificateAuthorityArn: {},
                    Certificate: {
                        type: "blob"
                    },
                    CertificateChain: {
                        type: "blob"
                    }
                }
            }
        },
        IssueCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "Csr", "SigningAlgorithm", "Validity" ],
                members: {
                    ApiPassthrough: {
                        type: "structure",
                        members: {
                            Extensions: {
                                type: "structure",
                                members: {
                                    CertificatePolicies: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "CertPolicyId" ],
                                            members: {
                                                CertPolicyId: {},
                                                PolicyQualifiers: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "PolicyQualifierId", "Qualifier" ],
                                                        members: {
                                                            PolicyQualifierId: {},
                                                            Qualifier: {
                                                                type: "structure",
                                                                required: [ "CpsUri" ],
                                                                members: {
                                                                    CpsUri: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    ExtendedKeyUsage: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                ExtendedKeyUsageType: {},
                                                ExtendedKeyUsageObjectIdentifier: {}
                                            }
                                        }
                                    },
                                    KeyUsage: {
                                        shape: "Sf"
                                    },
                                    SubjectAlternativeNames: {
                                        type: "list",
                                        member: {
                                            shape: "Sm"
                                        }
                                    }
                                }
                            },
                            Subject: {
                                shape: "S5"
                            }
                        }
                    },
                    CertificateAuthorityArn: {},
                    Csr: {
                        type: "blob"
                    },
                    SigningAlgorithm: {},
                    TemplateArn: {},
                    Validity: {
                        shape: "S2m"
                    },
                    ValidityNotBefore: {
                        shape: "S2m"
                    },
                    IdempotencyToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CertificateArn: {}
                }
            },
            idempotent: true
        },
        ListCertificateAuthorities: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceOwner: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CertificateAuthorities: {
                        type: "list",
                        member: {
                            shape: "S1l"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPermissions: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Permissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CertificateAuthorityArn: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                Principal: {},
                                SourceAccount: {},
                                Actions: {
                                    shape: "S1d"
                                },
                                Policy: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sy"
                    },
                    NextToken: {}
                }
            }
        },
        PutPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Policy" ],
                members: {
                    ResourceArn: {},
                    Policy: {}
                }
            }
        },
        RestoreCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {}
                }
            }
        },
        RevokeCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "CertificateSerial", "RevocationReason" ],
                members: {
                    CertificateAuthorityArn: {},
                    CertificateSerial: {},
                    RevocationReason: {}
                }
            }
        },
        TagCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "Tags" ],
                members: {
                    CertificateAuthorityArn: {},
                    Tags: {
                        shape: "Sy"
                    }
                }
            }
        },
        UntagCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "Tags" ],
                members: {
                    CertificateAuthorityArn: {},
                    Tags: {
                        shape: "Sy"
                    }
                }
            }
        },
        UpdateCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {},
                    RevocationConfiguration: {
                        shape: "Ss"
                    },
                    Status: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            required: [ "KeyAlgorithm", "SigningAlgorithm", "Subject" ],
            members: {
                KeyAlgorithm: {},
                SigningAlgorithm: {},
                Subject: {
                    shape: "S5"
                },
                CsrExtensions: {
                    type: "structure",
                    members: {
                        KeyUsage: {
                            shape: "Sf"
                        },
                        SubjectInformationAccess: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "AccessMethod", "AccessLocation" ],
                                members: {
                                    AccessMethod: {
                                        type: "structure",
                                        members: {
                                            CustomObjectIdentifier: {},
                                            AccessMethodType: {}
                                        }
                                    },
                                    AccessLocation: {
                                        shape: "Sm"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S5: {
            type: "structure",
            members: {
                Country: {},
                Organization: {},
                OrganizationalUnit: {},
                DistinguishedNameQualifier: {},
                State: {},
                CommonName: {},
                SerialNumber: {},
                Locality: {},
                Title: {},
                Surname: {},
                GivenName: {},
                Initials: {},
                Pseudonym: {},
                GenerationQualifier: {}
            }
        },
        Sf: {
            type: "structure",
            members: {
                DigitalSignature: {
                    type: "boolean"
                },
                NonRepudiation: {
                    type: "boolean"
                },
                KeyEncipherment: {
                    type: "boolean"
                },
                DataEncipherment: {
                    type: "boolean"
                },
                KeyAgreement: {
                    type: "boolean"
                },
                KeyCertSign: {
                    type: "boolean"
                },
                CRLSign: {
                    type: "boolean"
                },
                EncipherOnly: {
                    type: "boolean"
                },
                DecipherOnly: {
                    type: "boolean"
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                OtherName: {
                    type: "structure",
                    required: [ "TypeId", "Value" ],
                    members: {
                        TypeId: {},
                        Value: {}
                    }
                },
                Rfc822Name: {},
                DnsName: {},
                DirectoryName: {
                    shape: "S5"
                },
                EdiPartyName: {
                    type: "structure",
                    required: [ "PartyName" ],
                    members: {
                        PartyName: {},
                        NameAssigner: {}
                    }
                },
                UniformResourceIdentifier: {},
                IpAddress: {},
                RegisteredId: {}
            }
        },
        Ss: {
            type: "structure",
            members: {
                CrlConfiguration: {
                    type: "structure",
                    required: [ "Enabled" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        ExpirationInDays: {
                            type: "integer"
                        },
                        CustomCname: {},
                        S3BucketName: {}
                    }
                }
            }
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S1d: {
            type: "list",
            member: {}
        },
        S1l: {
            type: "structure",
            members: {
                Arn: {},
                OwnerAccount: {},
                CreatedAt: {
                    type: "timestamp"
                },
                LastStateChangeAt: {
                    type: "timestamp"
                },
                Type: {},
                Serial: {},
                Status: {},
                NotBefore: {
                    type: "timestamp"
                },
                NotAfter: {
                    type: "timestamp"
                },
                FailureReason: {},
                CertificateAuthorityConfiguration: {
                    shape: "S2"
                },
                RevocationConfiguration: {
                    shape: "Ss"
                },
                RestorableUntil: {
                    type: "timestamp"
                }
            }
        },
        S2m: {
            type: "structure",
            required: [ "Value", "Type" ],
            members: {
                Value: {
                    type: "long"
                },
                Type: {}
            }
        }
    },
    paginators: {
        ListCertificateAuthorities: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CertificateAuthorities"
        },
        ListPermissions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Permissions"
        },
        ListTags: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Tags"
        }
    },
    waiters: {
        CertificateAuthorityCSRCreated: {
            description: "Wait until a Certificate Authority CSR is created",
            operation: "GetCertificateAuthorityCsr",
            delay: 3,
            maxAttempts: 60,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 200
            }, {
                state: "retry",
                matcher: "error",
                expected: "RequestInProgressException"
            } ]
        },
        CertificateIssued: {
            description: "Wait until a certificate is issued",
            operation: "GetCertificate",
            delay: 3,
            maxAttempts: 60,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 200
            }, {
                state: "retry",
                matcher: "error",
                expected: "RequestInProgressException"
            } ]
        },
        AuditReportCreated: {
            description: "Wait until a Audit Report is created",
            operation: "DescribeCertificateAuthorityAuditReport",
            delay: 3,
            maxAttempts: 60,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "AuditReportStatus",
                expected: "SUCCESS"
            }, {
                state: "failure",
                matcher: "path",
                argument: "AuditReportStatus",
                expected: "FAILED"
            } ]
        }
    }
};

AWS.apiLoader.services["fms"] = {};

AWS.FMS = AWS.Service.defineService("fms", [ "2018-01-01" ]);

AWS.apiLoader.services["fms"]["2018-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-01-01",
        endpointPrefix: "fms",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "FMS",
        serviceFullName: "Firewall Management Service",
        serviceId: "FMS",
        signatureVersion: "v4",
        targetPrefix: "AWSFMS_20180101",
        uid: "fms-2018-01-01"
    },
    operations: {
        AssociateAdminAccount: {
            input: {
                type: "structure",
                required: [ "AdminAccount" ],
                members: {
                    AdminAccount: {}
                }
            }
        },
        DeleteAppsList: {
            input: {
                type: "structure",
                required: [ "ListId" ],
                members: {
                    ListId: {}
                }
            }
        },
        DeleteNotificationChannel: {
            input: {
                type: "structure",
                members: {}
            }
        },
        DeletePolicy: {
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {},
                    DeleteAllPolicyResources: {
                        type: "boolean"
                    }
                }
            }
        },
        DeleteProtocolsList: {
            input: {
                type: "structure",
                required: [ "ListId" ],
                members: {
                    ListId: {}
                }
            }
        },
        DisassociateAdminAccount: {
            input: {
                type: "structure",
                members: {}
            }
        },
        GetAdminAccount: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AdminAccount: {},
                    RoleStatus: {}
                }
            }
        },
        GetAppsList: {
            input: {
                type: "structure",
                required: [ "ListId" ],
                members: {
                    ListId: {},
                    DefaultList: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppsList: {
                        shape: "Sg"
                    },
                    AppsListArn: {}
                }
            }
        },
        GetComplianceDetail: {
            input: {
                type: "structure",
                required: [ "PolicyId", "MemberAccount" ],
                members: {
                    PolicyId: {},
                    MemberAccount: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyComplianceDetail: {
                        type: "structure",
                        members: {
                            PolicyOwner: {},
                            PolicyId: {},
                            MemberAccount: {},
                            Violators: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ResourceId: {},
                                        ViolationReason: {},
                                        ResourceType: {}
                                    }
                                }
                            },
                            EvaluationLimitExceeded: {
                                type: "boolean"
                            },
                            ExpiredAt: {
                                type: "timestamp"
                            },
                            IssueInfoMap: {
                                shape: "Sz"
                            }
                        }
                    }
                }
            }
        },
        GetNotificationChannel: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    SnsTopicArn: {},
                    SnsRoleName: {}
                }
            }
        },
        GetPolicy: {
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        shape: "S16"
                    },
                    PolicyArn: {}
                }
            }
        },
        GetProtectionStatus: {
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {},
                    MemberAccountId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdminAccountId: {},
                    ServiceType: {},
                    Data: {},
                    NextToken: {}
                }
            }
        },
        GetProtocolsList: {
            input: {
                type: "structure",
                required: [ "ListId" ],
                members: {
                    ListId: {},
                    DefaultList: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProtocolsList: {
                        shape: "S1r"
                    },
                    ProtocolsListArn: {}
                }
            }
        },
        GetViolationDetails: {
            input: {
                type: "structure",
                required: [ "PolicyId", "MemberAccount", "ResourceId", "ResourceType" ],
                members: {
                    PolicyId: {},
                    MemberAccount: {},
                    ResourceId: {},
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ViolationDetail: {
                        type: "structure",
                        required: [ "PolicyId", "MemberAccount", "ResourceId", "ResourceType", "ResourceViolations" ],
                        members: {
                            PolicyId: {},
                            MemberAccount: {},
                            ResourceId: {},
                            ResourceType: {},
                            ResourceViolations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        AwsVPCSecurityGroupViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                ViolationTargetDescription: {},
                                                PartialMatches: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Reference: {},
                                                            TargetViolationReasons: {
                                                                type: "list",
                                                                member: {}
                                                            }
                                                        }
                                                    }
                                                },
                                                PossibleSecurityGroupRemediationActions: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            RemediationActionType: {},
                                                            Description: {},
                                                            RemediationResult: {
                                                                type: "structure",
                                                                members: {
                                                                    IPV4Range: {},
                                                                    IPV6Range: {},
                                                                    PrefixListId: {},
                                                                    Protocol: {},
                                                                    FromPort: {
                                                                        type: "long"
                                                                    },
                                                                    ToPort: {
                                                                        type: "long"
                                                                    }
                                                                }
                                                            },
                                                            IsDefaultAction: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        AwsEc2NetworkInterfaceViolation: {
                                            shape: "S2d"
                                        },
                                        AwsEc2InstanceViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                AwsEc2NetworkInterfaceViolations: {
                                                    type: "list",
                                                    member: {
                                                        shape: "S2d"
                                                    }
                                                }
                                            }
                                        },
                                        NetworkFirewallMissingFirewallViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                VPC: {},
                                                AvailabilityZone: {},
                                                TargetViolationReason: {}
                                            }
                                        },
                                        NetworkFirewallMissingSubnetViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                VPC: {},
                                                AvailabilityZone: {},
                                                TargetViolationReason: {}
                                            }
                                        },
                                        NetworkFirewallMissingExpectedRTViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                VPC: {},
                                                AvailabilityZone: {},
                                                CurrentRouteTable: {},
                                                ExpectedRouteTable: {}
                                            }
                                        },
                                        NetworkFirewallPolicyModifiedViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                CurrentPolicyDescription: {
                                                    shape: "S2l"
                                                },
                                                ExpectedPolicyDescription: {
                                                    shape: "S2l"
                                                }
                                            }
                                        },
                                        DnsRuleGroupPriorityConflictViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                ViolationTargetDescription: {},
                                                ConflictingPriority: {
                                                    type: "integer"
                                                },
                                                ConflictingPolicyId: {},
                                                UnavailablePriorities: {
                                                    type: "list",
                                                    member: {
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        },
                                        DnsDuplicateRuleGroupViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                ViolationTargetDescription: {}
                                            }
                                        },
                                        DnsRuleGroupLimitExceededViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                ViolationTargetDescription: {},
                                                NumberOfRuleGroupsAlreadyAssociated: {
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            ResourceTags: {
                                shape: "S30"
                            },
                            ResourceDescription: {}
                        }
                    }
                }
            }
        },
        ListAppsLists: {
            input: {
                type: "structure",
                required: [ "MaxResults" ],
                members: {
                    DefaultLists: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppsLists: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ListArn: {},
                                ListId: {},
                                ListName: {},
                                AppsList: {
                                    shape: "Sk"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListComplianceStatus: {
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyComplianceStatusList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PolicyOwner: {},
                                PolicyId: {},
                                PolicyName: {},
                                MemberAccount: {},
                                EvaluationResults: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ComplianceStatus: {},
                                            ViolatorCount: {
                                                type: "long"
                                            },
                                            EvaluationLimitExceeded: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                LastUpdated: {
                                    type: "timestamp"
                                },
                                IssueInfoMap: {
                                    shape: "Sz"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMemberAccounts: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MemberAccounts: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListPolicies: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PolicyArn: {},
                                PolicyId: {},
                                PolicyName: {},
                                ResourceType: {},
                                SecurityServiceType: {},
                                RemediationEnabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProtocolsLists: {
            input: {
                type: "structure",
                required: [ "MaxResults" ],
                members: {
                    DefaultLists: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProtocolsLists: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ListArn: {},
                                ListId: {},
                                ListName: {},
                                ProtocolsList: {
                                    shape: "S1s"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "S30"
                    }
                }
            }
        },
        PutAppsList: {
            input: {
                type: "structure",
                required: [ "AppsList" ],
                members: {
                    AppsList: {
                        shape: "Sg"
                    },
                    TagList: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppsList: {
                        shape: "Sg"
                    },
                    AppsListArn: {}
                }
            }
        },
        PutNotificationChannel: {
            input: {
                type: "structure",
                required: [ "SnsTopicArn", "SnsRoleName" ],
                members: {
                    SnsTopicArn: {},
                    SnsRoleName: {}
                }
            }
        },
        PutPolicy: {
            input: {
                type: "structure",
                required: [ "Policy" ],
                members: {
                    Policy: {
                        shape: "S16"
                    },
                    TagList: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        shape: "S16"
                    },
                    PolicyArn: {}
                }
            }
        },
        PutProtocolsList: {
            input: {
                type: "structure",
                required: [ "ProtocolsList" ],
                members: {
                    ProtocolsList: {
                        shape: "S1r"
                    },
                    TagList: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProtocolsList: {
                        shape: "S1r"
                    },
                    ProtocolsListArn: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagList" ],
                members: {
                    ResourceArn: {},
                    TagList: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sg: {
            type: "structure",
            required: [ "ListName", "AppsList" ],
            members: {
                ListId: {},
                ListName: {},
                ListUpdateToken: {},
                CreateTime: {
                    type: "timestamp"
                },
                LastUpdateTime: {
                    type: "timestamp"
                },
                AppsList: {
                    shape: "Sk"
                },
                PreviousAppsList: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "Sk"
                    }
                }
            }
        },
        Sk: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AppName", "Protocol", "Port" ],
                members: {
                    AppName: {},
                    Protocol: {},
                    Port: {
                        type: "long"
                    }
                }
            }
        },
        Sz: {
            type: "map",
            key: {},
            value: {}
        },
        S16: {
            type: "structure",
            required: [ "PolicyName", "SecurityServicePolicyData", "ResourceType", "ExcludeResourceTags", "RemediationEnabled" ],
            members: {
                PolicyId: {},
                PolicyName: {},
                PolicyUpdateToken: {},
                SecurityServicePolicyData: {
                    type: "structure",
                    required: [ "Type" ],
                    members: {
                        Type: {},
                        ManagedServiceData: {}
                    }
                },
                ResourceType: {},
                ResourceTypeList: {
                    type: "list",
                    member: {}
                },
                ResourceTags: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Key" ],
                        members: {
                            Key: {},
                            Value: {}
                        }
                    }
                },
                ExcludeResourceTags: {
                    type: "boolean"
                },
                RemediationEnabled: {
                    type: "boolean"
                },
                IncludeMap: {
                    shape: "S1g"
                },
                ExcludeMap: {
                    shape: "S1g"
                }
            }
        },
        S1g: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        },
        S1r: {
            type: "structure",
            required: [ "ListName", "ProtocolsList" ],
            members: {
                ListId: {},
                ListName: {},
                ListUpdateToken: {},
                CreateTime: {
                    type: "timestamp"
                },
                LastUpdateTime: {
                    type: "timestamp"
                },
                ProtocolsList: {
                    shape: "S1s"
                },
                PreviousProtocolsList: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S1s"
                    }
                }
            }
        },
        S1s: {
            type: "list",
            member: {}
        },
        S2d: {
            type: "structure",
            members: {
                ViolationTarget: {},
                ViolatingSecurityGroups: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2l: {
            type: "structure",
            members: {
                StatelessRuleGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            RuleGroupName: {},
                            ResourceId: {},
                            Priority: {
                                type: "integer"
                            }
                        }
                    }
                },
                StatelessDefaultActions: {
                    shape: "S2q"
                },
                StatelessFragmentDefaultActions: {
                    shape: "S2q"
                },
                StatelessCustomActions: {
                    shape: "S2q"
                },
                StatefulRuleGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            RuleGroupName: {},
                            ResourceId: {}
                        }
                    }
                }
            }
        },
        S2q: {
            type: "list",
            member: {}
        },
        S30: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {
        ListComplianceStatus: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PolicyComplianceStatusList"
        },
        ListMemberAccounts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "MemberAccounts"
        },
        ListPolicies: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PolicyList"
        }
    }
};

AWS.apiLoader.services["secretsmanager"] = {};

AWS.SecretsManager = AWS.Service.defineService("secretsmanager", [ "2017-10-17" ]);

AWS.apiLoader.services["secretsmanager"]["2017-10-17"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-10-17",
        endpointPrefix: "secretsmanager",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Secrets Manager",
        serviceId: "Secrets Manager",
        signatureVersion: "v4",
        signingName: "secretsmanager",
        targetPrefix: "secretsmanager",
        uid: "secretsmanager-2017-10-17"
    },
    operations: {
        CancelRotateSecret: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    VersionId: {}
                }
            }
        },
        CreateSecret: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    KmsKeyId: {},
                    SecretBinary: {
                        shape: "Sc"
                    },
                    SecretString: {
                        shape: "Sd"
                    },
                    Tags: {
                        shape: "Se"
                    },
                    AddReplicaRegions: {
                        shape: "Si"
                    },
                    ForceOverwriteReplicaSecret: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    VersionId: {},
                    ReplicationStatus: {
                        shape: "Sn"
                    }
                }
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {}
                }
            }
        },
        DeleteSecret: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {},
                    RecoveryWindowInDays: {
                        type: "long"
                    },
                    ForceDeleteWithoutRecovery: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    DeletionDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeSecret: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    Description: {},
                    KmsKeyId: {},
                    RotationEnabled: {
                        type: "boolean"
                    },
                    RotationLambdaARN: {},
                    RotationRules: {
                        shape: "S12"
                    },
                    LastRotatedDate: {
                        type: "timestamp"
                    },
                    LastChangedDate: {
                        type: "timestamp"
                    },
                    LastAccessedDate: {
                        type: "timestamp"
                    },
                    DeletedDate: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Se"
                    },
                    VersionIdsToStages: {
                        shape: "S17"
                    },
                    OwningService: {},
                    CreatedDate: {
                        type: "timestamp"
                    },
                    PrimaryRegion: {},
                    ReplicationStatus: {
                        shape: "Sn"
                    }
                }
            }
        },
        GetRandomPassword: {
            input: {
                type: "structure",
                members: {
                    PasswordLength: {
                        type: "long"
                    },
                    ExcludeCharacters: {},
                    ExcludeNumbers: {
                        type: "boolean"
                    },
                    ExcludePunctuation: {
                        type: "boolean"
                    },
                    ExcludeUppercase: {
                        type: "boolean"
                    },
                    ExcludeLowercase: {
                        type: "boolean"
                    },
                    IncludeSpace: {
                        type: "boolean"
                    },
                    RequireEachIncludedType: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RandomPassword: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        GetResourcePolicy: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    ResourcePolicy: {}
                }
            }
        },
        GetSecretValue: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {},
                    VersionId: {},
                    VersionStage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    VersionId: {},
                    SecretBinary: {
                        shape: "Sc"
                    },
                    SecretString: {
                        shape: "Sd"
                    },
                    VersionStages: {
                        shape: "S18"
                    },
                    CreatedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        ListSecretVersionIds: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    IncludeDeprecated: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Versions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VersionId: {},
                                VersionStages: {
                                    shape: "S18"
                                },
                                LastAccessedDate: {
                                    type: "timestamp"
                                },
                                CreatedDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    ARN: {},
                    Name: {}
                }
            }
        },
        ListSecrets: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SecretList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ARN: {},
                                Name: {},
                                Description: {},
                                KmsKeyId: {},
                                RotationEnabled: {
                                    type: "boolean"
                                },
                                RotationLambdaARN: {},
                                RotationRules: {
                                    shape: "S12"
                                },
                                LastRotatedDate: {
                                    type: "timestamp"
                                },
                                LastChangedDate: {
                                    type: "timestamp"
                                },
                                LastAccessedDate: {
                                    type: "timestamp"
                                },
                                DeletedDate: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Se"
                                },
                                SecretVersionsToStages: {
                                    shape: "S17"
                                },
                                OwningService: {},
                                CreatedDate: {
                                    type: "timestamp"
                                },
                                PrimaryRegion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "SecretId", "ResourcePolicy" ],
                members: {
                    SecretId: {},
                    ResourcePolicy: {},
                    BlockPublicPolicy: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {}
                }
            }
        },
        PutSecretValue: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    SecretBinary: {
                        shape: "Sc"
                    },
                    SecretString: {
                        shape: "Sd"
                    },
                    VersionStages: {
                        shape: "S18"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    VersionId: {},
                    VersionStages: {
                        shape: "S18"
                    }
                }
            }
        },
        RemoveRegionsFromReplication: {
            input: {
                type: "structure",
                required: [ "SecretId", "RemoveReplicaRegions" ],
                members: {
                    SecretId: {},
                    RemoveReplicaRegions: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    ReplicationStatus: {
                        shape: "Sn"
                    }
                }
            }
        },
        ReplicateSecretToRegions: {
            input: {
                type: "structure",
                required: [ "SecretId", "AddReplicaRegions" ],
                members: {
                    SecretId: {},
                    AddReplicaRegions: {
                        shape: "Si"
                    },
                    ForceOverwriteReplicaSecret: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    ReplicationStatus: {
                        shape: "Sn"
                    }
                }
            }
        },
        RestoreSecret: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {}
                }
            }
        },
        RotateSecret: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    RotationLambdaARN: {},
                    RotationRules: {
                        shape: "S12"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    VersionId: {}
                }
            }
        },
        StopReplicationToReplica: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "SecretId", "Tags" ],
                members: {
                    SecretId: {},
                    Tags: {
                        shape: "Se"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "SecretId", "TagKeys" ],
                members: {
                    SecretId: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateSecret: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    KmsKeyId: {},
                    SecretBinary: {
                        shape: "Sc"
                    },
                    SecretString: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    VersionId: {}
                }
            }
        },
        UpdateSecretVersionStage: {
            input: {
                type: "structure",
                required: [ "SecretId", "VersionStage" ],
                members: {
                    SecretId: {},
                    VersionStage: {},
                    RemoveFromVersionId: {},
                    MoveToVersionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {}
                }
            }
        },
        ValidateResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourcePolicy" ],
                members: {
                    SecretId: {},
                    ResourcePolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyValidationPassed: {
                        type: "boolean"
                    },
                    ValidationErrors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CheckName: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        Sc: {
            type: "blob",
            sensitive: true
        },
        Sd: {
            type: "string",
            sensitive: true
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Si: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Region: {},
                    KmsKeyId: {}
                }
            }
        },
        Sn: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Region: {},
                    KmsKeyId: {},
                    Status: {},
                    StatusMessage: {},
                    LastAccessedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                AutomaticallyAfterDays: {
                    type: "long"
                }
            }
        },
        S17: {
            type: "map",
            key: {},
            value: {
                shape: "S18"
            }
        },
        S18: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListSecretVersionIds: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSecrets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["iotanalytics"] = {};

AWS.IoTAnalytics = AWS.Service.defineService("iotanalytics", [ "2017-11-27" ]);

AWS.apiLoader.services["iotanalytics"]["2017-11-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-11-27",
        endpointPrefix: "iotanalytics",
        protocol: "rest-json",
        serviceFullName: "AWS IoT Analytics",
        serviceId: "IoTAnalytics",
        signatureVersion: "v4",
        signingName: "iotanalytics",
        uid: "iotanalytics-2017-11-27"
    },
    operations: {
        BatchPutMessage: {
            http: {
                requestUri: "/messages/batch",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelName", "messages" ],
                members: {
                    channelName: {},
                    messages: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "messageId", "payload" ],
                            members: {
                                messageId: {},
                                payload: {
                                    type: "blob"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    batchPutMessageErrorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                messageId: {},
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        CancelPipelineReprocessing: {
            http: {
                method: "DELETE",
                requestUri: "/pipelines/{pipelineName}/reprocessing/{reprocessingId}"
            },
            input: {
                type: "structure",
                required: [ "pipelineName", "reprocessingId" ],
                members: {
                    pipelineName: {
                        location: "uri",
                        locationName: "pipelineName"
                    },
                    reprocessingId: {
                        location: "uri",
                        locationName: "reprocessingId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateChannel: {
            http: {
                requestUri: "/channels",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "channelName" ],
                members: {
                    channelName: {},
                    channelStorage: {
                        shape: "Sh"
                    },
                    retentionPeriod: {
                        shape: "Sn"
                    },
                    tags: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    channelName: {},
                    channelArn: {},
                    retentionPeriod: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateDataset: {
            http: {
                requestUri: "/datasets",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "datasetName", "actions" ],
                members: {
                    datasetName: {},
                    actions: {
                        shape: "Sy"
                    },
                    triggers: {
                        shape: "S1l"
                    },
                    contentDeliveryRules: {
                        shape: "S1q"
                    },
                    retentionPeriod: {
                        shape: "Sn"
                    },
                    versioningConfiguration: {
                        shape: "S21"
                    },
                    tags: {
                        shape: "Sq"
                    },
                    lateDataRules: {
                        shape: "S24"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetName: {},
                    datasetArn: {},
                    retentionPeriod: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateDatasetContent: {
            http: {
                requestUri: "/datasets/{datasetName}/content"
            },
            input: {
                type: "structure",
                required: [ "datasetName" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    },
                    versionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    versionId: {}
                }
            }
        },
        CreateDatastore: {
            http: {
                requestUri: "/datastores",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "datastoreName" ],
                members: {
                    datastoreName: {},
                    datastoreStorage: {
                        shape: "S2h"
                    },
                    retentionPeriod: {
                        shape: "Sn"
                    },
                    tags: {
                        shape: "Sq"
                    },
                    fileFormatConfiguration: {
                        shape: "S2k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datastoreName: {},
                    datastoreArn: {},
                    retentionPeriod: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreatePipeline: {
            http: {
                requestUri: "/pipelines",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "pipelineName", "pipelineActivities" ],
                members: {
                    pipelineName: {},
                    pipelineActivities: {
                        shape: "S2v"
                    },
                    tags: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pipelineName: {},
                    pipelineArn: {}
                }
            }
        },
        DeleteChannel: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "channelName" ],
                members: {
                    channelName: {
                        location: "uri",
                        locationName: "channelName"
                    }
                }
            }
        },
        DeleteDataset: {
            http: {
                method: "DELETE",
                requestUri: "/datasets/{datasetName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "datasetName" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    }
                }
            }
        },
        DeleteDatasetContent: {
            http: {
                method: "DELETE",
                requestUri: "/datasets/{datasetName}/content",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "datasetName" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    },
                    versionId: {
                        location: "querystring",
                        locationName: "versionId"
                    }
                }
            }
        },
        DeleteDatastore: {
            http: {
                method: "DELETE",
                requestUri: "/datastores/{datastoreName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "datastoreName" ],
                members: {
                    datastoreName: {
                        location: "uri",
                        locationName: "datastoreName"
                    }
                }
            }
        },
        DeletePipeline: {
            http: {
                method: "DELETE",
                requestUri: "/pipelines/{pipelineName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "pipelineName" ],
                members: {
                    pipelineName: {
                        location: "uri",
                        locationName: "pipelineName"
                    }
                }
            }
        },
        DescribeChannel: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelName}"
            },
            input: {
                type: "structure",
                required: [ "channelName" ],
                members: {
                    channelName: {
                        location: "uri",
                        locationName: "channelName"
                    },
                    includeStatistics: {
                        location: "querystring",
                        locationName: "includeStatistics",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    channel: {
                        type: "structure",
                        members: {
                            name: {},
                            storage: {
                                shape: "Sh"
                            },
                            arn: {},
                            status: {},
                            retentionPeriod: {
                                shape: "Sn"
                            },
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdateTime: {
                                type: "timestamp"
                            },
                            lastMessageArrivalTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    statistics: {
                        type: "structure",
                        members: {
                            size: {
                                shape: "S3t"
                            }
                        }
                    }
                }
            }
        },
        DescribeDataset: {
            http: {
                method: "GET",
                requestUri: "/datasets/{datasetName}"
            },
            input: {
                type: "structure",
                required: [ "datasetName" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataset: {
                        type: "structure",
                        members: {
                            name: {},
                            arn: {},
                            actions: {
                                shape: "Sy"
                            },
                            triggers: {
                                shape: "S1l"
                            },
                            contentDeliveryRules: {
                                shape: "S1q"
                            },
                            status: {},
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdateTime: {
                                type: "timestamp"
                            },
                            retentionPeriod: {
                                shape: "Sn"
                            },
                            versioningConfiguration: {
                                shape: "S21"
                            },
                            lateDataRules: {
                                shape: "S24"
                            }
                        }
                    }
                }
            }
        },
        DescribeDatastore: {
            http: {
                method: "GET",
                requestUri: "/datastores/{datastoreName}"
            },
            input: {
                type: "structure",
                required: [ "datastoreName" ],
                members: {
                    datastoreName: {
                        location: "uri",
                        locationName: "datastoreName"
                    },
                    includeStatistics: {
                        location: "querystring",
                        locationName: "includeStatistics",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datastore: {
                        type: "structure",
                        members: {
                            name: {},
                            storage: {
                                shape: "S2h"
                            },
                            arn: {},
                            status: {},
                            retentionPeriod: {
                                shape: "Sn"
                            },
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdateTime: {
                                type: "timestamp"
                            },
                            lastMessageArrivalTime: {
                                type: "timestamp"
                            },
                            fileFormatConfiguration: {
                                shape: "S2k"
                            }
                        }
                    },
                    statistics: {
                        type: "structure",
                        members: {
                            size: {
                                shape: "S3t"
                            }
                        }
                    }
                }
            }
        },
        DescribeLoggingOptions: {
            http: {
                method: "GET",
                requestUri: "/logging"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    loggingOptions: {
                        shape: "S46"
                    }
                }
            }
        },
        DescribePipeline: {
            http: {
                method: "GET",
                requestUri: "/pipelines/{pipelineName}"
            },
            input: {
                type: "structure",
                required: [ "pipelineName" ],
                members: {
                    pipelineName: {
                        location: "uri",
                        locationName: "pipelineName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pipeline: {
                        type: "structure",
                        members: {
                            name: {},
                            arn: {},
                            activities: {
                                shape: "S2v"
                            },
                            reprocessingSummaries: {
                                shape: "S4c"
                            },
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetDatasetContent: {
            http: {
                method: "GET",
                requestUri: "/datasets/{datasetName}/content"
            },
            input: {
                type: "structure",
                required: [ "datasetName" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    },
                    versionId: {
                        location: "querystring",
                        locationName: "versionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                entryName: {},
                                dataURI: {}
                            }
                        }
                    },
                    timestamp: {
                        type: "timestamp"
                    },
                    status: {
                        shape: "S4k"
                    }
                }
            }
        },
        ListChannels: {
            http: {
                method: "GET",
                requestUri: "/channels"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    channelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                channelName: {},
                                channelStorage: {
                                    type: "structure",
                                    members: {
                                        serviceManagedS3: {
                                            type: "structure",
                                            members: {}
                                        },
                                        customerManagedS3: {
                                            type: "structure",
                                            members: {
                                                bucket: {},
                                                keyPrefix: {},
                                                roleArn: {}
                                            }
                                        }
                                    }
                                },
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                lastMessageArrivalTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDatasetContents: {
            http: {
                method: "GET",
                requestUri: "/datasets/{datasetName}/contents"
            },
            input: {
                type: "structure",
                required: [ "datasetName" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    scheduledOnOrAfter: {
                        location: "querystring",
                        locationName: "scheduledOnOrAfter",
                        type: "timestamp"
                    },
                    scheduledBefore: {
                        location: "querystring",
                        locationName: "scheduledBefore",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetContentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                version: {},
                                status: {
                                    shape: "S4k"
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                scheduleTime: {
                                    type: "timestamp"
                                },
                                completionTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDatasets: {
            http: {
                method: "GET",
                requestUri: "/datasets"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                datasetName: {},
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                triggers: {
                                    shape: "S1l"
                                },
                                actions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            actionName: {},
                                            actionType: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDatastores: {
            http: {
                method: "GET",
                requestUri: "/datastores"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datastoreSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                datastoreName: {},
                                datastoreStorage: {
                                    type: "structure",
                                    members: {
                                        serviceManagedS3: {
                                            type: "structure",
                                            members: {}
                                        },
                                        customerManagedS3: {
                                            type: "structure",
                                            members: {
                                                bucket: {},
                                                keyPrefix: {},
                                                roleArn: {}
                                            }
                                        }
                                    }
                                },
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                lastMessageArrivalTime: {
                                    type: "timestamp"
                                },
                                fileFormatType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPipelines: {
            http: {
                method: "GET",
                requestUri: "/pipelines"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pipelineSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                pipelineName: {},
                                reprocessingSummaries: {
                                    shape: "S4c"
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sq"
                    }
                }
            }
        },
        PutLoggingOptions: {
            http: {
                method: "PUT",
                requestUri: "/logging"
            },
            input: {
                type: "structure",
                required: [ "loggingOptions" ],
                members: {
                    loggingOptions: {
                        shape: "S46"
                    }
                }
            }
        },
        RunPipelineActivity: {
            http: {
                requestUri: "/pipelineactivities/run"
            },
            input: {
                type: "structure",
                required: [ "pipelineActivity", "payloads" ],
                members: {
                    pipelineActivity: {
                        shape: "S2w"
                    },
                    payloads: {
                        shape: "S5o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    payloads: {
                        shape: "S5o"
                    },
                    logResult: {}
                }
            }
        },
        SampleChannelData: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelName}/sample"
            },
            input: {
                type: "structure",
                required: [ "channelName" ],
                members: {
                    channelName: {
                        location: "uri",
                        locationName: "channelName"
                    },
                    maxMessages: {
                        location: "querystring",
                        locationName: "maxMessages",
                        type: "integer"
                    },
                    startTime: {
                        location: "querystring",
                        locationName: "startTime",
                        type: "timestamp"
                    },
                    endTime: {
                        location: "querystring",
                        locationName: "endTime",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    payloads: {
                        shape: "S5o"
                    }
                }
            }
        },
        StartPipelineReprocessing: {
            http: {
                requestUri: "/pipelines/{pipelineName}/reprocessing"
            },
            input: {
                type: "structure",
                required: [ "pipelineName" ],
                members: {
                    pipelineName: {
                        location: "uri",
                        locationName: "pipelineName"
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    channelMessages: {
                        type: "structure",
                        members: {
                            s3Paths: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reprocessingId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateChannel: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelName}"
            },
            input: {
                type: "structure",
                required: [ "channelName" ],
                members: {
                    channelName: {
                        location: "uri",
                        locationName: "channelName"
                    },
                    channelStorage: {
                        shape: "Sh"
                    },
                    retentionPeriod: {
                        shape: "Sn"
                    }
                }
            }
        },
        UpdateDataset: {
            http: {
                method: "PUT",
                requestUri: "/datasets/{datasetName}"
            },
            input: {
                type: "structure",
                required: [ "datasetName", "actions" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    },
                    actions: {
                        shape: "Sy"
                    },
                    triggers: {
                        shape: "S1l"
                    },
                    contentDeliveryRules: {
                        shape: "S1q"
                    },
                    retentionPeriod: {
                        shape: "Sn"
                    },
                    versioningConfiguration: {
                        shape: "S21"
                    },
                    lateDataRules: {
                        shape: "S24"
                    }
                }
            }
        },
        UpdateDatastore: {
            http: {
                method: "PUT",
                requestUri: "/datastores/{datastoreName}"
            },
            input: {
                type: "structure",
                required: [ "datastoreName" ],
                members: {
                    datastoreName: {
                        location: "uri",
                        locationName: "datastoreName"
                    },
                    retentionPeriod: {
                        shape: "Sn"
                    },
                    datastoreStorage: {
                        shape: "S2h"
                    },
                    fileFormatConfiguration: {
                        shape: "S2k"
                    }
                }
            }
        },
        UpdatePipeline: {
            http: {
                method: "PUT",
                requestUri: "/pipelines/{pipelineName}"
            },
            input: {
                type: "structure",
                required: [ "pipelineName", "pipelineActivities" ],
                members: {
                    pipelineName: {
                        location: "uri",
                        locationName: "pipelineName"
                    },
                    pipelineActivities: {
                        shape: "S2v"
                    }
                }
            }
        }
    },
    shapes: {
        Sh: {
            type: "structure",
            members: {
                serviceManagedS3: {
                    type: "structure",
                    members: {}
                },
                customerManagedS3: {
                    type: "structure",
                    required: [ "bucket", "roleArn" ],
                    members: {
                        bucket: {},
                        keyPrefix: {},
                        roleArn: {}
                    }
                }
            }
        },
        Sn: {
            type: "structure",
            members: {
                unlimited: {
                    type: "boolean"
                },
                numberOfDays: {
                    type: "integer"
                }
            }
        },
        Sq: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    actionName: {},
                    queryAction: {
                        type: "structure",
                        required: [ "sqlQuery" ],
                        members: {
                            sqlQuery: {},
                            filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        deltaTime: {
                                            type: "structure",
                                            required: [ "offsetSeconds", "timeExpression" ],
                                            members: {
                                                offsetSeconds: {
                                                    type: "integer"
                                                },
                                                timeExpression: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    containerAction: {
                        type: "structure",
                        required: [ "image", "executionRoleArn", "resourceConfiguration" ],
                        members: {
                            image: {},
                            executionRoleArn: {},
                            resourceConfiguration: {
                                type: "structure",
                                required: [ "computeType", "volumeSizeInGB" ],
                                members: {
                                    computeType: {},
                                    volumeSizeInGB: {
                                        type: "integer"
                                    }
                                }
                            },
                            variables: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "name" ],
                                    members: {
                                        name: {},
                                        stringValue: {},
                                        doubleValue: {
                                            type: "double"
                                        },
                                        datasetContentVersionValue: {
                                            type: "structure",
                                            required: [ "datasetName" ],
                                            members: {
                                                datasetName: {}
                                            }
                                        },
                                        outputFileUriValue: {
                                            type: "structure",
                                            required: [ "fileName" ],
                                            members: {
                                                fileName: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    schedule: {
                        type: "structure",
                        members: {
                            expression: {}
                        }
                    },
                    dataset: {
                        type: "structure",
                        required: [ "name" ],
                        members: {
                            name: {}
                        }
                    }
                }
            }
        },
        S1q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "destination" ],
                members: {
                    entryName: {},
                    destination: {
                        type: "structure",
                        members: {
                            iotEventsDestinationConfiguration: {
                                type: "structure",
                                required: [ "inputName", "roleArn" ],
                                members: {
                                    inputName: {},
                                    roleArn: {}
                                }
                            },
                            s3DestinationConfiguration: {
                                type: "structure",
                                required: [ "bucket", "key", "roleArn" ],
                                members: {
                                    bucket: {},
                                    key: {},
                                    glueConfiguration: {
                                        type: "structure",
                                        required: [ "tableName", "databaseName" ],
                                        members: {
                                            tableName: {},
                                            databaseName: {}
                                        }
                                    },
                                    roleArn: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S21: {
            type: "structure",
            members: {
                unlimited: {
                    type: "boolean"
                },
                maxVersions: {
                    type: "integer"
                }
            }
        },
        S24: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ruleConfiguration" ],
                members: {
                    ruleName: {},
                    ruleConfiguration: {
                        type: "structure",
                        members: {
                            deltaTimeSessionWindowConfiguration: {
                                type: "structure",
                                required: [ "timeoutInMinutes" ],
                                members: {
                                    timeoutInMinutes: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S2h: {
            type: "structure",
            members: {
                serviceManagedS3: {
                    type: "structure",
                    members: {}
                },
                customerManagedS3: {
                    type: "structure",
                    required: [ "bucket", "roleArn" ],
                    members: {
                        bucket: {},
                        keyPrefix: {},
                        roleArn: {}
                    }
                }
            }
        },
        S2k: {
            type: "structure",
            members: {
                jsonConfiguration: {
                    type: "structure",
                    members: {}
                },
                parquetConfiguration: {
                    type: "structure",
                    members: {
                        schemaDefinition: {
                            type: "structure",
                            members: {
                                columns: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name", "type" ],
                                        members: {
                                            name: {},
                                            type: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S2v: {
            type: "list",
            member: {
                shape: "S2w"
            }
        },
        S2w: {
            type: "structure",
            members: {
                channel: {
                    type: "structure",
                    required: [ "name", "channelName" ],
                    members: {
                        name: {},
                        channelName: {},
                        next: {}
                    }
                },
                lambda: {
                    type: "structure",
                    required: [ "name", "lambdaName", "batchSize" ],
                    members: {
                        name: {},
                        lambdaName: {},
                        batchSize: {
                            type: "integer"
                        },
                        next: {}
                    }
                },
                datastore: {
                    type: "structure",
                    required: [ "name", "datastoreName" ],
                    members: {
                        name: {},
                        datastoreName: {}
                    }
                },
                addAttributes: {
                    type: "structure",
                    required: [ "name", "attributes" ],
                    members: {
                        name: {},
                        attributes: {
                            type: "map",
                            key: {},
                            value: {}
                        },
                        next: {}
                    }
                },
                removeAttributes: {
                    type: "structure",
                    required: [ "name", "attributes" ],
                    members: {
                        name: {},
                        attributes: {
                            shape: "S37"
                        },
                        next: {}
                    }
                },
                selectAttributes: {
                    type: "structure",
                    required: [ "name", "attributes" ],
                    members: {
                        name: {},
                        attributes: {
                            shape: "S37"
                        },
                        next: {}
                    }
                },
                filter: {
                    type: "structure",
                    required: [ "name", "filter" ],
                    members: {
                        name: {},
                        filter: {},
                        next: {}
                    }
                },
                math: {
                    type: "structure",
                    required: [ "name", "attribute", "math" ],
                    members: {
                        name: {},
                        attribute: {},
                        math: {},
                        next: {}
                    }
                },
                deviceRegistryEnrich: {
                    type: "structure",
                    required: [ "name", "attribute", "thingName", "roleArn" ],
                    members: {
                        name: {},
                        attribute: {},
                        thingName: {},
                        roleArn: {},
                        next: {}
                    }
                },
                deviceShadowEnrich: {
                    type: "structure",
                    required: [ "name", "attribute", "thingName", "roleArn" ],
                    members: {
                        name: {},
                        attribute: {},
                        thingName: {},
                        roleArn: {},
                        next: {}
                    }
                }
            }
        },
        S37: {
            type: "list",
            member: {}
        },
        S3t: {
            type: "structure",
            members: {
                estimatedSizeInBytes: {
                    type: "double"
                },
                estimatedOn: {
                    type: "timestamp"
                }
            }
        },
        S46: {
            type: "structure",
            required: [ "roleArn", "level", "enabled" ],
            members: {
                roleArn: {},
                level: {},
                enabled: {
                    type: "boolean"
                }
            }
        },
        S4c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S4k: {
            type: "structure",
            members: {
                state: {},
                reason: {}
            }
        },
        S5o: {
            type: "list",
            member: {
                type: "blob"
            }
        }
    },
    paginators: {
        ListChannels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListDatasetContents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListDatasets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListDatastores: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPipelines: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["iot1clickdevicesservice"] = {};

AWS.IoT1ClickDevicesService = AWS.Service.defineService("iot1clickdevicesservice", [ "2018-05-14" ]);

AWS.apiLoader.services["iot1clickdevicesservice"]["2018-05-14"] = {
    metadata: {
        apiVersion: "2018-05-14",
        endpointPrefix: "devices.iot1click",
        signingName: "iot1click",
        serviceFullName: "AWS IoT 1-Click Devices Service",
        serviceId: "IoT 1Click Devices Service",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "devices-2018-05-14",
        signatureVersion: "v4"
    },
    operations: {
        ClaimDevicesByClaimCode: {
            http: {
                method: "PUT",
                requestUri: "/claims/{claimCode}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClaimCode: {
                        location: "uri",
                        locationName: "claimCode"
                    }
                },
                required: [ "ClaimCode" ]
            },
            output: {
                type: "structure",
                members: {
                    ClaimCode: {
                        locationName: "claimCode"
                    },
                    Total: {
                        locationName: "total",
                        type: "integer"
                    }
                }
            }
        },
        DescribeDevice: {
            http: {
                method: "GET",
                requestUri: "/devices/{deviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    DeviceDescription: {
                        shape: "S8",
                        locationName: "deviceDescription"
                    }
                }
            }
        },
        FinalizeDeviceClaim: {
            http: {
                method: "PUT",
                requestUri: "/devices/{deviceId}/finalize-claim",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    },
                    Tags: {
                        shape: "Sc",
                        locationName: "tags"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        GetDeviceMethods: {
            http: {
                method: "GET",
                requestUri: "/devices/{deviceId}/methods",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    DeviceMethods: {
                        locationName: "deviceMethods",
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    }
                }
            }
        },
        InitiateDeviceClaim: {
            http: {
                method: "PUT",
                requestUri: "/devices/{deviceId}/initiate-claim",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        InvokeDeviceMethod: {
            http: {
                requestUri: "/devices/{deviceId}/methods",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    },
                    DeviceMethod: {
                        shape: "Si",
                        locationName: "deviceMethod"
                    },
                    DeviceMethodParameters: {
                        locationName: "deviceMethodParameters"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    DeviceMethodResponse: {
                        locationName: "deviceMethodResponse"
                    }
                }
            }
        },
        ListDeviceEvents: {
            http: {
                method: "GET",
                requestUri: "/devices/{deviceId}/events",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    },
                    FromTimeStamp: {
                        shape: "So",
                        location: "querystring",
                        locationName: "fromTimeStamp"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ToTimeStamp: {
                        shape: "So",
                        location: "querystring",
                        locationName: "toTimeStamp"
                    }
                },
                required: [ "DeviceId", "FromTimeStamp", "ToTimeStamp" ]
            },
            output: {
                type: "structure",
                members: {
                    Events: {
                        locationName: "events",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Device: {
                                    locationName: "device",
                                    type: "structure",
                                    members: {
                                        Attributes: {
                                            locationName: "attributes",
                                            type: "structure",
                                            members: {}
                                        },
                                        DeviceId: {
                                            locationName: "deviceId"
                                        },
                                        Type: {
                                            locationName: "type"
                                        }
                                    }
                                },
                                StdEvent: {
                                    locationName: "stdEvent"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListDevices: {
            http: {
                method: "GET",
                requestUri: "/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceType: {
                        location: "querystring",
                        locationName: "deviceType"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Devices: {
                        locationName: "devices",
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sc",
                        locationName: "tags"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        shape: "Sc",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn", "Tags" ]
            }
        },
        UnclaimDevice: {
            http: {
                method: "PUT",
                requestUri: "/devices/{deviceId}/unclaim",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateDeviceState: {
            http: {
                method: "PUT",
                requestUri: "/devices/{deviceId}/state",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    },
                    Enabled: {
                        locationName: "enabled",
                        type: "boolean"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S8: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                Attributes: {
                    locationName: "attributes",
                    type: "map",
                    key: {},
                    value: {}
                },
                DeviceId: {
                    locationName: "deviceId"
                },
                Enabled: {
                    locationName: "enabled",
                    type: "boolean"
                },
                RemainingLife: {
                    locationName: "remainingLife",
                    type: "double"
                },
                Type: {
                    locationName: "type"
                },
                Tags: {
                    shape: "Sc",
                    locationName: "tags"
                }
            }
        },
        Sc: {
            type: "map",
            key: {},
            value: {}
        },
        Si: {
            type: "structure",
            members: {
                DeviceType: {
                    locationName: "deviceType"
                },
                MethodName: {
                    locationName: "methodName"
                }
            }
        },
        So: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    }
};

AWS.apiLoader.services["iot1clickprojects"] = {};

AWS.IoT1ClickProjects = AWS.Service.defineService("iot1clickprojects", [ "2018-05-14" ]);

AWS.apiLoader.services["iot1clickprojects"]["2018-05-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-14",
        endpointPrefix: "projects.iot1click",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AWS IoT 1-Click Projects",
        serviceFullName: "AWS IoT 1-Click Projects Service",
        serviceId: "IoT 1Click Projects",
        signatureVersion: "v4",
        signingName: "iot1click",
        uid: "iot1click-projects-2018-05-14"
    },
    operations: {
        AssociateDeviceWithPlacement: {
            http: {
                method: "PUT",
                requestUri: "/projects/{projectName}/placements/{placementName}/devices/{deviceTemplateName}"
            },
            input: {
                type: "structure",
                required: [ "projectName", "placementName", "deviceId", "deviceTemplateName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    placementName: {
                        location: "uri",
                        locationName: "placementName"
                    },
                    deviceId: {},
                    deviceTemplateName: {
                        location: "uri",
                        locationName: "deviceTemplateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreatePlacement: {
            http: {
                requestUri: "/projects/{projectName}/placements"
            },
            input: {
                type: "structure",
                required: [ "placementName", "projectName" ],
                members: {
                    placementName: {},
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    attributes: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateProject: {
            http: {
                requestUri: "/projects"
            },
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {},
                    description: {},
                    placementTemplate: {
                        shape: "Se"
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePlacement: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{projectName}/placements/{placementName}"
            },
            input: {
                type: "structure",
                required: [ "placementName", "projectName" ],
                members: {
                    placementName: {
                        location: "uri",
                        locationName: "placementName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{projectName}"
            },
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribePlacement: {
            http: {
                method: "GET",
                requestUri: "/projects/{projectName}/placements/{placementName}"
            },
            input: {
                type: "structure",
                required: [ "placementName", "projectName" ],
                members: {
                    placementName: {
                        location: "uri",
                        locationName: "placementName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "placement" ],
                members: {
                    placement: {
                        type: "structure",
                        required: [ "projectName", "placementName", "attributes", "createdDate", "updatedDate" ],
                        members: {
                            projectName: {},
                            placementName: {},
                            attributes: {
                                shape: "S8"
                            },
                            createdDate: {
                                type: "timestamp"
                            },
                            updatedDate: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeProject: {
            http: {
                method: "GET",
                requestUri: "/projects/{projectName}"
            },
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        type: "structure",
                        required: [ "projectName", "createdDate", "updatedDate" ],
                        members: {
                            arn: {},
                            projectName: {},
                            description: {},
                            createdDate: {
                                type: "timestamp"
                            },
                            updatedDate: {
                                type: "timestamp"
                            },
                            placementTemplate: {
                                shape: "Se"
                            },
                            tags: {
                                shape: "Sn"
                            }
                        }
                    }
                }
            }
        },
        DisassociateDeviceFromPlacement: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{projectName}/placements/{placementName}/devices/{deviceTemplateName}"
            },
            input: {
                type: "structure",
                required: [ "projectName", "placementName", "deviceTemplateName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    placementName: {
                        location: "uri",
                        locationName: "placementName"
                    },
                    deviceTemplateName: {
                        location: "uri",
                        locationName: "deviceTemplateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetDevicesInPlacement: {
            http: {
                method: "GET",
                requestUri: "/projects/{projectName}/placements/{placementName}/devices"
            },
            input: {
                type: "structure",
                required: [ "projectName", "placementName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    placementName: {
                        location: "uri",
                        locationName: "placementName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "devices" ],
                members: {
                    devices: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        ListPlacements: {
            http: {
                method: "GET",
                requestUri: "/projects/{projectName}/placements"
            },
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "placements" ],
                members: {
                    placements: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "projectName", "placementName", "createdDate", "updatedDate" ],
                            members: {
                                projectName: {},
                                placementName: {},
                                createdDate: {
                                    type: "timestamp"
                                },
                                updatedDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListProjects: {
            http: {
                method: "GET",
                requestUri: "/projects"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "projects" ],
                members: {
                    projects: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "projectName", "createdDate", "updatedDate" ],
                            members: {
                                arn: {},
                                projectName: {},
                                createdDate: {
                                    type: "timestamp"
                                },
                                updatedDate: {
                                    type: "timestamp"
                                },
                                tags: {
                                    shape: "Sn"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePlacement: {
            http: {
                method: "PUT",
                requestUri: "/projects/{projectName}/placements/{placementName}"
            },
            input: {
                type: "structure",
                required: [ "placementName", "projectName" ],
                members: {
                    placementName: {
                        location: "uri",
                        locationName: "placementName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    attributes: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateProject: {
            http: {
                method: "PUT",
                requestUri: "/projects/{projectName}"
            },
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    description: {},
                    placementTemplate: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S8: {
            type: "map",
            key: {},
            value: {}
        },
        Se: {
            type: "structure",
            members: {
                defaultAttributes: {
                    type: "map",
                    key: {},
                    value: {}
                },
                deviceTemplates: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            deviceType: {},
                            callbackOverrides: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            }
        },
        Sn: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListPlacements: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "placements"
        },
        ListProjects: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "projects"
        }
    }
};

AWS.apiLoader.services["pi"] = {};

AWS.PI = AWS.Service.defineService("pi", [ "2018-02-27" ]);

AWS.apiLoader.services["pi"]["2018-02-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-02-27",
        endpointPrefix: "pi",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "AWS PI",
        serviceFullName: "AWS Performance Insights",
        serviceId: "PI",
        signatureVersion: "v4",
        signingName: "pi",
        targetPrefix: "PerformanceInsightsv20180227",
        uid: "pi-2018-02-27"
    },
    operations: {
        DescribeDimensionKeys: {
            input: {
                type: "structure",
                required: [ "ServiceType", "Identifier", "StartTime", "EndTime", "Metric", "GroupBy" ],
                members: {
                    ServiceType: {},
                    Identifier: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Metric: {},
                    PeriodInSeconds: {
                        type: "integer"
                    },
                    GroupBy: {
                        shape: "S6"
                    },
                    PartitionBy: {
                        shape: "S6"
                    },
                    Filter: {
                        shape: "S9"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AlignedStartTime: {
                        type: "timestamp"
                    },
                    AlignedEndTime: {
                        type: "timestamp"
                    },
                    PartitionKeys: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Dimensions" ],
                            members: {
                                Dimensions: {
                                    shape: "Se"
                                }
                            }
                        }
                    },
                    Keys: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Dimensions: {
                                    shape: "Se"
                                },
                                Total: {
                                    type: "double"
                                },
                                Partitions: {
                                    type: "list",
                                    member: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetResourceMetrics: {
            input: {
                type: "structure",
                required: [ "ServiceType", "Identifier", "MetricQueries", "StartTime", "EndTime" ],
                members: {
                    ServiceType: {},
                    Identifier: {},
                    MetricQueries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Metric" ],
                            members: {
                                Metric: {},
                                GroupBy: {
                                    shape: "S6"
                                },
                                Filter: {
                                    shape: "S9"
                                }
                            }
                        }
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    PeriodInSeconds: {
                        type: "integer"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AlignedStartTime: {
                        type: "timestamp"
                    },
                    AlignedEndTime: {
                        type: "timestamp"
                    },
                    Identifier: {},
                    MetricList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {
                                    type: "structure",
                                    required: [ "Metric" ],
                                    members: {
                                        Metric: {},
                                        Dimensions: {
                                            shape: "Se"
                                        }
                                    }
                                },
                                DataPoints: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Timestamp", "Value" ],
                                        members: {
                                            Timestamp: {
                                                type: "timestamp"
                                            },
                                            Value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            required: [ "Group" ],
            members: {
                Group: {},
                Dimensions: {
                    type: "list",
                    member: {}
                },
                Limit: {
                    type: "integer"
                }
            }
        },
        S9: {
            type: "map",
            key: {},
            value: {}
        },
        Se: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["neptune"] = {};

AWS.Neptune = AWS.Service.defineService("neptune", [ "2014-10-31" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    102: [ function(require, module, exports) {
        var AWS = require("../core");
        var rdsutil = require("./rdsutil");
        var crossRegionOperations = [ "createDBCluster", "copyDBClusterSnapshot" ];
        AWS.util.update(AWS.Neptune.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                if (crossRegionOperations.indexOf(request.operation) !== -1 && this.config.params && this.config.params.SourceRegion && request.params && !request.params.SourceRegion) {
                    request.params.SourceRegion = this.config.params.SourceRegion;
                }
                rdsutil.setupRequestListeners(this, request, crossRegionOperations);
            }
        });
    }, {
        "../core": 39,
        "./rdsutil": 106
    } ]
}, {}, [ 102 ]);

AWS.apiLoader.services["neptune"]["2014-10-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-10-31",
        endpointPrefix: "rds",
        protocol: "query",
        serviceAbbreviation: "Amazon Neptune",
        serviceFullName: "Amazon Neptune",
        serviceId: "Neptune",
        signatureVersion: "v4",
        signingName: "rds",
        uid: "neptune-2014-10-31",
        xmlNamespace: "http://rds.amazonaws.com/doc/2014-10-31/"
    },
    operations: {
        AddRoleToDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "RoleArn" ],
                members: {
                    DBClusterIdentifier: {},
                    RoleArn: {},
                    FeatureName: {}
                }
            }
        },
        AddSourceIdentifierToSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SourceIdentifier" ],
                members: {
                    SubscriptionName: {},
                    SourceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "AddSourceIdentifierToSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S5"
                    }
                }
            }
        },
        AddTagsToResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "Tags" ],
                members: {
                    ResourceName: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        ApplyPendingMaintenanceAction: {
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ApplyAction", "OptInType" ],
                members: {
                    ResourceIdentifier: {},
                    ApplyAction: {},
                    OptInType: {}
                }
            },
            output: {
                resultWrapper: "ApplyPendingMaintenanceActionResult",
                type: "structure",
                members: {
                    ResourcePendingMaintenanceActions: {
                        shape: "Se"
                    }
                }
            }
        },
        CopyDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "SourceDBClusterParameterGroupIdentifier", "TargetDBClusterParameterGroupIdentifier", "TargetDBClusterParameterGroupDescription" ],
                members: {
                    SourceDBClusterParameterGroupIdentifier: {},
                    TargetDBClusterParameterGroupIdentifier: {},
                    TargetDBClusterParameterGroupDescription: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CopyDBClusterParameterGroupResult",
                type: "structure",
                members: {
                    DBClusterParameterGroup: {
                        shape: "Sk"
                    }
                }
            }
        },
        CopyDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "SourceDBClusterSnapshotIdentifier", "TargetDBClusterSnapshotIdentifier" ],
                members: {
                    SourceDBClusterSnapshotIdentifier: {},
                    TargetDBClusterSnapshotIdentifier: {},
                    KmsKeyId: {},
                    PreSignedUrl: {},
                    CopyTags: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CopyDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "So"
                    }
                }
            }
        },
        CopyDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "SourceDBParameterGroupIdentifier", "TargetDBParameterGroupIdentifier", "TargetDBParameterGroupDescription" ],
                members: {
                    SourceDBParameterGroupIdentifier: {},
                    TargetDBParameterGroupIdentifier: {},
                    TargetDBParameterGroupDescription: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CopyDBParameterGroupResult",
                type: "structure",
                members: {
                    DBParameterGroup: {
                        shape: "St"
                    }
                }
            }
        },
        CreateDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "Engine" ],
                members: {
                    AvailabilityZones: {
                        shape: "Sp"
                    },
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    CharacterSetName: {},
                    DatabaseName: {},
                    DBClusterIdentifier: {},
                    DBClusterParameterGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Sw"
                    },
                    DBSubnetGroupName: {},
                    Engine: {},
                    EngineVersion: {},
                    Port: {
                        type: "integer"
                    },
                    MasterUsername: {},
                    MasterUserPassword: {},
                    OptionGroupName: {},
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    ReplicationSourceIdentifier: {},
                    Tags: {
                        shape: "Sa"
                    },
                    StorageEncrypted: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    PreSignedUrl: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "Sx"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sz"
                    }
                }
            }
        },
        CreateDBClusterEndpoint: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "DBClusterEndpointIdentifier", "EndpointType" ],
                members: {
                    DBClusterIdentifier: {},
                    DBClusterEndpointIdentifier: {},
                    EndpointType: {},
                    StaticMembers: {
                        shape: "S1a"
                    },
                    ExcludedMembers: {
                        shape: "S1a"
                    },
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBClusterEndpointResult",
                type: "structure",
                members: {
                    DBClusterEndpointIdentifier: {},
                    DBClusterIdentifier: {},
                    DBClusterEndpointResourceIdentifier: {},
                    Endpoint: {},
                    Status: {},
                    EndpointType: {},
                    CustomEndpointType: {},
                    StaticMembers: {
                        shape: "S1a"
                    },
                    ExcludedMembers: {
                        shape: "S1a"
                    },
                    DBClusterEndpointArn: {}
                }
            }
        },
        CreateDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName", "DBParameterGroupFamily", "Description" ],
                members: {
                    DBClusterParameterGroupName: {},
                    DBParameterGroupFamily: {},
                    Description: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBClusterParameterGroupResult",
                type: "structure",
                members: {
                    DBClusterParameterGroup: {
                        shape: "Sk"
                    }
                }
            }
        },
        CreateDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier", "DBClusterIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {},
                    DBClusterIdentifier: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "So"
                    }
                }
            }
        },
        CreateDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier", "DBInstanceClass", "Engine" ],
                members: {
                    DBName: {},
                    DBInstanceIdentifier: {},
                    AllocatedStorage: {
                        type: "integer"
                    },
                    DBInstanceClass: {},
                    Engine: {},
                    MasterUsername: {},
                    MasterUserPassword: {},
                    DBSecurityGroups: {
                        shape: "S1h"
                    },
                    VpcSecurityGroupIds: {
                        shape: "Sw"
                    },
                    AvailabilityZone: {},
                    DBSubnetGroupName: {},
                    PreferredMaintenanceWindow: {},
                    DBParameterGroupName: {},
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    PreferredBackupWindow: {},
                    Port: {
                        type: "integer"
                    },
                    MultiAZ: {
                        type: "boolean"
                    },
                    EngineVersion: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    LicenseModel: {},
                    Iops: {
                        type: "integer"
                    },
                    OptionGroupName: {},
                    CharacterSetName: {},
                    PubliclyAccessible: {
                        deprecated: true,
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    DBClusterIdentifier: {},
                    StorageType: {},
                    TdeCredentialArn: {},
                    TdeCredentialPassword: {},
                    StorageEncrypted: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    Domain: {},
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    MonitoringInterval: {
                        type: "integer"
                    },
                    MonitoringRoleArn: {},
                    DomainIAMRoleName: {},
                    PromotionTier: {
                        type: "integer"
                    },
                    Timezone: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnablePerformanceInsights: {
                        type: "boolean"
                    },
                    PerformanceInsightsKMSKeyId: {},
                    EnableCloudwatchLogsExports: {
                        shape: "Sx"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1j"
                    }
                }
            }
        },
        CreateDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName", "DBParameterGroupFamily", "Description" ],
                members: {
                    DBParameterGroupName: {},
                    DBParameterGroupFamily: {},
                    Description: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBParameterGroupResult",
                type: "structure",
                members: {
                    DBParameterGroup: {
                        shape: "St"
                    }
                }
            }
        },
        CreateDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName", "DBSubnetGroupDescription", "SubnetIds" ],
                members: {
                    DBSubnetGroupName: {},
                    DBSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S26"
                    },
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBSubnetGroupResult",
                type: "structure",
                members: {
                    DBSubnetGroup: {
                        shape: "S1p"
                    }
                }
            }
        },
        CreateEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SnsTopicArn" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    EventCategories: {
                        shape: "S7"
                    },
                    SourceIds: {
                        shape: "S6"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CreateEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S5"
                    }
                }
            }
        },
        DeleteDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    SkipFinalSnapshot: {
                        type: "boolean"
                    },
                    FinalDBSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sz"
                    }
                }
            }
        },
        DeleteDBClusterEndpoint: {
            input: {
                type: "structure",
                required: [ "DBClusterEndpointIdentifier" ],
                members: {
                    DBClusterEndpointIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBClusterEndpointResult",
                type: "structure",
                members: {
                    DBClusterEndpointIdentifier: {},
                    DBClusterIdentifier: {},
                    DBClusterEndpointResourceIdentifier: {},
                    Endpoint: {},
                    Status: {},
                    EndpointType: {},
                    CustomEndpointType: {},
                    StaticMembers: {
                        shape: "S1a"
                    },
                    ExcludedMembers: {
                        shape: "S1a"
                    },
                    DBClusterEndpointArn: {}
                }
            }
        },
        DeleteDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {}
                }
            }
        },
        DeleteDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "So"
                    }
                }
            }
        },
        DeleteDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    SkipFinalSnapshot: {
                        type: "boolean"
                    },
                    FinalDBSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1j"
                    }
                }
            }
        },
        DeleteDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName" ],
                members: {
                    DBParameterGroupName: {}
                }
            }
        },
        DeleteDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName" ],
                members: {
                    DBSubnetGroupName: {}
                }
            }
        },
        DeleteEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {}
                }
            },
            output: {
                resultWrapper: "DeleteEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S5"
                    }
                }
            }
        },
        DescribeDBClusterEndpoints: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    DBClusterEndpointIdentifier: {},
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterEndpointsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterEndpoints: {
                        type: "list",
                        member: {
                            locationName: "DBClusterEndpointList",
                            type: "structure",
                            members: {
                                DBClusterEndpointIdentifier: {},
                                DBClusterIdentifier: {},
                                DBClusterEndpointResourceIdentifier: {},
                                Endpoint: {},
                                Status: {},
                                EndpointType: {},
                                CustomEndpointType: {},
                                StaticMembers: {
                                    shape: "S1a"
                                },
                                ExcludedMembers: {
                                    shape: "S1a"
                                },
                                DBClusterEndpointArn: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeDBClusterParameterGroups: {
            input: {
                type: "structure",
                members: {
                    DBClusterParameterGroupName: {},
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterParameterGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterParameterGroups: {
                        type: "list",
                        member: {
                            shape: "Sk",
                            locationName: "DBClusterParameterGroup"
                        }
                    }
                }
            }
        },
        DescribeDBClusterParameters: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {},
                    Source: {},
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterParametersResult",
                type: "structure",
                members: {
                    Parameters: {
                        shape: "S2z"
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBClusterSnapshotAttributes: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterSnapshotAttributesResult",
                type: "structure",
                members: {
                    DBClusterSnapshotAttributesResult: {
                        shape: "S34"
                    }
                }
            }
        },
        DescribeDBClusterSnapshots: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    DBClusterSnapshotIdentifier: {},
                    SnapshotType: {},
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    IncludeShared: {
                        type: "boolean"
                    },
                    IncludePublic: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterSnapshotsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterSnapshots: {
                        type: "list",
                        member: {
                            shape: "So",
                            locationName: "DBClusterSnapshot"
                        }
                    }
                }
            }
        },
        DescribeDBClusters: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClustersResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusters: {
                        type: "list",
                        member: {
                            shape: "Sz",
                            locationName: "DBCluster"
                        }
                    }
                }
            }
        },
        DescribeDBEngineVersions: {
            input: {
                type: "structure",
                members: {
                    Engine: {},
                    EngineVersion: {},
                    DBParameterGroupFamily: {},
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    DefaultOnly: {
                        type: "boolean"
                    },
                    ListSupportedCharacterSets: {
                        type: "boolean"
                    },
                    ListSupportedTimezones: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBEngineVersionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBEngineVersions: {
                        type: "list",
                        member: {
                            locationName: "DBEngineVersion",
                            type: "structure",
                            members: {
                                Engine: {},
                                EngineVersion: {},
                                DBParameterGroupFamily: {},
                                DBEngineDescription: {},
                                DBEngineVersionDescription: {},
                                DefaultCharacterSet: {
                                    shape: "S3i"
                                },
                                SupportedCharacterSets: {
                                    type: "list",
                                    member: {
                                        shape: "S3i",
                                        locationName: "CharacterSet"
                                    }
                                },
                                ValidUpgradeTarget: {
                                    type: "list",
                                    member: {
                                        locationName: "UpgradeTarget",
                                        type: "structure",
                                        members: {
                                            Engine: {},
                                            EngineVersion: {},
                                            Description: {},
                                            AutoUpgrade: {
                                                type: "boolean"
                                            },
                                            IsMajorVersionUpgrade: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                SupportedTimezones: {
                                    type: "list",
                                    member: {
                                        locationName: "Timezone",
                                        type: "structure",
                                        members: {
                                            TimezoneName: {}
                                        }
                                    }
                                },
                                ExportableLogTypes: {
                                    shape: "Sx"
                                },
                                SupportsLogExportsToCloudwatchLogs: {
                                    type: "boolean"
                                },
                                SupportsReadReplica: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeDBInstances: {
            input: {
                type: "structure",
                members: {
                    DBInstanceIdentifier: {},
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBInstancesResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBInstances: {
                        type: "list",
                        member: {
                            shape: "S1j",
                            locationName: "DBInstance"
                        }
                    }
                }
            }
        },
        DescribeDBParameterGroups: {
            input: {
                type: "structure",
                members: {
                    DBParameterGroupName: {},
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBParameterGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBParameterGroups: {
                        type: "list",
                        member: {
                            shape: "St",
                            locationName: "DBParameterGroup"
                        }
                    }
                }
            }
        },
        DescribeDBParameters: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName" ],
                members: {
                    DBParameterGroupName: {},
                    Source: {},
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBParametersResult",
                type: "structure",
                members: {
                    Parameters: {
                        shape: "S2z"
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBSubnetGroups: {
            input: {
                type: "structure",
                members: {
                    DBSubnetGroupName: {},
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBSubnetGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBSubnetGroups: {
                        type: "list",
                        member: {
                            shape: "S1p",
                            locationName: "DBSubnetGroup"
                        }
                    }
                }
            }
        },
        DescribeEngineDefaultClusterParameters: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupFamily" ],
                members: {
                    DBParameterGroupFamily: {},
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEngineDefaultClusterParametersResult",
                type: "structure",
                members: {
                    EngineDefaults: {
                        shape: "S41"
                    }
                }
            }
        },
        DescribeEngineDefaultParameters: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupFamily" ],
                members: {
                    DBParameterGroupFamily: {},
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEngineDefaultParametersResult",
                type: "structure",
                members: {
                    EngineDefaults: {
                        shape: "S41"
                    }
                }
            }
        },
        DescribeEventCategories: {
            input: {
                type: "structure",
                members: {
                    SourceType: {},
                    Filters: {
                        shape: "S2o"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeEventCategoriesResult",
                type: "structure",
                members: {
                    EventCategoriesMapList: {
                        type: "list",
                        member: {
                            locationName: "EventCategoriesMap",
                            type: "structure",
                            members: {
                                SourceType: {},
                                EventCategories: {
                                    shape: "S7"
                                }
                            },
                            wrapper: true
                        }
                    }
                }
            }
        },
        DescribeEventSubscriptions: {
            input: {
                type: "structure",
                members: {
                    SubscriptionName: {},
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventSubscriptionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    EventSubscriptionsList: {
                        type: "list",
                        member: {
                            shape: "S5",
                            locationName: "EventSubscription"
                        }
                    }
                }
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    SourceIdentifier: {},
                    SourceType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "integer"
                    },
                    EventCategories: {
                        shape: "S7"
                    },
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventsResult",
                type: "structure",
                members: {
                    Marker: {},
                    Events: {
                        type: "list",
                        member: {
                            locationName: "Event",
                            type: "structure",
                            members: {
                                SourceIdentifier: {},
                                SourceType: {},
                                Message: {},
                                EventCategories: {
                                    shape: "S7"
                                },
                                Date: {
                                    type: "timestamp"
                                },
                                SourceArn: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeOrderableDBInstanceOptions: {
            input: {
                type: "structure",
                required: [ "Engine" ],
                members: {
                    Engine: {},
                    EngineVersion: {},
                    DBInstanceClass: {},
                    LicenseModel: {},
                    Vpc: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S2o"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeOrderableDBInstanceOptionsResult",
                type: "structure",
                members: {
                    OrderableDBInstanceOptions: {
                        type: "list",
                        member: {
                            locationName: "OrderableDBInstanceOption",
                            type: "structure",
                            members: {
                                Engine: {},
                                EngineVersion: {},
                                DBInstanceClass: {},
                                LicenseModel: {},
                                AvailabilityZones: {
                                    type: "list",
                                    member: {
                                        shape: "S1s",
                                        locationName: "AvailabilityZone"
                                    }
                                },
                                MultiAZCapable: {
                                    type: "boolean"
                                },
                                ReadReplicaCapable: {
                                    type: "boolean"
                                },
                                Vpc: {
                                    type: "boolean"
                                },
                                SupportsStorageEncryption: {
                                    type: "boolean"
                                },
                                StorageType: {},
                                SupportsIops: {
                                    type: "boolean"
                                },
                                SupportsEnhancedMonitoring: {
                                    type: "boolean"
                                },
                                SupportsIAMDatabaseAuthentication: {
                                    type: "boolean"
                                },
                                SupportsPerformanceInsights: {
                                    type: "boolean"
                                },
                                MinStorageSize: {
                                    type: "integer"
                                },
                                MaxStorageSize: {
                                    type: "integer"
                                },
                                MinIopsPerDbInstance: {
                                    type: "integer"
                                },
                                MaxIopsPerDbInstance: {
                                    type: "integer"
                                },
                                MinIopsPerGib: {
                                    type: "double"
                                },
                                MaxIopsPerGib: {
                                    type: "double"
                                }
                            },
                            wrapper: true
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribePendingMaintenanceActions: {
            input: {
                type: "structure",
                members: {
                    ResourceIdentifier: {},
                    Filters: {
                        shape: "S2o"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribePendingMaintenanceActionsResult",
                type: "structure",
                members: {
                    PendingMaintenanceActions: {
                        type: "list",
                        member: {
                            shape: "Se",
                            locationName: "ResourcePendingMaintenanceActions"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeValidDBInstanceModifications: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DescribeValidDBInstanceModificationsResult",
                type: "structure",
                members: {
                    ValidDBInstanceModificationsMessage: {
                        type: "structure",
                        members: {
                            Storage: {
                                type: "list",
                                member: {
                                    locationName: "ValidStorageOptions",
                                    type: "structure",
                                    members: {
                                        StorageType: {},
                                        StorageSize: {
                                            shape: "S4u"
                                        },
                                        ProvisionedIops: {
                                            shape: "S4u"
                                        },
                                        IopsToStorageRatio: {
                                            type: "list",
                                            member: {
                                                locationName: "DoubleRange",
                                                type: "structure",
                                                members: {
                                                    From: {
                                                        type: "double"
                                                    },
                                                    To: {
                                                        type: "double"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        wrapper: true
                    }
                }
            }
        },
        FailoverDBCluster: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    TargetDBInstanceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "FailoverDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sz"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceName" ],
                members: {
                    ResourceName: {},
                    Filters: {
                        shape: "S2o"
                    }
                }
            },
            output: {
                resultWrapper: "ListTagsForResourceResult",
                type: "structure",
                members: {
                    TagList: {
                        shape: "Sa"
                    }
                }
            }
        },
        ModifyDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    NewDBClusterIdentifier: {},
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    DBClusterParameterGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Sw"
                    },
                    Port: {
                        type: "integer"
                    },
                    MasterUserPassword: {},
                    OptionGroupName: {},
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    CloudwatchLogsExportConfiguration: {
                        shape: "S54"
                    },
                    EngineVersion: {},
                    DeletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sz"
                    }
                }
            }
        },
        ModifyDBClusterEndpoint: {
            input: {
                type: "structure",
                required: [ "DBClusterEndpointIdentifier" ],
                members: {
                    DBClusterEndpointIdentifier: {},
                    EndpointType: {},
                    StaticMembers: {
                        shape: "S1a"
                    },
                    ExcludedMembers: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBClusterEndpointResult",
                type: "structure",
                members: {
                    DBClusterEndpointIdentifier: {},
                    DBClusterIdentifier: {},
                    DBClusterEndpointResourceIdentifier: {},
                    Endpoint: {},
                    Status: {},
                    EndpointType: {},
                    CustomEndpointType: {},
                    StaticMembers: {
                        shape: "S1a"
                    },
                    ExcludedMembers: {
                        shape: "S1a"
                    },
                    DBClusterEndpointArn: {}
                }
            }
        },
        ModifyDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName", "Parameters" ],
                members: {
                    DBClusterParameterGroupName: {},
                    Parameters: {
                        shape: "S2z"
                    }
                }
            },
            output: {
                shape: "S59",
                resultWrapper: "ModifyDBClusterParameterGroupResult"
            }
        },
        ModifyDBClusterSnapshotAttribute: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier", "AttributeName" ],
                members: {
                    DBClusterSnapshotIdentifier: {},
                    AttributeName: {},
                    ValuesToAdd: {
                        shape: "S37"
                    },
                    ValuesToRemove: {
                        shape: "S37"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBClusterSnapshotAttributeResult",
                type: "structure",
                members: {
                    DBClusterSnapshotAttributesResult: {
                        shape: "S34"
                    }
                }
            }
        },
        ModifyDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    AllocatedStorage: {
                        type: "integer"
                    },
                    DBInstanceClass: {},
                    DBSubnetGroupName: {},
                    DBSecurityGroups: {
                        shape: "S1h"
                    },
                    VpcSecurityGroupIds: {
                        shape: "Sw"
                    },
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    MasterUserPassword: {},
                    DBParameterGroupName: {},
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    MultiAZ: {
                        type: "boolean"
                    },
                    EngineVersion: {},
                    AllowMajorVersionUpgrade: {
                        type: "boolean"
                    },
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    LicenseModel: {},
                    Iops: {
                        type: "integer"
                    },
                    OptionGroupName: {},
                    NewDBInstanceIdentifier: {},
                    StorageType: {},
                    TdeCredentialArn: {},
                    TdeCredentialPassword: {},
                    CACertificateIdentifier: {},
                    Domain: {},
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    MonitoringInterval: {
                        type: "integer"
                    },
                    DBPortNumber: {
                        type: "integer"
                    },
                    PubliclyAccessible: {
                        deprecated: true,
                        type: "boolean"
                    },
                    MonitoringRoleArn: {},
                    DomainIAMRoleName: {},
                    PromotionTier: {
                        type: "integer"
                    },
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnablePerformanceInsights: {
                        type: "boolean"
                    },
                    PerformanceInsightsKMSKeyId: {},
                    CloudwatchLogsExportConfiguration: {
                        shape: "S54"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1j"
                    }
                }
            }
        },
        ModifyDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName", "Parameters" ],
                members: {
                    DBParameterGroupName: {},
                    Parameters: {
                        shape: "S2z"
                    }
                }
            },
            output: {
                shape: "S5f",
                resultWrapper: "ModifyDBParameterGroupResult"
            }
        },
        ModifyDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName", "SubnetIds" ],
                members: {
                    DBSubnetGroupName: {},
                    DBSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S26"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBSubnetGroupResult",
                type: "structure",
                members: {
                    DBSubnetGroup: {
                        shape: "S1p"
                    }
                }
            }
        },
        ModifyEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    EventCategories: {
                        shape: "S7"
                    },
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S5"
                    }
                }
            }
        },
        PromoteReadReplicaDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "PromoteReadReplicaDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sz"
                    }
                }
            }
        },
        RebootDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    ForceFailover: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RebootDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1j"
                    }
                }
            }
        },
        RemoveRoleFromDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "RoleArn" ],
                members: {
                    DBClusterIdentifier: {},
                    RoleArn: {},
                    FeatureName: {}
                }
            }
        },
        RemoveSourceIdentifierFromSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SourceIdentifier" ],
                members: {
                    SubscriptionName: {},
                    SourceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "RemoveSourceIdentifierFromSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S5"
                    }
                }
            }
        },
        RemoveTagsFromResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "TagKeys" ],
                members: {
                    ResourceName: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ResetDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {},
                    ResetAllParameters: {
                        type: "boolean"
                    },
                    Parameters: {
                        shape: "S2z"
                    }
                }
            },
            output: {
                shape: "S59",
                resultWrapper: "ResetDBClusterParameterGroupResult"
            }
        },
        ResetDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName" ],
                members: {
                    DBParameterGroupName: {},
                    ResetAllParameters: {
                        type: "boolean"
                    },
                    Parameters: {
                        shape: "S2z"
                    }
                }
            },
            output: {
                shape: "S5f",
                resultWrapper: "ResetDBParameterGroupResult"
            }
        },
        RestoreDBClusterFromSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "SnapshotIdentifier", "Engine" ],
                members: {
                    AvailabilityZones: {
                        shape: "Sp"
                    },
                    DBClusterIdentifier: {},
                    SnapshotIdentifier: {},
                    Engine: {},
                    EngineVersion: {},
                    Port: {
                        type: "integer"
                    },
                    DBSubnetGroupName: {},
                    DatabaseName: {},
                    OptionGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Sw"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    KmsKeyId: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "Sx"
                    },
                    DBClusterParameterGroupName: {},
                    DeletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RestoreDBClusterFromSnapshotResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sz"
                    }
                }
            }
        },
        RestoreDBClusterToPointInTime: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "SourceDBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    RestoreType: {},
                    SourceDBClusterIdentifier: {},
                    RestoreToTime: {
                        type: "timestamp"
                    },
                    UseLatestRestorableTime: {
                        type: "boolean"
                    },
                    Port: {
                        type: "integer"
                    },
                    DBSubnetGroupName: {},
                    OptionGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Sw"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    KmsKeyId: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "Sx"
                    },
                    DBClusterParameterGroupName: {},
                    DeletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RestoreDBClusterToPointInTimeResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sz"
                    }
                }
            }
        },
        StartDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "StartDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sz"
                    }
                }
            }
        },
        StopDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "StopDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "Sz"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                CustomerAwsId: {},
                CustSubscriptionId: {},
                SnsTopicArn: {},
                Status: {},
                SubscriptionCreationTime: {},
                SourceType: {},
                SourceIdsList: {
                    shape: "S6"
                },
                EventCategoriesList: {
                    shape: "S7"
                },
                Enabled: {
                    type: "boolean"
                },
                EventSubscriptionArn: {}
            },
            wrapper: true
        },
        S6: {
            type: "list",
            member: {
                locationName: "SourceId"
            }
        },
        S7: {
            type: "list",
            member: {
                locationName: "EventCategory"
            }
        },
        Sa: {
            type: "list",
            member: {
                locationName: "Tag",
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Se: {
            type: "structure",
            members: {
                ResourceIdentifier: {},
                PendingMaintenanceActionDetails: {
                    type: "list",
                    member: {
                        locationName: "PendingMaintenanceAction",
                        type: "structure",
                        members: {
                            Action: {},
                            AutoAppliedAfterDate: {
                                type: "timestamp"
                            },
                            ForcedApplyDate: {
                                type: "timestamp"
                            },
                            OptInStatus: {},
                            CurrentApplyDate: {
                                type: "timestamp"
                            },
                            Description: {}
                        }
                    }
                }
            },
            wrapper: true
        },
        Sk: {
            type: "structure",
            members: {
                DBClusterParameterGroupName: {},
                DBParameterGroupFamily: {},
                Description: {},
                DBClusterParameterGroupArn: {}
            },
            wrapper: true
        },
        So: {
            type: "structure",
            members: {
                AvailabilityZones: {
                    shape: "Sp"
                },
                DBClusterSnapshotIdentifier: {},
                DBClusterIdentifier: {},
                SnapshotCreateTime: {
                    type: "timestamp"
                },
                Engine: {},
                AllocatedStorage: {
                    type: "integer"
                },
                Status: {},
                Port: {
                    type: "integer"
                },
                VpcId: {},
                ClusterCreateTime: {
                    type: "timestamp"
                },
                MasterUsername: {},
                EngineVersion: {},
                LicenseModel: {},
                SnapshotType: {},
                PercentProgress: {
                    type: "integer"
                },
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DBClusterSnapshotArn: {},
                SourceDBClusterSnapshotArn: {},
                IAMDatabaseAuthenticationEnabled: {
                    type: "boolean"
                }
            },
            wrapper: true
        },
        Sp: {
            type: "list",
            member: {
                locationName: "AvailabilityZone"
            }
        },
        St: {
            type: "structure",
            members: {
                DBParameterGroupName: {},
                DBParameterGroupFamily: {},
                Description: {},
                DBParameterGroupArn: {}
            },
            wrapper: true
        },
        Sw: {
            type: "list",
            member: {
                locationName: "VpcSecurityGroupId"
            }
        },
        Sx: {
            type: "list",
            member: {}
        },
        Sz: {
            type: "structure",
            members: {
                AllocatedStorage: {
                    type: "integer"
                },
                AvailabilityZones: {
                    shape: "Sp"
                },
                BackupRetentionPeriod: {
                    type: "integer"
                },
                CharacterSetName: {},
                DatabaseName: {},
                DBClusterIdentifier: {},
                DBClusterParameterGroup: {},
                DBSubnetGroup: {},
                Status: {},
                PercentProgress: {},
                EarliestRestorableTime: {
                    type: "timestamp"
                },
                Endpoint: {},
                ReaderEndpoint: {},
                MultiAZ: {
                    type: "boolean"
                },
                Engine: {},
                EngineVersion: {},
                LatestRestorableTime: {
                    type: "timestamp"
                },
                Port: {
                    type: "integer"
                },
                MasterUsername: {},
                DBClusterOptionGroupMemberships: {
                    type: "list",
                    member: {
                        locationName: "DBClusterOptionGroup",
                        type: "structure",
                        members: {
                            DBClusterOptionGroupName: {},
                            Status: {}
                        }
                    }
                },
                PreferredBackupWindow: {},
                PreferredMaintenanceWindow: {},
                ReplicationSourceIdentifier: {},
                ReadReplicaIdentifiers: {
                    type: "list",
                    member: {
                        locationName: "ReadReplicaIdentifier"
                    }
                },
                DBClusterMembers: {
                    type: "list",
                    member: {
                        locationName: "DBClusterMember",
                        type: "structure",
                        members: {
                            DBInstanceIdentifier: {},
                            IsClusterWriter: {
                                type: "boolean"
                            },
                            DBClusterParameterGroupStatus: {},
                            PromotionTier: {
                                type: "integer"
                            }
                        },
                        wrapper: true
                    }
                },
                VpcSecurityGroups: {
                    shape: "S15"
                },
                HostedZoneId: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DbClusterResourceId: {},
                DBClusterArn: {},
                AssociatedRoles: {
                    type: "list",
                    member: {
                        locationName: "DBClusterRole",
                        type: "structure",
                        members: {
                            RoleArn: {},
                            Status: {},
                            FeatureName: {}
                        }
                    }
                },
                IAMDatabaseAuthenticationEnabled: {
                    type: "boolean"
                },
                CloneGroupId: {},
                ClusterCreateTime: {
                    type: "timestamp"
                },
                EnabledCloudwatchLogsExports: {
                    shape: "Sx"
                },
                DeletionProtection: {
                    type: "boolean"
                }
            },
            wrapper: true
        },
        S15: {
            type: "list",
            member: {
                locationName: "VpcSecurityGroupMembership",
                type: "structure",
                members: {
                    VpcSecurityGroupId: {},
                    Status: {}
                }
            }
        },
        S1a: {
            type: "list",
            member: {}
        },
        S1h: {
            type: "list",
            member: {
                locationName: "DBSecurityGroupName"
            }
        },
        S1j: {
            type: "structure",
            members: {
                DBInstanceIdentifier: {},
                DBInstanceClass: {},
                Engine: {},
                DBInstanceStatus: {},
                MasterUsername: {},
                DBName: {},
                Endpoint: {
                    type: "structure",
                    members: {
                        Address: {},
                        Port: {
                            type: "integer"
                        },
                        HostedZoneId: {}
                    }
                },
                AllocatedStorage: {
                    type: "integer"
                },
                InstanceCreateTime: {
                    type: "timestamp"
                },
                PreferredBackupWindow: {},
                BackupRetentionPeriod: {
                    type: "integer"
                },
                DBSecurityGroups: {
                    type: "list",
                    member: {
                        locationName: "DBSecurityGroup",
                        type: "structure",
                        members: {
                            DBSecurityGroupName: {},
                            Status: {}
                        }
                    }
                },
                VpcSecurityGroups: {
                    shape: "S15"
                },
                DBParameterGroups: {
                    type: "list",
                    member: {
                        locationName: "DBParameterGroup",
                        type: "structure",
                        members: {
                            DBParameterGroupName: {},
                            ParameterApplyStatus: {}
                        }
                    }
                },
                AvailabilityZone: {},
                DBSubnetGroup: {
                    shape: "S1p"
                },
                PreferredMaintenanceWindow: {},
                PendingModifiedValues: {
                    type: "structure",
                    members: {
                        DBInstanceClass: {},
                        AllocatedStorage: {
                            type: "integer"
                        },
                        MasterUserPassword: {},
                        Port: {
                            type: "integer"
                        },
                        BackupRetentionPeriod: {
                            type: "integer"
                        },
                        MultiAZ: {
                            type: "boolean"
                        },
                        EngineVersion: {},
                        LicenseModel: {},
                        Iops: {
                            type: "integer"
                        },
                        DBInstanceIdentifier: {},
                        StorageType: {},
                        CACertificateIdentifier: {},
                        DBSubnetGroupName: {},
                        PendingCloudwatchLogsExports: {
                            type: "structure",
                            members: {
                                LogTypesToEnable: {
                                    shape: "Sx"
                                },
                                LogTypesToDisable: {
                                    shape: "Sx"
                                }
                            }
                        }
                    }
                },
                LatestRestorableTime: {
                    type: "timestamp"
                },
                MultiAZ: {
                    type: "boolean"
                },
                EngineVersion: {},
                AutoMinorVersionUpgrade: {
                    type: "boolean"
                },
                ReadReplicaSourceDBInstanceIdentifier: {},
                ReadReplicaDBInstanceIdentifiers: {
                    type: "list",
                    member: {
                        locationName: "ReadReplicaDBInstanceIdentifier"
                    }
                },
                ReadReplicaDBClusterIdentifiers: {
                    type: "list",
                    member: {
                        locationName: "ReadReplicaDBClusterIdentifier"
                    }
                },
                LicenseModel: {},
                Iops: {
                    type: "integer"
                },
                OptionGroupMemberships: {
                    type: "list",
                    member: {
                        locationName: "OptionGroupMembership",
                        type: "structure",
                        members: {
                            OptionGroupName: {},
                            Status: {}
                        }
                    }
                },
                CharacterSetName: {},
                SecondaryAvailabilityZone: {},
                PubliclyAccessible: {
                    deprecated: true,
                    type: "boolean"
                },
                StatusInfos: {
                    type: "list",
                    member: {
                        locationName: "DBInstanceStatusInfo",
                        type: "structure",
                        members: {
                            StatusType: {},
                            Normal: {
                                type: "boolean"
                            },
                            Status: {},
                            Message: {}
                        }
                    }
                },
                StorageType: {},
                TdeCredentialArn: {},
                DbInstancePort: {
                    type: "integer"
                },
                DBClusterIdentifier: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DbiResourceId: {},
                CACertificateIdentifier: {},
                DomainMemberships: {
                    type: "list",
                    member: {
                        locationName: "DomainMembership",
                        type: "structure",
                        members: {
                            Domain: {},
                            Status: {},
                            FQDN: {},
                            IAMRoleName: {}
                        }
                    }
                },
                CopyTagsToSnapshot: {
                    type: "boolean"
                },
                MonitoringInterval: {
                    type: "integer"
                },
                EnhancedMonitoringResourceArn: {},
                MonitoringRoleArn: {},
                PromotionTier: {
                    type: "integer"
                },
                DBInstanceArn: {},
                Timezone: {},
                IAMDatabaseAuthenticationEnabled: {
                    type: "boolean"
                },
                PerformanceInsightsEnabled: {
                    type: "boolean"
                },
                PerformanceInsightsKMSKeyId: {},
                EnabledCloudwatchLogsExports: {
                    shape: "Sx"
                },
                DeletionProtection: {
                    type: "boolean"
                }
            },
            wrapper: true
        },
        S1p: {
            type: "structure",
            members: {
                DBSubnetGroupName: {},
                DBSubnetGroupDescription: {},
                VpcId: {},
                SubnetGroupStatus: {},
                Subnets: {
                    type: "list",
                    member: {
                        locationName: "Subnet",
                        type: "structure",
                        members: {
                            SubnetIdentifier: {},
                            SubnetAvailabilityZone: {
                                shape: "S1s"
                            },
                            SubnetStatus: {}
                        }
                    }
                },
                DBSubnetGroupArn: {}
            },
            wrapper: true
        },
        S1s: {
            type: "structure",
            members: {
                Name: {}
            },
            wrapper: true
        },
        S26: {
            type: "list",
            member: {
                locationName: "SubnetIdentifier"
            }
        },
        S2o: {
            type: "list",
            member: {
                locationName: "Filter",
                type: "structure",
                required: [ "Name", "Values" ],
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {
                            locationName: "Value"
                        }
                    }
                }
            }
        },
        S2z: {
            type: "list",
            member: {
                locationName: "Parameter",
                type: "structure",
                members: {
                    ParameterName: {},
                    ParameterValue: {},
                    Description: {},
                    Source: {},
                    ApplyType: {},
                    DataType: {},
                    AllowedValues: {},
                    IsModifiable: {
                        type: "boolean"
                    },
                    MinimumEngineVersion: {},
                    ApplyMethod: {}
                }
            }
        },
        S34: {
            type: "structure",
            members: {
                DBClusterSnapshotIdentifier: {},
                DBClusterSnapshotAttributes: {
                    type: "list",
                    member: {
                        locationName: "DBClusterSnapshotAttribute",
                        type: "structure",
                        members: {
                            AttributeName: {},
                            AttributeValues: {
                                shape: "S37"
                            }
                        }
                    }
                }
            },
            wrapper: true
        },
        S37: {
            type: "list",
            member: {
                locationName: "AttributeValue"
            }
        },
        S3i: {
            type: "structure",
            members: {
                CharacterSetName: {},
                CharacterSetDescription: {}
            }
        },
        S41: {
            type: "structure",
            members: {
                DBParameterGroupFamily: {},
                Marker: {},
                Parameters: {
                    shape: "S2z"
                }
            },
            wrapper: true
        },
        S4u: {
            type: "list",
            member: {
                locationName: "Range",
                type: "structure",
                members: {
                    From: {
                        type: "integer"
                    },
                    To: {
                        type: "integer"
                    },
                    Step: {
                        type: "integer"
                    }
                }
            }
        },
        S54: {
            type: "structure",
            members: {
                EnableLogTypes: {
                    shape: "Sx"
                },
                DisableLogTypes: {
                    shape: "Sx"
                }
            }
        },
        S59: {
            type: "structure",
            members: {
                DBClusterParameterGroupName: {}
            }
        },
        S5f: {
            type: "structure",
            members: {
                DBParameterGroupName: {}
            }
        }
    },
    paginators: {
        DescribeDBClusterEndpoints: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusterEndpoints"
        },
        DescribeDBEngineVersions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBEngineVersions"
        },
        DescribeDBInstances: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBInstances"
        },
        DescribeDBParameterGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBParameterGroups"
        },
        DescribeDBParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Parameters"
        },
        DescribeDBSubnetGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBSubnetGroups"
        },
        DescribeEngineDefaultParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "EngineDefaults.Marker",
            result_key: "EngineDefaults.Parameters"
        },
        DescribeEventSubscriptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "EventSubscriptionsList"
        },
        DescribeEvents: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Events"
        },
        DescribeOrderableDBInstanceOptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "OrderableDBInstanceOptions"
        },
        ListTagsForResource: {
            result_key: "TagList"
        }
    },
    waiters: {
        DBInstanceAvailable: {
            delay: 30,
            operation: "DescribeDBInstances",
            maxAttempts: 60,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "deleting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "failed",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "incompatible-restore",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "incompatible-parameters",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            } ]
        },
        DBInstanceDeleted: {
            delay: 30,
            operation: "DescribeDBInstances",
            maxAttempts: 60,
            acceptors: [ {
                expected: "deleted",
                matcher: "pathAll",
                state: "success",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "DBInstanceNotFound",
                matcher: "error",
                state: "success"
            }, {
                expected: "creating",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "modifying",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "rebooting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "resetting-master-credentials",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            } ]
        }
    }
};

AWS.apiLoader.services["mediatailor"] = {};

AWS.MediaTailor = AWS.Service.defineService("mediatailor", [ "2018-04-23" ]);

AWS.apiLoader.services["mediatailor"]["2018-04-23"] = {
    metadata: {
        apiVersion: "2018-04-23",
        endpointPrefix: "api.mediatailor",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "MediaTailor",
        serviceFullName: "AWS MediaTailor",
        serviceId: "MediaTailor",
        signatureVersion: "v4",
        signingName: "mediatailor",
        uid: "mediatailor-2018-04-23"
    },
    operations: {
        CreateChannel: {
            http: {
                requestUri: "/channel/{channelName}",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "channelName"
                    },
                    Outputs: {
                        shape: "S3"
                    },
                    PlaybackMode: {},
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                required: [ "ChannelName", "Outputs", "PlaybackMode" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {},
                    ChannelName: {},
                    ChannelState: {},
                    CreationTime: {
                        shape: "Sc"
                    },
                    LastModifiedTime: {
                        shape: "Sc"
                    },
                    Outputs: {
                        shape: "Sd"
                    },
                    PlaybackMode: {},
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                type: "structure"
            }
        },
        CreateProgram: {
            http: {
                requestUri: "/channel/{channelName}/program/{programName}",
                responseCode: 200
            },
            input: {
                members: {
                    AdBreaks: {
                        shape: "Sg"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "channelName"
                    },
                    ProgramName: {
                        location: "uri",
                        locationName: "programName"
                    },
                    ScheduleConfiguration: {
                        members: {
                            Transition: {
                                members: {
                                    RelativePosition: {},
                                    RelativeProgram: {},
                                    Type: {}
                                },
                                required: [ "Type", "RelativePosition" ],
                                type: "structure"
                            }
                        },
                        required: [ "Transition" ],
                        type: "structure"
                    },
                    SourceLocationName: {},
                    VodSourceName: {}
                },
                required: [ "ChannelName", "ProgramName", "VodSourceName", "ScheduleConfiguration", "SourceLocationName" ],
                type: "structure"
            },
            output: {
                members: {
                    AdBreaks: {
                        shape: "Sg"
                    },
                    Arn: {},
                    ChannelName: {},
                    CreationTime: {
                        shape: "Sc"
                    },
                    ProgramName: {},
                    SourceLocationName: {},
                    VodSourceName: {}
                },
                type: "structure"
            }
        },
        CreateSourceLocation: {
            http: {
                requestUri: "/sourceLocation/{sourceLocationName}",
                responseCode: 200
            },
            input: {
                members: {
                    AccessConfiguration: {
                        shape: "Sr"
                    },
                    DefaultSegmentDeliveryConfiguration: {
                        shape: "St"
                    },
                    HttpConfiguration: {
                        shape: "Su"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "sourceLocationName"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                required: [ "SourceLocationName", "HttpConfiguration" ],
                type: "structure"
            },
            output: {
                members: {
                    AccessConfiguration: {
                        shape: "Sr"
                    },
                    Arn: {},
                    CreationTime: {
                        shape: "Sc"
                    },
                    DefaultSegmentDeliveryConfiguration: {
                        shape: "St"
                    },
                    HttpConfiguration: {
                        shape: "Su"
                    },
                    LastModifiedTime: {
                        shape: "Sc"
                    },
                    SourceLocationName: {},
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                type: "structure"
            }
        },
        CreateVodSource: {
            http: {
                requestUri: "/sourceLocation/{sourceLocationName}/vodSource/{vodSourceName}",
                responseCode: 200
            },
            input: {
                members: {
                    HttpPackageConfigurations: {
                        shape: "Sx"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "sourceLocationName"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    },
                    VodSourceName: {
                        location: "uri",
                        locationName: "vodSourceName"
                    }
                },
                required: [ "SourceLocationName", "VodSourceName", "HttpPackageConfigurations" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sc"
                    },
                    HttpPackageConfigurations: {
                        shape: "Sx"
                    },
                    LastModifiedTime: {
                        shape: "Sc"
                    },
                    SourceLocationName: {},
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    },
                    VodSourceName: {}
                },
                type: "structure"
            }
        },
        DeleteChannel: {
            http: {
                method: "DELETE",
                requestUri: "/channel/{channelName}",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "channelName"
                    }
                },
                required: [ "ChannelName" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DeleteChannelPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/channel/{channelName}/policy",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "channelName"
                    }
                },
                required: [ "ChannelName" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DeletePlaybackConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/playbackConfiguration/{Name}",
                responseCode: 204
            },
            input: {
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                },
                required: [ "Name" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DeleteProgram: {
            http: {
                method: "DELETE",
                requestUri: "/channel/{channelName}/program/{programName}",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "channelName"
                    },
                    ProgramName: {
                        location: "uri",
                        locationName: "programName"
                    }
                },
                required: [ "ChannelName", "ProgramName" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DeleteSourceLocation: {
            http: {
                method: "DELETE",
                requestUri: "/sourceLocation/{sourceLocationName}",
                responseCode: 200
            },
            input: {
                members: {
                    SourceLocationName: {
                        location: "uri",
                        locationName: "sourceLocationName"
                    }
                },
                required: [ "SourceLocationName" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DeleteVodSource: {
            http: {
                method: "DELETE",
                requestUri: "/sourceLocation/{sourceLocationName}/vodSource/{vodSourceName}",
                responseCode: 200
            },
            input: {
                members: {
                    SourceLocationName: {
                        location: "uri",
                        locationName: "sourceLocationName"
                    },
                    VodSourceName: {
                        location: "uri",
                        locationName: "vodSourceName"
                    }
                },
                required: [ "SourceLocationName", "VodSourceName" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DescribeChannel: {
            http: {
                method: "GET",
                requestUri: "/channel/{channelName}",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "channelName"
                    }
                },
                required: [ "ChannelName" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {},
                    ChannelName: {},
                    ChannelState: {},
                    CreationTime: {
                        shape: "Sc"
                    },
                    LastModifiedTime: {
                        shape: "Sc"
                    },
                    Outputs: {
                        shape: "Sd"
                    },
                    PlaybackMode: {},
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                type: "structure"
            }
        },
        DescribeProgram: {
            http: {
                method: "GET",
                requestUri: "/channel/{channelName}/program/{programName}",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "channelName"
                    },
                    ProgramName: {
                        location: "uri",
                        locationName: "programName"
                    }
                },
                required: [ "ChannelName", "ProgramName" ],
                type: "structure"
            },
            output: {
                members: {
                    AdBreaks: {
                        shape: "Sg"
                    },
                    Arn: {},
                    ChannelName: {},
                    CreationTime: {
                        shape: "Sc"
                    },
                    ProgramName: {},
                    SourceLocationName: {},
                    VodSourceName: {}
                },
                type: "structure"
            }
        },
        DescribeSourceLocation: {
            http: {
                method: "GET",
                requestUri: "/sourceLocation/{sourceLocationName}",
                responseCode: 200
            },
            input: {
                members: {
                    SourceLocationName: {
                        location: "uri",
                        locationName: "sourceLocationName"
                    }
                },
                required: [ "SourceLocationName" ],
                type: "structure"
            },
            output: {
                members: {
                    AccessConfiguration: {
                        shape: "Sr"
                    },
                    Arn: {},
                    CreationTime: {
                        shape: "Sc"
                    },
                    DefaultSegmentDeliveryConfiguration: {
                        shape: "St"
                    },
                    HttpConfiguration: {
                        shape: "Su"
                    },
                    LastModifiedTime: {
                        shape: "Sc"
                    },
                    SourceLocationName: {},
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                type: "structure"
            }
        },
        DescribeVodSource: {
            http: {
                method: "GET",
                requestUri: "/sourceLocation/{sourceLocationName}/vodSource/{vodSourceName}",
                responseCode: 200
            },
            input: {
                members: {
                    SourceLocationName: {
                        location: "uri",
                        locationName: "sourceLocationName"
                    },
                    VodSourceName: {
                        location: "uri",
                        locationName: "vodSourceName"
                    }
                },
                required: [ "SourceLocationName", "VodSourceName" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sc"
                    },
                    HttpPackageConfigurations: {
                        shape: "Sx"
                    },
                    LastModifiedTime: {
                        shape: "Sc"
                    },
                    SourceLocationName: {},
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    },
                    VodSourceName: {}
                },
                type: "structure"
            }
        },
        GetChannelPolicy: {
            http: {
                method: "GET",
                requestUri: "/channel/{channelName}/policy",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "channelName"
                    }
                },
                required: [ "ChannelName" ],
                type: "structure"
            },
            output: {
                members: {
                    Policy: {}
                },
                type: "structure"
            }
        },
        GetChannelSchedule: {
            http: {
                method: "GET",
                requestUri: "/channel/{channelName}/schedule",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "channelName"
                    },
                    DurationMinutes: {
                        location: "querystring",
                        locationName: "durationMinutes"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ChannelName" ],
                type: "structure"
            },
            output: {
                members: {
                    Items: {
                        member: {
                            members: {
                                ApproximateDurationSeconds: {
                                    type: "long"
                                },
                                ApproximateStartTime: {
                                    shape: "Sc"
                                },
                                Arn: {},
                                ChannelName: {},
                                ProgramName: {},
                                SourceLocationName: {},
                                VodSourceName: {}
                            },
                            required: [ "VodSourceName", "ChannelName", "SourceLocationName", "Arn", "ProgramName" ],
                            type: "structure"
                        },
                        type: "list"
                    },
                    NextToken: {}
                },
                type: "structure"
            }
        },
        GetPlaybackConfiguration: {
            http: {
                method: "GET",
                requestUri: "/playbackConfiguration/{Name}",
                responseCode: 200
            },
            input: {
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                },
                required: [ "Name" ],
                type: "structure"
            },
            output: {
                members: {
                    AdDecisionServerUrl: {},
                    AvailSuppression: {
                        shape: "S1u"
                    },
                    Bumper: {
                        shape: "S1w"
                    },
                    CdnConfiguration: {
                        shape: "S1x"
                    },
                    ConfigurationAliases: {
                        shape: "S1y"
                    },
                    DashConfiguration: {
                        shape: "S1z"
                    },
                    HlsConfiguration: {
                        shape: "S21"
                    },
                    LivePreRollConfiguration: {
                        shape: "S22"
                    },
                    ManifestProcessingRules: {
                        shape: "S23"
                    },
                    Name: {},
                    PersonalizationThresholdSeconds: {
                        type: "integer"
                    },
                    PlaybackConfigurationArn: {},
                    PlaybackEndpointPrefix: {},
                    SessionInitializationEndpointPrefix: {},
                    SlateAdUrl: {},
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    },
                    TranscodeProfileName: {},
                    VideoContentSourceUrl: {}
                },
                type: "structure"
            }
        },
        ListChannels: {
            http: {
                method: "GET",
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    Items: {
                        member: {
                            members: {
                                Arn: {},
                                ChannelName: {},
                                ChannelState: {},
                                CreationTime: {
                                    shape: "Sc"
                                },
                                LastModifiedTime: {
                                    shape: "Sc"
                                },
                                Outputs: {
                                    shape: "Sd"
                                },
                                PlaybackMode: {},
                                Tags: {
                                    locationName: "tags",
                                    shape: "S9"
                                }
                            },
                            required: [ "ChannelState", "ChannelName", "Outputs", "Arn", "PlaybackMode" ],
                            type: "structure"
                        },
                        type: "list"
                    },
                    NextToken: {}
                },
                type: "structure"
            }
        },
        ListPlaybackConfigurations: {
            http: {
                method: "GET",
                requestUri: "/playbackConfigurations",
                responseCode: 200
            },
            input: {
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    Items: {
                        member: {
                            members: {
                                AdDecisionServerUrl: {},
                                AvailSuppression: {
                                    shape: "S1u"
                                },
                                Bumper: {
                                    shape: "S1w"
                                },
                                CdnConfiguration: {
                                    shape: "S1x"
                                },
                                ConfigurationAliases: {
                                    shape: "S1y"
                                },
                                DashConfiguration: {
                                    shape: "S1z"
                                },
                                HlsConfiguration: {
                                    shape: "S21"
                                },
                                LivePreRollConfiguration: {
                                    shape: "S22"
                                },
                                ManifestProcessingRules: {
                                    shape: "S23"
                                },
                                Name: {},
                                PersonalizationThresholdSeconds: {
                                    type: "integer"
                                },
                                PlaybackConfigurationArn: {},
                                PlaybackEndpointPrefix: {},
                                SessionInitializationEndpointPrefix: {},
                                SlateAdUrl: {},
                                Tags: {
                                    locationName: "tags",
                                    shape: "S9"
                                },
                                TranscodeProfileName: {},
                                VideoContentSourceUrl: {}
                            },
                            type: "structure"
                        },
                        type: "list"
                    },
                    NextToken: {}
                },
                type: "structure"
            }
        },
        ListSourceLocations: {
            http: {
                method: "GET",
                requestUri: "/sourceLocations",
                responseCode: 200
            },
            input: {
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    Items: {
                        member: {
                            members: {
                                AccessConfiguration: {
                                    shape: "Sr"
                                },
                                Arn: {},
                                CreationTime: {
                                    shape: "Sc"
                                },
                                DefaultSegmentDeliveryConfiguration: {
                                    shape: "St"
                                },
                                HttpConfiguration: {
                                    shape: "Su"
                                },
                                LastModifiedTime: {
                                    shape: "Sc"
                                },
                                SourceLocationName: {},
                                Tags: {
                                    locationName: "tags",
                                    shape: "S9"
                                }
                            },
                            required: [ "SourceLocationName", "HttpConfiguration", "Arn" ],
                            type: "structure"
                        },
                        type: "list"
                    },
                    NextToken: {}
                },
                type: "structure"
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                },
                required: [ "ResourceArn" ],
                type: "structure"
            },
            output: {
                members: {
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                type: "structure"
            }
        },
        ListVodSources: {
            http: {
                method: "GET",
                requestUri: "/sourceLocation/{sourceLocationName}/vodSources",
                responseCode: 200
            },
            input: {
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "sourceLocationName"
                    }
                },
                required: [ "SourceLocationName" ],
                type: "structure"
            },
            output: {
                members: {
                    Items: {
                        member: {
                            members: {
                                Arn: {},
                                CreationTime: {
                                    shape: "Sc"
                                },
                                HttpPackageConfigurations: {
                                    shape: "Sx"
                                },
                                LastModifiedTime: {
                                    shape: "Sc"
                                },
                                SourceLocationName: {},
                                Tags: {
                                    locationName: "tags",
                                    shape: "S9"
                                },
                                VodSourceName: {}
                            },
                            required: [ "VodSourceName", "SourceLocationName", "HttpPackageConfigurations", "Arn" ],
                            type: "structure"
                        },
                        type: "list"
                    },
                    NextToken: {}
                },
                type: "structure"
            }
        },
        PutChannelPolicy: {
            http: {
                method: "PUT",
                requestUri: "/channel/{channelName}/policy",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "channelName"
                    },
                    Policy: {}
                },
                required: [ "ChannelName", "Policy" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        PutPlaybackConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/playbackConfiguration",
                responseCode: 200
            },
            input: {
                members: {
                    AdDecisionServerUrl: {},
                    AvailSuppression: {
                        shape: "S1u"
                    },
                    Bumper: {
                        shape: "S1w"
                    },
                    CdnConfiguration: {
                        shape: "S1x"
                    },
                    ConfigurationAliases: {
                        key: {},
                        type: "map",
                        value: {
                            shape: "S9"
                        }
                    },
                    DashConfiguration: {
                        members: {
                            MpdLocation: {},
                            OriginManifestType: {}
                        },
                        type: "structure"
                    },
                    LivePreRollConfiguration: {
                        shape: "S22"
                    },
                    ManifestProcessingRules: {
                        shape: "S23"
                    },
                    Name: {},
                    PersonalizationThresholdSeconds: {
                        type: "integer"
                    },
                    SlateAdUrl: {},
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    },
                    TranscodeProfileName: {},
                    VideoContentSourceUrl: {}
                },
                type: "structure"
            },
            output: {
                members: {
                    AdDecisionServerUrl: {},
                    AvailSuppression: {
                        shape: "S1u"
                    },
                    Bumper: {
                        shape: "S1w"
                    },
                    CdnConfiguration: {
                        shape: "S1x"
                    },
                    ConfigurationAliases: {
                        shape: "S1y"
                    },
                    DashConfiguration: {
                        shape: "S1z"
                    },
                    HlsConfiguration: {
                        shape: "S21"
                    },
                    LivePreRollConfiguration: {
                        shape: "S22"
                    },
                    ManifestProcessingRules: {
                        shape: "S23"
                    },
                    Name: {},
                    PersonalizationThresholdSeconds: {
                        type: "integer"
                    },
                    PlaybackConfigurationArn: {},
                    PlaybackEndpointPrefix: {},
                    SessionInitializationEndpointPrefix: {},
                    SlateAdUrl: {},
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    },
                    TranscodeProfileName: {},
                    VideoContentSourceUrl: {}
                },
                type: "structure"
            }
        },
        StartChannel: {
            http: {
                method: "PUT",
                requestUri: "/channel/{channelName}/start",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "channelName"
                    }
                },
                required: [ "ChannelName" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        StopChannel: {
            http: {
                method: "PUT",
                requestUri: "/channel/{channelName}/stop",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "channelName"
                    }
                },
                required: [ "ChannelName" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                required: [ "ResourceArn", "Tags" ],
                type: "structure"
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        member: {},
                        type: "list"
                    }
                },
                required: [ "ResourceArn", "TagKeys" ],
                type: "structure"
            }
        },
        UpdateChannel: {
            http: {
                method: "PUT",
                requestUri: "/channel/{channelName}",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "channelName"
                    },
                    Outputs: {
                        shape: "S3"
                    }
                },
                required: [ "ChannelName", "Outputs" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {},
                    ChannelName: {},
                    ChannelState: {},
                    CreationTime: {
                        shape: "Sc"
                    },
                    LastModifiedTime: {
                        shape: "Sc"
                    },
                    Outputs: {
                        shape: "Sd"
                    },
                    PlaybackMode: {},
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                type: "structure"
            }
        },
        UpdateSourceLocation: {
            http: {
                method: "PUT",
                requestUri: "/sourceLocation/{sourceLocationName}",
                responseCode: 200
            },
            input: {
                members: {
                    AccessConfiguration: {
                        shape: "Sr"
                    },
                    DefaultSegmentDeliveryConfiguration: {
                        shape: "St"
                    },
                    HttpConfiguration: {
                        shape: "Su"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "sourceLocationName"
                    }
                },
                required: [ "SourceLocationName", "HttpConfiguration" ],
                type: "structure"
            },
            output: {
                members: {
                    AccessConfiguration: {
                        shape: "Sr"
                    },
                    Arn: {},
                    CreationTime: {
                        shape: "Sc"
                    },
                    DefaultSegmentDeliveryConfiguration: {
                        shape: "St"
                    },
                    HttpConfiguration: {
                        shape: "Su"
                    },
                    LastModifiedTime: {
                        shape: "Sc"
                    },
                    SourceLocationName: {},
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    }
                },
                type: "structure"
            }
        },
        UpdateVodSource: {
            http: {
                method: "PUT",
                requestUri: "/sourceLocation/{sourceLocationName}/vodSource/{vodSourceName}",
                responseCode: 200
            },
            input: {
                members: {
                    HttpPackageConfigurations: {
                        shape: "Sx"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "sourceLocationName"
                    },
                    VodSourceName: {
                        location: "uri",
                        locationName: "vodSourceName"
                    }
                },
                required: [ "SourceLocationName", "VodSourceName", "HttpPackageConfigurations" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sc"
                    },
                    HttpPackageConfigurations: {
                        shape: "Sx"
                    },
                    LastModifiedTime: {
                        shape: "Sc"
                    },
                    SourceLocationName: {},
                    Tags: {
                        locationName: "tags",
                        shape: "S9"
                    },
                    VodSourceName: {}
                },
                type: "structure"
            }
        }
    },
    shapes: {
        S3: {
            member: {
                members: {
                    DashPlaylistSettings: {
                        shape: "S5"
                    },
                    HlsPlaylistSettings: {
                        shape: "S7"
                    },
                    ManifestName: {},
                    SourceGroup: {}
                },
                required: [ "ManifestName", "SourceGroup" ],
                type: "structure"
            },
            type: "list"
        },
        S5: {
            members: {
                ManifestWindowSeconds: {
                    type: "integer"
                },
                MinBufferTimeSeconds: {
                    type: "integer"
                },
                MinUpdatePeriodSeconds: {
                    type: "integer"
                },
                SuggestedPresentationDelaySeconds: {
                    type: "integer"
                }
            },
            type: "structure"
        },
        S7: {
            members: {
                ManifestWindowSeconds: {
                    type: "integer"
                }
            },
            type: "structure"
        },
        S9: {
            key: {},
            type: "map",
            value: {}
        },
        Sc: {
            timestampFormat: "unixTimestamp",
            type: "timestamp"
        },
        Sd: {
            member: {
                members: {
                    DashPlaylistSettings: {
                        shape: "S5"
                    },
                    HlsPlaylistSettings: {
                        shape: "S7"
                    },
                    ManifestName: {},
                    PlaybackUrl: {},
                    SourceGroup: {}
                },
                required: [ "ManifestName", "PlaybackUrl", "SourceGroup" ],
                type: "structure"
            },
            type: "list"
        },
        Sg: {
            member: {
                members: {
                    MessageType: {},
                    OffsetMillis: {
                        type: "long"
                    },
                    Slate: {
                        members: {
                            SourceLocationName: {},
                            VodSourceName: {}
                        },
                        type: "structure"
                    },
                    SpliceInsertMessage: {
                        members: {
                            AvailNum: {
                                type: "integer"
                            },
                            AvailsExpected: {
                                type: "integer"
                            },
                            SpliceEventId: {
                                type: "integer"
                            },
                            UniqueProgramId: {
                                type: "integer"
                            }
                        },
                        type: "structure"
                    }
                },
                type: "structure"
            },
            type: "list"
        },
        Sr: {
            members: {
                AccessType: {}
            },
            type: "structure"
        },
        St: {
            members: {
                BaseUrl: {}
            },
            type: "structure"
        },
        Su: {
            members: {
                BaseUrl: {}
            },
            required: [ "BaseUrl" ],
            type: "structure"
        },
        Sx: {
            member: {
                members: {
                    Path: {},
                    SourceGroup: {},
                    Type: {}
                },
                required: [ "Path", "Type", "SourceGroup" ],
                type: "structure"
            },
            type: "list"
        },
        S1u: {
            members: {
                Mode: {},
                Value: {}
            },
            type: "structure"
        },
        S1w: {
            members: {
                EndUrl: {},
                StartUrl: {}
            },
            type: "structure"
        },
        S1x: {
            members: {
                AdSegmentUrlPrefix: {},
                ContentSegmentUrlPrefix: {}
            },
            type: "structure"
        },
        S1y: {
            key: {},
            type: "map",
            value: {
                shape: "S9"
            }
        },
        S1z: {
            members: {
                ManifestEndpointPrefix: {},
                MpdLocation: {},
                OriginManifestType: {}
            },
            type: "structure"
        },
        S21: {
            members: {
                ManifestEndpointPrefix: {}
            },
            type: "structure"
        },
        S22: {
            members: {
                AdDecisionServerUrl: {},
                MaxDurationSeconds: {
                    type: "integer"
                }
            },
            type: "structure"
        },
        S23: {
            members: {
                AdMarkerPassthrough: {
                    members: {
                        Enabled: {
                            type: "boolean"
                        }
                    },
                    type: "structure"
                }
            },
            type: "structure"
        }
    },
    paginators: {
        GetChannelSchedule: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Items"
        },
        ListChannels: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Items"
        },
        ListPlaybackConfigurations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Items"
        },
        ListSourceLocations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Items"
        },
        ListVodSources: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Items"
        }
    }
};

AWS.apiLoader.services["eks"] = {};

AWS.EKS = AWS.Service.defineService("eks", [ "2017-11-01" ]);

AWS.apiLoader.services["eks"]["2017-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-11-01",
        endpointPrefix: "eks",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon EKS",
        serviceFullName: "Amazon Elastic Kubernetes Service",
        serviceId: "EKS",
        signatureVersion: "v4",
        signingName: "eks",
        uid: "eks-2017-11-01"
    },
    operations: {
        AssociateEncryptionConfig: {
            http: {
                requestUri: "/clusters/{name}/encryption-config/associate"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "encryptionConfig" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    encryptionConfig: {
                        shape: "S3"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        AssociateIdentityProviderConfig: {
            http: {
                requestUri: "/clusters/{name}/identity-provider-configs/associate"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "oidc" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    oidc: {
                        type: "structure",
                        required: [ "identityProviderConfigName", "issuerUrl", "clientId" ],
                        members: {
                            identityProviderConfigName: {},
                            issuerUrl: {},
                            clientId: {},
                            usernameClaim: {},
                            usernamePrefix: {},
                            groupsClaim: {},
                            groupsPrefix: {},
                            requiredClaims: {
                                shape: "Sk"
                            }
                        }
                    },
                    tags: {
                        shape: "Sn"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateAddon: {
            http: {
                requestUri: "/clusters/{name}/addons"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "addonName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    addonName: {},
                    addonVersion: {},
                    serviceAccountRoleArn: {},
                    resolveConflicts: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    addon: {
                        shape: "Sw"
                    }
                }
            }
        },
        CreateCluster: {
            http: {
                requestUri: "/clusters"
            },
            input: {
                type: "structure",
                required: [ "name", "roleArn", "resourcesVpcConfig" ],
                members: {
                    name: {},
                    version: {},
                    roleArn: {},
                    resourcesVpcConfig: {
                        shape: "S13"
                    },
                    kubernetesNetworkConfig: {
                        type: "structure",
                        members: {
                            serviceIpv4Cidr: {}
                        }
                    },
                    logging: {
                        shape: "S16"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sn"
                    },
                    encryptionConfig: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cluster: {
                        shape: "S1c"
                    }
                }
            }
        },
        CreateFargateProfile: {
            http: {
                requestUri: "/clusters/{name}/fargate-profiles"
            },
            input: {
                type: "structure",
                required: [ "fargateProfileName", "clusterName", "podExecutionRoleArn" ],
                members: {
                    fargateProfileName: {},
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    podExecutionRoleArn: {},
                    subnets: {
                        shape: "S5"
                    },
                    selectors: {
                        shape: "S1l"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fargateProfile: {
                        shape: "S1p"
                    }
                }
            }
        },
        CreateNodegroup: {
            http: {
                requestUri: "/clusters/{name}/node-groups"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "nodegroupName", "subnets", "nodeRole" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    nodegroupName: {},
                    scalingConfig: {
                        shape: "S1s"
                    },
                    diskSize: {
                        type: "integer"
                    },
                    subnets: {
                        shape: "S5"
                    },
                    instanceTypes: {
                        shape: "S5"
                    },
                    amiType: {},
                    remoteAccess: {
                        shape: "S1x"
                    },
                    nodeRole: {},
                    labels: {
                        shape: "S1y"
                    },
                    tags: {
                        shape: "Sn"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    launchTemplate: {
                        shape: "S21"
                    },
                    capacityType: {},
                    version: {},
                    releaseVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nodegroup: {
                        shape: "S24"
                    }
                }
            }
        },
        DeleteAddon: {
            http: {
                method: "DELETE",
                requestUri: "/clusters/{name}/addons/{addonName}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "addonName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    addonName: {
                        location: "uri",
                        locationName: "addonName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    addon: {
                        shape: "Sw"
                    }
                }
            }
        },
        DeleteCluster: {
            http: {
                method: "DELETE",
                requestUri: "/clusters/{name}"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cluster: {
                        shape: "S1c"
                    }
                }
            }
        },
        DeleteFargateProfile: {
            http: {
                method: "DELETE",
                requestUri: "/clusters/{name}/fargate-profiles/{fargateProfileName}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "fargateProfileName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    fargateProfileName: {
                        location: "uri",
                        locationName: "fargateProfileName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fargateProfile: {
                        shape: "S1p"
                    }
                }
            }
        },
        DeleteNodegroup: {
            http: {
                method: "DELETE",
                requestUri: "/clusters/{name}/node-groups/{nodegroupName}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "nodegroupName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    nodegroupName: {
                        location: "uri",
                        locationName: "nodegroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nodegroup: {
                        shape: "S24"
                    }
                }
            }
        },
        DescribeAddon: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/addons/{addonName}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "addonName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    addonName: {
                        location: "uri",
                        locationName: "addonName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    addon: {
                        shape: "Sw"
                    }
                }
            }
        },
        DescribeAddonVersions: {
            http: {
                method: "GET",
                requestUri: "/addons/supported-versions"
            },
            input: {
                type: "structure",
                members: {
                    kubernetesVersion: {
                        location: "querystring",
                        locationName: "kubernetesVersion"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    addonName: {
                        location: "querystring",
                        locationName: "addonName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    addons: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                addonName: {},
                                type: {},
                                addonVersions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            addonVersion: {},
                                            architecture: {
                                                shape: "S5"
                                            },
                                            compatibilities: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        clusterVersion: {},
                                                        platformVersions: {
                                                            shape: "S5"
                                                        },
                                                        defaultVersion: {
                                                            type: "boolean"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeCluster: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cluster: {
                        shape: "S1c"
                    }
                }
            }
        },
        DescribeFargateProfile: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/fargate-profiles/{fargateProfileName}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "fargateProfileName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    fargateProfileName: {
                        location: "uri",
                        locationName: "fargateProfileName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fargateProfile: {
                        shape: "S1p"
                    }
                }
            }
        },
        DescribeIdentityProviderConfig: {
            http: {
                requestUri: "/clusters/{name}/identity-provider-configs/describe"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "identityProviderConfig" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    identityProviderConfig: {
                        shape: "S31"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    identityProviderConfig: {
                        type: "structure",
                        members: {
                            oidc: {
                                type: "structure",
                                members: {
                                    identityProviderConfigName: {},
                                    identityProviderConfigArn: {},
                                    clusterName: {},
                                    issuerUrl: {},
                                    clientId: {},
                                    usernameClaim: {},
                                    usernamePrefix: {},
                                    groupsClaim: {},
                                    groupsPrefix: {},
                                    requiredClaims: {
                                        shape: "Sk"
                                    },
                                    tags: {
                                        shape: "Sn"
                                    },
                                    status: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeNodegroup: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/node-groups/{nodegroupName}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "nodegroupName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    nodegroupName: {
                        location: "uri",
                        locationName: "nodegroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nodegroup: {
                        shape: "S24"
                    }
                }
            }
        },
        DescribeUpdate: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/updates/{updateId}"
            },
            input: {
                type: "structure",
                required: [ "name", "updateId" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    updateId: {
                        location: "uri",
                        locationName: "updateId"
                    },
                    nodegroupName: {
                        location: "querystring",
                        locationName: "nodegroupName"
                    },
                    addonName: {
                        location: "querystring",
                        locationName: "addonName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        DisassociateIdentityProviderConfig: {
            http: {
                requestUri: "/clusters/{name}/identity-provider-configs/disassociate"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "identityProviderConfig" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    identityProviderConfig: {
                        shape: "S31"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        ListAddons: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/addons"
            },
            input: {
                type: "structure",
                required: [ "clusterName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    addons: {
                        shape: "S5"
                    },
                    nextToken: {}
                }
            }
        },
        ListClusters: {
            http: {
                method: "GET",
                requestUri: "/clusters"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    clusters: {
                        shape: "S5"
                    },
                    nextToken: {}
                }
            }
        },
        ListFargateProfiles: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/fargate-profiles"
            },
            input: {
                type: "structure",
                required: [ "clusterName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fargateProfileNames: {
                        shape: "S5"
                    },
                    nextToken: {}
                }
            }
        },
        ListIdentityProviderConfigs: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/identity-provider-configs"
            },
            input: {
                type: "structure",
                required: [ "clusterName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    identityProviderConfigs: {
                        type: "list",
                        member: {
                            shape: "S31"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNodegroups: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/node-groups"
            },
            input: {
                type: "structure",
                required: [ "clusterName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nodegroups: {
                        shape: "S5"
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        ListUpdates: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/updates"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    nodegroupName: {
                        location: "querystring",
                        locationName: "nodegroupName"
                    },
                    addonName: {
                        location: "querystring",
                        locationName: "addonName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    updateIds: {
                        shape: "S5"
                    },
                    nextToken: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAddon: {
            http: {
                requestUri: "/clusters/{name}/addons/{addonName}/update"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "addonName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    addonName: {
                        location: "uri",
                        locationName: "addonName"
                    },
                    addonVersion: {},
                    serviceAccountRoleArn: {},
                    resolveConflicts: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        UpdateClusterConfig: {
            http: {
                requestUri: "/clusters/{name}/update-config"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    resourcesVpcConfig: {
                        shape: "S13"
                    },
                    logging: {
                        shape: "S16"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        UpdateClusterVersion: {
            http: {
                requestUri: "/clusters/{name}/updates"
            },
            input: {
                type: "structure",
                required: [ "name", "version" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    version: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        UpdateNodegroupConfig: {
            http: {
                requestUri: "/clusters/{name}/node-groups/{nodegroupName}/update-config"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "nodegroupName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    nodegroupName: {
                        location: "uri",
                        locationName: "nodegroupName"
                    },
                    labels: {
                        type: "structure",
                        members: {
                            addOrUpdateLabels: {
                                shape: "S1y"
                            },
                            removeLabels: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    scalingConfig: {
                        shape: "S1s"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        UpdateNodegroupVersion: {
            http: {
                requestUri: "/clusters/{name}/node-groups/{nodegroupName}/update-version"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "nodegroupName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    nodegroupName: {
                        location: "uri",
                        locationName: "nodegroupName"
                    },
                    version: {},
                    releaseVersion: {},
                    launchTemplate: {
                        shape: "S21"
                    },
                    force: {
                        type: "boolean"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    resources: {
                        shape: "S5"
                    },
                    provider: {
                        type: "structure",
                        members: {
                            keyArn: {}
                        }
                    }
                }
            }
        },
        S5: {
            type: "list",
            member: {}
        },
        S8: {
            type: "structure",
            members: {
                id: {},
                status: {},
                type: {},
                params: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            type: {},
                            value: {}
                        }
                    }
                },
                createdAt: {
                    type: "timestamp"
                },
                errors: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            errorCode: {},
                            errorMessage: {},
                            resourceIds: {
                                shape: "S5"
                            }
                        }
                    }
                }
            }
        },
        Sk: {
            type: "map",
            key: {},
            value: {}
        },
        Sn: {
            type: "map",
            key: {},
            value: {}
        },
        Sw: {
            type: "structure",
            members: {
                addonName: {},
                clusterName: {},
                status: {},
                addonVersion: {},
                health: {
                    type: "structure",
                    members: {
                        issues: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    code: {},
                                    message: {},
                                    resourceIds: {
                                        shape: "S5"
                                    }
                                }
                            }
                        }
                    }
                },
                addonArn: {},
                createdAt: {
                    type: "timestamp"
                },
                modifiedAt: {
                    type: "timestamp"
                },
                serviceAccountRoleArn: {},
                tags: {
                    shape: "Sn"
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                subnetIds: {
                    shape: "S5"
                },
                securityGroupIds: {
                    shape: "S5"
                },
                endpointPublicAccess: {
                    type: "boolean"
                },
                endpointPrivateAccess: {
                    type: "boolean"
                },
                publicAccessCidrs: {
                    shape: "S5"
                }
            }
        },
        S16: {
            type: "structure",
            members: {
                clusterLogging: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            types: {
                                type: "list",
                                member: {}
                            },
                            enabled: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S1c: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                version: {},
                endpoint: {},
                roleArn: {},
                resourcesVpcConfig: {
                    type: "structure",
                    members: {
                        subnetIds: {
                            shape: "S5"
                        },
                        securityGroupIds: {
                            shape: "S5"
                        },
                        clusterSecurityGroupId: {},
                        vpcId: {},
                        endpointPublicAccess: {
                            type: "boolean"
                        },
                        endpointPrivateAccess: {
                            type: "boolean"
                        },
                        publicAccessCidrs: {
                            shape: "S5"
                        }
                    }
                },
                kubernetesNetworkConfig: {
                    type: "structure",
                    members: {
                        serviceIpv4Cidr: {}
                    }
                },
                logging: {
                    shape: "S16"
                },
                identity: {
                    type: "structure",
                    members: {
                        oidc: {
                            type: "structure",
                            members: {
                                issuer: {}
                            }
                        }
                    }
                },
                status: {},
                certificateAuthority: {
                    type: "structure",
                    members: {
                        data: {}
                    }
                },
                clientRequestToken: {},
                platformVersion: {},
                tags: {
                    shape: "Sn"
                },
                encryptionConfig: {
                    shape: "S3"
                }
            }
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    namespace: {},
                    labels: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S1p: {
            type: "structure",
            members: {
                fargateProfileName: {},
                fargateProfileArn: {},
                clusterName: {},
                createdAt: {
                    type: "timestamp"
                },
                podExecutionRoleArn: {},
                subnets: {
                    shape: "S5"
                },
                selectors: {
                    shape: "S1l"
                },
                status: {},
                tags: {
                    shape: "Sn"
                }
            }
        },
        S1s: {
            type: "structure",
            members: {
                minSize: {
                    type: "integer"
                },
                maxSize: {
                    type: "integer"
                },
                desiredSize: {
                    type: "integer"
                }
            }
        },
        S1x: {
            type: "structure",
            members: {
                ec2SshKey: {},
                sourceSecurityGroups: {
                    shape: "S5"
                }
            }
        },
        S1y: {
            type: "map",
            key: {},
            value: {}
        },
        S21: {
            type: "structure",
            members: {
                name: {},
                version: {},
                id: {}
            }
        },
        S24: {
            type: "structure",
            members: {
                nodegroupName: {},
                nodegroupArn: {},
                clusterName: {},
                version: {},
                releaseVersion: {},
                createdAt: {
                    type: "timestamp"
                },
                modifiedAt: {
                    type: "timestamp"
                },
                status: {},
                capacityType: {},
                scalingConfig: {
                    shape: "S1s"
                },
                instanceTypes: {
                    shape: "S5"
                },
                subnets: {
                    shape: "S5"
                },
                remoteAccess: {
                    shape: "S1x"
                },
                amiType: {},
                nodeRole: {},
                labels: {
                    shape: "S1y"
                },
                resources: {
                    type: "structure",
                    members: {
                        autoScalingGroups: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    name: {}
                                }
                            }
                        },
                        remoteAccessSecurityGroup: {}
                    }
                },
                diskSize: {
                    type: "integer"
                },
                health: {
                    type: "structure",
                    members: {
                        issues: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    code: {},
                                    message: {},
                                    resourceIds: {
                                        shape: "S5"
                                    }
                                }
                            }
                        }
                    }
                },
                launchTemplate: {
                    shape: "S21"
                },
                tags: {
                    shape: "Sn"
                }
            }
        },
        S31: {
            type: "structure",
            required: [ "type", "name" ],
            members: {
                type: {},
                name: {}
            }
        }
    },
    paginators: {
        DescribeAddonVersions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "addons"
        },
        ListAddons: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "addons"
        },
        ListClusters: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "clusters"
        },
        ListFargateProfiles: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "fargateProfileNames"
        },
        ListIdentityProviderConfigs: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "identityProviderConfigs"
        },
        ListNodegroups: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "nodegroups"
        },
        ListUpdates: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "updateIds"
        }
    },
    waiters: {
        ClusterActive: {
            delay: 30,
            operation: "DescribeCluster",
            maxAttempts: 40,
            acceptors: [ {
                expected: "DELETING",
                matcher: "path",
                state: "failure",
                argument: "cluster.status"
            }, {
                expected: "FAILED",
                matcher: "path",
                state: "failure",
                argument: "cluster.status"
            }, {
                expected: "ACTIVE",
                matcher: "path",
                state: "success",
                argument: "cluster.status"
            } ]
        },
        ClusterDeleted: {
            delay: 30,
            operation: "DescribeCluster",
            maxAttempts: 40,
            acceptors: [ {
                expected: "ACTIVE",
                matcher: "path",
                state: "failure",
                argument: "cluster.status"
            }, {
                expected: "CREATING",
                matcher: "path",
                state: "failure",
                argument: "cluster.status"
            }, {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "success"
            } ]
        },
        NodegroupActive: {
            delay: 30,
            operation: "DescribeNodegroup",
            maxAttempts: 80,
            acceptors: [ {
                expected: "CREATE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "nodegroup.status"
            }, {
                expected: "ACTIVE",
                matcher: "path",
                state: "success",
                argument: "nodegroup.status"
            } ]
        },
        NodegroupDeleted: {
            delay: 30,
            operation: "DescribeNodegroup",
            maxAttempts: 40,
            acceptors: [ {
                expected: "DELETE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "nodegroup.status"
            }, {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "success"
            } ]
        },
        AddonActive: {
            delay: 10,
            operation: "DescribeAddon",
            maxAttempts: 60,
            acceptors: [ {
                expected: "CREATE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "addon.status"
            }, {
                expected: "ACTIVE",
                matcher: "path",
                state: "success",
                argument: "addon.status"
            } ]
        },
        AddonDeleted: {
            delay: 10,
            operation: "DescribeAddon",
            maxAttempts: 60,
            acceptors: [ {
                expected: "DELETE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "addon.status"
            }, {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "success"
            } ]
        }
    }
};

AWS.apiLoader.services["macie"] = {};

AWS.Macie = AWS.Service.defineService("macie", [ "2017-12-19" ]);

AWS.apiLoader.services["macie"]["2017-12-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-12-19",
        endpointPrefix: "macie",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Macie",
        serviceId: "Macie",
        signatureVersion: "v4",
        targetPrefix: "MacieService",
        uid: "macie-2017-12-19"
    },
    operations: {
        AssociateMemberAccount: {
            input: {
                type: "structure",
                required: [ "memberAccountId" ],
                members: {
                    memberAccountId: {}
                }
            }
        },
        AssociateS3Resources: {
            input: {
                type: "structure",
                required: [ "s3Resources" ],
                members: {
                    memberAccountId: {},
                    s3Resources: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    failedS3Resources: {
                        shape: "Sc"
                    }
                }
            }
        },
        DisassociateMemberAccount: {
            input: {
                type: "structure",
                required: [ "memberAccountId" ],
                members: {
                    memberAccountId: {}
                }
            }
        },
        DisassociateS3Resources: {
            input: {
                type: "structure",
                required: [ "associatedS3Resources" ],
                members: {
                    memberAccountId: {},
                    associatedS3Resources: {
                        type: "list",
                        member: {
                            shape: "Se"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    failedS3Resources: {
                        shape: "Sc"
                    }
                }
            }
        },
        ListMemberAccounts: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    memberAccounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListS3Resources: {
            input: {
                type: "structure",
                members: {
                    memberAccountId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    s3Resources: {
                        shape: "S4"
                    },
                    nextToken: {}
                }
            }
        },
        UpdateS3Resources: {
            input: {
                type: "structure",
                required: [ "s3ResourcesUpdate" ],
                members: {
                    memberAccountId: {},
                    s3ResourcesUpdate: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "bucketName", "classificationTypeUpdate" ],
                            members: {
                                bucketName: {},
                                prefix: {},
                                classificationTypeUpdate: {
                                    type: "structure",
                                    members: {
                                        oneTime: {},
                                        continuous: {}
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    failedS3Resources: {
                        shape: "Sc"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                type: "structure",
                required: [ "bucketName", "classificationType" ],
                members: {
                    bucketName: {},
                    prefix: {},
                    classificationType: {
                        type: "structure",
                        required: [ "oneTime", "continuous" ],
                        members: {
                            oneTime: {},
                            continuous: {}
                        }
                    }
                }
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    failedItem: {
                        shape: "Se"
                    },
                    errorCode: {},
                    errorMessage: {}
                }
            }
        },
        Se: {
            type: "structure",
            required: [ "bucketName" ],
            members: {
                bucketName: {},
                prefix: {}
            }
        }
    },
    paginators: {
        ListMemberAccounts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListS3Resources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["dlm"] = {};

AWS.DLM = AWS.Service.defineService("dlm", [ "2018-01-12" ]);

AWS.apiLoader.services["dlm"]["2018-01-12"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-01-12",
        endpointPrefix: "dlm",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon DLM",
        serviceFullName: "Amazon Data Lifecycle Manager",
        serviceId: "DLM",
        signatureVersion: "v4",
        signingName: "dlm",
        uid: "dlm-2018-01-12"
    },
    operations: {
        CreateLifecyclePolicy: {
            http: {
                requestUri: "/policies"
            },
            input: {
                type: "structure",
                required: [ "ExecutionRoleArn", "Description", "State", "PolicyDetails" ],
                members: {
                    ExecutionRoleArn: {},
                    Description: {},
                    State: {},
                    PolicyDetails: {
                        shape: "S5"
                    },
                    Tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyId: {}
                }
            }
        },
        DeleteLifecyclePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/policies/{policyId}/"
            },
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {
                        location: "uri",
                        locationName: "policyId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetLifecyclePolicies: {
            http: {
                method: "GET",
                requestUri: "/policies"
            },
            input: {
                type: "structure",
                members: {
                    PolicyIds: {
                        location: "querystring",
                        locationName: "policyIds",
                        type: "list",
                        member: {}
                    },
                    State: {
                        location: "querystring",
                        locationName: "state"
                    },
                    ResourceTypes: {
                        shape: "S7",
                        location: "querystring",
                        locationName: "resourceTypes"
                    },
                    TargetTags: {
                        location: "querystring",
                        locationName: "targetTags",
                        type: "list",
                        member: {}
                    },
                    TagsToAdd: {
                        location: "querystring",
                        locationName: "tagsToAdd",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PolicyId: {},
                                Description: {},
                                State: {},
                                Tags: {
                                    shape: "S1o"
                                },
                                PolicyType: {}
                            }
                        }
                    }
                }
            }
        },
        GetLifecyclePolicy: {
            http: {
                method: "GET",
                requestUri: "/policies/{policyId}/"
            },
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {
                        location: "uri",
                        locationName: "policyId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        type: "structure",
                        members: {
                            PolicyId: {},
                            Description: {},
                            State: {},
                            StatusMessage: {},
                            ExecutionRoleArn: {},
                            DateCreated: {
                                shape: "S28"
                            },
                            DateModified: {
                                shape: "S28"
                            },
                            PolicyDetails: {
                                shape: "S5"
                            },
                            Tags: {
                                shape: "S1o"
                            },
                            PolicyArn: {}
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1o"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLifecyclePolicy: {
            http: {
                method: "PATCH",
                requestUri: "/policies/{policyId}"
            },
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {
                        location: "uri",
                        locationName: "policyId"
                    },
                    ExecutionRoleArn: {},
                    State: {},
                    Description: {},
                    PolicyDetails: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                PolicyType: {},
                ResourceTypes: {
                    shape: "S7"
                },
                ResourceLocations: {
                    type: "list",
                    member: {}
                },
                TargetTags: {
                    type: "list",
                    member: {
                        shape: "Sc"
                    }
                },
                Schedules: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {},
                            CopyTags: {
                                type: "boolean"
                            },
                            TagsToAdd: {
                                type: "list",
                                member: {
                                    shape: "Sc"
                                }
                            },
                            VariableTags: {
                                type: "list",
                                member: {
                                    shape: "Sc"
                                }
                            },
                            CreateRule: {
                                type: "structure",
                                members: {
                                    Location: {},
                                    Interval: {
                                        type: "integer"
                                    },
                                    IntervalUnit: {},
                                    Times: {
                                        type: "list",
                                        member: {}
                                    },
                                    CronExpression: {}
                                }
                            },
                            RetainRule: {
                                type: "structure",
                                members: {
                                    Count: {
                                        type: "integer"
                                    },
                                    Interval: {
                                        type: "integer"
                                    },
                                    IntervalUnit: {}
                                }
                            },
                            FastRestoreRule: {
                                type: "structure",
                                required: [ "AvailabilityZones" ],
                                members: {
                                    Count: {
                                        type: "integer"
                                    },
                                    Interval: {
                                        type: "integer"
                                    },
                                    IntervalUnit: {},
                                    AvailabilityZones: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            },
                            CrossRegionCopyRules: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Encrypted" ],
                                    members: {
                                        TargetRegion: {},
                                        Target: {},
                                        Encrypted: {
                                            type: "boolean"
                                        },
                                        CmkArn: {},
                                        CopyTags: {
                                            type: "boolean"
                                        },
                                        RetainRule: {
                                            shape: "S14"
                                        }
                                    }
                                }
                            },
                            ShareRules: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "TargetAccounts" ],
                                    members: {
                                        TargetAccounts: {
                                            type: "list",
                                            member: {}
                                        },
                                        UnshareInterval: {
                                            type: "integer"
                                        },
                                        UnshareIntervalUnit: {}
                                    }
                                }
                            }
                        }
                    }
                },
                Parameters: {
                    type: "structure",
                    members: {
                        ExcludeBootVolume: {
                            type: "boolean"
                        },
                        NoReboot: {
                            type: "boolean"
                        }
                    }
                },
                EventSource: {
                    type: "structure",
                    required: [ "Type" ],
                    members: {
                        Type: {},
                        Parameters: {
                            type: "structure",
                            required: [ "EventType", "SnapshotOwner", "DescriptionRegex" ],
                            members: {
                                EventType: {},
                                SnapshotOwner: {
                                    type: "list",
                                    member: {}
                                },
                                DescriptionRegex: {}
                            }
                        }
                    }
                },
                Actions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "CrossRegionCopy" ],
                        members: {
                            Name: {},
                            CrossRegionCopy: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Target", "EncryptionConfiguration" ],
                                    members: {
                                        Target: {},
                                        EncryptionConfiguration: {
                                            type: "structure",
                                            required: [ "Encrypted" ],
                                            members: {
                                                Encrypted: {
                                                    type: "boolean"
                                                },
                                                CmkArn: {}
                                            }
                                        },
                                        RetainRule: {
                                            shape: "S14"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S7: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {},
                Value: {}
            }
        },
        S14: {
            type: "structure",
            members: {
                Interval: {
                    type: "integer"
                },
                IntervalUnit: {}
            }
        },
        S1o: {
            type: "map",
            key: {},
            value: {}
        },
        S28: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {}
};

AWS.apiLoader.services["signer"] = {};

AWS.Signer = AWS.Service.defineService("signer", [ "2017-08-25" ]);

AWS.apiLoader.services["signer"]["2017-08-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-08-25",
        endpointPrefix: "signer",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "signer",
        serviceFullName: "AWS Signer",
        serviceId: "signer",
        signatureVersion: "v4",
        signingName: "signer",
        uid: "signer-2017-08-25"
    },
    operations: {
        AddProfilePermission: {
            http: {
                requestUri: "/signing-profiles/{profileName}/permissions"
            },
            input: {
                type: "structure",
                required: [ "action", "principal", "statementId", "profileName" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    },
                    profileVersion: {},
                    action: {},
                    principal: {},
                    revisionId: {},
                    statementId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    revisionId: {}
                }
            }
        },
        CancelSigningProfile: {
            http: {
                method: "DELETE",
                requestUri: "/signing-profiles/{profileName}"
            },
            input: {
                type: "structure",
                required: [ "profileName" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    }
                }
            }
        },
        DescribeSigningJob: {
            http: {
                method: "GET",
                requestUri: "/signing-jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    source: {
                        shape: "Sa"
                    },
                    signingMaterial: {
                        shape: "Sf"
                    },
                    platformId: {},
                    platformDisplayName: {},
                    profileName: {},
                    profileVersion: {},
                    overrides: {
                        shape: "Sj"
                    },
                    signingParameters: {
                        shape: "So"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    completedAt: {
                        type: "timestamp"
                    },
                    signatureExpiresAt: {
                        type: "timestamp"
                    },
                    requestedBy: {},
                    status: {},
                    statusReason: {},
                    revocationRecord: {
                        type: "structure",
                        members: {
                            reason: {},
                            revokedAt: {
                                type: "timestamp"
                            },
                            revokedBy: {}
                        }
                    },
                    signedObject: {
                        shape: "Sw"
                    },
                    jobOwner: {},
                    jobInvoker: {}
                }
            }
        },
        GetSigningPlatform: {
            http: {
                method: "GET",
                requestUri: "/signing-platforms/{platformId}"
            },
            input: {
                type: "structure",
                required: [ "platformId" ],
                members: {
                    platformId: {
                        location: "uri",
                        locationName: "platformId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    platformId: {},
                    displayName: {},
                    partner: {},
                    target: {},
                    category: {},
                    signingConfiguration: {
                        shape: "S12"
                    },
                    signingImageFormat: {
                        shape: "S17"
                    },
                    maxSizeInMB: {
                        type: "integer"
                    },
                    revocationSupported: {
                        type: "boolean"
                    }
                }
            }
        },
        GetSigningProfile: {
            http: {
                method: "GET",
                requestUri: "/signing-profiles/{profileName}"
            },
            input: {
                type: "structure",
                required: [ "profileName" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    },
                    profileOwner: {
                        location: "querystring",
                        locationName: "profileOwner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    profileName: {},
                    profileVersion: {},
                    profileVersionArn: {},
                    revocationRecord: {
                        type: "structure",
                        members: {
                            revocationEffectiveFrom: {
                                type: "timestamp"
                            },
                            revokedAt: {
                                type: "timestamp"
                            },
                            revokedBy: {}
                        }
                    },
                    signingMaterial: {
                        shape: "Sf"
                    },
                    platformId: {},
                    platformDisplayName: {},
                    signatureValidityPeriod: {
                        shape: "S1f"
                    },
                    overrides: {
                        shape: "Sj"
                    },
                    signingParameters: {
                        shape: "So"
                    },
                    status: {},
                    statusReason: {},
                    arn: {},
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        ListProfilePermissions: {
            http: {
                method: "GET",
                requestUri: "/signing-profiles/{profileName}/permissions"
            },
            input: {
                type: "structure",
                required: [ "profileName" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    revisionId: {},
                    policySizeBytes: {
                        type: "integer"
                    },
                    permissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                action: {},
                                principal: {},
                                statementId: {},
                                profileVersion: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSigningJobs: {
            http: {
                method: "GET",
                requestUri: "/signing-jobs"
            },
            input: {
                type: "structure",
                members: {
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    platformId: {
                        location: "querystring",
                        locationName: "platformId"
                    },
                    requestedBy: {
                        location: "querystring",
                        locationName: "requestedBy"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    isRevoked: {
                        location: "querystring",
                        locationName: "isRevoked",
                        type: "boolean"
                    },
                    signatureExpiresBefore: {
                        location: "querystring",
                        locationName: "signatureExpiresBefore",
                        type: "timestamp"
                    },
                    signatureExpiresAfter: {
                        location: "querystring",
                        locationName: "signatureExpiresAfter",
                        type: "timestamp"
                    },
                    jobInvoker: {
                        location: "querystring",
                        locationName: "jobInvoker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                jobId: {},
                                source: {
                                    shape: "Sa"
                                },
                                signedObject: {
                                    shape: "Sw"
                                },
                                signingMaterial: {
                                    shape: "Sf"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                status: {},
                                isRevoked: {
                                    type: "boolean"
                                },
                                profileName: {},
                                profileVersion: {},
                                platformId: {},
                                platformDisplayName: {},
                                signatureExpiresAt: {
                                    type: "timestamp"
                                },
                                jobOwner: {},
                                jobInvoker: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSigningPlatforms: {
            http: {
                method: "GET",
                requestUri: "/signing-platforms"
            },
            input: {
                type: "structure",
                members: {
                    category: {
                        location: "querystring",
                        locationName: "category"
                    },
                    partner: {
                        location: "querystring",
                        locationName: "partner"
                    },
                    target: {
                        location: "querystring",
                        locationName: "target"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    platforms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                platformId: {},
                                displayName: {},
                                partner: {},
                                target: {},
                                category: {},
                                signingConfiguration: {
                                    shape: "S12"
                                },
                                signingImageFormat: {
                                    shape: "S17"
                                },
                                maxSizeInMB: {
                                    type: "integer"
                                },
                                revocationSupported: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSigningProfiles: {
            http: {
                method: "GET",
                requestUri: "/signing-profiles"
            },
            input: {
                type: "structure",
                members: {
                    includeCanceled: {
                        location: "querystring",
                        locationName: "includeCanceled",
                        type: "boolean"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    platformId: {
                        location: "querystring",
                        locationName: "platformId"
                    },
                    statuses: {
                        location: "querystring",
                        locationName: "statuses",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    profiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                profileName: {},
                                profileVersion: {},
                                profileVersionArn: {},
                                signingMaterial: {
                                    shape: "Sf"
                                },
                                signatureValidityPeriod: {
                                    shape: "S1f"
                                },
                                platformId: {},
                                platformDisplayName: {},
                                signingParameters: {
                                    shape: "So"
                                },
                                status: {},
                                arn: {},
                                tags: {
                                    shape: "S1k"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1k"
                    }
                }
            }
        },
        PutSigningProfile: {
            http: {
                method: "PUT",
                requestUri: "/signing-profiles/{profileName}"
            },
            input: {
                type: "structure",
                required: [ "profileName", "platformId" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    },
                    signingMaterial: {
                        shape: "Sf"
                    },
                    signatureValidityPeriod: {
                        shape: "S1f"
                    },
                    platformId: {},
                    overrides: {
                        shape: "Sj"
                    },
                    signingParameters: {
                        shape: "So"
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    profileVersion: {},
                    profileVersionArn: {}
                }
            }
        },
        RemoveProfilePermission: {
            http: {
                method: "DELETE",
                requestUri: "/signing-profiles/{profileName}/permissions/{statementId}"
            },
            input: {
                type: "structure",
                required: [ "revisionId", "profileName", "statementId" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    },
                    revisionId: {
                        location: "querystring",
                        locationName: "revisionId"
                    },
                    statementId: {
                        location: "uri",
                        locationName: "statementId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    revisionId: {}
                }
            }
        },
        RevokeSignature: {
            http: {
                method: "PUT",
                requestUri: "/signing-jobs/{jobId}/revoke"
            },
            input: {
                type: "structure",
                required: [ "reason", "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    jobOwner: {},
                    reason: {}
                }
            }
        },
        RevokeSigningProfile: {
            http: {
                method: "PUT",
                requestUri: "/signing-profiles/{profileName}/revoke"
            },
            input: {
                type: "structure",
                required: [ "profileVersion", "reason", "effectiveTime", "profileName" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    },
                    profileVersion: {},
                    reason: {},
                    effectiveTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        StartSigningJob: {
            http: {
                requestUri: "/signing-jobs"
            },
            input: {
                type: "structure",
                required: [ "source", "destination", "profileName", "clientRequestToken" ],
                members: {
                    source: {
                        shape: "Sa"
                    },
                    destination: {
                        type: "structure",
                        members: {
                            s3: {
                                type: "structure",
                                members: {
                                    bucketName: {},
                                    prefix: {}
                                }
                            }
                        }
                    },
                    profileName: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    profileOwner: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    jobOwner: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sa: {
            type: "structure",
            members: {
                s3: {
                    type: "structure",
                    required: [ "bucketName", "key", "version" ],
                    members: {
                        bucketName: {},
                        key: {},
                        version: {}
                    }
                }
            }
        },
        Sf: {
            type: "structure",
            required: [ "certificateArn" ],
            members: {
                certificateArn: {}
            }
        },
        Sj: {
            type: "structure",
            members: {
                signingConfiguration: {
                    type: "structure",
                    members: {
                        encryptionAlgorithm: {},
                        hashAlgorithm: {}
                    }
                },
                signingImageFormat: {}
            }
        },
        So: {
            type: "map",
            key: {},
            value: {}
        },
        Sw: {
            type: "structure",
            members: {
                s3: {
                    type: "structure",
                    members: {
                        bucketName: {},
                        key: {}
                    }
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "encryptionAlgorithmOptions", "hashAlgorithmOptions" ],
            members: {
                encryptionAlgorithmOptions: {
                    type: "structure",
                    required: [ "allowedValues", "defaultValue" ],
                    members: {
                        allowedValues: {
                            type: "list",
                            member: {}
                        },
                        defaultValue: {}
                    }
                },
                hashAlgorithmOptions: {
                    type: "structure",
                    required: [ "allowedValues", "defaultValue" ],
                    members: {
                        allowedValues: {
                            type: "list",
                            member: {}
                        },
                        defaultValue: {}
                    }
                }
            }
        },
        S17: {
            type: "structure",
            required: [ "supportedFormats", "defaultFormat" ],
            members: {
                supportedFormats: {
                    type: "list",
                    member: {}
                },
                defaultFormat: {}
            }
        },
        S1f: {
            type: "structure",
            members: {
                value: {
                    type: "integer"
                },
                type: {}
            }
        },
        S1k: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListSigningJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSigningPlatforms: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSigningProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    },
    waiters: {
        SuccessfulSigningJob: {
            delay: 20,
            operation: "DescribeSigningJob",
            maxAttempts: 25,
            acceptors: [ {
                expected: "Succeeded",
                matcher: "path",
                state: "success",
                argument: "status"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "status"
            }, {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "failure"
            } ]
        }
    }
};

AWS.apiLoader.services["chime"] = {};

AWS.Chime = AWS.Service.defineService("chime", [ "2018-05-01" ]);

AWS.apiLoader.services["chime"]["2018-05-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-01",
        endpointPrefix: "chime",
        protocol: "rest-json",
        serviceFullName: "Amazon Chime",
        serviceId: "Chime",
        signatureVersion: "v4",
        uid: "chime-2018-05-01"
    },
    operations: {
        AssociatePhoneNumberWithUser: {
            http: {
                requestUri: "/accounts/{accountId}/users/{userId}?operation=associate-phone-number",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId", "E164PhoneNumber" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    E164PhoneNumber: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociatePhoneNumbersWithVoiceConnector: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}?operation=associate-phone-numbers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "E164PhoneNumbers" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    E164PhoneNumbers: {
                        shape: "S7"
                    },
                    ForceAssociate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "Sa"
                    }
                }
            }
        },
        AssociatePhoneNumbersWithVoiceConnectorGroup: {
            http: {
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}?operation=associate-phone-numbers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId", "E164PhoneNumbers" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    },
                    E164PhoneNumbers: {
                        shape: "S7"
                    },
                    ForceAssociate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "Sa"
                    }
                }
            }
        },
        AssociateSigninDelegateGroupsWithAccount: {
            http: {
                requestUri: "/accounts/{accountId}?operation=associate-signin-delegate-groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "SigninDelegateGroups" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    SigninDelegateGroups: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchCreateAttendee: {
            http: {
                requestUri: "/meetings/{meetingId}/attendees?operation=batch-create",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "Attendees" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    Attendees: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendees: {
                        shape: "St"
                    },
                    Errors: {
                        shape: "Sw"
                    }
                }
            }
        },
        BatchCreateRoomMembership: {
            http: {
                requestUri: "/accounts/{accountId}/rooms/{roomId}/memberships?operation=batch-create",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId", "MembershipItemList" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    MembershipItemList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MemberId: {},
                                Role: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MemberId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchDeletePhoneNumber: {
            http: {
                requestUri: "/phone-numbers?operation=batch-delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberIds" ],
                members: {
                    PhoneNumberIds: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "Sa"
                    }
                }
            }
        },
        BatchSuspendUser: {
            http: {
                requestUri: "/accounts/{accountId}/users?operation=suspend",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserIdList" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserIdList: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserErrors: {
                        shape: "S1b"
                    }
                }
            }
        },
        BatchUnsuspendUser: {
            http: {
                requestUri: "/accounts/{accountId}/users?operation=unsuspend",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserIdList" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserIdList: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserErrors: {
                        shape: "S1b"
                    }
                }
            }
        },
        BatchUpdatePhoneNumber: {
            http: {
                requestUri: "/phone-numbers?operation=batch-update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "UpdatePhoneNumberRequestItems" ],
                members: {
                    UpdatePhoneNumberRequestItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "PhoneNumberId" ],
                            members: {
                                PhoneNumberId: {},
                                ProductType: {},
                                CallingName: {
                                    shape: "S1j"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "Sa"
                    }
                }
            }
        },
        BatchUpdateUser: {
            http: {
                requestUri: "/accounts/{accountId}/users",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UpdateUserRequestItems" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UpdateUserRequestItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "UserId" ],
                            members: {
                                UserId: {},
                                LicenseType: {},
                                UserType: {},
                                AlexaForBusinessMetadata: {
                                    shape: "S1q"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserErrors: {
                        shape: "S1b"
                    }
                }
            }
        },
        CreateAccount: {
            http: {
                requestUri: "/accounts",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Account: {
                        shape: "S1x"
                    }
                }
            }
        },
        CreateAppInstance: {
            http: {
                requestUri: "/app-instances",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "ClientRequestToken" ],
                members: {
                    Name: {
                        shape: "S22"
                    },
                    Metadata: {
                        shape: "S23"
                    },
                    ClientRequestToken: {
                        shape: "S24",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S25"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {}
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        CreateAppInstanceAdmin: {
            http: {
                requestUri: "/app-instances/{appInstanceArn}/admins",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceAdminArn", "AppInstanceArn" ],
                members: {
                    AppInstanceAdminArn: {},
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceAdmin: {
                        shape: "S2a"
                    },
                    AppInstanceArn: {}
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        CreateAppInstanceUser: {
            http: {
                requestUri: "/app-instance-users",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "AppInstanceUserId", "Name", "ClientRequestToken" ],
                members: {
                    AppInstanceArn: {},
                    AppInstanceUserId: {
                        type: "string",
                        sensitive: true
                    },
                    Name: {
                        shape: "S2e"
                    },
                    Metadata: {
                        shape: "S23"
                    },
                    ClientRequestToken: {
                        shape: "S24",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S25"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {}
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        CreateAttendee: {
            http: {
                requestUri: "/meetings/{meetingId}/attendees",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "ExternalUserId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    ExternalUserId: {
                        shape: "Sn"
                    },
                    Tags: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendee: {
                        shape: "Su"
                    }
                }
            }
        },
        CreateBot: {
            http: {
                requestUri: "/accounts/{accountId}/bots",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "DisplayName", "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    DisplayName: {
                        shape: "S1s"
                    },
                    Domain: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Bot: {
                        shape: "S2k"
                    }
                }
            }
        },
        CreateChannel: {
            http: {
                requestUri: "/channels",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "Name", "ClientRequestToken" ],
                members: {
                    AppInstanceArn: {},
                    Name: {
                        shape: "S22"
                    },
                    Mode: {},
                    Privacy: {},
                    Metadata: {
                        shape: "S23"
                    },
                    ClientRequestToken: {
                        shape: "S24",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S25"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {}
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        CreateChannelBan: {
            http: {
                requestUri: "/channels/{channelArn}/bans",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Member: {
                        shape: "S2a"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        CreateChannelMembership: {
            http: {
                requestUri: "/channels/{channelArn}/memberships",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "Type" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {},
                    Type: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Member: {
                        shape: "S2a"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        CreateChannelModerator: {
            http: {
                requestUri: "/channels/{channelArn}/moderators",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelModeratorArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelModeratorArn: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    ChannelModerator: {
                        shape: "S2a"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        CreateMeeting: {
            http: {
                requestUri: "/meetings",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken" ],
                members: {
                    ClientRequestToken: {
                        shape: "S24",
                        idempotencyToken: true
                    },
                    ExternalMeetingId: {
                        shape: "S2y"
                    },
                    MeetingHostId: {
                        shape: "Sn"
                    },
                    MediaRegion: {},
                    Tags: {
                        shape: "S2z"
                    },
                    NotificationsConfiguration: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "S33"
                    }
                }
            }
        },
        CreateMeetingDialOut: {
            http: {
                requestUri: "/meetings/{meetingId}/dial-outs",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "FromPhoneNumber", "ToPhoneNumber", "JoinToken" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    FromPhoneNumber: {
                        shape: "S3"
                    },
                    ToPhoneNumber: {
                        shape: "S3"
                    },
                    JoinToken: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransactionId: {}
                }
            }
        },
        CreateMeetingWithAttendees: {
            http: {
                requestUri: "/meetings?operation=create-attendees",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken" ],
                members: {
                    ClientRequestToken: {
                        shape: "S24",
                        idempotencyToken: true
                    },
                    ExternalMeetingId: {
                        shape: "S2y"
                    },
                    MeetingHostId: {
                        shape: "Sn"
                    },
                    MediaRegion: {},
                    Tags: {
                        shape: "S2z"
                    },
                    NotificationsConfiguration: {
                        shape: "S30"
                    },
                    Attendees: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "S33"
                    },
                    Attendees: {
                        shape: "St"
                    },
                    Errors: {
                        shape: "Sw"
                    }
                }
            }
        },
        CreatePhoneNumberOrder: {
            http: {
                requestUri: "/phone-number-orders",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ProductType", "E164PhoneNumbers" ],
                members: {
                    ProductType: {},
                    E164PhoneNumbers: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberOrder: {
                        shape: "S3d"
                    }
                }
            }
        },
        CreateProxySession: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ParticipantPhoneNumbers", "Capabilities", "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    ParticipantPhoneNumbers: {
                        type: "list",
                        member: {
                            shape: "S3"
                        }
                    },
                    Name: {
                        type: "string",
                        sensitive: true
                    },
                    ExpiryMinutes: {
                        type: "integer"
                    },
                    Capabilities: {
                        shape: "S3n"
                    },
                    NumberSelectionBehavior: {},
                    GeoMatchLevel: {},
                    GeoMatchParams: {
                        shape: "S3r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProxySession: {
                        shape: "S3v"
                    }
                }
            }
        },
        CreateRoom: {
            http: {
                requestUri: "/accounts/{accountId}/rooms",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    Name: {
                        shape: "S1s"
                    },
                    ClientRequestToken: {
                        shape: "S24",
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Room: {
                        shape: "S42"
                    }
                }
            }
        },
        CreateRoomMembership: {
            http: {
                requestUri: "/accounts/{accountId}/rooms/{roomId}/memberships",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId", "MemberId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    MemberId: {},
                    Role: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RoomMembership: {
                        shape: "S45"
                    }
                }
            }
        },
        CreateSipMediaApplication: {
            http: {
                requestUri: "/sip-media-applications",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AwsRegion", "Name", "Endpoints" ],
                members: {
                    AwsRegion: {},
                    Name: {},
                    Endpoints: {
                        shape: "S4a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplication: {
                        shape: "S4e"
                    }
                }
            }
        },
        CreateSipMediaApplicationCall: {
            http: {
                requestUri: "/sip-media-applications/{sipMediaApplicationId}/calls",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "FromPhoneNumber", "ToPhoneNumber", "SipMediaApplicationId" ],
                members: {
                    FromPhoneNumber: {
                        shape: "S3"
                    },
                    ToPhoneNumber: {
                        shape: "S3"
                    },
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplicationCall: {
                        type: "structure",
                        members: {
                            TransactionId: {}
                        }
                    }
                }
            }
        },
        CreateSipRule: {
            http: {
                requestUri: "/sip-rules",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "TriggerType", "TriggerValue", "TargetApplications" ],
                members: {
                    Name: {},
                    TriggerType: {},
                    TriggerValue: {},
                    Disabled: {
                        type: "boolean"
                    },
                    TargetApplications: {
                        shape: "S4l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipRule: {
                        shape: "S4p"
                    }
                }
            }
        },
        CreateUser: {
            http: {
                requestUri: "/accounts/{accountId}/users?operation=create",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    Username: {},
                    Email: {
                        shape: "S4r"
                    },
                    UserType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S4t"
                    }
                }
            }
        },
        CreateVoiceConnector: {
            http: {
                requestUri: "/voice-connectors",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "RequireEncryption" ],
                members: {
                    Name: {},
                    AwsRegion: {},
                    RequireEncryption: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnector: {
                        shape: "S50"
                    }
                }
            }
        },
        CreateVoiceConnectorGroup: {
            http: {
                requestUri: "/voice-connector-groups",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    VoiceConnectorItems: {
                        shape: "S53"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectorGroup: {
                        shape: "S57"
                    }
                }
            }
        },
        DeleteAccount: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{accountId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAppInstance: {
            http: {
                method: "DELETE",
                requestUri: "/app-instances/{appInstanceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        DeleteAppInstanceAdmin: {
            http: {
                method: "DELETE",
                requestUri: "/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceAdminArn", "AppInstanceArn" ],
                members: {
                    AppInstanceAdminArn: {
                        location: "uri",
                        locationName: "appInstanceAdminArn"
                    },
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        DeleteAppInstanceStreamingConfigurations: {
            http: {
                method: "DELETE",
                requestUri: "/app-instances/{appInstanceArn}/streaming-configurations",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            }
        },
        DeleteAppInstanceUser: {
            http: {
                method: "DELETE",
                requestUri: "/app-instance-users/{appInstanceUserArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    }
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        DeleteAttendee: {
            http: {
                method: "DELETE",
                requestUri: "/meetings/{meetingId}/attendees/{attendeeId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "attendeeId"
                    }
                }
            }
        },
        DeleteChannel: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DeleteChannelBan: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/bans/{memberArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DeleteChannelMembership: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/memberships/{memberArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DeleteChannelMessage: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/messages/{messageId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DeleteChannelModerator: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/moderators/{channelModeratorArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelModeratorArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelModeratorArn: {
                        location: "uri",
                        locationName: "channelModeratorArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DeleteEventsConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{accountId}/bots/{botId}/events-configuration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "BotId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    BotId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            }
        },
        DeleteMeeting: {
            http: {
                method: "DELETE",
                requestUri: "/meetings/{meetingId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    }
                }
            }
        },
        DeletePhoneNumber: {
            http: {
                method: "DELETE",
                requestUri: "/phone-numbers/{phoneNumberId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "phoneNumberId"
                    }
                }
            }
        },
        DeleteProxySession: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "ProxySessionId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    ProxySessionId: {
                        location: "uri",
                        locationName: "proxySessionId"
                    }
                }
            }
        },
        DeleteRoom: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{accountId}/rooms/{roomId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    }
                }
            }
        },
        DeleteRoomMembership: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{accountId}/rooms/{roomId}/memberships/{memberId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId", "MemberId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "memberId"
                    }
                }
            }
        },
        DeleteSipMediaApplication: {
            http: {
                method: "DELETE",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    }
                }
            }
        },
        DeleteSipRule: {
            http: {
                method: "DELETE",
                requestUri: "/sip-rules/{sipRuleId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "SipRuleId" ],
                members: {
                    SipRuleId: {
                        location: "uri",
                        locationName: "sipRuleId"
                    }
                }
            }
        },
        DeleteVoiceConnector: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            }
        },
        DeleteVoiceConnectorEmergencyCallingConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            }
        },
        DeleteVoiceConnectorGroup: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    }
                }
            }
        },
        DeleteVoiceConnectorOrigination: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/origination",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            }
        },
        DeleteVoiceConnectorProxy: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            }
        },
        DeleteVoiceConnectorStreamingConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/streaming-configuration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            }
        },
        DeleteVoiceConnectorTermination: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            }
        },
        DeleteVoiceConnectorTerminationCredentials: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}/termination/credentials?operation=delete",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Usernames", "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Usernames: {
                        shape: "S61"
                    }
                }
            }
        },
        DescribeAppInstance: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstance: {
                        type: "structure",
                        members: {
                            AppInstanceArn: {},
                            Name: {
                                shape: "S22"
                            },
                            Metadata: {
                                shape: "S23"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        DescribeAppInstanceAdmin: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceAdminArn", "AppInstanceArn" ],
                members: {
                    AppInstanceAdminArn: {
                        location: "uri",
                        locationName: "appInstanceAdminArn"
                    },
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceAdmin: {
                        type: "structure",
                        members: {
                            Admin: {
                                shape: "S2a"
                            },
                            AppInstanceArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        DescribeAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/app-instance-users/{appInstanceUserArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUser: {
                        type: "structure",
                        members: {
                            AppInstanceUserArn: {},
                            Name: {
                                shape: "S2e"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            Metadata: {
                                shape: "S23"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        DescribeChannel: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        type: "structure",
                        members: {
                            Name: {
                                shape: "S22"
                            },
                            ChannelArn: {},
                            Mode: {},
                            Privacy: {},
                            Metadata: {
                                shape: "S23"
                            },
                            CreatedBy: {
                                shape: "S2a"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastMessageTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DescribeChannelBan: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/bans/{memberArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelBan: {
                        type: "structure",
                        members: {
                            Member: {
                                shape: "S2a"
                            },
                            ChannelArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            CreatedBy: {
                                shape: "S2a"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DescribeChannelMembership: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/memberships/{memberArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMembership: {
                        type: "structure",
                        members: {
                            InvitedBy: {
                                shape: "S2a"
                            },
                            Type: {},
                            Member: {
                                shape: "S2a"
                            },
                            ChannelArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DescribeChannelMembershipForAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}?scope=app-instance-user-membership",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "AppInstanceUserArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMembership: {
                        shape: "S6n"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DescribeChannelModeratedByAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}?scope=app-instance-user-moderated-channel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "AppInstanceUserArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        shape: "S6s"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DescribeChannelModerator: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/moderators/{channelModeratorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelModeratorArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelModeratorArn: {
                        location: "uri",
                        locationName: "channelModeratorArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelModerator: {
                        type: "structure",
                        members: {
                            Moderator: {
                                shape: "S2a"
                            },
                            ChannelArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            CreatedBy: {
                                shape: "S2a"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DisassociatePhoneNumberFromUser: {
            http: {
                requestUri: "/accounts/{accountId}/users/{userId}?operation=disassociate-phone-number",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociatePhoneNumbersFromVoiceConnector: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}?operation=disassociate-phone-numbers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "E164PhoneNumbers" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    E164PhoneNumbers: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "Sa"
                    }
                }
            }
        },
        DisassociatePhoneNumbersFromVoiceConnectorGroup: {
            http: {
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}?operation=disassociate-phone-numbers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId", "E164PhoneNumbers" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    },
                    E164PhoneNumbers: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "Sa"
                    }
                }
            }
        },
        DisassociateSigninDelegateGroupsFromAccount: {
            http: {
                requestUri: "/accounts/{accountId}?operation=disassociate-signin-delegate-groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "GroupNames" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    GroupNames: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccount: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Account: {
                        shape: "S1x"
                    }
                }
            }
        },
        GetAccountSettings: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/settings"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountSettings: {
                        shape: "S78"
                    }
                }
            }
        },
        GetAppInstanceRetentionSettings: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/retention-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceRetentionSettings: {
                        shape: "S7b"
                    },
                    InitiateDeletionTimestamp: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        GetAppInstanceStreamingConfigurations: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/streaming-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceStreamingConfigurations: {
                        shape: "S7g"
                    }
                }
            }
        },
        GetAttendee: {
            http: {
                method: "GET",
                requestUri: "/meetings/{meetingId}/attendees/{attendeeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "attendeeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendee: {
                        shape: "Su"
                    }
                }
            }
        },
        GetBot: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/bots/{botId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "BotId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    BotId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Bot: {
                        shape: "S2k"
                    }
                }
            }
        },
        GetChannelMessage: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/messages/{messageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMessage: {
                        type: "structure",
                        members: {
                            ChannelArn: {},
                            MessageId: {},
                            Content: {
                                shape: "S7q"
                            },
                            Metadata: {
                                shape: "S23"
                            },
                            Type: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastEditedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            Sender: {
                                shape: "S2a"
                            },
                            Redacted: {
                                type: "boolean"
                            },
                            Persistence: {}
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        GetEventsConfiguration: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/bots/{botId}/events-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "BotId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    BotId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventsConfiguration: {
                        shape: "S7w"
                    }
                }
            }
        },
        GetGlobalSettings: {
            http: {
                method: "GET",
                requestUri: "/settings",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    BusinessCalling: {
                        shape: "S7y"
                    },
                    VoiceConnector: {
                        shape: "S7z"
                    }
                }
            }
        },
        GetMeeting: {
            http: {
                method: "GET",
                requestUri: "/meetings/{meetingId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "S33"
                    }
                }
            }
        },
        GetMessagingSessionEndpoint: {
            http: {
                method: "GET",
                requestUri: "/endpoints/messaging-session",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Endpoint: {
                        type: "structure",
                        members: {
                            Url: {}
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        GetPhoneNumber: {
            http: {
                method: "GET",
                requestUri: "/phone-numbers/{phoneNumberId}"
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "phoneNumberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumber: {
                        shape: "S88"
                    }
                }
            }
        },
        GetPhoneNumberOrder: {
            http: {
                method: "GET",
                requestUri: "/phone-number-orders/{phoneNumberOrderId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberOrderId" ],
                members: {
                    PhoneNumberOrderId: {
                        location: "uri",
                        locationName: "phoneNumberOrderId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberOrder: {
                        shape: "S3d"
                    }
                }
            }
        },
        GetPhoneNumberSettings: {
            http: {
                method: "GET",
                requestUri: "/settings/phone-number",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    CallingName: {
                        shape: "S1j"
                    },
                    CallingNameUpdatedTimestamp: {
                        shape: "S1z"
                    }
                }
            }
        },
        GetProxySession: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "ProxySessionId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    ProxySessionId: {
                        location: "uri",
                        locationName: "proxySessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProxySession: {
                        shape: "S3v"
                    }
                }
            }
        },
        GetRetentionSettings: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/retention-settings"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RetentionSettings: {
                        shape: "S8n"
                    },
                    InitiateDeletionTimestamp: {
                        shape: "S1z"
                    }
                }
            }
        },
        GetRoom: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/rooms/{roomId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Room: {
                        shape: "S42"
                    }
                }
            }
        },
        GetSipMediaApplication: {
            http: {
                method: "GET",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplication: {
                        shape: "S4e"
                    }
                }
            }
        },
        GetSipMediaApplicationLoggingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}/logging-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplicationLoggingConfiguration: {
                        shape: "S8w"
                    }
                }
            }
        },
        GetSipRule: {
            http: {
                method: "GET",
                requestUri: "/sip-rules/{sipRuleId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipRuleId" ],
                members: {
                    SipRuleId: {
                        location: "uri",
                        locationName: "sipRuleId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipRule: {
                        shape: "S4p"
                    }
                }
            }
        },
        GetUser: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/users/{userId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S4t"
                    }
                }
            }
        },
        GetUserSettings: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/users/{userId}/settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserSettings: {
                        shape: "S93"
                    }
                }
            }
        },
        GetVoiceConnector: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnector: {
                        shape: "S50"
                    }
                }
            }
        },
        GetVoiceConnectorEmergencyCallingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmergencyCallingConfiguration: {
                        shape: "S99"
                    }
                }
            }
        },
        GetVoiceConnectorGroup: {
            http: {
                method: "GET",
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectorGroup: {
                        shape: "S57"
                    }
                }
            }
        },
        GetVoiceConnectorLoggingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/logging-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S9h"
                    }
                }
            }
        },
        GetVoiceConnectorOrigination: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/origination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Origination: {
                        shape: "S9k"
                    }
                }
            }
        },
        GetVoiceConnectorProxy: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Proxy: {
                        shape: "S9t"
                    }
                }
            }
        },
        GetVoiceConnectorStreamingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/streaming-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingConfiguration: {
                        shape: "S9y"
                    }
                }
            }
        },
        GetVoiceConnectorTermination: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Termination: {
                        shape: "Sa5"
                    }
                }
            }
        },
        GetVoiceConnectorTerminationHealth: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination/health",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TerminationHealth: {
                        type: "structure",
                        members: {
                            Timestamp: {
                                shape: "S1z"
                            },
                            Source: {}
                        }
                    }
                }
            }
        },
        InviteUsers: {
            http: {
                requestUri: "/accounts/{accountId}/users?operation=add",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserEmailList" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserEmailList: {
                        type: "list",
                        member: {
                            shape: "S4r"
                        }
                    },
                    UserType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Invites: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InviteId: {},
                                Status: {},
                                EmailAddress: {
                                    shape: "S4r"
                                },
                                EmailStatus: {}
                            }
                        }
                    }
                }
            }
        },
        ListAccounts: {
            http: {
                method: "GET",
                requestUri: "/accounts"
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    UserEmail: {
                        shape: "S4r",
                        location: "querystring",
                        locationName: "user-email"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accounts: {
                        type: "list",
                        member: {
                            shape: "S1x"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAppInstanceAdmins: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/admins",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sao",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {},
                    AppInstanceAdmins: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Admin: {
                                    shape: "S2a"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "Sao"
                    }
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        ListAppInstanceUsers: {
            http: {
                method: "GET",
                requestUri: "/app-instance-users",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "querystring",
                        locationName: "app-instance-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sao",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {},
                    AppInstanceUsers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppInstanceUserArn: {},
                                Name: {
                                    shape: "S2e"
                                },
                                Metadata: {
                                    shape: "S23"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "Sao"
                    }
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        ListAppInstances: {
            http: {
                method: "GET",
                requestUri: "/app-instances",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sao",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppInstanceArn: {},
                                Name: {
                                    shape: "S22"
                                },
                                Metadata: {
                                    shape: "S23"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "Sao"
                    }
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        ListAttendeeTags: {
            http: {
                method: "GET",
                requestUri: "/meetings/{meetingId}/attendees/{attendeeId}/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "attendeeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S25"
                    }
                }
            }
        },
        ListAttendees: {
            http: {
                method: "GET",
                requestUri: "/meetings/{meetingId}/attendees",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendees: {
                        shape: "St"
                    },
                    NextToken: {}
                }
            }
        },
        ListBots: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/bots",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Bots: {
                        type: "list",
                        member: {
                            shape: "S2k"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListChannelBans: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/bans",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sao",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    NextToken: {
                        shape: "Sao"
                    },
                    ChannelBans: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Member: {
                                    shape: "S2a"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListChannelMemberships: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/memberships",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sao",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    ChannelMemberships: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Member: {
                                    shape: "S2a"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "Sao"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListChannelMembershipsForAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels?scope=app-instance-user-memberships",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sao",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMemberships: {
                        type: "list",
                        member: {
                            shape: "S6n"
                        }
                    },
                    NextToken: {
                        shape: "Sao"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListChannelMessages: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/messages",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    SortOrder: {
                        location: "querystring",
                        locationName: "sort-order"
                    },
                    NotBefore: {
                        location: "querystring",
                        locationName: "not-before",
                        type: "timestamp"
                    },
                    NotAfter: {
                        location: "querystring",
                        locationName: "not-after",
                        type: "timestamp"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sao",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    NextToken: {
                        shape: "Sao"
                    },
                    ChannelMessages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MessageId: {},
                                Content: {
                                    shape: "S7q"
                                },
                                Metadata: {
                                    shape: "S23"
                                },
                                Type: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                },
                                LastUpdatedTimestamp: {
                                    type: "timestamp"
                                },
                                LastEditedTimestamp: {
                                    type: "timestamp"
                                },
                                Sender: {
                                    shape: "S2a"
                                },
                                Redacted: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListChannelModerators: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/moderators",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sao",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    NextToken: {
                        shape: "Sao"
                    },
                    ChannelModerators: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Moderator: {
                                    shape: "S2a"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListChannels: {
            http: {
                method: "GET",
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "querystring",
                        locationName: "app-instance-arn"
                    },
                    Privacy: {
                        location: "querystring",
                        locationName: "privacy"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sao",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        type: "list",
                        member: {
                            shape: "S6o"
                        }
                    },
                    NextToken: {
                        shape: "Sao"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListChannelsModeratedByAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels?scope=app-instance-user-moderated-channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sao",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        type: "list",
                        member: {
                            shape: "S6s"
                        }
                    },
                    NextToken: {
                        shape: "Sao"
                    }
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListMeetingTags: {
            http: {
                method: "GET",
                requestUri: "/meetings/{meetingId}/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S25"
                    }
                }
            }
        },
        ListMeetings: {
            http: {
                method: "GET",
                requestUri: "/meetings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meetings: {
                        type: "list",
                        member: {
                            shape: "S33"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPhoneNumberOrders: {
            http: {
                method: "GET",
                requestUri: "/phone-number-orders",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberOrders: {
                        type: "list",
                        member: {
                            shape: "S3d"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPhoneNumbers: {
            http: {
                method: "GET",
                requestUri: "/phone-numbers"
            },
            input: {
                type: "structure",
                members: {
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    ProductType: {
                        location: "querystring",
                        locationName: "product-type"
                    },
                    FilterName: {
                        location: "querystring",
                        locationName: "filter-name"
                    },
                    FilterValue: {
                        location: "querystring",
                        locationName: "filter-value"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumbers: {
                        type: "list",
                        member: {
                            shape: "S88"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProxySessions: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProxySessions: {
                        type: "list",
                        member: {
                            shape: "S3v"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRoomMemberships: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/rooms/{roomId}/memberships",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RoomMemberships: {
                        type: "list",
                        member: {
                            shape: "S45"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRooms: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/rooms",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    MemberId: {
                        location: "querystring",
                        locationName: "member-id"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rooms: {
                        type: "list",
                        member: {
                            shape: "S42"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSipMediaApplications: {
            http: {
                method: "GET",
                requestUri: "/sip-media-applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplications: {
                        type: "list",
                        member: {
                            shape: "S4e"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSipRules: {
            http: {
                method: "GET",
                requestUri: "/sip-rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    SipMediaApplicationId: {
                        location: "querystring",
                        locationName: "sip-media-application"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipRules: {
                        type: "list",
                        member: {
                            shape: "S4p"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {
                        shape: "S31",
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S25"
                    }
                }
            }
        },
        ListUsers: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/users",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserEmail: {
                        shape: "S4r",
                        location: "querystring",
                        locationName: "user-email"
                    },
                    UserType: {
                        location: "querystring",
                        locationName: "user-type"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            shape: "S4t"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListVoiceConnectorGroups: {
            http: {
                method: "GET",
                requestUri: "/voice-connector-groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectorGroups: {
                        type: "list",
                        member: {
                            shape: "S57"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListVoiceConnectorTerminationCredentials: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination/credentials",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Usernames: {
                        shape: "S61"
                    }
                }
            }
        },
        ListVoiceConnectors: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectors: {
                        type: "list",
                        member: {
                            shape: "S50"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        LogoutUser: {
            http: {
                requestUri: "/accounts/{accountId}/users/{userId}?operation=logout",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAppInstanceRetentionSettings: {
            http: {
                method: "PUT",
                requestUri: "/app-instances/{appInstanceArn}/retention-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "AppInstanceRetentionSettings" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    AppInstanceRetentionSettings: {
                        shape: "S7b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceRetentionSettings: {
                        shape: "S7b"
                    },
                    InitiateDeletionTimestamp: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        PutAppInstanceStreamingConfigurations: {
            http: {
                method: "PUT",
                requestUri: "/app-instances/{appInstanceArn}/streaming-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "AppInstanceStreamingConfigurations" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    AppInstanceStreamingConfigurations: {
                        shape: "S7g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceStreamingConfigurations: {
                        shape: "S7g"
                    }
                }
            }
        },
        PutEventsConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{accountId}/bots/{botId}/events-configuration",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AccountId", "BotId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    BotId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    OutboundEventsHTTPSEndpoint: {
                        shape: "S1s"
                    },
                    LambdaFunctionArn: {
                        shape: "S1s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventsConfiguration: {
                        shape: "S7w"
                    }
                }
            }
        },
        PutRetentionSettings: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{accountId}/retention-settings",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RetentionSettings" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RetentionSettings: {
                        shape: "S8n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RetentionSettings: {
                        shape: "S8n"
                    },
                    InitiateDeletionTimestamp: {
                        shape: "S1z"
                    }
                }
            }
        },
        PutSipMediaApplicationLoggingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}/logging-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    },
                    SipMediaApplicationLoggingConfiguration: {
                        shape: "S8w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplicationLoggingConfiguration: {
                        shape: "S8w"
                    }
                }
            }
        },
        PutVoiceConnectorEmergencyCallingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "EmergencyCallingConfiguration" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    EmergencyCallingConfiguration: {
                        shape: "S99"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmergencyCallingConfiguration: {
                        shape: "S99"
                    }
                }
            }
        },
        PutVoiceConnectorLoggingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/logging-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "LoggingConfiguration" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    LoggingConfiguration: {
                        shape: "S9h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S9h"
                    }
                }
            }
        },
        PutVoiceConnectorOrigination: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/origination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "Origination" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Origination: {
                        shape: "S9k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Origination: {
                        shape: "S9k"
                    }
                }
            }
        },
        PutVoiceConnectorProxy: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy"
            },
            input: {
                type: "structure",
                required: [ "DefaultSessionExpiryMinutes", "PhoneNumberPoolCountries", "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    DefaultSessionExpiryMinutes: {
                        type: "integer"
                    },
                    PhoneNumberPoolCountries: {
                        type: "list",
                        member: {}
                    },
                    FallBackPhoneNumber: {
                        shape: "S3"
                    },
                    Disabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Proxy: {
                        shape: "S9t"
                    }
                }
            }
        },
        PutVoiceConnectorStreamingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/streaming-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "StreamingConfiguration" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    StreamingConfiguration: {
                        shape: "S9y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingConfiguration: {
                        shape: "S9y"
                    }
                }
            }
        },
        PutVoiceConnectorTermination: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "Termination" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Termination: {
                        shape: "Sa5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Termination: {
                        shape: "Sa5"
                    }
                }
            }
        },
        PutVoiceConnectorTerminationCredentials: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}/termination/credentials?operation=put",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Credentials: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Username: {
                                    shape: "S1s"
                                },
                                Password: {
                                    shape: "S1s"
                                }
                            }
                        }
                    }
                }
            }
        },
        RedactChannelMessage: {
            http: {
                requestUri: "/channels/{channelArn}/messages/{messageId}?operation=redact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    MessageId: {}
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        RedactConversationMessage: {
            http: {
                requestUri: "/accounts/{accountId}/conversations/{conversationId}/messages/{messageId}?operation=redact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "ConversationId", "MessageId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    ConversationId: {
                        location: "uri",
                        locationName: "conversationId"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RedactRoomMessage: {
            http: {
                requestUri: "/accounts/{accountId}/rooms/{roomId}/messages/{messageId}?operation=redact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId", "MessageId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RegenerateSecurityToken: {
            http: {
                requestUri: "/accounts/{accountId}/bots/{botId}?operation=regenerate-security-token",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "BotId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    BotId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Bot: {
                        shape: "S2k"
                    }
                }
            }
        },
        ResetPersonalPIN: {
            http: {
                requestUri: "/accounts/{accountId}/users/{userId}?operation=reset-personal-pin",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S4t"
                    }
                }
            }
        },
        RestorePhoneNumber: {
            http: {
                requestUri: "/phone-numbers/{phoneNumberId}?operation=restore",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "phoneNumberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumber: {
                        shape: "S88"
                    }
                }
            }
        },
        SearchAvailablePhoneNumbers: {
            http: {
                method: "GET",
                requestUri: "/search?type=phone-numbers"
            },
            input: {
                type: "structure",
                members: {
                    AreaCode: {
                        location: "querystring",
                        locationName: "area-code"
                    },
                    City: {
                        location: "querystring",
                        locationName: "city"
                    },
                    Country: {
                        location: "querystring",
                        locationName: "country"
                    },
                    State: {
                        location: "querystring",
                        locationName: "state"
                    },
                    TollFreePrefix: {
                        location: "querystring",
                        locationName: "toll-free-prefix"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    E164PhoneNumbers: {
                        shape: "S7"
                    }
                }
            }
        },
        SendChannelMessage: {
            http: {
                requestUri: "/channels/{channelArn}/messages",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "Content", "Type", "Persistence", "ClientRequestToken" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Content: {
                        type: "string",
                        sensitive: true
                    },
                    Type: {},
                    Persistence: {},
                    Metadata: {
                        shape: "S23"
                    },
                    ClientRequestToken: {
                        shape: "S24",
                        idempotencyToken: true
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    MessageId: {}
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        TagAttendee: {
            http: {
                requestUri: "/meetings/{meetingId}/attendees/{attendeeId}/tags?operation=add",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId", "Tags" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "attendeeId"
                    },
                    Tags: {
                        shape: "So"
                    }
                }
            }
        },
        TagMeeting: {
            http: {
                requestUri: "/meetings/{meetingId}/tags?operation=add",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "Tags" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    Tags: {
                        shape: "S2z"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags?operation=tag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {
                        shape: "S31"
                    },
                    Tags: {
                        shape: "S25"
                    }
                }
            }
        },
        UntagAttendee: {
            http: {
                requestUri: "/meetings/{meetingId}/attendees/{attendeeId}/tags?operation=delete",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "TagKeys", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "attendeeId"
                    },
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    }
                }
            }
        },
        UntagMeeting: {
            http: {
                requestUri: "/meetings/{meetingId}/tags?operation=delete",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "TagKeys" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    }
                }
            }
        },
        UntagResource: {
            http: {
                requestUri: "/tags?operation=untag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {
                        shape: "S31"
                    },
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    }
                }
            }
        },
        UpdateAccount: {
            http: {
                requestUri: "/accounts/{accountId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Account: {
                        shape: "S1x"
                    }
                }
            }
        },
        UpdateAccountSettings: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{accountId}/settings",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "AccountSettings" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    AccountSettings: {
                        shape: "S78"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAppInstance: {
            http: {
                method: "PUT",
                requestUri: "/app-instances/{appInstanceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "Name" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    Name: {
                        shape: "S22"
                    },
                    Metadata: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {}
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        UpdateAppInstanceUser: {
            http: {
                method: "PUT",
                requestUri: "/app-instance-users/{appInstanceUserArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn", "Name" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    Name: {
                        shape: "S2e"
                    },
                    Metadata: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {}
                }
            },
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        UpdateBot: {
            http: {
                requestUri: "/accounts/{accountId}/bots/{botId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "BotId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    BotId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    Disabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Bot: {
                        shape: "S2k"
                    }
                }
            }
        },
        UpdateChannel: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "Name", "Mode" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Name: {
                        shape: "S22"
                    },
                    Mode: {},
                    Metadata: {
                        shape: "S23"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {}
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        UpdateChannelMessage: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}/messages/{messageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    Content: {
                        shape: "S7q"
                    },
                    Metadata: {
                        shape: "S23"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    MessageId: {}
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        UpdateChannelReadMarker: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}/readMarker",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {}
                }
            },
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        UpdateGlobalSettings: {
            http: {
                method: "PUT",
                requestUri: "/settings",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "BusinessCalling", "VoiceConnector" ],
                members: {
                    BusinessCalling: {
                        shape: "S7y"
                    },
                    VoiceConnector: {
                        shape: "S7z"
                    }
                }
            }
        },
        UpdatePhoneNumber: {
            http: {
                requestUri: "/phone-numbers/{phoneNumberId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "phoneNumberId"
                    },
                    ProductType: {},
                    CallingName: {
                        shape: "S1j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumber: {
                        shape: "S88"
                    }
                }
            }
        },
        UpdatePhoneNumberSettings: {
            http: {
                method: "PUT",
                requestUri: "/settings/phone-number",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "CallingName" ],
                members: {
                    CallingName: {
                        shape: "S1j"
                    }
                }
            }
        },
        UpdateProxySession: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Capabilities", "VoiceConnectorId", "ProxySessionId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    ProxySessionId: {
                        location: "uri",
                        locationName: "proxySessionId"
                    },
                    Capabilities: {
                        shape: "S3n"
                    },
                    ExpiryMinutes: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProxySession: {
                        shape: "S3v"
                    }
                }
            }
        },
        UpdateRoom: {
            http: {
                requestUri: "/accounts/{accountId}/rooms/{roomId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    Name: {
                        shape: "S1s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Room: {
                        shape: "S42"
                    }
                }
            }
        },
        UpdateRoomMembership: {
            http: {
                requestUri: "/accounts/{accountId}/rooms/{roomId}/memberships/{memberId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId", "MemberId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "memberId"
                    },
                    Role: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RoomMembership: {
                        shape: "S45"
                    }
                }
            }
        },
        UpdateSipMediaApplication: {
            http: {
                method: "PUT",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    },
                    Name: {},
                    Endpoints: {
                        shape: "S4a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplication: {
                        shape: "S4e"
                    }
                }
            }
        },
        UpdateSipRule: {
            http: {
                method: "PUT",
                requestUri: "/sip-rules/{sipRuleId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "SipRuleId", "Name" ],
                members: {
                    SipRuleId: {
                        location: "uri",
                        locationName: "sipRuleId"
                    },
                    Name: {},
                    Disabled: {
                        type: "boolean"
                    },
                    TargetApplications: {
                        shape: "S4l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipRule: {
                        shape: "S4p"
                    }
                }
            }
        },
        UpdateUser: {
            http: {
                requestUri: "/accounts/{accountId}/users/{userId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    LicenseType: {},
                    UserType: {},
                    AlexaForBusinessMetadata: {
                        shape: "S1q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S4t"
                    }
                }
            }
        },
        UpdateUserSettings: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{accountId}/users/{userId}/settings",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId", "UserSettings" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    UserSettings: {
                        shape: "S93"
                    }
                }
            }
        },
        UpdateVoiceConnector: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "Name", "RequireEncryption" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Name: {},
                    RequireEncryption: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnector: {
                        shape: "S50"
                    }
                }
            }
        },
        UpdateVoiceConnectorGroup: {
            http: {
                method: "PUT",
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId", "Name", "VoiceConnectorItems" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    },
                    Name: {},
                    VoiceConnectorItems: {
                        shape: "S53"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectorGroup: {
                        shape: "S57"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "string",
            sensitive: true
        },
        S7: {
            type: "list",
            member: {
                shape: "S3"
            }
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PhoneNumberId: {},
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    GroupName: {}
                }
            }
        },
        Sm: {
            type: "structure",
            required: [ "ExternalUserId" ],
            members: {
                ExternalUserId: {
                    shape: "Sn"
                },
                Tags: {
                    shape: "So"
                }
            }
        },
        Sn: {
            type: "string",
            sensitive: true
        },
        So: {
            type: "list",
            member: {
                shape: "Sp"
            }
        },
        Sp: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {
                    shape: "Sq"
                },
                Value: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Sq: {
            type: "string",
            sensitive: true
        },
        St: {
            type: "list",
            member: {
                shape: "Su"
            }
        },
        Su: {
            type: "structure",
            members: {
                ExternalUserId: {
                    shape: "Sn"
                },
                AttendeeId: {},
                JoinToken: {
                    shape: "Sv"
                }
            }
        },
        Sv: {
            type: "string",
            sensitive: true
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ExternalUserId: {
                        shape: "Sn"
                    },
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        S16: {
            type: "list",
            member: {}
        },
        S19: {
            type: "list",
            member: {}
        },
        S1b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    UserId: {},
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        S1j: {
            type: "string",
            sensitive: true
        },
        S1q: {
            type: "structure",
            members: {
                IsAlexaForBusinessEnabled: {
                    type: "boolean"
                },
                AlexaForBusinessRoomArn: {
                    shape: "S1s"
                }
            }
        },
        S1s: {
            type: "string",
            sensitive: true
        },
        S1x: {
            type: "structure",
            required: [ "AwsAccountId", "AccountId", "Name" ],
            members: {
                AwsAccountId: {},
                AccountId: {},
                Name: {},
                AccountType: {},
                CreatedTimestamp: {
                    shape: "S1z"
                },
                DefaultLicense: {},
                SupportedLicenses: {
                    type: "list",
                    member: {}
                },
                SigninDelegateGroups: {
                    shape: "Sg"
                }
            }
        },
        S1z: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S22: {
            type: "string",
            sensitive: true
        },
        S23: {
            type: "string",
            sensitive: true
        },
        S24: {
            type: "string",
            sensitive: true
        },
        S25: {
            type: "list",
            member: {
                shape: "Sp"
            }
        },
        S2a: {
            type: "structure",
            members: {
                Arn: {},
                Name: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S2e: {
            type: "string",
            sensitive: true
        },
        S2k: {
            type: "structure",
            members: {
                BotId: {},
                UserId: {},
                DisplayName: {
                    shape: "S1s"
                },
                BotType: {},
                Disabled: {
                    type: "boolean"
                },
                CreatedTimestamp: {
                    shape: "S1z"
                },
                UpdatedTimestamp: {
                    shape: "S1z"
                },
                BotEmail: {
                    shape: "S1s"
                },
                SecurityToken: {
                    shape: "S1s"
                }
            }
        },
        S2y: {
            type: "string",
            sensitive: true
        },
        S2z: {
            type: "list",
            member: {
                shape: "Sp"
            }
        },
        S30: {
            type: "structure",
            members: {
                SnsTopicArn: {
                    shape: "S31"
                },
                SqsQueueArn: {
                    shape: "S31"
                }
            }
        },
        S31: {
            type: "string",
            sensitive: true
        },
        S33: {
            type: "structure",
            members: {
                MeetingId: {},
                ExternalMeetingId: {
                    shape: "S2y"
                },
                MediaPlacement: {
                    type: "structure",
                    members: {
                        AudioHostUrl: {},
                        AudioFallbackUrl: {},
                        ScreenDataUrl: {},
                        ScreenSharingUrl: {},
                        ScreenViewingUrl: {},
                        SignalingUrl: {},
                        TurnControlUrl: {}
                    }
                },
                MediaRegion: {}
            }
        },
        S3d: {
            type: "structure",
            members: {
                PhoneNumberOrderId: {},
                ProductType: {},
                Status: {},
                OrderedPhoneNumbers: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            E164PhoneNumber: {
                                shape: "S3"
                            },
                            Status: {}
                        }
                    }
                },
                CreatedTimestamp: {
                    shape: "S1z"
                },
                UpdatedTimestamp: {
                    shape: "S1z"
                }
            }
        },
        S3n: {
            type: "list",
            member: {}
        },
        S3r: {
            type: "structure",
            required: [ "Country", "AreaCode" ],
            members: {
                Country: {},
                AreaCode: {}
            }
        },
        S3v: {
            type: "structure",
            members: {
                VoiceConnectorId: {},
                ProxySessionId: {},
                Name: {},
                Status: {},
                ExpiryMinutes: {
                    type: "integer"
                },
                Capabilities: {
                    shape: "S3n"
                },
                CreatedTimestamp: {
                    shape: "S1z"
                },
                UpdatedTimestamp: {
                    shape: "S1z"
                },
                EndedTimestamp: {
                    shape: "S1z"
                },
                Participants: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            PhoneNumber: {
                                shape: "S3"
                            },
                            ProxyPhoneNumber: {
                                shape: "S3"
                            }
                        }
                    }
                },
                NumberSelectionBehavior: {},
                GeoMatchLevel: {},
                GeoMatchParams: {
                    shape: "S3r"
                }
            }
        },
        S42: {
            type: "structure",
            members: {
                RoomId: {},
                Name: {
                    shape: "S1s"
                },
                AccountId: {},
                CreatedBy: {},
                CreatedTimestamp: {
                    shape: "S1z"
                },
                UpdatedTimestamp: {
                    shape: "S1z"
                }
            }
        },
        S45: {
            type: "structure",
            members: {
                RoomId: {},
                Member: {
                    type: "structure",
                    members: {
                        MemberId: {},
                        MemberType: {},
                        Email: {
                            shape: "S1s"
                        },
                        FullName: {
                            shape: "S1s"
                        },
                        AccountId: {}
                    }
                },
                Role: {},
                InvitedBy: {},
                UpdatedTimestamp: {
                    shape: "S1z"
                }
            }
        },
        S4a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    LambdaArn: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S4e: {
            type: "structure",
            members: {
                SipMediaApplicationId: {},
                AwsRegion: {},
                Name: {},
                Endpoints: {
                    shape: "S4a"
                },
                CreatedTimestamp: {
                    shape: "S1z"
                },
                UpdatedTimestamp: {
                    shape: "S1z"
                }
            }
        },
        S4l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SipMediaApplicationId: {},
                    Priority: {
                        type: "integer"
                    },
                    AwsRegion: {}
                }
            }
        },
        S4p: {
            type: "structure",
            members: {
                SipRuleId: {},
                Name: {},
                Disabled: {
                    type: "boolean"
                },
                TriggerType: {},
                TriggerValue: {},
                TargetApplications: {
                    shape: "S4l"
                },
                CreatedTimestamp: {
                    shape: "S1z"
                },
                UpdatedTimestamp: {
                    shape: "S1z"
                }
            }
        },
        S4r: {
            type: "string",
            sensitive: true
        },
        S4t: {
            type: "structure",
            required: [ "UserId" ],
            members: {
                UserId: {},
                AccountId: {},
                PrimaryEmail: {
                    shape: "S4r"
                },
                PrimaryProvisionedNumber: {
                    shape: "S1s"
                },
                DisplayName: {
                    shape: "S1s"
                },
                LicenseType: {},
                UserType: {},
                UserRegistrationStatus: {},
                UserInvitationStatus: {},
                RegisteredOn: {
                    shape: "S1z"
                },
                InvitedOn: {
                    shape: "S1z"
                },
                AlexaForBusinessMetadata: {
                    shape: "S1q"
                },
                PersonalPIN: {}
            }
        },
        S50: {
            type: "structure",
            members: {
                VoiceConnectorId: {},
                AwsRegion: {},
                Name: {},
                OutboundHostName: {},
                RequireEncryption: {
                    type: "boolean"
                },
                CreatedTimestamp: {
                    shape: "S1z"
                },
                UpdatedTimestamp: {
                    shape: "S1z"
                }
            }
        },
        S53: {
            type: "list",
            member: {
                type: "structure",
                required: [ "VoiceConnectorId", "Priority" ],
                members: {
                    VoiceConnectorId: {},
                    Priority: {
                        type: "integer"
                    }
                }
            }
        },
        S57: {
            type: "structure",
            members: {
                VoiceConnectorGroupId: {},
                Name: {},
                VoiceConnectorItems: {
                    shape: "S53"
                },
                CreatedTimestamp: {
                    shape: "S1z"
                },
                UpdatedTimestamp: {
                    shape: "S1z"
                }
            }
        },
        S61: {
            type: "list",
            member: {
                shape: "S1s"
            }
        },
        S6n: {
            type: "structure",
            members: {
                ChannelSummary: {
                    shape: "S6o"
                },
                AppInstanceUserMembershipSummary: {
                    type: "structure",
                    members: {
                        Type: {},
                        ReadMarkerTimestamp: {
                            type: "timestamp"
                        }
                    }
                }
            }
        },
        S6o: {
            type: "structure",
            members: {
                Name: {
                    shape: "S22"
                },
                ChannelArn: {},
                Mode: {},
                Privacy: {},
                Metadata: {
                    shape: "S23"
                },
                LastMessageTimestamp: {
                    type: "timestamp"
                }
            }
        },
        S6s: {
            type: "structure",
            members: {
                ChannelSummary: {
                    shape: "S6o"
                }
            }
        },
        S78: {
            type: "structure",
            members: {
                DisableRemoteControl: {
                    type: "boolean"
                },
                EnableDialOut: {
                    type: "boolean"
                }
            }
        },
        S7b: {
            type: "structure",
            members: {
                ChannelRetentionSettings: {
                    type: "structure",
                    members: {
                        RetentionDays: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S7g: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AppInstanceDataType", "ResourceArn" ],
                members: {
                    AppInstanceDataType: {},
                    ResourceArn: {
                        shape: "S31"
                    }
                }
            }
        },
        S7q: {
            type: "string",
            sensitive: true
        },
        S7w: {
            type: "structure",
            members: {
                BotId: {},
                OutboundEventsHTTPSEndpoint: {
                    shape: "S1s"
                },
                LambdaFunctionArn: {
                    shape: "S1s"
                }
            }
        },
        S7y: {
            type: "structure",
            members: {
                CdrBucket: {}
            }
        },
        S7z: {
            type: "structure",
            members: {
                CdrBucket: {}
            }
        },
        S88: {
            type: "structure",
            members: {
                PhoneNumberId: {},
                E164PhoneNumber: {
                    shape: "S3"
                },
                Type: {},
                ProductType: {},
                Status: {},
                Capabilities: {
                    type: "structure",
                    members: {
                        InboundCall: {
                            type: "boolean"
                        },
                        OutboundCall: {
                            type: "boolean"
                        },
                        InboundSMS: {
                            type: "boolean"
                        },
                        OutboundSMS: {
                            type: "boolean"
                        },
                        InboundMMS: {
                            type: "boolean"
                        },
                        OutboundMMS: {
                            type: "boolean"
                        }
                    }
                },
                Associations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Value: {},
                            Name: {},
                            AssociatedTimestamp: {
                                shape: "S1z"
                            }
                        }
                    }
                },
                CallingName: {
                    shape: "S1j"
                },
                CallingNameStatus: {},
                CreatedTimestamp: {
                    shape: "S1z"
                },
                UpdatedTimestamp: {
                    shape: "S1z"
                },
                DeletionTimestamp: {
                    shape: "S1z"
                }
            }
        },
        S8n: {
            type: "structure",
            members: {
                RoomRetentionSettings: {
                    type: "structure",
                    members: {
                        RetentionDays: {
                            type: "integer"
                        }
                    }
                },
                ConversationRetentionSettings: {
                    type: "structure",
                    members: {
                        RetentionDays: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S8w: {
            type: "structure",
            members: {
                EnableSipMediaApplicationMessageLogs: {
                    type: "boolean"
                }
            }
        },
        S93: {
            type: "structure",
            required: [ "Telephony" ],
            members: {
                Telephony: {
                    type: "structure",
                    required: [ "InboundCalling", "OutboundCalling", "SMS" ],
                    members: {
                        InboundCalling: {
                            type: "boolean"
                        },
                        OutboundCalling: {
                            type: "boolean"
                        },
                        SMS: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S99: {
            type: "structure",
            members: {
                DNIS: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "EmergencyPhoneNumber", "CallingCountry" ],
                        members: {
                            EmergencyPhoneNumber: {
                                shape: "S3"
                            },
                            TestPhoneNumber: {
                                shape: "S3"
                            },
                            CallingCountry: {}
                        }
                    }
                }
            }
        },
        S9h: {
            type: "structure",
            members: {
                EnableSIPLogs: {
                    type: "boolean"
                }
            }
        },
        S9k: {
            type: "structure",
            members: {
                Routes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Host: {},
                            Port: {
                                type: "integer"
                            },
                            Protocol: {},
                            Priority: {
                                type: "integer"
                            },
                            Weight: {
                                type: "integer"
                            }
                        }
                    }
                },
                Disabled: {
                    type: "boolean"
                }
            }
        },
        S9t: {
            type: "structure",
            members: {
                DefaultSessionExpiryMinutes: {
                    type: "integer"
                },
                Disabled: {
                    type: "boolean"
                },
                FallBackPhoneNumber: {
                    shape: "S3"
                },
                PhoneNumberCountries: {
                    shape: "S9v"
                }
            }
        },
        S9v: {
            type: "list",
            member: {}
        },
        S9y: {
            type: "structure",
            required: [ "DataRetentionInHours" ],
            members: {
                DataRetentionInHours: {
                    type: "integer"
                },
                Disabled: {
                    type: "boolean"
                },
                StreamingNotificationTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "NotificationTarget" ],
                        members: {
                            NotificationTarget: {}
                        }
                    }
                }
            }
        },
        Sa5: {
            type: "structure",
            members: {
                CpsLimit: {
                    type: "integer"
                },
                DefaultPhoneNumber: {
                    shape: "S3"
                },
                CallingRegions: {
                    type: "list",
                    member: {}
                },
                CidrAllowedList: {
                    shape: "S9v"
                },
                Disabled: {
                    type: "boolean"
                }
            }
        },
        Sao: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListAccounts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAppInstanceAdmins: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAppInstanceUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAppInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAttendees: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListBots: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelBans: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelMemberships: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelMembershipsForAppInstanceUser: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelMessages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelModerators: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelsModeratedByAppInstanceUser: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMeetings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPhoneNumberOrders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPhoneNumbers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListProxySessions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRoomMemberships: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRooms: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSipMediaApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSipRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVoiceConnectorGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVoiceConnectors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["pinpointemail"] = {};

AWS.PinpointEmail = AWS.Service.defineService("pinpointemail", [ "2018-07-26" ]);

AWS.apiLoader.services["pinpointemail"]["2018-07-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-07-26",
        endpointPrefix: "email",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Pinpoint Email",
        serviceFullName: "Amazon Pinpoint Email Service",
        serviceId: "Pinpoint Email",
        signatureVersion: "v4",
        signingName: "ses",
        uid: "pinpoint-email-2018-07-26"
    },
    operations: {
        CreateConfigurationSet: {
            http: {
                requestUri: "/v1/email/configuration-sets"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {},
                    TrackingOptions: {
                        shape: "S3"
                    },
                    DeliveryOptions: {
                        shape: "S5"
                    },
                    ReputationOptions: {
                        shape: "S8"
                    },
                    SendingOptions: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateConfigurationSetEventDestination: {
            http: {
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName", "EventDestination" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {},
                    EventDestination: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDedicatedIpPool: {
            http: {
                requestUri: "/v1/email/dedicated-ip-pools"
            },
            input: {
                type: "structure",
                required: [ "PoolName" ],
                members: {
                    PoolName: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDeliverabilityTestReport: {
            http: {
                requestUri: "/v1/email/deliverability-dashboard/test"
            },
            input: {
                type: "structure",
                required: [ "FromEmailAddress", "Content" ],
                members: {
                    ReportName: {},
                    FromEmailAddress: {},
                    Content: {
                        shape: "S12"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ReportId", "DeliverabilityTestStatus" ],
                members: {
                    ReportId: {},
                    DeliverabilityTestStatus: {}
                }
            }
        },
        CreateEmailIdentity: {
            http: {
                requestUri: "/v1/email/identities"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityType: {},
                    VerifiedForSendingStatus: {
                        type: "boolean"
                    },
                    DkimAttributes: {
                        shape: "S1k"
                    }
                }
            }
        },
        DeleteConfigurationSet: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSetEventDestination: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDedicatedIpPool: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/dedicated-ip-pools/{PoolName}"
            },
            input: {
                type: "structure",
                required: [ "PoolName" ],
                members: {
                    PoolName: {
                        location: "uri",
                        locationName: "PoolName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEmailIdentity: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/identities/{EmailIdentity}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccount: {
            http: {
                method: "GET",
                requestUri: "/v1/email/account"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    SendQuota: {
                        type: "structure",
                        members: {
                            Max24HourSend: {
                                type: "double"
                            },
                            MaxSendRate: {
                                type: "double"
                            },
                            SentLast24Hours: {
                                type: "double"
                            }
                        }
                    },
                    SendingEnabled: {
                        type: "boolean"
                    },
                    DedicatedIpAutoWarmupEnabled: {
                        type: "boolean"
                    },
                    EnforcementStatus: {},
                    ProductionAccessEnabled: {
                        type: "boolean"
                    }
                }
            }
        },
        GetBlacklistReports: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/blacklist-report"
            },
            input: {
                type: "structure",
                required: [ "BlacklistItemNames" ],
                members: {
                    BlacklistItemNames: {
                        location: "querystring",
                        locationName: "BlacklistItemNames",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "BlacklistReport" ],
                members: {
                    BlacklistReport: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    RblName: {},
                                    ListingTime: {
                                        type: "timestamp"
                                    },
                                    Description: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        GetConfigurationSet: {
            http: {
                method: "GET",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetName: {},
                    TrackingOptions: {
                        shape: "S3"
                    },
                    DeliveryOptions: {
                        shape: "S5"
                    },
                    ReputationOptions: {
                        shape: "S8"
                    },
                    SendingOptions: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetConfigurationSetEventDestinations: {
            http: {
                method: "GET",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventDestinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "MatchingEventTypes" ],
                            members: {
                                Name: {},
                                Enabled: {
                                    type: "boolean"
                                },
                                MatchingEventTypes: {
                                    shape: "Sk"
                                },
                                KinesisFirehoseDestination: {
                                    shape: "Sm"
                                },
                                CloudWatchDestination: {
                                    shape: "So"
                                },
                                SnsDestination: {
                                    shape: "Su"
                                },
                                PinpointDestination: {
                                    shape: "Sv"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetDedicatedIp: {
            http: {
                method: "GET",
                requestUri: "/v1/email/dedicated-ips/{IP}"
            },
            input: {
                type: "structure",
                required: [ "Ip" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIp: {
                        shape: "S2m"
                    }
                }
            }
        },
        GetDedicatedIps: {
            http: {
                method: "GET",
                requestUri: "/v1/email/dedicated-ips"
            },
            input: {
                type: "structure",
                members: {
                    PoolName: {
                        location: "querystring",
                        locationName: "PoolName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIps: {
                        type: "list",
                        member: {
                            shape: "S2m"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetDeliverabilityDashboardOptions: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "DashboardEnabled" ],
                members: {
                    DashboardEnabled: {
                        type: "boolean"
                    },
                    SubscriptionExpiryDate: {
                        type: "timestamp"
                    },
                    AccountStatus: {},
                    ActiveSubscribedDomains: {
                        shape: "S2x"
                    },
                    PendingExpirationSubscribedDomains: {
                        shape: "S2x"
                    }
                }
            }
        },
        GetDeliverabilityTestReport: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/test-reports/{ReportId}"
            },
            input: {
                type: "structure",
                required: [ "ReportId" ],
                members: {
                    ReportId: {
                        location: "uri",
                        locationName: "ReportId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DeliverabilityTestReport", "OverallPlacement", "IspPlacements" ],
                members: {
                    DeliverabilityTestReport: {
                        shape: "S35"
                    },
                    OverallPlacement: {
                        shape: "S37"
                    },
                    IspPlacements: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IspName: {},
                                PlacementStatistics: {
                                    shape: "S37"
                                }
                            }
                        }
                    },
                    Message: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetDomainDeliverabilityCampaign: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/campaigns/{CampaignId}"
            },
            input: {
                type: "structure",
                required: [ "CampaignId" ],
                members: {
                    CampaignId: {
                        location: "uri",
                        locationName: "CampaignId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainDeliverabilityCampaign" ],
                members: {
                    DomainDeliverabilityCampaign: {
                        shape: "S3f"
                    }
                }
            }
        },
        GetDomainStatisticsReport: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/statistics-report/{Domain}"
            },
            input: {
                type: "structure",
                required: [ "Domain", "StartDate", "EndDate" ],
                members: {
                    Domain: {
                        location: "uri",
                        locationName: "Domain"
                    },
                    StartDate: {
                        location: "querystring",
                        locationName: "StartDate",
                        type: "timestamp"
                    },
                    EndDate: {
                        location: "querystring",
                        locationName: "EndDate",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "OverallVolume", "DailyVolumes" ],
                members: {
                    OverallVolume: {
                        type: "structure",
                        members: {
                            VolumeStatistics: {
                                shape: "S3p"
                            },
                            ReadRatePercent: {
                                type: "double"
                            },
                            DomainIspPlacements: {
                                shape: "S3q"
                            }
                        }
                    },
                    DailyVolumes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StartDate: {
                                    type: "timestamp"
                                },
                                VolumeStatistics: {
                                    shape: "S3p"
                                },
                                DomainIspPlacements: {
                                    shape: "S3q"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetEmailIdentity: {
            http: {
                method: "GET",
                requestUri: "/v1/email/identities/{EmailIdentity}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityType: {},
                    FeedbackForwardingStatus: {
                        type: "boolean"
                    },
                    VerifiedForSendingStatus: {
                        type: "boolean"
                    },
                    DkimAttributes: {
                        shape: "S1k"
                    },
                    MailFromAttributes: {
                        type: "structure",
                        required: [ "MailFromDomain", "MailFromDomainStatus", "BehaviorOnMxFailure" ],
                        members: {
                            MailFromDomain: {},
                            MailFromDomainStatus: {},
                            BehaviorOnMxFailure: {}
                        }
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        ListConfigurationSets: {
            http: {
                method: "GET",
                requestUri: "/v1/email/configuration-sets"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSets: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListDedicatedIpPools: {
            http: {
                method: "GET",
                requestUri: "/v1/email/dedicated-ip-pools"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIpPools: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListDeliverabilityTestReports: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/test-reports"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DeliverabilityTestReports" ],
                members: {
                    DeliverabilityTestReports: {
                        type: "list",
                        member: {
                            shape: "S35"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDomainDeliverabilityCampaigns: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/domains/{SubscribedDomain}/campaigns"
            },
            input: {
                type: "structure",
                required: [ "StartDate", "EndDate", "SubscribedDomain" ],
                members: {
                    StartDate: {
                        location: "querystring",
                        locationName: "StartDate",
                        type: "timestamp"
                    },
                    EndDate: {
                        location: "querystring",
                        locationName: "EndDate",
                        type: "timestamp"
                    },
                    SubscribedDomain: {
                        location: "uri",
                        locationName: "SubscribedDomain"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainDeliverabilityCampaigns" ],
                members: {
                    DomainDeliverabilityCampaigns: {
                        type: "list",
                        member: {
                            shape: "S3f"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEmailIdentities: {
            http: {
                method: "GET",
                requestUri: "/v1/email/identities"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmailIdentities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IdentityType: {},
                                IdentityName: {},
                                SendingEnabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v1/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        PutAccountDedicatedIpWarmupAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/account/dedicated-ips/warmup"
            },
            input: {
                type: "structure",
                members: {
                    AutoWarmupEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAccountSendingAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/account/sending"
            },
            input: {
                type: "structure",
                members: {
                    SendingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetDeliveryOptions: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/delivery-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    TlsPolicy: {},
                    SendingPoolName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetReputationOptions: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/reputation-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    ReputationMetricsEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetSendingOptions: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/sending"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    SendingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetTrackingOptions: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/tracking-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    CustomRedirectDomain: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDedicatedIpInPool: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/dedicated-ips/{IP}/pool"
            },
            input: {
                type: "structure",
                required: [ "Ip", "DestinationPoolName" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    },
                    DestinationPoolName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDedicatedIpWarmupAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/dedicated-ips/{IP}/warmup"
            },
            input: {
                type: "structure",
                required: [ "Ip", "WarmupPercentage" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    },
                    WarmupPercentage: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDeliverabilityDashboardOption: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/deliverability-dashboard"
            },
            input: {
                type: "structure",
                required: [ "DashboardEnabled" ],
                members: {
                    DashboardEnabled: {
                        type: "boolean"
                    },
                    SubscribedDomains: {
                        shape: "S2x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityDkimAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/identities/{EmailIdentity}/dkim"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    SigningEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityFeedbackAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/identities/{EmailIdentity}/feedback"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    EmailForwardingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityMailFromAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/identities/{EmailIdentity}/mail-from"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    MailFromDomain: {},
                    BehaviorOnMxFailure: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendEmail: {
            http: {
                requestUri: "/v1/email/outbound-emails"
            },
            input: {
                type: "structure",
                required: [ "Destination", "Content" ],
                members: {
                    FromEmailAddress: {},
                    Destination: {
                        type: "structure",
                        members: {
                            ToAddresses: {
                                shape: "S59"
                            },
                            CcAddresses: {
                                shape: "S59"
                            },
                            BccAddresses: {
                                shape: "S59"
                            }
                        }
                    },
                    ReplyToAddresses: {
                        shape: "S59"
                    },
                    FeedbackForwardingEmailAddress: {},
                    Content: {
                        shape: "S12"
                    },
                    EmailTags: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Value" ],
                            members: {
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "TagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConfigurationSetEventDestination: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName", "EventDestination" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    },
                    EventDestination: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "CustomRedirectDomain" ],
            members: {
                CustomRedirectDomain: {}
            }
        },
        S5: {
            type: "structure",
            members: {
                TlsPolicy: {},
                SendingPoolName: {}
            }
        },
        S8: {
            type: "structure",
            members: {
                ReputationMetricsEnabled: {
                    type: "boolean"
                },
                LastFreshStart: {
                    type: "timestamp"
                }
            }
        },
        Sb: {
            type: "structure",
            members: {
                SendingEnabled: {
                    type: "boolean"
                }
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                MatchingEventTypes: {
                    shape: "Sk"
                },
                KinesisFirehoseDestination: {
                    shape: "Sm"
                },
                CloudWatchDestination: {
                    shape: "So"
                },
                SnsDestination: {
                    shape: "Su"
                },
                PinpointDestination: {
                    shape: "Sv"
                }
            }
        },
        Sk: {
            type: "list",
            member: {}
        },
        Sm: {
            type: "structure",
            required: [ "IamRoleArn", "DeliveryStreamArn" ],
            members: {
                IamRoleArn: {},
                DeliveryStreamArn: {}
            }
        },
        So: {
            type: "structure",
            required: [ "DimensionConfigurations" ],
            members: {
                DimensionConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DimensionName", "DimensionValueSource", "DefaultDimensionValue" ],
                        members: {
                            DimensionName: {},
                            DimensionValueSource: {},
                            DefaultDimensionValue: {}
                        }
                    }
                }
            }
        },
        Su: {
            type: "structure",
            required: [ "TopicArn" ],
            members: {
                TopicArn: {}
            }
        },
        Sv: {
            type: "structure",
            members: {
                ApplicationArn: {}
            }
        },
        S12: {
            type: "structure",
            members: {
                Simple: {
                    type: "structure",
                    required: [ "Subject", "Body" ],
                    members: {
                        Subject: {
                            shape: "S14"
                        },
                        Body: {
                            type: "structure",
                            members: {
                                Text: {
                                    shape: "S14"
                                },
                                Html: {
                                    shape: "S14"
                                }
                            }
                        }
                    }
                },
                Raw: {
                    type: "structure",
                    required: [ "Data" ],
                    members: {
                        Data: {
                            type: "blob"
                        }
                    }
                },
                Template: {
                    type: "structure",
                    members: {
                        TemplateArn: {},
                        TemplateData: {}
                    }
                }
            }
        },
        S14: {
            type: "structure",
            required: [ "Data" ],
            members: {
                Data: {},
                Charset: {}
            }
        },
        S1k: {
            type: "structure",
            members: {
                SigningEnabled: {
                    type: "boolean"
                },
                Status: {},
                Tokens: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2m: {
            type: "structure",
            required: [ "Ip", "WarmupStatus", "WarmupPercentage" ],
            members: {
                Ip: {},
                WarmupStatus: {},
                WarmupPercentage: {
                    type: "integer"
                },
                PoolName: {}
            }
        },
        S2x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Domain: {},
                    SubscriptionStartDate: {
                        type: "timestamp"
                    },
                    InboxPlacementTrackingOption: {
                        type: "structure",
                        members: {
                            Global: {
                                type: "boolean"
                            },
                            TrackedIsps: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S35: {
            type: "structure",
            members: {
                ReportId: {},
                ReportName: {},
                Subject: {},
                FromEmailAddress: {},
                CreateDate: {
                    type: "timestamp"
                },
                DeliverabilityTestStatus: {}
            }
        },
        S37: {
            type: "structure",
            members: {
                InboxPercentage: {
                    type: "double"
                },
                SpamPercentage: {
                    type: "double"
                },
                MissingPercentage: {
                    type: "double"
                },
                SpfPercentage: {
                    type: "double"
                },
                DkimPercentage: {
                    type: "double"
                }
            }
        },
        S3f: {
            type: "structure",
            members: {
                CampaignId: {},
                ImageUrl: {},
                Subject: {},
                FromAddress: {},
                SendingIps: {
                    type: "list",
                    member: {}
                },
                FirstSeenDateTime: {
                    type: "timestamp"
                },
                LastSeenDateTime: {
                    type: "timestamp"
                },
                InboxCount: {
                    type: "long"
                },
                SpamCount: {
                    type: "long"
                },
                ReadRate: {
                    type: "double"
                },
                DeleteRate: {
                    type: "double"
                },
                ReadDeleteRate: {
                    type: "double"
                },
                ProjectedVolume: {
                    type: "long"
                },
                Esps: {
                    type: "list",
                    member: {}
                }
            }
        },
        S3p: {
            type: "structure",
            members: {
                InboxRawCount: {
                    type: "long"
                },
                SpamRawCount: {
                    type: "long"
                },
                ProjectedInbox: {
                    type: "long"
                },
                ProjectedSpam: {
                    type: "long"
                }
            }
        },
        S3q: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    IspName: {},
                    InboxRawCount: {
                        type: "long"
                    },
                    SpamRawCount: {
                        type: "long"
                    },
                    InboxPercentage: {
                        type: "double"
                    },
                    SpamPercentage: {
                        type: "double"
                    }
                }
            }
        },
        S59: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetDedicatedIps: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListConfigurationSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDedicatedIpPools: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDeliverabilityTestReports: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDomainDeliverabilityCampaigns: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListEmailIdentities: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        }
    }
};

AWS.apiLoader.services["ram"] = {};

AWS.RAM = AWS.Service.defineService("ram", [ "2018-01-04" ]);

AWS.apiLoader.services["ram"]["2018-01-04"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-01-04",
        endpointPrefix: "ram",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "RAM",
        serviceFullName: "AWS Resource Access Manager",
        serviceId: "RAM",
        signatureVersion: "v4",
        uid: "ram-2018-01-04"
    },
    operations: {
        AcceptResourceShareInvitation: {
            http: {
                requestUri: "/acceptresourceshareinvitation"
            },
            input: {
                type: "structure",
                required: [ "resourceShareInvitationArn" ],
                members: {
                    resourceShareInvitationArn: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareInvitation: {
                        shape: "S4"
                    },
                    clientToken: {}
                }
            }
        },
        AssociateResourceShare: {
            http: {
                requestUri: "/associateresourceshare"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {},
                    resourceArns: {
                        shape: "Sd"
                    },
                    principals: {
                        shape: "Se"
                    },
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareAssociations: {
                        shape: "S7"
                    },
                    clientToken: {}
                }
            }
        },
        AssociateResourceSharePermission: {
            http: {
                requestUri: "/associateresourcesharepermission"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn", "permissionArn" ],
                members: {
                    resourceShareArn: {},
                    permissionArn: {},
                    replace: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            }
        },
        CreateResourceShare: {
            http: {
                requestUri: "/createresourceshare"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    resourceArns: {
                        shape: "Sd"
                    },
                    principals: {
                        shape: "Se"
                    },
                    tags: {
                        shape: "Sj"
                    },
                    allowExternalPrincipals: {
                        type: "boolean"
                    },
                    clientToken: {},
                    permissionArns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShare: {
                        shape: "Sp"
                    },
                    clientToken: {}
                }
            }
        },
        DeleteResourceShare: {
            http: {
                method: "DELETE",
                requestUri: "/deleteresourceshare"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {
                        location: "querystring",
                        locationName: "resourceShareArn"
                    },
                    clientToken: {
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            }
        },
        DisassociateResourceShare: {
            http: {
                requestUri: "/disassociateresourceshare"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {},
                    resourceArns: {
                        shape: "Sd"
                    },
                    principals: {
                        shape: "Se"
                    },
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareAssociations: {
                        shape: "S7"
                    },
                    clientToken: {}
                }
            }
        },
        DisassociateResourceSharePermission: {
            http: {
                requestUri: "/disassociateresourcesharepermission"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn", "permissionArn" ],
                members: {
                    resourceShareArn: {},
                    permissionArn: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            }
        },
        EnableSharingWithAwsOrganization: {
            http: {
                requestUri: "/enablesharingwithawsorganization"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        GetPermission: {
            http: {
                requestUri: "/getpermission"
            },
            input: {
                type: "structure",
                required: [ "permissionArn" ],
                members: {
                    permissionArn: {},
                    permissionVersion: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permission: {
                        type: "structure",
                        members: {
                            arn: {},
                            version: {},
                            defaultVersion: {
                                type: "boolean"
                            },
                            name: {},
                            resourceType: {},
                            permission: {},
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdatedTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetResourcePolicies: {
            http: {
                requestUri: "/getresourcepolicies"
            },
            input: {
                type: "structure",
                required: [ "resourceArns" ],
                members: {
                    resourceArns: {
                        shape: "Sd"
                    },
                    principal: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policies: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        GetResourceShareAssociations: {
            http: {
                requestUri: "/getresourceshareassociations"
            },
            input: {
                type: "structure",
                required: [ "associationType" ],
                members: {
                    associationType: {},
                    resourceShareArns: {
                        shape: "S1a"
                    },
                    resourceArn: {},
                    principal: {},
                    associationStatus: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareAssociations: {
                        shape: "S7"
                    },
                    nextToken: {}
                }
            }
        },
        GetResourceShareInvitations: {
            http: {
                requestUri: "/getresourceshareinvitations"
            },
            input: {
                type: "structure",
                members: {
                    resourceShareInvitationArns: {
                        type: "list",
                        member: {}
                    },
                    resourceShareArns: {
                        shape: "S1a"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareInvitations: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetResourceShares: {
            http: {
                requestUri: "/getresourceshares"
            },
            input: {
                type: "structure",
                required: [ "resourceOwner" ],
                members: {
                    resourceShareArns: {
                        shape: "S1a"
                    },
                    resourceShareStatus: {},
                    resourceOwner: {},
                    name: {},
                    tagFilters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                tagKey: {},
                                tagValues: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShares: {
                        type: "list",
                        member: {
                            shape: "Sp"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPendingInvitationResources: {
            http: {
                requestUri: "/listpendinginvitationresources"
            },
            input: {
                type: "structure",
                required: [ "resourceShareInvitationArn" ],
                members: {
                    resourceShareInvitationArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resources: {
                        shape: "S1p"
                    },
                    nextToken: {}
                }
            }
        },
        ListPermissions: {
            http: {
                requestUri: "/listpermissions"
            },
            input: {
                type: "structure",
                members: {
                    resourceType: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permissions: {
                        shape: "S1u"
                    },
                    nextToken: {}
                }
            }
        },
        ListPrincipals: {
            http: {
                requestUri: "/listprincipals"
            },
            input: {
                type: "structure",
                required: [ "resourceOwner" ],
                members: {
                    resourceOwner: {},
                    resourceArn: {},
                    principals: {
                        shape: "Se"
                    },
                    resourceType: {},
                    resourceShareArns: {
                        shape: "S1a"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    principals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                resourceShareArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedTime: {
                                    type: "timestamp"
                                },
                                external: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListResourceSharePermissions: {
            http: {
                requestUri: "/listresourcesharepermissions"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permissions: {
                        shape: "S1u"
                    },
                    nextToken: {}
                }
            }
        },
        ListResourceTypes: {
            http: {
                requestUri: "/listresourcetypes"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                resourceType: {},
                                serviceName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListResources: {
            http: {
                requestUri: "/listresources"
            },
            input: {
                type: "structure",
                required: [ "resourceOwner" ],
                members: {
                    resourceOwner: {},
                    principal: {},
                    resourceType: {},
                    resourceArns: {
                        shape: "Sd"
                    },
                    resourceShareArns: {
                        shape: "S1a"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resources: {
                        shape: "S1p"
                    },
                    nextToken: {}
                }
            }
        },
        PromoteResourceShareCreatedFromPolicy: {
            http: {
                requestUri: "/promoteresourcesharecreatedfrompolicy"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {
                        location: "querystring",
                        locationName: "resourceShareArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        RejectResourceShareInvitation: {
            http: {
                requestUri: "/rejectresourceshareinvitation"
            },
            input: {
                type: "structure",
                required: [ "resourceShareInvitationArn" ],
                members: {
                    resourceShareInvitationArn: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareInvitation: {
                        shape: "S4"
                    },
                    clientToken: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tagresource"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn", "tags" ],
                members: {
                    resourceShareArn: {},
                    tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/untagresource"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn", "tagKeys" ],
                members: {
                    resourceShareArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResourceShare: {
            http: {
                requestUri: "/updateresourceshare"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {},
                    name: {},
                    allowExternalPrincipals: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShare: {
                        shape: "Sp"
                    },
                    clientToken: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                resourceShareInvitationArn: {},
                resourceShareName: {},
                resourceShareArn: {},
                senderAccountId: {},
                receiverAccountId: {},
                invitationTimestamp: {
                    type: "timestamp"
                },
                status: {},
                resourceShareAssociations: {
                    shape: "S7",
                    deprecated: true,
                    deprecatedMessage: "This member has been deprecated. Use ListPendingInvitationResources."
                }
            }
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    resourceShareArn: {},
                    resourceShareName: {},
                    associatedEntity: {},
                    associationType: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastUpdatedTime: {
                        type: "timestamp"
                    },
                    external: {
                        type: "boolean"
                    }
                }
            }
        },
        Sd: {
            type: "list",
            member: {}
        },
        Se: {
            type: "list",
            member: {}
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sp: {
            type: "structure",
            members: {
                resourceShareArn: {},
                name: {},
                owningAccountId: {},
                allowExternalPrincipals: {
                    type: "boolean"
                },
                status: {},
                statusMessage: {},
                tags: {
                    shape: "Sj"
                },
                creationTime: {
                    type: "timestamp"
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                featureSet: {}
            }
        },
        S1a: {
            type: "list",
            member: {}
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    type: {},
                    resourceShareArn: {},
                    resourceGroupArn: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastUpdatedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S1u: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    version: {},
                    defaultVersion: {
                        type: "boolean"
                    },
                    name: {},
                    resourceType: {},
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastUpdatedTime: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    paginators: {
        GetResourcePolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetResourceShareAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetResourceShareInvitations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetResourceShares: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPendingInvitationResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPrincipals: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["route53resolver"] = {};

AWS.Route53Resolver = AWS.Service.defineService("route53resolver", [ "2018-04-01" ]);

AWS.apiLoader.services["route53resolver"]["2018-04-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-04-01",
        endpointPrefix: "route53resolver",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Route53Resolver",
        serviceFullName: "Amazon Route 53 Resolver",
        serviceId: "Route53Resolver",
        signatureVersion: "v4",
        targetPrefix: "Route53Resolver",
        uid: "route53resolver-2018-04-01"
    },
    operations: {
        AssociateFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "FirewallRuleGroupId", "VpcId", "Priority", "Name" ],
                members: {
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    FirewallRuleGroupId: {},
                    VpcId: {},
                    Priority: {
                        type: "integer"
                    },
                    Name: {},
                    MutationProtection: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        AssociateResolverEndpointIpAddress: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId", "IpAddress" ],
                members: {
                    ResolverEndpointId: {},
                    IpAddress: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "Sn"
                    }
                }
            }
        },
        AssociateResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigId", "ResourceId" ],
                members: {
                    ResolverQueryLogConfigId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfigAssociation: {
                        shape: "Su"
                    }
                }
            }
        },
        AssociateResolverRule: {
            input: {
                type: "structure",
                required: [ "ResolverRuleId", "VPCId" ],
                members: {
                    ResolverRuleId: {},
                    Name: {},
                    VPCId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRuleAssociation: {
                        shape: "S10"
                    }
                }
            }
        },
        CreateFirewallDomainList: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "Name" ],
                members: {
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Name: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallDomainList: {
                        shape: "S14"
                    }
                }
            }
        },
        CreateFirewallRule: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "FirewallRuleGroupId", "FirewallDomainListId", "Priority", "Action", "Name" ],
                members: {
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    FirewallRuleGroupId: {},
                    FirewallDomainListId: {},
                    Priority: {
                        type: "integer"
                    },
                    Action: {},
                    BlockResponse: {},
                    BlockOverrideDomain: {},
                    BlockOverrideDnsType: {},
                    BlockOverrideTtl: {
                        type: "integer"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRule: {
                        shape: "S1e"
                    }
                }
            }
        },
        CreateFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "Name" ],
                members: {
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Name: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroup: {
                        shape: "S1h"
                    }
                }
            }
        },
        CreateResolverEndpoint: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "SecurityGroupIds", "Direction", "IpAddresses" ],
                members: {
                    CreatorRequestId: {},
                    Name: {},
                    SecurityGroupIds: {
                        shape: "So"
                    },
                    Direction: {},
                    IpAddresses: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SubnetId" ],
                            members: {
                                SubnetId: {},
                                Ip: {}
                            }
                        }
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "Name", "DestinationArn", "CreatorRequestId" ],
                members: {
                    Name: {},
                    DestinationArn: {},
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfig: {
                        shape: "S1t"
                    }
                }
            }
        },
        CreateResolverRule: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "RuleType", "DomainName" ],
                members: {
                    CreatorRequestId: {},
                    Name: {},
                    RuleType: {},
                    DomainName: {},
                    TargetIps: {
                        shape: "S1z"
                    },
                    ResolverEndpointId: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRule: {
                        shape: "S23"
                    }
                }
            }
        },
        DeleteFirewallDomainList: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId" ],
                members: {
                    FirewallDomainListId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallDomainList: {
                        shape: "S14"
                    }
                }
            }
        },
        DeleteFirewallRule: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId", "FirewallDomainListId" ],
                members: {
                    FirewallRuleGroupId: {},
                    FirewallDomainListId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRule: {
                        shape: "S1e"
                    }
                }
            }
        },
        DeleteFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId" ],
                members: {
                    FirewallRuleGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroup: {
                        shape: "S1h"
                    }
                }
            }
        },
        DeleteResolverEndpoint: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId" ],
                members: {
                    ResolverEndpointId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "Sn"
                    }
                }
            }
        },
        DeleteResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigId" ],
                members: {
                    ResolverQueryLogConfigId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfig: {
                        shape: "S1t"
                    }
                }
            }
        },
        DeleteResolverRule: {
            input: {
                type: "structure",
                required: [ "ResolverRuleId" ],
                members: {
                    ResolverRuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRule: {
                        shape: "S23"
                    }
                }
            }
        },
        DisassociateFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupAssociationId" ],
                members: {
                    FirewallRuleGroupAssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        DisassociateResolverEndpointIpAddress: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId", "IpAddress" ],
                members: {
                    ResolverEndpointId: {},
                    IpAddress: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "Sn"
                    }
                }
            }
        },
        DisassociateResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigId", "ResourceId" ],
                members: {
                    ResolverQueryLogConfigId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfigAssociation: {
                        shape: "Su"
                    }
                }
            }
        },
        DisassociateResolverRule: {
            input: {
                type: "structure",
                required: [ "VPCId", "ResolverRuleId" ],
                members: {
                    VPCId: {},
                    ResolverRuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRuleAssociation: {
                        shape: "S10"
                    }
                }
            }
        },
        GetFirewallConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallConfig: {
                        shape: "S2r"
                    }
                }
            }
        },
        GetFirewallDomainList: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId" ],
                members: {
                    FirewallDomainListId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallDomainList: {
                        shape: "S14"
                    }
                }
            }
        },
        GetFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId" ],
                members: {
                    FirewallRuleGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroup: {
                        shape: "S1h"
                    }
                }
            }
        },
        GetFirewallRuleGroupAssociation: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupAssociationId" ],
                members: {
                    FirewallRuleGroupAssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetFirewallRuleGroupPolicy: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupPolicy: {}
                }
            }
        },
        GetResolverDnssecConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverDNSSECConfig: {
                        shape: "S34"
                    }
                }
            }
        },
        GetResolverEndpoint: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId" ],
                members: {
                    ResolverEndpointId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "Sn"
                    }
                }
            }
        },
        GetResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigId" ],
                members: {
                    ResolverQueryLogConfigId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfig: {
                        shape: "S1t"
                    }
                }
            }
        },
        GetResolverQueryLogConfigAssociation: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigAssociationId" ],
                members: {
                    ResolverQueryLogConfigAssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfigAssociation: {
                        shape: "Su"
                    }
                }
            }
        },
        GetResolverQueryLogConfigPolicy: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfigPolicy: {}
                }
            }
        },
        GetResolverRule: {
            input: {
                type: "structure",
                required: [ "ResolverRuleId" ],
                members: {
                    ResolverRuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRule: {
                        shape: "S23"
                    }
                }
            }
        },
        GetResolverRuleAssociation: {
            input: {
                type: "structure",
                required: [ "ResolverRuleAssociationId" ],
                members: {
                    ResolverRuleAssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRuleAssociation: {
                        shape: "S10"
                    }
                }
            }
        },
        GetResolverRulePolicy: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRulePolicy: {}
                }
            }
        },
        ImportFirewallDomains: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId", "Operation", "DomainFileUrl" ],
                members: {
                    FirewallDomainListId: {},
                    Operation: {},
                    DomainFileUrl: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    Status: {},
                    StatusMessage: {}
                }
            }
        },
        ListFirewallConfigs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallConfigs: {
                        type: "list",
                        member: {
                            shape: "S2r"
                        }
                    }
                }
            }
        },
        ListFirewallDomainLists: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallDomainLists: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                CreatorRequestId: {},
                                ManagedOwnerName: {}
                            }
                        }
                    }
                }
            }
        },
        ListFirewallDomains: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId" ],
                members: {
                    FirewallDomainListId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Domains: {
                        shape: "S43"
                    }
                }
            }
        },
        ListFirewallRuleGroupAssociations: {
            input: {
                type: "structure",
                members: {
                    FirewallRuleGroupId: {},
                    VpcId: {},
                    Priority: {
                        type: "integer"
                    },
                    Status: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallRuleGroupAssociations: {
                        type: "list",
                        member: {
                            shape: "Sc"
                        }
                    }
                }
            }
        },
        ListFirewallRuleGroups: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallRuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                OwnerId: {},
                                CreatorRequestId: {},
                                ShareStatus: {}
                            }
                        }
                    }
                }
            }
        },
        ListFirewallRules: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId" ],
                members: {
                    FirewallRuleGroupId: {},
                    Priority: {
                        type: "integer"
                    },
                    Action: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallRules: {
                        type: "list",
                        member: {
                            shape: "S1e"
                        }
                    }
                }
            }
        },
        ListResolverDnssecConfigs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S4g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ResolverDnssecConfigs: {
                        type: "list",
                        member: {
                            shape: "S34"
                        }
                    }
                }
            }
        },
        ListResolverEndpointIpAddresses: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId" ],
                members: {
                    ResolverEndpointId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    IpAddresses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IpId: {},
                                SubnetId: {},
                                Ip: {},
                                Status: {},
                                StatusMessage: {},
                                CreationTime: {},
                                ModificationTime: {}
                            }
                        }
                    }
                }
            }
        },
        ListResolverEndpoints: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S4g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResolverEndpoints: {
                        type: "list",
                        member: {
                            shape: "Sn"
                        }
                    }
                }
            }
        },
        ListResolverQueryLogConfigAssociations: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S4g"
                    },
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    },
                    TotalFilteredCount: {
                        type: "integer"
                    },
                    ResolverQueryLogConfigAssociations: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    }
                }
            }
        },
        ListResolverQueryLogConfigs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S4g"
                    },
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    },
                    TotalFilteredCount: {
                        type: "integer"
                    },
                    ResolverQueryLogConfigs: {
                        type: "list",
                        member: {
                            shape: "S1t"
                        }
                    }
                }
            }
        },
        ListResolverRuleAssociations: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S4g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResolverRuleAssociations: {
                        type: "list",
                        member: {
                            shape: "S10"
                        }
                    }
                }
            }
        },
        ListResolverRules: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S4g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResolverRules: {
                        type: "list",
                        member: {
                            shape: "S23"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S7"
                    },
                    NextToken: {}
                }
            }
        },
        PutFirewallRuleGroupPolicy: {
            input: {
                type: "structure",
                required: [ "Arn", "FirewallRuleGroupPolicy" ],
                members: {
                    Arn: {},
                    FirewallRuleGroupPolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        PutResolverQueryLogConfigPolicy: {
            input: {
                type: "structure",
                required: [ "Arn", "ResolverQueryLogConfigPolicy" ],
                members: {
                    Arn: {},
                    ResolverQueryLogConfigPolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        PutResolverRulePolicy: {
            input: {
                type: "structure",
                required: [ "Arn", "ResolverRulePolicy" ],
                members: {
                    Arn: {},
                    ResolverRulePolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFirewallConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId", "FirewallFailOpen" ],
                members: {
                    ResourceId: {},
                    FirewallFailOpen: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallConfig: {
                        shape: "S2r"
                    }
                }
            }
        },
        UpdateFirewallDomains: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId", "Operation", "Domains" ],
                members: {
                    FirewallDomainListId: {},
                    Operation: {},
                    Domains: {
                        shape: "S43"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    Status: {},
                    StatusMessage: {}
                }
            }
        },
        UpdateFirewallRule: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId", "FirewallDomainListId" ],
                members: {
                    FirewallRuleGroupId: {},
                    FirewallDomainListId: {},
                    Priority: {
                        type: "integer"
                    },
                    Action: {},
                    BlockResponse: {},
                    BlockOverrideDomain: {},
                    BlockOverrideDnsType: {},
                    BlockOverrideTtl: {
                        type: "integer"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRule: {
                        shape: "S1e"
                    }
                }
            }
        },
        UpdateFirewallRuleGroupAssociation: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupAssociationId" ],
                members: {
                    FirewallRuleGroupAssociationId: {},
                    Priority: {
                        type: "integer"
                    },
                    MutationProtection: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        UpdateResolverDnssecConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId", "Validation" ],
                members: {
                    ResourceId: {},
                    Validation: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverDNSSECConfig: {
                        shape: "S34"
                    }
                }
            }
        },
        UpdateResolverEndpoint: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId" ],
                members: {
                    ResolverEndpointId: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "Sn"
                    }
                }
            }
        },
        UpdateResolverRule: {
            input: {
                type: "structure",
                required: [ "ResolverRuleId", "Config" ],
                members: {
                    ResolverRuleId: {},
                    Config: {
                        type: "structure",
                        members: {
                            Name: {},
                            TargetIps: {
                                shape: "S1z"
                            },
                            ResolverEndpointId: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRule: {
                        shape: "S23"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sc: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                FirewallRuleGroupId: {},
                VpcId: {},
                Name: {},
                Priority: {
                    type: "integer"
                },
                MutationProtection: {},
                ManagedOwnerName: {},
                Status: {},
                StatusMessage: {},
                CreatorRequestId: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        Sj: {
            type: "structure",
            members: {
                IpId: {},
                SubnetId: {},
                Ip: {}
            }
        },
        Sn: {
            type: "structure",
            members: {
                Id: {},
                CreatorRequestId: {},
                Arn: {},
                Name: {},
                SecurityGroupIds: {
                    shape: "So"
                },
                Direction: {},
                IpAddressCount: {
                    type: "integer"
                },
                HostVPCId: {},
                Status: {},
                StatusMessage: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        So: {
            type: "list",
            member: {}
        },
        Su: {
            type: "structure",
            members: {
                Id: {},
                ResolverQueryLogConfigId: {},
                ResourceId: {},
                Status: {},
                Error: {},
                ErrorMessage: {},
                CreationTime: {}
            }
        },
        S10: {
            type: "structure",
            members: {
                Id: {},
                ResolverRuleId: {},
                Name: {},
                VPCId: {},
                Status: {},
                StatusMessage: {}
            }
        },
        S14: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                DomainCount: {
                    type: "integer"
                },
                Status: {},
                StatusMessage: {},
                ManagedOwnerName: {},
                CreatorRequestId: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        S1e: {
            type: "structure",
            members: {
                FirewallRuleGroupId: {},
                FirewallDomainListId: {},
                Name: {},
                Priority: {
                    type: "integer"
                },
                Action: {},
                BlockResponse: {},
                BlockOverrideDomain: {},
                BlockOverrideDnsType: {},
                BlockOverrideTtl: {
                    type: "integer"
                },
                CreatorRequestId: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        S1h: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                RuleCount: {
                    type: "integer"
                },
                Status: {},
                StatusMessage: {},
                OwnerId: {},
                CreatorRequestId: {},
                ShareStatus: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        S1t: {
            type: "structure",
            members: {
                Id: {},
                OwnerId: {},
                Status: {},
                ShareStatus: {},
                AssociationCount: {
                    type: "integer"
                },
                Arn: {},
                Name: {},
                DestinationArn: {},
                CreatorRequestId: {},
                CreationTime: {}
            }
        },
        S1z: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Ip" ],
                members: {
                    Ip: {},
                    Port: {
                        type: "integer"
                    }
                }
            }
        },
        S23: {
            type: "structure",
            members: {
                Id: {},
                CreatorRequestId: {},
                Arn: {},
                DomainName: {},
                Status: {},
                StatusMessage: {},
                RuleType: {},
                Name: {},
                TargetIps: {
                    shape: "S1z"
                },
                ResolverEndpointId: {},
                OwnerId: {},
                ShareStatus: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        S2r: {
            type: "structure",
            members: {
                Id: {},
                ResourceId: {},
                OwnerId: {},
                FirewallFailOpen: {}
            }
        },
        S34: {
            type: "structure",
            members: {
                Id: {},
                OwnerId: {},
                ResourceId: {},
                ValidationStatus: {}
            }
        },
        S43: {
            type: "list",
            member: {}
        },
        S4g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        }
    },
    paginators: {
        ListFirewallConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallConfigs"
        },
        ListFirewallDomainLists: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallDomainLists"
        },
        ListFirewallDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Domains"
        },
        ListFirewallRuleGroupAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallRuleGroupAssociations"
        },
        ListFirewallRuleGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallRuleGroups"
        },
        ListFirewallRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallRules"
        },
        ListResolverDnssecConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverDnssecConfigs"
        },
        ListResolverEndpointIpAddresses: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "IpAddresses"
        },
        ListResolverEndpoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverEndpoints"
        },
        ListResolverQueryLogConfigAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverQueryLogConfigAssociations"
        },
        ListResolverQueryLogConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverQueryLogConfigs"
        },
        ListResolverRuleAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverRuleAssociations"
        },
        ListResolverRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverRules"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tags"
        }
    }
};

AWS.apiLoader.services["pinpointsmsvoice"] = {};

AWS.PinpointSMSVoice = AWS.Service.defineService("pinpointsmsvoice", [ "2018-09-05" ]);

AWS.apiLoader.services["pinpointsmsvoice"]["2018-09-05"] = {
    metadata: {
        apiVersion: "2018-09-05",
        endpointPrefix: "sms-voice.pinpoint",
        signingName: "sms-voice",
        serviceAbbreviation: "Pinpoint SMS Voice",
        serviceFullName: "Amazon Pinpoint SMS and Voice Service",
        serviceId: "Pinpoint SMS Voice",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "pinpoint-sms-voice-2018-09-05",
        signatureVersion: "v4"
    },
    operations: {
        CreateConfigurationSet: {
            http: {
                requestUri: "/v1/sms-voice/configuration-sets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateConfigurationSetEventDestination: {
            http: {
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestination: {
                        shape: "S6"
                    },
                    EventDestinationName: {}
                },
                required: [ "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSet: {
            http: {
                method: "DELETE",
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                },
                required: [ "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSetEventDestination: {
            http: {
                method: "DELETE",
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    }
                },
                required: [ "EventDestinationName", "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetConfigurationSetEventDestinations: {
            http: {
                method: "GET",
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                },
                required: [ "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {
                    EventDestinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CloudWatchLogsDestination: {
                                    shape: "S7"
                                },
                                Enabled: {
                                    type: "boolean"
                                },
                                KinesisFirehoseDestination: {
                                    shape: "Sa"
                                },
                                MatchingEventTypes: {
                                    shape: "Sb"
                                },
                                Name: {},
                                SnsDestination: {
                                    shape: "Sd"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListConfigurationSets: {
            http: {
                method: "GET",
                requestUri: "/v1/sms-voice/configuration-sets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSets: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        SendVoiceMessage: {
            http: {
                requestUri: "/v1/sms-voice/voice/message",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CallerId: {},
                    ConfigurationSetName: {},
                    Content: {
                        type: "structure",
                        members: {
                            CallInstructionsMessage: {
                                type: "structure",
                                members: {
                                    Text: {}
                                },
                                required: []
                            },
                            PlainTextMessage: {
                                type: "structure",
                                members: {
                                    LanguageCode: {},
                                    Text: {},
                                    VoiceId: {}
                                },
                                required: []
                            },
                            SSMLMessage: {
                                type: "structure",
                                members: {
                                    LanguageCode: {},
                                    Text: {},
                                    VoiceId: {}
                                },
                                required: []
                            }
                        }
                    },
                    DestinationPhoneNumber: {},
                    OriginationPhoneNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        UpdateConfigurationSetEventDestination: {
            http: {
                method: "PUT",
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestination: {
                        shape: "S6"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    }
                },
                required: [ "EventDestinationName", "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            members: {
                CloudWatchLogsDestination: {
                    shape: "S7"
                },
                Enabled: {
                    type: "boolean"
                },
                KinesisFirehoseDestination: {
                    shape: "Sa"
                },
                MatchingEventTypes: {
                    shape: "Sb"
                },
                SnsDestination: {
                    shape: "Sd"
                }
            },
            required: []
        },
        S7: {
            type: "structure",
            members: {
                IamRoleArn: {},
                LogGroupArn: {}
            },
            required: []
        },
        Sa: {
            type: "structure",
            members: {
                DeliveryStreamArn: {},
                IamRoleArn: {}
            },
            required: []
        },
        Sb: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "structure",
            members: {
                TopicArn: {}
            },
            required: []
        }
    }
};

AWS.apiLoader.services["quicksight"] = {};

AWS.QuickSight = AWS.Service.defineService("quicksight", [ "2018-04-01" ]);

AWS.apiLoader.services["quicksight"]["2018-04-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-04-01",
        endpointPrefix: "quicksight",
        jsonVersion: "1.0",
        protocol: "rest-json",
        serviceFullName: "Amazon QuickSight",
        serviceId: "QuickSight",
        signatureVersion: "v4",
        uid: "quicksight-2018-04-01"
    },
    operations: {
        CancelIngestion: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "IngestionId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    IngestionId: {
                        location: "uri",
                        locationName: "IngestionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    IngestionId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateAccountCustomization: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/customizations"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AccountCustomization" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    AccountCustomization: {
                        shape: "Sa"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AwsAccountId: {},
                    Namespace: {},
                    AccountCustomization: {
                        shape: "Sa"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateAnalysis: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId", "Name", "SourceEntity" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    },
                    Name: {},
                    Parameters: {
                        shape: "Sk"
                    },
                    Permissions: {
                        shape: "S11"
                    },
                    SourceEntity: {
                        shape: "S15"
                    },
                    ThemeArn: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AnalysisId: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateDashboard: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "Name", "SourceEntity" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    Name: {},
                    Parameters: {
                        shape: "Sk"
                    },
                    Permissions: {
                        shape: "S11"
                    },
                    SourceEntity: {
                        shape: "S1d"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    VersionDescription: {},
                    DashboardPublishOptions: {
                        shape: "S1g"
                    },
                    ThemeArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VersionArn: {},
                    DashboardId: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateDataSet: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/data-sets"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "Name", "PhysicalTableMap", "ImportMode" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {},
                    Name: {},
                    PhysicalTableMap: {
                        shape: "S1q"
                    },
                    LogicalTableMap: {
                        shape: "S2b"
                    },
                    ImportMode: {},
                    ColumnGroups: {
                        shape: "S35"
                    },
                    FieldFolders: {
                        shape: "S3b"
                    },
                    Permissions: {
                        shape: "S11"
                    },
                    RowLevelPermissionDataSet: {
                        shape: "S3g"
                    },
                    ColumnLevelPermissionRules: {
                        shape: "S3i"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSetId: {},
                    IngestionArn: {},
                    IngestionId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateDataSource: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/data-sources"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId", "Name", "Type" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {},
                    Name: {},
                    Type: {},
                    DataSourceParameters: {
                        shape: "S3p"
                    },
                    Credentials: {
                        shape: "S4q"
                    },
                    Permissions: {
                        shape: "S11"
                    },
                    VpcConnectionProperties: {
                        shape: "S4w"
                    },
                    SslProperties: {
                        shape: "S4x"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSourceId: {},
                    CreationStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateGroup: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {},
                    Description: {},
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "S53"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateGroupMembership: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}"
            },
            input: {
                type: "structure",
                required: [ "MemberName", "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    MemberName: {
                        location: "uri",
                        locationName: "MemberName"
                    },
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupMember: {
                        shape: "S57"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateIAMPolicyAssignment: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssignmentName", "AssignmentStatus", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentName: {},
                    AssignmentStatus: {},
                    PolicyArn: {},
                    Identities: {
                        shape: "S5b"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssignmentName: {},
                    AssignmentId: {},
                    AssignmentStatus: {},
                    PolicyArn: {},
                    Identities: {
                        shape: "S5b"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateIngestion: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}"
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "IngestionId", "AwsAccountId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    IngestionId: {
                        location: "uri",
                        locationName: "IngestionId"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    IngestionId: {},
                    IngestionStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateNamespace: {
            http: {
                requestUri: "/accounts/{AwsAccountId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace", "IdentityStore" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {},
                    IdentityStore: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {},
                    CapacityRegion: {},
                    CreationStatus: {},
                    IdentityStore: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateTemplate: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "SourceEntity" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    Name: {},
                    Permissions: {
                        shape: "S11"
                    },
                    SourceEntity: {
                        shape: "S5o"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    VersionDescription: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VersionArn: {},
                    TemplateId: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateTemplateAlias: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "AliasName", "TemplateVersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    },
                    TemplateVersionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateAlias: {
                        shape: "S5w"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateTheme: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "Name", "BaseThemeId", "Configuration" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    Name: {},
                    BaseThemeId: {},
                    VersionDescription: {},
                    Configuration: {
                        shape: "S5z"
                    },
                    Permissions: {
                        shape: "S11"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VersionArn: {},
                    ThemeId: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateThemeAlias: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "AliasName", "ThemeVersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    },
                    ThemeVersionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeAlias: {
                        shape: "S6e"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DeleteAccountCustomization: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/customizations"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteAnalysis: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    },
                    RecoveryWindowInDays: {
                        location: "querystring",
                        locationName: "recovery-window-in-days",
                        type: "long"
                    },
                    ForceDeleteWithoutRecovery: {
                        location: "querystring",
                        locationName: "force-delete-without-recovery",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    AnalysisId: {},
                    DeletionTime: {
                        type: "timestamp"
                    },
                    RequestId: {}
                }
            }
        },
        DeleteDashboard: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    DashboardId: {},
                    RequestId: {}
                }
            }
        },
        DeleteDataSet: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSetId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteDataSource: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSourceId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteGroup: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteGroupMembership: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}"
            },
            input: {
                type: "structure",
                required: [ "MemberName", "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    MemberName: {
                        location: "uri",
                        locationName: "MemberName"
                    },
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteIAMPolicyAssignment: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespace/{Namespace}/iam-policy-assignments/{AssignmentName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssignmentName", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentName: {
                        location: "uri",
                        locationName: "AssignmentName"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssignmentName: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteNamespace: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Arn: {},
                    TemplateId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteTemplateAlias: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "AliasName" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    TemplateId: {},
                    AliasName: {},
                    Arn: {},
                    RequestId: {}
                }
            }
        },
        DeleteTheme: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    ThemeId: {}
                }
            }
        },
        DeleteThemeAlias: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "AliasName" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AliasName: {},
                    Arn: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    ThemeId: {}
                }
            }
        },
        DeleteUser: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}"
            },
            input: {
                type: "structure",
                required: [ "UserName", "AwsAccountId", "Namespace" ],
                members: {
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteUserByPrincipalId: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/user-principals/{PrincipalId}"
            },
            input: {
                type: "structure",
                required: [ "PrincipalId", "AwsAccountId", "Namespace" ],
                members: {
                    PrincipalId: {
                        location: "uri",
                        locationName: "PrincipalId"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeAccountCustomization: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/customizations"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    Resolved: {
                        location: "querystring",
                        locationName: "resolved",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AwsAccountId: {},
                    Namespace: {},
                    AccountCustomization: {
                        shape: "Sa"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeAccountSettings: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/settings"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountSettings: {
                        type: "structure",
                        members: {
                            AccountName: {},
                            Edition: {},
                            DefaultNamespace: {},
                            NotificationEmail: {}
                        }
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeAnalysis: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Analysis: {
                        type: "structure",
                        members: {
                            AnalysisId: {},
                            Arn: {},
                            Name: {},
                            Status: {},
                            Errors: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Type: {},
                                        Message: {}
                                    }
                                }
                            },
                            DataSetArns: {
                                shape: "S7n"
                            },
                            ThemeArn: {},
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            Sheets: {
                                shape: "S7o"
                            }
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeAnalysisPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisId: {},
                    AnalysisArn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeDashboard: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    },
                    AliasName: {
                        location: "querystring",
                        locationName: "alias-name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Dashboard: {
                        type: "structure",
                        members: {
                            DashboardId: {},
                            Arn: {},
                            Name: {},
                            Version: {
                                type: "structure",
                                members: {
                                    CreatedTime: {
                                        type: "timestamp"
                                    },
                                    Errors: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Type: {},
                                                Message: {}
                                            }
                                        }
                                    },
                                    VersionNumber: {
                                        type: "long"
                                    },
                                    Status: {},
                                    Arn: {},
                                    SourceEntityArn: {},
                                    DataSetArns: {
                                        shape: "S7n"
                                    },
                                    Description: {},
                                    ThemeArn: {},
                                    Sheets: {
                                        shape: "S7o"
                                    }
                                }
                            },
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastPublishedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeDashboardPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardId: {},
                    DashboardArn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeDataSet: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSet: {
                        type: "structure",
                        members: {
                            Arn: {},
                            DataSetId: {},
                            Name: {},
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            PhysicalTableMap: {
                                shape: "S1q"
                            },
                            LogicalTableMap: {
                                shape: "S2b"
                            },
                            OutputColumns: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Description: {},
                                        Type: {}
                                    }
                                }
                            },
                            ImportMode: {},
                            ConsumedSpiceCapacityInBytes: {
                                type: "long"
                            },
                            ColumnGroups: {
                                shape: "S35"
                            },
                            FieldFolders: {
                                shape: "S3b"
                            },
                            RowLevelPermissionDataSet: {
                                shape: "S3g"
                            },
                            ColumnLevelPermissionRules: {
                                shape: "S3i"
                            }
                        }
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeDataSetPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSetArn: {},
                    DataSetId: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeDataSource: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSource: {
                        shape: "S8a"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeDataSourcePermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceArn: {},
                    DataSourceId: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeGroup: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "S53"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeIAMPolicyAssignment: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssignmentName", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentName: {
                        location: "uri",
                        locationName: "AssignmentName"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IAMPolicyAssignment: {
                        type: "structure",
                        members: {
                            AwsAccountId: {},
                            AssignmentId: {},
                            AssignmentName: {},
                            PolicyArn: {},
                            Identities: {
                                shape: "S5b"
                            },
                            AssignmentStatus: {}
                        }
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeIngestion: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "IngestionId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    IngestionId: {
                        location: "uri",
                        locationName: "IngestionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ingestion: {
                        shape: "S8m"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeNamespace: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Namespace: {
                        shape: "S8x"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeTemplate: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    },
                    AliasName: {
                        location: "querystring",
                        locationName: "alias-name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Template: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Name: {},
                            Version: {
                                type: "structure",
                                members: {
                                    CreatedTime: {
                                        type: "timestamp"
                                    },
                                    Errors: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Type: {},
                                                Message: {}
                                            }
                                        }
                                    },
                                    VersionNumber: {
                                        type: "long"
                                    },
                                    Status: {},
                                    DataSetConfigurations: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Placeholder: {},
                                                DataSetSchema: {
                                                    type: "structure",
                                                    members: {
                                                        ColumnSchemaList: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Name: {},
                                                                    DataType: {},
                                                                    GeographicRole: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                ColumnGroupSchemaList: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Name: {},
                                                            ColumnGroupColumnSchemaList: {
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    members: {
                                                                        Name: {}
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    Description: {},
                                    SourceEntityArn: {},
                                    ThemeArn: {},
                                    Sheets: {
                                        shape: "S7o"
                                    }
                                }
                            },
                            TemplateId: {},
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            CreatedTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeTemplateAlias: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "AliasName" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateAlias: {
                        shape: "S5w"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeTemplatePermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateId: {},
                    TemplateArn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeTheme: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    },
                    AliasName: {
                        location: "querystring",
                        locationName: "alias-name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Theme: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Name: {},
                            ThemeId: {},
                            Version: {
                                type: "structure",
                                members: {
                                    VersionNumber: {
                                        type: "long"
                                    },
                                    Arn: {},
                                    Description: {},
                                    BaseThemeId: {},
                                    CreatedTime: {
                                        type: "timestamp"
                                    },
                                    Configuration: {
                                        shape: "S5z"
                                    },
                                    Errors: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Type: {},
                                                Message: {}
                                            }
                                        }
                                    },
                                    Status: {}
                                }
                            },
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            Type: {}
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeThemeAlias: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "AliasName" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeAlias: {
                        shape: "S6e"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeThemePermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeId: {},
                    ThemeArn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeUser: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}"
            },
            input: {
                type: "structure",
                required: [ "UserName", "AwsAccountId", "Namespace" ],
                members: {
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S9z"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        GetDashboardEmbedUrl: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/embed-url"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "IdentityType" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    IdentityType: {
                        location: "querystring",
                        locationName: "creds-type"
                    },
                    SessionLifetimeInMinutes: {
                        location: "querystring",
                        locationName: "session-lifetime",
                        type: "long"
                    },
                    UndoRedoDisabled: {
                        location: "querystring",
                        locationName: "undo-redo-disabled",
                        type: "boolean"
                    },
                    ResetDisabled: {
                        location: "querystring",
                        locationName: "reset-disabled",
                        type: "boolean"
                    },
                    StatePersistenceEnabled: {
                        location: "querystring",
                        locationName: "state-persistence-enabled",
                        type: "boolean"
                    },
                    UserArn: {
                        location: "querystring",
                        locationName: "user-arn"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    AdditionalDashboardIds: {
                        location: "querystring",
                        locationName: "additional-dashboard-ids",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmbedUrl: {
                        shape: "Sa8"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        GetSessionEmbedUrl: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/session-embed-url"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    EntryPoint: {
                        location: "querystring",
                        locationName: "entry-point"
                    },
                    SessionLifetimeInMinutes: {
                        location: "querystring",
                        locationName: "session-lifetime",
                        type: "long"
                    },
                    UserArn: {
                        location: "querystring",
                        locationName: "user-arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmbedUrl: {
                        shape: "Sa8"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListAnalyses: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/analyses"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisSummaryList: {
                        shape: "Saf"
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListDashboardVersions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardVersionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                VersionNumber: {
                                    type: "long"
                                },
                                Status: {},
                                SourceEntityArn: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListDashboards: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardSummaryList: {
                        shape: "San"
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListDataSets: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                DataSetId: {},
                                Name: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                ImportMode: {},
                                RowLevelPermissionDataSet: {
                                    shape: "S3g"
                                },
                                ColumnLevelPermissionRulesApplied: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListDataSources: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sources"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSources: {
                        type: "list",
                        member: {
                            shape: "S8a"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListGroupMemberships: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupMemberList: {
                        type: "list",
                        member: {
                            shape: "S57"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListGroups: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupList: {
                        shape: "Sb1"
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListIAMPolicyAssignments: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentStatus: {},
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IAMPolicyAssignments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssignmentName: {},
                                AssignmentStatus: {}
                            }
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListIAMPolicyAssignmentsForUser: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/iam-policy-assignments"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "UserName", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ActiveAssignments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssignmentName: {},
                                PolicyArn: {}
                            }
                        }
                    },
                    RequestId: {},
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListIngestions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions"
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "AwsAccountId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ingestions: {
                        type: "list",
                        member: {
                            shape: "S8m"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListNamespaces: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Namespaces: {
                        type: "list",
                        member: {
                            shape: "S8x"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/resources/{ResourceArn}/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sb"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListTemplateAliases: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-result",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateAliasList: {
                        type: "list",
                        member: {
                            shape: "S5w"
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {},
                    NextToken: {}
                }
            }
        },
        ListTemplateVersions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/versions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateVersionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                VersionNumber: {
                                    type: "long"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Status: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListTemplates: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-result",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                TemplateId: {},
                                Name: {},
                                LatestVersionNumber: {
                                    type: "long"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListThemeAliases: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-result",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeAliasList: {
                        type: "list",
                        member: {
                            shape: "S6e"
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {},
                    NextToken: {}
                }
            }
        },
        ListThemeVersions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/versions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeVersionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VersionNumber: {
                                    type: "long"
                                },
                                Arn: {},
                                Description: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Status: {}
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListThemes: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                ThemeId: {},
                                LatestVersionNumber: {
                                    type: "long"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListUserGroups: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/groups"
            },
            input: {
                type: "structure",
                required: [ "UserName", "AwsAccountId", "Namespace" ],
                members: {
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupList: {
                        shape: "Sb1"
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListUsers: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserList: {
                        type: "list",
                        member: {
                            shape: "S9z"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        RegisterUser: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users"
            },
            input: {
                type: "structure",
                required: [ "IdentityType", "Email", "UserRole", "AwsAccountId", "Namespace" ],
                members: {
                    IdentityType: {},
                    Email: {},
                    UserRole: {},
                    IamArn: {},
                    SessionName: {},
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    UserName: {},
                    CustomPermissionsName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S9z"
                    },
                    UserInvitationUrl: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        RestoreAnalysis: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/restore/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    AnalysisId: {},
                    RequestId: {}
                }
            }
        },
        SearchAnalyses: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/search/analyses"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Filters" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Operator: {},
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisSummaryList: {
                        shape: "Saf"
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        SearchDashboards: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/search/dashboards"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Filters" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Operator" ],
                            members: {
                                Operator: {},
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardSummaryList: {
                        shape: "San"
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/resources/{ResourceArn}/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/resources/{ResourceArn}/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "keys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateAccountCustomization: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/customizations"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AccountCustomization" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    AccountCustomization: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AwsAccountId: {},
                    Namespace: {},
                    AccountCustomization: {
                        shape: "Sa"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateAccountSettings: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/settings"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DefaultNamespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DefaultNamespace: {},
                    NotificationEmail: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateAnalysis: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId", "Name", "SourceEntity" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    },
                    Name: {},
                    Parameters: {
                        shape: "Sk"
                    },
                    SourceEntity: {
                        shape: "S15"
                    },
                    ThemeArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AnalysisId: {},
                    UpdateStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateAnalysisPermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    },
                    GrantPermissions: {
                        shape: "Sd2"
                    },
                    RevokePermissions: {
                        shape: "Sd2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisArn: {},
                    AnalysisId: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDashboard: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "Name", "SourceEntity" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    Name: {},
                    SourceEntity: {
                        shape: "S1d"
                    },
                    Parameters: {
                        shape: "Sk"
                    },
                    VersionDescription: {},
                    DashboardPublishOptions: {
                        shape: "S1g"
                    },
                    ThemeArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VersionArn: {},
                    DashboardId: {},
                    CreationStatus: {},
                    Status: {
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateDashboardPermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    GrantPermissions: {
                        shape: "Sd2"
                    },
                    RevokePermissions: {
                        shape: "Sd2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardArn: {},
                    DashboardId: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDashboardPublishedVersion: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions/{VersionNumber}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "VersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    VersionNumber: {
                        location: "uri",
                        locationName: "VersionNumber",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardId: {},
                    DashboardArn: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateDataSet: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "Name", "PhysicalTableMap", "ImportMode" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    Name: {},
                    PhysicalTableMap: {
                        shape: "S1q"
                    },
                    LogicalTableMap: {
                        shape: "S2b"
                    },
                    ImportMode: {},
                    ColumnGroups: {
                        shape: "S35"
                    },
                    FieldFolders: {
                        shape: "S3b"
                    },
                    RowLevelPermissionDataSet: {
                        shape: "S3g"
                    },
                    ColumnLevelPermissionRules: {
                        shape: "S3i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSetId: {},
                    IngestionArn: {},
                    IngestionId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDataSetPermissions: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    GrantPermissions: {
                        shape: "S11"
                    },
                    RevokePermissions: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSetArn: {},
                    DataSetId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDataSource: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId", "Name" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    },
                    Name: {},
                    DataSourceParameters: {
                        shape: "S3p"
                    },
                    Credentials: {
                        shape: "S4q"
                    },
                    VpcConnectionProperties: {
                        shape: "S4w"
                    },
                    SslProperties: {
                        shape: "S4x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSourceId: {},
                    UpdateStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDataSourcePermissions: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    },
                    GrantPermissions: {
                        shape: "S11"
                    },
                    RevokePermissions: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceArn: {},
                    DataSourceId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateGroup: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    Description: {},
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "S53"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateIAMPolicyAssignment: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssignmentName", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentName: {
                        location: "uri",
                        locationName: "AssignmentName"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    AssignmentStatus: {},
                    PolicyArn: {},
                    Identities: {
                        shape: "S5b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssignmentName: {},
                    AssignmentId: {},
                    PolicyArn: {},
                    Identities: {
                        shape: "S5b"
                    },
                    AssignmentStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateTemplate: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "SourceEntity" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    SourceEntity: {
                        shape: "S5o"
                    },
                    VersionDescription: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateId: {},
                    Arn: {},
                    VersionArn: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateTemplateAlias: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "AliasName", "TemplateVersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    },
                    TemplateVersionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateAlias: {
                        shape: "S5w"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateTemplatePermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    GrantPermissions: {
                        shape: "Sd2"
                    },
                    RevokePermissions: {
                        shape: "Sd2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateId: {},
                    TemplateArn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateTheme: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "BaseThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    Name: {},
                    BaseThemeId: {},
                    VersionDescription: {},
                    Configuration: {
                        shape: "S5z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeId: {},
                    Arn: {},
                    VersionArn: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateThemeAlias: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "AliasName", "ThemeVersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    },
                    ThemeVersionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeAlias: {
                        shape: "S6e"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateThemePermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    GrantPermissions: {
                        shape: "Sd2"
                    },
                    RevokePermissions: {
                        shape: "Sd2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeId: {},
                    ThemeArn: {},
                    Permissions: {
                        shape: "S11"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateUser: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}"
            },
            input: {
                type: "structure",
                required: [ "UserName", "AwsAccountId", "Namespace", "Email", "Role" ],
                members: {
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    Email: {},
                    Role: {},
                    CustomPermissionsName: {},
                    UnapplyCustomPermissions: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S9z"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "structure",
            members: {
                DefaultTheme: {}
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sk: {
            type: "structure",
            members: {
                StringParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                IntegerParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                type: "list",
                                member: {
                                    type: "long"
                                }
                            }
                        }
                    }
                },
                DecimalParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                type: "list",
                                member: {
                                    type: "double"
                                }
                            }
                        }
                    }
                },
                DateTimeParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                type: "list",
                                member: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        S11: {
            type: "list",
            member: {
                shape: "S12"
            }
        },
        S12: {
            type: "structure",
            required: [ "Principal", "Actions" ],
            members: {
                Principal: {},
                Actions: {
                    type: "list",
                    member: {}
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                SourceTemplate: {
                    type: "structure",
                    required: [ "DataSetReferences", "Arn" ],
                    members: {
                        DataSetReferences: {
                            shape: "S17"
                        },
                        Arn: {}
                    }
                }
            }
        },
        S17: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DataSetPlaceholder", "DataSetArn" ],
                members: {
                    DataSetPlaceholder: {},
                    DataSetArn: {}
                }
            }
        },
        S1d: {
            type: "structure",
            members: {
                SourceTemplate: {
                    type: "structure",
                    required: [ "DataSetReferences", "Arn" ],
                    members: {
                        DataSetReferences: {
                            shape: "S17"
                        },
                        Arn: {}
                    }
                }
            }
        },
        S1g: {
            type: "structure",
            members: {
                AdHocFilteringOption: {
                    type: "structure",
                    members: {
                        AvailabilityStatus: {}
                    }
                },
                ExportToCSVOption: {
                    type: "structure",
                    members: {
                        AvailabilityStatus: {}
                    }
                },
                SheetControlsOption: {
                    type: "structure",
                    members: {
                        VisibilityState: {}
                    }
                }
            }
        },
        S1q: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    RelationalTable: {
                        type: "structure",
                        required: [ "DataSourceArn", "Name", "InputColumns" ],
                        members: {
                            DataSourceArn: {},
                            Catalog: {},
                            Schema: {},
                            Name: {},
                            InputColumns: {
                                shape: "S1x"
                            }
                        }
                    },
                    CustomSql: {
                        type: "structure",
                        required: [ "DataSourceArn", "Name", "SqlQuery" ],
                        members: {
                            DataSourceArn: {},
                            Name: {},
                            SqlQuery: {},
                            Columns: {
                                shape: "S1x"
                            }
                        }
                    },
                    S3Source: {
                        type: "structure",
                        required: [ "DataSourceArn", "InputColumns" ],
                        members: {
                            DataSourceArn: {},
                            UploadSettings: {
                                type: "structure",
                                members: {
                                    Format: {},
                                    StartFromRow: {
                                        type: "integer"
                                    },
                                    ContainsHeader: {
                                        type: "boolean"
                                    },
                                    TextQualifier: {},
                                    Delimiter: {}
                                }
                            },
                            InputColumns: {
                                shape: "S1x"
                            }
                        }
                    }
                }
            }
        },
        S1x: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Type" ],
                members: {
                    Name: {},
                    Type: {}
                }
            }
        },
        S2b: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "Alias", "Source" ],
                members: {
                    Alias: {},
                    DataTransforms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProjectOperation: {
                                    type: "structure",
                                    required: [ "ProjectedColumns" ],
                                    members: {
                                        ProjectedColumns: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                },
                                FilterOperation: {
                                    type: "structure",
                                    required: [ "ConditionExpression" ],
                                    members: {
                                        ConditionExpression: {}
                                    }
                                },
                                CreateColumnsOperation: {
                                    type: "structure",
                                    required: [ "Columns" ],
                                    members: {
                                        Columns: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "ColumnName", "ColumnId", "Expression" ],
                                                members: {
                                                    ColumnName: {},
                                                    ColumnId: {},
                                                    Expression: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                RenameColumnOperation: {
                                    type: "structure",
                                    required: [ "ColumnName", "NewColumnName" ],
                                    members: {
                                        ColumnName: {},
                                        NewColumnName: {}
                                    }
                                },
                                CastColumnTypeOperation: {
                                    type: "structure",
                                    required: [ "ColumnName", "NewColumnType" ],
                                    members: {
                                        ColumnName: {},
                                        NewColumnType: {},
                                        Format: {}
                                    }
                                },
                                TagColumnOperation: {
                                    type: "structure",
                                    required: [ "ColumnName", "Tags" ],
                                    members: {
                                        ColumnName: {},
                                        Tags: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    ColumnGeographicRole: {},
                                                    ColumnDescription: {
                                                        type: "structure",
                                                        members: {
                                                            Text: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Source: {
                        type: "structure",
                        members: {
                            JoinInstruction: {
                                type: "structure",
                                required: [ "LeftOperand", "RightOperand", "Type", "OnClause" ],
                                members: {
                                    LeftOperand: {},
                                    RightOperand: {},
                                    LeftJoinKeyProperties: {
                                        shape: "S31"
                                    },
                                    RightJoinKeyProperties: {
                                        shape: "S31"
                                    },
                                    Type: {},
                                    OnClause: {}
                                }
                            },
                            PhysicalTableId: {}
                        }
                    }
                }
            }
        },
        S31: {
            type: "structure",
            members: {
                UniqueKey: {
                    type: "boolean"
                }
            }
        },
        S35: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    GeoSpatialColumnGroup: {
                        type: "structure",
                        required: [ "Name", "CountryCode", "Columns" ],
                        members: {
                            Name: {},
                            CountryCode: {},
                            Columns: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S3b: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    description: {},
                    columns: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S3g: {
            type: "structure",
            required: [ "Arn", "PermissionPolicy" ],
            members: {
                Namespace: {},
                Arn: {},
                PermissionPolicy: {}
            }
        },
        S3i: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Principals: {
                        type: "list",
                        member: {}
                    },
                    ColumnNames: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S3p: {
            type: "structure",
            members: {
                AmazonElasticsearchParameters: {
                    type: "structure",
                    required: [ "Domain" ],
                    members: {
                        Domain: {}
                    }
                },
                AthenaParameters: {
                    type: "structure",
                    members: {
                        WorkGroup: {}
                    }
                },
                AuroraParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                AuroraPostgreSqlParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                AwsIotAnalyticsParameters: {
                    type: "structure",
                    required: [ "DataSetName" ],
                    members: {
                        DataSetName: {}
                    }
                },
                JiraParameters: {
                    type: "structure",
                    required: [ "SiteBaseUrl" ],
                    members: {
                        SiteBaseUrl: {}
                    }
                },
                MariaDbParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                MySqlParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                OracleParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                PostgreSqlParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                PrestoParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Catalog" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Catalog: {}
                    }
                },
                RdsParameters: {
                    type: "structure",
                    required: [ "InstanceId", "Database" ],
                    members: {
                        InstanceId: {},
                        Database: {}
                    }
                },
                RedshiftParameters: {
                    type: "structure",
                    required: [ "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {},
                        ClusterId: {}
                    }
                },
                S3Parameters: {
                    type: "structure",
                    required: [ "ManifestFileLocation" ],
                    members: {
                        ManifestFileLocation: {
                            type: "structure",
                            required: [ "Bucket", "Key" ],
                            members: {
                                Bucket: {},
                                Key: {}
                            }
                        }
                    }
                },
                ServiceNowParameters: {
                    type: "structure",
                    required: [ "SiteBaseUrl" ],
                    members: {
                        SiteBaseUrl: {}
                    }
                },
                SnowflakeParameters: {
                    type: "structure",
                    required: [ "Host", "Database", "Warehouse" ],
                    members: {
                        Host: {},
                        Database: {},
                        Warehouse: {}
                    }
                },
                SparkParameters: {
                    type: "structure",
                    required: [ "Host", "Port" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        }
                    }
                },
                SqlServerParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                TeradataParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                TwitterParameters: {
                    type: "structure",
                    required: [ "Query", "MaxRows" ],
                    members: {
                        Query: {},
                        MaxRows: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S4q: {
            type: "structure",
            members: {
                CredentialPair: {
                    type: "structure",
                    required: [ "Username", "Password" ],
                    members: {
                        Username: {},
                        Password: {},
                        AlternateDataSourceParameters: {
                            shape: "S4u"
                        }
                    }
                },
                CopySourceArn: {}
            },
            sensitive: true
        },
        S4u: {
            type: "list",
            member: {
                shape: "S3p"
            }
        },
        S4w: {
            type: "structure",
            required: [ "VpcConnectionArn" ],
            members: {
                VpcConnectionArn: {}
            }
        },
        S4x: {
            type: "structure",
            members: {
                DisableSsl: {
                    type: "boolean"
                }
            }
        },
        S53: {
            type: "structure",
            members: {
                Arn: {},
                GroupName: {},
                Description: {},
                PrincipalId: {}
            }
        },
        S57: {
            type: "structure",
            members: {
                Arn: {},
                MemberName: {}
            }
        },
        S5b: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        },
        S5o: {
            type: "structure",
            members: {
                SourceAnalysis: {
                    type: "structure",
                    required: [ "Arn", "DataSetReferences" ],
                    members: {
                        Arn: {},
                        DataSetReferences: {
                            shape: "S17"
                        }
                    }
                },
                SourceTemplate: {
                    type: "structure",
                    required: [ "Arn" ],
                    members: {
                        Arn: {}
                    }
                }
            }
        },
        S5w: {
            type: "structure",
            members: {
                AliasName: {},
                Arn: {},
                TemplateVersionNumber: {
                    type: "long"
                }
            }
        },
        S5z: {
            type: "structure",
            members: {
                DataColorPalette: {
                    type: "structure",
                    members: {
                        Colors: {
                            shape: "S61"
                        },
                        MinMaxGradient: {
                            shape: "S61"
                        },
                        EmptyFillColor: {}
                    }
                },
                UIColorPalette: {
                    type: "structure",
                    members: {
                        PrimaryForeground: {},
                        PrimaryBackground: {},
                        SecondaryForeground: {},
                        SecondaryBackground: {},
                        Accent: {},
                        AccentForeground: {},
                        Danger: {},
                        DangerForeground: {},
                        Warning: {},
                        WarningForeground: {},
                        Success: {},
                        SuccessForeground: {},
                        Dimension: {},
                        DimensionForeground: {},
                        Measure: {},
                        MeasureForeground: {}
                    }
                },
                Sheet: {
                    type: "structure",
                    members: {
                        Tile: {
                            type: "structure",
                            members: {
                                Border: {
                                    type: "structure",
                                    members: {
                                        Show: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        },
                        TileLayout: {
                            type: "structure",
                            members: {
                                Gutter: {
                                    type: "structure",
                                    members: {
                                        Show: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                Margin: {
                                    type: "structure",
                                    members: {
                                        Show: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S61: {
            type: "list",
            member: {}
        },
        S6e: {
            type: "structure",
            members: {
                Arn: {},
                AliasName: {},
                ThemeVersionNumber: {
                    type: "long"
                }
            }
        },
        S7n: {
            type: "list",
            member: {}
        },
        S7o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SheetId: {},
                    Name: {}
                }
            }
        },
        S8a: {
            type: "structure",
            members: {
                Arn: {},
                DataSourceId: {},
                Name: {},
                Type: {},
                Status: {},
                CreatedTime: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                },
                DataSourceParameters: {
                    shape: "S3p"
                },
                AlternateDataSourceParameters: {
                    shape: "S4u"
                },
                VpcConnectionProperties: {
                    shape: "S4w"
                },
                SslProperties: {
                    shape: "S4x"
                },
                ErrorInfo: {
                    type: "structure",
                    members: {
                        Type: {},
                        Message: {}
                    }
                }
            }
        },
        S8m: {
            type: "structure",
            required: [ "Arn", "IngestionStatus", "CreatedTime" ],
            members: {
                Arn: {},
                IngestionId: {},
                IngestionStatus: {},
                ErrorInfo: {
                    type: "structure",
                    members: {
                        Type: {},
                        Message: {}
                    }
                },
                RowInfo: {
                    type: "structure",
                    members: {
                        RowsIngested: {
                            type: "long"
                        },
                        RowsDropped: {
                            type: "long"
                        }
                    }
                },
                QueueInfo: {
                    type: "structure",
                    required: [ "WaitingOnIngestion", "QueuedIngestion" ],
                    members: {
                        WaitingOnIngestion: {},
                        QueuedIngestion: {}
                    }
                },
                CreatedTime: {
                    type: "timestamp"
                },
                IngestionTimeInSeconds: {
                    type: "long"
                },
                IngestionSizeInBytes: {
                    type: "long"
                },
                RequestSource: {},
                RequestType: {}
            }
        },
        S8x: {
            type: "structure",
            members: {
                Name: {},
                Arn: {},
                CapacityRegion: {},
                CreationStatus: {},
                IdentityStore: {},
                NamespaceError: {
                    type: "structure",
                    members: {
                        Type: {},
                        Message: {}
                    }
                }
            }
        },
        S9z: {
            type: "structure",
            members: {
                Arn: {},
                UserName: {},
                Email: {},
                Role: {},
                IdentityType: {},
                Active: {
                    type: "boolean"
                },
                PrincipalId: {},
                CustomPermissionsName: {}
            }
        },
        Sa8: {
            type: "string",
            sensitive: true
        },
        Saf: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    AnalysisId: {},
                    Name: {},
                    Status: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        San: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    DashboardId: {},
                    Name: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    PublishedVersionNumber: {
                        type: "long"
                    },
                    LastPublishedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        Sb1: {
            type: "list",
            member: {
                shape: "S53"
            }
        },
        Sd2: {
            type: "list",
            member: {
                shape: "S12"
            }
        }
    },
    paginators: {
        ListAnalyses: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AnalysisSummaryList"
        },
        ListDashboardVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DashboardVersionSummaryList"
        },
        ListDashboards: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DashboardSummaryList"
        },
        ListDataSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DataSetSummaries"
        },
        ListDataSources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DataSources"
        },
        ListIngestions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Ingestions"
        },
        ListNamespaces: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Namespaces"
        },
        ListTemplateAliases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TemplateAliasList"
        },
        ListTemplateVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TemplateVersionSummaryList"
        },
        ListTemplates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TemplateSummaryList"
        },
        ListThemeVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ThemeVersionSummaryList"
        },
        ListThemes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ThemeSummaryList"
        },
        SearchAnalyses: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AnalysisSummaryList"
        },
        SearchDashboards: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DashboardSummaryList"
        }
    }
};

